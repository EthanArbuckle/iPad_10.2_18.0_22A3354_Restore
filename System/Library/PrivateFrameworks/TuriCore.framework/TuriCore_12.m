void CoreML::validateRankExists(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  BOOL v4;
  __int128 *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string __p;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  if (*((_DWORD *)this + 18))
    v4 = *((_DWORD *)this + 24) == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = (__int128 *)*((_QWORD *)this + 14);
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
    }
    else
    {
      v6 = *v5;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    }
    v7 = std::string::insert(&__p, 0, "Layer '");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v12, "' must have rank specified for its input and output.");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    CoreML::Result::Result(a2, 13);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)v13);
  }
  else
  {
    CoreML::Result::Result(a2);
  }
}

void sub_218353A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateFlattenTo2DLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  std::string *v10;
  __int128 v11;
  __n128 result;
  std::string v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  __n128 __p;
  uint64_t v18;

  CoreML::Result::Result((CoreML::Result *)&v16);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
  v16 = *(_QWORD *)v14;
  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)&v14[8];
  v18 = v15;
  v5 = CoreML::Result::good((CoreML::Result *)&v16);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
    v16 = *(_QWORD *)v14;
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p.n128_u64[0]);
    __p = *(__n128 *)&v14[8];
    v18 = v15;
  }
  if (*((_DWORD *)a1 + 35) == 1130)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::FlattenTo2DLayerParams::default_instance((CoreML::Specification::FlattenTo2DLayerParams *)v5);
  if (*((int *)a1 + 18) < 1 || ((v7 = *(int *)(a1[10][1] + 36), v8 = v6[2], v8 >= -v7) ? (v9 = v8 < v7) : (v9 = 0), v9))
  {
    *(_QWORD *)a2 = v16;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v18;
  }
  else
  {
    std::operator+<char>();
    v10 = std::string::append(&v13, "' layer.");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(_QWORD *)&v14[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v14[23] & 0x80000000) != 0)
      operator delete(*(void **)v14);
    if (SHIBYTE(v18) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_218353C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateExpandDimsLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  CoreML::Specification::ExpandDimsLayerParams *v6;
  uint64_t v7;
  int *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  uint64_t *v18;
  __int128 v19;
  int v20;
  int v21;
  unsigned int *v22;
  uint64_t *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  std::string::size_type size;
  uint64_t i;
  uint64_t *v32;
  int v33;
  __int32 v34;
  unsigned int *v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  __int32 *v41;
  __int32 v42;
  int *v43;
  std::string::size_type v44;
  int v46;
  int v47;
  std::string::size_type v48;
  int *v49;
  int *v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  int *v55;
  int v56;
  int v57;
  uint64_t *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  char v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  uint64_t *v69;
  __int128 v70;
  uint64_t *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  _BYTE __p[24];
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;

  CoreML::Result::Result((CoreML::Result *)&v87);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)__p);
  v87 = *(_QWORD *)__p;
  if (SHIBYTE(v89) < 0)
    operator delete((void *)v88);
  v88 = *(_OWORD *)&__p[8];
  v89 = v86;
  v5 = CoreML::Result::good((CoreML::Result *)&v87);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)__p);
    v87 = *(_QWORD *)__p;
    if (SHIBYTE(v89) < 0)
      operator delete((void *)v88);
    v88 = *(_OWORD *)&__p[8];
    v89 = v86;
  }
  if (*((_DWORD *)a1 + 35) == 1125)
    v6 = (CoreML::Specification::ExpandDimsLayerParams *)a1[16];
  else
    v6 = (CoreML::Specification::ExpandDimsLayerParams *)CoreML::Specification::ExpandDimsLayerParams::default_instance((CoreML::Specification::ExpandDimsLayerParams *)v5);
  if (*((_DWORD *)v6 + 4))
  {
    v7 = 0;
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_QWORD *)__p = &__p[8];
    while (1)
    {
      v8 = (int *)(*((_DWORD *)a1 + 35) == 1125
                 ? a1[16]
                 : CoreML::Specification::ExpandDimsLayerParams::default_instance(v6));
      if (v7 >= v8[4])
        break;
      LODWORD(v81.__r_.__value_.__l.__data_) = 0;
      if (*((_DWORD *)a1 + 35) == 1125)
        v9 = a1[16];
      else
        v9 = CoreML::Specification::ExpandDimsLayerParams::default_instance((CoreML::Specification::ExpandDimsLayerParams *)v8);
      v10 = *(_DWORD *)(v9[3] + 8 * v7 + 8);
      LODWORD(v81.__r_.__value_.__l.__data_) = v10;
      v11 = *(_QWORD *)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v12 = (uint64_t *)&__p[8];
        do
        {
          v13 = (uint64_t *)v11;
          v14 = v12;
          v15 = *(_DWORD *)(v11 + 28);
          v16 = (uint64_t *)(v11 + 8);
          if (v15 >= v10)
          {
            v16 = v13;
            v12 = v13;
          }
          v11 = *v16;
        }
        while (v11);
        if (v12 != (uint64_t *)&__p[8])
        {
          if (v15 < v10)
            v13 = v14;
          if (*((_DWORD *)v13 + 7) <= v10)
          {
            v23 = a1[14];
            if (*((char *)v23 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v23, v23[1]);
            }
            else
            {
              v24 = *(_OWORD *)v23;
              v82.__r_.__value_.__r.__words[2] = v23[2];
              *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v24;
            }
            v60 = std::string::insert(&v82, 0, "ExpandDims Layer '");
            v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            v83.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            v62 = std::string::append(&v83, "': all the values in the 'axes' parameter must be unique.");
            v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v84.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v82.__r_.__value_.__l.__data_);
            goto LABEL_109;
          }
        }
      }
      v6 = (CoreML::Specification::ExpandDimsLayerParams *)std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)__p, (int *)&v81, &v81);
      ++v7;
    }
    if (*((int *)a1 + 18) >= 1 && *((_DWORD *)a1 + 24) >= 1)
    {
      v20 = *(_DWORD *)(a1[10][1] + 36);
      v21 = *(_DWORD *)(a1[13][1] + 36);
      if (*((_DWORD *)a1 + 35) == 1125)
        v22 = (unsigned int *)a1[16];
      else
        v22 = (unsigned int *)CoreML::Specification::ExpandDimsLayerParams::default_instance((CoreML::Specification::ExpandDimsLayerParams *)v8);
      v29 = v22[4];
      if ((_DWORD)v29 + v20 != v21)
      {
        v58 = a1[14];
        if (*((char *)v58 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v58, v58[1]);
        }
        else
        {
          v59 = *(_OWORD *)v58;
          v82.__r_.__value_.__r.__words[2] = v58[2];
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v59;
        }
        v65 = std::string::insert(&v82, 0, "ExpandDims Layer '");
        v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        v67 = std::string::append(&v83, "': input rank plus the length of the axes parameter must equal output rank.");
        v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
LABEL_109:
        CoreML::Result::Result((_DWORD *)a2, 13);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        goto LABEL_132;
      }
      memset(&v84, 0, sizeof(v84));
      if ((int)v29 < 1)
      {
        v43 = 0;
LABEL_100:
        v54 = *v43;
      }
      else
      {
        size = 0;
        for (i = 0; i != v29; ++i)
        {
          if (*((_DWORD *)a1 + 35) == 1125)
          {
            v32 = a1[16];
          }
          else
          {
            v32 = CoreML::Specification::ExpandDimsLayerParams::default_instance((CoreML::Specification::ExpandDimsLayerParams *)v22);
            size = v84.__r_.__value_.__l.__size_;
          }
          v33 = *(_DWORD *)(v32[3] + 8 * i + 8);
          v34 = (v21 & (v33 >> 31)) + v33;
          v22 = (unsigned int *)wmemchr((__int32 *)v84.__r_.__value_.__l.__data_, v34, (uint64_t)(size - v84.__r_.__value_.__r.__words[0]) >> 2);
          if (v22)
            v35 = v22;
          else
            v35 = (unsigned int *)size;
          if (v35 != (unsigned int *)v84.__r_.__value_.__l.__size_)
          {
            v71 = a1[14];
            if (*((char *)v71 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v81, (const std::string::value_type *)*v71, v71[1]);
            }
            else
            {
              v72 = *(_OWORD *)v71;
              v81.__r_.__value_.__r.__words[2] = v71[2];
              *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v72;
            }
            v77 = std::string::insert(&v81, 0, "ExpandDims Layer '");
            v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
            v82.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v78;
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            v79 = std::string::append(&v82, "': axes parameter list cannot have the same value more than once.");
            v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v83.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v82.__r_.__value_.__l.__data_);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v81.__r_.__value_.__l.__data_);
            goto LABEL_126;
          }
          if ((unint64_t)v35 >= v84.__r_.__value_.__r.__words[2])
          {
            v22 = (unsigned int *)v84.__r_.__value_.__r.__words[0];
            v36 = (uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 2;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v38 = v84.__r_.__value_.__r.__words[2] - v84.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v84.__r_.__value_.__r.__words[2] - v84.__r_.__value_.__r.__words[0]) >> 1 > v37)
              v37 = v38 >> 1;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
              v39 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
            {
              v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v84.__r_.__value_.__r.__words[2], v39);
              v35 = (unsigned int *)v84.__r_.__value_.__l.__size_;
              v22 = (unsigned int *)v84.__r_.__value_.__r.__words[0];
            }
            else
            {
              v40 = 0;
            }
            v41 = (__int32 *)&v40[4 * v36];
            *v41 = v34;
            size = (std::string::size_type)(v41 + 1);
            while (v35 != v22)
            {
              v42 = *--v35;
              *--v41 = v42;
            }
            v84.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
            v84.__r_.__value_.__l.__size_ = size;
            v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40[4 * v39];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v35 = v34;
            size = (std::string::size_type)(v35 + 1);
          }
          v84.__r_.__value_.__l.__size_ = size;
        }
        v43 = (int *)v84.__r_.__value_.__r.__words[0];
        v44 = v84.__r_.__value_.__r.__words[0] + 4;
        if (v84.__r_.__value_.__r.__words[0] == size || v44 == size)
          goto LABEL_100;
        v46 = *(_DWORD *)v84.__r_.__value_.__l.__data_;
        v47 = *(_DWORD *)v84.__r_.__value_.__l.__data_;
        v48 = v84.__r_.__value_.__r.__words[0] + 4;
        v49 = (int *)v84.__r_.__value_.__r.__words[0];
        v50 = (int *)(v84.__r_.__value_.__r.__words[0] + 4);
        do
        {
          v52 = *v50++;
          v51 = v52;
          v53 = v47 < v52;
          if (v47 <= v52)
            v47 = v51;
          if (v53)
            v49 = (int *)v48;
          v48 = (std::string::size_type)v50;
        }
        while (v50 != (int *)size);
        v54 = *v49;
        v55 = (int *)(v84.__r_.__value_.__r.__words[0] + 4);
        do
        {
          v57 = *v55++;
          v56 = v57;
          if (v57 < v46)
          {
            v46 = v56;
            v43 = (int *)v44;
          }
          v44 = (std::string::size_type)v55;
        }
        while (v55 != (int *)size);
      }
      if (v54 >= v21 || *v43 < 0)
      {
        v69 = a1[14];
        if (*((char *)v69 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, (const std::string::value_type *)*v69, v69[1]);
        }
        else
        {
          v70 = *(_OWORD *)v69;
          v81.__r_.__value_.__r.__words[2] = v69[2];
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v70;
        }
        v73 = std::string::insert(&v81, 0, "ExpandDims Layer '");
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        v75 = std::string::append(&v82, "': axes refers to a dimension that exceeds the output rank.");
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
LABEL_126:
        CoreML::Result::Result((_DWORD *)a2, 13);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
        v64 = 0;
      }
      else
      {
        v64 = 1;
      }
      if (v84.__r_.__value_.__r.__words[0])
      {
        v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((v64 & 1) == 0)
      {
LABEL_132:
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)__p, *(_QWORD **)&__p[8]);
        goto LABEL_133;
      }
    }
    *(_QWORD *)a2 = v87;
    *(_OWORD *)(a2 + 8) = v88;
    *(_QWORD *)(a2 + 24) = v89;
    v88 = 0uLL;
    v89 = 0;
    goto LABEL_132;
  }
  v18 = a1[14];
  if (*((char *)v18 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)*v18, v18[1]);
  }
  else
  {
    v19 = *(_OWORD *)v18;
    v83.__r_.__value_.__r.__words[2] = v18[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v19;
  }
  v25 = std::string::insert(&v83, 0, "ExpandDims Layer '");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = std::string::append(&v84, "': length of the 'axes' parameter cannot be 0.");
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v27->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_133:
  if (SHIBYTE(v89) < 0)
    operator delete((void *)v88);
}

void sub_218354444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,_QWORD *a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a37, a38);
  if (*(char *)(v42 - 97) < 0)
    operator delete(*(void **)(v42 - 120));
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateSqueezeLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  CoreML::Specification::SqueezeLayerParams *v7;
  uint64_t v8;
  int *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  uint64_t *v19;
  __int128 v20;
  int v21;
  int v22;
  unsigned int *v23;
  uint64_t *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  std::string::size_type size;
  uint64_t i;
  uint64_t *v34;
  int v35;
  __int32 v36;
  unsigned int *v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  __int32 *v43;
  __int32 v44;
  int *v45;
  std::string::size_type v46;
  int v48;
  int v49;
  std::string::size_type v50;
  int *v51;
  int *v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  int *v57;
  int v58;
  int v59;
  uint64_t *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  char v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  uint64_t *v71;
  __int128 v72;
  uint64_t *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  __int128 v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  _BYTE __p[24];
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;

  CoreML::Result::Result((CoreML::Result *)&v89);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)__p);
  v89 = *(_QWORD *)__p;
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
  v90 = *(_OWORD *)&__p[8];
  v91 = v88;
  v5 = CoreML::Result::good((CoreML::Result *)&v89);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)__p);
    v89 = *(_QWORD *)__p;
    if (SHIBYTE(v91) < 0)
      operator delete((void *)v90);
    v90 = *(_OWORD *)&__p[8];
    v91 = v88;
  }
  if (*((_DWORD *)a1 + 35) == 1120)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::SqueezeLayerParams::default_instance((CoreML::Specification::SqueezeLayerParams *)v5);
  if (*((_BYTE *)v6 + 36))
  {
LABEL_11:
    *(_QWORD *)a2 = v89;
    *(_OWORD *)(a2 + 8) = v90;
    *(_QWORD *)(a2 + 24) = v91;
    v90 = 0uLL;
    v91 = 0;
    goto LABEL_12;
  }
  if (*((_DWORD *)a1 + 35) == 1120)
    v7 = (CoreML::Specification::SqueezeLayerParams *)a1[16];
  else
    v7 = (CoreML::Specification::SqueezeLayerParams *)CoreML::Specification::SqueezeLayerParams::default_instance((CoreML::Specification::SqueezeLayerParams *)v6);
  if (*((_DWORD *)v7 + 4))
  {
    v8 = 0;
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_QWORD *)__p = &__p[8];
    while (1)
    {
      v9 = (int *)(*((_DWORD *)a1 + 35) == 1120
                 ? a1[16]
                 : CoreML::Specification::SqueezeLayerParams::default_instance(v7));
      if (v8 >= v9[4])
        break;
      LODWORD(v83.__r_.__value_.__l.__data_) = 0;
      if (*((_DWORD *)a1 + 35) == 1120)
        v10 = a1[16];
      else
        v10 = CoreML::Specification::SqueezeLayerParams::default_instance((CoreML::Specification::SqueezeLayerParams *)v9);
      v11 = *(_DWORD *)(v10[3] + 8 * v8 + 8);
      LODWORD(v83.__r_.__value_.__l.__data_) = v11;
      v12 = *(_QWORD *)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v13 = (uint64_t *)&__p[8];
        do
        {
          v14 = (uint64_t *)v12;
          v15 = v13;
          v16 = *(_DWORD *)(v12 + 28);
          v17 = (uint64_t *)(v12 + 8);
          if (v16 >= v11)
          {
            v17 = v14;
            v13 = v14;
          }
          v12 = *v17;
        }
        while (v12);
        if (v13 != (uint64_t *)&__p[8])
        {
          if (v16 < v11)
            v14 = v15;
          if (*((_DWORD *)v14 + 7) <= v11)
          {
            v24 = a1[14];
            if (*((char *)v24 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v24, v24[1]);
            }
            else
            {
              v25 = *(_OWORD *)v24;
              v84.__r_.__value_.__r.__words[2] = v24[2];
              *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v25;
            }
            v62 = std::string::insert(&v84, 0, "Squeeze Layer '");
            v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v85.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            v64 = std::string::append(&v85, "': all the values in the 'axes' parameter must be unique.");
            v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
            v86.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v65;
            v64->__r_.__value_.__l.__size_ = 0;
            v64->__r_.__value_.__r.__words[2] = 0;
            v64->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v85.__r_.__value_.__l.__data_);
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v84.__r_.__value_.__l.__data_);
            goto LABEL_121;
          }
        }
      }
      v7 = (CoreML::Specification::SqueezeLayerParams *)std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)__p, (int *)&v83, &v83);
      ++v8;
    }
    if (*((int *)a1 + 18) >= 1 && *((_DWORD *)a1 + 24) >= 1)
    {
      v21 = *(_DWORD *)(a1[10][1] + 36);
      v22 = *(_DWORD *)(a1[13][1] + 36);
      if (*((_DWORD *)a1 + 35) == 1120)
        v23 = (unsigned int *)a1[16];
      else
        v23 = (unsigned int *)CoreML::Specification::SqueezeLayerParams::default_instance((CoreML::Specification::SqueezeLayerParams *)v9);
      v30 = v23[4];
      if (v21 != 1 && (_DWORD)v30 + v22 != v21)
      {
        v60 = a1[14];
        if (*((char *)v60 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v60, v60[1]);
        }
        else
        {
          v61 = *(_OWORD *)v60;
          v84.__r_.__value_.__r.__words[2] = v60[2];
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v61;
        }
        v67 = std::string::insert(&v84, 0, "Squeeze Layer '");
        v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v85.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        v69 = std::string::append(&v85, "': output rank plus the length of the axes parameter must equal input rank.");
        v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v86.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
LABEL_121:
        CoreML::Result::Result((_DWORD *)a2, 13);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        goto LABEL_144;
      }
      memset(&v86, 0, sizeof(v86));
      if ((int)v30 < 1)
      {
        v45 = 0;
LABEL_112:
        v56 = *v45;
      }
      else
      {
        size = 0;
        for (i = 0; i != v30; ++i)
        {
          if (*((_DWORD *)a1 + 35) == 1120)
          {
            v34 = a1[16];
          }
          else
          {
            v34 = CoreML::Specification::SqueezeLayerParams::default_instance((CoreML::Specification::SqueezeLayerParams *)v23);
            size = v86.__r_.__value_.__l.__size_;
          }
          v35 = *(_DWORD *)(v34[3] + 8 * i + 8);
          v36 = (v21 & (v35 >> 31)) + v35;
          v23 = (unsigned int *)wmemchr((__int32 *)v86.__r_.__value_.__l.__data_, v36, (uint64_t)(size - v86.__r_.__value_.__r.__words[0]) >> 2);
          if (v23)
            v37 = v23;
          else
            v37 = (unsigned int *)size;
          if (v37 != (unsigned int *)v86.__r_.__value_.__l.__size_)
          {
            v73 = a1[14];
            if (*((char *)v73 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)*v73, v73[1]);
            }
            else
            {
              v74 = *(_OWORD *)v73;
              v83.__r_.__value_.__r.__words[2] = v73[2];
              *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v74;
            }
            v79 = std::string::insert(&v83, 0, "Squeeze Layer '");
            v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v84.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            v81 = std::string::append(&v84, "': axes parameter list cannot have the same value more than once.");
            v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
            v85.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v82;
            v81->__r_.__value_.__l.__size_ = 0;
            v81->__r_.__value_.__r.__words[2] = 0;
            v81->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v84.__r_.__value_.__l.__data_);
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
            goto LABEL_138;
          }
          if ((unint64_t)v37 >= v86.__r_.__value_.__r.__words[2])
          {
            v23 = (unsigned int *)v86.__r_.__value_.__r.__words[0];
            v38 = (uint64_t)(v86.__r_.__value_.__l.__size_ - v86.__r_.__value_.__r.__words[0]) >> 2;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 62)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v40 = v86.__r_.__value_.__r.__words[2] - v86.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v86.__r_.__value_.__r.__words[2] - v86.__r_.__value_.__r.__words[0]) >> 1 > v39)
              v39 = v40 >> 1;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
              v41 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
            {
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v86.__r_.__value_.__r.__words[2], v41);
              v37 = (unsigned int *)v86.__r_.__value_.__l.__size_;
              v23 = (unsigned int *)v86.__r_.__value_.__r.__words[0];
            }
            else
            {
              v42 = 0;
            }
            v43 = (__int32 *)&v42[4 * v38];
            *v43 = v36;
            size = (std::string::size_type)(v43 + 1);
            while (v37 != v23)
            {
              v44 = *--v37;
              *--v43 = v44;
            }
            v86.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
            v86.__r_.__value_.__l.__size_ = size;
            v86.__r_.__value_.__r.__words[2] = (std::string::size_type)&v42[4 * v41];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *v37 = v36;
            size = (std::string::size_type)(v37 + 1);
          }
          v86.__r_.__value_.__l.__size_ = size;
        }
        v45 = (int *)v86.__r_.__value_.__r.__words[0];
        v46 = v86.__r_.__value_.__r.__words[0] + 4;
        if (v86.__r_.__value_.__r.__words[0] == size || v46 == size)
          goto LABEL_112;
        v48 = *(_DWORD *)v86.__r_.__value_.__l.__data_;
        v49 = *(_DWORD *)v86.__r_.__value_.__l.__data_;
        v50 = v86.__r_.__value_.__r.__words[0] + 4;
        v51 = (int *)v86.__r_.__value_.__r.__words[0];
        v52 = (int *)(v86.__r_.__value_.__r.__words[0] + 4);
        do
        {
          v54 = *v52++;
          v53 = v54;
          v55 = v49 < v54;
          if (v49 <= v54)
            v49 = v53;
          if (v55)
            v51 = (int *)v50;
          v50 = (std::string::size_type)v52;
        }
        while (v52 != (int *)size);
        v56 = *v51;
        v57 = (int *)(v86.__r_.__value_.__r.__words[0] + 4);
        do
        {
          v59 = *v57++;
          v58 = v59;
          if (v59 < v48)
          {
            v48 = v58;
            v45 = (int *)v46;
          }
          v46 = (std::string::size_type)v57;
        }
        while (v57 != (int *)size);
      }
      if (v56 >= v21 || *v45 < 0)
      {
        v71 = a1[14];
        if (*((char *)v71 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)*v71, v71[1]);
        }
        else
        {
          v72 = *(_OWORD *)v71;
          v83.__r_.__value_.__r.__words[2] = v71[2];
          *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v72;
        }
        v75 = std::string::insert(&v83, 0, "Squeeze Layer '");
        v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        v77 = std::string::append(&v84, "': axes refers to a dimension that exceeds the input rank.");
        v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v85.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
LABEL_138:
        CoreML::Result::Result((_DWORD *)a2, 13);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        v66 = 0;
      }
      else
      {
        v66 = 1;
      }
      if (v86.__r_.__value_.__r.__words[0])
      {
        v86.__r_.__value_.__l.__size_ = v86.__r_.__value_.__r.__words[0];
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      if ((v66 & 1) == 0)
      {
LABEL_144:
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)__p, *(_QWORD **)&__p[8]);
        goto LABEL_12;
      }
    }
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)__p, *(_QWORD **)&__p[8]);
    goto LABEL_11;
  }
  v19 = a1[14];
  if (*((char *)v19 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)*v19, v19[1]);
  }
  else
  {
    v20 = *(_OWORD *)v19;
    v85.__r_.__value_.__r.__words[2] = v19[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v20;
  }
  v26 = std::string::insert(&v85, 0, "Squeeze Layer '");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v86.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v86, "': length of the 'axes' parameter cannot be 0.");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v28->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_12:
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
}

void sub_218354DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,_QWORD *a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a37, a38);
  if (*(char *)(v42 - 97) < 0)
    operator delete(*(void **)(v42 - 120));
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateRangeStaticLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  int v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::Result::Result((CoreML::Result *)&v11);
  *(_QWORD *)a2 = v11;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v12;
  *(_QWORD *)(a2 + 24) = v13;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v11);
    *(_QWORD *)a2 = v11;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v12;
    *(_QWORD *)(a2 + 24) = v13;
  }
  if (*((int *)a1 + 24) >= 1)
  {
    v6 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 13) + 8) + 36);
    std::string::basic_string[abi:ne180100]<0>(v9, "Range");
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    CoreML::checkRank((uint64_t)v9, 1, 1, (uint64_t)__p, v6, (CoreML::Result *)&v11);
    *(_QWORD *)a2 = v11;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v12;
    *(_QWORD *)(a2 + 24) = v13;
    HIBYTE(v13) = 0;
    LOBYTE(v12) = 0;
    if (v8 < 0)
      operator delete(__p[0]);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

void sub_218355058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRangeDynamicLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  void **v6;
  int v7;
  void **v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)a2);
  if (*((int *)a1 + 6) < 1)
    CoreML::Result::Result((CoreML::Result *)&v13);
  else
    CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 3, (CoreML::Result *)&v13);
  *(_QWORD *)a2 = v13;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v14;
  *(_QWORD *)(a2 + 24) = v15;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(_QWORD *)a2 = v13;
    v6 = (void **)(a2 + 8);
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = v14;
    *(_QWORD *)(a2 + 24) = v15;
  }
  if (*((int *)a1 + 24) >= 1)
  {
    v7 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 13) + 8) + 36);
    std::string::basic_string[abi:ne180100]<0>(v11, "Range");
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    CoreML::checkRank((uint64_t)v11, 1, 1, (uint64_t)__p, v7, (CoreML::Result *)&v13);
    *(_QWORD *)a2 = v13;
    v8 = (void **)(a2 + 8);
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = v14;
    *(_QWORD *)(a2 + 24) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
  }
}

void sub_218355238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 + 31) < 0)
    operator delete(*(void **)(v20 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoadConstantNDLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v5;
  BOOL v6;
  _BOOL8 v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _BOOL4 v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  std::string *v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  void *v32;
  std::string *v33;
  __int128 v34;
  void *v35[2];
  char v36;
  std::string v37;
  _BYTE v38[24];
  uint64_t v39;
  uint64_t v40;
  __int128 __p;
  uint64_t v42;

  CoreML::Result::Result((CoreML::Result *)&v40);
  CoreML::Result::Result((CoreML::Result *)v38);
  v40 = *(_QWORD *)v38;
  if (SHIBYTE(v42) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v38[8];
  v42 = v39;
  HIBYTE(v39) = 0;
  v38[8] = 0;
  v5 = CoreML::Result::good((CoreML::Result *)&v40);
  v6 = v5;
  if (SHIBYTE(v39) < 0)
  {
    operator delete(*(void **)&v38[8]);
    if (!v6)
      goto LABEL_54;
  }
  else if (!v5)
  {
    goto LABEL_54;
  }
  CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v38);
  v40 = *(_QWORD *)v38;
  if (SHIBYTE(v42) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v38[8];
  v42 = v39;
  HIBYTE(v39) = 0;
  v38[8] = 0;
  v7 = CoreML::Result::good((CoreML::Result *)&v40);
  v8 = v7;
  if (SHIBYTE(v39) < 0)
  {
    operator delete(*(void **)&v38[8]);
    if (v8)
      goto LABEL_13;
LABEL_54:
    *(_QWORD *)a2 = v40;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v42;
    __p = 0uLL;
    v42 = 0;
    goto LABEL_55;
  }
  if (!v7)
    goto LABEL_54;
LABEL_13:
  if (*((_DWORD *)a1 + 35) == 1070)
    v9 = (uint64_t *)*((_QWORD *)a1 + 16);
  else
    v9 = CoreML::Specification::LoadConstantNDLayerParams::default_instance((CoreML::Specification::LoadConstantNDLayerParams *)v7);
  if (v9[5])
    v10 = (uint64_t *)v9[5];
  else
    v10 = &CoreML::Specification::_WeightParams_default_instance_;
  v11 = v10[5];
  if (*(char *)(v11 + 23) < 0)
    v12 = *(_QWORD *)(v11 + 8);
  else
    v12 = *(unsigned __int8 *)(v11 + 23);
  v13 = v10[6];
  if (*(char *)(v13 + 23) < 0)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = *(unsigned __int8 *)(v13 + 23);
  v15 = *((_DWORD *)v10 + 4);
  v16 = v10[7];
  if (*(char *)(v16 + 23) < 0)
    v17 = *(_QWORD *)(v16 + 8);
  else
    v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = v15 <= 0;
  v19 = v15 > 0;
  if (v18)
    v20 = 1;
  else
    v20 = 2;
  if (v12)
    v21 = v20;
  else
    v21 = v19;
  if (v14)
    ++v21;
  if (v17)
    v22 = v21 + 1;
  else
    v22 = v21;
  v23 = *((unsigned int *)v9 + 4);
  if (v22 <= 1)
  {
    if ((_DWORD)v23)
    {
      if (v23 <= 5)
      {
        v26 = (uint64_t *)(v9[3] + 8);
        v27 = 1;
        do
        {
          v28 = *v26++;
          v27 *= v28;
          --v23;
        }
        while (v23);
        std::string::basic_string[abi:ne180100]<0>(&v37, "LoadConstantND");
        v29 = *((_QWORD *)a1 + 14);
        std::string::basic_string[abi:ne180100]<0>(v35, "constants");
        CoreML::validateGeneralWeightParams((uint64_t)v10, (const CoreML::Specification::WeightParams *)v27, (const CoreML::Specification::WeightParams *)1, (const void **)&v37.__r_.__value_.__l.__data_, v29, (uint64_t)v35, (uint64_t)v38);
        v40 = *(_QWORD *)v38;
        if (SHIBYTE(v42) < 0)
          operator delete((void *)__p);
        __p = *(_OWORD *)&v38[8];
        v42 = v39;
        HIBYTE(v39) = 0;
        v38[8] = 0;
        if (v36 < 0)
          operator delete(v35[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if (CoreML::Result::good((CoreML::Result *)&v40))
        {
          CoreML::Result::Result((CoreML::Result *)a2);
          goto LABEL_55;
        }
        goto LABEL_54;
      }
      std::operator+<char>();
      v33 = std::string::append(&v37, "'can only accept shape of length 1 to 5");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      *(_QWORD *)&v38[16] = *((_QWORD *)&v33->__r_.__value_.__l + 2);
      *(_OWORD *)v38 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_63:
      if ((v38[23] & 0x80000000) != 0)
        operator delete(*(void **)v38);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        v32 = (void *)v37.__r_.__value_.__r.__words[0];
        goto LABEL_67;
      }
      goto LABEL_55;
    }
  }
  else if ((_DWORD)v23)
  {
    std::operator+<char>();
    v24 = std::string::append(&v37, "' has both full precision and half precision weight fields populated");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    *(_QWORD *)&v38[16] = *((_QWORD *)&v24->__r_.__value_.__l + 2);
    *(_OWORD *)v38 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_63;
  }
  std::operator+<char>();
  v30 = std::string::append(&v37, "' layer.");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  *(_QWORD *)&v38[16] = *((_QWORD *)&v30->__r_.__value_.__l + 2);
  *(_OWORD *)v38 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v38[23] & 0x80000000) != 0)
  {
    v32 = *(void **)v38;
LABEL_67:
    operator delete(v32);
  }
LABEL_55:
  if (SHIBYTE(v42) < 0)
    operator delete((void *)__p);
}

void sub_218355688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateGetShapeLayer@<Q0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  __n128 result;
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;
  __n128 __p;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)&v13);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v10);
  v13 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)v11;
  v15 = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11[0]) = 0;
  v5 = CoreML::Result::good((CoreML::Result *)&v13);
  v6 = v5;
  if (SHIBYTE(v12) < 0)
  {
    operator delete(v11[0]);
    if (!v6)
      goto LABEL_14;
  }
  else if (!v5)
  {
    goto LABEL_14;
  }
  CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v10);
  v13 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)v11;
  v15 = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11[0]) = 0;
  v7 = CoreML::Result::good((CoreML::Result *)&v13);
  v8 = v7;
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_11;
LABEL_14:
    *(_QWORD *)a2 = v13;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v15;
    return result;
  }
  operator delete(v11[0]);
  if (!v8)
    goto LABEL_14;
LABEL_11:
  CoreML::Result::Result((CoreML::Result *)a2);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p.n128_u64[0]);
  return result;
}

void sub_218355888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateRandomNormalLikeLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218355988(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomNormalStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  __int128 __p;
  uint64_t v14;

  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::Result::Result((CoreML::Result *)v10);
  v12 = *(_QWORD *)v10;
  if (SHIBYTE(v14) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v10[8];
  v14 = v11;
  v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    v12 = *(_QWORD *)v10;
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v10[8];
    v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 1175)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::RandomNormalStaticLayerParams::default_instance((CoreML::Specification::RandomNormalStaticLayerParams *)v5);
  if (*((_DWORD *)v6 + 4))
  {
    *(_QWORD *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    v7 = std::string::append(&v9, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v10[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0)
      operator delete(*(void **)v10);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)__p);
  }
}

void sub_218355B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateRandomNormalDynamicLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218355C34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateRandomUniformLikeLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  __n128 result;
  std::string v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  __n128 __p;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)&v13);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
  v13 = *(_QWORD *)v11;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)&v11[8];
  v15 = v12;
  v5 = CoreML::Result::good((CoreML::Result *)&v13);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
    v13 = *(_QWORD *)v11;
    if (SHIBYTE(v15) < 0)
      operator delete((void *)__p.n128_u64[0]);
    __p = *(__n128 *)&v11[8];
    v15 = v12;
  }
  if (*((_DWORD *)a1 + 35) == 1190)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::RandomUniformLikeLayerParams::default_instance((CoreML::Specification::RandomUniformLikeLayerParams *)v5);
  if (*((float *)v6 + 6) <= *((float *)v6 + 7))
  {
    *(_QWORD *)a2 = v13;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v15;
  }
  else
  {
    std::operator+<char>();
    v7 = std::string::append(&v10, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v11[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v11 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v11[23] & 0x80000000) != 0)
      operator delete(*(void **)v11);
    if (SHIBYTE(v15) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_218355DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomUniformStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  _BYTE v12[24];
  uint64_t v13;
  uint64_t v14;
  __int128 __p;
  uint64_t v16;

  CoreML::Result::Result((CoreML::Result *)&v14);
  CoreML::Result::Result((CoreML::Result *)v12);
  v14 = *(_QWORD *)v12;
  if (SHIBYTE(v16) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v12[8];
  v16 = v13;
  v5 = CoreML::Result::good((CoreML::Result *)&v14);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v12);
    v14 = *(_QWORD *)v12;
    if (SHIBYTE(v16) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v12[8];
    v16 = v13;
  }
  if (*((_DWORD *)a1 + 35) == 1195)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::RandomUniformStaticLayerParams::default_instance((CoreML::Specification::RandomUniformStaticLayerParams *)v5);
  if (*((_DWORD *)v6 + 4))
  {
    if (*((float *)v6 + 12) <= *((float *)v6 + 13))
    {
      *(_QWORD *)a2 = v14;
      *(_OWORD *)(a2 + 8) = __p;
      *(_QWORD *)(a2 + 24) = v16;
      __p = 0uLL;
      v16 = 0;
      goto LABEL_20;
    }
    std::operator+<char>();
    v7 = std::string::append(&v11, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v12[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  else
  {
    std::operator+<char>();
    v9 = std::string::append(&v11, "' layer.");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&v12[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v12[23] & 0x80000000) != 0)
    operator delete(*(void **)v12);
LABEL_20:
  if (SHIBYTE(v16) < 0)
    operator delete((void *)__p);
}

void sub_218356014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateRandomUniformDynamicLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  std::string *v7;
  __int128 v8;
  __n128 result;
  std::string v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;
  __n128 __p;
  uint64_t v15;

  CoreML::Result::Result((CoreML::Result *)&v13);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
  v13 = *(_QWORD *)v11;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)&v11[8];
  v15 = v12;
  v5 = CoreML::Result::good((CoreML::Result *)&v13);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
    v13 = *(_QWORD *)v11;
    if (SHIBYTE(v15) < 0)
      operator delete((void *)__p.n128_u64[0]);
    __p = *(__n128 *)&v11[8];
    v15 = v12;
  }
  if (*((_DWORD *)a1 + 35) == 1200)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::RandomUniformDynamicLayerParams::default_instance((CoreML::Specification::RandomUniformDynamicLayerParams *)v5);
  if (*((float *)v6 + 6) <= *((float *)v6 + 7))
  {
    *(_QWORD *)a2 = v13;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v15;
  }
  else
  {
    std::operator+<char>();
    v7 = std::string::append(&v10, "' layer.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(_QWORD *)&v11[16] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)v11 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v11[23] & 0x80000000) != 0)
      operator delete(*(void **)v11);
    if (SHIBYTE(v15) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_2183561F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliLikeLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  float v7;
  std::string *v9;
  __int128 v10;
  __n128 result;
  std::string v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  __n128 __p;
  uint64_t v17;

  CoreML::Result::Result((CoreML::Result *)&v15);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v13);
  v15 = *(_QWORD *)v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)&v13[8];
  v17 = v14;
  v5 = CoreML::Result::good((CoreML::Result *)&v15);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v13);
    v15 = *(_QWORD *)v13;
    if (SHIBYTE(v17) < 0)
      operator delete((void *)__p.n128_u64[0]);
    __p = *(__n128 *)&v13[8];
    v17 = v14;
  }
  if (*((_DWORD *)a1 + 35) == 1210)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::RandomBernoulliLikeLayerParams::default_instance((CoreML::Specification::RandomBernoulliLikeLayerParams *)v5);
  v7 = *((float *)v6 + 6);
  if (v7 >= 0.0 && v7 <= 1.0)
  {
    *(_QWORD *)a2 = v15;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v17;
  }
  else
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "' layer.");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&v13[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v13[23] & 0x80000000) != 0)
      operator delete(*(void **)v13);
    if (SHIBYTE(v17) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_2183563D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  float v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  __int128 __p;
  uint64_t v17;

  CoreML::Result::Result((CoreML::Result *)&v15);
  CoreML::Result::Result((CoreML::Result *)v13);
  v15 = *(_QWORD *)v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v13[8];
  v17 = v14;
  v5 = CoreML::Result::good((CoreML::Result *)&v15);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v13);
    v15 = *(_QWORD *)v13;
    if (SHIBYTE(v17) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v13[8];
    v17 = v14;
  }
  if (*((_DWORD *)a1 + 35) == 1215)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::RandomBernoulliStaticLayerParams::default_instance((CoreML::Specification::RandomBernoulliStaticLayerParams *)v5);
  if (*((_DWORD *)v6 + 4))
  {
    v7 = *((float *)v6 + 12);
    if (v7 >= 0.0 && v7 <= 1.0)
    {
      *(_QWORD *)a2 = v15;
      *(_OWORD *)(a2 + 8) = __p;
      *(_QWORD *)(a2 + 24) = v17;
      __p = 0uLL;
      v17 = 0;
      goto LABEL_21;
    }
    std::operator+<char>();
    v10 = std::string::append(&v12, "' layer.");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(_QWORD *)&v13[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    std::operator+<char>();
    v8 = std::string::append(&v12, "' layer.");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(_QWORD *)&v13[16] = *((_QWORD *)&v8->__r_.__value_.__l + 2);
    *(_OWORD *)v13 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v13[23] & 0x80000000) != 0)
    operator delete(*(void **)v13);
LABEL_21:
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
}

void sub_218356620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliDynamicLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  _BOOL8 v5;
  uint64_t *v6;
  float v7;
  std::string *v9;
  __int128 v10;
  __n128 result;
  std::string v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;
  __n128 __p;
  uint64_t v17;

  CoreML::Result::Result((CoreML::Result *)&v15);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v13);
  v15 = *(_QWORD *)v13;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p.n128_u64[0]);
  __p = *(__n128 *)&v13[8];
  v17 = v14;
  v5 = CoreML::Result::good((CoreML::Result *)&v15);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v13);
    v15 = *(_QWORD *)v13;
    if (SHIBYTE(v17) < 0)
      operator delete((void *)__p.n128_u64[0]);
    __p = *(__n128 *)&v13[8];
    v17 = v14;
  }
  if (*((_DWORD *)a1 + 35) == 1220)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::RandomBernoulliDynamicLayerParams::default_instance((CoreML::Specification::RandomBernoulliDynamicLayerParams *)v5);
  v7 = *((float *)v6 + 6);
  if (v7 >= 0.0 && v7 <= 1.0)
  {
    *(_QWORD *)a2 = v15;
    result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v17;
  }
  else
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "' layer.");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&v13[16] = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v13[23] & 0x80000000) != 0)
      operator delete(*(void **)v13);
    if (SHIBYTE(v17) < 0)
      operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_21835680C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateTopKLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  char *v10;
  BOOL v11;
  CoreML::Specification::TopKLayerParams *v12;
  CoreML::Specification::TopKLayerParams *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  uint64_t *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type v25;
  char v26;
  std::string v27;
  std::string v28;
  void *v29[2];
  char v30;
  _BYTE __p[24];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v33);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)__p);
  v33 = *(_QWORD *)__p;
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  v34 = *(_OWORD *)&__p[8];
  v35 = v32;
  HIBYTE(v32) = 0;
  __p[8] = 0;
  v6 = CoreML::Result::good((CoreML::Result *)&v33);
  v7 = v6;
  if (SHIBYTE(v32) < 0)
  {
    operator delete(*(void **)&__p[8]);
    if (!v7)
      goto LABEL_26;
  }
  else if (!v6)
  {
    goto LABEL_26;
  }
  CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)__p);
  v33 = *(_QWORD *)__p;
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  v34 = *(_OWORD *)&__p[8];
  v35 = v32;
  HIBYTE(v32) = 0;
  __p[8] = 0;
  v8 = CoreML::Result::good((CoreML::Result *)&v33);
  v9 = v8;
  if (SHIBYTE(v32) < 0)
  {
    operator delete(*(void **)&__p[8]);
    if (!v9)
      goto LABEL_26;
  }
  else if (!v8)
  {
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "TopK");
  v10 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)v29, (uint64_t)this + 32, (CoreML::Result *)__p);
  v33 = *(_QWORD *)__p;
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  v34 = *(_OWORD *)&__p[8];
  v35 = v32;
  HIBYTE(v32) = 0;
  __p[8] = 0;
  v11 = CoreML::Result::good((CoreML::Result *)&v33);
  if (SHIBYTE(v32) < 0)
    operator delete(*(void **)&__p[8]);
  if (v30 < 0)
  {
    operator delete(v29[0]);
    if (v11)
      goto LABEL_19;
LABEL_26:
    *(_QWORD *)a3 = v33;
    *(_OWORD *)(a3 + 8) = v34;
    *(_QWORD *)(a3 + 24) = v35;
    v34 = 0uLL;
    v35 = 0;
    goto LABEL_27;
  }
  if (!v11)
    goto LABEL_26;
LABEL_19:
  v12 = (CoreML::Specification::TopKLayerParams *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, (const void **)a2[4][1]);
  v13 = (CoreML::NeuralNetworkSpecValidator *)((char *)this + 40);
  if (v13 == v12
    || (v12 = (CoreML::Specification::TopKLayerParams *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v10, (const void **)a2[7][2]), v13 == v12)|| (v14 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v10, (const void **)a2[4][1]), v12 = (CoreML::Specification::TopKLayerParams *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v10, (const void **)a2[7][2]), v14 == *(_DWORD *)v12))
  {
    if (*((int *)a2 + 18) < 1
      || (*((_DWORD *)a2 + 35) != 1015
        ? (v15 = CoreML::Specification::TopKLayerParams::default_instance(v12))
        : (v15 = a2[16]),
          (v16 = *(int *)(a2[10][1] + 36), v17 = v15[2], v17 >= -v16) && v17 < v16))
    {
      CoreML::Result::Result((CoreML::Result *)a3);
      goto LABEL_27;
    }
    std::operator+<char>();
    v18 = std::string::append(&v28, "' layer.");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  else
  {
    v20 = a2[14];
    if (*((char *)v20 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)*v20, v20[1]);
    }
    else
    {
      v21 = *(_OWORD *)v20;
      v27.__r_.__value_.__r.__words[2] = v20[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v21;
    }
    v22 = std::string::insert(&v27, 0, "Layer '");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v28, "' of type 'TopK' expects equal ranks for its input and second output, but they are not equal.");
    v25 = v24->__r_.__value_.__r.__words[0];
    v36[0] = v24->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
    v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&__p[15] = *(_QWORD *)((char *)v36 + 7);
    *(_QWORD *)__p = v25;
    *(_QWORD *)&__p[8] = v36[0];
    __p[23] = v26;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_27:
  if (SHIBYTE(v35) < 0)
    operator delete((void *)v34);
}

void sub_218356C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,void *a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 73) < 0)
    operator delete(*(void **)(v37 - 96));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateArgMaxLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  _BOOL8 v8;
  BOOL v9;
  uint64_t *v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  void *v18[2];
  char v19;
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  __int128 __p;
  uint64_t v24;

  CoreML::Result::Result((CoreML::Result *)&v22);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v20);
  v22 = *(_QWORD *)v20;
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v20[8];
  v24 = v21;
  HIBYTE(v21) = 0;
  v20[8] = 0;
  v6 = CoreML::Result::good((CoreML::Result *)&v22);
  v7 = v6;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(*(void **)&v20[8]);
    if (!v7)
      goto LABEL_35;
  }
  else if (!v6)
  {
    goto LABEL_35;
  }
  CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v20);
  v22 = *(_QWORD *)v20;
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v20[8];
  v24 = v21;
  HIBYTE(v21) = 0;
  v20[8] = 0;
  v8 = CoreML::Result::good((CoreML::Result *)&v22);
  v9 = v8;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(*(void **)&v20[8]);
    if (!v9)
      goto LABEL_35;
  }
  else if (!v8)
  {
    goto LABEL_35;
  }
  if (*((_DWORD *)a2 + 35) == 1025)
    v10 = a2[16];
  else
    v10 = CoreML::Specification::ArgMaxLayerParams::default_instance((CoreML::Specification::ArgMaxLayerParams *)v8);
  if (!*((_BYTE *)v10 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "ArgMax");
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v18, (uint64_t)this + 32, (CoreML::Result *)v20);
    v22 = *(_QWORD *)v20;
    if (SHIBYTE(v24) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v20[8];
    v24 = v21;
    HIBYTE(v21) = 0;
    v20[8] = 0;
    v10 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v22);
    v11 = (char)v10;
    if (SHIBYTE(v21) < 0)
      operator delete(*(void **)&v20[8]);
    if (v19 < 0)
    {
      operator delete(v18[0]);
      if ((v11 & 1) != 0)
        goto LABEL_23;
    }
    else if ((v11 & 1) != 0)
    {
      goto LABEL_23;
    }
LABEL_35:
    *(_QWORD *)a3 = v22;
    *(_OWORD *)(a3 + 8) = __p;
    *(_QWORD *)(a3 + 24) = v24;
    __p = 0uLL;
    v24 = 0;
    goto LABEL_36;
  }
LABEL_23:
  if (*((int *)a2 + 18) >= 1
    && (*((_DWORD *)a2 + 35) != 1025
      ? (v12 = CoreML::Specification::ArgMaxLayerParams::default_instance((CoreML::Specification::ArgMaxLayerParams *)v10))
      : (v12 = a2[16]),
        (v13 = *(int *)(a2[10][1] + 36), v14 = v12[2], v14 < -v13) || v14 >= v13))
  {
    std::operator+<char>();
    v15 = std::string::append(&v17, "' layer.");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(_QWORD *)&v20[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)v20 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
    if ((v20[23] & 0x80000000) != 0)
      operator delete(*(void **)v20);
  }
  else
  {
    CoreML::Result::Result((CoreML::Result *)a3);
  }
LABEL_36:
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__p);
}

void sub_21835700C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a26 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateArgMinLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  _BOOL8 v8;
  BOOL v9;
  uint64_t *v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  void *v18[2];
  char v19;
  _BYTE v20[24];
  uint64_t v21;
  uint64_t v22;
  __int128 __p;
  uint64_t v24;

  CoreML::Result::Result((CoreML::Result *)&v22);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v20);
  v22 = *(_QWORD *)v20;
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v20[8];
  v24 = v21;
  HIBYTE(v21) = 0;
  v20[8] = 0;
  v6 = CoreML::Result::good((CoreML::Result *)&v22);
  v7 = v6;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(*(void **)&v20[8]);
    if (!v7)
      goto LABEL_35;
  }
  else if (!v6)
  {
    goto LABEL_35;
  }
  CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v20);
  v22 = *(_QWORD *)v20;
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)&v20[8];
  v24 = v21;
  HIBYTE(v21) = 0;
  v20[8] = 0;
  v8 = CoreML::Result::good((CoreML::Result *)&v22);
  v9 = v8;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(*(void **)&v20[8]);
    if (!v9)
      goto LABEL_35;
  }
  else if (!v8)
  {
    goto LABEL_35;
  }
  if (*((_DWORD *)a2 + 35) == 1020)
    v10 = a2[16];
  else
    v10 = CoreML::Specification::ArgMinLayerParams::default_instance((CoreML::Specification::ArgMinLayerParams *)v8);
  if (!*((_BYTE *)v10 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "ArgMin");
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v18, (uint64_t)this + 32, (CoreML::Result *)v20);
    v22 = *(_QWORD *)v20;
    if (SHIBYTE(v24) < 0)
      operator delete((void *)__p);
    __p = *(_OWORD *)&v20[8];
    v24 = v21;
    HIBYTE(v21) = 0;
    v20[8] = 0;
    v10 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v22);
    v11 = (char)v10;
    if (SHIBYTE(v21) < 0)
      operator delete(*(void **)&v20[8]);
    if (v19 < 0)
    {
      operator delete(v18[0]);
      if ((v11 & 1) != 0)
        goto LABEL_23;
    }
    else if ((v11 & 1) != 0)
    {
      goto LABEL_23;
    }
LABEL_35:
    *(_QWORD *)a3 = v22;
    *(_OWORD *)(a3 + 8) = __p;
    *(_QWORD *)(a3 + 24) = v24;
    __p = 0uLL;
    v24 = 0;
    goto LABEL_36;
  }
LABEL_23:
  if (*((int *)a2 + 18) >= 1
    && (*((_DWORD *)a2 + 35) != 1020
      ? (v12 = CoreML::Specification::ArgMinLayerParams::default_instance((CoreML::Specification::ArgMinLayerParams *)v10))
      : (v12 = a2[16]),
        (v13 = *(int *)(a2[10][1] + 36), v14 = v12[2], v14 < -v13) || v14 >= v13))
  {
    std::operator+<char>();
    v15 = std::string::append(&v17, "' layer.");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(_QWORD *)&v20[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)v20 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
    if ((v20[23] & 0x80000000) != 0)
      operator delete(*(void **)v20);
  }
  else
  {
    CoreML::Result::Result((CoreML::Result *)a3);
  }
LABEL_36:
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__p);
}

void sub_21835736C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a26 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateCategoricalDistributionLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_2183574CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLayerNormalizationLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Specification::LayerNormalizationLayerParams *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  int v19;
  int v20;
  std::string *v21;
  void *v22;
  char v23;
  std::string v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  __int128 __p;
  uint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v28);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
  v28 = v25;
  if (SHIBYTE(v30) < 0)
    operator delete((void *)__p);
  __p = v26;
  v30 = v27;
  if (CoreML::Result::good((CoreML::Result *)&v28))
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
    v28 = v25;
    if (SHIBYTE(v30) < 0)
      operator delete((void *)__p);
    __p = v26;
    v30 = v27;
  }
  v5 = (CoreML::Specification::LayerNormalizationLayerParams *)std::string::basic_string[abi:ne180100]<0>(&v25, "");
  if (*((_DWORD *)a1 + 35) == 1350)
    v6 = a1[16];
  else
    v6 = CoreML::Specification::LayerNormalizationLayerParams::default_instance(v5);
  v7 = *((int *)v6 + 4);
  if (!(_DWORD)v7
    || v6 == &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_
    || (v8 = v6[5]) == 0
    || (v9 = v6[6]) == 0
    || (uint64_t *)v8 != &CoreML::Specification::_WeightParams_default_instance_ && *(_QWORD *)(v8 + 64))
  {
    std::operator+<char>();
    v10 = std::string::append(&v24, "' layer.");
    v11 = (void *)v10->__r_.__value_.__r.__words[0];
    v31[0] = v10->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26) < 0)
      operator delete(v25);
    v25 = v11;
    *(_QWORD *)&v26 = v31[0];
    *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)((char *)v31 + 7);
    HIBYTE(v26) = v12;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
LABEL_20:
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_21;
  }
  v13 = v6[3];
  v14 = v13 + 8;
  v15 = v13 == 0;
  if (v13)
    v16 = (int *)(v13 + 8);
  else
    v16 = 0;
  v17 = (int *)(v14 + 8 * v7);
  if (v15)
    v18 = 0;
  else
    v18 = v17;
  v19 = 1;
  while (v16 != v18)
  {
    v20 = *v16;
    v16 += 2;
    v19 *= v20;
  }
  if (*(_DWORD *)(v8 + 16) != v19 || *(_DWORD *)(v9 + 16) != v19)
  {
    std::operator+<char>();
    v21 = std::string::append(&v24, "' layer.");
    v22 = (void *)v21->__r_.__value_.__r.__words[0];
    v31[0] = v21->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26) < 0)
      operator delete(v25);
    v25 = v22;
    *(_QWORD *)&v26 = v31[0];
    *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)((char *)v31 + 7);
    HIBYTE(v26) = v23;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    goto LABEL_20;
  }
  *(_QWORD *)a2 = v28;
  *(_OWORD *)(a2 + 8) = __p;
  *(_QWORD *)(a2 + 24) = v30;
  __p = 0uLL;
  v30 = 0;
LABEL_21:
  if (SHIBYTE(v26) < 0)
    operator delete(v25);
  if (SHIBYTE(v30) < 0)
    operator delete((void *)__p);
}

void sub_218357880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConstantPadLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL8 v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  void *__p[2];
  char v35;
  _BYTE v36[24];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  CoreML::Result::Result((CoreML::Result *)&v38);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)v36);
  v38 = *(_QWORD *)v36;
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  v39 = *(_OWORD *)&v36[8];
  v40 = v37;
  if (!CoreML::Result::good((CoreML::Result *)&v38))
    goto LABEL_27;
  CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v36);
  v38 = *(_QWORD *)v36;
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  v39 = *(_OWORD *)&v36[8];
  v40 = v37;
  if (!CoreML::Result::good((CoreML::Result *)&v38))
    goto LABEL_27;
  std::string::basic_string[abi:ne180100]<0>(__p, "ConstantPad");
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)v36);
  v38 = *(_QWORD *)v36;
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  v39 = *(_OWORD *)&v36[8];
  v40 = v37;
  HIBYTE(v37) = 0;
  v36[8] = 0;
  if (v35 < 0)
    operator delete(__p[0]);
  v6 = CoreML::Result::good((CoreML::Result *)&v38);
  if (!v6)
    goto LABEL_27;
  v7 = *((_DWORD *)a2 + 35) == 1155
     ? (uint64_t *)*((_QWORD *)a2 + 16)
     : CoreML::Specification::ConstantPaddingLayerParams::default_instance((CoreML::Specification::ConstantPaddingLayerParams *)v6);
  if (*((_DWORD *)a2 + 6) != 1)
    goto LABEL_27;
  v8 = *((unsigned int *)v7 + 4);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)v8)
    {
      std::operator+<char>();
      v20 = std::string::append(&v33, "', length of 'padAmounts' cannot be zero when only 1 input is provided.");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      *(_QWORD *)&v36[16] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
      *(_OWORD *)v36 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      CoreML::Result::Result((_DWORD *)a3, 13);
      goto LABEL_64;
    }
    if (*((_BYTE *)v7 + 40) && (int)v8 >= 2)
    {
      v9 = 0;
      v10 = (_DWORD *)(v7[3] + 16);
      while ((int)*(v10 - 2) < 1 || *v10 < 1)
      {
        v10 += 4;
        if (v8 >> 1 == ++v9)
          goto LABEL_27;
      }
      std::operator+<char>();
      v22 = std::string::append(&v31, "', 'padToGivenOutputSizeMode' is true, and both padding values corresponding to dimension ");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v30, v9);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v30;
      else
        v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      else
        size = v30.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v32, (const std::string::value_type *)v24, size);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v28 = std::string::append(&v33, " are non zero, which is invalid. Only one value can be non-zero.");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      *(_QWORD *)&v36[16] = *((_QWORD *)&v28->__r_.__value_.__l + 2);
      *(_OWORD *)v36 = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      goto LABEL_63;
    }
LABEL_27:
    *(_QWORD *)a3 = v38;
    *(_OWORD *)(a3 + 8) = v39;
    *(_QWORD *)(a3 + 24) = v40;
    v39 = 0uLL;
    v40 = 0;
    goto LABEL_28;
  }
  std::operator+<char>();
  v12 = std::string::append(&v31, "', length of 'padAmounts' parameter is ");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v30, v8);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v30;
  else
    v14 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    v15 = v30.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v32, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v33, ", an odd value, which is not allowed.");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)&v36[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)v36 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_63:
  CoreML::Result::Result((_DWORD *)a3, 13);
LABEL_64:
  if ((v36[23] & 0x80000000) != 0)
    operator delete(*(void **)v36);
LABEL_28:
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
}

void sub_218357D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 89) < 0)
    operator delete(*(void **)(v39 - 112));
  if (*(char *)(v39 - 49) < 0)
    operator delete(*(void **)(v39 - 72));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateNMSLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 5, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)4, 4, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218357F20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateOneHotLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218358004(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateCumSumLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_2183580E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateArgsortLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  _BOOL8 v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *p_p;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  void *v42[2];
  char v43;
  _BYTE v44[24];
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  CoreML::Result::Result((CoreML::Result *)&v46);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v44);
  v46 = *(_QWORD *)v44;
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  v47 = *(_OWORD *)&v44[8];
  v48 = v45;
  HIBYTE(v45) = 0;
  v44[8] = 0;
  v6 = CoreML::Result::good((CoreML::Result *)&v46);
  v7 = v6;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(*(void **)&v44[8]);
    if (!v7)
      goto LABEL_27;
  }
  else if (!v6)
  {
    goto LABEL_27;
  }
  CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v44);
  v46 = *(_QWORD *)v44;
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  v47 = *(_OWORD *)&v44[8];
  v48 = v45;
  HIBYTE(v45) = 0;
  v44[8] = 0;
  v8 = CoreML::Result::good((CoreML::Result *)&v46);
  v9 = v8;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(*(void **)&v44[8]);
    if (!v9)
      goto LABEL_27;
  }
  else if (!v8)
  {
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(v42, "Argsort");
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)v42, (uint64_t)this + 32, (CoreML::Result *)v44);
  v46 = *(_QWORD *)v44;
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
  v47 = *(_OWORD *)&v44[8];
  v48 = v45;
  HIBYTE(v45) = 0;
  v44[8] = 0;
  v10 = CoreML::Result::good((CoreML::Result *)&v46);
  v11 = v10;
  if (SHIBYTE(v45) < 0)
    operator delete(*(void **)&v44[8]);
  if (v43 < 0)
  {
    operator delete(v42[0]);
    if (v11)
      goto LABEL_21;
LABEL_27:
    *(_QWORD *)a3 = v46;
    *(_OWORD *)(a3 + 8) = v47;
    *(_QWORD *)(a3 + 24) = v48;
    v47 = 0uLL;
    v48 = 0;
    goto LABEL_28;
  }
  if (!v11)
    goto LABEL_27;
LABEL_21:
  if (*((_DWORD *)a2 + 35) == 1461)
    v12 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v12 = CoreML::Specification::ArgSortLayerParams::default_instance((CoreML::Specification::ArgSortLayerParams *)v10);
  v13 = v12[2];
  if (v13 < 0)
  {
    std::operator+<char>();
    v15 = std::string::append(&v41, "', which is not supported. It must be positive.");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(_QWORD *)&v44[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)v44 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  else
  {
    if (*((int *)a2 + 18) < 1)
      goto LABEL_27;
    v14 = *(int *)(*(_QWORD *)(*((_QWORD *)a2 + 10) + 8) + 36);
    if (v13 < v14)
      goto LABEL_27;
    std::to_string(&v36, v13);
    v17 = std::string::insert(&v36, 0, "Value of 'axis' is ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v37, ", but it must be in the range [0,");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v14);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v23 = std::string::append(&v38, (const std::string::value_type *)p_p, size);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v39, ") for layer of type 'ArgSort' and name '");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = *((_QWORD *)a2 + 14);
    v28 = *(char *)(v27 + 23);
    if (v28 >= 0)
      v29 = (const std::string::value_type *)*((_QWORD *)a2 + 14);
    else
      v29 = *(const std::string::value_type **)v27;
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(v27 + 23);
    else
      v30 = *(_QWORD *)(v27 + 8);
    v31 = std::string::append(&v40, v29, v30);
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v41, "'.");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    *(_QWORD *)&v44[16] = *((_QWORD *)&v33->__r_.__value_.__l + 2);
    *(_OWORD *)v44 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  if ((v44[23] & 0x80000000) != 0)
    operator delete(*(void **)v44);
LABEL_28:
  if (SHIBYTE(v48) < 0)
    operator delete((void *)v47);
}

void sub_21835855C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 105) < 0)
    operator delete(*(void **)(v54 - 128));
  if (*(char *)(v54 - 65) < 0)
    operator delete(*(void **)(v54 - 88));
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateSliceBySizeLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  void **v5;
  double result;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(_QWORD *)a2 = v7;
  v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v8;
  *(_QWORD *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(_QWORD *)a2 = v7;
    if (*(char *)(a2 + 31) < 0)
      operator delete(*v5);
    result = *(double *)&v8;
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

void sub_218358764(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFailUnknownType(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, _DWORD *a2@<X8>)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;

  CoreML::Specification::NeuralNetworkLayer::GetTypeName(&v17);
  v5 = std::string::insert(&v17, 0, "Unsupported layer type (");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v18, ") for layer '");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = *((_QWORD *)a1 + 14);
  v10 = *(char *)(v9 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)*((_QWORD *)a1 + 14);
  else
    v11 = *(const std::string::value_type **)v9;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(v9 + 23);
  else
    v12 = *(_QWORD *)(v9 + 8);
  v13 = std::string::append(&v19, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v20, "'.");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v22 = v15->__r_.__value_.__r.__words[2];
  v21 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  CoreML::Result::Result(a2, 13);
  if (SHIBYTE(v22) < 0)
    operator delete((void *)v21);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_2183588D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

const char *MLActivationParamsNonlinearityType_Name(int a1)
{
  if (a1 > 30)
  {
    if (a1 <= 49)
    {
      switch(a1)
      {
        case 31:
          return "MLActivationParamsNonlinearityType_scaledTanh";
        case 40:
          return "MLActivationParamsNonlinearityType_sigmoid";
        case 41:
          return "MLActivationParamsNonlinearityType_sigmoidHard";
        default:
          return "INVALID";
      }
    }
    else if (a1 > 69)
    {
      if (a1 != 70)
      {
        if (a1 == 71)
          return "MLActivationParamsNonlinearityType_parametricSoftplus";
        return "INVALID";
      }
      return "MLActivationParamsNonlinearityType_softplus";
    }
    else
    {
      if (a1 != 50)
      {
        if (a1 == 60)
          return "MLActivationParamsNonlinearityType_softsign";
        return "INVALID";
      }
      return "MLActivationParamsNonlinearityType_ELU";
    }
  }
  else if (a1 <= 14)
  {
    if (!a1)
      return "INVALID";
    if (a1 != 5)
    {
      if (a1 == 10)
        return "MLActivationParamsNonlinearityType_ReLU";
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_linear";
  }
  else if (a1 > 24)
  {
    if (a1 != 25)
    {
      if (a1 == 30)
        return "MLActivationParamsNonlinearityType_tanh";
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_PReLU";
  }
  else
  {
    if (a1 != 15)
    {
      if (a1 == 20)
        return "MLActivationParamsNonlinearityType_thresholdedReLU";
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_leakyReLU";
  }
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_218358C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_218358CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t _GLOBAL__sub_I_NeuralNetworkLayerValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

turi::supervised_2::logistic_regression *turi::supervised_2::logistic_regression::logistic_regression(turi::supervised_2::logistic_regression *this)
{
  turi::supervised_2::supervised_learning_model_base *v2;
  unint64_t v3;

  v2 = turi::supervised_2::supervised_learning_model_base::supervised_learning_model_base(this);
  *(_QWORD *)v2 = &off_24D93BDA8;
  *(_OWORD *)((char *)v2 + 824) = 0u;
  *(_OWORD *)((char *)v2 + 840) = 0u;
  *((_QWORD *)v2 + 107) = 0;
  v3 = turi::thread::cpu_count(v2);
  std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::vector((_QWORD *)this + 108, v3);
  *((_QWORD *)this + 111) = 0;
  *((_BYTE *)this + 896) = 1;
  return this;
}

void sub_218358E38(_Unwind_Exception *a1)
{
  void **v1;

  free(v1[103]);
  turi::supervised_2::supervised_learning_model_base::~supervised_learning_model_base((turi::supervised_2::supervised_learning_model_base *)v1);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::~logistic_regression(turi::supervised_2::logistic_regression *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_24D93BDA8;
  v2 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 864);
  std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  free(*((void **)this + 103));
  turi::supervised_2::supervised_learning_model_base::~supervised_learning_model_base(this);
}

{
  turi::supervised_2::logistic_regression::~logistic_regression(this);
  JUMPOUT(0x219A19A08);
}

void turi::supervised_2::logistic_regression::internal_init_options(turi::supervised_2::logistic_regression *this)
{
  turi::option_manager *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  std::string *v90;
  std::string *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::string::size_type v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  std::string::size_type v101;
  void *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  std::string::size_type v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  void *v111;
  void *v112;
  unsigned int v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  std::string::size_type v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  void *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  void *v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  void *v176;
  void *v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  void *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  void *v205;
  void *v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t *v209;
  std::string v210;
  std::string __p;
  void **v212;
  char v213;
  uint64_t v214;
  int v215;
  char v216;
  _QWORD v217[2];
  std::string v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  int v222;
  char v223;
  uint64_t v224;
  int v225;
  char v226;
  uint64_t v227;
  int v228;
  char v229;
  uint64_t v230;

  v230 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v218, "convergence_threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convergence threshold for training");
  v2 = (turi::supervised_2::logistic_regression *)((char *)this + 224);
  v228 = 0;
  v229 = 1;
  v227 = 0x3F847AE147AE147BLL;
  turi::option_manager::create_real_option(v2, &v218, &__p, (uint64_t)&v227, 0, 1.0e-10, 1.0e20);
  switch(v229)
  {
    case 2:
      v3 = (unint64_t *)v227;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        v6 = v227;
        if (v227)
        {
          if (*(char *)(v227 + 31) < 0)
            operator delete(*(void **)(v227 + 8));
          v7 = v6;
          v8 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v9 = (unint64_t *)v227;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v227;
        if (v227)
        {
          v13 = *(void **)(v227 + 8);
          if (v13)
          {
            *(_QWORD *)(v227 + 16) = v13;
            operator delete(v13);
          }
          v7 = v12;
          v8 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v14 = (unint64_t *)v227;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = v227;
        if (v227)
        {
          v210.__r_.__value_.__r.__words[0] = v227 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v18 = (unint64_t *)v227;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v17 = v227;
        if (v227)
        {
          v210.__r_.__value_.__r.__words[0] = v227 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_26:
          v7 = v17;
          v8 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v21 = (unint64_t *)v227;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = v227;
        if (v227)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v227 + 16));
          v7 = v24;
          v25 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v26 = (unint64_t *)v227;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v227;
        if (v227)
        {
          v30 = *(void **)(v227 + 48);
          if (v30)
          {
            *(_QWORD *)(v227 + 56) = v30;
            operator delete(v30);
          }
          v31 = *(void **)(v29 + 24);
          if (v31)
          {
            *(_QWORD *)(v29 + 32) = v31;
            operator delete(v31);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29 + 8);
          v7 = v29;
          v25 = 2071181815;
LABEL_41:
          v8 = v25 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v7, v8);
        }
      }
      break;
    default:
      break;
  }
  v227 = 0;
  v228 = 0;
  v229 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v218, "step_size");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Guess for the initial step size for the solver");
  v225 = 0;
  v226 = 1;
  v224 = 0x3FF0000000000000;
  turi::option_manager::create_real_option(v2, &v218, &__p, (uint64_t)&v224, 0, 1.0e-10, 1.0e20);
  switch(v226)
  {
    case 2:
      v32 = (unint64_t *)v224;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = v224;
        if (v224)
        {
          if (*(char *)(v224 + 31) < 0)
            operator delete(*(void **)(v224 + 8));
          v36 = v35;
          v37 = 0x1012C404EF22A49;
          goto LABEL_88;
        }
      }
      break;
    case 3:
      v38 = (unint64_t *)v224;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = v224;
        if (v224)
        {
          v42 = *(void **)(v224 + 8);
          if (v42)
          {
            *(_QWORD *)(v224 + 16) = v42;
            operator delete(v42);
          }
          v36 = v41;
          v37 = 0x1080C409938AC02;
          goto LABEL_88;
        }
      }
      break;
    case 4:
      v43 = (unint64_t *)v224;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        v46 = v224;
        if (v224)
        {
          v210.__r_.__value_.__r.__words[0] = v224 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
          goto LABEL_72;
        }
      }
      break;
    case 5:
      v47 = (unint64_t *)v224;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        v46 = v224;
        if (v224)
        {
          v210.__r_.__value_.__r.__words[0] = v224 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_72:
          v36 = v46;
          v37 = 0x1020C405E66F15BLL;
          goto LABEL_88;
        }
      }
      break;
    case 8:
      v50 = (unint64_t *)v224;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        v53 = v224;
        if (v224)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v224 + 16));
          v36 = v53;
          v54 = -235920773;
          goto LABEL_87;
        }
      }
      break;
    case 9:
      v55 = (unint64_t *)v224;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        v58 = v224;
        if (v224)
        {
          v59 = *(void **)(v224 + 48);
          if (v59)
          {
            *(_QWORD *)(v224 + 56) = v59;
            operator delete(v59);
          }
          v60 = *(void **)(v58 + 24);
          if (v60)
          {
            *(_QWORD *)(v58 + 32) = v60;
            operator delete(v60);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v58 + 8);
          v36 = v58;
          v54 = 2071181815;
LABEL_87:
          v37 = v54 | 0x1030C4000000000;
LABEL_88:
          MEMORY[0x219A19A08](v36, v37);
        }
      }
      break;
    default:
      break;
  }
  v224 = 0;
  v225 = 0;
  v226 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v218, "lbfgs_memory_level");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Number of previous iterations to cache for LBFGS");
  v223 = 0;
  v222 = 0;
  v221 = 11;
  turi::option_manager::create_integer_option(v2, &v218, &__p, (uint64_t)&v221, 1, 0x7FFFFFFFLL, 0);
  switch(v223)
  {
    case 2:
      v61 = (unint64_t *)v221;
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        v64 = v221;
        if (v221)
        {
          if (*(char *)(v221 + 31) < 0)
            operator delete(*(void **)(v221 + 8));
          v65 = v64;
          v66 = 0x1012C404EF22A49;
          goto LABEL_134;
        }
      }
      break;
    case 3:
      v67 = (unint64_t *)v221;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
      {
        v70 = v221;
        if (v221)
        {
          v71 = *(void **)(v221 + 8);
          if (v71)
          {
            *(_QWORD *)(v221 + 16) = v71;
            operator delete(v71);
          }
          v65 = v70;
          v66 = 0x1080C409938AC02;
          goto LABEL_134;
        }
      }
      break;
    case 4:
      v72 = (unint64_t *)v221;
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = v221;
        if (v221)
        {
          v210.__r_.__value_.__r.__words[0] = v221 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
          goto LABEL_118;
        }
      }
      break;
    case 5:
      v76 = (unint64_t *)v221;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        v75 = v221;
        if (v221)
        {
          v210.__r_.__value_.__r.__words[0] = v221 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_118:
          v65 = v75;
          v66 = 0x1020C405E66F15BLL;
          goto LABEL_134;
        }
      }
      break;
    case 8:
      v79 = (unint64_t *)v221;
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (!v81)
      {
        v82 = v221;
        if (v221)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v221 + 16));
          v65 = v82;
          v83 = -235920773;
          goto LABEL_133;
        }
      }
      break;
    case 9:
      v84 = (unint64_t *)v221;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = v221;
        if (v221)
        {
          v88 = *(void **)(v221 + 48);
          if (v88)
          {
            *(_QWORD *)(v221 + 56) = v88;
            operator delete(v88);
          }
          v89 = *(void **)(v87 + 24);
          if (v89)
          {
            *(_QWORD *)(v87 + 32) = v89;
            operator delete(v89);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v87 + 8);
          v65 = v87;
          v83 = 2071181815;
LABEL_133:
          v66 = v83 | 0x1030C4000000000;
LABEL_134:
          MEMORY[0x219A19A08](v65, v66);
        }
      }
      break;
    default:
      break;
  }
  v221 = 0;
  v222 = 0;
  v223 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "solver");
  std::string::basic_string[abi:ne180100]<0>(&v210, "Solver used for training the logistic regression model");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v219, "auto");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v218, "auto");
  turi::flexible_type::flexible_type((turi::flexible_type *)&v218.__r_.__value_.__r.__words[2], "lbfgs");
  v207 = 0;
  v208 = 0;
  v209 = 0;
  v212 = (void **)&v207;
  v213 = 0;
  v207 = (uint64_t *)operator new(0x20uLL);
  v208 = v207;
  v209 = v207 + 4;
  v90 = (std::string *)&v219;
  v208 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v209, (uint64_t *)&v218, &v219, (uint64_t)v207);
  turi::option_manager::create_categorical_option(v2, &__p, &v210, (uint64_t)&v219, &v207, 0);
  v212 = (void **)&v207;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v212);
  do
  {
    v91 = v90;
    v90 = (std::string *)((char *)v90 - 16);
    switch(v91[-1].__r_.__value_.__s.__data_[20])
    {
      case 2:
        v92 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          v95 = v90->__r_.__value_.__r.__words[0];
          if (!v90->__r_.__value_.__r.__words[0])
            goto LABEL_182;
          if (*(char *)(v95 + 31) < 0)
            operator delete(*(void **)(v95 + 8));
          v96 = (_QWORD *)v95;
          v97 = 0x1012C404EF22A49;
          goto LABEL_181;
        }
        break;
      case 3:
        v98 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v99 = __ldaxr(v98);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, v98));
        if (!v100)
        {
          v101 = v90->__r_.__value_.__r.__words[0];
          if (!v90->__r_.__value_.__r.__words[0])
            goto LABEL_182;
          v102 = *(void **)(v101 + 8);
          if (v102)
          {
            *(_QWORD *)(v101 + 16) = v102;
            operator delete(v102);
          }
          v96 = (_QWORD *)v101;
          v97 = 0x1080C409938AC02;
          goto LABEL_181;
        }
        break;
      case 4:
        v103 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v104 = __ldaxr(v103);
          v105 = v104 - 1;
        }
        while (__stlxr(v105, v103));
        if (!v105)
        {
          v106 = v90->__r_.__value_.__r.__words[0];
          if (!v90->__r_.__value_.__r.__words[0])
            goto LABEL_182;
          v212 = (void **)(v106 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v212);
          goto LABEL_174;
        }
        break;
      case 5:
        v114 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v115 = __ldaxr(v114);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v114));
        if (!v116)
        {
          v106 = v90->__r_.__value_.__r.__words[0];
          if (!v90->__r_.__value_.__r.__words[0])
            goto LABEL_182;
          v212 = (void **)(v106 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v212);
LABEL_174:
          v96 = (_QWORD *)v106;
          v97 = 0x1020C405E66F15BLL;
          goto LABEL_181;
        }
        break;
      case 8:
        v117 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v118 = __ldaxr(v117);
          v119 = v118 - 1;
        }
        while (__stlxr(v119, v117));
        if (!v119)
        {
          v120 = v90->__r_.__value_.__r.__words[0];
          if (!v90->__r_.__value_.__r.__words[0])
            goto LABEL_182;
          boost::detail::shared_count::~shared_count((unsigned int **)(v120 + 16));
          v96 = (_QWORD *)v120;
          v113 = -235920773;
          goto LABEL_180;
        }
        break;
      case 9:
        v107 = (unint64_t *)v90->__r_.__value_.__r.__words[0];
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
        {
          v110 = (_QWORD *)v90->__r_.__value_.__r.__words[0];
          if (v90->__r_.__value_.__r.__words[0])
          {
            v111 = (void *)v110[6];
            if (v111)
            {
              v110[7] = v111;
              operator delete(v111);
            }
            v112 = (void *)v110[3];
            if (v112)
            {
              v110[4] = v112;
              operator delete(v112);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v110 + 1));
            v96 = v110;
            v113 = 2071181815;
LABEL_180:
            v97 = v113 | 0x1030C4000000000;
LABEL_181:
            MEMORY[0x219A19A08](v96, v97);
          }
LABEL_182:
          v90->__r_.__value_.__r.__words[0] = 0;
        }
        break;
      default:
        break;
    }
    v91[-1].__r_.__value_.__l.__size_ = 0;
    LODWORD(v91[-1].__r_.__value_.__r.__words[2]) = 0;
    v91[-1].__r_.__value_.__s.__data_[20] = 0;
  }
  while (v90 != &v218);
  switch(v220)
  {
    case 2:
      v121 = (unint64_t *)v219;
      do
      {
        v122 = __ldaxr(v121);
        v123 = v122 - 1;
      }
      while (__stlxr(v123, v121));
      if (!v123)
      {
        v124 = v219;
        if (v219)
        {
          if (*(char *)(v219 + 31) < 0)
            operator delete(*(void **)(v219 + 8));
          v125 = v124;
          v126 = 0x1012C404EF22A49;
          goto LABEL_225;
        }
      }
      break;
    case 3:
      v127 = (unint64_t *)v219;
      do
      {
        v128 = __ldaxr(v127);
        v129 = v128 - 1;
      }
      while (__stlxr(v129, v127));
      if (!v129)
      {
        v130 = v219;
        if (v219)
        {
          v131 = *(void **)(v219 + 8);
          if (v131)
          {
            *(_QWORD *)(v219 + 16) = v131;
            operator delete(v131);
          }
          v125 = v130;
          v126 = 0x1080C409938AC02;
          goto LABEL_225;
        }
      }
      break;
    case 4:
      v132 = (unint64_t *)v219;
      do
      {
        v133 = __ldaxr(v132);
        v134 = v133 - 1;
      }
      while (__stlxr(v134, v132));
      if (!v134)
      {
        v135 = v219;
        if (v219)
        {
          v218.__r_.__value_.__r.__words[0] = v219 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
          goto LABEL_209;
        }
      }
      break;
    case 5:
      v136 = (unint64_t *)v219;
      do
      {
        v137 = __ldaxr(v136);
        v138 = v137 - 1;
      }
      while (__stlxr(v138, v136));
      if (!v138)
      {
        v135 = v219;
        if (v219)
        {
          v218.__r_.__value_.__r.__words[0] = v219 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
LABEL_209:
          v125 = v135;
          v126 = 0x1020C405E66F15BLL;
          goto LABEL_225;
        }
      }
      break;
    case 8:
      v139 = (unint64_t *)v219;
      do
      {
        v140 = __ldaxr(v139);
        v141 = v140 - 1;
      }
      while (__stlxr(v141, v139));
      if (!v141)
      {
        v142 = v219;
        if (v219)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v219 + 16));
          MEMORY[0x219A19A08](v142, 0x1030C40F1F0227BLL);
        }
        v219 = 0;
      }
      break;
    case 9:
      v143 = (unint64_t *)v219;
      do
      {
        v144 = __ldaxr(v143);
        v145 = v144 - 1;
      }
      while (__stlxr(v145, v143));
      if (!v145)
      {
        v146 = v219;
        if (v219)
        {
          v147 = *(void **)(v219 + 48);
          if (v147)
          {
            *(_QWORD *)(v219 + 56) = v147;
            operator delete(v147);
          }
          v148 = *(void **)(v146 + 24);
          if (v148)
          {
            *(_QWORD *)(v146 + 32) = v148;
            operator delete(v148);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v146 + 8);
          v125 = v146;
          v126 = 0x1030C407B73B9F7;
LABEL_225:
          MEMORY[0x219A19A08](v125, v126);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v218, "l1_penalty");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Penalty on the L1-penalty");
  memset(v217, 0, 13);
  turi::option_manager::create_real_option(v2, &v218, &__p, (uint64_t)v217, 0, 0.0, 1.0e20);
  switch(BYTE4(v217[1]))
  {
    case 2:
      v149 = (unint64_t *)v217[0];
      do
      {
        v150 = __ldaxr(v149);
        v151 = v150 - 1;
      }
      while (__stlxr(v151, v149));
      if (!v151)
      {
        v152 = v217[0];
        if (v217[0])
        {
          if (*(char *)(v217[0] + 31) < 0)
            operator delete(*(void **)(v217[0] + 8));
          v153 = v152;
          v154 = 0x1012C404EF22A49;
          goto LABEL_271;
        }
      }
      break;
    case 3:
      v155 = (unint64_t *)v217[0];
      do
      {
        v156 = __ldaxr(v155);
        v157 = v156 - 1;
      }
      while (__stlxr(v157, v155));
      if (!v157)
      {
        v158 = v217[0];
        if (v217[0])
        {
          v159 = *(void **)(v217[0] + 8);
          if (v159)
          {
            *(_QWORD *)(v217[0] + 16) = v159;
            operator delete(v159);
          }
          v153 = v158;
          v154 = 0x1080C409938AC02;
          goto LABEL_271;
        }
      }
      break;
    case 4:
      v160 = (unint64_t *)v217[0];
      do
      {
        v161 = __ldaxr(v160);
        v162 = v161 - 1;
      }
      while (__stlxr(v162, v160));
      if (!v162)
      {
        v163 = v217[0];
        if (v217[0])
        {
          v210.__r_.__value_.__r.__words[0] = v217[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
          goto LABEL_255;
        }
      }
      break;
    case 5:
      v164 = (unint64_t *)v217[0];
      do
      {
        v165 = __ldaxr(v164);
        v166 = v165 - 1;
      }
      while (__stlxr(v166, v164));
      if (!v166)
      {
        v163 = v217[0];
        if (v217[0])
        {
          v210.__r_.__value_.__r.__words[0] = v217[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_255:
          v153 = v163;
          v154 = 0x1020C405E66F15BLL;
          goto LABEL_271;
        }
      }
      break;
    case 8:
      v167 = (unint64_t *)v217[0];
      do
      {
        v168 = __ldaxr(v167);
        v169 = v168 - 1;
      }
      while (__stlxr(v169, v167));
      if (!v169)
      {
        v170 = v217[0];
        if (v217[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v217[0] + 16));
          v153 = v170;
          v171 = -235920773;
          goto LABEL_270;
        }
      }
      break;
    case 9:
      v172 = (unint64_t *)v217[0];
      do
      {
        v173 = __ldaxr(v172);
        v174 = v173 - 1;
      }
      while (__stlxr(v174, v172));
      if (!v174)
      {
        v175 = v217[0];
        if (v217[0])
        {
          v176 = *(void **)(v217[0] + 48);
          if (v176)
          {
            *(_QWORD *)(v217[0] + 56) = v176;
            operator delete(v176);
          }
          v177 = *(void **)(v175 + 24);
          if (v177)
          {
            *(_QWORD *)(v175 + 32) = v177;
            operator delete(v177);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v175 + 8);
          v153 = v175;
          v171 = 2071181815;
LABEL_270:
          v154 = v171 | 0x1030C4000000000;
LABEL_271:
          MEMORY[0x219A19A08](v153, v154);
        }
      }
      break;
    default:
      break;
  }
  memset(v217, 0, 13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v218, "l2_penalty");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Penalty on the L2-penalty");
  v215 = 0;
  v216 = 1;
  v214 = 0x3F847AE147AE147BLL;
  turi::option_manager::create_real_option(v2, &v218, &__p, (uint64_t)&v214, 0, 0.0, 1.0e20);
  switch(v216)
  {
    case 2:
      v178 = (unint64_t *)v214;
      do
      {
        v179 = __ldaxr(v178);
        v180 = v179 - 1;
      }
      while (__stlxr(v180, v178));
      if (!v180)
      {
        v181 = v214;
        if (v214)
        {
          if (*(char *)(v214 + 31) < 0)
            operator delete(*(void **)(v214 + 8));
          v182 = v181;
          v183 = 0x1012C404EF22A49;
          goto LABEL_317;
        }
      }
      break;
    case 3:
      v184 = (unint64_t *)v214;
      do
      {
        v185 = __ldaxr(v184);
        v186 = v185 - 1;
      }
      while (__stlxr(v186, v184));
      if (!v186)
      {
        v187 = v214;
        if (v214)
        {
          v188 = *(void **)(v214 + 8);
          if (v188)
          {
            *(_QWORD *)(v214 + 16) = v188;
            operator delete(v188);
          }
          v182 = v187;
          v183 = 0x1080C409938AC02;
          goto LABEL_317;
        }
      }
      break;
    case 4:
      v189 = (unint64_t *)v214;
      do
      {
        v190 = __ldaxr(v189);
        v191 = v190 - 1;
      }
      while (__stlxr(v191, v189));
      if (!v191)
      {
        v192 = v214;
        if (v214)
        {
          v210.__r_.__value_.__r.__words[0] = v214 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
          goto LABEL_301;
        }
      }
      break;
    case 5:
      v193 = (unint64_t *)v214;
      do
      {
        v194 = __ldaxr(v193);
        v195 = v194 - 1;
      }
      while (__stlxr(v195, v193));
      if (!v195)
      {
        v192 = v214;
        if (v214)
        {
          v210.__r_.__value_.__r.__words[0] = v214 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v210);
LABEL_301:
          v182 = v192;
          v183 = 0x1020C405E66F15BLL;
          goto LABEL_317;
        }
      }
      break;
    case 8:
      v196 = (unint64_t *)v214;
      do
      {
        v197 = __ldaxr(v196);
        v198 = v197 - 1;
      }
      while (__stlxr(v198, v196));
      if (!v198)
      {
        v199 = v214;
        if (v214)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v214 + 16));
          v182 = v199;
          v200 = -235920773;
          goto LABEL_316;
        }
      }
      break;
    case 9:
      v201 = (unint64_t *)v214;
      do
      {
        v202 = __ldaxr(v201);
        v203 = v202 - 1;
      }
      while (__stlxr(v203, v201));
      if (!v203)
      {
        v204 = v214;
        if (v214)
        {
          v205 = *(void **)(v214 + 48);
          if (v205)
          {
            *(_QWORD *)(v214 + 56) = v205;
            operator delete(v205);
          }
          v206 = *(void **)(v204 + 24);
          if (v206)
          {
            *(_QWORD *)(v204 + 32) = v206;
            operator delete(v206);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v204 + 8);
          v182 = v204;
          v200 = 2071181815;
LABEL_316:
          v183 = v200 | 0x1030C4000000000;
LABEL_317:
          MEMORY[0x219A19A08](v182, v183);
        }
      }
      break;
    default:
      break;
  }
  v214 = 0;
  v215 = 0;
  v216 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v218.__r_.__value_.__l.__data_);
}

void sub_218359FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,int a30,char a31,void *a32,int a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,char a42)
{
  switch(a28)
  {
    case 2:
      turi::gl_sarray::clip((unint64_t **)&a26);
      break;
    case 3:
      turi::gl_sarray::clip((unint64_t **)&a26);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4((unint64_t **)&a26);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5((unint64_t **)&a26);
      break;
    case 8:
      turi::gl_sarray::clip((unint64_t **)&a26);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((unint64_t **)&a26);
      break;
    default:
      break;
  }
  a26 = 0;
  a27 = 0;
  a28 = 0;
  if (a23 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

void turi::supervised_2::logistic_regression::internal_setup_iterative_training(turi::supervised_2::logistic_regression *this, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  int *v7;
  file_logger *v8;
  file_logger *started;
  _QWORD *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  _QWORD *exception;
  std::bad_alloc *v21;
  std::bad_alloc *v22;
  _OWORD *v23;
  _BYTE __p[13];
  char v25;
  std::locale v26;
  _BYTE v27[13];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 41) + 1;
  *((_QWORD *)this + 107) = v4;
  *((_QWORD *)this + 106) = (*((_QWORD *)this + 98) - 1) * v4;
  turi::flexible_type_converter<unsigned long>::set((uint64_t *)this + 107, (uint64_t)__p);
  *(_QWORD *)&v27[5] = *(_QWORD *)&__p[5];
  *(_QWORD *)v27 = *(_QWORD *)__p;
  v27[12] = __p[12];
  LODWORD(v26.__locale_) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "variables_per_class");
  v23 = __p;
  v5 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)__p, (uint64_t)&std::piecewise_construct, &v23);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v5 + 14, (unsigned int *)&v26);
  if (v25 < 0)
    operator delete(*(void **)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v26);
  turi::flexible_type_converter<unsigned long>::set((uint64_t *)this + 106, (uint64_t)__p);
  *(_QWORD *)&v27[5] = *(_QWORD *)&__p[5];
  *(_QWORD *)v27 = *(_QWORD *)__p;
  v27[12] = __p[12];
  LODWORD(v26.__locale_) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "num_coefficients");
  v23 = __p;
  v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)__p, (uint64_t)&std::piecewise_construct, &v23);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v6 + 14, (unsigned int *)&v26);
  if (v25 < 0)
    operator delete(*(void **)__p);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v26);
  v7 = (int *)global_logger();
  if (v7[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v7))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "internal_setup_iterative_training", 124, 1);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10 && *((_BYTE *)v10 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Beginning model training on processed features. ", 48);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11)
    {
      if (*((_BYTE *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
        v12 = std::locale::use_facet(&v26, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  if (a2)
  {
    if (*((_QWORD *)this + 104) != *((_QWORD *)this + 98) - 1 || *((_QWORD *)this + 105) != *((_QWORD *)this + 107))
      turi::supervised_2::logistic_regression::internal_setup_iterative_training(BOOL)::$_0::operator()();
  }
  else
  {
    v13 = *((_QWORD *)this + 98) - 1;
    v14 = *((_QWORD *)this + 107);
    if (*((_QWORD *)this + 104) != v13 || *((_QWORD *)this + 105) != v14)
    {
      if (*((_QWORD *)this + 98) != 1 && v14 && 0x7FFFFFFFFFFFFFFFLL / v14 < v13)
      {
        v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize((_QWORD *)this + 103, v14 * v13, v13, v14);
      v13 = *((_QWORD *)this + 104);
      v14 = *((_QWORD *)this + 105);
    }
    v15 = *((_QWORD *)this + 103);
    v16 = v13 * v14;
    if (v13 * v14 >= 0)
      v17 = v13 * v14;
    else
      v17 = v16 + 1;
    v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
    if (v16 >= 2)
    {
      v19 = 2;
      if (v18 > 2)
        v19 = v17 & 0xFFFFFFFFFFFFFFFELL;
      bzero(*((void **)this + 103), ((8 * v19 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v18 < v16)
      bzero((void *)(v15 + 16 * (v17 >> 1)), 8 * v16 - 16 * (v17 >> 1));
  }
  turi::supervised_2::logistic_regression::setup_solver(this);
}

void sub_21835AA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17)
{
  std::locale::~locale(&a17);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::setup_solver(turi::supervised_2::logistic_regression *this)
{
  turi::option_manager *v2;
  turi::flexible_type_impl *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  int *v7;
  double v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  char *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  float v26;
  std::string *v27;
  unint64_t v28;
  int64x2_t *v29;
  int64_t v30;
  int64_t v31;
  int64x2_t v32;
  int64x2_t *v33;
  unint64_t v34;
  double *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  int data;
  int v43;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int *v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  int64_t v61;
  _OWORD *v62;
  __int128 *v63;
  __int128 v64;
  BOOL v65;
  int64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::bad_alloc *v76;
  std::bad_alloc *v77;
  std::runtime_error *exception;
  std::string *v79;
  __int128 v80;
  double v81;
  unsigned __int8 v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  void *v85;
  std::__shared_weak_count *v86;
  char v87;
  std::string v88;
  size_t __idx;
  _BYTE __p[32];
  __int128 v91;
  __int128 v92;
  void *v93;
  char v94;
  uint64_t v95;
  std::string v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&v96, "solver");
  v2 = (turi::supervised_2::logistic_regression *)((char *)this + 224);
  v3 = (turi::flexible_type_impl *)turi::option_manager::value((uint64_t)this + 224, (const void **)&v96.__r_.__value_.__l.__data_);
  switch(*((_BYTE *)v3 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_10;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_10:
      *(_QWORD *)__p = *MEMORY[0x24BEDB7F0];
      v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)&__p[*(_QWORD *)(*(_QWORD *)__p - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      *(_QWORD *)&__p[16] = v6;
      *(_QWORD *)&__p[24] = MEMORY[0x24BEDB848] + 16;
      if (v94 < 0)
        operator delete(v93);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x219A198F4](&v95);
      goto LABEL_17;
    case 2:
      v4 = *(_QWORD *)v3;
      if (*(char *)(*(_QWORD *)v3 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
      }
      else
      {
        v5 = *(_OWORD *)(v4 + 8);
        v88.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v5;
      }
      goto LABEL_17;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v3 + 8));
      goto LABEL_17;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(_QWORD *)v3 + 8));
      goto LABEL_17;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v3 + 8));
      goto LABEL_17;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v3, &v88);
      goto LABEL_17;
    case 7:
      memset(&v88, 0, sizeof(v88));
      goto LABEL_17;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_17;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (_QWORD *)(*(_QWORD *)v3 + 8));
LABEL_17:
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      break;
    default:
      turi::flexible_type_fail(0);
LABEL_124:
      __break(1u);
      return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v85, "l2_penalty");
  v7 = (int *)turi::option_manager::value((uint64_t)this + 224, (const void **)&v85);
  v81 = 0.0;
  switch(*((_BYTE *)v7 + 12))
  {
    case 0:
      v8 = (double)*(uint64_t *)v7;
      goto LABEL_49;
    case 1:
      v8 = *(double *)v7;
      goto LABEL_49;
    case 2:
      v13 = *(_QWORD *)v7;
      v14 = (char **)(*(_QWORD *)v7 + 8);
      __idx = 0;
      v15 = (char *)v14;
      if (*(char *)(v13 + 31) < 0)
        v15 = *v14;
      std::string::basic_string[abi:ne180100]<0>(__p, v15);
      v16 = std::stod((const std::string *)__p, &__idx);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (*(char *)(v13 + 31) < 0)
        v17 = *(_QWORD *)(v13 + 16);
      else
        v17 = *(unsigned __int8 *)(v13 + 31);
      if (__idx != v17)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v79 = std::string::append(&v96, " cannot be interpreted as a float");
        v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v79->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v26 = v16;
      v8 = v26;
      goto LABEL_49;
    case 3:
      v9 = *(_QWORD *)v7;
      memset(__p, 0, 24);
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      goto LABEL_50;
    case 4:
      v18 = *(_QWORD *)v7;
      memset(__p, 0, 24);
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      goto LABEL_50;
    case 5:
      v19 = *(_QWORD *)v7;
      memset(__p, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(_QWORD *)(v19 + 16) - *(_QWORD *)(v19 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
      goto LABEL_50;
    case 6:
      v8 = (double)v7[2] / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v7 << 8) >> 8);
LABEL_49:
      v81 = v8;
      goto LABEL_50;
    case 7:
      goto LABEL_50;
    case 8:
      v20 = *(_QWORD *)v7;
      v21 = *(_QWORD *)(*(_QWORD *)v7 + 16);
      *(_QWORD *)__p = *(_QWORD *)(*(_QWORD *)v7 + 8);
      *(_QWORD *)&__p[8] = v21;
      if (v21)
      {
        v22 = (unsigned int *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v24 = *(_OWORD *)(v20 + 24);
      v25 = *(_OWORD *)(v20 + 40);
      v92 = *(_OWORD *)(v20 + 56);
      *(_OWORD *)&__p[16] = v24;
      v91 = v25;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((unsigned int **)&__p[8]);
      goto LABEL_50;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(_QWORD *)v7 + 8);
      turi::flexible_type_fail(0);
      if (*((_QWORD *)&v91 + 1))
      {
        *(_QWORD *)&v92 = *((_QWORD *)&v91 + 1);
        operator delete(*((void **)&v91 + 1));
      }
      if (*(_QWORD *)&__p[16])
      {
        *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
        operator delete(*(void **)&__p[16]);
      }
      v10 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v11 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
LABEL_50:
      if (v87 < 0)
        operator delete(v85);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v88.__r_.__value_.__l.__size_ != 4)
          goto LABEL_59;
        v27 = (std::string *)v88.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) != 4)
          goto LABEL_59;
        v27 = &v88;
      }
      if (LODWORD(v27->__r_.__value_.__l.__data_) == 1869903201)
        MEMORY[0x219A19390](&v88, "lbfgs");
LABEL_59:
      std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(__p, "solver", &v88);
      std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)&v96, (const void **)__p, 1);
      turi::ml_model_base::add_or_update_state((uint64_t)this, &v96);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v96, (char *)v96.__r_.__value_.__l.__size_);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p[24]);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v85 = 0;
      v86 = 0;
      if (v81 > 1.0e-10)
      {
        *(_QWORD *)__p = 0;
        *(_QWORD *)&__p[8] = 0;
        v28 = *((_QWORD *)this + 106);
        if (v28)
        {
          if (v28 >> 61 || (v29 = (int64x2_t *)malloc_type_malloc(8 * v28, 0x1E76AA36uLL)) == 0)
          {
            v76 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v77 = std::bad_alloc::bad_alloc(v76);
            __cxa_throw(v77, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)__p = v29;
          *(_QWORD *)&__p[8] = v28;
          v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
          if (v28 >= 2)
          {
            v31 = 0;
            v32 = vdupq_lane_s64(*(uint64_t *)&v81, 0);
            v33 = v29;
            do
            {
              *v33++ = v32;
              v31 += 2;
            }
            while (v31 < v30);
          }
        }
        else
        {
          v30 = 0;
          v29 = 0;
          *(_QWORD *)&__p[8] = 0;
        }
        v34 = v28 - v30;
        if ((uint64_t)v28 > v30)
        {
          v35 = (double *)&v29->i64[v30];
          do
          {
            *v35++ = v81;
            --v34;
          }
          while (v34);
        }
        v36 = *((_QWORD *)this + 98);
        if (v36 >= 2)
        {
          v37 = v36 - 1;
          v38 = 8 * *((_QWORD *)this + 41);
          v39 = (_QWORD *)(*(_QWORD *)__p + v38);
          do
          {
            *v39 = 0;
            v39 = (_QWORD *)((char *)v39 + v38 + 8);
            --v37;
          }
          while (v37);
        }
        v40 = (_QWORD *)operator new();
        turi::optimization::l2_norm::l2_norm(v40, (__int128 **)__p);
        std::shared_ptr<turi::optimization::smooth_regularizer_interface>::reset[abi:ne180100]<turi::optimization::l2_norm,void>(&v85, (uint64_t)v40);
        free(*(void **)__p);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v88.__r_.__value_.__l.__size_ != 5)
          goto LABEL_119;
        v41 = (std::string *)v88.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) != 5)
          goto LABEL_119;
        v41 = &v88;
      }
      data = (int)v41->__r_.__value_.__l.__data_;
      v43 = v41->__r_.__value_.__s.__data_[4];
      if (data != 1734763116 || v43 != 115)
LABEL_119:
        turi::supervised_2::logistic_regression::setup_solver(void)::$_0::operator()();
      v45 = operator new();
      v46 = (std::__shared_weak_count *)operator new(0x28uLL);
      v46->__shared_owners_ = 0;
      v46->__shared_weak_owners_ = 0;
      v46[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24D93BE58;
      v46->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93BEF8;
      v46[1].__shared_owners_ = (uint64_t)this;
      v83 = &v46[1].__vftable;
      v84 = v46;
      *(_QWORD *)__p = 0;
      *(_QWORD *)&__p[8] = 0;
      turi::optimization::lbfgs_solver::lbfgs_solver(v45, &v83);
      v47 = *((_QWORD *)this + 111);
      *((_QWORD *)this + 111) = v45;
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      v48 = v84;
      if (v84)
      {
        p_shared_owners = (unint64_t *)&v84->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
        v52 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      *((_BYTE *)this + 896) = 1;
      v82 = 1;
      turi::flexible_type_converter<BOOL>::set(&v82, (uint64_t)&v96);
      *(_QWORD *)&__p[13] = *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 5);
      *(_QWORD *)&__p[8] = v96.__r_.__value_.__r.__words[0];
      __p[20] = v96.__r_.__value_.__s.__data_[12];
      *(_DWORD *)__p = 0;
      std::string::basic_string[abi:ne180100]<0>(&v96, "dense_coefficient_mode");
      __idx = (size_t)&v96;
      v54 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)&v96.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&__idx);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v54 + 14, (unsigned int *)__p);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)__p);
      v55 = (__int128 *)*((_QWORD *)this + 103);
      v56 = *((_QWORD *)this + 106);
      *(_QWORD *)__p = 0;
      *(_QWORD *)&__p[8] = 0;
      if (v56)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(__p, v56, 1);
        v57 = *(_QWORD *)__p;
        v58 = *(_QWORD *)&__p[8];
        if (*(uint64_t *)&__p[8] >= 0)
          v59 = *(_QWORD *)&__p[8];
        else
          v59 = *(_QWORD *)&__p[8] + 1;
        v60 = v59 & 0xFFFFFFFFFFFFFFFELL;
        if (*(uint64_t *)&__p[8] >= 2)
        {
          v61 = 0;
          v62 = *(_OWORD **)__p;
          v63 = v55;
          do
          {
            v64 = *v63++;
            *v62++ = v64;
            v61 += 2;
          }
          while (v61 < v60);
        }
        v65 = v58 <= v60;
        v66 = v58 - v60;
        if (!v65)
        {
          v67 = v59 >> 1;
          v68 = (uint64_t *)&v55[v59 >> 1];
          v69 = (_QWORD *)(v57 + 16 * v67);
          do
          {
            v70 = *v68++;
            *v69++ = v70;
            --v66;
          }
          while (v66);
        }
      }
      v71 = *((_QWORD *)this + 111);
      v72 = turi::option_manager::current_option_values(v2);
      (*(void (**)(uint64_t, _BYTE *, uint64_t, void **))(*(_QWORD *)v71 + 16))(v71, __p, v72, &v85);
      free(*(void **)__p);
      v73 = v86;
      if (v86)
      {
        v74 = (unint64_t *)&v86->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      return;
    default:
      turi::flexible_type_fail(0);
      goto LABEL_124;
  }
}

void sub_21835B4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v37 - 89) < 0)
  {
    operator delete(*(void **)(v36 + 288));
    if ((v35 & 1) == 0)
    {
LABEL_8:
      if (a19 < 0)
        operator delete(a14);
      if (a25 < 0)
        operator delete(a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

double turi::supervised_2::logistic_regression::internal_next_training_iteration@<D0>(turi::supervised_2::logistic_regression *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  double result;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  _OWORD *v19;
  __int128 *v20;
  __int128 v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double *v26;
  double v27;
  std::bad_alloc *exception;
  std::bad_alloc *v29;
  void *__p[2];
  char v31;
  void **v32;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 111) + 24))(*((_QWORD *)this + 111));
  v4 = *((_QWORD *)this + 111);
  if ((*(_DWORD *)(v4 + 120) - 6) <= 2)
    turi::supervised_2::logistic_regression::internal_next_training_iteration(void)::$_0::operator()();
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "residual");
  v32 = __p;
  v5 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v32);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v5 + 14, (_QWORD *)(v4 + 80));
  if (v31 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "training_loss");
  v32 = __p;
  v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v32);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v6 + 14, (_QWORD *)(v4 + 88));
  if (v31 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_function_evaluations");
  v32 = __p;
  v7 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v32);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v7 + 14, (_QWORD *)(v4 + 96));
  if (v31 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "step_size");
  v32 = __p;
  v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v32);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v8 + 14, (_QWORD *)(v4 + 112));
  if (v31 < 0)
    operator delete(__p[0]);
  v10 = *(__int128 **)(v4 + 24);
  v11 = *((_QWORD *)this + 107);
  v12 = *((_QWORD *)this + 98) - 1;
  v13 = (_QWORD *)((char *)this + 824);
  if (*((_QWORD *)this + 104) != v12 || *((_QWORD *)this + 105) != v11)
  {
    if (*((_QWORD *)this + 98) != 1 && v11 && 0x7FFFFFFFFFFFFFFFLL / v11 < v12)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v29 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v29, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize((_QWORD *)this + 103, v11 * v12, v12, v11);
    v12 = *((_QWORD *)this + 104);
    v11 = *((_QWORD *)this + 105);
  }
  v14 = (_OWORD *)*v13;
  v15 = v12 * v11;
  if (v12 * v11 >= 0)
    v16 = v12 * v11;
  else
    v16 = v15 + 1;
  v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (v15 >= 2)
  {
    v18 = 0;
    v19 = (_OWORD *)*v13;
    v20 = v10;
    do
    {
      v21 = *v20++;
      result = *(double *)&v21;
      *v19++ = v21;
      v18 += 2;
    }
    while (v18 < v17);
  }
  v22 = v15 <= v17;
  v23 = v15 - v17;
  if (!v22)
  {
    v24 = v16 >> 1;
    v25 = (double *)&v10[v16 >> 1];
    v26 = (double *)&v14[v24];
    do
    {
      v27 = *v25++;
      result = v27;
      *v26++ = v27;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_21835B970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::internal_predict(turi::supervised_2::logistic_regression *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  _BYTE *thread_compute_buffer;

  thread_compute_buffer = turi::supervised_2::logistic_regression::get_thread_compute_buffer(a1);
  if (*((_BYTE *)a1 + 896))
    turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(*(double *)&a1, a2, (void **)thread_compute_buffer + 15, a3, a4);
  else
    turi::supervised_2::logistic_regression::_internal_predict<Eigen::SparseVector<double,0,int>>((uint64_t)a1, a2, thread_compute_buffer + 184, a3, a4);
}

_BYTE *turi::supervised_2::logistic_regression::get_thread_compute_buffer(turi::supervised_2::logistic_regression *this)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v6;

  v2 = *(_QWORD *)turi::thread::get_tls_data(this);
  v3 = *((_QWORD *)this + 108);
  v4 = (_BYTE *)(v3 + 232 * v2);
  if (!*v4)
  {
    if (*((_BYTE *)this + 896))
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(v3 + 232 * v2 + 120), *((_QWORD *)this + 41) + 1);
    }
    else
    {
      v6 = v3 + 232 * v2;
      *(_QWORD *)(v6 + 224) = *((_QWORD *)this + 41) + 1;
      *(_QWORD *)(v6 + 208) = 0;
    }
    *v4 = 1;
  }
  return v4;
}

void turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(double a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  turi::thread *v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  turi::thread *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  turi::thread *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  turi::thread *v35;
  turi::thread *v36;
  double v37;
  double v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double *v43;
  double v44;
  char *v45;
  char *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  const void **v53;
  void **v54;
  uint64_t v55;
  double *v56;
  _QWORD *v57;
  float64x2_t *v58;
  long double *v59;
  uint64_t v60;
  long double v61;
  double v62;
  long double v63;
  long double v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  float64x2_t *v69;
  uint64_t v70;
  int64_t v71;
  int64_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t *v75;
  float64x2_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  double *f64;
  double *v81;
  double v82;
  const void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  _QWORD *v87;
  char *v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  double v101;
  double *v102;
  _QWORD *v103;
  _QWORD *v104;
  void **v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  _QWORD *v112;
  int v113;
  unint64_t *v114;
  unint64_t v115;
  float64x2_t *v116;
  double v117;
  unint64_t v118;
  int64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  _QWORD *v123;
  int v124;
  unint64_t *v125;
  unint64_t v126;
  double v127;
  char *v128;
  void *v129;
  char *v130;
  int64_t v131;
  unint64_t v132;
  int64_t v133;
  unint64_t v134;
  char *v135;
  void *v136;
  void **v137;
  uint64_t *v138;
  char *v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  void *v143;
  char *v144;
  _QWORD *v145;
  char *v146;
  _QWORD *v147;
  _QWORD *v148;
  void **v149;
  _QWORD *v150;
  unint64_t v151;
  BOOL v152;
  double *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  double *v157;
  double *v158;
  double v159;
  _QWORD *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  void *v164;
  _QWORD *v165;
  unint64_t v166;
  BOOL v167;
  _QWORD *v168;
  uint64_t v169;
  unint64_t v170;
  BOOL v171;
  _QWORD *v172;
  unint64_t v173;
  BOOL v174;
  _QWORD *v175;
  unint64_t v176;
  BOOL v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  unsigned int v182;
  __int128 v183;
  __int128 v184;
  unint64_t v185;
  BOOL v186;
  _QWORD *v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  _QWORD *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  __int128 v201;
  __int128 v202;
  unint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  _QWORD *v207;
  unint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int *v223;
  unsigned int v224;
  __int128 v225;
  __int128 v226;
  unint64_t v227;
  unint64_t v228;
  double *v229;
  _QWORD *v230;
  void *v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  void *__p[2];
  _QWORD v258[3];
  void *v259;
  char *v260;
  void *__dst;
  char *v262;
  _QWORD *v263;
  uint64_t v264;
  void **v265;

  v8 = *(turi::thread **)&a1;
  v10 = (char *)*a3;
  v11 = (uint64_t)a3[1];
  if (v11 >= 0)
    v12 = (uint64_t)a3[1];
  else
    v12 = v11 + 1;
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    v14 = 2;
    if (v13 > 2)
      v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    bzero(*a3, ((8 * v14 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v13 < v11)
    bzero(&v10[16 * (v12 >> 1)], 8 * v11 - 16 * (v12 >> 1));
  if (*((_BYTE *)a2 + 32))
  {
    v15 = *a2;
    v16 = *(_QWORD *)(*a2 + 56);
    if (v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v15 + 96) + 8 * a2[2] + 8 * (*(_BYTE *)(v15 + 18) == 0);
      v19 = *(_QWORD *)(v15 + 72);
      v20 = (double *)*a3;
      do
      {
        v21 = *(_QWORD *)(v19 + 16 * v17);
        v22 = *(_QWORD *)(v21 + 64);
        v23 = *(_QWORD *)(v21 + 104);
        switch(*(_DWORD *)(v21 + 24))
        {
          case 0:
            v24 = *(double *)v18;
            v18 += 8;
            v25 = v24;
            if (v22)
            {
              if (*((_BYTE *)v8 + 360))
                v25 = v25 * *(double *)(*((_QWORD *)v8 + 46) + 8 * v23);
              goto LABEL_54;
            }
            break;
          case 1:
            v36 = *(turi::thread **)v18;
            v18 += 8;
            v35 = v36;
            if ((unint64_t)v36 < v22)
            {
              v23 += (uint64_t)v35;
              if (*((_BYTE *)v8 + 360))
                v25 = *(double *)(*((_QWORD *)v8 + 46) + 8 * v23);
              else
                v25 = 1.0;
LABEL_54:
              v20[v23] = v25;
            }
            break;
          case 2:
            v26 = *(turi::thread **)(v21 + 72);
            if (v26)
            {
              v27 = 0;
              a1 = 0.0;
              v28 = 8 * v23;
              v29 = (uint64_t)*a3 + 8 * v23;
              do
              {
                if (*(_QWORD *)&a1 < v22)
                {
                  v30 = *(double *)(v18 + 8 * *(_QWORD *)&a1);
                  if (*((_BYTE *)v8 + 360))
                    v30 = v30 * *(double *)(*((_QWORD *)v8 + 46) + v28 + 8 * *(_QWORD *)&a1);
                  *(double *)(v29 + 8 * *(_QWORD *)&a1) = v30;
                }
                ++*(_QWORD *)&a1;
                v27 -= 8;
              }
              while (v26 != *(turi::thread **)&a1);
              goto LABEL_32;
            }
            break;
          case 3:
            v38 = *(double *)v18;
            v18 += 8;
            v37 = v38;
            if (v38 != 0.0)
            {
              v39 = (double *)*a3;
              do
              {
                a1 = *(double *)v18;
                if (*(_QWORD *)v18 < v22)
                {
                  *(_QWORD *)&a1 += v23;
                  if (*((_BYTE *)v8 + 360))
                    v40 = *(double *)(*((_QWORD *)v8 + 46) + 8 * *(_QWORD *)&a1);
                  else
                    v40 = 1.0;
                  v39[*(_QWORD *)&a1] = v40;
                }
                v18 += 8;
                --*(_QWORD *)&v37;
              }
              while (v37 != 0.0);
            }
            break;
          case 4:
            v42 = *(double *)v18;
            v18 += 8;
            v41 = v42;
            if (v42 != 0.0)
            {
              v43 = (double *)*a3;
              do
              {
                a1 = *(double *)v18;
                if (*(_QWORD *)v18 < v22)
                {
                  v44 = *(double *)(v18 + 8);
                  *(_QWORD *)&a1 += v23;
                  if (*((_BYTE *)v8 + 360))
                    v44 = v44 * *(double *)(*((_QWORD *)v8 + 46) + 8 * *(_QWORD *)&a1);
                  v43[*(_QWORD *)&a1] = v44;
                }
                v18 += 16;
                --*(_QWORD *)&v41;
              }
              while (v41 != 0.0);
            }
            break;
          case 7:
            v31 = *(turi::thread **)(v21 + 72);
            if (v31)
            {
              v27 = 0;
              a1 = 0.0;
              v32 = 8 * v23;
              v33 = (uint64_t)*a3 + 8 * v23;
              do
              {
                if (*(_QWORD *)&a1 < v22)
                {
                  v34 = *(double *)(v18 + 8 * *(_QWORD *)&a1);
                  if (*((_BYTE *)v8 + 360))
                    v34 = v34 * *(double *)(*((_QWORD *)v8 + 46) + v32 + 8 * *(_QWORD *)&a1);
                  *(double *)(v33 + 8 * *(_QWORD *)&a1) = v34;
                }
                ++*(_QWORD *)&a1;
                v27 -= 8;
              }
              while (v31 != *(turi::thread **)&a1);
LABEL_32:
              v18 -= v27;
            }
            break;
          default:
            break;
        }
        ++v17;
      }
      while (v17 != v16);
    }
  }
  v45 = (char *)*a3;
  *((_QWORD *)*a3 + *((_QWORD *)v8 + 41)) = 0x3FF0000000000000;
  if (*((_QWORD *)v8 + 98) == 2)
  {
    v46 = (char *)*((_QWORD *)v8 + 103);
    v47 = *((_QWORD *)v8 + 106);
    __p[0] = a3;
    __p[1] = v46;
    v258[0] = v47;
    if (v47)
    {
      v260 = v45;
      v262 = v46;
      v264 = v47;
      v265 = __p;
      v48 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Map<Eigen::Matrix<double,-1,1,0,-1,1> const,0,Eigen::Stride<0,0>> const>>,3,0>::run((uint64_t)&v259);
    }
    else
    {
      v48 = 0.0;
    }
    v63 = exp(-v48);
    v64 = log1p(v63);
    v65 = exp(-v64);
    v66 = v65;
    switch(a4)
    {
      case 1:
        *((_DWORD *)a5 + 2) = 0;
        *((_BYTE *)a5 + 12) = 1;
        *(double *)a5 = v48;
        break;
      case 2:
      case 3:
        *((_DWORD *)a5 + 2) = 0;
        *((_BYTE *)a5 + 12) = 1;
        *(double *)a5 = v65;
        break;
      case 4:
        v102 = (double *)operator new(0x10uLL);
        *v102 = 1.0 - v66;
        v102[1] = v66;
        *(uint64_t *)((char *)a5 + 5) = 0;
        *a5 = 0;
        *((_BYTE *)a5 + 12) = 3;
        v103 = (_QWORD *)operator new();
        v104 = v103;
        *v103 = 0;
        v103[1] = 0;
        v105 = (void **)(v103 + 1);
        v103[2] = 0;
        v103[3] = 0;
        *a5 = (uint64_t)v103;
        *v103 = 1;
        switch(*((_BYTE *)a5 + 12))
        {
          case 2:
            if (*v103 != 1)
            {
              v106 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v106, *a5);
              *a5 = (uint64_t)v106;
              *v106 = 1;
              do
              {
                v107 = __ldaxr(v104);
                v108 = v107 - 1;
              }
              while (__stlxr(v108, v104));
              if (!v108)
              {
                v109 = 0x1012C404EF22A49;
                if ((*((char *)v104 + 31) & 0x80000000) == 0)
                  goto LABEL_284;
                v110 = *v105;
                goto LABEL_270;
              }
            }
            break;
          case 3:
            if (*v103 != 1)
            {
              v214 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v214, *a5);
              *a5 = (uint64_t)v214;
              *v214 = 1;
              do
              {
                v215 = __ldaxr(v104);
                v216 = v215 - 1;
              }
              while (__stlxr(v216, v104));
              if (!v216)
              {
                v109 = 0x1080C409938AC02;
                v110 = *v105;
                if (*v105)
                {
                  v104[2] = v110;
LABEL_270:
                  operator delete(v110);
                }
                goto LABEL_284;
              }
            }
            break;
          case 4:
            if (*v103 != 1)
            {
              v207 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v207, *a5);
              *a5 = (uint64_t)v207;
              *v207 = 1;
              do
              {
                v208 = __ldaxr(v104);
                v209 = v208 - 1;
              }
              while (__stlxr(v209, v104));
              if (!v209)
              {
                v109 = 0x1020C405E66F15BLL;
                v259 = v105;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);
                goto LABEL_284;
              }
            }
            break;
          case 5:
            if (*v103 != 1)
            {
              v217 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v217, *a5);
              *a5 = (uint64_t)v217;
              *v217 = 1;
              do
              {
                v218 = __ldaxr(v104);
                v219 = v218 - 1;
              }
              while (__stlxr(v219, v104));
              if (!v219)
              {
                v109 = 0x1020C405E66F15BLL;
                v259 = v105;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);
                goto LABEL_284;
              }
            }
            break;
          case 8:
            if (*v103 != 1)
            {
              v220 = operator new();
              v221 = *a5;
              *(_QWORD *)v220 = *(_QWORD *)*a5;
              *(_QWORD *)(v220 + 8) = *(_QWORD *)(v221 + 8);
              v222 = *(_QWORD *)(v221 + 16);
              *(_QWORD *)(v220 + 16) = v222;
              if (v222)
              {
                v223 = (unsigned int *)(v222 + 8);
                do
                  v224 = __ldxr(v223);
                while (__stxr(v224 + 1, v223));
              }
              v225 = *(_OWORD *)(v221 + 24);
              v226 = *(_OWORD *)(v221 + 40);
              *(_OWORD *)(v220 + 56) = *(_OWORD *)(v221 + 56);
              *(_OWORD *)(v220 + 40) = v226;
              *(_OWORD *)(v220 + 24) = v225;
              *a5 = v220;
              *(_QWORD *)v220 = 1;
              do
              {
                v227 = __ldaxr(v104);
                v228 = v227 - 1;
              }
              while (__stlxr(v228, v104));
              if (!v228)
              {
                v109 = 0x1030C40F1F0227BLL;
                boost::detail::shared_count::~shared_count((unsigned int **)v104 + 2);
                goto LABEL_284;
              }
            }
            break;
          case 9:
            if (*v103 != 1)
            {
              v210 = (_QWORD *)operator new();
              v211 = *a5 + 8;
              *v210 = *(_QWORD *)*a5;
              turi::flexible_type_impl::ndarray<double>::ndarray(v210 + 1, v211);
              *a5 = (uint64_t)v210;
              *v210 = 1;
              do
              {
                v212 = __ldaxr(v104);
                v213 = v212 - 1;
              }
              while (__stlxr(v213, v104));
              if (!v213)
              {
                v109 = 0x1030C407B73B9F7;
                std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v104);
LABEL_284:
                MEMORY[0x219A19A08](v104, v109);
              }
            }
            break;
          default:
            break;
        }
        v229 = v102 + 2;
        v230 = (_QWORD *)*a5;
        v232 = *a5 + 8;
        v231 = *(void **)v232;
        if (*(_QWORD *)v232)
        {
          v230[2] = v231;
          operator delete(v231);
          *(_QWORD *)v232 = 0;
          *(_QWORD *)(v232 + 8) = 0;
          *(_QWORD *)(v232 + 16) = 0;
        }
        v230[1] = v102;
        v230[2] = v229;
        v230[3] = v229;
        break;
      case 5:
        *((_BYTE *)a5 + 12) = 0;
        *((_DWORD *)a5 + 2) = 0;
        *a5 = v65 >= 0.5;
        break;
      case 6:
        v111 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 96) + 24) + 32) + 80) + 16 * (v65 >= 0.5);
        *a5 = 0;
        *((_DWORD *)a5 + 2) = 0;
        *((_BYTE *)a5 + 12) = 0;
        if ((uint64_t *)v111 != a5)
        {
          v112 = *(_QWORD **)v111;
          *(uint64_t *)((char *)a5 + 5) = *(_QWORD *)(v111 + 5);
          *a5 = (uint64_t)v112;
          v113 = *(unsigned __int8 *)(v111 + 12);
          *((_BYTE *)a5 + 12) = v113;
          switch(v113)
          {
            case 2:
              v114 = (unint64_t *)*a5;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 + 1, v114));
              break;
            case 3:
              v237 = (unint64_t *)*a5;
              do
                v238 = __ldaxr(v237);
              while (__stlxr(v238 + 1, v237));
              break;
            case 4:
              v233 = (unint64_t *)*a5;
              do
                v234 = __ldaxr(v233);
              while (__stlxr(v234 + 1, v233));
              break;
            case 5:
              v239 = (unint64_t *)*a5;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 + 1, v239));
              break;
            case 8:
              v241 = (unint64_t *)*a5;
              do
                v242 = __ldaxr(v241);
              while (__stlxr(v242 + 1, v241));
              break;
            case 9:
              v235 = (unint64_t *)*a5;
              do
                v236 = __ldaxr(v235);
              while (__stlxr(v236 + 1, v235));
              break;
            default:
              return;
          }
        }
        break;
      default:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#1}::operator()();
    }
  }
  else
  {
    v49 = *(_QWORD *)turi::thread::get_tls_data(*(turi::thread **)&a1);
    v50 = *((_QWORD *)v8 + 108);
    v51 = (_BYTE *)(v50 + 232 * v49);
    if (!*v51)
    {
      if (*((_BYTE *)v8 + 896))
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(v50 + 232 * v49 + 120), *((_QWORD *)v8 + 41) + 1);
      }
      else
      {
        v253 = v50 + 232 * v49;
        *(_QWORD *)(v253 + 224) = *((_QWORD *)v8 + 41) + 1;
        *(_QWORD *)(v253 + 208) = 0;
      }
      *v51 = 1;
    }
    v254 = a5;
    v52 = (_QWORD *)(v50 + 232 * v49);
    v53 = (const void **)(v52 + 17);
    v54 = (void **)(v52 + 19);
    v259 = (char *)v8 + 824;
    v260 = (char *)a3;
    Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(v52 + 17, (uint64_t **)&v259);
    v56 = (double *)v52[17];
    v55 = v52[18];
    if (v52[20] != v55)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v52 + 19, v52[18], 1);
      v55 = v52[20];
    }
    v57 = v52 + 21;
    v58 = (float64x2_t *)*v54;
    if (v55 >= 1)
    {
      v59 = (long double *)*v54;
      v60 = v55;
      do
      {
        v61 = *v56++;
        *v59++ = exp(v61);
        --v60;
      }
      while (v60);
    }
    if (v55)
    {
      v259 = v58;
      __dst = v54;
      v62 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v259);
      v58 = (float64x2_t *)*v54;
    }
    else
    {
      v62 = 0.0;
    }
    v67 = (uint64_t)v54[1];
    if (v57[1] != v67)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v57, v67, 1);
      v67 = v57[1];
    }
    v68 = v62 + 1.0;
    v69 = (float64x2_t *)*v57;
    if (v67 >= 0)
      v70 = v67;
    else
      v70 = v67 + 1;
    v71 = v70 & 0xFFFFFFFFFFFFFFFELL;
    if (v67 >= 2)
    {
      v72 = 0;
      v73 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v68, 0);
      v74 = (float64x2_t *)*v57;
      v75 = v58;
      do
      {
        v76 = *v75++;
        *v74++ = vdivq_f64(v76, v73);
        v72 += 2;
      }
      while (v72 < v71);
    }
    v77 = __OFSUB__(v67, v71);
    v78 = v67 - v71;
    if (!((v78 < 0) ^ v77 | (v78 == 0)))
    {
      v79 = v70 >> 1;
      f64 = v58[v70 >> 1].f64;
      v81 = v69[v79].f64;
      do
      {
        v82 = *f64++;
        *v81++ = v82 / v68;
        --v78;
      }
      while (v78);
    }
    switch(a4)
    {
      case 0:
      case 8:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#2}::operator()();
      case 1:
      case 3:
        v83 = *v53;
        v84 = (uint64_t)*v53 + 8 * *((_QWORD *)v8 + 98) - 8;
        v85 = v84 - (_QWORD)*v53;
        __p[1] = 0;
        v258[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, v83, v84, v85 >> 3);
        v256 = 0;
        v87 = __p[0];
        v86 = (uint64_t *)__p[1];
        if (__p[1] >= (void *)v258[0])
        {
          v118 = (((char *)__p[1] - (char *)__p[0]) >> 3) + 1;
          if (v118 >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v119 = v258[0] - (unint64_t)__p[0];
          if ((uint64_t)(v258[0] - (unint64_t)__p[0]) >> 2 > v118)
            v118 = v119 >> 2;
          if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
            v120 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v120 = v118;
          v262 = 0;
          v263 = v258;
          if (v120)
            v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v258, v120);
          else
            v121 = 0;
          v259 = v121;
          v260 = v121;
          __dst = v121;
          v262 = &v121[8 * v120];
          std::__split_buffer<double>::push_back(&v259, (double *)&v256);
          v139 = v260;
          v140 = __p[0];
          if (__p[0] != v87)
          {
            v141 = v87;
            do
            {
              v142 = *--v141;
              *((_QWORD *)v139 - 1) = v142;
              v139 -= 8;
            }
            while (v141 != v140);
          }
          v260 = v139;
          v143 = __dst;
          v144 = (char *)((char *)__p[1] - (char *)v87);
          if (__p[1] != v87)
          {
            memmove(__dst, v87, (char *)__p[1] - (char *)v87);
            v139 = v260;
            v87 = __p[1];
          }
          v145 = __p[0];
          v146 = (char *)v258[0];
          __p[0] = v139;
          __p[1] = &v144[(_QWORD)v143];
          v258[0] = v262;
          __dst = v87;
          v262 = v146;
          v259 = v145;
          v260 = (char *)v145;
          if (v87 != v145)
            __dst = (char *)v87 + (((char *)v145 - (char *)v87 + 7) & 0xFFFFFFFFFFFFFFF8);
          if (v145)
            operator delete(v145);
        }
        else if (__p[0] == __p[1])
        {
          *(_QWORD *)__p[0] = 0;
          __p[1] = v87 + 1;
        }
        else
        {
          v88 = (char *)__p[0] + 8;
          v89 = (uint64_t *)((char *)__p[1] - 8);
          v90 = __p[1];
          while (v89 < v86)
          {
            v91 = *v89++;
            *v90++ = v91;
          }
          __p[1] = v90;
          if (v86 != (uint64_t *)v88)
            memmove(&v86[-(((char *)v86 - v88) >> 3)], v87, (char *)v86 - v88);
          *v87 = v256;
        }
        *(uint64_t *)((char *)v254 + 5) = 0;
        *v254 = 0;
        *((_BYTE *)v254 + 12) = 3;
        v147 = (_QWORD *)operator new();
        v148 = v147;
        *v147 = 0;
        v147[1] = 0;
        v149 = (void **)(v147 + 1);
        v147[2] = 0;
        v147[3] = 0;
        *v254 = (uint64_t)v147;
        *v147 = 1;
        switch(*((_BYTE *)v254 + 12))
        {
          case 2:
            if (*v147 != 1)
            {
              v150 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v150, *v254);
              *v254 = (uint64_t)v150;
              *v150 = 1;
              do
              {
                v151 = __ldaxr(v148);
                v152 = --v151 == 0;
              }
              while (__stlxr(v151, v148));
              goto LABEL_188;
            }
            break;
          case 3:
            if (*v147 != 1)
            {
              v172 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v172, *v254);
              *v254 = (uint64_t)v172;
              *v172 = 1;
              do
              {
                v173 = __ldaxr(v148);
                v174 = --v173 == 0;
              }
              while (__stlxr(v173, v148));
              goto LABEL_230;
            }
            break;
          case 4:
            if (*v147 != 1)
            {
              v165 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v165, *v254);
              *v254 = (uint64_t)v165;
              *v165 = 1;
              do
              {
                v166 = __ldaxr(v148);
                v167 = --v166 == 0;
              }
              while (__stlxr(v166, v148));
              goto LABEL_218;
            }
            break;
          case 5:
            if (*v147 != 1)
            {
              v175 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v175, *v254);
              *v254 = (uint64_t)v175;
              *v175 = 1;
              do
              {
                v176 = __ldaxr(v148);
                v177 = --v176 == 0;
              }
              while (__stlxr(v176, v148));
              goto LABEL_238;
            }
            break;
          case 8:
            if (*v147 != 1)
            {
              v178 = operator new();
              v179 = *v254;
              *(_QWORD *)v178 = *(_QWORD *)*v254;
              *(_QWORD *)(v178 + 8) = *(_QWORD *)(v179 + 8);
              v180 = *(_QWORD *)(v179 + 16);
              *(_QWORD *)(v178 + 16) = v180;
              if (v180)
              {
                v181 = (unsigned int *)(v180 + 8);
                do
                  v182 = __ldxr(v181);
                while (__stxr(v182 + 1, v181));
              }
              v183 = *(_OWORD *)(v179 + 24);
              v184 = *(_OWORD *)(v179 + 40);
              *(_OWORD *)(v178 + 56) = *(_OWORD *)(v179 + 56);
              *(_OWORD *)(v178 + 40) = v184;
              *(_OWORD *)(v178 + 24) = v183;
              *v254 = v178;
              *(_QWORD *)v178 = 1;
              do
              {
                v185 = __ldaxr(v148);
                v186 = --v185 == 0;
              }
              while (__stlxr(v185, v148));
              goto LABEL_247;
            }
            break;
          case 9:
            if (*v147 != 1)
            {
              v168 = (_QWORD *)operator new();
              v169 = *v254 + 8;
              *v168 = *(_QWORD *)*v254;
              turi::flexible_type_impl::ndarray<double>::ndarray(v168 + 1, v169);
              *v254 = (uint64_t)v168;
              *v168 = 1;
              do
              {
                v170 = __ldaxr(v148);
                v171 = --v170 == 0;
              }
              while (__stlxr(v170, v148));
              goto LABEL_224;
            }
            break;
          default:
            goto LABEL_251;
        }
        goto LABEL_251;
      case 2:
      case 4:
        __p[0] = 0;
        __p[1] = 0;
        v258[0] = 0;
        v99 = *((_QWORD *)v8 + 98);
        if (v99)
        {
          if (v99 >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          __p[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v258, v99);
          __p[1] = __p[0];
          v258[0] = (char *)__p[0] + 8 * v100;
        }
        if (v57[1])
        {
          v259 = (void *)*v57;
          __dst = v57;
          v101 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v259);
        }
        else
        {
          v101 = 0.0;
        }
        v127 = 1.0 - v101;
        v128 = (char *)__p[1];
        if (__p[1] >= (void *)v258[0])
        {
          v130 = (char *)__p[0];
          v131 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v132 = v131 + 1;
          if ((unint64_t)(v131 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v133 = v258[0] - (unint64_t)__p[0];
          if ((uint64_t)(v258[0] - (unint64_t)__p[0]) >> 2 > v132)
            v132 = v133 >> 2;
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8)
            v134 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v134 = v132;
          if (v134)
          {
            v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v258, v134);
            v130 = (char *)__p[0];
            v128 = (char *)__p[1];
          }
          else
          {
            v135 = 0;
          }
          v153 = (double *)&v135[8 * v131];
          v154 = &v135[8 * v134];
          *v153 = v127;
          v129 = v153 + 1;
          while (v128 != v130)
          {
            v155 = *((_QWORD *)v128 - 1);
            v128 -= 8;
            *((_QWORD *)v153-- - 1) = v155;
          }
          __p[0] = v153;
          __p[1] = v129;
          v258[0] = v154;
          if (v130)
            operator delete(v130);
        }
        else
        {
          *(double *)__p[1] = v127;
          v129 = v128 + 8;
        }
        __p[1] = v129;
        v156 = (char *)(*v57 + 8 * *((_QWORD *)v8 + 98) - 8);
        std::vector<double>::__insert_with_size[abi:ne180100]<double *,double *>((uint64_t)__p, (uint64_t)v129, (char *)*v57, v156, (uint64_t)&v156[-*v57] >> 3);
        v157 = (double *)__p[0];
        v158 = (double *)__p[1];
        while (v157 != v158)
        {
          v159 = 0.0;
          if (*v157 < 0.0 || (v159 = 1.0, *v157 > 1.0))
            *v157 = v159;
          ++v157;
        }
        *(uint64_t *)((char *)v254 + 5) = 0;
        *v254 = 0;
        *((_BYTE *)v254 + 12) = 3;
        v160 = (_QWORD *)operator new();
        v148 = v160;
        *v160 = 0;
        v160[1] = 0;
        v149 = (void **)(v160 + 1);
        v160[2] = 0;
        v160[3] = 0;
        *v254 = (uint64_t)v160;
        *v160 = 1;
        switch(*((_BYTE *)v254 + 12))
        {
          case 2:
            if (*v160 != 1)
            {
              v161 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v161, *v254);
              *v254 = (uint64_t)v161;
              *v161 = 1;
              do
              {
                v162 = __ldaxr(v148);
                v152 = --v162 == 0;
              }
              while (__stlxr(v162, v148));
LABEL_188:
              if (v152)
              {
                v163 = 0x1012C404EF22A49;
                if ((*((char *)v148 + 31) & 0x80000000) == 0)
                  goto LABEL_250;
                v164 = *v149;
                goto LABEL_234;
              }
            }
            break;
          case 3:
            if (*v160 != 1)
            {
              v192 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v192, *v254);
              *v254 = (uint64_t)v192;
              *v192 = 1;
              do
              {
                v193 = __ldaxr(v148);
                v174 = --v193 == 0;
              }
              while (__stlxr(v193, v148));
LABEL_230:
              if (v174)
              {
                v163 = 0x1080C409938AC02;
                v164 = *v149;
                if (*v149)
                {
                  v148[2] = v164;
LABEL_234:
                  operator delete(v164);
                }
                goto LABEL_250;
              }
            }
            break;
          case 4:
            if (*v160 != 1)
            {
              v187 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, *v254);
              *v254 = (uint64_t)v187;
              *v187 = 1;
              do
              {
                v188 = __ldaxr(v148);
                v167 = --v188 == 0;
              }
              while (__stlxr(v188, v148));
LABEL_218:
              if (v167)
              {
                v163 = 0x1020C405E66F15BLL;
                v259 = v149;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);
                goto LABEL_250;
              }
            }
            break;
          case 5:
            if (*v160 != 1)
            {
              v194 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v194, *v254);
              *v254 = (uint64_t)v194;
              *v194 = 1;
              do
              {
                v195 = __ldaxr(v148);
                v177 = --v195 == 0;
              }
              while (__stlxr(v195, v148));
LABEL_238:
              if (v177)
              {
                v163 = 0x1020C405E66F15BLL;
                v259 = v149;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);
                goto LABEL_250;
              }
            }
            break;
          case 8:
            if (*v160 != 1)
            {
              v196 = operator new();
              v197 = *v254;
              *(_QWORD *)v196 = *(_QWORD *)*v254;
              *(_QWORD *)(v196 + 8) = *(_QWORD *)(v197 + 8);
              v198 = *(_QWORD *)(v197 + 16);
              *(_QWORD *)(v196 + 16) = v198;
              if (v198)
              {
                v199 = (unsigned int *)(v198 + 8);
                do
                  v200 = __ldxr(v199);
                while (__stxr(v200 + 1, v199));
              }
              v201 = *(_OWORD *)(v197 + 24);
              v202 = *(_OWORD *)(v197 + 40);
              *(_OWORD *)(v196 + 56) = *(_OWORD *)(v197 + 56);
              *(_OWORD *)(v196 + 40) = v202;
              *(_OWORD *)(v196 + 24) = v201;
              *v254 = v196;
              *(_QWORD *)v196 = 1;
              do
              {
                v203 = __ldaxr(v148);
                v186 = --v203 == 0;
              }
              while (__stlxr(v203, v148));
LABEL_247:
              if (v186)
              {
                v163 = 0x1030C40F1F0227BLL;
                boost::detail::shared_count::~shared_count((unsigned int **)v148 + 2);
                goto LABEL_250;
              }
            }
            break;
          case 9:
            if (*v160 != 1)
            {
              v189 = (_QWORD *)operator new();
              v190 = *v254 + 8;
              *v189 = *(_QWORD *)*v254;
              turi::flexible_type_impl::ndarray<double>::ndarray(v189 + 1, v190);
              *v254 = (uint64_t)v189;
              *v189 = 1;
              do
              {
                v191 = __ldaxr(v148);
                v171 = --v191 == 0;
              }
              while (__stlxr(v191, v148));
LABEL_224:
              if (v171)
              {
                v163 = 0x1030C407B73B9F7;
                std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v148);
LABEL_250:
                MEMORY[0x219A19A08](v148, v163);
              }
            }
            break;
          default:
            break;
        }
LABEL_251:
        v204 = *v254;
        v206 = *v254 + 8;
        v205 = *(void **)v206;
        if (*(_QWORD *)v206)
        {
          *(_QWORD *)(v204 + 16) = v205;
          operator delete(v205);
          *(_QWORD *)v206 = 0;
          *(_QWORD *)(v206 + 8) = 0;
          *(_QWORD *)(v206 + 16) = 0;
        }
        *(_OWORD *)(v204 + 8) = *(_OWORD *)__p;
        *(_QWORD *)(v204 + 24) = v258[0];
        break;
      case 5:
      case 6:
        v92 = *((_QWORD *)v8 + 98);
        v93 = v92 - 1;
        if (v92 == 1)
        {
          v95 = 0;
        }
        else
        {
          v94 = 0;
          v95 = 0;
          v96 = 0.0;
          do
          {
            v97 = *((double *)*v53 + v94);
            if (v96 < v97)
              v95 = v94 + 1;
            v98 = v94 + 1;
            if (v96 < v97)
              v96 = *((double *)*v53 + v94);
            ++v94;
          }
          while (v93 != v98);
        }
        if (a4 == 5)
        {
          *((_BYTE *)v254 + 12) = 0;
          *((_DWORD *)v254 + 2) = 0;
          *v254 = v95;
        }
        else
        {
          v122 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 96) + 24) + 32) + 80) + 16 * v95;
          *v254 = 0;
          *((_DWORD *)v254 + 2) = 0;
          *((_BYTE *)v254 + 12) = 0;
          if ((uint64_t *)v122 != v254)
          {
            v123 = *(_QWORD **)v122;
            *(uint64_t *)((char *)v254 + 5) = *(_QWORD *)(v122 + 5);
            *v254 = (uint64_t)v123;
            v124 = *(unsigned __int8 *)(v122 + 12);
            *((_BYTE *)v254 + 12) = v124;
            switch(v124)
            {
              case 2:
                v125 = (unint64_t *)*v254;
                do
                  v126 = __ldaxr(v125);
                while (__stlxr(v126 + 1, v125));
                break;
              case 3:
                v247 = (unint64_t *)*v254;
                do
                  v248 = __ldaxr(v247);
                while (__stlxr(v248 + 1, v247));
                break;
              case 4:
                v243 = (unint64_t *)*v254;
                do
                  v244 = __ldaxr(v243);
                while (__stlxr(v244 + 1, v243));
                break;
              case 5:
                v249 = (unint64_t *)*v254;
                do
                  v250 = __ldaxr(v249);
                while (__stlxr(v250 + 1, v249));
                break;
              case 8:
                v251 = (unint64_t *)*v254;
                do
                  v252 = __ldaxr(v251);
                while (__stlxr(v252 + 1, v251));
                break;
              case 9:
                v245 = (unint64_t *)*v254;
                do
                  v246 = __ldaxr(v245);
                while (__stlxr(v246 + 1, v245));
                break;
              default:
                return;
            }
          }
        }
        break;
      case 7:
        v116 = (float64x2_t *)*v57;
        if (v57[1])
        {
          v259 = (void *)*v57;
          __dst = v57;
          v117 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v259);
          v116 = (float64x2_t *)*v57;
        }
        else
        {
          v117 = 0.0;
        }
        *(double *)__p = 1.0 - v117;
        v259 = v116;
        __dst = v57;
        Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v259);
        v259 = v136;
        v137 = __p;
        if (*(double *)__p < *(double *)&v136)
          v137 = &v259;
        if (*(double *)v137 < 0.0)
          v137 = (void **)&v256;
        v255 = 0x3FF0000000000000;
        v256 = 0;
        if (*(double *)v137 <= 1.0)
          v138 = (uint64_t *)v137;
        else
          v138 = &v255;
        *v254 = 0;
        *((_DWORD *)v254 + 2) = 0;
        *((_BYTE *)v254 + 12) = 0;
        turi::flexible_type::operator=<double>((uint64_t)v254, v138);
        break;
      default:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#3}::operator()();
    }
  }
}

void turi::supervised_2::logistic_regression::_internal_predict<Eigen::SparseVector<double,0,int>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double i;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double j;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  turi::thread *v40;
  uint64_t v41;
  double v42;
  double *v43;
  int *v44;
  int v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  const void **v53;
  void **v54;
  double *v55;
  uint64_t v56;
  _QWORD *v57;
  float64x2_t *v58;
  long double *v59;
  uint64_t v60;
  long double v61;
  double v62;
  long double v63;
  long double v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  float64x2_t *v69;
  uint64_t v70;
  int64_t v71;
  int64_t v72;
  float64x2_t v73;
  float64x2_t *v74;
  float64x2_t *v75;
  float64x2_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  double *f64;
  double *v81;
  double v82;
  const void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t *v88;
  char *v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t *v98;
  double v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  double v103;
  double *v104;
  _QWORD *v105;
  _QWORD *v106;
  void **v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  _QWORD *v114;
  int v115;
  unint64_t *v116;
  unint64_t v117;
  float64x2_t *v118;
  double v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  unint64_t *v127;
  unint64_t v128;
  double v129;
  char *v130;
  void *v131;
  char *v132;
  int64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  void *v138;
  void **v139;
  uint64_t *v140;
  char *v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  void *v145;
  char *v146;
  _QWORD *v147;
  char *v148;
  _QWORD *v149;
  _QWORD *v150;
  void **v151;
  _QWORD *v152;
  unint64_t v153;
  BOOL v154;
  double *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  double *v159;
  double *v160;
  double v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  void *v166;
  _QWORD *v167;
  unint64_t v168;
  BOOL v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  BOOL v173;
  _QWORD *v174;
  unint64_t v175;
  BOOL v176;
  _QWORD *v177;
  unint64_t v178;
  BOOL v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  __int128 v185;
  __int128 v186;
  unint64_t v187;
  BOOL v188;
  _QWORD *v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  unint64_t v193;
  _QWORD *v194;
  unint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  __int128 v203;
  __int128 v204;
  unint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  unint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int *v225;
  unsigned int v226;
  __int128 v227;
  __int128 v228;
  unint64_t v229;
  unint64_t v230;
  double *v231;
  _QWORD *v232;
  void *v233;
  uint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  void *__p[2];
  char *v264;
  void *v265;
  char *v266;
  void *__dst;
  char *v268;
  char **v269;

  v6 = (uint64_t)(a3 + 8);
  *((_QWORD *)a3 + 3) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    v7 = *a2;
    v8 = *(_QWORD *)(*a2 + 56);
    if (v8)
    {
      v9 = 0;
      v10 = *(_QWORD *)(v7 + 96) + 8 * a2[2] + 8 * (*(_BYTE *)(v7 + 18) == 0);
      v259 = *(_QWORD *)(*a2 + 56);
      v260 = *a2;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 16 * v9);
        v12 = *(_QWORD *)(v11 + 64);
        v13 = *(_QWORD *)(v11 + 104);
        switch(*(_DWORD *)(v11 + 24))
        {
          case 0:
            v14 = *(double *)v10;
            v10 += 8;
            v15 = v14;
            if (v12)
            {
              if (*(_BYTE *)(a1 + 360))
                v15 = v15 * *(double *)(*(_QWORD *)(a1 + 368) + 8 * v13);
              v16 = (int)v13;
              goto LABEL_28;
            }
            break;
          case 1:
            v29 = *(double *)v10;
            v10 += 8;
            v28 = v29;
            if (*(_QWORD *)&v29 < v12)
            {
              v30 = *(_QWORD *)&v28 + v13;
              v16 = (int)v30;
              if (*(_BYTE *)(a1 + 360))
              {
                v15 = *(double *)(*(_QWORD *)(a1 + 368) + 8 * v30);
LABEL_28:
                v265 = 0;
                *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, v16, &v265) = v15;
              }
              else
              {
                v265 = 0;
                *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, (int)v30, &v265) = 0x3FF0000000000000;
              }
            }
            break;
          case 2:
            v17 = *(_QWORD *)(v11 + 72);
            if (v17)
            {
              v18 = 0;
              v19 = 0;
              v20 = v13 << 32;
              v21 = 8 * v13;
              do
              {
                if (v19 < v12)
                {
                  v22 = *(double *)(v10 + 8 * v19);
                  if (*(_BYTE *)(a1 + 360))
                    v22 = v22 * *(double *)(*(_QWORD *)(a1 + 368) + v21 + 8 * v19);
                  v265 = 0;
                  *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, v20 >> 32, &v265) = v22;
                }
                ++v19;
                v20 += 0x100000000;
                v18 -= 8;
              }
              while (v17 != v19);
              goto LABEL_24;
            }
            break;
          case 3:
            v32 = *(double *)v10;
            v10 += 8;
            for (i = v32; i != 0.0; --*(_QWORD *)&i)
            {
              if (*(_QWORD *)v10 < v12)
              {
                v33 = *(_QWORD *)v10 + v13;
                if (*(_BYTE *)(a1 + 360))
                {
                  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * v33);
                  v265 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, (int)v33, &v265) = v34;
                }
                else
                {
                  v265 = 0;
                  *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, (int)v33, &v265) = 0x3FF0000000000000;
                }
              }
              v10 += 8;
            }
            break;
          case 4:
            v36 = *(double *)v10;
            v10 += 8;
            for (j = v36; j != 0.0; --*(_QWORD *)&j)
            {
              if (*(_QWORD *)v10 < v12)
              {
                v37 = *(double *)(v10 + 8);
                v38 = *(_QWORD *)v10 + v13;
                if (*(_BYTE *)(a1 + 360))
                  v37 = v37 * *(double *)(*(_QWORD *)(a1 + 368) + 8 * v38);
                v265 = 0;
                *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, (int)v38, &v265) = v37;
              }
              v10 += 16;
            }
            break;
          case 7:
            v23 = *(_QWORD *)(v11 + 72);
            if (v23)
            {
              v18 = 0;
              v24 = 0;
              v25 = v13 << 32;
              v26 = 8 * v13;
              do
              {
                if (v24 < v12)
                {
                  v27 = *(double *)(v10 + 8 * v24);
                  if (*(_BYTE *)(a1 + 360))
                    v27 = v27 * *(double *)(*(_QWORD *)(a1 + 368) + v26 + 8 * v24);
                  v265 = 0;
                  *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, v25 >> 32, &v265) = v27;
                }
                ++v24;
                v25 += 0x100000000;
                v18 -= 8;
              }
              while (v23 != v24);
LABEL_24:
              v10 -= v18;
              v8 = v259;
              v7 = v260;
            }
            break;
          default:
            break;
        }
        ++v9;
      }
      while (v9 != v8);
    }
  }
  v39 = *(int *)(a1 + 328);
  v265 = 0;
  v40 = (turi::thread *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, v39, &v265);
  *(_QWORD *)v40 = 0x3FF0000000000000;
  if (*(_QWORD *)(a1 + 784) == 2)
  {
    v41 = *((_QWORD *)a3 + 3);
    if (v41 < 1)
    {
      v42 = 0.0;
      v45 = a4;
    }
    else
    {
      v42 = 0.0;
      v43 = (double *)*((_QWORD *)a3 + 1);
      v44 = (int *)*((_QWORD *)a3 + 2);
      v45 = a4;
      do
      {
        v46 = *v43++;
        v47 = v46;
        v48 = *v44++;
        v42 = v42 + v47 * *(double *)(*(_QWORD *)(a1 + 824) + 8 * v48);
        --v41;
      }
      while (v41);
    }
    v63 = exp(-v42);
    v64 = log1p(v63);
    v65 = exp(-v64);
    v66 = v65;
    switch(v45)
    {
      case 1:
        *((_DWORD *)a5 + 2) = 0;
        *((_BYTE *)a5 + 12) = 1;
        *(double *)a5 = v42;
        break;
      case 2:
      case 3:
        *((_DWORD *)a5 + 2) = 0;
        *((_BYTE *)a5 + 12) = 1;
        *(double *)a5 = v65;
        break;
      case 4:
        v104 = (double *)operator new(0x10uLL);
        *v104 = 1.0 - v66;
        v104[1] = v66;
        *(uint64_t *)((char *)a5 + 5) = 0;
        *a5 = 0;
        *((_BYTE *)a5 + 12) = 3;
        v105 = (_QWORD *)operator new();
        v106 = v105;
        *v105 = 0;
        v105[1] = 0;
        v107 = (void **)(v105 + 1);
        v105[2] = 0;
        v105[3] = 0;
        *a5 = (uint64_t)v105;
        *v105 = 1;
        switch(*((_BYTE *)a5 + 12))
        {
          case 2:
            if (*v105 != 1)
            {
              v108 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v108, *a5);
              *a5 = (uint64_t)v108;
              *v108 = 1;
              do
              {
                v109 = __ldaxr(v106);
                v110 = v109 - 1;
              }
              while (__stlxr(v110, v106));
              if (!v110)
              {
                v111 = 0x1012C404EF22A49;
                if ((*((char *)v106 + 31) & 0x80000000) == 0)
                  goto LABEL_275;
                v112 = *v107;
                goto LABEL_261;
              }
            }
            break;
          case 3:
            if (*v105 != 1)
            {
              v216 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v216, *a5);
              *a5 = (uint64_t)v216;
              *v216 = 1;
              do
              {
                v217 = __ldaxr(v106);
                v218 = v217 - 1;
              }
              while (__stlxr(v218, v106));
              if (!v218)
              {
                v111 = 0x1080C409938AC02;
                v112 = *v107;
                if (*v107)
                {
                  v106[2] = v112;
LABEL_261:
                  operator delete(v112);
                }
                goto LABEL_275;
              }
            }
            break;
          case 4:
            if (*v105 != 1)
            {
              v209 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v209, *a5);
              *a5 = (uint64_t)v209;
              *v209 = 1;
              do
              {
                v210 = __ldaxr(v106);
                v211 = v210 - 1;
              }
              while (__stlxr(v211, v106));
              if (!v211)
              {
                v111 = 0x1020C405E66F15BLL;
                v265 = v107;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
                goto LABEL_275;
              }
            }
            break;
          case 5:
            if (*v105 != 1)
            {
              v219 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v219, *a5);
              *a5 = (uint64_t)v219;
              *v219 = 1;
              do
              {
                v220 = __ldaxr(v106);
                v221 = v220 - 1;
              }
              while (__stlxr(v221, v106));
              if (!v221)
              {
                v111 = 0x1020C405E66F15BLL;
                v265 = v107;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
                goto LABEL_275;
              }
            }
            break;
          case 8:
            if (*v105 != 1)
            {
              v222 = operator new();
              v223 = *a5;
              *(_QWORD *)v222 = *(_QWORD *)*a5;
              *(_QWORD *)(v222 + 8) = *(_QWORD *)(v223 + 8);
              v224 = *(_QWORD *)(v223 + 16);
              *(_QWORD *)(v222 + 16) = v224;
              if (v224)
              {
                v225 = (unsigned int *)(v224 + 8);
                do
                  v226 = __ldxr(v225);
                while (__stxr(v226 + 1, v225));
              }
              v227 = *(_OWORD *)(v223 + 24);
              v228 = *(_OWORD *)(v223 + 40);
              *(_OWORD *)(v222 + 56) = *(_OWORD *)(v223 + 56);
              *(_OWORD *)(v222 + 40) = v228;
              *(_OWORD *)(v222 + 24) = v227;
              *a5 = v222;
              *(_QWORD *)v222 = 1;
              do
              {
                v229 = __ldaxr(v106);
                v230 = v229 - 1;
              }
              while (__stlxr(v230, v106));
              if (!v230)
              {
                v111 = 0x1030C40F1F0227BLL;
                boost::detail::shared_count::~shared_count((unsigned int **)v106 + 2);
                goto LABEL_275;
              }
            }
            break;
          case 9:
            if (*v105 != 1)
            {
              v212 = (_QWORD *)operator new();
              v213 = *a5 + 8;
              *v212 = *(_QWORD *)*a5;
              turi::flexible_type_impl::ndarray<double>::ndarray(v212 + 1, v213);
              *a5 = (uint64_t)v212;
              *v212 = 1;
              do
              {
                v214 = __ldaxr(v106);
                v215 = v214 - 1;
              }
              while (__stlxr(v215, v106));
              if (!v215)
              {
                v111 = 0x1030C407B73B9F7;
                std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v106);
LABEL_275:
                MEMORY[0x219A19A08](v106, v111);
              }
            }
            break;
          default:
            break;
        }
        v231 = v104 + 2;
        v232 = (_QWORD *)*a5;
        v234 = *a5 + 8;
        v233 = *(void **)v234;
        if (*(_QWORD *)v234)
        {
          v232[2] = v233;
          operator delete(v233);
          *(_QWORD *)v234 = 0;
          *(_QWORD *)(v234 + 8) = 0;
          *(_QWORD *)(v234 + 16) = 0;
        }
        v232[1] = v104;
        v232[2] = v231;
        v232[3] = v231;
        break;
      case 5:
        *((_BYTE *)a5 + 12) = 0;
        *((_DWORD *)a5 + 2) = 0;
        *a5 = v65 >= 0.5;
        break;
      case 6:
        v113 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 768) + 24) + 32) + 80) + 16 * (v65 >= 0.5);
        *a5 = 0;
        *((_DWORD *)a5 + 2) = 0;
        *((_BYTE *)a5 + 12) = 0;
        if ((uint64_t *)v113 != a5)
        {
          v114 = *(_QWORD **)v113;
          *(uint64_t *)((char *)a5 + 5) = *(_QWORD *)(v113 + 5);
          *a5 = (uint64_t)v114;
          v115 = *(unsigned __int8 *)(v113 + 12);
          *((_BYTE *)a5 + 12) = v115;
          switch(v115)
          {
            case 2:
              v116 = (unint64_t *)*a5;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 + 1, v116));
              break;
            case 3:
              v239 = (unint64_t *)*a5;
              do
                v240 = __ldaxr(v239);
              while (__stlxr(v240 + 1, v239));
              break;
            case 4:
              v235 = (unint64_t *)*a5;
              do
                v236 = __ldaxr(v235);
              while (__stlxr(v236 + 1, v235));
              break;
            case 5:
              v241 = (unint64_t *)*a5;
              do
                v242 = __ldaxr(v241);
              while (__stlxr(v242 + 1, v241));
              break;
            case 8:
              v243 = (unint64_t *)*a5;
              do
                v244 = __ldaxr(v243);
              while (__stlxr(v244 + 1, v243));
              break;
            case 9:
              v237 = (unint64_t *)*a5;
              do
                v238 = __ldaxr(v237);
              while (__stlxr(v238 + 1, v237));
              break;
            default:
              return;
          }
        }
        break;
      default:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#1}::operator()();
    }
  }
  else
  {
    v49 = *(_QWORD *)turi::thread::get_tls_data(v40);
    v50 = *(_QWORD *)(a1 + 864);
    v51 = (_BYTE *)(v50 + 232 * v49);
    if (!*v51)
    {
      if (*(_BYTE *)(a1 + 896))
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((_QWORD *)(v50 + 232 * v49 + 120), *(_QWORD *)(a1 + 328) + 1);
      }
      else
      {
        v255 = v50 + 232 * v49;
        *(_QWORD *)(v255 + 224) = *(_QWORD *)(a1 + 328) + 1;
        *(_QWORD *)(v255 + 208) = 0;
      }
      *v51 = 1;
    }
    v52 = (_QWORD *)(v50 + 232 * v49);
    v53 = (const void **)(v52 + 17);
    v54 = (void **)(v52 + 19);
    v265 = (void *)(a1 + 824);
    v266 = a3;
    Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(v52 + 17, &v265);
    v55 = (double *)v52[17];
    v56 = v52[18];
    if (v52[20] != v56)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v52 + 19, v52[18], 1);
      v56 = v52[20];
    }
    v57 = v52 + 21;
    v58 = (float64x2_t *)*v54;
    if (v56 >= 1)
    {
      v59 = (long double *)*v54;
      v60 = v56;
      do
      {
        v61 = *v55++;
        *v59++ = exp(v61);
        --v60;
      }
      while (v60);
    }
    if (v56)
    {
      v265 = v58;
      __dst = v54;
      v62 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v265);
      v58 = (float64x2_t *)*v54;
    }
    else
    {
      v62 = 0.0;
    }
    v67 = (uint64_t)v54[1];
    if (v57[1] != v67)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v57, v67, 1);
      v67 = v57[1];
    }
    v68 = v62 + 1.0;
    v69 = (float64x2_t *)*v57;
    if (v67 >= 0)
      v70 = v67;
    else
      v70 = v67 + 1;
    v71 = v70 & 0xFFFFFFFFFFFFFFFELL;
    if (v67 >= 2)
    {
      v72 = 0;
      v73 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v68, 0);
      v74 = (float64x2_t *)*v57;
      v75 = v58;
      do
      {
        v76 = *v75++;
        *v74++ = vdivq_f64(v76, v73);
        v72 += 2;
      }
      while (v72 < v71);
    }
    v77 = __OFSUB__(v67, v71);
    v78 = v67 - v71;
    if (!((v78 < 0) ^ v77 | (v78 == 0)))
    {
      v79 = v70 >> 1;
      f64 = v58[v70 >> 1].f64;
      v81 = v69[v79].f64;
      do
      {
        v82 = *f64++;
        *v81++ = v82 / v68;
        --v78;
      }
      while (v78);
    }
    switch(a4)
    {
      case 0:
      case 8:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#2}::operator()();
      case 1:
      case 3:
        v83 = *v53;
        v84 = (uint64_t)*v53 + 8 * *(_QWORD *)(a1 + 784) - 8;
        v85 = v84 - (_QWORD)*v53;
        __p[1] = 0;
        v264 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, v83, v84, v85 >> 3);
        v262 = 0;
        v87 = __p[0];
        v86 = (uint64_t *)__p[1];
        if (__p[1] >= v264)
        {
          v120 = (((char *)__p[1] - (char *)__p[0]) >> 3) + 1;
          v88 = a5;
          if (v120 >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v121 = v264 - (char *)__p[0];
          if ((v264 - (char *)__p[0]) >> 2 > v120)
            v120 = v121 >> 2;
          if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
            v122 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v122 = v120;
          v268 = 0;
          v269 = &v264;
          if (v122)
            v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v264, v122);
          else
            v123 = 0;
          v265 = v123;
          v266 = v123;
          __dst = v123;
          v268 = &v123[8 * v122];
          std::__split_buffer<double>::push_back(&v265, (double *)&v262);
          v141 = v266;
          v142 = __p[0];
          if (__p[0] != v87)
          {
            v143 = v87;
            do
            {
              v144 = *--v143;
              *((_QWORD *)v141 - 1) = v144;
              v141 -= 8;
            }
            while (v143 != v142);
          }
          v266 = v141;
          v145 = __dst;
          v146 = (char *)((char *)__p[1] - (char *)v87);
          if (__p[1] != v87)
          {
            memmove(__dst, v87, (char *)__p[1] - (char *)v87);
            v141 = v266;
            v87 = __p[1];
          }
          v147 = __p[0];
          v148 = v264;
          __p[0] = v141;
          __p[1] = &v146[(_QWORD)v145];
          v264 = v268;
          v265 = v147;
          __dst = v87;
          v268 = v148;
          v266 = (char *)v147;
          if (v87 != v147)
            __dst = (char *)v87 + (((char *)v147 - (char *)v87 + 7) & 0xFFFFFFFFFFFFFFF8);
          if (v147)
            operator delete(v147);
        }
        else
        {
          v88 = a5;
          if (__p[0] == __p[1])
          {
            *(_QWORD *)__p[0] = 0;
            __p[1] = v87 + 1;
          }
          else
          {
            v89 = (char *)__p[0] + 8;
            v90 = (uint64_t *)((char *)__p[1] - 8);
            v91 = __p[1];
            while (v90 < v86)
            {
              v92 = *v90++;
              *v91++ = v92;
            }
            __p[1] = v91;
            if (v86 != (uint64_t *)v89)
              memmove(&v86[-(((char *)v86 - v89) >> 3)], v87, (char *)v86 - v89);
            *v87 = v262;
          }
        }
        *(uint64_t *)((char *)v88 + 5) = 0;
        *v88 = 0;
        *((_BYTE *)v88 + 12) = 3;
        v149 = (_QWORD *)operator new();
        v150 = v149;
        *v149 = 0;
        v149[1] = 0;
        v151 = (void **)(v149 + 1);
        v149[2] = 0;
        v149[3] = 0;
        *v88 = (uint64_t)v149;
        *v149 = 1;
        switch(*((_BYTE *)v88 + 12))
        {
          case 2:
            if (*v149 != 1)
            {
              v152 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v152, *v88);
              *v88 = (uint64_t)v152;
              *v152 = 1;
              do
              {
                v153 = __ldaxr(v150);
                v154 = --v153 == 0;
              }
              while (__stlxr(v153, v150));
              goto LABEL_179;
            }
            break;
          case 3:
            if (*v149 != 1)
            {
              v174 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v174, *v88);
              *v88 = (uint64_t)v174;
              *v174 = 1;
              do
              {
                v175 = __ldaxr(v150);
                v176 = --v175 == 0;
              }
              while (__stlxr(v175, v150));
              goto LABEL_221;
            }
            break;
          case 4:
            if (*v149 != 1)
            {
              v167 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v167, *v88);
              *v88 = (uint64_t)v167;
              *v167 = 1;
              do
              {
                v168 = __ldaxr(v150);
                v169 = --v168 == 0;
              }
              while (__stlxr(v168, v150));
              goto LABEL_209;
            }
            break;
          case 5:
            if (*v149 != 1)
            {
              v177 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v177, *v88);
              *v88 = (uint64_t)v177;
              *v177 = 1;
              do
              {
                v178 = __ldaxr(v150);
                v179 = --v178 == 0;
              }
              while (__stlxr(v178, v150));
              goto LABEL_229;
            }
            break;
          case 8:
            if (*v149 != 1)
            {
              v180 = operator new();
              v181 = *v88;
              *(_QWORD *)v180 = *(_QWORD *)*v88;
              *(_QWORD *)(v180 + 8) = *(_QWORD *)(v181 + 8);
              v182 = *(_QWORD *)(v181 + 16);
              *(_QWORD *)(v180 + 16) = v182;
              if (v182)
              {
                v183 = (unsigned int *)(v182 + 8);
                do
                  v184 = __ldxr(v183);
                while (__stxr(v184 + 1, v183));
              }
              v185 = *(_OWORD *)(v181 + 24);
              v186 = *(_OWORD *)(v181 + 40);
              *(_OWORD *)(v180 + 56) = *(_OWORD *)(v181 + 56);
              *(_OWORD *)(v180 + 40) = v186;
              *(_OWORD *)(v180 + 24) = v185;
              *v88 = v180;
              *(_QWORD *)v180 = 1;
              do
              {
                v187 = __ldaxr(v150);
                v188 = --v187 == 0;
              }
              while (__stlxr(v187, v150));
              goto LABEL_238;
            }
            break;
          case 9:
            if (*v149 != 1)
            {
              v170 = (_QWORD *)operator new();
              v171 = *v88 + 8;
              *v170 = *(_QWORD *)*v88;
              turi::flexible_type_impl::ndarray<double>::ndarray(v170 + 1, v171);
              *v88 = (uint64_t)v170;
              *v170 = 1;
              do
              {
                v172 = __ldaxr(v150);
                v173 = --v172 == 0;
              }
              while (__stlxr(v172, v150));
              goto LABEL_215;
            }
            break;
          default:
            goto LABEL_242;
        }
        goto LABEL_242;
      case 2:
      case 4:
        __p[0] = 0;
        __p[1] = 0;
        v264 = 0;
        v101 = *(_QWORD *)(a1 + 784);
        if (v101)
        {
          if (v101 >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          __p[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v264, v101);
          __p[1] = __p[0];
          v264 = (char *)__p[0] + 8 * v102;
        }
        if (v57[1])
        {
          v265 = (void *)*v57;
          __dst = v57;
          v103 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v265);
        }
        else
        {
          v103 = 0.0;
        }
        v88 = a5;
        v129 = 1.0 - v103;
        v130 = (char *)__p[1];
        if (__p[1] >= v264)
        {
          v132 = (char *)__p[0];
          v133 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v134 = v133 + 1;
          if ((unint64_t)(v133 + 1) >> 61)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v135 = v264 - (char *)__p[0];
          if ((v264 - (char *)__p[0]) >> 2 > v134)
            v134 = v135 >> 2;
          if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8)
            v136 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v136 = v134;
          if (v136)
          {
            v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v264, v136);
            v132 = (char *)__p[0];
            v130 = (char *)__p[1];
          }
          else
          {
            v137 = 0;
          }
          v155 = (double *)&v137[8 * v133];
          v156 = &v137[8 * v136];
          *v155 = v129;
          v131 = v155 + 1;
          while (v130 != v132)
          {
            v157 = *((_QWORD *)v130 - 1);
            v130 -= 8;
            *((_QWORD *)v155-- - 1) = v157;
          }
          __p[0] = v155;
          __p[1] = v131;
          v264 = v156;
          if (v132)
            operator delete(v132);
        }
        else
        {
          *(double *)__p[1] = v129;
          v131 = v130 + 8;
        }
        __p[1] = v131;
        v158 = (char *)(*v57 + 8 * *(_QWORD *)(a1 + 784) - 8);
        std::vector<double>::__insert_with_size[abi:ne180100]<double *,double *>((uint64_t)__p, (uint64_t)v131, (char *)*v57, v158, (uint64_t)&v158[-*v57] >> 3);
        v159 = (double *)__p[0];
        v160 = (double *)__p[1];
        while (v159 != v160)
        {
          v161 = 0.0;
          if (*v159 < 0.0 || (v161 = 1.0, *v159 > 1.0))
            *v159 = v161;
          ++v159;
        }
        *(uint64_t *)((char *)a5 + 5) = 0;
        *a5 = 0;
        *((_BYTE *)a5 + 12) = 3;
        v162 = (_QWORD *)operator new();
        v150 = v162;
        *v162 = 0;
        v162[1] = 0;
        v151 = (void **)(v162 + 1);
        v162[2] = 0;
        v162[3] = 0;
        *a5 = (uint64_t)v162;
        *v162 = 1;
        switch(*((_BYTE *)a5 + 12))
        {
          case 2:
            if (*v162 != 1)
            {
              v163 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v163, *a5);
              *a5 = (uint64_t)v163;
              *v163 = 1;
              do
              {
                v164 = __ldaxr(v150);
                v154 = --v164 == 0;
              }
              while (__stlxr(v164, v150));
LABEL_179:
              if (v154)
              {
                v165 = 0x1012C404EF22A49;
                if ((*((char *)v150 + 31) & 0x80000000) == 0)
                  goto LABEL_241;
                v166 = *v151;
                goto LABEL_225;
              }
            }
            break;
          case 3:
            if (*v162 != 1)
            {
              v194 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v194, *a5);
              *a5 = (uint64_t)v194;
              *v194 = 1;
              do
              {
                v195 = __ldaxr(v150);
                v176 = --v195 == 0;
              }
              while (__stlxr(v195, v150));
LABEL_221:
              if (v176)
              {
                v165 = 0x1080C409938AC02;
                v166 = *v151;
                if (*v151)
                {
                  v150[2] = v166;
LABEL_225:
                  operator delete(v166);
                }
                goto LABEL_241;
              }
            }
            break;
          case 4:
            if (*v162 != 1)
            {
              v189 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v189, *a5);
              *a5 = (uint64_t)v189;
              *v189 = 1;
              do
              {
                v190 = __ldaxr(v150);
                v169 = --v190 == 0;
              }
              while (__stlxr(v190, v150));
LABEL_209:
              if (v169)
              {
                v165 = 0x1020C405E66F15BLL;
                v265 = v151;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
                goto LABEL_241;
              }
            }
            break;
          case 5:
            if (*v162 != 1)
            {
              v196 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v196, *a5);
              *a5 = (uint64_t)v196;
              *v196 = 1;
              do
              {
                v197 = __ldaxr(v150);
                v179 = --v197 == 0;
              }
              while (__stlxr(v197, v150));
LABEL_229:
              if (v179)
              {
                v165 = 0x1020C405E66F15BLL;
                v265 = v151;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
                goto LABEL_241;
              }
            }
            break;
          case 8:
            if (*v162 != 1)
            {
              v198 = operator new();
              v199 = *a5;
              *(_QWORD *)v198 = *(_QWORD *)*a5;
              *(_QWORD *)(v198 + 8) = *(_QWORD *)(v199 + 8);
              v200 = *(_QWORD *)(v199 + 16);
              *(_QWORD *)(v198 + 16) = v200;
              if (v200)
              {
                v201 = (unsigned int *)(v200 + 8);
                do
                  v202 = __ldxr(v201);
                while (__stxr(v202 + 1, v201));
              }
              v203 = *(_OWORD *)(v199 + 24);
              v204 = *(_OWORD *)(v199 + 40);
              *(_OWORD *)(v198 + 56) = *(_OWORD *)(v199 + 56);
              *(_OWORD *)(v198 + 40) = v204;
              *(_OWORD *)(v198 + 24) = v203;
              *a5 = v198;
              *(_QWORD *)v198 = 1;
              do
              {
                v205 = __ldaxr(v150);
                v188 = --v205 == 0;
              }
              while (__stlxr(v205, v150));
LABEL_238:
              if (v188)
              {
                v165 = 0x1030C40F1F0227BLL;
                boost::detail::shared_count::~shared_count((unsigned int **)v150 + 2);
                goto LABEL_241;
              }
            }
            break;
          case 9:
            if (*v162 != 1)
            {
              v191 = (_QWORD *)operator new();
              v192 = *a5 + 8;
              *v191 = *(_QWORD *)*a5;
              turi::flexible_type_impl::ndarray<double>::ndarray(v191 + 1, v192);
              *a5 = (uint64_t)v191;
              *v191 = 1;
              do
              {
                v193 = __ldaxr(v150);
                v173 = --v193 == 0;
              }
              while (__stlxr(v193, v150));
LABEL_215:
              if (v173)
              {
                v165 = 0x1030C407B73B9F7;
                std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v150);
LABEL_241:
                MEMORY[0x219A19A08](v150, v165);
              }
            }
            break;
          default:
            break;
        }
LABEL_242:
        v206 = *v88;
        v208 = *v88 + 8;
        v207 = *(void **)v208;
        if (*(_QWORD *)v208)
        {
          *(_QWORD *)(v206 + 16) = v207;
          operator delete(v207);
          *(_QWORD *)v208 = 0;
          *(_QWORD *)(v208 + 8) = 0;
          *(_QWORD *)(v208 + 16) = 0;
        }
        *(_OWORD *)(v206 + 8) = *(_OWORD *)__p;
        *(_QWORD *)(v206 + 24) = v264;
        break;
      case 5:
      case 6:
        v93 = *(_QWORD *)(a1 + 784);
        v94 = v93 - 1;
        if (v93 == 1)
        {
          v96 = 0;
          v98 = a5;
        }
        else
        {
          v95 = 0;
          v96 = 0;
          v97 = 0.0;
          v98 = a5;
          do
          {
            v99 = *((double *)*v53 + v95);
            if (v97 < v99)
              v96 = v95 + 1;
            v100 = v95 + 1;
            if (v97 < v99)
              v97 = *((double *)*v53 + v95);
            ++v95;
          }
          while (v94 != v100);
        }
        if (a4 == 5)
        {
          *((_BYTE *)v98 + 12) = 0;
          *((_DWORD *)v98 + 2) = 0;
          *v98 = v96;
        }
        else
        {
          v124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 768) + 24) + 32) + 80) + 16 * v96;
          *v98 = 0;
          *((_DWORD *)v98 + 2) = 0;
          *((_BYTE *)v98 + 12) = 0;
          if ((uint64_t *)v124 != v98)
          {
            v125 = *(_QWORD *)v124;
            *(uint64_t *)((char *)v98 + 5) = *(_QWORD *)(v124 + 5);
            *v98 = v125;
            v126 = *(unsigned __int8 *)(v124 + 12);
            *((_BYTE *)v98 + 12) = v126;
            switch(v126)
            {
              case 2:
                v127 = (unint64_t *)*v98;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 + 1, v127));
                break;
              case 3:
                v249 = (unint64_t *)*v98;
                do
                  v250 = __ldaxr(v249);
                while (__stlxr(v250 + 1, v249));
                break;
              case 4:
                v245 = (unint64_t *)*v98;
                do
                  v246 = __ldaxr(v245);
                while (__stlxr(v246 + 1, v245));
                break;
              case 5:
                v251 = (unint64_t *)*v98;
                do
                  v252 = __ldaxr(v251);
                while (__stlxr(v252 + 1, v251));
                break;
              case 8:
                v253 = (unint64_t *)*v98;
                do
                  v254 = __ldaxr(v253);
                while (__stlxr(v254 + 1, v253));
                break;
              case 9:
                v247 = (unint64_t *)*v98;
                do
                  v248 = __ldaxr(v247);
                while (__stlxr(v248 + 1, v247));
                break;
              default:
                return;
            }
          }
        }
        break;
      case 7:
        v118 = (float64x2_t *)*v57;
        if (v57[1])
        {
          v265 = (void *)*v57;
          __dst = v57;
          v119 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v265);
          v118 = (float64x2_t *)*v57;
        }
        else
        {
          v119 = 0.0;
        }
        *(double *)__p = 1.0 - v119;
        v265 = v118;
        __dst = v57;
        Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v265);
        v265 = v138;
        v139 = __p;
        if (*(double *)__p < *(double *)&v138)
          v139 = &v265;
        if (*(double *)v139 < 0.0)
          v139 = (void **)&v262;
        v261 = 0x3FF0000000000000;
        v262 = 0;
        if (*(double *)v139 <= 1.0)
          v140 = (uint64_t *)v139;
        else
          v140 = &v261;
        *a5 = 0;
        *((_DWORD *)a5 + 2) = 0;
        *((_BYTE *)a5 + 12) = 0;
        turi::flexible_type::operator=<double>((uint64_t)a5, v140);
        break;
      default:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#3}::operator()();
    }
  }
}

void turi::supervised_2::logistic_regression::setup_solver(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "operator()", 394, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::supervised_2::logistic_regression::setup_solver(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_21835F538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::lr_optimization_interface::~lr_optimization_interface(turi::supervised_2::logistic_regression::lr_optimization_interface *this)
{
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x219A19A08);
}

void turi::supervised_2::logistic_regression::lr_optimization_interface::compute_first_order_statistics(uint64_t a1, __darwin_time_t *a2, float64x2_t **a3, double *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 896))
    turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>((_QWORD *)v4, a2, a4, a3, 0);
  else
    turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>((_QWORD *)v4, a2, a4, a3, 0);
}

void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(_QWORD *a1, __darwin_time_t *a2, double *a3, float64x2_t **a4, float64x2_t **a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  uint64_t v17;
  timeval *v18;
  timeval *v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  float64x2_t *v23;
  float64x2_t *v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *f64;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  float64x2_t *v39;
  uint64_t v40;
  BOOL v42;
  float64x2_t *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float64x2_t *v60;
  float64x2_t *v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  float64x2_t *v66;
  float64x2_t *v67;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  double *v72;
  double v73;
  uint64_t v74;
  float64x2_t *v75;
  float64x2_t *v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  int64_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t v83;
  uint64_t v84;
  uint64_t v85;
  double *v86;
  double *v87;
  double v88;
  int *v89;
  file_logger *v90;
  file_logger *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  const std::locale::facet *v96;
  _QWORD *exception;
  _QWORD *v98;
  std::bad_alloc *v99;
  std::bad_alloc *v100;
  timeval v101;
  uint64_t v102;
  timeval v103;
  BOOL v104;
  timeval v105;
  timeval *v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v104 = a5 != 0;
  gettimeofday(&v103, 0);
  gettimeofday(&v101, 0);
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "_compute_optimization_statistics", 455, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Starting second order stats computation", 39);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet((const std::locale *)&v101, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v101);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v16 = a1[98] - 1;
  v17 = a1[107];
  v101.tv_sec = *a2;
  *(_QWORD *)&v101.tv_usec = v16;
  v102 = v17;
  v18 = (timeval *)operator new(0x20uLL);
  v18->tv_sec = (__darwin_time_t)&unk_24D93BF48;
  *(_QWORD *)&v18->tv_usec = a1;
  v18[1].tv_sec = (__darwin_time_t)&v104;
  *(_QWORD *)&v18[1].tv_usec = &v101;
  v106 = v18;
  turi::in_parallel((turi::thread_pool *)&v105);
  v19 = v106;
  if (v106 == &v105)
  {
    v20 = 4;
    v19 = &v105;
  }
  else
  {
    if (!v106)
      goto LABEL_14;
    v20 = 5;
  }
  (*(void (**)(void))(v19->tv_sec + 8 * v20))();
LABEL_14:
  v21 = (double *)a1[108];
  *a3 = v21[14];
  v23 = (float64x2_t *)*((_QWORD *)v21 + 3);
  v22 = *((_QWORD *)v21 + 4);
  if (a4[1] != (float64x2_t *)v22)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v22, 1);
    v22 = (uint64_t)a4[1];
  }
  v24 = *a4;
  if (v22 >= 0)
    v25 = v22;
  else
    v25 = v22 + 1;
  v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
  if (v22 >= 2)
  {
    v27 = 0;
    v28 = *a4;
    v29 = v23;
    do
    {
      v30 = *v29++;
      *v28++ = v30;
      v27 += 2;
    }
    while (v27 < v26);
  }
  v31 = __OFSUB__(v22, v26);
  v32 = v22 - v26;
  if (!((v32 < 0) ^ v31 | (v32 == 0)))
  {
    v33 = v25 >> 1;
    v34 = (uint64_t *)&v23[v25 >> 1];
    f64 = (_QWORD *)v24[v33].f64;
    do
    {
      v36 = *v34++;
      *f64++ = v36;
      --v32;
    }
    while (v32);
  }
  if (a5)
  {
    v37 = (_QWORD *)a1[108];
    v39 = (float64x2_t *)v37[5];
    v38 = v37[6];
    v40 = v37[7];
    if (a5[1] != (float64x2_t *)v38 || a5[2] != (float64x2_t *)v40)
    {
      if (v38)
        v42 = v40 == 0;
      else
        v42 = 1;
      if (!v42 && 0x7FFFFFFFFFFFFFFFLL / v40 < v38)
      {
        v99 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v100 = std::bad_alloc::bad_alloc(v99);
        __cxa_throw(v100, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a5, v40 * v38, v38, v40);
      v38 = (uint64_t)a5[1];
      v40 = (uint64_t)a5[2];
    }
    v43 = *a5;
    v44 = v38 * v40;
    if (v38 * v40 >= 0)
      v45 = v38 * v40;
    else
      v45 = v44 + 1;
    v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
    if (v44 >= 2)
    {
      v47 = 0;
      v48 = *a5;
      v49 = v39;
      do
      {
        v50 = *v49++;
        *v48++ = v50;
        v47 += 2;
      }
      while (v47 < v46);
    }
    v51 = v44 <= v46;
    v52 = v44 - v46;
    if (!v51)
    {
      v53 = v45 >> 1;
      v54 = (uint64_t *)&v39[v45 >> 1];
      v55 = (_QWORD *)v43[v53].f64;
      do
      {
        v56 = *v54++;
        *v55++ = v56;
        --v52;
      }
      while (v52);
    }
  }
  v57 = a1[108];
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[109] - v57) >> 3)) >= 2)
  {
    v58 = 1;
    do
    {
      v59 = v57 + 232 * v58;
      *a3 = *(double *)(v59 + 112) + *a3;
      v60 = *(float64x2_t **)(v59 + 24);
      v61 = *a4;
      v62 = (uint64_t)a4[1];
      if (v62 >= 0)
        v63 = (uint64_t)a4[1];
      else
        v63 = v62 + 1;
      v64 = v63 & 0xFFFFFFFFFFFFFFFELL;
      if (v62 >= 2)
      {
        v65 = 0;
        v66 = *a4;
        v67 = v60;
        do
        {
          v68 = *v67++;
          *v66 = vaddq_f64(v68, *v66);
          ++v66;
          v65 += 2;
        }
        while (v65 < v64);
      }
      v51 = v62 <= v64;
      v69 = v62 - v64;
      if (!v51)
      {
        v70 = v63 >> 1;
        v71 = v60[v70].f64;
        v72 = v61[v70].f64;
        do
        {
          v73 = *v71++;
          *v72 = v73 + *v72;
          ++v72;
          --v69;
        }
        while (v69);
      }
      if (a5)
      {
        v74 = *(_QWORD *)(a1[108] + 232 * v58 + 40);
        v75 = *a5;
        v76 = a5[1];
        v77 = (_QWORD)a5[2] * (_QWORD)v76;
        if (v77 >= 0)
          v78 = (_QWORD)a5[2] * (_QWORD)v76;
        else
          v78 = v77 + 1;
        v79 = v78 & 0xFFFFFFFFFFFFFFFELL;
        if (v77 >= 2)
        {
          v80 = 0;
          v81 = *a5;
          v82 = *(float64x2_t **)(a1[108] + 232 * v58 + 40);
          do
          {
            v83 = *v82++;
            *v81 = vaddq_f64(v83, *v81);
            ++v81;
            v80 += 2;
          }
          while (v80 < v79);
        }
        v51 = v77 <= v79;
        v84 = v77 - v79;
        if (!v51)
        {
          v85 = v78 >> 1;
          v86 = (double *)(v74 + 16 * v85);
          v87 = v75[v85].f64;
          do
          {
            v88 = *v86++;
            *v87 = v88 + *v87;
            ++v87;
            --v84;
          }
          while (v84);
        }
      }
      ++v58;
      v57 = a1[108];
    }
    while (v58 < 0x34F72C234F72C235 * ((a1[109] - v57) >> 3));
  }
  v89 = (int *)global_logger();
  if (v89[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v89))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v90 = (file_logger *)global_logger();
    v91 = file_logger::start_stream(v90, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "_compute_optimization_statistics", 553, 1);
    v92 = pthread_getspecific(*((_QWORD *)v91 + 74));
    if (v92 && *((_BYTE *)v92 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92 + 2, (uint64_t)"Computation done at ", 20);
    gettimeofday(&v105, 0);
    v93 = file_logger::operator<<<double>((uint64_t)v91);
    v94 = pthread_getspecific(*(_QWORD *)(v93 + 592));
    if (v94 && *((_BYTE *)v94 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94 + 2, (uint64_t)"s", 1);
    v95 = pthread_getspecific(*(_QWORD *)(v93 + 592));
    if (v95 && *((_BYTE *)v95 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v95 + *(_QWORD *)(v95[2] - 24) + 16));
      v96 = std::locale::use_facet((const std::locale *)&v105, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v96->__vftable[2].~facet_0)(v96, 10);
      std::locale::~locale((std::locale *)&v105);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v93);
      if (*(_DWORD *)(v93 + 600) == 7)
      {
        __print_back_trace();
        v98 = __cxa_allocate_exception(8uLL);
        *v98 = "LOG_FATAL encountered";
        __cxa_throw(v98, MEMORY[0x24BEDB718], 0);
      }
    }
  }
}

void sub_21835FCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::locale::~locale(&a18);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(_QWORD *a1, __darwin_time_t *a2, double *a3, float64x2_t **a4, float64x2_t **a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  uint64_t v16;
  uint64_t v17;
  timeval *v18;
  timeval *v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  float64x2_t *v23;
  float64x2_t *v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *f64;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  float64x2_t *v39;
  uint64_t v40;
  BOOL v42;
  float64x2_t *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  float64x2_t *v48;
  float64x2_t *v49;
  float64x2_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float64x2_t *v60;
  float64x2_t *v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  float64x2_t *v66;
  float64x2_t *v67;
  float64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  double *v72;
  double v73;
  uint64_t v74;
  float64x2_t *v75;
  float64x2_t *v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  int64_t v80;
  float64x2_t *v81;
  float64x2_t *v82;
  float64x2_t v83;
  uint64_t v84;
  uint64_t v85;
  double *v86;
  double *v87;
  double v88;
  int *v89;
  file_logger *v90;
  file_logger *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  const std::locale::facet *v96;
  _QWORD *exception;
  _QWORD *v98;
  std::bad_alloc *v99;
  std::bad_alloc *v100;
  timeval v101;
  uint64_t v102;
  timeval v103;
  BOOL v104;
  timeval v105;
  timeval *v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v104 = a5 != 0;
  gettimeofday(&v103, 0);
  gettimeofday(&v101, 0);
  v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "_compute_optimization_statistics", 455, 1);
    v13 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Starting second order stats computation", 39);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14)
    {
      if (*((_BYTE *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
        v15 = std::locale::use_facet((const std::locale *)&v101, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v101);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  v16 = a1[98] - 1;
  v17 = a1[107];
  v101.tv_sec = *a2;
  *(_QWORD *)&v101.tv_usec = v16;
  v102 = v17;
  v18 = (timeval *)operator new(0x20uLL);
  v18->tv_sec = (__darwin_time_t)&unk_24D93BFC8;
  *(_QWORD *)&v18->tv_usec = a1;
  v18[1].tv_sec = (__darwin_time_t)&v104;
  *(_QWORD *)&v18[1].tv_usec = &v101;
  v106 = v18;
  turi::in_parallel((turi::thread_pool *)&v105);
  v19 = v106;
  if (v106 == &v105)
  {
    v20 = 4;
    v19 = &v105;
  }
  else
  {
    if (!v106)
      goto LABEL_14;
    v20 = 5;
  }
  (*(void (**)(void))(v19->tv_sec + 8 * v20))();
LABEL_14:
  v21 = (double *)a1[108];
  *a3 = v21[14];
  v23 = (float64x2_t *)*((_QWORD *)v21 + 3);
  v22 = *((_QWORD *)v21 + 4);
  if (a4[1] != (float64x2_t *)v22)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v22, 1);
    v22 = (uint64_t)a4[1];
  }
  v24 = *a4;
  if (v22 >= 0)
    v25 = v22;
  else
    v25 = v22 + 1;
  v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
  if (v22 >= 2)
  {
    v27 = 0;
    v28 = *a4;
    v29 = v23;
    do
    {
      v30 = *v29++;
      *v28++ = v30;
      v27 += 2;
    }
    while (v27 < v26);
  }
  v31 = __OFSUB__(v22, v26);
  v32 = v22 - v26;
  if (!((v32 < 0) ^ v31 | (v32 == 0)))
  {
    v33 = v25 >> 1;
    v34 = (uint64_t *)&v23[v25 >> 1];
    f64 = (_QWORD *)v24[v33].f64;
    do
    {
      v36 = *v34++;
      *f64++ = v36;
      --v32;
    }
    while (v32);
  }
  if (a5)
  {
    v37 = (_QWORD *)a1[108];
    v39 = (float64x2_t *)v37[5];
    v38 = v37[6];
    v40 = v37[7];
    if (a5[1] != (float64x2_t *)v38 || a5[2] != (float64x2_t *)v40)
    {
      if (v38)
        v42 = v40 == 0;
      else
        v42 = 1;
      if (!v42 && 0x7FFFFFFFFFFFFFFFLL / v40 < v38)
      {
        v99 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v100 = std::bad_alloc::bad_alloc(v99);
        __cxa_throw(v100, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a5, v40 * v38, v38, v40);
      v38 = (uint64_t)a5[1];
      v40 = (uint64_t)a5[2];
    }
    v43 = *a5;
    v44 = v38 * v40;
    if (v38 * v40 >= 0)
      v45 = v38 * v40;
    else
      v45 = v44 + 1;
    v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
    if (v44 >= 2)
    {
      v47 = 0;
      v48 = *a5;
      v49 = v39;
      do
      {
        v50 = *v49++;
        *v48++ = v50;
        v47 += 2;
      }
      while (v47 < v46);
    }
    v51 = v44 <= v46;
    v52 = v44 - v46;
    if (!v51)
    {
      v53 = v45 >> 1;
      v54 = (uint64_t *)&v39[v45 >> 1];
      v55 = (_QWORD *)v43[v53].f64;
      do
      {
        v56 = *v54++;
        *v55++ = v56;
        --v52;
      }
      while (v52);
    }
  }
  v57 = a1[108];
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[109] - v57) >> 3)) >= 2)
  {
    v58 = 1;
    do
    {
      v59 = v57 + 232 * v58;
      *a3 = *(double *)(v59 + 112) + *a3;
      v60 = *(float64x2_t **)(v59 + 24);
      v61 = *a4;
      v62 = (uint64_t)a4[1];
      if (v62 >= 0)
        v63 = (uint64_t)a4[1];
      else
        v63 = v62 + 1;
      v64 = v63 & 0xFFFFFFFFFFFFFFFELL;
      if (v62 >= 2)
      {
        v65 = 0;
        v66 = *a4;
        v67 = v60;
        do
        {
          v68 = *v67++;
          *v66 = vaddq_f64(v68, *v66);
          ++v66;
          v65 += 2;
        }
        while (v65 < v64);
      }
      v51 = v62 <= v64;
      v69 = v62 - v64;
      if (!v51)
      {
        v70 = v63 >> 1;
        v71 = v60[v70].f64;
        v72 = v61[v70].f64;
        do
        {
          v73 = *v71++;
          *v72 = v73 + *v72;
          ++v72;
          --v69;
        }
        while (v69);
      }
      if (a5)
      {
        v74 = *(_QWORD *)(a1[108] + 232 * v58 + 40);
        v75 = *a5;
        v76 = a5[1];
        v77 = (_QWORD)a5[2] * (_QWORD)v76;
        if (v77 >= 0)
          v78 = (_QWORD)a5[2] * (_QWORD)v76;
        else
          v78 = v77 + 1;
        v79 = v78 & 0xFFFFFFFFFFFFFFFELL;
        if (v77 >= 2)
        {
          v80 = 0;
          v81 = *a5;
          v82 = *(float64x2_t **)(a1[108] + 232 * v58 + 40);
          do
          {
            v83 = *v82++;
            *v81 = vaddq_f64(v83, *v81);
            ++v81;
            v80 += 2;
          }
          while (v80 < v79);
        }
        v51 = v77 <= v79;
        v84 = v77 - v79;
        if (!v51)
        {
          v85 = v78 >> 1;
          v86 = (double *)(v74 + 16 * v85);
          v87 = v75[v85].f64;
          do
          {
            v88 = *v86++;
            *v87 = v88 + *v87;
            ++v87;
            --v84;
          }
          while (v84);
        }
      }
      ++v58;
      v57 = a1[108];
    }
    while (v58 < 0x34F72C234F72C235 * ((a1[109] - v57) >> 3));
  }
  v89 = (int *)global_logger();
  if (v89[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v89))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v90 = (file_logger *)global_logger();
    v91 = file_logger::start_stream(v90, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "_compute_optimization_statistics", 553, 1);
    v92 = pthread_getspecific(*((_QWORD *)v91 + 74));
    if (v92 && *((_BYTE *)v92 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92 + 2, (uint64_t)"Computation done at ", 20);
    gettimeofday(&v105, 0);
    v93 = file_logger::operator<<<double>((uint64_t)v91);
    v94 = pthread_getspecific(*(_QWORD *)(v93 + 592));
    if (v94 && *((_BYTE *)v94 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94 + 2, (uint64_t)"s", 1);
    v95 = pthread_getspecific(*(_QWORD *)(v93 + 592));
    if (v95 && *((_BYTE *)v95 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v95 + *(_QWORD *)(v95[2] - 24) + 16));
      v96 = std::locale::use_facet((const std::locale *)&v105, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v96->__vftable[2].~facet_0)(v96, 10);
      std::locale::~locale((std::locale *)&v105);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v93);
      if (*(_DWORD *)(v93 + 600) == 7)
      {
        __print_back_trace();
        v98 = __cxa_allocate_exception(8uLL);
        *v98 = "LOG_FATAL encountered";
        __cxa_throw(v98, MEMORY[0x24BEDB718], 0);
      }
    }
  }
}

void sub_2183603E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::locale::~locale(&a18);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::lr_optimization_interface::compute_second_order_statistics(uint64_t a1, __darwin_time_t *a2, float64x2_t **a3, float64x2_t **a4, double *a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v5 + 896))
    turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>((_QWORD *)v5, a2, a5, a4, a3);
  else
    turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>((_QWORD *)v5, a2, a5, a4, a3);
}

void *turi::supervised_2::logistic_regression::save_impl(turi::supervised_2::logistic_regression *this, turi::oarchive *a2)
{
  turi::variant_deep_save<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((const void ***)this + 37, (uint64_t)a2);
  turi::option_manager::save((turi::supervised_2::logistic_regression *)((char *)this + 224), a2);
  turi::archive_detail::serialize_impl<turi::oarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (turi::ml_metadata **)this + 96);
  return turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,-1,1,-1,-1>((uint64_t)a2, (uint64_t)this + 824);
}

void turi::supervised_2::logistic_regression::load_version(turi::supervised_2::logistic_regression *this, turi::iarchive *a2)
{
  char *v4;
  int *v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17[2];
  char v18;
  void *__p;
  void **v20;
  uint64_t v21;

  v4 = (char *)this + 296;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::option_manager::load((char **)this + 28, a2);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec(a2, (turi::ml_metadata **)this + 96);
  turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,-1,1,-1,-1>((uint64_t)a2, (void **)this + 103);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  v5 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((_QWORD *)this + 98) = turi::variant_converter<unsigned long,void>::get((uint64_t)v17, v5);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  v7 = turi::variant_converter<unsigned long,void>::get((uint64_t)v17, v6);
  *((_QWORD *)this + 106) = v7;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__p);
    v7 = *((_QWORD *)this + 106);
  }
  *((_QWORD *)this + 107) = v7 / (*((_QWORD *)this + 98) - 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dense_coefficient_mode");
  v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((_BYTE *)this + 896) = turi::variant_converter<int,void>::get((uint64_t)v17, v8) != 0;
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  *((_QWORD *)this + 41) = *(_QWORD *)(*((_QWORD *)this + 96) + 64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "current_training_iteration");
  v9 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((_QWORD *)this + 99) = turi::variant_converter<unsigned long,void>::get((uint64_t)v17, v9);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v17, "current_training_status");
  v10 = (uint64_t *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)v17);
  turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get(v10, (uint64_t *)&__p);
  v11 = (char *)this + 808;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 800, *((char **)this + 101));
  v12 = (char *)v20;
  *((_QWORD *)this + 100) = __p;
  *((_QWORD *)this + 101) = v12;
  v13 = v21;
  *((_QWORD *)this + 102) = v21;
  if (v13)
  {
    *((_QWORD *)v12 + 2) = v11;
    __p = &v20;
    v20 = 0;
    v21 = 0;
    v12 = 0;
  }
  else
  {
    *((_QWORD *)this + 100) = v11;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, v12);
  if (v18 < 0)
    operator delete(v17[0]);
  v14 = (void *)(*((_QWORD *)this + 98) - 1);
  v16 = (void *)*((_QWORD *)this + 104);
  v17[0] = v14;
  if (v14 != v16)
  {
    __p = v17;
    v20 = &v16;
    turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  }
  v15 = (void *)*((_QWORD *)this + 107);
  v16 = (void *)*((_QWORD *)this + 105);
  v17[0] = v15;
  if (v15 != v16)
  {
    __p = v17;
    v20 = &v16;
    turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_1::operator()();
  }
}

void turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_num_classes - 1", 17);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_coefs.rows()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "operator()", 592, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2183608CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_variables_per_class", 21);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_coefs.cols()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "operator()", 593, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_218360AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::export_to_coreml(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t i;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  int64_t size;
  int64_t v12;
  int64_t v13;
  _OWORD *v14;
  __int128 *v15;
  __int128 v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  std::string v22;
  char *v23;
  _BYTE v24[8];
  _QWORD *v25;
  std::string v26;
  _QWORD v27[5];
  _QWORD v28[6];

  v28[5] = *MEMORY[0x24BDAC8D0];
  v23 = (char *)(*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(&v26, "class", &v23);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  std::to_string(&v22, v6);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::string,0>(v27, "version", (__int128 *)&v22);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],char const(&)[25],0>(v28, "short_description", "Logisitic regression model.");
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v24, &v26, 3);
  for (i = 80; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v26 + i);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v8 = (__int128 *)a1[103];
  v9 = a1[106];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
  if (v9)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v26, v9, 1);
    v10 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    if ((v26.__r_.__value_.__l.__size_ & 0x8000000000000000) == 0)
      size = v26.__r_.__value_.__l.__size_;
    else
      size = v26.__r_.__value_.__l.__size_ + 1;
    v12 = size & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)v26.__r_.__value_.__l.__size_ >= 2)
    {
      v13 = 0;
      v14 = (_OWORD *)v26.__r_.__value_.__r.__words[0];
      v15 = v8;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        v13 += 2;
      }
      while (v13 < v12);
    }
    v17 = *((_QWORD *)&v10 + 1) - v12;
    if (*((uint64_t *)&v10 + 1) > v12)
    {
      v18 = size >> 1;
      v19 = (uint64_t *)&v8[size >> 1];
      v20 = (_QWORD *)(v10 + 16 * v18);
      do
      {
        v21 = *v19++;
        *v20++ = v21;
        --v17;
      }
      while (v17);
    }
  }
  turi::export_logistic_model_as_model_asset(a1 + 96, (uint64_t *)&v26, (uint64_t)v24, a3);
  free(v26.__r_.__value_.__l.__data_);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_20;
    goto LABEL_19;
  }
  if (*(_QWORD *)(a2 + 8))
LABEL_19:
    turi::coreml::MLModelWrapper::save(*a3);
LABEL_20:
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v24, v25);
}

void sub_218360D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, void *a20)
{
  uint64_t v20;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v20);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

const char *turi::supervised_2::logistic_regression::name(turi::supervised_2::logistic_regression *this)
{
  return "classifier_logistic_regression_v2";
}

std::string *turi::supervised_2::logistic_regression::uid(turi::supervised_2::logistic_regression *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(&turi::supervised_2::logistic_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.hpp");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::supervised_2::logistic_regression::uid(void)::_uid, &dword_217E69000);
  }
  return &turi::supervised_2::logistic_regression::uid(void)::_uid;
}

void sub_218360E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::supervised_2::logistic_regression::lr_optimization_interface::num_variables(turi::supervised_2::logistic_regression::lr_optimization_interface *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 848);
}

void sub_21836103C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 232 * ((232 * a2 - 232) / 0xE8) + 232;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_218361164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x11A7B9611A7B962)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised_2::logistic_regression::thread_compute_buffer_type>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised_2::logistic_regression::thread_compute_buffer_type>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(232 * a2);
}

void std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 232;
        std::allocator<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)(a2 + 192));
  free(*(void **)(a2 + 168));
  free(*(void **)(a2 + 152));
  free(*(void **)(a2 + 136));
  free(*(void **)(a2 + 120));
  free(*(void **)(a2 + 88));
  free(*(void **)(a2 + 64));
  free(*(void **)(a2 + 40));
  free(*(void **)(a2 + 24));
  free(*(void **)(a2 + 8));
}

void turi::flexible_type_converter<unsigned long>::set(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_resolver<3>::set<unsigned long const&>(a2, a1);
}

void sub_218361334(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  switch(*(_BYTE *)(v1 + 12))
  {
    case 2:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v3 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>((unint64_t **)v1);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator((unint64_t **)v1);
      if ((v7 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((unint64_t **)v1) & 1) != 0)
        break;
LABEL_11:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_resolver<3>::set<unsigned long const&>(uint64_t a1, uint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v33 = 0;
  v32 = *a2;
  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>(a1, &v32);
  switch(v34)
  {
    case 2:
      v2 = (unint64_t *)v32;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = v32;
        if (v32)
        {
          if (*(char *)(v32 + 31) < 0)
            operator delete(*(void **)(v32 + 8));
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = (unint64_t *)v32;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = v32;
        if (v32)
        {
          v12 = *(void **)(v32 + 8);
          if (v12)
          {
            *(_QWORD *)(v32 + 16) = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = (unint64_t *)v32;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v32;
        if (v32)
        {
          v31 = (void **)(v32 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = (unint64_t *)v32;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = v32;
        if (v32)
        {
          v31 = (void **)(v32 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v27 = (unint64_t *)v32;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v32;
        if (v32)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v32 + 16));
          v6 = v30;
          v26 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v20 = (unint64_t *)v32;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v32;
        if (v32)
        {
          v24 = *(void **)(v32 + 48);
          if (v24)
          {
            *(_QWORD *)(v32 + 56) = v24;
            operator delete(v24);
          }
          v25 = *(void **)(v23 + 24);
          if (v25)
          {
            *(_QWORD *)(v23 + 32) = v25;
            operator delete(v25);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 + 8);
          v6 = v23;
          v26 = 2071181815;
LABEL_41:
          v7 = v26 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      return;
  }
}

void sub_218361604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::gl_sarray::clip(&a10);
      break;
    case 3:
      turi::gl_sarray::clip(&a10);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a10);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a10);
      break;
    case 8:
      turi::gl_sarray::clip(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Map<Eigen::Matrix<double,-1,1,0,-1,1> const,0,Eigen::Stride<0,0>> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t *v7;
  float64x2_t v8;
  int64_t v9;
  float64x2_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  uint64_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  double *f64;
  double *v21;
  double v22;
  double v23;
  double v24;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  if (v1 >= 0)
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
  else
    v3 = v1 + 1;
  v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3)
    return **(double **)(a1 + 24) * v4->f64[0];
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *(float64x2_t **)(a1 + 24);
  v8 = vmulq_f64(*v4, *v7);
  if (v1 >= 4)
  {
    v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v10 = vmulq_f64(v4[1], v7[1]);
    if ((unint64_t)v1 >= 8)
    {
      v11 = v7 + 3;
      v12 = v4 + 3;
      v13 = 4;
      do
      {
        v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        v14 = *v12;
        v12 += 2;
        v15 = v14;
        v16 = *v11;
        v11 += 2;
        v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    v8 = vaddq_f64(v10, v8);
    if (v6 > v9)
      v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v7 + 8 * v9)));
  }
  result = vaddvq_f64(v8);
  v17 = v1 <= v6;
  v18 = v1 - v6;
  if (!v17)
  {
    v19 = v3 >> 1;
    f64 = v4[v19].f64;
    v21 = v7[v19].f64;
    do
    {
      v22 = *v21++;
      v23 = v22;
      v24 = *f64++;
      result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v4 = *a2;
  v5 = (*a2)[1];
  if (v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v27, v5, 1);
    v6 = (char *)v27;
    v7 = v28;
    v4 = *a2;
    v8 = (unint64_t *)a2[1];
    if (v28 >= 0)
      v9 = v28;
    else
      v9 = v28 + 1;
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v28 >= 2)
    {
      v11 = 2;
      if (v10 > 2)
        v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
      bzero(v27, ((8 * v11 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v10 < v7)
      bzero(&v6[16 * (v9 >> 1)], 8 * v7 - 16 * (v9 >> 1));
  }
  else
  {
    v8 = (unint64_t *)a2[1];
  }
  v29 = 0x3FF0000000000000;
  Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(v4, v8, (uint64_t *)&v27, (double *)&v29);
  v13 = (__int128 *)v27;
  v12 = v28;
  if (a1[1] != v28)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v28, 1);
    v12 = a1[1];
  }
  v14 = (_OWORD *)*a1;
  if (v12 >= 0)
    v15 = v12;
  else
    v15 = v12 + 1;
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v17 = 0;
    v18 = (_OWORD *)*a1;
    v19 = v13;
    do
    {
      v20 = *v19++;
      *v18++ = v20;
      v17 += 2;
    }
    while (v17 < v16);
  }
  v21 = __OFSUB__(v12, v16);
  v22 = v12 - v16;
  if (!((v22 < 0) ^ v21 | (v22 == 0)))
  {
    v23 = v15 >> 1;
    v24 = (uint64_t *)&v13[v15 >> 1];
    v25 = &v14[v23];
    do
    {
      v26 = *v24++;
      *v25++ = v26;
      --v22;
    }
    while (v22);
  }
  free(v27);
}

void sub_2183618E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

void Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t *a1, unint64_t *a2, uint64_t *a3, double *a4)
{
  unint64_t v4;
  double v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  std::bad_alloc *exception;
  std::bad_alloc *v18;
  _QWORD v20[2];
  uint64_t v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  if (v4 >> 61)
    goto LABEL_14;
  v8 = *a4;
  v9 = *a2;
  if (*a2)
  {
    v10 = *a2;
    goto LABEL_8;
  }
  v11 = 8 * v4;
  if (v4 <= 0x4000)
  {
    v12 = (char *)&v20[-1] - ((MEMORY[0x24BDAC7A8](v11, v11 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v12, v13);
    v9 = 0;
    v10 = (unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_8;
  }
  v10 = (unint64_t)malloc_type_malloc(v11, 0x1E76AA36uLL);
  if (!v10)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v18 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v18, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v9 = *a2;
  v4 = a2[1];
LABEL_8:
  if (v9)
    v14 = 0;
  else
    v14 = (void *)v10;
  v16 = a1[1];
  v15 = a1[2];
  v21[0] = *a1;
  v21[1] = v15;
  v20[0] = v10;
  v20[1] = 1;
  Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,1>,1,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(v16, v15, v21, v20, *a3, 1, v8);
  if (8 * v4 > 0x20000)
    free(v14);
}

uint64_t Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,1>,1,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(uint64_t result, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, double a7)
{
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  double v39;
  double *v40;
  double *v41;
  double *v42;
  double *v43;
  double v44;
  double *v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  float64x2_t v57;
  double *v58;
  double *v59;
  double *v60;
  double *v61;
  float64x2_t v62;
  double *v63;
  uint64_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double *v68;
  double *v69;
  double *v70;
  double *v71;
  double *v72;
  uint64_t v73;
  float64x2_t v74;
  float64x2_t v75;
  double *v76;
  double *v77;
  double *v78;
  double *v79;
  double *v80;
  uint64_t v81;
  float64x2_t v82;
  float64x2_t v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  double v90;
  double *v91;
  double *v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  float64x2_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double *v104;
  uint64_t v105;
  uint64_t v106;
  double *v107;
  double *v108;

  v7 = (double *)*a4;
  v8 = (*a4 >> 3) & 1;
  if (v8 >= a2)
    v9 = a2;
  else
    v9 = (*a4 >> 3) & 1;
  if ((v7 & 7) != 0)
    v10 = -1;
  else
    v10 = v9;
  v12 = *a3;
  v11 = a3[1];
  v13 = ((unint64_t)*a3 >> 3) & 1;
  if (v13 >= a2)
    v13 = a2;
  v14 = 0;
  if ((v12 & 7) != 0)
    v13 = -1;
  if (v13 < 0)
  {
    v17 = 0;
    v18 = 0;
LABEL_28:
    v16 = 3;
  }
  else
  {
    if (v8 >= result)
      v8 = result;
    if ((v7 & 7) != 0)
      v15 = -1;
    else
      v15 = v8;
    v16 = 3;
    if (v13 == a2 || v15 < 0)
    {
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      if (v15 != result)
      {
        v19 = 0;
        v16 = a3[1] & 1;
        v20 = 1;
        while (1)
        {
          v21 = v20;
          v22 = v13 + v19 * v16;
          v23 = v22 >= 0 ? v22 & 1 : -(v22 & 1);
          if (v10 == v23)
            break;
          v20 = 0;
          v19 = 1;
          if ((v21 & 1) == 0)
          {
            v14 = 0;
            v17 = v10;
            v18 = ((a2 - v10) & 0xFFFFFFFFFFFFFFFELL) + v10;
            goto LABEL_28;
          }
        }
        if (v19 >= result)
          v14 = result;
        else
          v14 = v19;
        v17 = v10;
        v18 = ((a2 - v10) & 0xFFFFFFFFFFFFFFFELL) + v10;
      }
    }
  }
  v24 = result - v14 + 3;
  if (result >= v14)
    v24 = result - v14;
  v103 = v14;
  v25 = (v24 & 0xFFFFFFFFFFFFFFFCLL) + v14;
  if (result - v14 >= 4)
  {
    v26 = 8 * v11 * (v14 + 3);
    v27 = (double *)(v12 + v26);
    v28 = 32 * v11;
    v29 = v11 * (v103 + 2);
    v30 = (double *)(v12 + 8 * v29);
    v31 = 8 * (v11 + v103 * v11);
    v32 = (double *)(v12 + 8 * v103 * v11);
    v107 = v32 + 2;
    v106 = v12 + v26 - 8;
    v105 = v12 + v31 + 24;
    v104 = v30 - 2;
    v33 = v12 + v26 + 8 * v18;
    v34 = v12 + 8 * v29 + 8 * v18;
    v35 = v12 + v31 + 8 * v18;
    v36 = v12 + 8 * v103 * v11 + 8 * v18;
    v37 = v103;
    v38 = (double *)(v12 + v31);
    do
    {
      v108 = v32;
      if (v17 < 1)
      {
        v48 = 0.0;
        v47 = 0.0;
        v44 = 0.0;
        v39 = 0.0;
      }
      else
      {
        v39 = 0.0;
        v40 = v32;
        v41 = v38;
        v42 = v30;
        v43 = v27;
        v44 = 0.0;
        v45 = v7;
        v46 = v17;
        v47 = 0.0;
        v48 = 0.0;
        do
        {
          v49 = *v45++;
          v50 = v49;
          v51 = *v40++;
          v52 = v50 * v51;
          v53 = *v41++;
          v48 = v48 + v52;
          v47 = v47 + v50 * v53;
          v54 = *v42++;
          v44 = v44 + v50 * v54;
          v55 = *v43++;
          v39 = v39 + v50 * v55;
          --v46;
        }
        while (v46);
      }
      v56 = v37 + 1;
      if (v18 > v17)
      {
        if (v16)
        {
          v57 = 0uLL;
          if (v16 == 1)
          {
            v58 = v38;
            v59 = v27;
            v60 = v108;
            v61 = v30;
            v62 = 0uLL;
            v63 = v7;
            v64 = v17;
            v65 = 0uLL;
            v66 = 0uLL;
            do
            {
              v67 = *(float64x2_t *)&v63[v17];
              v57 = vmlaq_f64(v57, v67, *(float64x2_t *)&v60[v17]);
              v62 = vmlaq_f64(v62, v67, *(float64x2_t *)&v58[v17]);
              v65 = vmlaq_f64(v65, v67, *(float64x2_t *)&v61[v17]);
              v64 += 2;
              v63 += 2;
              v61 += 2;
              v66 = vmlaq_f64(v66, v67, *(float64x2_t *)&v59[v17]);
              v60 += 2;
              v59 += 2;
              v58 += 2;
            }
            while (v64 < v18);
          }
          else
          {
            v76 = v108;
            v77 = v38;
            v78 = v30;
            v79 = v27;
            v62 = 0uLL;
            v80 = v7;
            v81 = v17;
            v65 = 0uLL;
            v66 = 0uLL;
            do
            {
              v82 = *(float64x2_t *)&v80[v17];
              v57 = vmlaq_f64(v57, v82, *(float64x2_t *)&v76[v17]);
              v62 = vmlaq_f64(v62, v82, *(float64x2_t *)&v77[v17]);
              v65 = vmlaq_f64(v65, v82, *(float64x2_t *)&v78[v17]);
              v83 = *(float64x2_t *)&v79[v17];
              v81 += 2;
              v80 += 2;
              v79 += 2;
              v66 = vmlaq_f64(v66, v82, v83);
              v78 += 2;
              v77 += 2;
              v76 += 2;
            }
            while (v81 < v18);
          }
        }
        else
        {
          v57 = 0uLL;
          v68 = v108;
          v69 = v38;
          v70 = v30;
          v71 = v27;
          v62 = 0uLL;
          v72 = v7;
          v73 = v17;
          v65 = 0uLL;
          v66 = 0uLL;
          do
          {
            v74 = *(float64x2_t *)&v72[v17];
            v57 = vmlaq_f64(v57, v74, *(float64x2_t *)&v68[v17]);
            v62 = vmlaq_f64(v62, v74, *(float64x2_t *)&v69[v17]);
            v65 = vmlaq_f64(v65, v74, *(float64x2_t *)&v70[v17]);
            v75 = *(float64x2_t *)&v71[v17];
            v73 += 2;
            v72 += 2;
            v71 += 2;
            v66 = vmlaq_f64(v66, v74, v75);
            v70 += 2;
            v69 += 2;
            v68 += 2;
          }
          while (v73 < v18);
        }
        v48 = v48 + vaddvq_f64(v57);
        v47 = v47 + vaddvq_f64(v62);
        v44 = v44 + vaddvq_f64(v65);
        v39 = v39 + vaddvq_f64(v66);
        v56 = v37 + 1;
      }
      if (a2 > v18)
      {
        v84 = 0;
        do
        {
          v85 = v7[v18 + v84];
          v48 = v48 + v85 * *(double *)(v36 + 8 * v84);
          v47 = v47 + v85 * *(double *)(v35 + 8 * v84);
          v44 = v44 + v85 * *(double *)(v34 + 8 * v84);
          v39 = v39 + v85 * *(double *)(v33 + 8 * v84++);
        }
        while (a2 - v18 != v84);
      }
      *(double *)(a5 + 8 * v37 * a6) = *(double *)(a5 + 8 * v37 * a6) + a7 * v48;
      *(double *)(a5 + 8 * v56 * a6) = *(double *)(a5 + 8 * v56 * a6) + a7 * v47;
      *(double *)(a5 + 8 * (v37 + 2) * a6) = *(double *)(a5 + 8 * (v37 + 2) * a6) + a7 * v44;
      *(double *)(a5 + 8 * (v37 + 3) * a6) = *(double *)(a5 + 8 * (v37 + 3) * a6) + a7 * v39;
      v37 += 4;
      v27 = (double *)((char *)v27 + v28);
      v30 = (double *)((char *)v30 + v28);
      v38 = (double *)((char *)v38 + v28);
      v32 = &v108[(unint64_t)v28 / 8];
      v107 = (double *)((char *)v107 + v28);
      v106 += v28;
      v105 += v28;
      v104 = (double *)((char *)v104 + v28);
      v33 += v28;
      v34 += v28;
      v35 += v28;
      v36 += v28;
    }
    while (v37 < v25);
  }
  v86 = 8 * v11;
  v87 = v103;
  do
  {
    v88 = v87;
    if (v25 < result)
    {
      v89 = (double *)(v12 + v86 * v25);
      do
      {
        v90 = 0.0;
        if (v17 >= 1)
        {
          v91 = v89;
          v92 = v7;
          v93 = v17;
          do
          {
            v94 = *v91++;
            v95 = v94;
            v96 = *v92++;
            v90 = v90 + v95 * v96;
            --v93;
          }
          while (v93);
        }
        if (v18 > v17)
        {
          v97 = 0uLL;
          if ((((_BYTE)v12 + 8 * (_BYTE)v25 * (_BYTE)v11 + 8 * (_BYTE)v17) & 0xF) != 0)
          {
            v98 = v17;
            v99 = v17;
            do
            {
              v97 = vmlaq_f64(v97, *(float64x2_t *)&v7[v98], *(float64x2_t *)&v89[v98]);
              v99 += 2;
              v98 += 2;
            }
            while (v99 < v18);
          }
          else
          {
            v100 = v17;
            v101 = v17;
            do
            {
              v97 = vmlaq_f64(v97, *(float64x2_t *)&v7[v100], *(float64x2_t *)&v89[v100]);
              v101 += 2;
              v100 += 2;
            }
            while (v101 < v18);
          }
          v90 = v90 + vaddvq_f64(v97);
        }
        v102 = v18;
        if (a2 > v18)
        {
          do
          {
            v90 = v90 + v89[v102] * v7[v102];
            ++v102;
          }
          while (a2 != v102);
        }
        *(double *)(a5 + 8 * v25 * a6) = *(double *)(a5 + 8 * v25 * a6) + a7 * v90;
        ++v25;
        v89 = (double *)((char *)v89 + v86);
      }
      while (v25 != result);
    }
    v87 = 0;
    v25 = 0;
    result = v88;
  }
  while (v88);
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run(float64x2_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  double result;
  int64_t v6;
  float64x2_t v7;
  int64_t v8;
  float64x2_t v9;
  float64x2_t *v10;
  uint64_t v11;
  float64x2_t v12;
  BOOL v13;
  uint64_t v14;
  double *f64;
  double v16;

  v1 = *(_QWORD *)&a1[2]->f64[1];
  if (v1 >= 0)
    v2 = *(_QWORD *)&a1[2]->f64[1];
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)&a1[2]->f64[1];
  else
    v3 = v1 + 1;
  v4 = *a1;
  if ((unint64_t)(v1 + 1) < 3)
    return v4->f64[0];
  v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *v4;
  if (v1 >= 4)
  {
    v8 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v9 = v4[1];
    if ((unint64_t)v1 >= 8)
    {
      v10 = v4 + 3;
      v11 = 4;
      do
      {
        v7 = vaddq_f64(v7, v10[-1]);
        v12 = *v10;
        v10 += 2;
        v9 = vaddq_f64(v9, v12);
        v11 += 4;
      }
      while (v11 < v8);
    }
    v7 = vaddq_f64(v9, v7);
    if (v6 > v8)
      v7 = vaddq_f64(v7, *(float64x2_t *)((char *)v4 + 8 * v8));
  }
  result = vaddvq_f64(v7);
  v13 = v1 <= v6;
  v14 = v1 - v6;
  if (!v13)
  {
    f64 = v4[v3 >> 1].f64;
    do
    {
      v16 = *f64++;
      result = result + v16;
      --v14;
    }
    while (v14);
  }
  return result;
}

char *std::vector<double>::__insert_with_size[abi:ne180100]<double *,double *>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_218362444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double std::__split_buffer<double>::push_back(_QWORD *a1, double *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  double result;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  result = *a2;
  *(double *)v4 = *a2;
  a1[2] = v4 + 8;
  return result;
}

float64x2_t **Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run(float64x2_t **result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  int64_t v5;
  float64x2_t v6;
  int64_t v7;
  float64x2_t v8;
  float64x2_t *v9;
  uint64_t v10;
  float64x2_t v11;
  double v12;
  BOOL v13;
  uint64_t v14;
  double *f64;
  double v16;
  double v17;

  v1 = *(_QWORD *)&result[2]->f64[1];
  if (v1 >= 0)
    v2 = *(_QWORD *)&result[2]->f64[1];
  else
    v2 = v1 + 3;
  if (v1 >= 0)
    v3 = *(_QWORD *)&result[2]->f64[1];
  else
    v3 = v1 + 1;
  v4 = *result;
  if ((unint64_t)(v1 + 1) >= 3)
  {
    v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *v4;
    if (v1 >= 4)
    {
      v7 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v4[1];
      if ((unint64_t)v1 >= 8)
      {
        v9 = v4 + 3;
        v10 = 4;
        do
        {
          v6 = vmaxq_f64(v6, v9[-1]);
          v11 = *v9;
          v9 += 2;
          v8 = vmaxq_f64(v8, v11);
          v10 += 4;
        }
        while (v10 < v7);
      }
      v6 = vmaxq_f64(v6, v8);
      if (v5 > v7)
        v6 = vmaxq_f64(v6, *(float64x2_t *)((char *)v4 + 8 * v7));
    }
    *(_QWORD *)&v12 = *(_OWORD *)&vpmaxq_f64(v6, v6);
    v13 = v1 <= v5;
    v14 = v1 - v5;
    if (!v13)
    {
      f64 = v4[v3 >> 1].f64;
      do
      {
        v16 = *f64++;
        v17 = v16;
        if (v12 < v16)
          v12 = v17;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  void **v32;

  v27 = 0;
  v28 = 0;
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 8);
  if (v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v27, v5, 1);
    v6 = (char *)v27;
    v7 = v28;
    v4 = *a2;
    v8 = a2[1];
    if (v28 >= 0)
      v9 = v28;
    else
      v9 = v28 + 1;
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v28 >= 2)
    {
      v11 = 2;
      if (v10 > 2)
        v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
      bzero(v27, ((8 * v11 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v10 < v7)
      bzero(&v6[16 * (v9 >> 1)], 8 * v7 - 16 * (v9 >> 1));
  }
  else
  {
    v8 = a2[1];
  }
  v29 = 0x3FF0000000000000;
  v30 = v4;
  v31[1] = v8;
  v32 = &v27;
  v31[0] = 0;
  Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,1,-1,-1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run((uint64_t)v31, (uint64_t)&v30, (uint64_t **)&v32, (double *)&v29);
  v13 = (__int128 *)v27;
  v12 = v28;
  if (a1[1] != v28)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v28, 1);
    v12 = a1[1];
  }
  v14 = (_OWORD *)*a1;
  if (v12 >= 0)
    v15 = v12;
  else
    v15 = v12 + 1;
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v17 = 0;
    v18 = (_OWORD *)*a1;
    v19 = v13;
    do
    {
      v20 = *v19++;
      *v18++ = v20;
      v17 += 2;
    }
    while (v17 < v16);
  }
  v21 = __OFSUB__(v12, v16);
  v22 = v12 - v16;
  if (!((v22 < 0) ^ v21 | (v22 == 0)))
  {
    v23 = v15 >> 1;
    v24 = (uint64_t *)&v13[v15 >> 1];
    v25 = &v14[v23];
    do
    {
      v26 = *v24++;
      *v25++ = v26;
      --v22;
    }
    while (v22);
  }
  free(v27);
}

void sub_2183627AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

void Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,1,-1,-1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run(uint64_t a1, uint64_t a2, uint64_t **a3, double *a4)
{
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 8);
  if (*(uint64_t *)(*(_QWORD *)a2 + 8) >= 1)
  {
    v7 = 0;
    do
      Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,1,-1,-1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow((uint64_t)v8, a2, a3, a4, 0, v7++);
    while (v7 < *(_QWORD *)(*(_QWORD *)a2 + 8));
  }
}

double Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,1,-1,-1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow(uint64_t a1, uint64_t a2, uint64_t **a3, double *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  double *v8;
  int *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = v6[3];
  if (v7 < 1)
  {
    v10 = 0.0;
  }
  else
  {
    v8 = (double *)v6[1];
    v9 = (int *)v6[2];
    v10 = 0.0;
    do
    {
      v11 = *v8++;
      v12 = v11;
      v13 = *v9++;
      v10 = v10 + v12 * *(double *)(**(_QWORD **)a2 + 8 * (*(_QWORD *)(*(_QWORD *)a2 + 16) * a6 + v13));
      --v7;
    }
    while (v7);
  }
  v14 = **a3;
  result = *(double *)(v14 + 8 * a6) + *a4 * v10;
  *(double *)(v14 + 8 * a6) = result;
  return result;
}

void std::__shared_ptr_emplace<turi::supervised_2::logistic_regression::lr_optimization_interface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93BEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised_2::logistic_regression::lr_optimization_interface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93BEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::supervised_2::logistic_regression::lr_optimization_interface>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24D93BF48;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D93BF48;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  double **v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  int v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  double v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double *v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double *v70;
  double v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  BOOL v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  long double **v79;
  double v80;
  long double *v81;
  long double *v82;
  void **v83;
  double v84;
  long double *v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  double v89;
  int64_t v90;
  float64x2_t *v91;
  BOOL v92;
  uint64_t v93;
  double *v94;
  double v95;
  unint64_t v96;
  double *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  double *v102;
  double *v103;
  double *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  double *v109;
  uint64_t v110;
  double v111;
  unint64_t v112;
  unint64_t v113;
  double v114;
  long double **v115;
  long double **v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::bad_alloc *exception;
  std::bad_alloc *v124;
  std::bad_alloc *v125;
  std::bad_alloc *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  double **v130;
  double *v131;
  uint64_t v133;
  long double *v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  uint64_t v137;
  long double **v138;
  _BYTE v139[128];
  uint64_t v140;
  unsigned __int8 v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 v151;
  void *v152;
  uint64_t v153;
  char v154;
  _QWORD v155[4];
  _QWORD v156[3];
  void *v157;
  double v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  long double **v162;
  unint64_t v163;
  unint64_t v164;
  void **v165;
  long double **v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v152 = 0;
  v153 = 0;
  v6 = *(_QWORD *)(v5 + 856);
  if (v6)
  {
    if (v6 >> 61 || (v7 = malloc_type_malloc(8 * v6, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v124 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v124, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v152 = v7;
  }
  v153 = v6;
  v8 = *(_QWORD *)(v5 + 864) + 232 * a2;
  v10 = *(char **)(v8 + 24);
  v9 = *(_QWORD *)(v8 + 32);
  v11 = (_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v5 + 848);
  if (v9 != v12)
  {
    free(v10);
    if (v12)
    {
      if ((unint64_t)v12 >> 61 || (v10 = (char *)malloc_type_malloc(8 * v12, 0x1E76AA36uLL)) == 0)
      {
LABEL_155:
        v125 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v126 = std::bad_alloc::bad_alloc(v125);
        __cxa_throw(v126, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
    else
    {
      v10 = 0;
    }
    *v11 = v10;
  }
  v11[1] = v12;
  if (v12 >= 0)
    v13 = v12;
  else
    v13 = v12 + 1;
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v15 = 2;
    if (v14 > 2)
      v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v10, ((8 * v15 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  v16 = (void **)(v11 + 2);
  v131 = (double *)(v11 + 11);
  if (v14 < v12)
    bzero(&v10[16 * (v13 >> 1)], 8 * v12 - 16 * (v13 >> 1));
  *v131 = 0.0;
  if (*(_BYTE *)a1[1])
  {
    v17 = *(_QWORD *)(v5 + 848);
    if (v17 && 0x7FFFFFFFFFFFFFFFLL / v17 < v17)
      goto LABEL_155;
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v11 + 2, v17 * v17, v17, *(_QWORD *)(v5 + 848));
    v19 = v11[3];
    v18 = v11[4];
    v20 = (char *)*v16;
    v21 = v18 * v19;
    if (v18 * v19 >= 0)
      v22 = v18 * v19;
    else
      v22 = v21 + 1;
    v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if (v21 >= 2)
    {
      v24 = 2;
      if (v23 > 2)
        v24 = v22 & 0xFFFFFFFFFFFFFFFELL;
      bzero(*v16, ((8 * v24 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v23 < v21)
      bzero(&v20[16 * (v22 >> 1)], 8 * v21 - 16 * (v22 >> 1));
  }
  v130 = (double **)v11;
  turi::ml_data::get_iterator((turi::ml_data *)(v5 + 384), a2, a3, (uint64_t)v139);
  if (v145 != v144)
  {
    v25 = (double **)(v11 + 5);
    v26 = v11 + 8;
    v138 = (long double **)(v11 - 2);
    do
    {
      v28 = v147;
      v27 = v148;
      if (v148)
      {
        p_shared_owners = (unint64_t *)&v148->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      v133 = v149;
      v135 = v27;
      v31 = v151;
      v33 = (char *)v152;
      v32 = v153;
      if (v153 >= 0)
        v34 = v153;
      else
        v34 = v153 + 1;
      v35 = v34 & 0xFFFFFFFFFFFFFFFELL;
      if (v153 >= 2)
      {
        v128 = v151;
        v36 = 2;
        if (v35 > 2)
          v36 = v34 & 0xFFFFFFFFFFFFFFFELL;
        v129 = v28;
        v127 = v34;
        bzero(v152, ((8 * v36 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        v34 = v127;
        v31 = v128;
        v28 = v129;
      }
      if (v35 < v32)
      {
        v37 = v31;
        v38 = 8 * v32 - 16 * (v34 >> 1);
        v39 = v28;
        bzero(&v33[16 * (v34 >> 1)], v38);
        v31 = v37;
        v28 = v39;
      }
      if (v31)
      {
        v40 = *(_QWORD *)(v28 + 56);
        if (v40)
        {
          v41 = 0;
          v42 = *(_QWORD *)(v28 + 96) + 8 * v133 + 8 * (*(_BYTE *)(v28 + 18) == 0);
          v43 = *(_QWORD *)(v28 + 72);
          v44 = (double *)v152;
          do
          {
            v45 = *(_QWORD *)(v43 + 16 * v41);
            v46 = *(_QWORD *)(v45 + 64);
            v47 = *(_QWORD *)(v45 + 104);
            switch(*(_DWORD *)(v45 + 24))
            {
              case 0:
                v48 = *(double *)v42;
                v42 += 8;
                v49 = v48;
                if (v46)
                {
                  if (*(_BYTE *)(v5 + 360))
                    v49 = v49 * *(double *)(*(_QWORD *)(v5 + 368) + 8 * v47);
                  goto LABEL_91;
                }
                break;
              case 1:
                v62 = *(double *)v42;
                v42 += 8;
                v61 = v62;
                if (*(_QWORD *)&v62 < v46)
                {
                  v47 += *(_QWORD *)&v61;
                  if (*(_BYTE *)(v5 + 360))
                    v49 = *(double *)(*(_QWORD *)(v5 + 368) + 8 * v47);
                  else
                    v49 = 1.0;
LABEL_91:
                  v44[v47] = v49;
                }
                break;
              case 2:
                v50 = *(_QWORD *)(v45 + 72);
                if (v50)
                {
                  v51 = 0;
                  v52 = 0;
                  v53 = 8 * v47;
                  v54 = (char *)v152 + 8 * v47;
                  do
                  {
                    if (v52 < v46)
                    {
                      v55 = *(double *)(v42 + 8 * v52);
                      if (*(_BYTE *)(v5 + 360))
                        v55 = v55 * *(double *)(*(_QWORD *)(v5 + 368) + v53 + 8 * v52);
                      *(double *)&v54[8 * v52] = v55;
                    }
                    ++v52;
                    v51 -= 8;
                  }
                  while (v50 != v52);
                  goto LABEL_69;
                }
                break;
              case 3:
                v64 = *(double *)v42;
                v42 += 8;
                v63 = v64;
                if (v64 != 0.0)
                {
                  v65 = (double *)v152;
                  do
                  {
                    if (*(_QWORD *)v42 < v46)
                    {
                      v66 = *(_QWORD *)v42 + v47;
                      if (*(_BYTE *)(v5 + 360))
                        v67 = *(double *)(*(_QWORD *)(v5 + 368) + 8 * v66);
                      else
                        v67 = 1.0;
                      v65[v66] = v67;
                    }
                    v42 += 8;
                    --*(_QWORD *)&v63;
                  }
                  while (v63 != 0.0);
                }
                break;
              case 4:
                v69 = *(double *)v42;
                v42 += 8;
                v68 = v69;
                if (v69 != 0.0)
                {
                  v70 = (double *)v152;
                  do
                  {
                    if (*(_QWORD *)v42 < v46)
                    {
                      v71 = *(double *)(v42 + 8);
                      v72 = *(_QWORD *)v42 + v47;
                      if (*(_BYTE *)(v5 + 360))
                        v71 = v71 * *(double *)(*(_QWORD *)(v5 + 368) + 8 * v72);
                      v70[v72] = v71;
                    }
                    v42 += 16;
                    --*(_QWORD *)&v68;
                  }
                  while (v68 != 0.0);
                }
                break;
              case 7:
                v56 = *(_QWORD *)(v45 + 72);
                if (v56)
                {
                  v51 = 0;
                  v57 = 0;
                  v58 = 8 * v47;
                  v59 = (char *)v152 + 8 * v47;
                  do
                  {
                    if (v57 < v46)
                    {
                      v60 = *(double *)(v42 + 8 * v57);
                      if (*(_BYTE *)(v5 + 360))
                        v60 = v60 * *(double *)(*(_QWORD *)(v5 + 368) + v58 + 8 * v57);
                      *(double *)&v59[8 * v57] = v60;
                    }
                    ++v57;
                    v51 -= 8;
                  }
                  while (v56 != v57);
LABEL_69:
                  v42 -= v51;
                }
                break;
              default:
                break;
            }
            ++v41;
          }
          while (v41 != v40);
        }
      }
      if (v135)
      {
        v73 = (unint64_t *)&v135->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      *((_QWORD *)v152 + *(_QWORD *)(v5 + 856) - 1) = 0x3FF0000000000000;
      if (*(_BYTE *)(v147 + 16))
        v75 = *(_BYTE *)(v147 + 17) == 0;
      else
        v75 = 1;
      if (v75)
      {
        v76 = 0;
      }
      else
      {
        v77 = (_QWORD *)(v147 + 24);
        if (!*(_BYTE *)(v147 + 18))
          v77 = (_QWORD *)(*(_QWORD *)(v147 + 96) + 8 * v149);
        v76 = *(_QWORD *)(*(_QWORD *)(v147 + 96) + 8 * v149 + 8 * *v77 - 8);
      }
      v78 = a1[2];
      v79 = *(long double ***)(v78 + 16);
      v161 = *(_OWORD *)v78;
      v162 = v79;
      v164 = (unint64_t)&v152;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(v138, &v161);
      v134 = *v138;
      if (v76)
        v80 = (*v138)[v76 - 1];
      else
        v80 = 0.0;
      v136 = (uint64_t)v138[1];
      if (v136 >= 1)
      {
        v81 = *v138;
        v82 = v138[1];
        do
        {
          *v81 = exp(*v81);
          ++v81;
          v82 = (long double *)((char *)v82 - 1);
        }
        while (v82);
      }
      if (v136)
      {
        *(_QWORD *)&v161 = v134;
        v83 = (void **)v138;
        v162 = v138;
        v84 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v161);
        v85 = *v138;
        v86 = (uint64_t)v138[1];
        if (v86 >= 0)
          v87 = (uint64_t)v138[1];
        else
          v87 = v86 + 1;
        v88 = v87 & 0xFFFFFFFFFFFFFFFELL;
        v89 = 1.0 / (v84 + 1.0);
        if (v86 >= 2)
        {
          v90 = 0;
          v91 = (float64x2_t *)*v138;
          do
          {
            *v91 = vmulq_n_f64(*v91, v89);
            ++v91;
            v90 += 2;
          }
          while (v90 < v88);
        }
        v92 = v86 <= v88;
        v93 = v86 - v88;
        if (!v92)
        {
          v94 = &v85[2 * (v87 >> 1)];
          do
          {
            *v94 = v89 * *v94;
            ++v94;
            --v93;
          }
          while (v93);
        }
      }
      else
      {
        v84 = 0.0;
        v83 = (void **)v138;
      }
      v95 = log1p(v84);
      if (v76)
        *((double *)*v83 + v76 - 1) = *((double *)*v83 + v76 - 1) + -1.0;
      v96 = *(_QWORD *)(*(_QWORD *)(v5 + 344) + 8 * v76);
      *((_QWORD *)&v161 + 1) = v83[1];
      v162 = (long double **)v153;
      v163 = v96;
      v164 = (unint64_t)v83;
      v165 = &v152;
      v97 = *v130;
      v137 = *(_QWORD *)(v5 + 784);
      v98 = *(_QWORD *)(v5 + 856);
      Eigen::Matrix<double,-1,-1,0,-1,-1>::Matrix<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0> const>>(&v157, &v161);
      v99 = v157;
      if (v137 - 1 >= 1)
      {
        v100 = 0;
        v101 = 8 * *(_QWORD *)&v158;
        v102 = (double *)v157;
        do
        {
          v103 = v97;
          v104 = v102;
          v105 = v98;
          if (v98 >= 1)
          {
            do
            {
              *v103 = *v104 + *v103;
              ++v103;
              v104 = (double *)((char *)v104 + v101);
              --v105;
            }
            while (v105);
          }
          ++v100;
          ++v102;
          v97 += v98;
        }
        while (v100 != v137 - 1);
      }
      free(v99);
      *v131 = *v131 + *(double *)(*(_QWORD *)(v5 + 344) + 8 * v76) * (v95 - v80);
      if (*(_BYTE *)a1[1])
      {
        *((_QWORD *)&v161 + 1) = v138[1];
        v163 = 0xBFF0000000000000;
        v164 = (unint64_t)v138;
        v166 = v138;
        Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(v25, (uint64_t)&v161);
        v107 = (uint64_t)v25[1];
        v106 = (uint64_t)v25[2];
        if (v106 >= v107)
          v106 = (uint64_t)v25[1];
        if (v106 >= 1)
        {
          v108 = *v138;
          v109 = *v25;
          v110 = 8 * v107 + 8;
          do
          {
            v111 = *v108++;
            *v109 = v111 + *v109;
            v109 = (double *)((char *)v109 + v110);
            --v106;
          }
          while (v106);
        }
        *(_QWORD *)&v161 = &v152;
        *((_QWORD *)&v161 + 1) = &v152;
        Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(v26, (uint64_t)&v161);
        if (*(_QWORD *)(v5 + 784) != 1)
        {
          v112 = 0;
          do
          {
            v113 = 0;
            do
            {
              v114 = *(double *)(*(_QWORD *)(v5 + 344) + 8 * v76) * (*v25)[v112 + (_QWORD)v25[1] * v113];
              v115 = *(long double ***)(v5 + 856);
              v116 = (long double **)v16[1];
              *(_QWORD *)&v161 = (char *)*v16 + 8 * (_QWORD)v115 * v112 + 8 * (_QWORD)v116 * (_QWORD)v115 * v113;
              *((_QWORD *)&v161 + 1) = v115;
              v162 = v115;
              v163 = (unint64_t)v16;
              v164 = (_QWORD)v115 * v112;
              v165 = (void **)((_QWORD)v115 * v113);
              v166 = v116;
              v158 = v114;
              v159 = *v26;
              v160 = v26[1];
              v156[0] = v161;
              v156[2] = v116;
              v155[0] = v156;
              v155[1] = &v157;
              v155[2] = &v154;
              v155[3] = &v161;
              Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,-1,0,-1,-1> const>>,Eigen::internal::add_assign_op<double,double>,0>,4,0>::run(v155);
              ++v113;
              v117 = *(_QWORD *)(v5 + 784) - 1;
            }
            while (v113 < v117);
            ++v112;
          }
          while (v112 < v117);
        }
      }
      if (v151 | v141)
      {
        v118 = (uint64_t *)(*(_QWORD *)(v147 + 96) + 8 * v149);
        if (v142)
          v118 = &v143;
        v149 += *v118;
      }
      v119 = v145 + 1;
      v120 = v144;
      v121 = ++v145 - v140 * v146;
      v150 = v121;
      if (v121 == v140 && v119 != v144)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v139);
        v120 = v144;
        v119 = v145;
      }
    }
    while (v119 != v120);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v139);
  free(v152);
}

void sub_2183633C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;

  free(a64);
  _Unwind_Resume(a1);
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  _OWORD *v17;
  __int128 *v18;
  __int128 v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v26 = 0;
  v27 = 0;
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v26, v4, 1);
    v5 = (char *)v26;
    v6 = v27;
    v7 = (unint64_t *)*((_QWORD *)a2 + 4);
    if (v27 >= 0)
      v8 = v27;
    else
      v8 = v27 + 1;
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v27 >= 2)
    {
      v10 = 2;
      if (v9 > 2)
        v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
      bzero(v26, ((8 * v10 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v9 < v6)
      bzero(&v5[16 * (v8 >> 1)], 8 * v6 - 16 * (v8 >> 1));
  }
  else
  {
    v7 = (unint64_t *)*((_QWORD *)a2 + 4);
  }
  v28 = 0x3FF0000000000000;
  v29 = *a2;
  v30 = *((_QWORD *)a2 + 2);
  Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>((uint64_t *)&v29, v7, (uint64_t *)&v26, (double *)&v28);
  v12 = (__int128 *)v26;
  v11 = v27;
  if (a1[1] != v27)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v27, 1);
    v11 = a1[1];
  }
  v13 = (_OWORD *)*a1;
  if (v11 >= 0)
    v14 = v11;
  else
    v14 = v11 + 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    v16 = 0;
    v17 = (_OWORD *)*a1;
    v18 = v12;
    do
    {
      v19 = *v18++;
      *v17++ = v19;
      v16 += 2;
    }
    while (v16 < v15);
  }
  v20 = __OFSUB__(v11, v15);
  v21 = v11 - v15;
  if (!((v21 < 0) ^ v20 | (v21 == 0)))
  {
    v22 = v14 >> 1;
    v23 = (uint64_t *)&v12[v14 >> 1];
    v24 = &v13[v22];
    do
    {
      v25 = *v23++;
      *v24++ = v25;
      --v21;
    }
    while (v21);
  }
  free(v26);
}

void sub_218363574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

_QWORD *Eigen::Matrix<double,-1,-1,0,-1,-1>::Matrix<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0> const>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  char v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17[2];

  v17[1] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = a2[3];
  v4 = a2[4];
  v5 = (uint64_t *)a2[5];
  v6 = *(_QWORD *)(v4 + 8);
  v14 = v6;
  v15 = v3;
  v16 = v4;
  v17[0] = v5;
  v7 = v5[1];
  if (v6 | v7)
  {
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8 && 0x7FFFFFFFFFFFFFFFLL / v7 < v6)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v7 * v6, v6, v7);
  }
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(a1, (uint64_t)v13, v17, (uint64_t)&v12);
  return a1;
}

void sub_218363678(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v6;
  float64x2_t **v7;
  uint64_t v8;
  float64x2_t *v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  float64x2_t *v15;
  float64x2_t *v16;
  float64x2_t v17;
  BOOL v18;
  int64_t v19;
  uint64_t v20;
  double *f64;
  double *v22;
  double v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _QWORD v29[7];
  void *v30;
  uint64_t v31;
  char v32[8];
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = **a3;
  v30 = 0;
  v31 = 0;
  v7 = *(float64x2_t ***)(a2 + 32);
  v8 = (uint64_t)v7[1];
  if (v8)
  {
    v28 = *(double *)(a2 + 24);
    v9 = *v7;
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v30, v8, 1);
    v10 = (char *)v30;
    v11 = v31;
    if (v31 >= 0)
      v12 = v31;
    else
      v12 = v31 + 1;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (v31 >= 2)
    {
      v14 = 0;
      v15 = (float64x2_t *)v30;
      v16 = v9;
      do
      {
        v17 = *v16++;
        *v15++ = vmulq_n_f64(v17, v28);
        v14 += 2;
      }
      while (v14 < v13);
    }
    v18 = v11 <= v13;
    v19 = v11 - v13;
    if (!v18)
    {
      v20 = v12 >> 1;
      f64 = v9[v12 >> 1].f64;
      v22 = (double *)&v10[16 * v20];
      do
      {
        v23 = *f64++;
        *v22++ = v28 * v23;
        --v19;
      }
      while (v19);
    }
  }
  v24 = a1[2];
  if (v24 >= 1)
  {
    for (i = 0; i != v24; ++i)
    {
      v26 = a1[1];
      v29[0] = *a1 + 8 * v26 * i;
      v29[1] = v26;
      v29[3] = a1;
      v29[4] = 0;
      v29[5] = i;
      v29[6] = v26;
      v27 = *(_QWORD *)(v6 + 8 * i);
      v33 = v31;
      v34 = v27;
      v35 = &v30;
      Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set::operator()<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>(a4, v29, (uint64_t)v32);
    }
  }
  free(v30);
}

void sub_2183637F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  free(a18);
  _Unwind_Resume(a1);
}

void Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set::operator()<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;
  double v14;
  int64_t v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  unint64_t v20;
  uint64_t v21;
  double *v22;
  double *v23;
  double v24;

  v3 = *(double *)(a3 + 24);
  v4 = **(_QWORD **)(a3 + 32);
  v5 = (double *)*a2;
  v6 = a2[1];
  v7 = (*a2 >> 3) & 1;
  if (v7 >= v6)
    v7 = a2[1];
  if ((v5 & 7) != 0)
    v7 = a2[1];
  v8 = v6 - v7;
  if (v6 >= v7)
    v9 = v6 - v7;
  else
    v9 = v8 + 1;
  v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v7 >= 1)
  {
    v11 = (double *)*a2;
    v12 = **(double ***)(a3 + 32);
    v13 = v7;
    do
    {
      v14 = *v12++;
      *v11++ = v3 * v14;
      --v13;
    }
    while (v13);
  }
  v15 = v10 + v7;
  if (v8 > 1)
  {
    v16 = (float64x2_t *)(v4 + 8 * v7);
    v17 = v7;
    v18 = (float64x2_t *)&v5[v7];
    do
    {
      v19 = *v16++;
      *v18++ = vmulq_n_f64(v19, v3);
      v17 += 2;
    }
    while (v17 < v15);
  }
  if (v15 < v6)
  {
    v20 = v8 - v10;
    v21 = 16 * (v9 >> 1) + 8 * v7;
    v22 = (double *)(v4 + v21);
    v23 = (double *)((char *)v5 + v21);
    do
    {
      v24 = *v22++;
      *v23++ = v3 * v24;
      --v20;
    }
    while (v20);
  }
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  std::bad_alloc *v27;
  std::bad_alloc *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v30 = 0;
  v31 = 0;
  v29 = 0;
  v4 = (uint64_t **)(a2 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8);
  if (v5 | v6)
  {
    if (v5)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v6 < v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v29, v6 * v5, v5, v6);
  }
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(&v29, a2, v4, (uint64_t)&v32);
  v9 = (__int128 *)v29;
  v8 = v30;
  v10 = v31;
  if (a1[1] != v30 || a1[2] != v31)
  {
    if (v30 && v31 && 0x7FFFFFFFFFFFFFFFLL / v31 < v30)
    {
      v27 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v28 = std::bad_alloc::bad_alloc(v27);
      __cxa_throw(v28, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v31 * v30, v30, v31);
    v8 = a1[1];
    v10 = a1[2];
  }
  v11 = (_OWORD *)*a1;
  v12 = v8 * v10;
  if (v8 * v10 >= 0)
    v13 = v8 * v10;
  else
    v13 = v12 + 1;
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v15 = 0;
    v16 = (_OWORD *)*a1;
    v17 = v9;
    do
    {
      v18 = *v17++;
      *v16++ = v18;
      v15 += 2;
    }
    while (v15 < v14);
  }
  v19 = v12 <= v14;
  v20 = v12 - v14;
  if (!v19)
  {
    v21 = v13 >> 1;
    v22 = (uint64_t *)&v9[v13 >> 1];
    v23 = &v11[v21];
    do
    {
      v24 = *v22++;
      *v23++ = v24;
      --v20;
    }
    while (v20);
  }
  free(v29);
}

void sub_218363A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  _OWORD *v16;
  __int128 *v17;
  __int128 v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  std::bad_alloc *v27;
  std::bad_alloc *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v30 = 0;
  v31 = 0;
  v29 = 0;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  if (v5 | v6)
  {
    if (v5)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v6 < v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v29, v6 * v5, v5, v6);
    v4 = *(_QWORD *)a2;
  }
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(&v29, v4, (uint64_t **)(a2 + 8), (uint64_t)&v32);
  v9 = (__int128 *)v29;
  v8 = v30;
  v10 = v31;
  if (a1[1] != v30 || a1[2] != v31)
  {
    if (v30 && v31 && 0x7FFFFFFFFFFFFFFFLL / v31 < v30)
    {
      v27 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v28 = std::bad_alloc::bad_alloc(v27);
      __cxa_throw(v28, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v31 * v30, v30, v31);
    v8 = a1[1];
    v10 = a1[2];
  }
  v11 = (_OWORD *)*a1;
  v12 = v8 * v10;
  if (v8 * v10 >= 0)
    v13 = v8 * v10;
  else
    v13 = v12 + 1;
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v15 = 0;
    v16 = (_OWORD *)*a1;
    v17 = v9;
    do
    {
      v18 = *v17++;
      *v16++ = v18;
      v15 += 2;
    }
    while (v15 < v14);
  }
  v19 = v12 <= v14;
  v20 = v12 - v14;
  if (!v19)
  {
    v21 = v13 >> 1;
    v22 = (uint64_t *)&v9[v13 >> 1];
    v23 = &v11[v21];
    do
    {
      v24 = *v22++;
      *v23++ = v24;
      --v20;
    }
    while (v20);
  }
  free(v29);
}

void sub_218363BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[7];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a1[2];
  if (v4 >= 1)
  {
    v8 = 0;
    v9 = **a3;
    do
    {
      v10 = a1[1];
      v12[0] = *a1 + 8 * v10 * v8;
      v12[1] = v10;
      v12[3] = a1;
      v12[4] = 0;
      v12[5] = v8;
      v12[6] = v10;
      v11 = *(_QWORD *)(v9 + 8 * v8);
      v14 = *(_QWORD *)(a2 + 8);
      v15 = v11;
      v16 = a2;
      Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set::operator()<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>(a4, v12, (uint64_t)v13);
      ++v8;
    }
    while (v4 != v8);
  }
}

_QWORD *Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,-1,0,-1,-1> const>>,Eigen::internal::add_assign_op<double,double>,0>,4,0>::run(_QWORD *result)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double *v9;
  double *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  uint64_t v30;

  v1 = (unint64_t *)result[3];
  v2 = *v1;
  if ((*v1 & 7) != 0)
  {
    v3 = v1[2];
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = 0;
      v6 = v1[1];
      v7 = (_QWORD *)*result;
      v8 = result[1];
      do
      {
        if (v6 >= 1)
        {
          v9 = (double *)(*(_QWORD *)(v8 + 24) + *(_QWORD *)(v8 + 32) * v4);
          v10 = (double *)(*v7 + v7[2] * v4);
          v11 = v6;
          do
          {
            v12 = *v9++;
            *v10 = *(double *)(v8 + 8) * v12 + *v10;
            ++v10;
            --v11;
          }
          while (v11);
        }
        ++v5;
        v4 += 8;
      }
      while (v5 != v3);
    }
  }
  else
  {
    v13 = v1[2];
    if (v13 >= 1)
    {
      v14 = 0;
      v15 = 0;
      v16 = v1[1];
      v17 = v1[6] & 1;
      v18 = (v2 >> 3) & 1;
      if (v18 >= v16)
        v18 = v16;
      do
      {
        if (v18 >= 1)
          *(double *)(*(_QWORD *)*result + 8 * *(_QWORD *)(*result + 16) * v15) = *(double *)(result[1] + 8)
                                                                                  * *(double *)(*(_QWORD *)(result[1] + 24)
                                                                                              + 8
                                                                                              * *(_QWORD *)(result[1] + 32)
                                                                                              * v15)
                                                                                  + *(double *)(*(_QWORD *)*result
                                                                                              + 8
                                                                                              * *(_QWORD *)(*result + 16)
                                                                                              * v15);
        v19 = (v16 - v18) & 0xFFFFFFFFFFFFFFFELL;
        v20 = v19 + v18;
        if (v19 >= 1)
        {
          v21 = 8 * v18;
          v22 = v18;
          do
          {
            v23 = 8 * (v22 + v15 * *(_QWORD *)(*result + 16));
            *(float64x2_t *)(*(_QWORD *)*result + v23) = vaddq_f64(*(float64x2_t *)(*(_QWORD *)*result + v23), vmulq_n_f64(*(float64x2_t *)(*(_QWORD *)(result[1] + 24)+ v14 * *(_QWORD *)(result[1] + 32)+ v21), *(double *)(result[1] + 8)));
            v22 += 2;
            v21 += 16;
          }
          while (v22 < v20);
        }
        if (v20 < v16)
        {
          v24 = result[1];
          v25 = *(_QWORD *)(v24 + 24);
          v26 = *(_QWORD *)(v24 + 32);
          v27 = *(_QWORD *)*result + *(_QWORD *)(*result + 16) * v14;
          do
          {
            *(double *)(v27 + 8 * v20) = *(double *)(v24 + 8) * *(double *)(v25 + v26 * v14 + 8 * v20)
                                       + *(double *)(v27 + 8 * v20);
            ++v20;
          }
          while (v20 < v16);
        }
        v28 = __OFADD__(v18, v17);
        v30 = v18 + v17;
        v29 = (v30 < 0) ^ v28;
        v18 = v30 & 1;
        if (v29)
          v18 = -v18;
        if (v16 < v18)
          v18 = v16;
        ++v15;
        v14 += 8;
      }
      while (v15 != v13);
    }
  }
  return result;
}

__n128 std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24D93BFC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D93BFC8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()((_BYTE **)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t *turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()(_BYTE **a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  __n128 iterator;
  double **v26;
  void **v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  double *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  double v55;
  double *v56;
  double v57;
  double v58;
  uint64_t v59;
  double *v60;
  double i;
  double v62;
  uint64_t v63;
  uint64_t v64;
  double j;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  double *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  _QWORD *v76;
  _BYTE *v77;
  uint64_t v78;
  long double *v79;
  double v80;
  uint64_t v81;
  long double *v82;
  uint64_t v83;
  double **v84;
  double v85;
  long double *v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  double v90;
  int64_t v91;
  float64x2_t *v92;
  BOOL v93;
  uint64_t v94;
  double *v95;
  double v96;
  double v97;
  void *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double *v103;
  double *v104;
  uint64_t v105;
  double v106;
  unint64_t v107;
  unint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  std::bad_alloc *v119;
  std::bad_alloc *v120;
  std::bad_alloc *exception;
  std::bad_alloc *v122;
  _BYTE **v123;
  double *v124;
  _QWORD *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  long double **v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132[8];
  double v133;
  uint64_t v134;
  void *v135;
  void *v136;
  double **v137;
  uint64_t v138;
  char *v139;
  _BYTE v140[128];
  uint64_t v141;
  unsigned __int8 v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 v152;
  char v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  char v157;
  _QWORD *v158;
  char *v159;
  char *v160;
  _BYTE *v161;
  _QWORD v162[3];
  _BYTE v163[24];
  __int128 v164;
  uint64_t v165[7];

  v165[4] = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t)*a1;
  v7 = *((_QWORD *)*a1 + 107);
  v153 = 0;
  v154 = 0u;
  v155 = 0u;
  v156 = v7;
  v8 = *(_QWORD *)(v6 + 864) + 232 * a2;
  v11 = *(char **)(v8 + 24);
  v9 = *(_QWORD *)(v8 + 32);
  v10 = (_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v6 + 848);
  v125 = v10;
  if (v9 != v12)
  {
    free(v11);
    if (v12)
    {
      if ((unint64_t)v12 >> 61 || (v11 = (char *)malloc_type_malloc(8 * v12, 0x1E76AA36uLL)) == 0)
      {
LABEL_138:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v122 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v122, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
    else
    {
      v11 = 0;
    }
    v10 = v125;
    *v125 = v11;
  }
  v10[1] = v12;
  if (v12 >= 0)
    v13 = v12;
  else
    v13 = v12 + 1;
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    v15 = 2;
    if (v14 > 2)
      v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
    bzero(v11, ((8 * v15 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    v10 = v125;
  }
  v16 = (void **)(v10 + 2);
  v124 = (double *)(v10 + 11);
  if (v14 < v12)
    bzero(&v11[16 * (v13 >> 1)], 8 * v12 - 16 * (v13 >> 1));
  *v124 = 0.0;
  if (*a1[1])
  {
    v17 = *(_QWORD *)(v6 + 848);
    if (v17 && 0x7FFFFFFFFFFFFFFFLL / v17 < v17)
      goto LABEL_138;
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v16, v17 * v17, v17, *(_QWORD *)(v6 + 848));
    v19 = v16[1];
    v18 = v16[2];
    v20 = (char *)*v16;
    v21 = (_QWORD)v18 * (_QWORD)v19;
    if ((uint64_t)((_QWORD)v18 * (_QWORD)v19) >= 0)
      v22 = (_QWORD)v18 * (_QWORD)v19;
    else
      v22 = v21 + 1;
    v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if (v21 >= 2)
    {
      v24 = 2;
      if (v23 > 2)
        v24 = v22 & 0xFFFFFFFFFFFFFFFELL;
      bzero(*v16, ((8 * v24 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v23 < v21)
      bzero(&v20[16 * (v22 >> 1)], 8 * v21 - 16 * (v22 >> 1));
  }
  iterator = turi::ml_data::get_iterator((turi::ml_data *)(v6 + 384), a2, a3, (uint64_t)v140);
  if (v146 != v145)
  {
    v26 = (double **)(v125 + 5);
    v27 = (void **)(v125 + 8);
    v128 = (long double **)(v125 - 2);
    v123 = a1;
    do
    {
      v28 = v149;
      v130 = v148;
      if (v149)
      {
        p_shared_owners = (unint64_t *)&v149->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      v127 = v28;
      *(_QWORD *)&v155 = 0;
      if (v152)
      {
        v129 = *(_QWORD *)(v130 + 56);
        if (v129)
        {
          v31 = 0;
          v32 = *(_QWORD *)(v130 + 96) + 8 * v150 + 8 * (*(_BYTE *)(v130 + 18) == 0);
          do
          {
            v131 = v31;
            v33 = *(_QWORD *)(*(_QWORD *)(v130 + 72) + 16 * v31);
            v34 = *(_QWORD *)(v33 + 64);
            v35 = *(_QWORD *)(v33 + 104);
            switch(*(_DWORD *)(v33 + 24))
            {
              case 0:
                v36 = *(double *)v32;
                v32 += 8;
                v37 = v36;
                if (v34)
                {
                  if (!*(_BYTE *)(v6 + 360))
                  {
                    *(_QWORD *)v163 = 0;
                    v60 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, (int)v35, v163);
                    goto LABEL_76;
                  }
                  v38 = *(double *)(*(_QWORD *)(v6 + 368) + 8 * v35);
                  *(_QWORD *)v163 = 0;
                  v39 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, (int)v35, v163);
                  iterator.n128_f64[0] = v37 * v38;
                  *v39 = v37 * v38;
                }
                break;
              case 1:
                v58 = *(double *)v32;
                v32 += 8;
                v57 = v58;
                if (*(_QWORD *)&v58 < v34)
                {
                  v59 = *(_QWORD *)&v57 + v35;
                  if (*(_BYTE *)(v6 + 360))
                  {
                    v37 = *(double *)(*(_QWORD *)(v6 + 368) + 8 * v59);
                    *(_QWORD *)v163 = 0;
                    v60 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, (int)v59, v163);
LABEL_76:
                    *v60 = v37;
                  }
                  else
                  {
                    *(_QWORD *)v163 = 0;
                    *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, (int)v59, v163) = 0x3FF0000000000000;
                  }
                }
                break;
              case 2:
                v40 = *(_QWORD *)(v33 + 72);
                if (v40)
                {
                  v41 = 0;
                  v42 = 0;
                  v43 = v35 << 32;
                  v44 = 8 * v35;
                  do
                  {
                    if (v42 < v34)
                    {
                      v45 = *(double *)(v32 + 8 * v42);
                      v46 = v43 >> 32;
                      if (*(_BYTE *)(v6 + 360))
                      {
                        v47 = *(double *)(*(_QWORD *)(v6 + 368) + v44 + 8 * v42);
                        *(_QWORD *)v163 = 0;
                        v48 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, v46, v163);
                        iterator.n128_f64[0] = v45 * v47;
                        *v48 = v45 * v47;
                      }
                      else
                      {
                        *(_QWORD *)v163 = 0;
                        *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, v46, v163) = v45;
                      }
                    }
                    ++v42;
                    v43 += 0x100000000;
                    v41 -= 8;
                  }
                  while (v40 != v42);
                  goto LABEL_56;
                }
                break;
              case 3:
                v62 = *(double *)v32;
                v32 += 8;
                for (i = v62; i != 0.0; --*(_QWORD *)&i)
                {
                  if (*(_QWORD *)v32 < v34)
                  {
                    v63 = *(_QWORD *)v32 + v35;
                    if (*(_BYTE *)(v6 + 360))
                    {
                      v64 = *(_QWORD *)(*(_QWORD *)(v6 + 368) + 8 * v63);
                      *(_QWORD *)v163 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, (int)v63, v163) = v64;
                    }
                    else
                    {
                      *(_QWORD *)v163 = 0;
                      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, (int)v63, v163) = 0x3FF0000000000000;
                    }
                  }
                  v32 += 8;
                }
                break;
              case 4:
                v66 = *(double *)v32;
                v32 += 8;
                for (j = v66; j != 0.0; --*(_QWORD *)&j)
                {
                  if (*(_QWORD *)v32 < v34)
                  {
                    v67 = *(double *)(v32 + 8);
                    v68 = *(_QWORD *)v32 + v35;
                    if (*(_BYTE *)(v6 + 360))
                    {
                      v69 = *(double *)(*(_QWORD *)(v6 + 368) + 8 * v68);
                      *(_QWORD *)v163 = 0;
                      v70 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, (int)v68, v163);
                      iterator.n128_f64[0] = v67 * v69;
                      *v70 = v67 * v69;
                    }
                    else
                    {
                      *(_QWORD *)v163 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, (int)v68, v163) = v67;
                    }
                  }
                  v32 += 16;
                }
                break;
              case 7:
                v49 = *(_QWORD *)(v33 + 72);
                if (v49)
                {
                  v41 = 0;
                  v50 = 0;
                  v51 = v35 << 32;
                  v52 = 8 * v35;
                  do
                  {
                    if (v50 < v34)
                    {
                      v53 = *(double *)(v32 + 8 * v50);
                      v54 = v51 >> 32;
                      if (*(_BYTE *)(v6 + 360))
                      {
                        v55 = *(double *)(*(_QWORD *)(v6 + 368) + v52 + 8 * v50);
                        *(_QWORD *)v163 = 0;
                        v56 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, v54, v163);
                        iterator.n128_f64[0] = v53 * v55;
                        *v56 = v53 * v55;
                      }
                      else
                      {
                        *(_QWORD *)v163 = 0;
                        *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, v54, v163) = v53;
                      }
                    }
                    ++v50;
                    v51 += 0x100000000;
                    v41 -= 8;
                  }
                  while (v49 != v50);
LABEL_56:
                  v32 -= v41;
                  v27 = (void **)(v125 + 8);
                }
                break;
              default:
                break;
            }
            v31 = v131 + 1;
          }
          while (v131 + 1 != v129);
        }
      }
      if (v127)
      {
        v71 = (unint64_t *)&v127->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v127->__on_zero_shared)(v127, iterator);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      v73 = *(_DWORD *)(v6 + 856) - 1;
      *(_QWORD *)v163 = 0;
      *(_QWORD *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t)&v154, v73, v163) = 0x3FF0000000000000;
      if (*(_BYTE *)(v148 + 16))
        v74 = *(_BYTE *)(v148 + 17) == 0;
      else
        v74 = 1;
      if (v74)
      {
        v75 = 0;
      }
      else
      {
        v76 = (_QWORD *)(v148 + 24);
        if (!*(_BYTE *)(v148 + 18))
          v76 = (_QWORD *)(*(_QWORD *)(v148 + 96) + 8 * v150);
        v75 = *(_QWORD *)(*(_QWORD *)(v148 + 96) + 8 * v150 + 8 * *v76 - 8);
      }
      v77 = v123[2];
      v78 = *((_QWORD *)v77 + 2);
      *(_OWORD *)v163 = *(_OWORD *)v77;
      *(_QWORD *)&v163[16] = v78;
      *((_QWORD *)&v164 + 1) = &v153;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(v128, (__int128 *)v163);
      v79 = *v128;
      if (v75)
        v80 = v79[v75 - 1];
      else
        v80 = 0.0;
      v81 = *(v125 - 1);
      if (v81 >= 1)
      {
        v82 = *v128;
        v83 = *(v125 - 1);
        do
        {
          *v82 = exp(*v82);
          ++v82;
          --v83;
        }
        while (v83);
      }
      if (v81)
      {
        *(_QWORD *)v163 = v79;
        v84 = (double **)(v125 - 2);
        *(_QWORD *)&v163[16] = v125 - 2;
        v85 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)v163);
        v86 = *v128;
        v87 = *(v125 - 1);
        if (v87 >= 0)
          v88 = *(v125 - 1);
        else
          v88 = v87 + 1;
        v89 = v88 & 0xFFFFFFFFFFFFFFFELL;
        v90 = 1.0 / (v85 + 1.0);
        if (v87 >= 2)
        {
          v91 = 0;
          v92 = (float64x2_t *)*v128;
          do
          {
            *v92 = vmulq_n_f64(*v92, v90);
            ++v92;
            v91 += 2;
          }
          while (v91 < v89);
        }
        v93 = v87 <= v89;
        v94 = v87 - v89;
        if (!v93)
        {
          v95 = &v86[2 * (v88 >> 1)];
          do
          {
            *v95 = v90 * *v95;
            ++v95;
            --v94;
          }
          while (v94);
        }
      }
      else
      {
        v85 = 0.0;
        v84 = (double **)(v125 - 2);
      }
      v96 = log1p(v85);
      if (v75)
        (*v84)[v75 - 1] = (*v84)[v75 - 1] + -1.0;
      v97 = *((double *)v84 + 1);
      v98 = *(void **)(*(_QWORD *)(v6 + 344) + 8 * v75);
      v132[0] = 0;
      v133 = v97;
      v134 = v156;
      v135 = v98;
      LOBYTE(v136) = 0;
      v137 = v84;
      v138 = 0;
      v139 = &v153;
      v99 = *(char **)(v6 + 856);
      v100 = *(_QWORD *)(v6 + 784) - 1;
      v158 = (_QWORD *)*v125;
      v159 = (char *)v100;
      v160 = v99;
      v163[0] = 0;
      *(_OWORD *)&v163[8] = 0u;
      v164 = 0u;
      memset(v165, 0, 32);
      Eigen::internal::assign_sparse_to_sparse<Eigen::SparseMatrix<double,1,long>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,0> const>>((uint64_t)v163, (uint64_t)v132);
      Eigen::internal::Assignment<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1>,0,Eigen::Stride<0,0>>,Eigen::SparseMatrix<double,1,long>,Eigen::internal::add_assign_op<double,double>,Eigen::internal::Sparse2Dense,void>::run((uint64_t *)&v158, v163);
      free((void *)v164);
      free(*((void **)&v164 + 1));
      Eigen::internal::CompressedStorage<double,long>::~CompressedStorage(v165);
      iterator.n128_f64[0] = *v124 + *(double *)(*(_QWORD *)(v6 + 344) + 8 * v75) * (v96 - v80);
      *v124 = iterator.n128_f64[0];
      if (*v123[1])
      {
        *(_QWORD *)&v163[8] = v84[1];
        *(_QWORD *)&v164 = 0xBFF0000000000000;
        *((_QWORD *)&v164 + 1) = v84;
        v165[1] = (uint64_t)v84;
        Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(v26, (uint64_t)v163);
        v102 = v125[6];
        v101 = v125[7];
        if (v101 >= v102)
          v101 = v125[6];
        if (v101 >= 1)
        {
          v103 = *v84;
          v104 = *v26;
          v105 = 8 * v102 + 8;
          do
          {
            v106 = *v103++;
            *v104 = v106 + *v104;
            v104 = (double *)((char *)v104 + v105);
            --v101;
          }
          while (v101);
        }
        v163[0] = 0;
        *(_QWORD *)&v163[8] = &v153;
        *(_QWORD *)&v163[16] = v126 & 0xFFFFFFFFFFFFFF00;
        v126 &= 0xFFFFFFFFFFFFFF00;
        *(_QWORD *)&v164 = &v153;
        if (v156 && 0x7FFFFFFFFFFFFFFFLL / v156 < v156)
        {
          v119 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v120 = std::bad_alloc::bad_alloc(v119);
          __cxa_throw(v120, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v27, v156 * v156, v156, v156);
        Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,2>,Eigen::internal::assign_op<double,double>,Eigen::internal::Sparse2Dense,void>::run(v27, (uint64_t)v163);
        if (*(_QWORD *)(v6 + 784) != 1)
        {
          v107 = 0;
          do
          {
            v108 = 0;
            do
            {
              v109 = *(double *)(*(_QWORD *)(v6 + 344) + 8 * v75) * *(double *)(v125[5] + 8 * (v107 + v125[6] * v108));
              v110 = *(_QWORD *)(v6 + 856);
              v111 = (uint64_t)v16[1];
              *(_QWORD *)v163 = (char *)*v16 + 8 * v110 * v107 + 8 * v111 * v110 * v108;
              *(_QWORD *)&v163[8] = v110;
              *(_QWORD *)&v163[16] = v110;
              *(_QWORD *)&v164 = v16;
              *((_QWORD *)&v164 + 1) = v110 * v107;
              v165[0] = v110 * v108;
              v165[1] = v111;
              v133 = v109;
              v135 = *v27;
              v136 = v27[1];
              v162[0] = *(_QWORD *)v163;
              v162[2] = v111;
              v158 = v162;
              v159 = v132;
              v160 = &v157;
              v161 = v163;
              Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,-1,0,-1,-1> const>>,Eigen::internal::add_assign_op<double,double>,0>,4,0>::run(&v158);
              ++v108;
              v112 = *(_QWORD *)(v6 + 784) - 1;
            }
            while (v108 < v112);
            ++v107;
          }
          while (v107 < v112);
        }
      }
      if (v152 | v142)
      {
        v113 = (uint64_t *)(*(_QWORD *)(v148 + 96) + 8 * v150);
        if (v143)
          v113 = &v144;
        v150 += *v113;
      }
      v114 = v146 + 1;
      v115 = v145;
      v116 = ++v146 - v141 * v147;
      v151 = v116;
      if (v116 == v141 && v114 != v145)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v140);
        v115 = v145;
        v114 = v146;
      }
    }
    while (v114 != v115);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v140);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v154);
}

void sub_2183649F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage(a22);
  _Unwind_Resume(a1);
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  _OWORD *v17;
  __int128 *v18;
  __int128 v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[2];
  void **v32;

  v26 = 0;
  v27 = 0;
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v26, v4, 1);
    v5 = (char *)v26;
    v6 = v27;
    v7 = *((_QWORD *)a2 + 4);
    if (v27 >= 0)
      v8 = v27;
    else
      v8 = v27 + 1;
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v27 >= 2)
    {
      v10 = 2;
      if (v9 > 2)
        v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
      bzero(v26, ((8 * v10 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v9 < v6)
      bzero(&v5[16 * (v8 >> 1)], 8 * v6 - 16 * (v8 >> 1));
  }
  else
  {
    v7 = *((_QWORD *)a2 + 4);
  }
  v28 = 0x3FF0000000000000;
  v32 = &v26;
  v31[0] = 0;
  v31[1] = v7;
  v29 = *a2;
  v30 = *((_QWORD *)a2 + 2);
  Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run((uint64_t)v31, &v29, (uint64_t **)&v32, (double *)&v28);
  v12 = (__int128 *)v26;
  v11 = v27;
  if (a1[1] != v27)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v27, 1);
    v11 = a1[1];
  }
  v13 = (_OWORD *)*a1;
  if (v11 >= 0)
    v14 = v11;
  else
    v14 = v11 + 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    v16 = 0;
    v17 = (_OWORD *)*a1;
    v18 = v12;
    do
    {
      v19 = *v18++;
      *v17++ = v19;
      v16 += 2;
    }
    while (v16 < v15);
  }
  v20 = __OFSUB__(v11, v15);
  v21 = v11 - v15;
  if (!((v21 < 0) ^ v20 | (v21 == 0)))
  {
    v22 = v14 >> 1;
    v23 = (uint64_t *)&v12[v14 >> 1];
    v24 = &v13[v22];
    do
    {
      v25 = *v23++;
      *v24++ = v25;
      --v21;
    }
    while (v21);
  }
  free(v26);
}

void sub_218364C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

void Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run(uint64_t a1, _QWORD *a2, uint64_t **a3, double *a4)
{
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 8);
  if ((uint64_t)a2[1] >= 1)
  {
    v7 = 0;
    do
      Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow((uint64_t)v8, a2, a3, a4, 0, v7++);
    while (v7 < a2[1]);
  }
}

double Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow(uint64_t a1, _QWORD *a2, uint64_t **a3, double *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  double *v8;
  int *v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = v6[3];
  if (v7 < 1)
  {
    v10 = 0.0;
  }
  else
  {
    v8 = (double *)v6[1];
    v9 = (int *)v6[2];
    v10 = 0.0;
    do
    {
      v11 = *v8++;
      v12 = v11;
      v13 = *v9++;
      v10 = v10 + v12 * *(double *)(*a2 + 8 * (a2[2] * a6 + v13));
      --v7;
    }
    while (v7);
  }
  v14 = **a3;
  result = *(double *)(v14 + 8 * a6) + *a4 * v10;
  *(double *)(v14 + 8 * a6) = result;
  return result;
}

uint64_t *Eigen::internal::assign_sparse_to_sparse<Eigen::SparseMatrix<double,1,long>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,0> const>>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  double v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  int *v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  int *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char v59[8];
  __int128 v60;
  void *v61[2];
  __int128 v62;
  __int128 v63;

  v4 = *(uint64_t **)(a2 + 40);
  v5 = *(double *)(a2 + 24);
  v6 = *(_QWORD **)(a2 + 56);
  v7 = v4[1];
  v57 = *v4;
  v58 = v7;
  if (*(_BYTE *)a2)
  {
    Eigen::SparseMatrix<double,1,long>::resize(a1, v7, v6[5]);
    *(_QWORD *)(a1 + 56) = 0;
    bzero(*(void **)(a1 + 24), 8 * *(_QWORD *)(a1 + 8) + 8);
    v8 = *(void **)(a1 + 32);
    if (v8)
      bzero(v8, 8 * *(_QWORD *)(a1 + 8));
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
    if (v9 <= *(_QWORD *)(*(_QWORD *)(a2 + 56) + 40))
      v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 40);
    result = (uint64_t *)Eigen::internal::CompressedStorage<double,long>::reserve(a1 + 40, 2 * v9);
    if (v7 >= 1)
    {
      v11 = 0;
      do
      {
        v12 = v11;
        v13 = *(_QWORD *)(a1 + 24);
        v14 = *(_QWORD *)(v13 + 8 * v11++);
        *(_QWORD *)(v13 + 8 * v11) = v14;
        v15 = v6[3];
        if (v15 >= 1)
        {
          v16 = (double *)v6[1];
          v17 = (int *)v6[2];
          v18 = v5 * *(double *)(v57 + 8 * v12);
          do
          {
            v19 = *v16++;
            v20 = v19;
            v21 = *v17++;
            v22 = *(_QWORD *)(a1 + 24);
            v23 = *(_QWORD *)(v22 + 8 * v11);
            v24 = v18 * v20;
            *(_QWORD *)(v22 + 8 * v11) = v23 + 1;
            v25 = *(_QWORD *)(a1 + 56);
            result = (uint64_t *)Eigen::internal::CompressedStorage<double,long>::resize(a1 + 40, v25 + 1, 1.0);
            v26 = *(_QWORD *)(a1 + 40);
            *(_QWORD *)(v26 + 8 * v25) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v25) = v21;
            *(double *)(v26 + 8 * v23) = v24;
            --v15;
          }
          while (v15);
        }
      }
      while (v11 != v7);
    }
    if (!*(_QWORD *)(a1 + 32))
    {
      v27 = *(_QWORD *)(a1 + 8);
      if ((v27 & 0x8000000000000000) == 0)
      {
        v28 = *(_QWORD *)(a1 + 56);
        v29 = *(_QWORD *)(a1 + 24);
        v30 = *(_QWORD *)(a1 + 8);
        while (!*(_QWORD *)(v29 + 8 * v30))
        {
          v31 = v30-- <= 0;
          if (v31)
          {
            v30 = -1;
            break;
          }
        }
        if (v30 < v27)
        {
          do
            *(_QWORD *)(v29 + 8 + 8 * v30++) = v28;
          while (v30 < *(_QWORD *)(a1 + 8));
        }
      }
    }
  }
  else
  {
    v32 = v6[5];
    v59[0] = 0;
    v60 = 0u;
    *(_OWORD *)v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    Eigen::SparseMatrix<double,1,long>::resize((uint64_t)v59, v7, v32);
    v33 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
    if (v33 <= *(_QWORD *)(*(_QWORD *)(a2 + 56) + 40))
      v33 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 40);
    Eigen::internal::CompressedStorage<double,long>::reserve((uint64_t)&v62, 2 * v33);
    if (v7 >= 1)
    {
      v34 = 0;
      do
      {
        v35 = v34;
        v36 = *((_QWORD *)v61[0] + v34++);
        *((_QWORD *)v61[0] + v34) = v36;
        v37 = v6[3];
        if (v37 >= 1)
        {
          v38 = (double *)v6[1];
          v39 = (int *)v6[2];
          v40 = v5 * *(double *)(v57 + 8 * v35);
          do
          {
            v41 = *v39++;
            v42 = *((_QWORD *)v61[0] + v34);
            v43 = *v38;
            *((_QWORD *)v61[0] + v34) = v42 + 1;
            v44 = v63;
            Eigen::internal::CompressedStorage<double,long>::resize((uint64_t)&v62, v63 + 1, 1.0);
            v45 = v62;
            *(_QWORD *)(v62 + 8 * v44) = 0;
            *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8 * v44) = v41;
            *(double *)(v45 + 8 * v42) = v40 * v43;
            ++v38;
            --v37;
          }
          while (v37);
        }
      }
      while (v34 != v58);
    }
    v46 = v61[1];
    v47 = v60;
    if (!v61[1] && (v60 & 0x8000000000000000) == 0)
    {
      v54 = v63;
      v55 = v60;
      while (!*((_QWORD *)v61[0] + v55))
      {
        v31 = v55-- <= 0;
        if (v31)
        {
          v55 = -1;
          break;
        }
      }
      if (v55 < (uint64_t)v60)
      {
        v56 = (char *)v61[0] + 8;
        do
        {
          *(_QWORD *)&v56[8 * v55] = v54;
          v47 = v60;
          ++v55;
        }
        while (v55 < (uint64_t)v60);
      }
    }
    v59[0] = 1;
    v49 = *((_QWORD *)&v60 + 1);
    v48 = v61[0];
    v50 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v47;
    *(_QWORD *)(a1 + 16) = v49;
    v51 = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v48;
    *(_QWORD *)(a1 + 32) = v46;
    v60 = v50;
    *(_OWORD *)v61 = v51;
    v52 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v62;
    v53 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v63;
    v62 = v52;
    v63 = v53;
    free((void *)v51);
    free(v61[1]);
    return Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)&v62);
  }
  return result;
}

void sub_2183650A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  Eigen::SparseMatrix<double,0,long>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void Eigen::SparseMatrix<double,1,long>::resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  void *v7;
  void *v8;
  std::bad_alloc *exception;
  std::bad_alloc *v10;

  v3 = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 != a2 || v5 == 0)
  {
    free(*(void **)(a1 + 24));
    v7 = malloc_type_malloc(8 * v3 + 8, 0x100004000313F17uLL);
    *(_QWORD *)(a1 + 24) = v7;
    if (!v7)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v10 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v10, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    *(_QWORD *)(a1 + 8) = v3;
  }
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    free(v8);
    *(_QWORD *)(a1 + 32) = 0;
    v3 = *(_QWORD *)(a1 + 8);
  }
  bzero(*(void **)(a1 + 24), 8 * v3 + 8);
}

uint64_t Eigen::internal::CompressedStorage<double,long>::reserve(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  const void *v9;

  v2 = *(_QWORD *)(result + 16) + a2;
  if (v2 > *(_QWORD *)(result + 24))
  {
    v3 = result;
    v4 = (void *)operator new[]();
    result = operator new[]();
    v5 = (void *)result;
    v6 = *(_QWORD *)(v3 + 16);
    if (v6 >= v2)
      v6 = v2;
    v7 = *(const void **)v3;
    if (v6 <= 0)
    {
      v9 = *(const void **)(v3 + 8);
    }
    else
    {
      v8 = 8 * v6;
      memcpy(v4, *(const void **)v3, 8 * v6);
      v9 = *(const void **)(v3 + 8);
      result = (uint64_t)memcpy(v5, v9, v8);
    }
    *(_QWORD *)v3 = v4;
    *(_QWORD *)(v3 + 8) = v5;
    *(_QWORD *)(v3 + 24) = v2;
    if (v9)
      result = MEMORY[0x219A199F0](v9, 0x1000C8000313F17);
    if (v7)
      JUMPOUT(0x219A199F0);
  }
  return result;
}

void sub_21836529C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t *Eigen::internal::Assignment<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1>,0,Eigen::Stride<0,0>>,Eigen::SparseMatrix<double,1,long>,Eigen::internal::add_assign_op<double,double>,Eigen::internal::Sparse2Dense,void>::run(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;

  v2 = a2[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *result;
    v5 = result[2];
    v6 = a2[5];
    v7 = a2[6];
    v8 = a2[3];
    v9 = a2[4];
    do
    {
      v10 = *(_QWORD *)(v8 + 8 * v3);
      if (v9)
        v11 = *(_QWORD *)(v9 + 8 * v3) + v10;
      else
        v11 = *(_QWORD *)(v8 + 8 * v3 + 8);
      v12 = v11 <= v10;
      v13 = v11 - v10;
      if (!v12)
      {
        result = (uint64_t *)(v7 + 8 * v10);
        v14 = (double *)(v6 + 8 * v10);
        do
        {
          v15 = *result++;
          v16 = v15 + v3 * v5;
          v17 = *v14++;
          *(double *)(v4 + 8 * v16) = v17 + *(double *)(v4 + 8 * v16);
          --v13;
        }
        while (v13);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t *Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,2>,Eigen::internal::assign_op<double,double>,Eigen::internal::Sparse2Dense,void>::run(void **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;

  v4 = *(_QWORD **)(a2 + 8);
  v5 = v4[5];
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if (a1[1] != (void *)v5 || a1[2] != (void *)v6)
  {
    if (v5)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8 && 0x7FFFFFFFFFFFFFFFLL / v6 < v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v6 * v5, v5, v6);
    v4 = *(_QWORD **)(a2 + 8);
  }
  return Eigen::internal::generic_product_impl<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,Eigen::SparseShape,Eigen::SparseShape,5>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(a1, v4, (__int128 *)(a2 + 16));
}

uint64_t *Eigen::internal::generic_product_impl<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,Eigen::SparseShape,Eigen::SparseShape,5>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(void **a1, _QWORD *a2, __int128 *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  __int128 v13;

  v6 = (char *)a1[2];
  v7 = (char *)*a1;
  v8 = (_QWORD)v6 * (_QWORD)a1[1];
  if (v8 >= 0)
    v9 = (_QWORD)v6 * (_QWORD)a1[1];
  else
    v9 = v8 + 1;
  v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v8 >= 2)
  {
    v11 = 2;
    if (v10 > 2)
      v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    bzero(*a1, ((8 * v11 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v10 < v8)
    bzero(&v7[16 * (v9 >> 1)], 8 * v8 - 16 * (v9 >> 1));
  v13 = *a3;
  return Eigen::internal::sparse_sparse_to_dense_product_selector<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,Eigen::Matrix<double,-1,-1,0,-1,-1>,0,1>::run(a2, (uint64_t)&v13, (uint64_t *)a1);
}

uint64_t *Eigen::internal::sparse_sparse_to_dense_product_selector<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,Eigen::Matrix<double,-1,-1,0,-1,-1>,0,1>::run(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  double *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  _BYTE v25[8];
  __int128 v26;
  void *v27[2];
  _OWORD v28[2];

  v25[0] = 0;
  v26 = 0u;
  *(_OWORD *)v27 = 0u;
  memset(v28, 0, sizeof(v28));
  Eigen::SparseMatrix<double,0,long>::operator=<Eigen::Transpose<Eigen::SparseVector<double,0,int>>>((uint64_t)v25, a2);
  v5 = v26;
  if ((uint64_t)v26 <= 0)
  {
    v9 = v27[0];
  }
  else
  {
    v6 = 0;
    v8 = v27[1];
    v7 = *(_QWORD *)&v28[0];
    v9 = v27[0];
    v10 = (double *)a1[1];
    v11 = (int *)a1[2];
    v12 = a1[3];
    do
    {
      v13 = v9[v6];
      if (v8)
        v14 = v8[v6] + v13;
      else
        v14 = v9[v6 + 1];
      if (v13 < v14)
      {
        v15 = *a3;
        v16 = a3[1] * v6;
        do
        {
          if (v12 >= 1)
          {
            v17 = *(double *)(v7 + 8 * v13);
            v18 = v11;
            v19 = v10;
            v20 = v12;
            do
            {
              v22 = *v18++;
              v21 = v22;
              v23 = *v19++;
              *(double *)(v15 + 8 * (v16 + v21)) = *(double *)(v15 + 8 * (v16 + v21)) + v23 * v17;
              --v20;
            }
            while (v20);
          }
          ++v13;
        }
        while (v13 != v14);
      }
      ++v6;
    }
    while (v6 != v5);
  }
  free(v9);
  free(v27[1]);
  return Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)v28);
}

void sub_218365598(_Unwind_Exception *a1)
{
  uint64_t v1;

  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t Eigen::SparseMatrix<double,0,long>::operator=<Eigen::Transpose<Eigen::SparseVector<double,0,int>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::bad_alloc *exception;
  std::bad_alloc *v30;
  char v31[8];
  __int128 v32;
  void *v33[2];
  __int128 v34;
  __int128 v35;

  v3 = *(_QWORD **)(a2 + 8);
  v4 = v3[5];
  v31[0] = 0;
  v32 = 0u;
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  Eigen::SparseMatrix<double,0,long>::resize((uint64_t)v31, 1, v4);
  v5 = v33[0];
  if ((uint64_t)v32 >= 1)
    bzero(v33[0], 8 * v32);
  v6 = v3[3];
  if (v6 >= 1)
  {
    v7 = (int *)v3[2];
    do
    {
      v8 = *v7++;
      ++v5[v8];
      --v6;
    }
    while (v6);
  }
  if ((_QWORD)v32)
  {
    if ((unint64_t)v32 >> 61 || (v9 = malloc_type_malloc(8 * v32, 0x1E76AA36uLL), (v10 = v9) == 0))
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v30 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v30, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v11 = v32;
    v12 = v33[0];
    if ((uint64_t)v32 < 1)
    {
      v14 = 0;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = v12[v13];
        v12[v13] = v14;
        v9[v13] = v14;
        v14 += v15;
        ++v13;
        v11 = v32;
      }
      while (v13 < (uint64_t)v32);
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
    v11 = 0;
    v12 = v33[0];
  }
  v12[v11] = v14;
  Eigen::internal::CompressedStorage<double,long>::resize((uint64_t)&v34, v14, 0.0);
  v16 = *((_QWORD *)&v34 + 1);
  v17 = v34;
  v18 = v3[3];
  if (v18 >= 1)
  {
    v19 = (uint64_t *)v3[1];
    v20 = (int *)v3[2];
    do
    {
      v21 = *v20++;
      v22 = v10[v21];
      v10[v21] = v22 + 1;
      *(_QWORD *)(v16 + 8 * v22) = 0;
      v23 = *v19++;
      *(_QWORD *)(v17 + 8 * v22) = v23;
      --v18;
    }
    while (v18);
    v17 = v34;
  }
  v24 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = v32;
  v25 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v33;
  v32 = v24;
  *(_OWORD *)v33 = v25;
  v26 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 48) = v16;
  v27 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = v35;
  v34 = v26;
  v35 = v27;
  free(v10);
  free(v33[0]);
  free(v33[1]);
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)&v34);
  return a1;
}

void sub_218365790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  free(v10);
  Eigen::SparseMatrix<double,0,long>::~SparseMatrix((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void *turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,-1,1,-1,-1>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  const void *v9;
  size_t v10;
  void *result;
  size_t v12;
  char *v13;
  size_t v14;
  char **v15;
  size_t v16;
  BOOL v17;
  std::vector<char>::size_type v18;
  size_t v19;
  char **v20;
  size_t v21;
  BOOL v22;
  std::vector<char>::size_type v23;
  size_t v24;
  char **v25;
  size_t v26;
  BOOL v27;
  std::vector<char>::size_type v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a2 + 8);
  v29 = *(_QWORD *)(a2 + 16);
  v30 = v4;
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v5)
    {
      v14 = 2 * v5 + 16;
      *(_QWORD *)(a1 + 40) = v14;
      v15 = *(char ***)(a1 + 16);
      if (v15)
      {
        v6 = *v15;
        v16 = v15[1] - *v15;
        v17 = v14 >= v16;
        v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          v6 = **(char ***)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = &v6[v14];
        }
      }
      else
      {
        v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v6;
    }
    else
    {
      v6 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v6[*(_QWORD *)(a1 + 32)] = v4;
    *(_QWORD *)(a1 + 32) += 8;
  }
  if (*(_QWORD *)a1)
  {
    std::ostream::write();
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(a1 + 32) + 8 > v7)
    {
      v19 = 2 * v7 + 16;
      *(_QWORD *)(a1 + 40) = v19;
      v20 = *(char ***)(a1 + 16);
      if (v20)
      {
        v8 = *v20;
        v21 = v20[1] - *v20;
        v22 = v19 >= v21;
        v23 = v19 - v21;
        if (v23 != 0 && v22)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v23);
          v8 = **(char ***)(a1 + 16);
        }
        else if (!v22)
        {
          v20[1] = &v8[v19];
        }
      }
      else
      {
        v8 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v19, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a1 + 24) = v8;
    }
    else
    {
      v8 = *(char **)(a1 + 24);
    }
    *(_QWORD *)&v8[*(_QWORD *)(a1 + 32)] = v29;
    *(_QWORD *)(a1 + 32) += 8;
  }
  v9 = *(const void **)a2;
  v10 = 8 * v30 * v29;
  if (*(_QWORD *)a1)
    return (void *)std::ostream::write();
  v12 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 32) + v10 > v12)
  {
    v24 = 2 * (v12 + v10);
    *(_QWORD *)(a1 + 40) = v24;
    v25 = *(char ***)(a1 + 16);
    if (v25)
    {
      v13 = *v25;
      v26 = v25[1] - *v25;
      v27 = v24 >= v26;
      v28 = v24 - v26;
      if (v28 != 0 && v27)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v28);
        v13 = **(char ***)(a1 + 16);
      }
      else if (!v27)
      {
        v25[1] = &v13[v24];
      }
    }
    else
    {
      v13 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v24, 0xF6EA6B1uLL);
    }
    *(_QWORD *)(a1 + 24) = v13;
  }
  else
  {
    v13 = *(char **)(a1 + 24);
  }
  result = memcpy(&v13[*(_QWORD *)(a1 + 32)], v9, v10);
  *(_QWORD *)(a1 + 32) += v10;
  return result;
}

void *turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,-1,1,-1,-1>(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(v4 + v5);
    *(_QWORD *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    v4 = *(_QWORD *)(a1 + 16);
    if (!v4)
    {
      std::istream::read();
      v7 = 0;
      goto LABEL_5;
    }
  }
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v4 + v6);
  v12 = v7;
  *(_QWORD *)(a1 + 24) = v6 + 8;
LABEL_5:
  if (v13 && v7 && 0x7FFFFFFFFFFFFFFFLL / v7 < v13)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a2, v7 * v13, v13, v7);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    return (void *)std::istream::read();
  result = memcpy(*a2, (const void *)(v8 + *(_QWORD *)(a1 + 24)), 8 * v13 * v12);
  *(_QWORD *)(a1 + 24) += 8 * v13 * v12;
  return result;
}

void __cxx_global_var_init_37_0()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_logistic_regression_cpp()
{
  uint64_t i;
  uint64_t j;
  std::string v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  int v14;
  char v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;
  char v19;
  _QWORD v20[3];
  uint64_t v21;
  int v22;
  char v23;
  _QWORD v24[4];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LODWORD(v5) = 0;
  BYTE4(v5) = 1;
  v4 = 0x3F847AE147AE147BLL;
  std::string::basic_string[abi:ne180100]<0>(&v6, "step_size");
  v9 = 0;
  v10 = 1;
  v8 = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "lbfgs_memory_level");
  v15 = 0;
  v14 = 0;
  v13[1] = 3;
  std::string::basic_string[abi:ne180100]<0>(&v16, "mini_batch_size");
  v19 = 0;
  v18 = 0;
  v17[2] = 1000;
  std::string::basic_string[abi:ne180100]<0>(v20, "max_iterations");
  v23 = 0;
  v22 = 0;
  v21 = 10;
  std::string::basic_string[abi:ne180100]<0>(v24, "auto_tuning");
  v26 = 0;
  v25 = 0;
  v24[3] = 1;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_options, &v3, 6);
  for (i = 200; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v3 + i);
  __cxa_atexit((void (*)(void *))std::map<std::string,turi::flexible_type>::~map[abi:ne180100], &turi::optimization::default_solver_options, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(&v3, "convergence_threshold");
  LOBYTE(v4) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v5, "step_size");
  v7 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "lbfgs_memory_level");
  v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "mini_batch_size");
  LOBYTE(v16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, "max_iterations");
  LOBYTE(v18) = 0;
  std::string::basic_string[abi:ne180100]<0>(v20, "auto_tuning");
  LOBYTE(v21) = 0;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)&turi::optimization::default_solver_option_types, (const void **)&v3.__r_.__value_.__l.__data_, 6);
  for (j = 0; j != -24; j -= 4)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,turi::flex_type_enum>::~map[abi:ne180100], &turi::optimization::default_solver_option_types, &dword_217E69000);
}

void sub_218365E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 183) < 0)
      operator delete(*(void **)(v10 + v12 + 160));
    v12 -= 32;
    if (v12 == -192)
      _Unwind_Resume(exception_object);
  }
}

uint64_t skip_input_data(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (a2 >= 1)
  {
    v2 = a2;
    v3 = result;
    v4 = *(_QWORD *)(result + 40);
    v5 = *(_QWORD *)(v4 + 8);
    if (v5 < a2)
    {
      do
      {
        v2 -= v5;
        result = (*(uint64_t (**)(uint64_t))(v4 + 24))(v3);
        v5 = *(_QWORD *)(v4 + 8);
      }
      while (v2 > v5);
    }
    *(_QWORD *)v4 += v2;
    *(_QWORD *)(v4 + 8) = v5 - v2;
  }
  return result;
}

_QWORD *jpeg_mem_src(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *result;

  if (!a2 || !a3)
  {
    v6 = *a1;
    *(_DWORD *)(v6 + 40) = 43;
    (*(void (**)(uint64_t *))v6)(a1);
  }
  result = (_QWORD *)a1[5];
  if (!result)
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))a1[1])(a1, 0, 56);
    a1[5] = (uint64_t)result;
  }
  result[2] = init_mem_source;
  result[3] = fill_mem_input_buffer;
  result[4] = skip_input_data;
  result[5] = jpeg_resync_to_restart;
  result[6] = term_source;
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t fill_mem_input_buffer(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  *(_DWORD *)(v2 + 40) = 123;
  (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(a1, 0xFFFFFFFFLL);
  v3 = (_QWORD *)a1[5];
  *v3 = &fill_mem_input_buffer_mybuffer;
  v3[1] = 2;
  return 1;
}

void jinit_d_coef_controller(uint64_t a1, int a2)
{
  uint64_t (**v4)(uint64_t);
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;

  v4 = (uint64_t (**)(uint64_t))(**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 592) = v4;
  *v4 = start_input_pass;
  v4[2] = start_output_pass;
  v4[27] = 0;
  if (a2)
  {
    if (*(int *)(a1 + 56) >= 1)
    {
      v5 = 0;
      v6 = (unsigned int *)(*(_QWORD *)(a1 + 304) + 28);
      do
      {
        v7 = *(v6 - 4);
        if (*(_DWORD *)(a1 + 316))
          v8 = 3 * v7;
        else
          v8 = v7;
        v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 40);
        v10 = jround_up(*v6, (int)*(v6 - 5));
        v11 = jround_up(v6[1], (int)*(v6 - 4));
        v4[v5++ + 17] = (uint64_t (*)(uint64_t))v9(a1, 1, 1, v10, v11, v8);
        v6 += 24;
      }
      while (v5 < *(int *)(a1 + 56));
    }
    v4[1] = consume_data;
    v4[3] = (uint64_t (*)(uint64_t))decompress_data;
    v12 = (uint64_t (*)(uint64_t))(v4 + 17);
  }
  else
  {
    v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 1280);
    v14 = 0;
    v15 = (int64x2_t)xmmword_2186CF1A0;
    v16 = vdupq_n_s64((unint64_t)v13);
    v17 = vdupq_n_s64(2uLL);
    do
    {
      *(int64x2_t *)&v4[v14 + 7] = vaddq_s64(v16, vshlq_n_s64(v15, 7uLL));
      v15 = vaddq_s64(v15, v17);
      v14 += 2;
    }
    while (v14 != 10);
    if (!*(_DWORD *)(a1 + 568))
      bzero(v13, 0x500uLL);
    v12 = 0;
    v4[1] = (uint64_t (*)(uint64_t))dummy_consume_data;
    v4[3] = (uint64_t (*)(uint64_t))decompress_onepass;
  }
  v4[4] = v12;
}

uint64_t start_input_pass(uint64_t result)
{
  *(_DWORD *)(result + 176) = 0;
  return start_iMCU_row(result);
}

uint64_t start_output_pass(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t (*v11)(uint64_t, uint64_t);

  v1 = result;
  v2 = *(_QWORD **)(result + 592);
  if (v2[4])
  {
    if (*(_DWORD *)(result + 104) && *(_DWORD *)(result + 316) && *(_QWORD *)(result + 192))
    {
      result = v2[27];
      if (!result)
      {
        result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 24 * *(int *)(v1 + 56));
        v2[27] = result;
      }
      if (*(int *)(v1 + 56) >= 1)
      {
        v3 = 0;
        v4 = 0;
        v5 = 0;
        v6 = *(_QWORD *)(v1 + 304);
        while (1)
        {
          v7 = *(_WORD **)(v6 + 80);
          if (!v7)
            break;
          if (!*v7)
            break;
          if (!v7[1])
            break;
          if (!v7[8])
            break;
          if (!v7[16])
            break;
          if (!v7[9])
            break;
          if (!v7[2])
            break;
          v8 = *(_QWORD *)(v1 + 192);
          if ((*(_DWORD *)(v8 + (v4 << 8)) & 0x80000000) != 0)
            break;
          v9 = v8 + v3;
          for (i = 4; i != 24; i += 4)
          {
            *(_DWORD *)(result + i) = *(_DWORD *)(v9 + i);
            if (*(_DWORD *)(v9 + i))
              v5 = 1;
          }
          result += 24;
          ++v4;
          v6 += 96;
          v3 += 256;
          if (v4 >= *(int *)(v1 + 56))
          {
            if (!v5)
              break;
            v11 = decompress_smooth_data;
            goto LABEL_25;
          }
        }
      }
    }
    v11 = decompress_data;
LABEL_25:
    v2[3] = v11;
  }
  *(_DWORD *)(v1 + 184) = 0;
  return result;
}

uint64_t consume_data(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  int v18;
  uint64_t result;
  unsigned int v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *(_DWORD **)(a1 + 592);
  memset(v21, 0, sizeof(v21));
  if (*(int *)(a1 + 448) >= 1)
  {
    v3 = 0;
    do
    {
      *((_QWORD *)v21 + v3) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 8)
                                                                                                  + 64))(a1, *(_QWORD *)&v2[2 * *(int *)(*(_QWORD *)(a1 + 8 * v3 + 456) + 4) + 34], (*(_DWORD *)(*(_QWORD *)(a1 + 8 * v3 + 456) + 12) * *(_DWORD *)(a1 + 176)), *(unsigned int *)(*(_QWORD *)(a1 + 8 * v3 + 456) + 12), 1);
      ++v3;
    }
    while (v3 < *(int *)(a1 + 448));
  }
  v4 = v2[12];
  v5 = (int)v2[11];
  if ((int)v5 >= v4)
  {
LABEL_20:
    v20 = *(_DWORD *)(a1 + 176) + 1;
    *(_DWORD *)(a1 + 176) = v20;
    if (v20 >= *(_DWORD *)(a1 + 432))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 24))(a1);
      return 4;
    }
    else
    {
      start_iMCU_row(a1);
      return 3;
    }
  }
  else
  {
    v6 = v2[10];
    v7 = *(_DWORD *)(a1 + 488);
    while (v6 >= v7)
    {
LABEL_19:
      v6 = 0;
      v2[10] = 0;
      if (++v5 >= v4)
        goto LABEL_20;
    }
    while (1)
    {
      v8 = *(unsigned int *)(a1 + 448);
      if ((int)v8 >= 1)
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = *(_QWORD *)(a1 + 8 * v9 + 456);
          v12 = *(unsigned int *)(v11 + 60);
          if ((int)v12 >= 1)
          {
            v13 = 0;
            v14 = *(_DWORD *)(v11 + 56);
            v15 = *((_QWORD *)v21 + v9);
            do
            {
              if (v14 >= 1)
              {
                v16 = *(_QWORD *)(v15 + 8 * (v13 + v5)) + ((unint64_t)(v14 * v6) << 7);
                v17 = (unint64_t *)&v2[2 * v10 + 14];
                v10 += v14;
                v18 = v14;
                do
                {
                  *v17++ = v16;
                  v16 += 128;
                  --v18;
                }
                while (v18);
              }
              ++v13;
            }
            while (v13 != v12);
          }
          ++v9;
        }
        while (v9 != v8);
      }
      result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)(a1 + 624) + 8))(a1, v2 + 14);
      if (!(_DWORD)result)
        break;
      ++v6;
      v7 = *(_DWORD *)(a1 + 488);
      if (v6 >= v7)
      {
        v4 = v2[12];
        goto LABEL_19;
      }
    }
    v2[10] = v6;
    v2[11] = v5;
  }
  return result;
}

uint64_t decompress_data(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t result;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v19 = *(_QWORD *)(a1 + 592);
  v18 = *(_DWORD *)(a1 + 432) - 1;
  while (1)
  {
    v3 = *(_DWORD *)(a1 + 172);
    v4 = *(_DWORD *)(a1 + 180);
    if (v3 >= v4 && (v3 != v4 || *(_DWORD *)(a1 + 176) > *(_DWORD *)(a1 + 184)))
      break;
    result = (**(uint64_t (***)(uint64_t))(a1 + 608))(a1);
    if (!(_DWORD)result)
      return result;
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    v20 = 0;
    v6 = *(_DWORD **)(a1 + 304);
    do
    {
      if (v6[13])
      {
        v7 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 64))(a1, *(_QWORD *)(v19 + 8 * v20 + 136), (v6[3] * *(_DWORD *)(a1 + 184)), v6[3], 0);
        if (*(_DWORD *)(a1 + 184) >= v18)
          v8 = v6[8] == (v6[8] / v6[3]) * (unint64_t)v6[3]
             ? v6[3]
             : v6[8] - (v6[8] / v6[3]) * (unint64_t)v6[3];
        else
          v8 = v6[3];
        if ((int)v8 >= 1)
        {
          v9 = 0;
          v10 = *(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 632) + 8 * v20 + 8);
          v11 = *(_QWORD *)(a2 + 8 * v20);
          v12 = v6[7];
          do
          {
            if (v12)
            {
              v13 = 0;
              v14 = 0;
              v15 = *(_QWORD *)(v7 + 8 * v9);
              do
              {
                v10(a1, v6, v15, v11, v13);
                v15 += 128;
                v13 = (v6[9] + v13);
                ++v14;
                v12 = v6[7];
              }
              while (v14 < v12);
            }
            v11 += 8 * (int)v6[10];
            ++v9;
          }
          while (v9 != v8);
        }
      }
      v6 += 24;
      ++v20;
    }
    while (v20 < *(int *)(a1 + 56));
  }
  v16 = *(_DWORD *)(a1 + 184) + 1;
  *(_DWORD *)(a1 + 184) = v16;
  if (v16 < *(_DWORD *)(a1 + 432))
    return 3;
  else
    return 4;
}

uint64_t dummy_consume_data()
{
  return 0;
}

uint64_t decompress_onepass(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  unsigned int v4;
  int v5;
  void **v6;
  unsigned int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  void (*v16)(uint64_t, int *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void **v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _DWORD *v29;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;

  v3 = *(_DWORD **)(a1 + 592);
  v4 = *(_DWORD *)(a1 + 432);
  v5 = v3[12];
  v34 = v3[11];
  if (v34 < v5)
  {
    v32 = *(_DWORD *)(a1 + 488) - 1;
    v37 = v4 - 1;
    v6 = (void **)(v3 + 14);
    v7 = v3[10];
    v29 = *(_DWORD **)(a1 + 592);
    while (1)
    {
      if (v7 > v32)
        goto LABEL_33;
      do
      {
        if (*(_DWORD *)(a1 + 568))
          bzero(*v6, (uint64_t)*(int *)(a1 + 496) << 7);
        result = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)(a1 + 624) + 8))(a1, v6);
        if (!(_DWORD)result)
        {
          v29[10] = v7;
          v29[11] = v34;
          return result;
        }
        v9 = *(_DWORD *)(a1 + 448);
        if (v9 >= 1)
        {
          v10 = 0;
          v11 = 0;
          v31 = v7;
          while (1)
          {
            v12 = *(int **)(a1 + 8 * v10 + 456);
            if (v12[13])
              break;
            v11 += v12[16];
LABEL_30:
            if (++v10 >= v9)
              goto LABEL_31;
          }
          v13 = v12[15];
          if (v13 < 1)
            goto LABEL_30;
          v33 = v10;
          v14 = 0;
          v15 = v12[1];
          v16 = *(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 632) + 8 * v15 + 8);
          v17 = 18;
          if (v7 < v32)
            v17 = 14;
          v18 = v12[v17];
          v36 = v12[17] * v7;
          v19 = v12[10];
          v20 = *(_QWORD *)(a2 + 8 * v15) + 8 * v19 * v34;
          v38 = v18;
          if (v18 <= 1)
            v21 = 1;
          else
            v21 = v18;
          v35 = v21;
          while (2)
          {
            if (*(_DWORD *)(a1 + 176) >= v37)
            {
              if (v14 + v34 < v12[19] && v38 >= 1)
                goto LABEL_24;
            }
            else
            {
              if (v38 < 1)
                goto LABEL_27;
LABEL_24:
              v23 = v6;
              v24 = &v6[v11];
              v25 = v35;
              v26 = v36;
              do
              {
                v27 = (uint64_t)*v24++;
                v16(a1, v12, v27, v20, v26);
                v26 = (v12[9] + v26);
                --v25;
              }
              while (v25);
              v19 = v12[10];
              v13 = v12[15];
              v6 = v23;
            }
LABEL_27:
            v11 += v12[14];
            v20 += 8 * v19;
            if (++v14 >= v13)
            {
              v9 = *(_DWORD *)(a1 + 448);
              v7 = v31;
              v10 = v33;
              goto LABEL_30;
            }
            continue;
          }
        }
LABEL_31:
        ++v7;
      }
      while (v7 <= v32);
      v3 = v29;
      v5 = v29[12];
LABEL_33:
      v7 = 0;
      v3[10] = 0;
      if (++v34 >= v5)
      {
        v4 = *(_DWORD *)(a1 + 432);
        break;
      }
    }
  }
  ++*(_DWORD *)(a1 + 184);
  v28 = *(_DWORD *)(a1 + 176) + 1;
  *(_DWORD *)(a1 + 176) = v28;
  if (v28 >= v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 24))(a1);
    return 4;
  }
  else
  {
    start_iMCU_row(a1);
    return 3;
  }
}

uint64_t start_iMCU_row(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 592);
  if (*(int *)(result + 448) < 2)
  {
    v3 = *(_QWORD *)(result + 456);
    if (*(_DWORD *)(result + 176) >= (*(_DWORD *)(result + 432) - 1))
      v2 = *(_DWORD *)(v3 + 76);
    else
      v2 = *(_DWORD *)(v3 + 12);
  }
  else
  {
    v2 = 1;
  }
  *(_DWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t decompress_smooth_data(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int16 *v23;
  __int16 *v24;
  __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  __int16 *v28;
  int v29;
  int v30;
  __int16 *v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  int v91;
  int v92;
  void (*v93)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  __int128 __dst;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  v2 = a1;
  v110 = *MEMORY[0x24BDAC8D0];
  v70 = *(_QWORD *)(a1 + 592);
  v76 = *(_DWORD *)(a1 + 432) - 1;
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  __dst = 0u;
  v103 = 0u;
  while (1)
  {
    v3 = *(_DWORD *)(v2 + 172);
    v4 = *(_DWORD *)(v2 + 180);
    if (v3 > v4)
      break;
    v5 = *(_QWORD *)(v2 + 608);
    if (*(_DWORD *)(v5 + 36))
      break;
    if (v3 == v4)
    {
      v6 = *(_DWORD *)(v2 + 184);
      if (!*(_DWORD *)(v2 + 540))
        ++v6;
      if (*(_DWORD *)(v2 + 176) > v6)
        break;
    }
    result = (*(uint64_t (**)(uint64_t))v5)(v2);
    if (!(_DWORD)result)
      return result;
  }
  if (*(int *)(v2 + 56) >= 1)
  {
    v71 = 0;
    v8 = *(_QWORD *)(v2 + 304);
    v89 = v2;
    while (!*(_DWORD *)(v8 + 52))
    {
LABEL_116:
      v8 += 96;
      if (++v71 >= *(int *)(v2 + 56))
        goto LABEL_117;
    }
    v9 = *(_DWORD *)(v2 + 184);
    if (v9 < v76)
    {
      v10 = *(_DWORD *)(v8 + 12);
      v13 = 2 * v10;
      LODWORD(v12) = v10;
      if (v9)
      {
LABEL_18:
        v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(v2 + 8) + 64))(v2, *(_QWORD *)(v70 + 8 * v71 + 136), v10 * (v9 - 1), v10 + v13, 0)+ 8 * *(int *)(v8 + 12);
        goto LABEL_21;
      }
    }
    else
    {
      v10 = *(_DWORD *)(v8 + 12);
      v11 = *(_DWORD *)(v8 + 32) % v10;
      if (v11)
        v12 = v11;
      else
        v12 = v10;
      v13 = v12;
      if (v9)
        goto LABEL_18;
    }
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v2 + 8) + 64))(v2, *(_QWORD *)(v70 + 8 * v71 + 136), 0, v13, 0);
LABEL_21:
    v72 = (v12 - 1);
    if ((int)v12 >= 1)
    {
      v15 = 0;
      v93 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(v2 + 632) + 8 * v71 + 8);
      v95 = *(_QWORD *)(a2 + 8 * v71);
      v16 = *(unsigned __int16 **)(v8 + 80);
      v17 = v16[2];
      v18 = v16[9];
      v19 = v16[16];
      v90 = (_DWORD *)(*(_QWORD *)(v70 + 216) + 4 * (6 * v71));
      v20 = v16[8];
      v21 = *v16;
      v22 = v16[1];
      v92 = 9 * v21;
      v91 = 36 * v21;
      v87 = v22 << 8;
      v88 = v22 << 7;
      v86 = v20 << 7;
      v85 = v20 << 8;
      v83 = v19 << 8;
      v84 = v19 << 7;
      v81 = v18 << 7;
      v82 = 5 * v21;
      v79 = v17 << 7;
      v80 = v18 << 8;
      v78 = v17 << 8;
      v73 = v12;
      v74 = v14;
      v94 = v8;
      v75 = v9;
      do
      {
        v23 = *(__int16 **)(v14 + 8 * v15);
        v24 = v23;
        if (v9 | v15)
          v24 = *(__int16 **)(v14 + 8 * v15 - 8);
        if (v9 < v76 || (v25 = *(__int16 **)(v14 + 8 * v15), v15 != v72))
          v25 = *(__int16 **)(v14 + 8 * v15 + 8);
        v77 = v15;
        v26 = 0;
        v27 = 0;
        v30 = *v24;
        v28 = v24 + 64;
        v29 = v30;
        v33 = *v25;
        v31 = v25 + 64;
        v32 = v33;
        v34 = *(_DWORD *)(v8 + 28) - 1;
        v35 = v33;
        v99 = *v23;
        v101 = v99;
        v98 = v29;
        v100 = v29;
        do
        {
          v97 = v100;
          v100 = v98;
          v36 = v101;
          v101 = v99;
          v96 = v35;
          v35 = v32;
          jcopy_block_row(v23, &__dst, 1u);
          if (v27 < v34)
          {
            v98 = *v28;
            v99 = v23[64];
            v32 = *v31;
          }
          v37 = v90[1];
          if (v37)
            v38 = WORD1(__dst) == 0;
          else
            v38 = 0;
          if (v38)
          {
            v39 = v91 * (uint64_t)(v36 - v99);
            v40 = (v88 - v39) / v87;
            if (1 << v37 <= (int)v40)
              v41 = (1 << v37) - 1;
            else
              v41 = (v88 - v39) / v87;
            if (v37 > 0)
              LODWORD(v40) = v41;
            if (1 << v37 <= (int)((v39 + v88) / v87))
              v42 = (1 << v37) - 1;
            else
              LOWORD(v42) = (v39 + v88) / v87;
            if (v37 >= 1)
              LOWORD(v43) = v42;
            else
              LOWORD(v43) = (v39 + v88) / v87;
            if (v39 < 0)
              v43 = -(int)v40;
            WORD1(__dst) = v43;
          }
          v44 = v90[2];
          if (v44 && !(_WORD)v103)
          {
            v45 = v91 * (uint64_t)(v100 - v35);
            v46 = (v86 - v45) / v85;
            if (1 << v44 <= (int)v46)
              v47 = (1 << v44) - 1;
            else
              v47 = (v86 - v45) / v85;
            if (v44 > 0)
              LODWORD(v46) = v47;
            if (1 << v44 <= (int)((v45 + v86) / v85))
              v48 = (1 << v44) - 1;
            else
              LOWORD(v48) = (v45 + v86) / v85;
            if (v44 >= 1)
              LOWORD(v49) = v48;
            else
              LOWORD(v49) = (v45 + v86) / v85;
            if (v45 < 0)
              v49 = -(int)v46;
            LOWORD(v103) = v49;
          }
          v50 = v90[3];
          if (v50 && !(_WORD)v104)
          {
            v51 = v92 * (uint64_t)(v100 - 2 * v101 + v35);
            v52 = (v84 - v51) / v83;
            if (1 << v50 <= (int)v52)
              v53 = (1 << v50) - 1;
            else
              v53 = (v84 - v51) / v83;
            if (v50 > 0)
              LODWORD(v52) = v53;
            if (1 << v50 <= (int)((v51 + v84) / v83))
              v54 = (1 << v50) - 1;
            else
              LOWORD(v54) = (v51 + v84) / v83;
            if (v50 >= 1)
              LOWORD(v55) = v54;
            else
              LOWORD(v55) = (v51 + v84) / v83;
            if (v51 < 0)
              v55 = -(int)v52;
            LOWORD(v104) = v55;
          }
          v56 = v90[4];
          if (v56 && !WORD1(v103))
          {
            v57 = v82 * (uint64_t)(v97 - (v96 + v98) + v32);
            v58 = (v81 - v57) / v80;
            if (1 << v56 <= (int)v58)
              v59 = (1 << v56) - 1;
            else
              v59 = (v81 - v57) / v80;
            if (v56 > 0)
              LODWORD(v58) = v59;
            if (1 << v56 <= (int)((v57 + v81) / v80))
              v60 = (1 << v56) - 1;
            else
              LOWORD(v60) = (v57 + v81) / v80;
            if (v56 >= 1)
              LOWORD(v61) = v60;
            else
              LOWORD(v61) = (v57 + v81) / v80;
            if (v57 < 0)
              v61 = -(int)v58;
            WORD1(v103) = v61;
          }
          v62 = v90[5];
          if (v62 && !WORD2(__dst))
          {
            v63 = v92 * (uint64_t)(v36 - 2 * v101 + v99);
            v64 = (v79 - v63) / v78;
            if (1 << v62 <= (int)v64)
              v65 = (1 << v62) - 1;
            else
              v65 = (v79 - v63) / v78;
            if (v62 > 0)
              LODWORD(v64) = v65;
            if (1 << v62 <= (int)((v63 + v79) / v78))
              v66 = (1 << v62) - 1;
            else
              LOWORD(v66) = (v63 + v79) / v78;
            if (v62 >= 1)
              LOWORD(v67) = v66;
            else
              LOWORD(v67) = (v63 + v79) / v78;
            if (v63 < 0)
              v67 = -(int)v64;
            WORD2(__dst) = v67;
          }
          v2 = v89;
          v93(v89, v94, &__dst, v95, v26);
          v23 += 64;
          v26 = (*(_DWORD *)(v94 + 36) + v26);
          ++v27;
          v31 += 64;
          v28 += 64;
        }
        while (v27 <= v34);
        v8 = v94;
        v95 += 8 * *(int *)(v94 + 40);
        v15 = v77 + 1;
        v14 = v74;
        v9 = v75;
      }
      while (v77 + 1 != v73);
    }
    goto LABEL_116;
  }
LABEL_117:
  v68 = *(_DWORD *)(v2 + 184) + 1;
  *(_DWORD *)(v2 + 184) = v68;
  if (v68 < *(_DWORD *)(v2 + 432))
    return 3;
  else
    return 4;
}

double CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/FeatureTypes.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::_Int64FeatureType_default_instance_ = (uint64_t)&off_24D93C048;
  qword_254FFA250 = 0;
  dword_254FFA258 = 0;
  byte_254FFA260 = 1;
  CoreML::Specification::_DoubleFeatureType_default_instance_ = (uint64_t)&off_24D93C0E0;
  qword_254FFA270 = 0;
  dword_254FFA278 = 0;
  byte_254FFA280 = 1;
  CoreML::Specification::_StringFeatureType_default_instance_ = (uint64_t)&off_24D93C178;
  qword_254FFA290 = 0;
  dword_254FFA298 = 0;
  byte_254FFA2A0 = 1;
  CoreML::Specification::_SizeRange_default_instance_ = (uint64_t)&off_24D93C210;
  unk_254FFA2B0 = 0;
  qword_254FFA2B8 = 0;
  unk_254FFA2C0 = 0;
  dword_254FFA2C8 = 0;
  byte_254FFA2D0 = 1;
  CoreML::Specification::_ImageFeatureType_ImageSize_default_instance_ = (uint64_t)&off_24D93C2A8;
  unk_254FFA2E0 = 0;
  dword_254FFA2F8 = 0;
  qword_254FFA2E8 = 0;
  unk_254FFA2F0 = 0;
  byte_254FFA300 = 1;
  CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_ = (uint64_t)&off_24D93C340;
  result = 0.0;
  unk_254FFA310 = 0u;
  unk_254FFA320 = 0u;
  dword_254FFA330 = 0;
  byte_254FFA338 = 1;
  dword_254FFA360 = 0;
  CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_ = (uint64_t)&off_24D93C3D8;
  *(_QWORD *)algn_254FFA348 = 0;
  byte_254FFA368 = 1;
  qword_254FFA3A0 = 0;
  CoreML::Specification::_ImageFeatureType_default_instance_ = (uint64_t)&off_24D93C470;
  *(_QWORD *)algn_254FFA378 = 0;
  dword_254FFA390 = 0;
  qword_254FFA380 = 0;
  unk_254FFA388 = 0;
  byte_254FFA3A8 = 1;
  CoreML::Specification::_ArrayFeatureType_Shape_default_instance_ = (uint64_t)&off_24D93C508;
  *(_QWORD *)algn_254FFA3C8 = 0;
  qword_254FFA3D0 = 0;
  unk_254FFA3D8 = 0;
  dword_254FFA3E4 = 0;
  byte_254FFA3E8 = 1;
  CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_ = (uint64_t)&off_24D93C5A0;
  dword_254FFA418 = 0;
  unk_254FFA408 = 0u;
  unk_254FFA3F8 = 0u;
  byte_254FFA420 = 1;
  CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_ = (uint64_t)&off_24D93C638;
  dword_254FFA450 = 0;
  unk_254FFA440 = 0u;
  unk_254FFA430 = 0u;
  byte_254FFA458 = 1;
  CoreML::Specification::_ArrayFeatureType_default_instance_ = (uint64_t)&off_24D93C6D0;
  *(_QWORD *)algn_254FFA468 = 0;
  qword_254FFA470 = 0;
  unk_254FFA478 = 0;
  dword_254FFA484 = 0;
  dword_254FFA4A0 = 0;
  qword_254FFA498 = 0;
  byte_254FFA4A8 = 1;
  CoreML::Specification::_DictionaryFeatureType_default_instance_ = (uint64_t)&off_24D93C768;
  unk_254FFA4D8 = 0;
  qword_254FFA4E8 = 0;
  byte_254FFA4F0 = 1;
  qword_254FFA528 = 0;
  CoreML::Specification::_SequenceFeatureType_default_instance_ = (uint64_t)&off_24D93C800;
  unk_254FFA510 = 0;
  byte_254FFA530 = 1;
  CoreML::Specification::_FeatureType_default_instance_ = (uint64_t)&off_24D93C898;
  unk_254FFA550 = 0;
  byte_254FFA558 = 0;
  qword_254FFA568 = 0;
  byte_254FFA570 = 1;
  qword_254FFA350 = (uint64_t)&CoreML::Specification::_SizeRange_default_instance_;
  unk_254FFA358 = &CoreML::Specification::_SizeRange_default_instance_;
  qword_254FFA518 = (uint64_t)&CoreML::Specification::_SizeRange_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(CoreML::Specification::protobuf_FeatureTypes_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2183672E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Int64FeatureType *CoreML::Specification::Int64FeatureType::Int64FeatureType(CoreML::Specification::Int64FeatureType *this)
{
  *(_QWORD *)this = &off_24D93C048;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Int64FeatureType *)&CoreML::Specification::_Int64FeatureType_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_218367344(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64FeatureType::~Int64FeatureType(CoreML::Specification::Int64FeatureType *this)
{
  *(_QWORD *)this = &off_24D93C048;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D93C048;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::Int64FeatureType *CoreML::Specification::Int64FeatureType::New(CoreML::Specification::Int64FeatureType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Int64FeatureType *v3;

  v3 = (CoreML::Specification::Int64FeatureType *)operator new();
  CoreML::Specification::Int64FeatureType::Int64FeatureType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Int64FeatureType>(a2, v3);
  return v3;
}

void sub_21836741C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64FeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64FeatureType>);
  return result;
}

uint64_t CoreML::Specification::Int64FeatureType::MergePartialFromCodedStream(CoreML::Specification::Int64FeatureType *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::Int64FeatureType::ByteSizeLong(CoreML::Specification::Int64FeatureType *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::Int64FeatureType::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::Int64FeatureType::IsInitialized(CoreML::Specification::Int64FeatureType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Int64FeatureType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64FeatureType");
}

CoreML::Specification::DoubleFeatureType *CoreML::Specification::DoubleFeatureType::DoubleFeatureType(CoreML::Specification::DoubleFeatureType *this)
{
  *(_QWORD *)this = &off_24D93C0E0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::DoubleFeatureType *)&CoreML::Specification::_DoubleFeatureType_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_21836755C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DoubleFeatureType::~DoubleFeatureType(CoreML::Specification::DoubleFeatureType *this)
{
  *(_QWORD *)this = &off_24D93C0E0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D93C0E0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::DoubleFeatureType *CoreML::Specification::DoubleFeatureType::New(CoreML::Specification::DoubleFeatureType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::DoubleFeatureType *v3;

  v3 = (CoreML::Specification::DoubleFeatureType *)operator new();
  CoreML::Specification::DoubleFeatureType::DoubleFeatureType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleFeatureType>(a2, v3);
  return v3;
}

void sub_218367634(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleFeatureType>);
  return result;
}

uint64_t CoreML::Specification::DoubleFeatureType::MergePartialFromCodedStream(CoreML::Specification::DoubleFeatureType *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::DoubleFeatureType::ByteSizeLong(CoreML::Specification::DoubleFeatureType *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::DoubleFeatureType::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::DoubleFeatureType::IsInitialized(CoreML::Specification::DoubleFeatureType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::DoubleFeatureType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DoubleFeatureType");
}

CoreML::Specification::StringFeatureType *CoreML::Specification::StringFeatureType::StringFeatureType(CoreML::Specification::StringFeatureType *this)
{
  *(_QWORD *)this = &off_24D93C178;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::StringFeatureType *)&CoreML::Specification::_StringFeatureType_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_218367774(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::StringFeatureType::~StringFeatureType(CoreML::Specification::StringFeatureType *this)
{
  *(_QWORD *)this = &off_24D93C178;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D93C178;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::StringFeatureType *CoreML::Specification::StringFeatureType::New(CoreML::Specification::StringFeatureType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::StringFeatureType *v3;

  v3 = (CoreML::Specification::StringFeatureType *)operator new();
  CoreML::Specification::StringFeatureType::StringFeatureType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::StringFeatureType>(a2, v3);
  return v3;
}

void sub_21836784C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::StringFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringFeatureType>);
  return result;
}

uint64_t CoreML::Specification::StringFeatureType::MergePartialFromCodedStream(CoreML::Specification::StringFeatureType *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::StringFeatureType::ByteSizeLong(CoreML::Specification::StringFeatureType *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::StringFeatureType::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::StringFeatureType::IsInitialized(CoreML::Specification::StringFeatureType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::StringFeatureType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringFeatureType");
}

CoreML::Specification::SizeRange *CoreML::Specification::SizeRange::SizeRange(CoreML::Specification::SizeRange *this)
{
  *(_QWORD *)this = &off_24D93C210;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SizeRange *)&CoreML::Specification::_SizeRange_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_218367990(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SizeRange::~SizeRange(CoreML::Specification::SizeRange *this)
{
  *(_QWORD *)this = &off_24D93C210;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D93C210;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::SizeRange *CoreML::Specification::SizeRange::New(CoreML::Specification::SizeRange *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SizeRange *v3;

  v3 = (CoreML::Specification::SizeRange *)operator new();
  CoreML::Specification::SizeRange::SizeRange(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SizeRange>(a2, v3);
  return v3;
}

void sub_218367A68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SizeRange>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SizeRange>);
  return result;
}

uint64_t CoreML::Specification::SizeRange::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::SizeRange::MergePartialFromCodedStream(CoreML::Specification::SizeRange *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v10;
  char *v11;
  unint64_t Varint64Fallback;
  BOOL v13;
  char v14;
  char v15;

  do
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 >= a2[1])
        {
          v6 = 0;
LABEL_6:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_7;
        }
        v6 = *v5;
        if (*v5 < 1)
          goto LABEL_6;
        *a2 = v5 + 1;
        v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_7:
        if (v7 >> 3 != 2)
          break;
        if (v7 != 16)
          goto LABEL_20;
        v11 = *a2;
        if (*a2 >= a2[1] || *v11 < 0)
        {
          Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v15 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v11;
          *a2 = v11 + 1;
        }
        *((_QWORD *)this + 3) = Varint64Fallback;
      }
      if (v7 >> 3 != 1 || v7 != 8)
        break;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        *((_QWORD *)this + 2) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v14 & 1) == 0)
          return 0;
      }
      else
      {
        *((_QWORD *)this + 2) = *v10;
        *a2 = v10 + 1;
      }
    }
LABEL_20:
    if ((_DWORD)v7)
      v13 = (v7 & 7) == 4;
    else
      v13 = 1;
    if (v13)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::SizeRange::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = this;
  v6 = *(_QWORD *)(this + 16);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(_QWORD *)(v5 + 24);
  if (v7)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  return this;
}

unint64_t CoreML::Specification::SizeRange::ByteSizeLong(CoreML::Specification::SizeRange *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1)
    v4 = v3 + 1;
  else
    v4 = 0;
  v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2)
    v4 = v5 + 1;
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::SizeRange::IsInitialized(CoreML::Specification::SizeRange *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SizeRange::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SizeRange");
}

CoreML::Specification::ImageFeatureType_ImageSize *CoreML::Specification::ImageFeatureType_ImageSize::ImageFeatureType_ImageSize(CoreML::Specification::ImageFeatureType_ImageSize *this)
{
  *(_QWORD *)this = &off_24D93C2A8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ImageFeatureType_ImageSize *)&CoreML::Specification::_ImageFeatureType_ImageSize_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_218367CF0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ImageFeatureType_ImageSize::~ImageFeatureType_ImageSize(CoreML::Specification::ImageFeatureType_ImageSize *this)
{
  *(_QWORD *)this = &off_24D93C2A8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D93C2A8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ImageFeatureType_ImageSize *CoreML::Specification::ImageFeatureType_ImageSize::New(CoreML::Specification::ImageFeatureType_ImageSize *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ImageFeatureType_ImageSize *v3;

  v3 = (CoreML::Specification::ImageFeatureType_ImageSize *)operator new();
  CoreML::Specification::ImageFeatureType_ImageSize::ImageFeatureType_ImageSize(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType_ImageSize>(a2, v3);
  return v3;
}

void sub_218367DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType_ImageSize>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_ImageSize>);
  return result;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSize::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSize::MergePartialFromCodedStream(CoreML::Specification::ImageFeatureType_ImageSize *this, char **a2, unsigned int a3)
{
  unint64_t *v4;
  unint64_t *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v11;
  unint64_t v12;
  unint64_t *v13;
  char v15;
  char v16;

  v4 = (unint64_t *)((char *)this + 24);
  v5 = (unint64_t *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_22;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_22;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 16)
          goto LABEL_22;
        v11 = *a2;
        if (*a2 >= a2[1] || *v11 < 0)
        {
          *v4 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0)
            return 0;
        }
        else
        {
          v12 = *v11;
          v13 = v4;
LABEL_21:
          *v13 = v12;
          *a2 = v11 + 1;
        }
      }
      if (v8 >> 3 != 1 || v8 != 8)
        break;
      v11 = *a2;
      if (*a2 < a2[1] && (*v11 & 0x80000000) == 0)
      {
        v12 = *v11;
        v13 = v5;
        goto LABEL_21;
      }
      *v5 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
      if ((v15 & 1) == 0)
        return 0;
    }
LABEL_22:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSize::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = this;
  v6 = *(_QWORD *)(this + 16);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(_QWORD *)(v5 + 24);
  if (v7)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  return this;
}

unint64_t CoreML::Specification::ImageFeatureType_ImageSize::ByteSizeLong(CoreML::Specification::ImageFeatureType_ImageSize *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1)
    v4 = v3 + 1;
  else
    v4 = 0;
  v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2)
    v4 = v5 + 1;
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSize::IsInitialized(CoreML::Specification::ImageFeatureType_ImageSize *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ImageFeatureType_ImageSize::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ImageFeatureType.ImageSize");
}

CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::ImageFeatureType_EnumeratedImageSizes(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  *(_QWORD *)this = &off_24D93C340;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)&CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_218368064(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::~ImageFeatureType_EnumeratedImageSizes(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  *(_QWORD *)this = &off_24D93C340;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::~ImageFeatureType_EnumeratedImageSizes(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::default_instance(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  return &CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_;
}

CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::New(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *v3;

  v3 = (CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)operator new();
  CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::ImageFeatureType_EnumeratedImageSizes(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType_EnumeratedImageSizes>(a2, v3);
  return v3;
}

void sub_218368154(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType_EnumeratedImageSizes>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_EnumeratedImageSizes>);
  return result;
}

uint64_t CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::MergePartialFromCodedStream(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this, char **a2, unsigned int a3)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::ImageFeatureType_ImageSize *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t result;

  v4 = (CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ImageFeatureType_ImageSize>::TypeHandler>(v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::ImageFeatureType_ImageSize::MergePartialFromCodedStream(v11, a2, v15);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::ByteSizeLong(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::ImageFeatureType_ImageSize::ByteSizeLong(*(CoreML::Specification::ImageFeatureType_ImageSize **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

std::string *CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::MergeFrom(std::string *this, const CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  CoreML::Specification::ReverseSeqLayerParams **v6;
  unsigned int *v7;
  int v8;
  int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::ReverseSeqLayerParams **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ImageFeatureType_ImageSize>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

uint64_t CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::IsInitialized(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ImageFeatureType.EnumeratedImageSizes");
}

CoreML::Specification::ImageFeatureType_ImageSizeRange *CoreML::Specification::ImageFeatureType_ImageSizeRange::ImageFeatureType_ImageSizeRange(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  *(_QWORD *)this = &off_24D93C3D8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ImageFeatureType_ImageSizeRange *)&CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2183684CC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ImageFeatureType_ImageSizeRange::~ImageFeatureType_ImageSizeRange(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D93C3D8;
  if (this != (CoreML::Specification::ImageFeatureType_ImageSizeRange *)&CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ImageFeatureType_ImageSizeRange::~ImageFeatureType_ImageSizeRange(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::ImageFeatureType_ImageSizeRange::default_instance(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  return &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_;
}

CoreML::Specification::ImageFeatureType_ImageSizeRange *CoreML::Specification::ImageFeatureType_ImageSizeRange::New(CoreML::Specification::ImageFeatureType_ImageSizeRange *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ImageFeatureType_ImageSizeRange *v3;

  v3 = (CoreML::Specification::ImageFeatureType_ImageSizeRange *)operator new();
  CoreML::Specification::ImageFeatureType_ImageSizeRange::ImageFeatureType_ImageSizeRange(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType_ImageSizeRange>(a2, v3);
  return v3;
}

void sub_2183685E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType_ImageSizeRange>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_ImageSizeRange>);
  return result;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSizeRange::Clear(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSizeRange::MergePartialFromCodedStream(CoreML::Specification::ImageFeatureType_ImageSizeRange *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::SizeRange *v10;
  char *v11;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_21;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_21;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_21;
      v10 = (CoreML::Specification::SizeRange *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = (CoreML::Specification::SizeRange *)operator new();
        CoreML::Specification::SizeRange::SizeRange(v10);
        *((_QWORD *)this + 3) = v10;
      }
LABEL_18:
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v11;
        *a2 = v11 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::SizeRange::MergePartialFromCodedStream(v10, a2, v15);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::SizeRange *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::SizeRange *)operator new();
        CoreML::Specification::SizeRange::SizeRange(v10);
        *((_QWORD *)this + 2) = v10;
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_2183687F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::ImageFeatureType_ImageSizeRange::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (this != &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSizeRange::ByteSizeLong(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  CoreML::Specification::SizeRange *v2;
  unint64_t v3;
  uint64_t v4;
  CoreML::Specification::SizeRange *v5;
  unint64_t v6;

  if (this == (CoreML::Specification::ImageFeatureType_ImageSizeRange *)&CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::SizeRange *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::SizeRange::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::SizeRange *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::SizeRange::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

std::string *CoreML::Specification::ImageFeatureType_ImageSizeRange::MergeFrom(std::string *this, const CoreML::Specification::ImageFeatureType_ImageSizeRange *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::ReverseSeqLayerParams *v5;
  CoreML::Specification::SizeRange *v6;
  const CoreML::Specification::ReverseSeqLayerParams *v7;
  const CoreML::Specification::ReverseSeqLayerParams *v8;
  CoreML::Specification::SizeRange *data;
  const CoreML::Specification::ReverseSeqLayerParams *v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::ImageFeatureType_ImageSizeRange *)&CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_)
  {
    v5 = (const CoreML::Specification::ReverseSeqLayerParams *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::SizeRange *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::SizeRange *)operator new();
        CoreML::Specification::SizeRange::SizeRange(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::ReverseSeqLayerParams *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::ReverseSeqLayerParams *)&CoreML::Specification::_SizeRange_default_instance_;
      this = CoreML::Specification::ReverseSeqLayerParams::MergeFrom((std::string *)v6, v7);
    }
    v8 = (const CoreML::Specification::ReverseSeqLayerParams *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::SizeRange *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::SizeRange *)operator new();
        CoreML::Specification::SizeRange::SizeRange(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::ReverseSeqLayerParams *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::ReverseSeqLayerParams *)&CoreML::Specification::_SizeRange_default_instance_;
      return CoreML::Specification::ReverseSeqLayerParams::MergeFrom((std::string *)data, v10);
    }
  }
  return this;
}

void sub_218368A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSizeRange::IsInitialized(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ImageFeatureType_ImageSizeRange::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ImageFeatureType.ImageSizeRange");
}

CoreML::Specification::ImageFeatureType *CoreML::Specification::ImageFeatureType::ImageFeatureType(CoreML::Specification::ImageFeatureType *this)
{
  *(_QWORD *)this = &off_24D93C470;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ImageFeatureType *)&CoreML::Specification::_ImageFeatureType_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_218368AA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ImageFeatureType::~ImageFeatureType(CoreML::Specification::ImageFeatureType *this)
{
  *(_QWORD *)this = &off_24D93C470;
  if (*((_DWORD *)this + 13))
    CoreML::Specification::ImageFeatureType::clear_SizeFlexibility((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ImageFeatureType::~ImageFeatureType(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::ImageFeatureType::clear_SizeFlexibility(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 52);
  if (v2 == 31 || v2 == 21)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t *CoreML::Specification::ImageFeatureType::default_instance(CoreML::Specification::ImageFeatureType *this)
{
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  return &CoreML::Specification::_ImageFeatureType_default_instance_;
}

CoreML::Specification::ImageFeatureType *CoreML::Specification::ImageFeatureType::New(CoreML::Specification::ImageFeatureType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ImageFeatureType *v3;

  v3 = (CoreML::Specification::ImageFeatureType *)operator new();
  CoreML::Specification::ImageFeatureType::ImageFeatureType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType>(a2, v3);
  return v3;
}

void sub_218368BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40BFDB1307);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType>);
  return result;
}

uint64_t CoreML::Specification::ImageFeatureType::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return CoreML::Specification::ImageFeatureType::clear_SizeFlexibility(this);
}

uint64_t CoreML::Specification::ImageFeatureType::MergePartialFromCodedStream(CoreML::Specification::ImageFeatureType *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  CoreML::Specification::ImageFeatureType_ImageSizeRange *v12;
  char *v14;
  unint64_t v15;
  char *v16;
  int v17;
  CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *v18;
  char *v19;
  unint64_t Varint64Fallback;
  char *v21;
  int VarintSizeAsIntFallback;
  char *v23;
  int v24;
  char v25;
  char v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t result;
  unint64_t v31;
  unsigned int v32;
  unsigned int TagFallback;
  BOOL v34;
  uint64_t Varint32Fallback;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *(unsigned __int8 **)a2;
        v6 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v6)
        {
          v8 = 0;
        }
        else
        {
          v7 = v5 + 1;
          v8 = *v5;
          if ((char)*v5 >= 1)
          {
            *(_QWORD *)a2 = v7;
            v9 = v8 | 0x100000000;
            if ((v9 & 0x100000000) == 0)
              goto LABEL_58;
            goto LABEL_8;
          }
          if ((unint64_t)v7 < v6)
          {
            v10 = *v7;
            if ((v8 & ~v10) >= 0x80)
            {
              *(_QWORD *)a2 = v5 + 2;
              v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
              goto LABEL_8;
            }
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
        v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v9 & 0x100000000) == 0)
          goto LABEL_58;
LABEL_8:
        v11 = v9 >> 3;
        if (v9 >> 3 > 2)
          break;
        if (v11 == 1)
        {
          if (v9 != 8)
            goto LABEL_58;
          v19 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v19 < 0)
          {
            Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v26 & 1) == 0)
              return 0;
          }
          else
          {
            Varint64Fallback = *v19;
            *(_QWORD *)a2 = v19 + 1;
          }
          *((_QWORD *)this + 2) = Varint64Fallback;
        }
        else
        {
          if (v11 != 2 || v9 != 16)
            goto LABEL_58;
          v14 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
          {
            v15 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v25 & 1) == 0)
              return 0;
          }
          else
          {
            v15 = *v14;
            *(_QWORD *)a2 = v14 + 1;
          }
          *((_QWORD *)this + 3) = v15;
        }
      }
      if (v11 != 3)
        break;
      if (v9 != 24)
        goto LABEL_58;
      v16 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v17 = 0;
      }
      else
      {
        v17 = *v16;
        if ((*v16 & 0x80000000) == 0)
        {
          *(_QWORD *)a2 = v16 + 1;
          goto LABEL_66;
        }
      }
      Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v17);
      v17 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_66:
      *((_DWORD *)this + 8) = v17;
    }
    if (v11 == 21)
      break;
    if (v11 == 31 && v9 == 250)
    {
      if (*((_DWORD *)this + 13) == 31)
      {
        v12 = (CoreML::Specification::ImageFeatureType_ImageSizeRange *)*((_QWORD *)this + 5);
      }
      else
      {
        CoreML::Specification::ImageFeatureType::clear_SizeFlexibility((uint64_t)this);
        *((_DWORD *)this + 13) = 31;
        v12 = (CoreML::Specification::ImageFeatureType_ImageSizeRange *)operator new();
        CoreML::Specification::ImageFeatureType_ImageSizeRange::ImageFeatureType_ImageSizeRange(v12);
        *((_QWORD *)this + 5) = v12;
      }
      v21 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v21;
        *(_QWORD *)a2 = v21 + 1;
      }
      v27 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v27 & 0x8000000000000000) != 0)
        return 0;
      v29 = v27;
      result = CoreML::Specification::ImageFeatureType_ImageSizeRange::MergePartialFromCodedStream(v12, (char **)a2, v28);
      if (!(_DWORD)result)
        return result;
LABEL_54:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v29))
        return 0;
    }
    else
    {
LABEL_58:
      if ((_DWORD)v9)
        v34 = (v9 & 7) == 4;
      else
        v34 = 1;
      if (v34)
        return 1;
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
    }
  }
  if (v9 != 170)
    goto LABEL_58;
  if (*((_DWORD *)this + 13) == 21)
  {
    v18 = (CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)*((_QWORD *)this + 5);
  }
  else
  {
    CoreML::Specification::ImageFeatureType::clear_SizeFlexibility((uint64_t)this);
    *((_DWORD *)this + 13) = 21;
    v18 = (CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)operator new();
    CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::ImageFeatureType_EnumeratedImageSizes(v18);
    *((_QWORD *)this + 5) = v18;
  }
  v23 = *(char **)a2;
  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v23 < 0)
  {
    v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v24 < 0)
      return 0;
  }
  else
  {
    v24 = *v23;
    *(_QWORD *)a2 = v23 + 1;
  }
  v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v24);
  if ((v31 & 0x8000000000000000) == 0)
  {
    v29 = v31;
    result = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::MergePartialFromCodedStream(v18, (char **)a2, v32);
    if (!(_DWORD)result)
      return result;
    goto LABEL_54;
  }
  return 0;
}

void sub_218368F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ImageFeatureType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  signed int v8;
  int v9;

  v5 = this;
  v6 = *(_QWORD *)(this + 16);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = *(_QWORD *)(v5 + 24);
  if (v7)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  v8 = *(_DWORD *)(v5 + 32);
  if (v8)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(3, v8, a2, a4);
  v9 = *(_DWORD *)(v5 + 52);
  if (v9 == 21)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x15, *(_QWORD *)(v5 + 40), a2, a4);
    v9 = *(_DWORD *)(v5 + 52);
  }
  if (v9 == 31)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F, *(_QWORD *)(v5 + 40), a2, a4);
  return this;
}

unint64_t CoreML::Specification::ImageFeatureType::ByteSizeLong(CoreML::Specification::ImageFeatureType *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  v4 = (9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6;
  if (v2)
    v5 = v4 + 1;
  else
    v5 = 0;
  v6 = v5 + ((9 * (__clz(v3 | 1) ^ 0x3F) + 73) >> 6);
  if (v3)
    v7 = v6 + 1;
  else
    v7 = v5;
  v8 = *((_DWORD *)this + 8);
  if (v8)
  {
    if (v8 < 0)
      v9 = 11;
    else
      v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v7 += v9;
  }
  v10 = *((_DWORD *)this + 13);
  if (v10 == 31)
  {
    v11 = CoreML::Specification::ImageFeatureType_ImageSizeRange::ByteSizeLong(*((CoreML::Specification::ImageFeatureType_ImageSizeRange **)this
                                                                               + 5));
    goto LABEL_16;
  }
  if (v10 == 21)
  {
    v11 = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::ByteSizeLong(*((CoreML::Specification::ImageFeatureType_EnumeratedImageSizes **)this
                                                                                     + 5));
LABEL_16:
    v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 12) = v7;
  return v7;
}

std::string *CoreML::Specification::ImageFeatureType::MergeFrom(std::string *this, const CoreML::Specification::ImageFeatureType *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *v9;
  CoreML::Specification::ImageFeatureType_ImageSizeRange *v10;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v11;
  const CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *v12;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v13;
  const CoreML::Specification::ImageFeatureType_ImageSizeRange *v14;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    *(_QWORD *)(v3 + 16) = v5;
  v6 = *((_QWORD *)a2 + 3);
  if (v6)
    *(_QWORD *)(v3 + 24) = v6;
  v7 = *((_DWORD *)a2 + 8);
  if (v7)
    *(_DWORD *)(v3 + 32) = v7;
  v8 = *((_DWORD *)a2 + 13);
  if (v8 == 31)
  {
    if (*(_DWORD *)(v3 + 52) == 31)
    {
      v10 = *(CoreML::Specification::ImageFeatureType_ImageSizeRange **)(v3 + 40);
    }
    else
    {
      CoreML::Specification::ImageFeatureType::clear_SizeFlexibility(v3);
      *(_DWORD *)(v3 + 52) = 31;
      v10 = (CoreML::Specification::ImageFeatureType_ImageSizeRange *)operator new();
      v13 = CoreML::Specification::ImageFeatureType_ImageSizeRange::ImageFeatureType_ImageSizeRange(v10);
      *(_QWORD *)(v3 + 40) = v10;
      if (*((_DWORD *)a2 + 13) != 31)
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v13);
        v14 = (const CoreML::Specification::ImageFeatureType_ImageSizeRange *)&CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_;
        return CoreML::Specification::ImageFeatureType_ImageSizeRange::MergeFrom((std::string *)v10, v14);
      }
    }
    v14 = (const CoreML::Specification::ImageFeatureType_ImageSizeRange *)*((_QWORD *)a2 + 5);
    return CoreML::Specification::ImageFeatureType_ImageSizeRange::MergeFrom((std::string *)v10, v14);
  }
  if (v8 == 21)
  {
    if (*(_DWORD *)(v3 + 52) == 21)
    {
      v9 = *(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes **)(v3 + 40);
    }
    else
    {
      CoreML::Specification::ImageFeatureType::clear_SizeFlexibility(v3);
      *(_DWORD *)(v3 + 52) = 21;
      v9 = (CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)operator new();
      v11 = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::ImageFeatureType_EnumeratedImageSizes(v9);
      *(_QWORD *)(v3 + 40) = v9;
      if (*((_DWORD *)a2 + 13) != 21)
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v11);
        v12 = (const CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)&CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_;
        return CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::MergeFrom((std::string *)v9, v12);
      }
    }
    v12 = (const CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)*((_QWORD *)a2 + 5);
    return CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::MergeFrom((std::string *)v9, v12);
  }
  return this;
}

void sub_2183692AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ImageFeatureType::IsInitialized(CoreML::Specification::ImageFeatureType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ImageFeatureType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ImageFeatureType");
}

CoreML::Specification::ArrayFeatureType_Shape *CoreML::Specification::ArrayFeatureType_Shape::ArrayFeatureType_Shape(CoreML::Specification::ArrayFeatureType_Shape *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D93C508;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::ArrayFeatureType_Shape *)&CoreML::Specification::_ArrayFeatureType_Shape_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_218369354(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArrayFeatureType_Shape::~ArrayFeatureType_Shape(CoreML::Specification::ArrayFeatureType_Shape *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D93C508;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ArrayFeatureType_Shape::~ArrayFeatureType_Shape(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ArrayFeatureType_Shape *CoreML::Specification::ArrayFeatureType_Shape::New(CoreML::Specification::ArrayFeatureType_Shape *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ArrayFeatureType_Shape *v3;

  v3 = (CoreML::Specification::ArrayFeatureType_Shape *)operator new();
  CoreML::Specification::ArrayFeatureType_Shape::ArrayFeatureType_Shape(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType_Shape>(a2, v3);
  return v3;
}

void sub_21836943C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType_Shape>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_Shape>);
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType_Shape::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_Shape::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType_Shape *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  char *v14;
  unint64_t v15;
  unint64_t Varint64Fallback;
  char v17;
  signed int v18;
  uint64_t v19;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        v7 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0)
                return 0;
              v15 = Varint64Fallback;
            }
            else
            {
              v15 = *v14;
              *a2 = v14 + 1;
            }
            v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              v18 = *v5;
            }
            v19 = *((_QWORD *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(_QWORD *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ArrayFeatureType_Shape::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_Shape::ByteSizeLong(CoreML::Specification::ArrayFeatureType_Shape *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    v2 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_10;
  }
  v2 = 0;
  v3 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2)
    goto LABEL_8;
  if ((v2 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_10:
  v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::ArrayFeatureType_Shape::IsInitialized(CoreML::Specification::ArrayFeatureType_Shape *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ArrayFeatureType_Shape::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArrayFeatureType.Shape");
}

CoreML::Specification::ArrayFeatureType_EnumeratedShapes *CoreML::Specification::ArrayFeatureType_EnumeratedShapes::ArrayFeatureType_EnumeratedShapes(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  *(_QWORD *)this = &off_24D93C5A0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)&CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_2183698C0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArrayFeatureType_EnumeratedShapes::~ArrayFeatureType_EnumeratedShapes(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  *(_QWORD *)this = &off_24D93C5A0;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ArrayFeatureType_EnumeratedShapes::~ArrayFeatureType_EnumeratedShapes(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::ArrayFeatureType_EnumeratedShapes::default_instance(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  return &CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
}

CoreML::Specification::ArrayFeatureType_EnumeratedShapes *CoreML::Specification::ArrayFeatureType_EnumeratedShapes::New(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ArrayFeatureType_EnumeratedShapes *v3;

  v3 = (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)operator new();
  CoreML::Specification::ArrayFeatureType_EnumeratedShapes::ArrayFeatureType_EnumeratedShapes(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType_EnumeratedShapes>(a2, v3);
  return v3;
}

void sub_2183699B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType_EnumeratedShapes>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_EnumeratedShapes>);
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType_EnumeratedShapes::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_EnumeratedShapes::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this, char **a2, unsigned int a3)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::ArrayFeatureType_Shape *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t result;

  v4 = (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ArrayFeatureType_Shape>::TypeHandler>(v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::ArrayFeatureType_Shape::MergePartialFromCodedStream(v11, a2, v15);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::ArrayFeatureType_EnumeratedShapes::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_EnumeratedShapes::ByteSizeLong(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::ArrayFeatureType_Shape::ByteSizeLong(*(CoreML::Specification::ArrayFeatureType_Shape **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

std::string *CoreML::Specification::ArrayFeatureType_EnumeratedShapes::MergeFrom(std::string *this, const CoreML::Specification::ArrayFeatureType_EnumeratedShapes *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  CoreML::Specification::GLMRegressor_DoubleArray **v6;
  unsigned int *v7;
  int v8;
  int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = (std::string *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ArrayFeatureType_Shape>::TypeHandler>((uint64_t *)&v3->__r_.__value_.__r.__words[2], (CoreML::Specification::GLMRegressor_DoubleArray **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_EnumeratedShapes::IsInitialized(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ArrayFeatureType_EnumeratedShapes::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArrayFeatureType.EnumeratedShapes");
}

CoreML::Specification::ArrayFeatureType_ShapeRange *CoreML::Specification::ArrayFeatureType_ShapeRange::ArrayFeatureType_ShapeRange(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  *(_QWORD *)this = &off_24D93C638;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ArrayFeatureType_ShapeRange *)&CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_218369D38(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArrayFeatureType_ShapeRange::~ArrayFeatureType_ShapeRange(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  *(_QWORD *)this = &off_24D93C638;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ArrayFeatureType_ShapeRange::~ArrayFeatureType_ShapeRange(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  return &CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_;
}

CoreML::Specification::ArrayFeatureType_ShapeRange *CoreML::Specification::ArrayFeatureType_ShapeRange::New(CoreML::Specification::ArrayFeatureType_ShapeRange *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ArrayFeatureType_ShapeRange *v3;

  v3 = (CoreML::Specification::ArrayFeatureType_ShapeRange *)operator new();
  CoreML::Specification::ArrayFeatureType_ShapeRange::ArrayFeatureType_ShapeRange(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType_ShapeRange>(a2, v3);
  return v3;
}

void sub_218369E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType_ShapeRange>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_ShapeRange>);
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType_ShapeRange *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::SizeRange *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SizeRange>::TypeHandler>((uint64_t)v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::SizeRange::MergePartialFromCodedStream(v11, a2, v15);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::ByteSizeLong(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::SizeRange::ByteSizeLong(*(CoreML::Specification::SizeRange **)(*((_QWORD *)this + 4)
                                                                                               + 8 * v3
                                                                                               + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

std::string *CoreML::Specification::ArrayFeatureType_ShapeRange::MergeFrom(std::string *this, const CoreML::Specification::ArrayFeatureType_ShapeRange *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  CoreML::Specification::ReverseSeqLayerParams **v6;
  unsigned int *v7;
  int v8;
  int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::ReverseSeqLayerParams **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SizeRange>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::IsInitialized(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ArrayFeatureType_ShapeRange::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArrayFeatureType.ShapeRange");
}

CoreML::Specification::ArrayFeatureType *CoreML::Specification::ArrayFeatureType::ArrayFeatureType(CoreML::Specification::ArrayFeatureType *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D93C6D0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void sub_21836A1B0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArrayFeatureType::~ArrayFeatureType(CoreML::Specification::ArrayFeatureType *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D93C6D0;
  if (*((_DWORD *)this + 15))
    CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
  if (*((_DWORD *)this + 16))
    *((_DWORD *)this + 16) = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ArrayFeatureType::~ArrayFeatureType(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 60);
  if (v2 == 31 || v2 == 21)
  {
    this = *(_QWORD *)(this + 40);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 60) = 0;
  return this;
}

uint64_t *CoreML::Specification::ArrayFeatureType::default_instance(CoreML::Specification::ArrayFeatureType *this)
{
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  return &CoreML::Specification::_ArrayFeatureType_default_instance_;
}

CoreML::Specification::ArrayFeatureType *CoreML::Specification::ArrayFeatureType::New(CoreML::Specification::ArrayFeatureType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ArrayFeatureType *v3;

  v3 = (CoreML::Specification::ArrayFeatureType *)operator new();
  CoreML::Specification::ArrayFeatureType::ArrayFeatureType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType>(a2, v3);
  return v3;
}

void sub_21836A320(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4053416F99);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType>);
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType::Clear(CoreML::Specification::ArrayFeatureType *this)
{
  uint64_t result;

  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = 0;
  result = CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
  *((_DWORD *)this + 16) = 0;
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  BOOL v12;
  unsigned int TagFallback;
  unsigned int v14;
  char *v15;
  int v16;
  CoreML::Specification::ArrayFeatureType_EnumeratedShapes *v17;
  unint64_t *v18;
  unint64_t v19;
  CoreML::Specification::ArrayFeatureType_ShapeRange *v20;
  char *v21;
  int VarintSizeAsIntFallback;
  char *v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t result;
  unint64_t v35;
  unsigned int v36;
  int v37;
  char *v38;
  unint64_t v39;
  unint64_t Varint64Fallback;
  char v41;
  signed int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t Varint32Fallback;
  unsigned int v46;
  unint64_t v47;

  v5 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *(unsigned __int8 **)a2;
        v7 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v7)
        {
          v9 = 0;
LABEL_16:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0)
            goto LABEL_9;
          goto LABEL_17;
        }
        v8 = v6 + 1;
        v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(_QWORD *)a2 = v6 + 2;
              v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_17;
            }
          }
          goto LABEL_16;
        }
        *(_QWORD *)a2 = v8;
        v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0)
          goto LABEL_9;
LABEL_17:
        v14 = v10 >> 3;
        if (v10 >> 3 > 0x1E)
          break;
        if (v14 == 1)
        {
          if (v10 == 8)
          {
            if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, a2, (uint64_t)v5) & 1) == 0)return 0;
          }
          else
          {
            if (v10 != 10)
              goto LABEL_9;
            v21 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v21 < 0)
            {
              VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0)
                return 0;
            }
            else
            {
              VarintSizeAsIntFallback = *v21;
              *(_QWORD *)a2 = v21 + 1;
            }
            v37 = _tc_google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
            if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2) >= 1)
            {
              do
              {
                v38 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v38 < 0)
                {
                  Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
                  if ((v41 & 1) == 0)
                    return 0;
                  v39 = Varint64Fallback;
                }
                else
                {
                  v39 = *v38;
                  *(_QWORD *)a2 = v38 + 1;
                }
                v42 = *((_DWORD *)this + 4);
                if (v42 == *((_DWORD *)this + 5))
                {
                  _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v42 + 1);
                  v42 = *v5;
                }
                v43 = *((_QWORD *)this + 3);
                *((_DWORD *)this + 4) = v42 + 1;
                *(_QWORD *)(v43 + 8 * v42 + 8) = v39;
              }
              while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2) > 0);
            }
            _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v37);
          }
        }
        else if (v14 == 2)
        {
          if (v10 != 16)
            goto LABEL_9;
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
          {
            v24 = 0;
          }
          else
          {
            v24 = *v23;
            if ((*v23 & 0x80000000) == 0)
            {
              *(_QWORD *)a2 = v23 + 1;
              goto LABEL_90;
            }
          }
          Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
          v24 = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
LABEL_90:
          *((_DWORD *)this + 9) = v24;
        }
        else if (v14 == 21 && v10 == 170)
        {
          if (*((_DWORD *)this + 15) == 21)
          {
            v17 = (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)*((_QWORD *)this + 5);
          }
          else
          {
            CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
            *((_DWORD *)this + 15) = 21;
            v17 = (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)operator new();
            CoreML::Specification::ArrayFeatureType_EnumeratedShapes::ArrayFeatureType_EnumeratedShapes(v17);
            *((_QWORD *)this + 5) = v17;
          }
          v27 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v27 < 0)
          {
            v28 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v28 < 0)
              return 0;
          }
          else
          {
            v28 = *v27;
            *(_QWORD *)a2 = v27 + 1;
          }
          v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v28);
          if ((v31 & 0x8000000000000000) != 0)
            return 0;
          v33 = v31;
          result = CoreML::Specification::ArrayFeatureType_EnumeratedShapes::MergePartialFromCodedStream(v17, (char **)a2, v32);
          if (!(_DWORD)result)
            return result;
LABEL_70:
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v33))
            return 0;
        }
        else
        {
LABEL_9:
          if ((_DWORD)v10)
            v12 = (v10 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)return 0;
        }
      }
      if (v10 >> 3 <= 0x32)
        break;
      if (v14 == 51)
      {
        if (v10 != 157)
          goto LABEL_9;
        *((_DWORD *)this + 16) = 0;
        v46 = 0;
        v25 = *(unsigned int **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 4)
        {
          result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v46);
          if (!(_DWORD)result)
            return result;
          v26 = v46;
        }
        else
        {
          v26 = *v25;
          *(_QWORD *)a2 = v25 + 1;
        }
        *((_DWORD *)this + 12) = v26;
        *((_DWORD *)this + 16) = 51;
      }
      else
      {
        if (v14 != 61 || v10 != 233)
          goto LABEL_9;
        *((_DWORD *)this + 16) = 0;
        v47 = 0;
        v18 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
        {
          result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v47);
          if (!(_DWORD)result)
            return result;
          v19 = v47;
        }
        else
        {
          v19 = *v18;
          *(_QWORD *)a2 = v18 + 1;
        }
        *((_QWORD *)this + 6) = v19;
        *((_DWORD *)this + 16) = 61;
      }
    }
    if (v14 == 31)
      break;
    if (v14 != 41 || v10 != 72)
      goto LABEL_9;
    *((_DWORD *)this + 16) = 0;
    v15 = *(char **)a2;
    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
    {
      v16 = 0;
    }
    else
    {
      v16 = *v15;
      if ((*v15 & 0x80000000) == 0)
      {
        *(_QWORD *)a2 = v15 + 1;
        goto LABEL_85;
      }
    }
    v44 = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v16);
    v16 = v44;
    if (v44 < 0)
      return 0;
LABEL_85:
    *((_DWORD *)this + 12) = v16;
    *((_DWORD *)this + 16) = 41;
  }
  if (v10 != 250)
    goto LABEL_9;
  if (*((_DWORD *)this + 15) == 31)
  {
    v20 = (CoreML::Specification::ArrayFeatureType_ShapeRange *)*((_QWORD *)this + 5);
  }
  else
  {
    CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
    *((_DWORD *)this + 15) = 31;
    v20 = (CoreML::Specification::ArrayFeatureType_ShapeRange *)operator new();
    CoreML::Specification::ArrayFeatureType_ShapeRange::ArrayFeatureType_ShapeRange(v20);
    *((_QWORD *)this + 5) = v20;
  }
  v29 = *(char **)a2;
  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v29 < 0)
  {
    v30 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v30 < 0)
      return 0;
  }
  else
  {
    v30 = *v29;
    *(_QWORD *)a2 = v29 + 1;
  }
  v35 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v30);
  if ((v35 & 0x8000000000000000) == 0)
  {
    v33 = v35;
    result = CoreML::Specification::ArrayFeatureType_ShapeRange::MergePartialFromCodedStream(v20, (char **)a2, v36);
    if (!(_DWORD)result)
      return result;
    goto LABEL_70;
  }
  return 0;
}

void sub_21836A890(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ArrayFeatureType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  signed int v21;
  int v22;
  int v23;

  v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (i = 0; i != v13; ++i)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          v16 = *((_QWORD *)a2 + 1);
          if (v15 < 0x80)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * i + 8);
            v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v17 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              v18 = v15 >> 7;
              v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *v17 = v18;
          v20 = (_DWORD)v17 - v16 + 1;
          *((_QWORD *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  v21 = *(_DWORD *)(v5 + 36);
  if (v21)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(2, v21, a2, a4);
  v22 = *(_DWORD *)(v5 + 60);
  if (v22 == 21)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x15, *(_QWORD *)(v5 + 40), a2, a4);
    v22 = *(_DWORD *)(v5 + 60);
  }
  if (v22 == 31)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F, *(_QWORD *)(v5 + 40), a2, a4);
  v23 = *(_DWORD *)(v5 + 64);
  if (v23 == 41)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(41, *(_DWORD *)(v5 + 48), a2, a4);
    v23 = *(_DWORD *)(v5 + 64);
  }
  if (v23 == 51)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)0x33, a2, *(float *)(v5 + 48), a3);
    v23 = *(_DWORD *)(v5 + 64);
  }
  if (v23 == 61)
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0x3D, a2, *(double *)(v5 + 48), a3);
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType::ByteSizeLong(CoreML::Specification::ArrayFeatureType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  v2 = *((unsigned int *)this + 4);
  if ((int)v2 < 1)
  {
    v3 = 0;
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  v3 = 0;
  v4 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v5 = *v4++;
    v3 += (9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6;
    --v2;
  }
  while (v2);
  if (!v3)
    goto LABEL_8;
  if ((v3 & 0x80000000) != 0)
    v6 = 11;
  else
    v6 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_9:
  *((_DWORD *)this + 8) = v3;
  v7 = v6 + v3;
  v8 = *((_DWORD *)this + 9);
  if (v8)
  {
    if (v8 < 0)
      v9 = 11;
    else
      v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v7 += v9;
  }
  v10 = *((_DWORD *)this + 15);
  if (v10 == 31)
  {
    v11 = CoreML::Specification::ArrayFeatureType_ShapeRange::ByteSizeLong(*((CoreML::Specification::ArrayFeatureType_ShapeRange **)this
                                                                           + 5));
  }
  else
  {
    if (v10 != 21)
      goto LABEL_19;
    v11 = CoreML::Specification::ArrayFeatureType_EnumeratedShapes::ByteSizeLong(*((CoreML::Specification::ArrayFeatureType_EnumeratedShapes **)this
                                                                                 + 5));
  }
  v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_19:
  v12 = *((_DWORD *)this + 16);
  switch(v12)
  {
    case '=':
      v7 += 10;
      break;
    case '3':
      v7 += 6;
      break;
    case ')':
      v13 = *((_DWORD *)this + 12);
      if (v13 < 0)
        v14 = 12;
      else
        v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 2;
      v7 += v14;
      break;
  }
  *((_DWORD *)this + 14) = v7;
  return v7;
}

uint64_t *CoreML::Specification::ArrayFeatureType::MergeFrom(uint64_t *this, const CoreML::Specification::ArrayFeatureType *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  CoreML::Specification::ArrayFeatureType_EnumeratedShapes *v8;
  CoreML::Specification::ArrayFeatureType_ShapeRange *v9;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v10;
  const CoreML::Specification::ArrayFeatureType_EnumeratedShapes *v11;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v12;
  const CoreML::Specification::ArrayFeatureType_ShapeRange *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 16), *(_DWORD *)(v3 + 16) + v5);
    this = (uint64_t *)memcpy((void *)(*(_QWORD *)(v3 + 24) + 8 * *(int *)(v3 + 16) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 9);
  if (v6)
    *(_DWORD *)(v3 + 36) = v6;
  v7 = *((_DWORD *)a2 + 15);
  if (v7 != 31)
  {
    if (v7 != 21)
      goto LABEL_21;
    if (*(_DWORD *)(v3 + 60) == 21)
    {
      v8 = *(CoreML::Specification::ArrayFeatureType_EnumeratedShapes **)(v3 + 40);
    }
    else
    {
      CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility(v3);
      *(_DWORD *)(v3 + 60) = 21;
      v8 = (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)operator new();
      v10 = CoreML::Specification::ArrayFeatureType_EnumeratedShapes::ArrayFeatureType_EnumeratedShapes(v8);
      *(_QWORD *)(v3 + 40) = v8;
      if (*((_DWORD *)a2 + 15) != 21)
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v10);
        v11 = (const CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)&CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
        goto LABEL_18;
      }
    }
    v11 = (const CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)*((_QWORD *)a2 + 5);
LABEL_18:
    this = (uint64_t *)CoreML::Specification::ArrayFeatureType_EnumeratedShapes::MergeFrom((std::string *)v8, v11);
    goto LABEL_21;
  }
  if (*(_DWORD *)(v3 + 60) == 31)
  {
    v9 = *(CoreML::Specification::ArrayFeatureType_ShapeRange **)(v3 + 40);
  }
  else
  {
    CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility(v3);
    *(_DWORD *)(v3 + 60) = 31;
    v9 = (CoreML::Specification::ArrayFeatureType_ShapeRange *)operator new();
    v12 = CoreML::Specification::ArrayFeatureType_ShapeRange::ArrayFeatureType_ShapeRange(v9);
    *(_QWORD *)(v3 + 40) = v9;
    if (*((_DWORD *)a2 + 15) != 31)
    {
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v12);
      v13 = (const CoreML::Specification::ArrayFeatureType_ShapeRange *)&CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_;
      goto LABEL_20;
    }
  }
  v13 = (const CoreML::Specification::ArrayFeatureType_ShapeRange *)*((_QWORD *)a2 + 5);
LABEL_20:
  this = (uint64_t *)CoreML::Specification::ArrayFeatureType_ShapeRange::MergeFrom((std::string *)v9, v13);
LABEL_21:
  v14 = *((_DWORD *)a2 + 16);
  switch(v14)
  {
    case '=':
      v16 = *((_QWORD *)a2 + 6);
      if (*(_DWORD *)(v3 + 64) != 61)
        *(_DWORD *)(v3 + 64) = 61;
      *(_QWORD *)(v3 + 48) = v16;
      break;
    case '3':
      v17 = *((_DWORD *)a2 + 12);
      if (*(_DWORD *)(v3 + 64) != 51)
        *(_DWORD *)(v3 + 64) = 51;
      *(_DWORD *)(v3 + 48) = v17;
      break;
    case ')':
      v15 = *((_DWORD *)a2 + 12);
      if (*(_DWORD *)(v3 + 64) != 41)
        *(_DWORD *)(v3 + 64) = 41;
      *(_DWORD *)(v3 + 48) = v15;
      break;
  }
  return this;
}

void sub_21836AE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ArrayFeatureType::IsInitialized(CoreML::Specification::ArrayFeatureType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ArrayFeatureType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArrayFeatureType");
}

CoreML::Specification::DictionaryFeatureType *CoreML::Specification::DictionaryFeatureType::DictionaryFeatureType(CoreML::Specification::DictionaryFeatureType *this)
{
  *(_QWORD *)this = &off_24D93C768;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::DictionaryFeatureType *)&CoreML::Specification::_DictionaryFeatureType_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_21836AEF8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DictionaryFeatureType::~DictionaryFeatureType(CoreML::Specification::DictionaryFeatureType *this)
{
  *(_QWORD *)this = &off_24D93C768;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::DictionaryFeatureType::~DictionaryFeatureType(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::DictionaryFeatureType::default_instance(CoreML::Specification::DictionaryFeatureType *this)
{
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  return &CoreML::Specification::_DictionaryFeatureType_default_instance_;
}

CoreML::Specification::DictionaryFeatureType *CoreML::Specification::DictionaryFeatureType::New(CoreML::Specification::DictionaryFeatureType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::DictionaryFeatureType *v3;

  v3 = (CoreML::Specification::DictionaryFeatureType *)operator new();
  CoreML::Specification::DictionaryFeatureType::DictionaryFeatureType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::DictionaryFeatureType>(a2, v3);
  return v3;
}

void sub_21836AFEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DictionaryFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DictionaryFeatureType>);
  return result;
}

uint64_t CoreML::Specification::DictionaryFeatureType::MergePartialFromCodedStream(CoreML::Specification::DictionaryFeatureType *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::Int64FeatureType *v10;
  char *v11;
  int v12;
  CoreML::Specification::StringFeatureType *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t result;
  unint64_t v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_24;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_24;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_24;
      if (*((_DWORD *)this + 7) != 2)
      {
        CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        v13 = (CoreML::Specification::StringFeatureType *)operator new();
        CoreML::Specification::StringFeatureType::StringFeatureType(v13);
        *((_QWORD *)this + 2) = v13;
      }
      v14 = *a2;
      if (*a2 >= a2[1] || *v14 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v14;
        *a2 = v14 + 1;
      }
      v21 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v21 & 0x8000000000000000) != 0)
        return 0;
      v19 = v21;
      result = CoreML::Specification::StringFeatureType::MergePartialFromCodedStream((CoreML::Specification::StringFeatureType *)v21, a2, v22);
      if (!(_DWORD)result)
        return result;
LABEL_37:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19))return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      if (*((_DWORD *)this + 7) != 1)
      {
        CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v10 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::Int64FeatureType::Int64FeatureType(v10);
        *((_QWORD *)this + 2) = v10;
      }
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        v12 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v12 < 0)
          return 0;
      }
      else
      {
        v12 = *v11;
        *a2 = v11 + 1;
      }
      v17 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
      if ((v17 & 0x8000000000000000) != 0)
        return 0;
      v19 = v17;
      result = CoreML::Specification::Int64FeatureType::MergePartialFromCodedStream((CoreML::Specification::Int64FeatureType *)v17, a2, v18);
      if (!(_DWORD)result)
        return result;
      goto LABEL_37;
    }
LABEL_24:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_21836B234(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DictionaryFeatureType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::DictionaryFeatureType::ByteSizeLong(CoreML::Specification::DictionaryFeatureType *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 7);
  if (v1 == 2 || v1 == 1)
  {
    *(_DWORD *)(*((_QWORD *)this + 2) + 16) = 0;
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }
  *((_DWORD *)this + 6) = v2;
  return v2;
}

void CoreML::Specification::DictionaryFeatureType::MergeFrom(CoreML::Specification::DictionaryFeatureType *this, const CoreML::Specification::DictionaryFeatureType *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v7;
  uint64_t *v8;
  uint64_t v9;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 != 2)
  {
    if (v5 != 1)
      return;
    if (*((_DWORD *)this + 7) != 1)
    {
      CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v6 = (uint64_t *)operator new();
      v7 = CoreML::Specification::Int64FeatureType::Int64FeatureType((CoreML::Specification::Int64FeatureType *)v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) != 1)
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v7);
        v8 = &CoreML::Specification::_Int64FeatureType_default_instance_;
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (*((_DWORD *)this + 7) == 2)
  {
LABEL_9:
    v6 = (uint64_t *)*((_QWORD *)this + 2);
LABEL_10:
    v8 = (uint64_t *)*((_QWORD *)a2 + 2);
    goto LABEL_11;
  }
  CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
  *((_DWORD *)this + 7) = 2;
  v6 = (uint64_t *)operator new();
  v10 = CoreML::Specification::StringFeatureType::StringFeatureType((CoreML::Specification::StringFeatureType *)v6);
  *((_QWORD *)this + 2) = v6;
  if (*((_DWORD *)a2 + 7) == 2)
    goto LABEL_10;
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v10);
  v8 = &CoreML::Specification::_StringFeatureType_default_instance_;
LABEL_11:
  v9 = v8[1];
  if ((v9 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v6 + 1, v9 & 0xFFFFFFFFFFFFFFFELL);
}

void sub_21836B424(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DictionaryFeatureType::IsInitialized(CoreML::Specification::DictionaryFeatureType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::DictionaryFeatureType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DictionaryFeatureType");
}

CoreML::Specification::SequenceFeatureType *CoreML::Specification::SequenceFeatureType::SequenceFeatureType(CoreML::Specification::SequenceFeatureType *this)
{
  *(_QWORD *)this = &off_24D93C800;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::SequenceFeatureType *)&CoreML::Specification::_SequenceFeatureType_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_21836B4B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SequenceFeatureType::~SequenceFeatureType(CoreML::Specification::SequenceFeatureType *this)
{
  *(_QWORD *)this = &off_24D93C800;
  CoreML::Specification::SequenceFeatureType::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::SequenceFeatureType::~SequenceFeatureType(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::SequenceFeatureType::SharedDtor(uint64_t *this)
{
  uint64_t v1;

  v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_SequenceFeatureType_default_instance_)
  {
    this = (uint64_t *)this[2];
    if (this)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  if (*(_DWORD *)(v1 + 36))
    return (uint64_t *)CoreML::Specification::SequenceFeatureType::clear_Type(v1);
  return this;
}

uint64_t CoreML::Specification::SequenceFeatureType::clear_Type(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 3 || v2 == 1)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t *CoreML::Specification::SequenceFeatureType::default_instance(CoreML::Specification::SequenceFeatureType *this)
{
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  return &CoreML::Specification::_SequenceFeatureType_default_instance_;
}

CoreML::Specification::SequenceFeatureType *CoreML::Specification::SequenceFeatureType::New(CoreML::Specification::SequenceFeatureType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::SequenceFeatureType *v3;

  v3 = (CoreML::Specification::SequenceFeatureType *)operator new();
  CoreML::Specification::SequenceFeatureType::SequenceFeatureType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::SequenceFeatureType>(a2, v3);
  return v3;
}

void sub_21836B63C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SequenceFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SequenceFeatureType>);
  return result;
}

uint64_t CoreML::Specification::SequenceFeatureType::Clear(CoreML::Specification::SequenceFeatureType *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  return CoreML::Specification::SequenceFeatureType::clear_Type((uint64_t)this);
}

uint64_t CoreML::Specification::SequenceFeatureType::MergePartialFromCodedStream(CoreML::Specification::SequenceFeatureType *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  CoreML::Specification::Int64FeatureType *v13;
  char *v14;
  int v15;
  CoreML::Specification::SizeRange *v16;
  char *v17;
  int VarintSizeAsIntFallback;
  CoreML::Specification::StringFeatureType *v19;
  char *v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t result;
  _tc_google::protobuf::io::CodedInputStream *v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int TagFallback;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v6)
      {
        v8 = 0;
LABEL_47:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
        v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v9 & 0x100000000) == 0)
          goto LABEL_48;
        goto LABEL_8;
      }
      v7 = v5 + 1;
      v8 = *v5;
      if ((char)*v5 < 1)
      {
        if ((unint64_t)v7 < v6)
        {
          v10 = *v7;
          if ((v8 & ~v10) >= 0x80)
          {
            *(_QWORD *)a2 = v5 + 2;
            v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
            goto LABEL_8;
          }
        }
        goto LABEL_47;
      }
      *(_QWORD *)a2 = v7;
      v9 = v8 | 0x100000000;
      if ((v9 & 0x100000000) == 0)
        goto LABEL_48;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 != 101)
        break;
      if (v9 != 42)
        goto LABEL_48;
      v16 = (CoreML::Specification::SizeRange *)*((_QWORD *)this + 2);
      if (!v16)
      {
        v16 = (CoreML::Specification::SizeRange *)operator new();
        CoreML::Specification::SizeRange::SizeRange(v16);
        *((_QWORD *)this + 2) = v16;
      }
      v17 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v17;
        *(_QWORD *)a2 = v17 + 1;
      }
      v22 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v22 & 0x8000000000000000) != 0)
        return 0;
      v24 = v22;
      result = CoreML::Specification::SizeRange::MergePartialFromCodedStream(v16, (char **)a2, v23);
      if (!(_DWORD)result)
        return result;
      v26 = a2;
      v27 = v24;
LABEL_44:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v26, v27))
        return 0;
    }
    if (v11 == 3)
    {
      if (v9 != 26)
        goto LABEL_48;
      if (*((_DWORD *)this + 9) != 3)
      {
        CoreML::Specification::SequenceFeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 3;
        v19 = (CoreML::Specification::StringFeatureType *)operator new();
        CoreML::Specification::StringFeatureType::StringFeatureType(v19);
        *((_QWORD *)this + 3) = v19;
      }
      v20 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
      {
        v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v21 < 0)
          return 0;
      }
      else
      {
        v21 = *v20;
        *(_QWORD *)a2 = v20 + 1;
      }
      v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v21);
      if ((v31 & 0x8000000000000000) != 0)
        return 0;
      v30 = v31;
      result = CoreML::Specification::StringFeatureType::MergePartialFromCodedStream((CoreML::Specification::StringFeatureType *)v31, (char **)a2, v32);
      if (!(_DWORD)result)
        return result;
      goto LABEL_43;
    }
    if (v11 == 1 && v9 == 10)
    {
      if (*((_DWORD *)this + 9) != 1)
      {
        CoreML::Specification::SequenceFeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        v13 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::Int64FeatureType::Int64FeatureType(v13);
        *((_QWORD *)this + 3) = v13;
      }
      v14 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
      {
        v15 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v15 < 0)
          return 0;
      }
      else
      {
        v15 = *v14;
        *(_QWORD *)a2 = v14 + 1;
      }
      v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v15);
      if ((v28 & 0x8000000000000000) != 0)
        return 0;
      v30 = v28;
      result = CoreML::Specification::Int64FeatureType::MergePartialFromCodedStream((CoreML::Specification::Int64FeatureType *)v28, (char **)a2, v29);
      if (!(_DWORD)result)
        return result;
LABEL_43:
      v26 = a2;
      v27 = v30;
      goto LABEL_44;
    }
LABEL_48:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
  }
}

void sub_21836B994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SequenceFeatureType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 3)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 24), a2, a4);
  if ((uint64_t *)v5 != &CoreML::Specification::_SequenceFeatureType_default_instance_)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, v7, a2, a4);
  }
  return this;
}

CoreML::Specification::SizeRange *CoreML::Specification::SequenceFeatureType::ByteSizeLong(CoreML::Specification::SequenceFeatureType *this)
{
  CoreML::Specification::SizeRange *result;
  unint64_t v3;
  int v4;

  if (this == (CoreML::Specification::SequenceFeatureType *)&CoreML::Specification::_SequenceFeatureType_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::SizeRange *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::SizeRange::ByteSizeLong(result);
      result = (CoreML::Specification::SizeRange *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 2);
    }
  }
  v4 = *((_DWORD *)this + 9);
  if (v4 == 3 || v4 == 1)
  {
    *(_DWORD *)(*((_QWORD *)this + 3) + 16) = 0;
    result = (CoreML::Specification::SizeRange *)((char *)result + 2);
  }
  *((_DWORD *)this + 8) = (_DWORD)result;
  return result;
}

void CoreML::Specification::SequenceFeatureType::MergeFrom(CoreML::Specification::SequenceFeatureType *this, const CoreML::Specification::SequenceFeatureType *a2)
{
  uint64_t v4;
  const CoreML::Specification::ReverseSeqLayerParams *v5;
  CoreML::Specification::SizeRange *v7;
  const CoreML::Specification::ReverseSeqLayerParams *v8;
  int v9;
  uint64_t *v10;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v11;
  uint64_t *v12;
  uint64_t v13;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v14;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::ReverseSeqLayerParams *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::SequenceFeatureType *)&CoreML::Specification::_SequenceFeatureType_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::SizeRange *)*((_QWORD *)this + 2);
    if (!v7)
    {
      v7 = (CoreML::Specification::SizeRange *)operator new();
      CoreML::Specification::SizeRange::SizeRange(v7);
      *((_QWORD *)this + 2) = v7;
      v5 = (const CoreML::Specification::ReverseSeqLayerParams *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::ReverseSeqLayerParams *)&CoreML::Specification::_SizeRange_default_instance_;
    CoreML::Specification::ReverseSeqLayerParams::MergeFrom((std::string *)v7, v8);
  }
  v9 = *((_DWORD *)a2 + 9);
  if (v9 != 3)
  {
    if (v9 != 1)
      return;
    if (*((_DWORD *)this + 9) != 1)
    {
      CoreML::Specification::SequenceFeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v10 = (uint64_t *)operator new();
      v11 = CoreML::Specification::Int64FeatureType::Int64FeatureType((CoreML::Specification::Int64FeatureType *)v10);
      *((_QWORD *)this + 3) = v10;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v11);
        v12 = &CoreML::Specification::_Int64FeatureType_default_instance_;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*((_DWORD *)this + 9) == 3)
  {
LABEL_19:
    v10 = (uint64_t *)*((_QWORD *)this + 3);
LABEL_20:
    v12 = (uint64_t *)*((_QWORD *)a2 + 3);
    goto LABEL_21;
  }
  CoreML::Specification::SequenceFeatureType::clear_Type((uint64_t)this);
  *((_DWORD *)this + 9) = 3;
  v10 = (uint64_t *)operator new();
  v14 = CoreML::Specification::StringFeatureType::StringFeatureType((CoreML::Specification::StringFeatureType *)v10);
  *((_QWORD *)this + 3) = v10;
  if (*((_DWORD *)a2 + 9) == 3)
    goto LABEL_20;
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v14);
  v12 = &CoreML::Specification::_StringFeatureType_default_instance_;
LABEL_21:
  v13 = v12[1];
  if ((v13 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v10 + 1, v13 & 0xFFFFFFFFFFFFFFFELL);
}

void sub_21836BC6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SequenceFeatureType::IsInitialized(CoreML::Specification::SequenceFeatureType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::SequenceFeatureType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SequenceFeatureType");
}

CoreML::Specification::FeatureType *CoreML::Specification::FeatureType::FeatureType(CoreML::Specification::FeatureType *this)
{
  *(_QWORD *)this = &off_24D93C898;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_)
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_21836BD10(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::FeatureType *CoreML::Specification::FeatureType::FeatureType(CoreML::Specification::FeatureType *this, const CoreML::Specification::FeatureType *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v6;
  uint64_t *v7;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v8;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v9;
  CoreML::Specification::ImageFeatureType *v10;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v11;
  const CoreML::Specification::ImageFeatureType *v12;
  CoreML::Specification::ArrayFeatureType *v13;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v14;
  const CoreML::Specification::ArrayFeatureType *v15;
  CoreML::Specification::DictionaryFeatureType *v16;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v17;
  const CoreML::Specification::DictionaryFeatureType *v18;
  CoreML::Specification::SequenceFeatureType *v19;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v20;
  const CoreML::Specification::SequenceFeatureType *v21;
  uint64_t v22;

  *(_QWORD *)this = &off_24D93C898;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_DWORD *)this + 9) = 0;
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v5 = (uint64_t *)operator new();
      v6 = CoreML::Specification::Int64FeatureType::Int64FeatureType((CoreML::Specification::Int64FeatureType *)v5);
      *((_QWORD *)this + 3) = v5;
      if (*((_DWORD *)a2 + 9) == 1)
        goto LABEL_9;
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v6);
      v7 = &CoreML::Specification::_Int64FeatureType_default_instance_;
      goto LABEL_19;
    case 2:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 2;
      v5 = (uint64_t *)operator new();
      v8 = CoreML::Specification::DoubleFeatureType::DoubleFeatureType((CoreML::Specification::DoubleFeatureType *)v5);
      *((_QWORD *)this + 3) = v5;
      if (*((_DWORD *)a2 + 9) == 2)
        goto LABEL_9;
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v8);
      v7 = &CoreML::Specification::_DoubleFeatureType_default_instance_;
      goto LABEL_19;
    case 3:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 3;
      v5 = (uint64_t *)operator new();
      v9 = CoreML::Specification::StringFeatureType::StringFeatureType((CoreML::Specification::StringFeatureType *)v5);
      *((_QWORD *)this + 3) = v5;
      if (*((_DWORD *)a2 + 9) == 3)
      {
LABEL_9:
        v7 = (uint64_t *)*((_QWORD *)a2 + 3);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v9);
        v7 = &CoreML::Specification::_StringFeatureType_default_instance_;
      }
LABEL_19:
      v22 = v7[1];
      if ((v22 & 1) != 0)
        _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v5 + 1, v22 & 0xFFFFFFFFFFFFFFFELL);
      break;
    case 4:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 4;
      v10 = (CoreML::Specification::ImageFeatureType *)operator new();
      v11 = CoreML::Specification::ImageFeatureType::ImageFeatureType(v10);
      *((_QWORD *)this + 3) = v10;
      if (*((_DWORD *)a2 + 9) == 4)
      {
        v12 = (const CoreML::Specification::ImageFeatureType *)*((_QWORD *)a2 + 3);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v11);
        v12 = (const CoreML::Specification::ImageFeatureType *)&CoreML::Specification::_ImageFeatureType_default_instance_;
      }
      CoreML::Specification::ImageFeatureType::MergeFrom((std::string *)v10, v12);
      break;
    case 5:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 5;
      v13 = (CoreML::Specification::ArrayFeatureType *)operator new();
      v14 = CoreML::Specification::ArrayFeatureType::ArrayFeatureType(v13);
      *((_QWORD *)this + 3) = v13;
      if (*((_DWORD *)a2 + 9) == 5)
      {
        v15 = (const CoreML::Specification::ArrayFeatureType *)*((_QWORD *)a2 + 3);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v14);
        v15 = (const CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_;
      }
      CoreML::Specification::ArrayFeatureType::MergeFrom((uint64_t *)v13, v15);
      break;
    case 6:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 6;
      v16 = (CoreML::Specification::DictionaryFeatureType *)operator new();
      v17 = CoreML::Specification::DictionaryFeatureType::DictionaryFeatureType(v16);
      *((_QWORD *)this + 3) = v16;
      if (*((_DWORD *)a2 + 9) == 6)
      {
        v18 = (const CoreML::Specification::DictionaryFeatureType *)*((_QWORD *)a2 + 3);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v17);
        v18 = (const CoreML::Specification::DictionaryFeatureType *)&CoreML::Specification::_DictionaryFeatureType_default_instance_;
      }
      CoreML::Specification::DictionaryFeatureType::MergeFrom(v16, v18);
      break;
    case 7:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 7;
      v19 = (CoreML::Specification::SequenceFeatureType *)operator new();
      v20 = CoreML::Specification::SequenceFeatureType::SequenceFeatureType(v19);
      *((_QWORD *)this + 3) = v19;
      if (*((_DWORD *)a2 + 9) == 7)
      {
        v21 = (const CoreML::Specification::SequenceFeatureType *)*((_QWORD *)a2 + 3);
      }
      else
      {
        CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v20);
        v21 = (const CoreML::Specification::SequenceFeatureType *)&CoreML::Specification::_SequenceFeatureType_default_instance_;
      }
      CoreML::Specification::SequenceFeatureType::MergeFrom(v19, v21);
      break;
    default:
      return this;
  }
  return this;
}

void sub_21836C03C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C40EE95837BLL);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::FeatureType::~FeatureType(CoreML::Specification::FeatureType *this)
{
  *(_QWORD *)this = &off_24D93C898;
  if (*((_DWORD *)this + 9))
    CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::FeatureType::~FeatureType(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::FeatureType::clear_Type(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      this = *(_QWORD *)(this + 24);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

CoreML::Specification::FeatureType *CoreML::Specification::FeatureType::New(CoreML::Specification::FeatureType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::FeatureType *v3;

  v3 = (CoreML::Specification::FeatureType *)operator new();
  CoreML::Specification::FeatureType::FeatureType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureType>(a2, v3);
  return v3;
}

void sub_21836C1F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureType>);
  return result;
}

uint64_t CoreML::Specification::FeatureType::Clear(uint64_t this)
{
  *(_BYTE *)(this + 16) = 0;
  return CoreML::Specification::FeatureType::clear_Type(this);
}

uint64_t CoreML::Specification::FeatureType::MergePartialFromCodedStream(CoreML::Specification::FeatureType *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  CoreML::Specification::Int64FeatureType *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  char *v14;
  unint64_t Varint64Fallback;
  CoreML::Specification::DoubleFeatureType *v16;
  char *v17;
  int v18;
  CoreML::Specification::StringFeatureType *v19;
  char *v20;
  int v21;
  CoreML::Specification::ImageFeatureType *v22;
  CoreML::Specification::ArrayFeatureType *v23;
  CoreML::Specification::DictionaryFeatureType *v24;
  CoreML::Specification::SequenceFeatureType *v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  char *v32;
  int v33;
  char v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t result;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  _tc_google::protobuf::io::CodedInputStream *v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int TagFallback;
  BOOL v55;

  while (1)
  {
LABEL_1:
    v5 = *(unsigned __int8 **)a2;
    v6 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v6)
    {
      v8 = 0;
      goto LABEL_93;
    }
    v7 = v5 + 1;
    v8 = *v5;
    if ((char)*v5 >= 1)
    {
      *(_QWORD *)a2 = v7;
      v9 = v8 | 0x100000000;
      if ((v9 & 0x100000000) != 0)
        goto LABEL_8;
      goto LABEL_94;
    }
    if ((unint64_t)v7 < v6)
    {
      v10 = *v7;
      if ((v8 & ~v10) >= 0x80)
        break;
    }
LABEL_93:
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
    v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v9 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_94:
    if ((_DWORD)v9)
      v55 = (v9 & 7) == 4;
    else
      v55 = 1;
    if (v55)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
  }
  *(_QWORD *)a2 = v5 + 2;
  v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
LABEL_8:
  switch(v9 >> 3)
  {
    case 1u:
      if (v9 != 10)
        goto LABEL_94;
      if (*((_DWORD *)this + 9) != 1)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        v11 = (CoreML::Specification::Int64FeatureType *)operator new();
        CoreML::Specification::Int64FeatureType::Int64FeatureType(v11);
        *((_QWORD *)this + 3) = v11;
      }
      v12 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *(_QWORD *)a2 = v12 + 1;
      }
      v35 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v35 & 0x8000000000000000) != 0)
        return 0;
      v37 = v35;
      result = CoreML::Specification::Int64FeatureType::MergePartialFromCodedStream((CoreML::Specification::Int64FeatureType *)v35, (char **)a2, v36);
      if ((_DWORD)result)
        goto LABEL_73;
      break;
    case 2u:
      if (v9 != 18)
        goto LABEL_94;
      if (*((_DWORD *)this + 9) != 2)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        v16 = (CoreML::Specification::DoubleFeatureType *)operator new();
        CoreML::Specification::DoubleFeatureType::DoubleFeatureType(v16);
        *((_QWORD *)this + 3) = v16;
      }
      v17 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v17 < 0)
      {
        v18 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v18 < 0)
          return 0;
      }
      else
      {
        v18 = *v17;
        *(_QWORD *)a2 = v17 + 1;
      }
      v39 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v18);
      if ((v39 & 0x8000000000000000) != 0)
        return 0;
      v37 = v39;
      result = CoreML::Specification::DoubleFeatureType::MergePartialFromCodedStream((CoreML::Specification::DoubleFeatureType *)v39, (char **)a2, v40);
      if ((_DWORD)result)
        goto LABEL_73;
      break;
    case 3u:
      if (v9 != 26)
        goto LABEL_94;
      if (*((_DWORD *)this + 9) != 3)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 3;
        v19 = (CoreML::Specification::StringFeatureType *)operator new();
        CoreML::Specification::StringFeatureType::StringFeatureType(v19);
        *((_QWORD *)this + 3) = v19;
      }
      v20 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
      {
        v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v21 < 0)
          return 0;
      }
      else
      {
        v21 = *v20;
        *(_QWORD *)a2 = v20 + 1;
      }
      v41 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v21);
      if ((v41 & 0x8000000000000000) != 0)
        return 0;
      v37 = v41;
      result = CoreML::Specification::StringFeatureType::MergePartialFromCodedStream((CoreML::Specification::StringFeatureType *)v41, (char **)a2, v42);
      if ((_DWORD)result)
      {
LABEL_73:
        v43 = a2;
        v44 = v37;
        goto LABEL_90;
      }
      break;
    case 4u:
      if (v9 != 34)
        goto LABEL_94;
      if (*((_DWORD *)this + 9) == 4)
      {
        v22 = (CoreML::Specification::ImageFeatureType *)*((_QWORD *)this + 3);
      }
      else
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 4;
        v22 = (CoreML::Specification::ImageFeatureType *)operator new();
        CoreML::Specification::ImageFeatureType::ImageFeatureType(v22);
        *((_QWORD *)this + 3) = v22;
      }
      v26 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v26 < 0)
      {
        v27 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v27 < 0)
          return 0;
      }
      else
      {
        v27 = *v26;
        *(_QWORD *)a2 = v26 + 1;
      }
      v45 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v27);
      if ((v45 & 0x8000000000000000) != 0)
        return 0;
      v47 = v45;
      result = CoreML::Specification::ImageFeatureType::MergePartialFromCodedStream(v22, a2, v46);
      if ((_DWORD)result)
        goto LABEL_89;
      break;
    case 5u:
      if (v9 != 42)
        goto LABEL_94;
      if (*((_DWORD *)this + 9) == 5)
      {
        v23 = (CoreML::Specification::ArrayFeatureType *)*((_QWORD *)this + 3);
      }
      else
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 5;
        v23 = (CoreML::Specification::ArrayFeatureType *)operator new();
        CoreML::Specification::ArrayFeatureType::ArrayFeatureType(v23);
        *((_QWORD *)this + 3) = v23;
      }
      v28 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v28 < 0)
      {
        v29 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v29 < 0)
          return 0;
      }
      else
      {
        v29 = *v28;
        *(_QWORD *)a2 = v28 + 1;
      }
      v48 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v29);
      if ((v48 & 0x8000000000000000) != 0)
        return 0;
      v47 = v48;
      result = CoreML::Specification::ArrayFeatureType::MergePartialFromCodedStream(v23, a2, v49);
      if ((_DWORD)result)
        goto LABEL_89;
      break;
    case 6u:
      if (v9 != 50)
        goto LABEL_94;
      if (*((_DWORD *)this + 9) == 6)
      {
        v24 = (CoreML::Specification::DictionaryFeatureType *)*((_QWORD *)this + 3);
      }
      else
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 6;
        v24 = (CoreML::Specification::DictionaryFeatureType *)operator new();
        CoreML::Specification::DictionaryFeatureType::DictionaryFeatureType(v24);
        *((_QWORD *)this + 3) = v24;
      }
      v30 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v30 < 0)
      {
        v31 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v31 < 0)
          return 0;
      }
      else
      {
        v31 = *v30;
        *(_QWORD *)a2 = v30 + 1;
      }
      v50 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v31);
      if ((v50 & 0x8000000000000000) != 0)
        return 0;
      v47 = v50;
      result = CoreML::Specification::DictionaryFeatureType::MergePartialFromCodedStream(v24, (char **)a2, v51);
      if ((_DWORD)result)
        goto LABEL_89;
      break;
    case 7u:
      if (v9 != 58)
        goto LABEL_94;
      if (*((_DWORD *)this + 9) == 7)
      {
        v25 = (CoreML::Specification::SequenceFeatureType *)*((_QWORD *)this + 3);
      }
      else
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 7;
        v25 = (CoreML::Specification::SequenceFeatureType *)operator new();
        CoreML::Specification::SequenceFeatureType::SequenceFeatureType(v25);
        *((_QWORD *)this + 3) = v25;
      }
      v32 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v32 < 0)
      {
        v33 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v33 < 0)
          return 0;
      }
      else
      {
        v33 = *v32;
        *(_QWORD *)a2 = v32 + 1;
      }
      v52 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v33);
      if ((v52 & 0x8000000000000000) != 0)
        return 0;
      v47 = v52;
      result = CoreML::Specification::SequenceFeatureType::MergePartialFromCodedStream(v25, a2, v53);
      if ((_DWORD)result)
      {
LABEL_89:
        v43 = a2;
        v44 = v47;
LABEL_90:
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v43, v44))
          goto LABEL_1;
        return 0;
      }
      break;
    default:
      if (v9 >> 3 != 1000 || v9 != 64)
        goto LABEL_94;
      v14 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v14 < 0)
      {
        Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
        if ((v34 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v14;
        *(_QWORD *)a2 = v14 + 1;
      }
      *((_BYTE *)this + 16) = Varint64Fallback != 0;
      goto LABEL_1;
  }
  return result;
}

void sub_21836C844(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 3)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 4)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 5)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 6)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 24), a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 7)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(v5 + 24), a2, a4);
  if (*(_BYTE *)(v5 + 16))
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(1000, 1u, a2, a4);
  return this;
}

uint64_t CoreML::Specification::FeatureType::ByteSizeLong(CoreML::Specification::FeatureType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (*((_BYTE *)this + 16))
    v2 = 3;
  else
    v2 = 0;
  switch(*((_DWORD *)this + 9))
  {
    case 1:
    case 2:
    case 3:
      *(_DWORD *)(*((_QWORD *)this + 3) + 16) = 0;
      v2 += 2;
      break;
    case 4:
      v3 = CoreML::Specification::ImageFeatureType::ByteSizeLong(*((CoreML::Specification::ImageFeatureType **)this + 3));
      goto LABEL_12;
    case 5:
      v3 = CoreML::Specification::ArrayFeatureType::ByteSizeLong(*((CoreML::Specification::ArrayFeatureType **)this + 3));
      goto LABEL_12;
    case 6:
      v4 = *((_QWORD *)this + 3);
      v5 = *(_DWORD *)(v4 + 28);
      if (v5 == 2 || v5 == 1)
      {
        *(_DWORD *)(*(_QWORD *)(v4 + 16) + 16) = 0;
        v6 = 2;
      }
      else
      {
        v6 = 0;
      }
      *(_DWORD *)(v4 + 24) = v6;
      v2 += v6 + 2;
      break;
    case 7:
      v3 = (uint64_t)CoreML::Specification::SequenceFeatureType::ByteSizeLong(*((CoreML::Specification::SequenceFeatureType **)this
                                                                             + 3));
LABEL_12:
      v2 += v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
    default:
      break;
  }
  *((_DWORD *)this + 8) = v2;
  return v2;
}

void CoreML::Specification::FeatureType::MergeFrom(CoreML::Specification::FeatureType *this, const CoreML::Specification::FeatureType *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v6;
  uint64_t *v7;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v8;
  uint64_t v9;
  CoreML::Specification::ImageFeatureType *v10;
  CoreML::Specification::ArrayFeatureType *v11;
  CoreML::Specification::DictionaryFeatureType *v12;
  CoreML::Specification::SequenceFeatureType *v13;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v14;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v15;
  const CoreML::Specification::ImageFeatureType *v16;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v17;
  const CoreML::Specification::ArrayFeatureType *v18;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v19;
  const CoreML::Specification::DictionaryFeatureType *v20;
  CoreML::Specification::protobuf_FeatureTypes_2eproto *v21;
  const CoreML::Specification::SequenceFeatureType *v22;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    *((_BYTE *)this + 16) = 1;
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      if (*((_DWORD *)this + 9) == 1)
        goto LABEL_13;
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v5 = (uint64_t *)operator new();
      v6 = CoreML::Specification::Int64FeatureType::Int64FeatureType((CoreML::Specification::Int64FeatureType *)v5);
      *((_QWORD *)this + 3) = v5;
      if (*((_DWORD *)a2 + 9) == 1)
        goto LABEL_14;
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v6);
      v7 = &CoreML::Specification::_Int64FeatureType_default_instance_;
      goto LABEL_15;
    case 2:
      if (*((_DWORD *)this + 9) == 2)
        goto LABEL_13;
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 2;
      v5 = (uint64_t *)operator new();
      v8 = CoreML::Specification::DoubleFeatureType::DoubleFeatureType((CoreML::Specification::DoubleFeatureType *)v5);
      *((_QWORD *)this + 3) = v5;
      if (*((_DWORD *)a2 + 9) == 2)
        goto LABEL_14;
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v8);
      v7 = &CoreML::Specification::_DoubleFeatureType_default_instance_;
      goto LABEL_15;
    case 3:
      if (*((_DWORD *)this + 9) == 3)
      {
LABEL_13:
        v5 = (uint64_t *)*((_QWORD *)this + 3);
LABEL_14:
        v7 = (uint64_t *)*((_QWORD *)a2 + 3);
        goto LABEL_15;
      }
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 3;
      v5 = (uint64_t *)operator new();
      v14 = CoreML::Specification::StringFeatureType::StringFeatureType((CoreML::Specification::StringFeatureType *)v5);
      *((_QWORD *)this + 3) = v5;
      if (*((_DWORD *)a2 + 9) == 3)
        goto LABEL_14;
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v14);
      v7 = &CoreML::Specification::_StringFeatureType_default_instance_;
LABEL_15:
      v9 = v7[1];
      if ((v9 & 1) != 0)
        _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v5 + 1, v9 & 0xFFFFFFFFFFFFFFFELL);
      return;
    case 4:
      if (*((_DWORD *)this + 9) == 4)
      {
        v10 = (CoreML::Specification::ImageFeatureType *)*((_QWORD *)this + 3);
LABEL_28:
        v16 = (const CoreML::Specification::ImageFeatureType *)*((_QWORD *)a2 + 3);
        goto LABEL_36;
      }
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 4;
      v10 = (CoreML::Specification::ImageFeatureType *)operator new();
      v15 = CoreML::Specification::ImageFeatureType::ImageFeatureType(v10);
      *((_QWORD *)this + 3) = v10;
      if (*((_DWORD *)a2 + 9) == 4)
        goto LABEL_28;
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v15);
      v16 = (const CoreML::Specification::ImageFeatureType *)&CoreML::Specification::_ImageFeatureType_default_instance_;
LABEL_36:
      CoreML::Specification::ImageFeatureType::MergeFrom((std::string *)v10, v16);
      return;
    case 5:
      if (*((_DWORD *)this + 9) == 5)
      {
        v11 = (CoreML::Specification::ArrayFeatureType *)*((_QWORD *)this + 3);
LABEL_30:
        v18 = (const CoreML::Specification::ArrayFeatureType *)*((_QWORD *)a2 + 3);
        goto LABEL_38;
      }
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 5;
      v11 = (CoreML::Specification::ArrayFeatureType *)operator new();
      v17 = CoreML::Specification::ArrayFeatureType::ArrayFeatureType(v11);
      *((_QWORD *)this + 3) = v11;
      if (*((_DWORD *)a2 + 9) == 5)
        goto LABEL_30;
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v17);
      v18 = (const CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_;
LABEL_38:
      CoreML::Specification::ArrayFeatureType::MergeFrom((uint64_t *)v11, v18);
      return;
    case 6:
      if (*((_DWORD *)this + 9) == 6)
      {
        v12 = (CoreML::Specification::DictionaryFeatureType *)*((_QWORD *)this + 3);
LABEL_32:
        v20 = (const CoreML::Specification::DictionaryFeatureType *)*((_QWORD *)a2 + 3);
        goto LABEL_40;
      }
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 6;
      v12 = (CoreML::Specification::DictionaryFeatureType *)operator new();
      v19 = CoreML::Specification::DictionaryFeatureType::DictionaryFeatureType(v12);
      *((_QWORD *)this + 3) = v12;
      if (*((_DWORD *)a2 + 9) == 6)
        goto LABEL_32;
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v19);
      v20 = (const CoreML::Specification::DictionaryFeatureType *)&CoreML::Specification::_DictionaryFeatureType_default_instance_;
LABEL_40:
      CoreML::Specification::DictionaryFeatureType::MergeFrom(v12, v20);
      return;
    case 7:
      if (*((_DWORD *)this + 9) == 7)
      {
        v13 = (CoreML::Specification::SequenceFeatureType *)*((_QWORD *)this + 3);
LABEL_34:
        v22 = (const CoreML::Specification::SequenceFeatureType *)*((_QWORD *)a2 + 3);
        goto LABEL_42;
      }
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 7;
      v13 = (CoreML::Specification::SequenceFeatureType *)operator new();
      v21 = CoreML::Specification::SequenceFeatureType::SequenceFeatureType(v13);
      *((_QWORD *)this + 3) = v13;
      if (*((_DWORD *)a2 + 9) == 7)
        goto LABEL_34;
      CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v21);
      v22 = (const CoreML::Specification::SequenceFeatureType *)&CoreML::Specification::_SequenceFeatureType_default_instance_;
LABEL_42:
      CoreML::Specification::SequenceFeatureType::MergeFrom(v13, v22);
      return;
    default:
      return;
  }
}

void sub_21836CE5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureType::IsInitialized(CoreML::Specification::FeatureType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::FeatureType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FeatureType");
}

CoreML::Specification::Int64FeatureType *CoreML::Specification::Int64FeatureType::New(CoreML::Specification::Int64FeatureType *this)
{
  return CoreML::Specification::Int64FeatureType::New(this, 0);
}

CoreML::Specification::DoubleFeatureType *CoreML::Specification::DoubleFeatureType::New(CoreML::Specification::DoubleFeatureType *this)
{
  return CoreML::Specification::DoubleFeatureType::New(this, 0);
}

CoreML::Specification::StringFeatureType *CoreML::Specification::StringFeatureType::New(CoreML::Specification::StringFeatureType *this)
{
  return CoreML::Specification::StringFeatureType::New(this, 0);
}

CoreML::Specification::SizeRange *CoreML::Specification::SizeRange::New(CoreML::Specification::SizeRange *this)
{
  return CoreML::Specification::SizeRange::New(this, 0);
}

CoreML::Specification::ImageFeatureType_ImageSize *CoreML::Specification::ImageFeatureType_ImageSize::New(CoreML::Specification::ImageFeatureType_ImageSize *this)
{
  return CoreML::Specification::ImageFeatureType_ImageSize::New(this, 0);
}

CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::New(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  return CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::New(this, 0);
}

CoreML::Specification::ImageFeatureType_ImageSizeRange *CoreML::Specification::ImageFeatureType_ImageSizeRange::New(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  return CoreML::Specification::ImageFeatureType_ImageSizeRange::New(this, 0);
}

CoreML::Specification::ImageFeatureType *CoreML::Specification::ImageFeatureType::New(CoreML::Specification::ImageFeatureType *this)
{
  return CoreML::Specification::ImageFeatureType::New(this, 0);
}

CoreML::Specification::ArrayFeatureType_Shape *CoreML::Specification::ArrayFeatureType_Shape::New(CoreML::Specification::ArrayFeatureType_Shape *this)
{
  return CoreML::Specification::ArrayFeatureType_Shape::New(this, 0);
}

CoreML::Specification::ArrayFeatureType_EnumeratedShapes *CoreML::Specification::ArrayFeatureType_EnumeratedShapes::New(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  return CoreML::Specification::ArrayFeatureType_EnumeratedShapes::New(this, 0);
}

CoreML::Specification::ArrayFeatureType_ShapeRange *CoreML::Specification::ArrayFeatureType_ShapeRange::New(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  return CoreML::Specification::ArrayFeatureType_ShapeRange::New(this, 0);
}

CoreML::Specification::ArrayFeatureType *CoreML::Specification::ArrayFeatureType::New(CoreML::Specification::ArrayFeatureType *this)
{
  return CoreML::Specification::ArrayFeatureType::New(this, 0);
}

CoreML::Specification::DictionaryFeatureType *CoreML::Specification::DictionaryFeatureType::New(CoreML::Specification::DictionaryFeatureType *this)
{
  return CoreML::Specification::DictionaryFeatureType::New(this, 0);
}

CoreML::Specification::SequenceFeatureType *CoreML::Specification::SequenceFeatureType::New(CoreML::Specification::SequenceFeatureType *this)
{
  return CoreML::Specification::SequenceFeatureType::New(this, 0);
}

CoreML::Specification::FeatureType *CoreML::Specification::FeatureType::New(CoreML::Specification::FeatureType *this)
{
  return CoreML::Specification::FeatureType::New(this, 0);
}

CoreML::Specification::ImageFeatureType_ImageSize *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ImageFeatureType_ImageSize>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::ImageFeatureType_ImageSize *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    v2 = (int *)*((_QWORD *)this + 2);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *((int *)this + 2);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::ImageFeatureType_ImageSize **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::ImageFeatureType_ImageSize::ImageFeatureType_ImageSize(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ImageFeatureType_ImageSize>);
  }
  else
  {
    Aligned = (CoreML::Specification::ImageFeatureType_ImageSize *)operator new();
    CoreML::Specification::ImageFeatureType_ImageSize::ImageFeatureType_ImageSize(Aligned);
  }
  v7 = *((_QWORD *)this + 2);
  v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_21836D068(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ImageFeatureType_ImageSize>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::ArrayFeatureType_Shape *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ArrayFeatureType_Shape>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::ArrayFeatureType_Shape *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    v2 = (int *)*((_QWORD *)this + 2);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *((int *)this + 2);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::ArrayFeatureType_Shape **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::ArrayFeatureType_Shape::ArrayFeatureType_Shape(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ArrayFeatureType_Shape>);
  }
  else
  {
    Aligned = (CoreML::Specification::ArrayFeatureType_Shape *)operator new();
    CoreML::Specification::ArrayFeatureType_Shape::ArrayFeatureType_Shape(Aligned);
  }
  v7 = *((_QWORD *)this + 2);
  v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_21836D190(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ArrayFeatureType_Shape>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64FeatureType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleFeatureType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringFeatureType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SizeRange>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_ImageSize>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_EnumeratedImageSizes>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ImageFeatureType_ImageSize>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::ReverseSeqLayerParams **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::ReverseSeqLayerParams **v11;
  std::string **v12;
  CoreML::Specification::ReverseSeqLayerParams *v13;
  CoreML::Specification::ReverseSeqLayerParams *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::ReverseSeqLayerParams **v18;
  CoreML::Specification::ImageFeatureType_ImageSize **v19;
  CoreML::Specification::ReverseSeqLayerParams *v20;
  CoreML::Specification::ImageFeatureType_ImageSize *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::ImageFeatureType_ImageSize **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::ImageFeatureType_ImageSize::ImageFeatureType_ImageSize(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ImageFeatureType_ImageSize>);
      }
      else
      {
        Aligned = (CoreML::Specification::ImageFeatureType_ImageSize *)operator new();
        CoreML::Specification::ImageFeatureType_ImageSize::ImageFeatureType_ImageSize(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_21836D33C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_ImageSizeRange>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_Shape>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_EnumeratedShapes>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ArrayFeatureType_Shape>::TypeHandler>(uint64_t *result, CoreML::Specification::GLMRegressor_DoubleArray **a2, CoreML::Specification::GLMRegressor_DoubleArray **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::GLMRegressor_DoubleArray **v11;
  CoreML::Specification::GLMRegressor_DoubleArray **v12;
  CoreML::Specification::GLMRegressor_DoubleArray *v13;
  CoreML::Specification::GLMRegressor_DoubleArray *v14;
  CoreML::Specification::GLMRegressor_DoubleArray *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::GLMRegressor_DoubleArray **v18;
  CoreML::Specification::ArrayFeatureType_Shape **v19;
  CoreML::Specification::GLMRegressor_DoubleArray *v20;
  CoreML::Specification::ArrayFeatureType_Shape *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::ArrayFeatureType_Shape::ArrayFeatureType_Shape(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ArrayFeatureType_Shape>);
      }
      else
      {
        Aligned = (CoreML::Specification::ArrayFeatureType_Shape *)operator new();
        CoreML::Specification::ArrayFeatureType_Shape::ArrayFeatureType_Shape(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_21836D4B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_ShapeRange>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SizeRange>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::ReverseSeqLayerParams **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::ReverseSeqLayerParams **v11;
  std::string **v12;
  CoreML::Specification::ReverseSeqLayerParams *v13;
  CoreML::Specification::ReverseSeqLayerParams *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::ReverseSeqLayerParams **v18;
  CoreML::Specification::SizeRange **v19;
  CoreML::Specification::ReverseSeqLayerParams *v20;
  CoreML::Specification::SizeRange *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::SizeRange **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::SizeRange::SizeRange(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SizeRange>);
      }
      else
      {
        Aligned = (CoreML::Specification::SizeRange *)operator new();
        CoreML::Specification::SizeRange::SizeRange(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_21836D5F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DictionaryFeatureType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SequenceFeatureType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_FeatureTypes_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *jinit_color_deconverter(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t (*v12)(uint64_t, _QWORD *, unsigned int, _BYTE **, int);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t (*v18)(uint64_t, _QWORD *, unsigned int, _QWORD *, int);
  int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  result = (_QWORD *)(**(uint64_t (***)(void))(a1 + 8))();
  v3 = result;
  *(_QWORD *)(a1 + 648) = result;
  *result = start_pass_dcolor;
  v4 = *(_DWORD *)(a1 + 60);
  if (v4 > 7)
    goto LABEL_34;
  if (((1 << v4) & 0xCC) == 0)
  {
    if (((1 << v4) & 0x30) != 0)
    {
      if (*(_DWORD *)(a1 + 56) == 4)
        goto LABEL_5;
      goto LABEL_4;
    }
    if (v4 == 1)
    {
      if (*(_DWORD *)(a1 + 56) == 1)
        goto LABEL_5;
      goto LABEL_4;
    }
LABEL_34:
    if (*(int *)(a1 + 56) > 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (*(_DWORD *)(a1 + 56) != 3)
  {
LABEL_4:
    v5 = *(_QWORD *)a1;
    *(_DWORD *)(v5 + 40) = 11;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))v5)(a1);
  }
LABEL_5:
  if (*(_DWORD *)(a1 + 396) && (*(_DWORD *)(a1 + 60) | 4) != 6)
  {
    v6 = *(_QWORD *)a1;
    *(_DWORD *)(v6 + 40) = 28;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))v6)(a1);
  }
  v7 = *(_DWORD *)(a1 + 64);
  switch(v7)
  {
    case 1:
      *(_DWORD *)(a1 + 144) = 1;
      switch(*(_DWORD *)(a1 + 60))
      {
        case 1:
        case 3:
        case 7:
          v3[1] = grayscale_convert;
          v8 = *(unsigned int *)(a1 + 56);
          if ((int)v8 >= 2)
          {
            v9 = (_DWORD *)(*(_QWORD *)(a1 + 304) + 148);
            v10 = v8 - 1;
            do
            {
              *v9 = 0;
              v9 += 24;
              --v10;
            }
            while (v10);
          }
          goto LABEL_46;
        case 2:
          v17 = *(_DWORD *)(a1 + 396);
          if (v17 == 1)
          {
            v18 = rgb1_gray_convert;
            goto LABEL_54;
          }
          if (!v17)
          {
            v18 = rgb_gray_convert;
LABEL_54:
            v3[1] = v18;
            goto LABEL_56;
          }
          v31 = *(_QWORD *)a1;
          *(_DWORD *)(v31 + 40) = 28;
          (*(void (**)(uint64_t))v31)(a1);
LABEL_56:
          v32 = *(_QWORD *)(a1 + 648);
          result = (_QWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 6144);
          v33 = 0;
          v34 = 0;
          v35 = 0;
          *(_QWORD *)(v32 + 48) = result;
          v36 = 0x8000;
          do
          {
            v37 = &result[v35];
            *v37 = v33;
            ++v35;
            v37[256] = v34;
            v37[512] = v36;
            v36 += 7471;
            v34 += 38470;
            v33 += 19595;
          }
          while (v35 != 256);
LABEL_46:
          if (*(_DWORD *)(a1 + 108))
            v21 = 1;
          else
            v21 = *(_DWORD *)(a1 + 144);
          *(_DWORD *)(a1 + 148) = v21;
          return result;
        default:
          goto LABEL_43;
      }
    case 2:
      *(_DWORD *)(a1 + 144) = 3;
      switch(*(_DWORD *)(a1 + 60))
      {
        case 1:
          v13 = gray_rgb_convert;
          goto LABEL_45;
        case 2:
          v19 = *(_DWORD *)(a1 + 396);
          if (v19 == 1)
            goto LABEL_44;
          if (v19)
            goto LABEL_43;
          goto LABEL_30;
        case 3:
          v12 = ycc_rgb_convert;
          goto LABEL_40;
        case 7:
          v3[1] = ycc_rgb_convert;
          v22 = *(_QWORD **)(a1 + 648);
          v22[2] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
          v22[3] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
          v22[4] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
          result = (_QWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
          v23 = 0;
          v22[5] = result;
          v24 = v22[2];
          v25 = v22[3];
          v26 = -29696512;
          v27 = -23488896;
          v28 = 5806464;
          v29 = 11981184;
          v30 = v22[4];
          do
          {
            *(_DWORD *)(v24 + 4 * v23) = v27 >> 16;
            *(_DWORD *)(v25 + 4 * v23) = v26 >> 16;
            *(_QWORD *)(v30 + 8 * v23) = v29;
            result[v23++] = v28;
            v28 -= 45107;
            v29 -= 93603;
            v26 += 232260;
            v27 += 183763;
          }
          while (v23 != 256);
          goto LABEL_46;
        default:
          goto LABEL_43;
      }
    case 4:
      *(_DWORD *)(a1 + 144) = 4;
      v11 = *(_DWORD *)(a1 + 60);
      if (v11 == 4)
        goto LABEL_25;
      if (v11 != 5)
        goto LABEL_43;
      v12 = ycck_cmyk_convert;
LABEL_40:
      v3[1] = v12;
      result = (_QWORD *)build_ycc_rgb_table(a1);
      goto LABEL_46;
    case 6:
      *(_DWORD *)(a1 + 144) = 3;
      if (*(_DWORD *)(a1 + 60) != 6)
      {
        v15 = *(_QWORD *)a1;
        *(_DWORD *)(v15 + 40) = 28;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))v15)(a1);
      }
      v16 = *(_DWORD *)(a1 + 396);
      if (v16 == 1)
      {
LABEL_44:
        v13 = rgb1_rgb_convert;
      }
      else
      {
        if (v16)
        {
LABEL_43:
          v20 = *(_QWORD *)a1;
          *(_DWORD *)(v20 + 40) = 28;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t))v20)(a1);
          goto LABEL_46;
        }
LABEL_30:
        v13 = rgb_convert;
      }
LABEL_45:
      v3[1] = v13;
      goto LABEL_46;
    default:
      if (v7 != *(_DWORD *)(a1 + 60))
      {
        v14 = *(_QWORD *)a1;
        *(_DWORD *)(v14 + 40) = 28;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))v14)(a1);
      }
      *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 56);
LABEL_25:
      v13 = null_convert;
      goto LABEL_45;
  }
}

char *grayscale_convert(uint64_t a1, char **a2, int a3, uint64_t a4, int a5)
{
  return jcopy_sample_rows(*a2, a3, a4, 0, a5, *(unsigned int *)(a1 + 136));
}

uint64_t rgb_gray_convert(uint64_t result, _QWORD *a2, unsigned int a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  if (a5 >= 1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(result + 648) + 48);
    v6 = *(unsigned int *)(result + 136);
    do
    {
      v8 = (_BYTE *)*a4++;
      v7 = v8;
      if ((_DWORD)v6)
      {
        v9 = *(unsigned __int8 **)(*a2 + 8 * a3);
        v10 = *(unsigned __int8 **)(a2[1] + 8 * a3);
        v11 = *(unsigned __int8 **)(a2[2] + 8 * a3);
        v12 = v6;
        do
        {
          v14 = *v9++;
          v13 = v14;
          v16 = *v10++;
          v15 = v16;
          v17 = *v11++;
          *v7++ = (*(_DWORD *)(v5 + 8 * v15 + 2048)
                 + *(_QWORD *)(v5 + 8 * v13)
                 + *(_DWORD *)(v5 + 8 * v17 + 4096)) >> 16;
          --v12;
        }
        while (v12);
      }
      ++a3;
    }
    while (a5-- >= 2);
  }
  return result;
}

uint64_t rgb1_gray_convert(uint64_t result, _QWORD *a2, unsigned int a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  char *v9;
  unsigned __int8 *v10;
  _BYTE *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unsigned int v16;

  if (a5 >= 1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(result + 648) + 48);
    v6 = *(unsigned int *)(result + 136);
    do
    {
      v8 = (_BYTE *)*a4++;
      v7 = v8;
      if ((_DWORD)v6)
      {
        v9 = *(char **)(*a2 + 8 * a3);
        v10 = *(unsigned __int8 **)(a2[1] + 8 * a3);
        v11 = *(_BYTE **)(a2[2] + 8 * a3);
        v12 = v6;
        do
        {
          v14 = *v9++;
          v13 = v14;
          v16 = *v10++;
          v15 = v16;
          LOBYTE(v16) = *v11++;
          result = v15 ^ 0xFFFFFF80;
          *v7++ = (*(_DWORD *)(v5 + 8 * v15 + 2048)
                 + *(_QWORD *)(v5 + 8 * ((v15 ^ 0x80) + v13))
                 + *(_DWORD *)(v5 + 8 * ((v15 ^ 0x80) + v16) + 4096)) >> 16;
          --v12;
        }
        while (v12);
      }
      ++a3;
    }
    while (a5-- >= 2);
  }
  return result;
}

uint64_t gray_rgb_convert(uint64_t result, _QWORD *a2, unsigned int a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  char v9;

  if (a5 >= 1)
  {
    v5 = *(unsigned int *)(result + 136);
    do
    {
      if ((_DWORD)v5)
      {
        v6 = *(char **)(*a2 + 8 * a3);
        v7 = (_BYTE *)(*a4 + 2);
        v8 = v5;
        do
        {
          v9 = *v6++;
          *v7 = v9;
          *(v7 - 1) = v9;
          *(v7 - 2) = v9;
          v7 += 3;
          --v8;
        }
        while (v8);
      }
      ++a3;
      ++a4;
    }
    while (a5-- >= 2);
  }
  return result;
}

uint64_t ycc_rgb_convert(uint64_t result, _QWORD *a2, unsigned int a3, _BYTE **a4, int a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;

  if (a5 >= 1)
  {
    v5 = *(_QWORD **)(result + 648);
    v6 = *(_QWORD *)(result + 440);
    v7 = v5[2];
    v8 = v5[3];
    v9 = v5[4];
    v10 = v5[5];
    v11 = *(unsigned int *)(result + 136);
    do
    {
      if ((_DWORD)v11)
      {
        v12 = *(unsigned __int8 **)(*a2 + 8 * a3);
        v13 = *(unsigned __int8 **)(a2[1] + 8 * a3);
        v14 = *(unsigned __int8 **)(a2[2] + 8 * a3);
        v15 = *a4;
        result = v11;
        do
        {
          v17 = *v12++;
          v16 = v17;
          v19 = *v13++;
          v18 = v19;
          v20 = *v14++;
          *v15 = *(_BYTE *)(v6 + *(int *)(v7 + 4 * v20) + v16);
          v15[1] = *(_BYTE *)(v6 + v16 + (int)((*(_QWORD *)(v9 + 8 * v20) + *(_QWORD *)(v10 + 8 * v18)) >> 16));
          v15[2] = *(_BYTE *)(v6 + *(int *)(v8 + 4 * v18) + v16);
          v15 += 3;
          --result;
        }
        while (result);
      }
      ++a3;
      ++a4;
      v22 = __OFSUB__(a5, 2);
      v21 = a5 - 2 < 0;
      --a5;
    }
    while (v21 == v22);
  }
  return result;
}

uint64_t build_ycc_rgb_table(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)(a1 + 648);
  v2[2] = (**(uint64_t (***)(void))(a1 + 8))();
  v2[3] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
  v2[4] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  v4 = 0;
  v2[5] = result;
  v5 = v2[2];
  v6 = v2[3];
  v7 = -11728000;
  v8 = -14831872;
  v9 = 5990656;
  v10 = 2919552;
  v11 = v2[4];
  do
  {
    *(_DWORD *)(v5 + 4 * v4) = v7 >> 16;
    *(_DWORD *)(v6 + 4 * v4) = v8 >> 16;
    *(_QWORD *)(v11 + 8 * v4) = v9;
    *(_QWORD *)(result + 8 * v4++) = v10;
    v7 += 91881;
    v8 += 116130;
    v9 -= 46802;
    v10 -= 22553;
  }
  while (v4 != 256);
  return result;
}

uint64_t rgb_convert(uint64_t result, _QWORD *a2, unsigned int a3, _BYTE **a4, int a5)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  if (a5 >= 1)
  {
    v5 = *(unsigned int *)(result + 136);
    do
    {
      if ((_DWORD)v5)
      {
        v6 = *(char **)(*a2 + 8 * a3);
        v7 = *(char **)(a2[1] + 8 * a3);
        v8 = *(char **)(a2[2] + 8 * a3);
        v9 = *a4;
        v10 = v5;
        do
        {
          v11 = *v6++;
          *v9 = v11;
          v12 = *v7++;
          v9[1] = v12;
          v13 = *v8++;
          v9[2] = v13;
          v9 += 3;
          --v10;
        }
        while (v10);
      }
      ++a3;
      ++a4;
    }
    while (a5-- >= 2);
  }
  return result;
}

uint64_t rgb1_rgb_convert(uint64_t result, _QWORD *a2, unsigned int a3, _BYTE **a4, int a5)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  if (a5 >= 1)
  {
    v5 = *(unsigned int *)(result + 136);
    do
    {
      if ((_DWORD)v5)
      {
        v6 = *(char **)(*a2 + 8 * a3);
        v7 = *(char **)(a2[1] + 8 * a3);
        v8 = *(char **)(a2[2] + 8 * a3);
        v9 = *a4;
        v10 = v5;
        do
        {
          v12 = *v6++;
          v11 = v12;
          v14 = *v7++;
          v13 = v14;
          v15 = *v8++;
          *v9 = (v13 + v11) ^ 0x80;
          v9[1] = v13;
          v9[2] = (v15 + v13) ^ 0x80;
          v9 += 3;
          --v10;
        }
        while (v10);
      }
      ++a3;
      ++a4;
    }
    while (a5-- >= 2);
  }
  return result;
}

uint64_t ycck_cmyk_convert(uint64_t result, _QWORD *a2, unsigned int a3, _BYTE **a4, int a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  _BYTE *v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;

  if (a5 >= 1)
  {
    v5 = *(_QWORD **)(result + 648);
    v6 = *(_QWORD *)(result + 440);
    v7 = v5[2];
    v8 = v5[3];
    v9 = v5[4];
    v10 = v5[5];
    v11 = *(unsigned int *)(result + 136);
    do
    {
      if ((_DWORD)v11)
      {
        v12 = *(unsigned __int8 **)(*a2 + 8 * a3);
        v13 = *(unsigned __int8 **)(a2[1] + 8 * a3);
        v14 = *(unsigned __int8 **)(a2[2] + 8 * a3);
        v15 = *(_BYTE **)(a2[3] + 8 * a3);
        result = v11;
        v16 = *a4;
        do
        {
          v18 = *v12++;
          v17 = v18;
          v20 = *v13++;
          v19 = v20;
          v21 = *v14++;
          v17 ^= 0xFFu;
          *v16 = *(_BYTE *)(v6 + v17 - *(_DWORD *)(v7 + 4 * v21));
          v16[1] = *(_BYTE *)(v6 + (int)(v17 - ((*(_QWORD *)(v9 + 8 * v21) + *(_QWORD *)(v10 + 8 * v19)) >> 16)));
          v16[2] = *(_BYTE *)(v6 + v17 - *(_DWORD *)(v8 + 4 * v19));
          LOBYTE(v21) = *v15++;
          v16[3] = v21;
          v16 += 4;
          --result;
        }
        while (result);
      }
      ++a3;
      ++a4;
      v23 = __OFSUB__(a5, 2);
      v22 = a5 - 2 < 0;
      --a5;
    }
    while (v22 == v23);
  }
  return result;
}

uint64_t null_convert(uint64_t result, uint64_t a2, unsigned int a3, uint64_t *a4, int a5)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  char v12;

  if (a5 >= 1)
  {
    v5 = *(_DWORD *)(result + 136);
    v6 = *(unsigned int *)(result + 56);
    v7 = *(_DWORD *)(result + 56);
    do
    {
      if (v7 >= 1)
      {
        v8 = 0;
        do
        {
          if (v5)
          {
            v9 = *a4;
            v10 = *(char **)(*(_QWORD *)(a2 + 8 * v8) + 8 * a3);
            v11 = v5;
            do
            {
              v12 = *v10++;
              *(_BYTE *)(v9 + v8) = v12;
              v9 += (int)v6;
              --v11;
            }
            while (v11);
          }
          ++v8;
        }
        while (v8 != v6);
      }
      ++a3;
      ++a4;
    }
    while (a5-- > 1);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_STGCNUtils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

__n128 jinit_inverse_dct(uint64_t a1)
{
  uint64_t (**v2)(uint64_t);
  __n128 result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _OWORD *v7;

  v2 = (uint64_t (**)(uint64_t))(**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 632) = v2;
  *v2 = start_pass;
  if (*(int *)(a1 + 56) >= 1)
  {
    v4 = 0;
    v5 = v2 + 11;
    v6 = (_QWORD *)(*(_QWORD *)(a1 + 304) + 88);
    do
    {
      v7 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
      *v6 = v7;
      v6 += 12;
      result = 0uLL;
      *v7 = 0u;
      v7[1] = 0u;
      v7[2] = 0u;
      v7[3] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[6] = 0u;
      v7[7] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[10] = 0u;
      v7[11] = 0u;
      v7[12] = 0u;
      v7[13] = 0u;
      v7[14] = 0u;
      v7[15] = 0u;
      *((_DWORD *)v5 + v4++) = -1;
    }
    while (v4 < *(int *)(a1 + 56));
  }
  return result;
}

uint64_t start_pass(uint64_t result)
{
  int *v1;
  uint64_t v2;
  uint64_t (*v3)();
  int v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t (**v19)(int *);
  uint64_t (**v20)(int *);
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint32x4_t *v26;
  uint16x8_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  double v31;
  int v32;
  uint16x8_t v33;
  uint32x4_t v34;
  uint64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  uint32x4_t v38;
  float64x2_t v39;
  float32x4_t *v40;
  uint64_t v41;
  int32x4_t *v42;
  uint16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint64_t (**v49)(int *);
  float64x2_t v50;

  if (*(int *)(result + 56) >= 1)
  {
    v1 = (int *)result;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(result + 632);
    v6 = *(_QWORD *)(result + 304);
    v8 = (float64x2_t)xmmword_2186F9460;
    v7 = (float64x2_t)unk_2186F9470;
    v10 = (float64x2_t)start_pass_aanscalefactor;
    v9 = (float64x2_t)unk_2186F9450;
    __asm { FMOV            V17.2D, #0.125 }
    v50 = _Q17;
    do
    {
      v16 = *(_DWORD *)(v6 + 36);
      v17 = *(_DWORD *)(v6 + 40) + (v16 << 8);
      if (v17 > 1805)
      {
        if (v17 > 3077)
        {
          if (v17 > 3597)
          {
            if (v17 > 4103)
            {
              if (v17 == 4104)
              {
                v4 = 0;
                v3 = (uint64_t (*)())jpeg_idct_16x8;
                goto LABEL_86;
              }
              if (v17 == 4112)
              {
                v4 = 0;
                v3 = (uint64_t (*)())jpeg_idct_16x16;
                goto LABEL_86;
              }
            }
            else
            {
              if (v17 == 3598)
              {
                v4 = 0;
                v3 = (uint64_t (*)())jpeg_idct_14x14;
                goto LABEL_86;
              }
              if (v17 == 3855)
              {
                v4 = 0;
                v3 = (uint64_t (*)())jpeg_idct_15x15;
                goto LABEL_86;
              }
            }
          }
          else if (v17 > 3340)
          {
            if (v17 == 3341)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_13x13;
              goto LABEL_86;
            }
            if (v17 == 3591)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_14x7;
              goto LABEL_86;
            }
          }
          else
          {
            if (v17 == 3078)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_12x6;
              goto LABEL_86;
            }
            if (v17 == 3084)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_12x12;
              goto LABEL_86;
            }
          }
        }
        else if (v17 > 2312)
        {
          if (v17 > 2569)
          {
            if (v17 == 2570)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_10x10;
              goto LABEL_86;
            }
            if (v17 == 2827)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_11x11;
              goto LABEL_86;
            }
          }
          else
          {
            if (v17 == 2313)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_9x9;
              goto LABEL_86;
            }
            if (v17 == 2565)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_10x5;
              goto LABEL_86;
            }
          }
        }
        else if (v17 > 2055)
        {
          if (v17 == 2056)
          {
            v18 = v1[24];
            if (v18 < 3)
            {
              v3 = off_24D93CA88[v18];
              v4 = v1[24];
              goto LABEL_86;
            }
            v20 = *(uint64_t (***)(int *))v1;
            *(_DWORD *)(*(_QWORD *)v1 + 40) = 49;
            goto LABEL_85;
          }
          if (v17 == 2064)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_8x16;
            goto LABEL_86;
          }
        }
        else
        {
          if (v17 == 1806)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_7x14;
            goto LABEL_86;
          }
          if (v17 == 2052)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_8x4;
            goto LABEL_86;
          }
        }
      }
      else if (v17 > 1027)
      {
        if (v17 > 1538)
        {
          if (v17 > 1547)
          {
            if (v17 == 1548)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_6x12;
              goto LABEL_86;
            }
            if (v17 == 1799)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_7x7;
              goto LABEL_86;
            }
          }
          else
          {
            if (v17 == 1539)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_6x3;
              goto LABEL_86;
            }
            if (v17 == 1542)
            {
              v4 = 0;
              v3 = (uint64_t (*)())jpeg_idct_6x6;
              goto LABEL_86;
            }
          }
        }
        else if (v17 > 1284)
        {
          if (v17 == 1285)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_5x5;
            goto LABEL_86;
          }
          if (v17 == 1290)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_5x10;
            goto LABEL_86;
          }
        }
        else
        {
          if (v17 == 1028)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_4x4;
            goto LABEL_86;
          }
          if (v17 == 1032)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_4x8;
            goto LABEL_86;
          }
        }
      }
      else if (v17 > 515)
      {
        if (v17 > 773)
        {
          if (v17 == 774)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_3x6;
            goto LABEL_86;
          }
          if (v17 == 1026)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_4x2;
            goto LABEL_86;
          }
        }
        else
        {
          if (v17 == 516)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_2x4;
            goto LABEL_86;
          }
          if (v17 == 771)
          {
            v4 = 0;
            v3 = (uint64_t (*)())jpeg_idct_3x3;
            goto LABEL_86;
          }
        }
      }
      else if (v17 > 512)
      {
        if (v17 == 513)
        {
          v4 = 0;
          v3 = (uint64_t (*)())jpeg_idct_2x1;
          goto LABEL_86;
        }
        if (v17 == 514)
        {
          v4 = 0;
          v3 = (uint64_t (*)())jpeg_idct_2x2;
          goto LABEL_86;
        }
      }
      else
      {
        if (v17 == 257)
        {
          v4 = 0;
          v3 = (uint64_t (*)())jpeg_idct_1x1;
          goto LABEL_86;
        }
        if (v17 == 258)
        {
          v4 = 0;
          v3 = (uint64_t (*)())jpeg_idct_1x2;
          goto LABEL_86;
        }
      }
      v19 = *(uint64_t (***)(int *))v1;
      *((_DWORD *)v19 + 10) = 7;
      *((_DWORD *)v19 + 11) = v16;
      *(_DWORD *)(*(_QWORD *)v1 + 48) = *(_DWORD *)(v6 + 40);
      v20 = *(uint64_t (***)(int *))v1;
LABEL_85:
      result = (*v20)(v1);
      _Q17 = v50;
      v10 = (float64x2_t)start_pass_aanscalefactor;
      v9 = (float64x2_t)unk_2186F9450;
      v8 = (float64x2_t)xmmword_2186F9460;
      v7 = (float64x2_t)unk_2186F9470;
LABEL_86:
      *(_QWORD *)(v5 + 8 * v2 + 8) = v3;
      if (*(_DWORD *)(v6 + 52))
      {
        v21 = v5 + 4 * v2;
        v23 = *(_DWORD *)(v21 + 88);
        v22 = (int *)(v21 + 88);
        if (v23 != v4)
        {
          v24 = *(_QWORD *)(v6 + 80);
          if (v24)
          {
            *v22 = v4;
            if (v4 == 2)
            {
              v28 = 0;
              v29 = 0;
              v30 = *(_QWORD *)(v6 + 88);
              do
              {
                v31 = *(double *)((char *)&start_pass_aanscalefactor + v28);
                v32 = v29 + 8;
                v33 = *(uint16x8_t *)(v24 + 2 * v29);
                v34 = vmovl_u16(*(uint16x4_t *)v33.i8);
                v35.i64[0] = v34.u32[0];
                v35.i64[1] = v34.u32[1];
                v36 = vcvtq_f64_u64(v35);
                v35.i64[0] = v34.u32[2];
                v35.i64[1] = v34.u32[3];
                v37 = vcvtq_f64_u64(v35);
                v38 = vmovl_high_u16(v33);
                v35.i64[0] = v38.u32[0];
                v35.i64[1] = v38.u32[1];
                v39 = vcvtq_f64_u64(v35);
                v35.i64[0] = v38.u32[2];
                v35.i64[1] = v38.u32[3];
                v40 = (float32x4_t *)(v30 + 4 * v29);
                *v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(vmulq_n_f64(v36, v31), v10), _Q17)), vmulq_f64(vmulq_f64(vmulq_n_f64(v37, v31), v9), _Q17));
                v40[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(vmulq_n_f64(v39, v31), v8), _Q17)), vmulq_f64(vmulq_f64(vmulq_n_f64(vcvtq_f64_u64(v35), v31), v7), _Q17));
                v28 += 8;
                v29 = v32;
              }
              while (v28 != 64);
            }
            else if (v4 == 1)
            {
              v41 = 0;
              v42 = *(int32x4_t **)(v6 + 88);
              do
              {
                v43 = *(uint16x8_t *)(v24 + v41 * 16);
                v44 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8);
                v45 = (int32x4_t)vmovl_high_u16(v43);
                v46 = (int16x8_t)start_pass_aanscales[v41];
                v47 = vmovl_s16(*(int16x4_t *)v46.i8);
                v48 = vmovl_high_s16(v46);
                *v42 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v47.i8, *(int32x2_t *)v44.i8), 0xCuLL), vmull_high_s32(v47, v44), 0xCuLL);
                v42[1] = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v48.i8, *(int32x2_t *)v45.i8), 0xCuLL), vmull_high_s32(v48, v45), 0xCuLL);
                v42 += 2;
                ++v41;
              }
              while (v41 != 8);
            }
            else if (v4)
            {
              v49 = *(uint64_t (***)(int *))v1;
              *((_DWORD *)v49 + 10) = 49;
              result = (*v49)(v1);
              _Q17 = v50;
              v10 = (float64x2_t)start_pass_aanscalefactor;
              v9 = (float64x2_t)unk_2186F9450;
              v8 = (float64x2_t)xmmword_2186F9460;
              v7 = (float64x2_t)unk_2186F9470;
            }
            else
            {
              v25 = 0;
              v26 = *(uint32x4_t **)(v6 + 88);
              do
              {
                v27 = *(uint16x8_t *)(v24 + v25);
                *v26 = vmovl_u16(*(uint16x4_t *)v27.i8);
                v26[1] = vmovl_high_u16(v27);
                v26 += 2;
                v25 += 16;
              }
              while (v25 != 128);
            }
          }
        }
      }
      ++v2;
      v6 += 96;
    }
    while (v2 < v1[14]);
  }
  return result;
}

double jinit_huff_decoder(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  int v5;
  __int128 v6;
  double result;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  v3 = v2;
  *(_QWORD *)(a1 + 624) = v2;
  *(_QWORD *)v2 = start_pass_huff_decoder;
  *(_QWORD *)(v2 + 16) = finish_pass_huff;
  if (*(_DWORD *)(a1 + 316))
  {
    v4 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, (uint64_t)*(int *)(a1 + 56) << 8);
    *(_QWORD *)(a1 + 192) = v4;
    if (*(int *)(a1 + 56) >= 1)
    {
      v5 = 0;
      *(_QWORD *)&v6 = -1;
      *((_QWORD *)&v6 + 1) = -1;
      do
      {
        v4[14] = v6;
        v4[15] = v6;
        v4[12] = v6;
        v4[13] = v6;
        v4[10] = v6;
        v4[11] = v6;
        v4[8] = v6;
        v4[9] = v6;
        v4[6] = v6;
        v4[7] = v6;
        v4[4] = v6;
        v4[5] = v6;
        v4[2] = v6;
        v4[3] = v6;
        *v4 = v6;
        v4[1] = v6;
        v4 += 16;
        ++v5;
      }
      while (v5 < *(_DWORD *)(a1 + 56));
    }
    result = 0.0;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
  }
  return result;
}

void start_pass_huff_decoder(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  char *v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;

  v2 = *((_QWORD *)a1 + 78);
  v3 = a1[135];
  if (a1[79])
  {
    v4 = a1[136];
    if (v3)
    {
      if (v4 < v3 || v4 > a1[142] || a1[112] != 1)
        goto LABEL_79;
    }
    else if (v4)
    {
      goto LABEL_79;
    }
    v42 = a1[137];
    if (v42)
    {
      v43 = v42 - 1;
      if (v43 != a1[138])
        goto LABEL_79;
    }
    else
    {
      v43 = a1[138];
    }
    if (v43 < 14)
    {
LABEL_80:
      LODWORD(v45) = a1[112];
      if ((int)v45 >= 1)
      {
        v46 = 0;
        do
        {
          v47 = *(int *)(*(_QWORD *)&a1[2 * v46 + 114] + 4);
          v48 = (_DWORD *)(*((_QWORD *)a1 + 24) + (v47 << 8));
          v49 = a1[135];
          if (v49 && (*v48 & 0x80000000) != 0)
          {
            v50 = *(_QWORD *)a1;
            *(_DWORD *)(v50 + 40) = 118;
            *(_DWORD *)(v50 + 44) = v47;
            *(_DWORD *)(*(_QWORD *)a1 + 48) = 0;
            (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 0xFFFFFFFFLL);
            v49 = a1[135];
          }
          if (v49 <= a1[136])
          {
            v51 = v49;
            do
            {
              if (a1[137] != (v48[v51] & ~((int)v48[v51] >> 31)))
              {
                v52 = *(_QWORD *)a1;
                *(_DWORD *)(v52 + 40) = 118;
                *(_DWORD *)(v52 + 44) = v47;
                *(_DWORD *)(*(_QWORD *)a1 + 48) = v51;
                (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 0xFFFFFFFFLL);
              }
              v48[v51] = a1[138];
            }
            while (v51++ < (int)a1[136]);
          }
          ++v46;
          v45 = (int)a1[112];
        }
        while (v46 < v45);
      }
      v54 = decode_mcu_AC_first;
      if (a1[135])
      {
        v55 = decode_mcu_AC_refine;
      }
      else
      {
        v54 = decode_mcu_DC_first;
        v55 = decode_mcu_DC_refine;
      }
      if (a1[137])
        v56 = v55;
      else
        v56 = v54;
      *(_QWORD *)(v2 + 8) = v56;
      if ((int)v45 >= 1)
      {
        v57 = 0;
        do
        {
          v58 = *(_QWORD *)&a1[2 * v57 + 114];
          if (a1[135])
          {
            v59 = *(int *)(v58 + 24);
            v60 = v2 + 8 * v59;
            jpeg_make_d_derived_tbl((uint64_t)a1, 0, v59, (_QWORD *)(v60 + 72));
            *(_QWORD *)(v2 + 104) = *(_QWORD *)(v60 + 72);
          }
          else if (!a1[137])
          {
            jpeg_make_d_derived_tbl((uint64_t)a1, 1, *(_DWORD *)(v58 + 20), (_QWORD *)(v2 + 8 * *(int *)(v58 + 20) + 72));
          }
          *(_DWORD *)(v2 + 44 + 4 * v57++) = 0;
        }
        while (v57 < (int)a1[112]);
      }
      *(_DWORD *)(v2 + 40) = 0;
      goto LABEL_105;
    }
LABEL_79:
    v44 = *(_QWORD *)a1;
    *(_DWORD *)(v44 + 40) = 17;
    *(_DWORD *)(v44 + 44) = v3;
    *(_DWORD *)(*(_QWORD *)a1 + 48) = a1[136];
    *(_DWORD *)(*(_QWORD *)a1 + 52) = a1[137];
    *(_DWORD *)(*(_QWORD *)a1 + 56) = a1[138];
    (**(void (***)(_DWORD *))a1)(a1);
    goto LABEL_80;
  }
  if (v3 || a1[137] || a1[138] || ((v62 = a1[136], a1[78]) || v62 <= 63) && v62 != a1[142])
  {
    v5 = *(_QWORD *)a1;
    *(_DWORD *)(v5 + 40) = 125;
    (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, 0xFFFFFFFFLL);
  }
  v6 = decode_mcu_sub;
  if (a1[142] == 63)
    v6 = decode_mcu;
  *(_QWORD *)(v2 + 8) = v6;
  if ((int)a1[112] >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)&a1[2 * v7 + 114];
      jpeg_make_d_derived_tbl((uint64_t)a1, 1, *(_DWORD *)(v8 + 20), (_QWORD *)(v2 + 8 * *(int *)(v8 + 20) + 112));
      if (a1[142])
        jpeg_make_d_derived_tbl((uint64_t)a1, 0, *(_DWORD *)(v8 + 24), (_QWORD *)(v2 + 8 * *(int *)(v8 + 24) + 144));
      *(_DWORD *)(v2 + 44 + 4 * v7++) = 0;
    }
    while (v7 < (int)a1[112]);
  }
  if ((int)a1[124] >= 1)
  {
    v9 = 0;
    v10 = v2 + 336;
    do
    {
      v11 = *(int **)&a1[2 * a1[v9 + 125] + 114];
      v12 = v10 + 8 * v9;
      *(_QWORD *)(v12 - 160) = *(_QWORD *)(v2 + 8 * v11[5] + 112);
      v13 = a1[142];
      if (v13)
        v14 = *(_QWORD *)(v2 + 8 * v11[6] + 144);
      else
        v14 = 0;
      *(_QWORD *)(v12 - 80) = v14;
      if (v11[13])
      {
        v17 = v11 + 9;
        v15 = v11[9];
        v16 = v17[1];
        if (v13 > 14)
        {
          if (v13 > 34)
          {
            if (v13 == 35)
            {
              v36 = v16 - 7;
              v37 = v16 - 1;
              v38 = v15 - 7;
              v21 = v15 - 1;
              if (v36 < 0xFFFFFFFA)
                v37 = 5;
              if (v38 < 0xFFFFFFFA)
                v21 = 5;
              v22 = (char *)&jpeg_zigzag_order6 + 24 * v37;
            }
            else
            {
              if (v13 != 48)
                goto LABEL_65;
              v27 = v16 - 8;
              v28 = v16 - 1;
              v29 = v15 - 8;
              v21 = v15 - 1;
              if (v27 < 0xFFFFFFF9)
                v28 = 6;
              if (v29 < 0xFFFFFFF9)
                v21 = 6;
              v22 = (char *)&jpeg_zigzag_order7 + 28 * v28;
            }
          }
          else if (v13 == 15)
          {
            v30 = v16 - 5;
            v31 = v16 - 1;
            v32 = v15 - 5;
            v21 = v15 - 1;
            if (v30 < 0xFFFFFFFC)
              v31 = 3;
            if (v32 < 0xFFFFFFFC)
              v21 = 3;
            v22 = (char *)&jpeg_zigzag_order4 + 16 * v31;
          }
          else
          {
            if (v13 != 24)
              goto LABEL_65;
            v18 = v16 - 6;
            v19 = v16 - 1;
            v20 = v15 - 6;
            v21 = v15 - 1;
            if (v18 < 0xFFFFFFFB)
              v19 = 4;
            if (v20 < 0xFFFFFFFB)
              v21 = 4;
            v22 = (char *)&jpeg_zigzag_order5 + 20 * v19;
          }
          goto LABEL_70;
        }
        if (v13)
        {
          if (v13 == 3)
          {
            v33 = v16 - 3;
            v34 = v16 - 1;
            v35 = v15 - 3;
            v21 = v15 - 1;
            if (v33 < 0xFFFFFFFE)
              v34 = 1;
            if (v35 < 0xFFFFFFFE)
              v21 = 1;
            v22 = (char *)&jpeg_zigzag_order2 + 8 * v34;
            goto LABEL_70;
          }
          if (v13 == 8)
          {
            v24 = v16 - 4;
            v25 = v16 - 1;
            v26 = v15 - 4;
            v21 = v15 - 1;
            if (v24 < 0xFFFFFFFD)
              v25 = 2;
            if (v26 < 0xFFFFFFFD)
              v21 = 2;
            v22 = (char *)&jpeg_zigzag_order3 + 12 * v25;
            goto LABEL_70;
          }
LABEL_65:
          v39 = v16 - 9;
          v40 = v16 - 1;
          v41 = v15 - 9;
          v21 = v15 - 1;
          if (v39 < 0xFFFFFFF8)
            v40 = 7;
          if (v41 < 0xFFFFFFF8)
            v21 = 7;
          v22 = (char *)&jpeg_zigzag_order + 32 * v40;
LABEL_70:
          v23 = *(_DWORD *)&v22[4 * v21] + 1;
          goto LABEL_71;
        }
        v23 = 1;
      }
      else
      {
        v23 = 0;
      }
LABEL_71:
      *(_DWORD *)(v10 + 4 * v9++) = v23;
    }
    while (v9 < (int)a1[124]);
  }
LABEL_105:
  *(_DWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  v61 = a1[93];
  *(_DWORD *)(v2 + 60) = 0;
  *(_DWORD *)(v2 + 64) = v61;
}

uint64_t finish_pass_huff(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 624);
  *(_DWORD *)(*(_QWORD *)(result + 616) + 36) += *(_DWORD *)(v1 + 32) / 8;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t decode_mcu_DC_first(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  int v26;
  __int128 v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 624);
  v5 = *(_DWORD *)(a1 + 552);
  if (!*(_DWORD *)(a1 + 372) || *(_DWORD *)(v4 + 64) || (result = process_restart(a1), (_DWORD)result))
  {
    if (!*(_DWORD *)(v4 + 60))
    {
      v33 = a1;
      v7 = *(unsigned __int8 ***)(a1 + 40);
      v8 = *v7;
      v9 = v7[1];
      v29 = *v7;
      v30 = v9;
      v10 = *(_QWORD *)(v4 + 24);
      v11 = *(_DWORD *)(v4 + 32);
      v27 = *(_OWORD *)(v4 + 40);
      v28 = *(_DWORD *)(v4 + 56);
      if (*(int *)(a1 + 496) >= 1)
      {
        v12 = 0;
        v31 = 0;
        v32 = 0;
        while (1)
        {
          v13 = *(_WORD **)(a2 + 8 * v12);
          v14 = *(int *)(a1 + 500 + 4 * v12);
          v15 = *(_QWORD *)(v4 + 8 * *(int *)(*(_QWORD *)(a1 + 8 * v14 + 456) + 20) + 72);
          if (v11 > 7)
            goto LABEL_11;
          result = jpeg_fill_bit_buffer(&v29, v10, v11, 0);
          if (!(_DWORD)result)
            return result;
          v10 = v31;
          v11 = v32;
          if ((int)v32 >= 8)
          {
LABEL_11:
            v17 = v10 >> (v11 - 8);
            v18 = *(_DWORD *)(v15 + 4 * v17 + 288);
            if (v18)
            {
              v11 -= v18;
              v19 = v15 + v17;
              v20 = *(unsigned __int8 *)(v19 + 1312);
              if (*(_BYTE *)(v19 + 1312))
                goto LABEL_17;
              goto LABEL_13;
            }
            v16 = 9;
          }
          else
          {
            v16 = 1;
          }
          v22 = jpeg_huff_decode((uint64_t)&v29, v10, v11, v15, v16);
          if (v22 < 0)
            return 0;
          v20 = v22;
          v10 = v31;
          v11 = v32;
          if (v22)
          {
LABEL_17:
            if (v11 < v20)
            {
              result = jpeg_fill_bit_buffer(&v29, v10, v11, v20);
              if (!(_DWORD)result)
                return result;
              v10 = v31;
              v11 = v32;
            }
            v11 -= v20;
            v23 = bmask[v20];
            v24 = v23 & (v10 >> v11);
            if (v24 > bmask[v20 - 1])
              v23 = 0;
            v21 = v24 - v23;
            goto LABEL_23;
          }
LABEL_13:
          v21 = 0;
LABEL_23:
          v25 = (char *)&v27 + 4 * v14;
          v26 = *((_DWORD *)v25 + 1) + v21;
          *((_DWORD *)v25 + 1) = v26;
          *v13 = v26 << v5;
          if (++v12 >= *(int *)(a1 + 496))
          {
            v7 = *(unsigned __int8 ***)(a1 + 40);
            v8 = v29;
            v9 = v30;
            break;
          }
        }
      }
      *v7 = v8;
      v7[1] = v9;
      *(_QWORD *)(v4 + 24) = v10;
      *(_DWORD *)(v4 + 32) = v11;
      *(_OWORD *)(v4 + 40) = v27;
      *(_DWORD *)(v4 + 56) = v28;
    }
    if (*(_DWORD *)(a1 + 372))
      --*(_DWORD *)(v4 + 64);
    return 1;
  }
  return result;
}

uint64_t decode_mcu_AC_first(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    if (!*(_DWORD *)(v4 + 64))
    {
      result = process_restart(a1);
      if (!(_DWORD)result)
        return result;
    }
  }
  if (*(_DWORD *)(v4 + 60))
    goto LABEL_31;
  v6 = *(_DWORD *)(v4 + 40);
  if (v6)
  {
    v7 = v6 - 1;
    goto LABEL_30;
  }
  v34 = a1;
  v8 = *(_QWORD *)(a1 + 40);
  v10 = *(unsigned __int8 **)v8;
  v9 = *(_QWORD *)(v8 + 8);
  v30 = v10;
  v31 = v9;
  v11 = *(_QWORD *)(v4 + 24);
  v12 = *(_DWORD *)(v4 + 32);
  v13 = *(_DWORD *)(a1 + 544);
  v14 = *(_DWORD *)(a1 + 540);
  if (v14 > v13)
  {
LABEL_28:
    v7 = 0;
    goto LABEL_29;
  }
  v15 = *(_DWORD *)(a1 + 552);
  v16 = *(_QWORD *)(a1 + 560);
  v17 = *a2;
  v18 = *(_QWORD *)(v4 + 104);
  v32 = 0;
  v33 = 0;
  while (1)
  {
    if (v12 > 7)
      goto LABEL_13;
    result = jpeg_fill_bit_buffer(&v30, v11, v12, 0);
    if (!(_DWORD)result)
      return result;
    v11 = v32;
    v12 = v33;
    if ((int)v33 >= 8)
    {
LABEL_13:
      v20 = v11 >> (v12 - 8);
      v21 = *(_DWORD *)(v18 + 4 * v20 + 288);
      if (v21)
      {
        v12 -= v21;
        v22 = *(unsigned __int8 *)(v18 + v20 + 1312);
        goto LABEL_18;
      }
      v19 = 9;
    }
    else
    {
      v19 = 1;
    }
    v22 = jpeg_huff_decode((uint64_t)&v30, v11, v12, v18, v19);
    if ((v22 & 0x80000000) != 0)
      return 0;
    v11 = v32;
    v12 = v33;
LABEL_18:
    v23 = v22 >> 4;
    v24 = v22 & 0xF;
    if ((v22 & 0xF) != 0)
    {
      if (v12 < v24)
      {
        result = jpeg_fill_bit_buffer(&v30, v11, v12, v24);
        if (!(_DWORD)result)
          return result;
        v11 = v32;
        v12 = v33;
      }
      v25 = v23 + v14;
      v12 -= v24;
      v26 = bmask[v24];
      v27 = v26 & (v11 >> v12);
      if (v27 > bmask[v24 - 1])
        v26 = 0;
      *(_WORD *)(v17 + 2 * *(int *)(v16 + 4 * v25)) = (v27 - v26) << v15;
      goto LABEL_27;
    }
    if (v23 != 15)
      break;
    v25 = v14 + 15;
LABEL_27:
    v14 = v25 + 1;
    if (v25 >= v13)
      goto LABEL_28;
  }
  if (v22 < 0x10)
    goto LABEL_28;
  if (v12 >= v23)
    goto LABEL_40;
  result = jpeg_fill_bit_buffer(&v30, v11, v12, v23);
  if ((_DWORD)result)
  {
    v11 = v32;
    v12 = v33;
LABEL_40:
    v12 -= v23;
    v7 = (bmask[v23] & (v11 >> v12)) + ~(-1 << v23);
LABEL_29:
    v28 = *(_QWORD **)(a1 + 40);
    v29 = v31;
    *v28 = v30;
    v28[1] = v29;
    *(_QWORD *)(v4 + 24) = v11;
    *(_DWORD *)(v4 + 32) = v12;
LABEL_30:
    *(_DWORD *)(v4 + 40) = v7;
LABEL_31:
    if (*(_DWORD *)(a1 + 372))
      --*(_DWORD *)(v4 + 64);
    return 1;
  }
  return result;
}

uint64_t decode_mcu_DC_refine(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 624);
  if (!*(_DWORD *)(a1 + 372) || *(_DWORD *)(v4 + 64) || (result = process_restart(a1), (_DWORD)result))
  {
    v17 = a1;
    v6 = *(unsigned __int8 ***)(a1 + 40);
    v7 = *v6;
    v8 = v6[1];
    v13 = *v6;
    v14 = v8;
    v9 = *(_QWORD *)(v4 + 24);
    v10 = *(_DWORD *)(v4 + 32);
    if (*(int *)(a1 + 496) >= 1)
    {
      v11 = 0;
      v15 = 0;
      v16 = 0;
      v12 = 1 << *(_DWORD *)(a1 + 552);
      do
      {
        if (v10 <= 0)
        {
          result = jpeg_fill_bit_buffer(&v13, v9, v10, 1);
          if (!(_DWORD)result)
            return result;
          v9 = v15;
          v10 = v16;
        }
        if (((v9 >> --v10) & 1) != 0)
          **(_WORD **)(a2 + 8 * v11) |= v12;
        ++v11;
      }
      while (v11 < *(int *)(a1 + 496));
      v6 = *(unsigned __int8 ***)(a1 + 40);
      v7 = v13;
      v8 = v14;
    }
    *v6 = v7;
    v6[1] = v8;
    *(_QWORD *)(v4 + 24) = v9;
    *(_DWORD *)(v4 + 32) = v10;
    if (*(_DWORD *)(a1 + 372))
      --*(_DWORD *)(v4 + 64);
    return 1;
  }
  return result;
}

uint64_t decode_mcu_AC_refine(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v44;
  int v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD v62[64];
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    if (!*(_DWORD *)(v4 + 64))
    {
      result = process_restart(a1);
      if (!(_DWORD)result)
        return result;
    }
  }
  if (*(_DWORD *)(v4 + 60))
    goto LABEL_23;
  v59 = 0;
  v60 = 0;
  v6 = *(_DWORD *)(a1 + 544);
  v7 = 0x10000 << *(_DWORD *)(a1 + 552);
  v8 = v7 >> 16;
  v53 = *(_QWORD *)(a1 + 560);
  v61 = a1;
  v9 = *(_QWORD *)(a1 + 40);
  v11 = *(unsigned __int8 **)v9;
  v10 = *(_QWORD *)(v9 + 8);
  v57 = v11;
  v58 = v10;
  v12 = *(_QWORD *)(v4 + 24);
  v13 = *(_DWORD *)(v4 + 32);
  v14 = *a2;
  v15 = *(_DWORD *)(a1 + 540);
  v56 = HIWORD(v7);
  if (*(_DWORD *)(v4 + 40))
  {
    v54 = *(_DWORD *)(v4 + 40);
    v52 = 0;
    goto LABEL_7;
  }
  v52 = 0;
  v26 = *(_QWORD *)(v4 + 104);
  v46 = -v7 >> 16;
  v55 = -HIWORD(v7);
  v48 = HIWORD(v7);
  v49 = v6;
  v47 = v26;
  while (1)
  {
    if (v13 > 7)
      goto LABEL_32;
    if (!jpeg_fill_bit_buffer(&v57, v12, v13, 0))
      goto LABEL_75;
    v12 = v59;
    v13 = v60;
    if ((int)v60 >= 8)
    {
LABEL_32:
      v28 = *(_DWORD *)(v26 + 4 * (v12 >> (v13 - 8)) + 288);
      if (v28)
      {
        v29 = v13 - v28;
        v30 = *(unsigned __int8 *)(v26 + (v12 >> (v13 - 8)) + 1312);
        goto LABEL_37;
      }
      v27 = 9;
    }
    else
    {
      v27 = 1;
    }
    v30 = jpeg_huff_decode((uint64_t)&v57, v12, v13, v26, v27);
    if ((v30 & 0x80000000) != 0)
      goto LABEL_75;
    v12 = v59;
    v29 = v60;
LABEL_37:
    v31 = v30 >> 4;
    if ((v30 & 0xF) != 0)
    {
      if ((v30 & 0xF) != 1)
      {
        v32 = *(_QWORD *)a1;
        *(_DWORD *)(v32 + 40) = 121;
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a1, 0xFFFFFFFFLL);
      }
      if (v29 <= 0)
      {
        if (!jpeg_fill_bit_buffer(&v57, v12, v29, 1))
          goto LABEL_75;
        v12 = v59;
        v29 = v60;
      }
      --v29;
      v33 = v46;
      if ((((unint64_t)v12 >> v29) & 1) != 0)
        v33 = v8;
      v51 = v33;
      goto LABEL_48;
    }
    if (v31 != 15)
      break;
    v51 = 0;
LABEL_48:
    if (v15 <= v6)
      v34 = v6;
    else
      v34 = v15;
    v50 = v34 + 1;
    v35 = v34 - (uint64_t)v15 + 1;
    v36 = (int *)(v53 + 4 * v15);
    v13 = v29;
    do
    {
      v38 = *v36++;
      v37 = v38;
      if (*(_WORD *)(v14 + 2 * v38))
      {
        if (v13 <= 0)
        {
          if (!jpeg_fill_bit_buffer(&v57, v12, v13, 1))
            goto LABEL_75;
          v12 = v59;
          v13 = v60;
        }
        if ((((unint64_t)v12 >> --v13) & 1) != 0)
        {
          v39 = *(__int16 *)(v14 + 2 * v37);
          if ((v8 & v39) == 0)
          {
            v40 = v56;
            if (v39 < 0)
              v40 = v55;
            *(_WORD *)(v14 + 2 * v37) = v39 + v40;
          }
        }
      }
      else
      {
        v41 = __OFSUB__(v31--, 1);
        if (v31 < 0 != v41)
          goto LABEL_64;
      }
      ++v15;
      --v35;
    }
    while (v35);
    v15 = v50;
LABEL_64:
    HIWORD(v7) = v48;
    v6 = v49;
    v26 = v47;
    if (v51)
    {
      v42 = *(int *)(v53 + 4 * v15);
      *(_WORD *)(v14 + 2 * v42) = v51;
      v62[v52++] = v42;
    }
    if (v15++ >= v49)
      goto LABEL_67;
  }
  v54 = 1 << v31;
  if (v30 < 0x10)
  {
    v13 = v29;
    goto LABEL_7;
  }
  if (v29 >= v31)
  {
LABEL_73:
    v13 = v29 - v31;
    if (!((bmask[v31] & (v12 >> (v29 - v31))) + v54))
    {
LABEL_67:
      v23 = 0;
      goto LABEL_22;
    }
    v54 += bmask[v31] & (v12 >> (v29 - v31));
LABEL_7:
    if (v15 <= v6)
      v16 = v6;
    else
      v16 = v15;
    v17 = (int *)(v53 + 4 * v15);
    v18 = v16 - v15 + 1;
    do
    {
      v20 = *v17++;
      v19 = v20;
      if (*(_WORD *)(v14 + 2 * v20))
      {
        if (v13 <= 0)
        {
          if (!jpeg_fill_bit_buffer(&v57, v12, v13, 1))
            goto LABEL_75;
          v12 = v59;
          v13 = v60;
        }
        if ((((unint64_t)v12 >> --v13) & 1) != 0)
        {
          v21 = *(__int16 *)(v14 + 2 * v19);
          if ((v8 & v21) == 0)
          {
            v22 = v56;
            if (v21 < 0)
              v22 = -HIWORD(v7);
            *(_WORD *)(v14 + 2 * v19) = v21 + v22;
          }
        }
      }
      --v18;
    }
    while (v18);
    v23 = v54 - 1;
LABEL_22:
    v24 = *(_QWORD **)(a1 + 40);
    v25 = v58;
    *v24 = v57;
    v24[1] = v25;
    *(_QWORD *)(v4 + 24) = v12;
    *(_DWORD *)(v4 + 32) = v13;
    *(_DWORD *)(v4 + 40) = v23;
LABEL_23:
    if (*(_DWORD *)(a1 + 372))
      --*(_DWORD *)(v4 + 64);
    return 1;
  }
  if (jpeg_fill_bit_buffer(&v57, v12, v29, v31))
  {
    v12 = v59;
    v29 = v60;
    goto LABEL_73;
  }
LABEL_75:
  if (v52)
  {
    v44 = v52 - 1;
    do
      *(_WORD *)(v14 + 2 * (int)v62[v44]) = 0;
    while ((_DWORD)v44--);
  }
  return 0;
}

void jpeg_make_d_derived_tbl(uint64_t a1, int a2, unsigned int a3, _QWORD *a4)
{
  void (**v8)(uint64_t);
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t i;
  size_t v16;
  void (**v17)(uint64_t);
  int v18;
  unsigned int v19;
  int v20;
  char v21;
  _DWORD *v22;
  char *v23;
  int v24;
  void (**v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t j;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  void (**v41)(uint64_t);
  int v42;
  _DWORD v43[257];
  _BYTE v44[257];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 4)
  {
    v8 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v8 + 10) = 52;
    *((_DWORD *)v8 + 11) = a3;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v9 = a1 + 8 * (int)a3;
  v10 = (uint64_t *)(v9 + 232);
  v11 = (uint64_t *)(v9 + 264);
  if (a2)
    v11 = v10;
  v12 = *v11;
  if (!*v11)
    v12 = jpeg_std_huff_table(a1, a2, a3);
  v42 = a2;
  v13 = (_QWORD *)*a4;
  if (!*a4)
  {
    v13 = (_QWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1568);
    *a4 = v13;
  }
  v14 = 0;
  v13[35] = v12;
  for (i = 1; i != 17; ++i)
  {
    v16 = *(unsigned __int8 *)(v12 + i);
    if (v14 + (int)v16 >= 257)
    {
      v17 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v17 + 10) = 9;
      (*v17)(a1);
    }
    if ((_DWORD)v16)
    {
      memset(&v44[v14], i, v16);
      v14 += v16;
    }
  }
  v44[v14] = 0;
  v18 = v44[0];
  if (v44[0])
  {
    v19 = 0;
    v20 = 0;
    v21 = v44[0];
    do
    {
      if (v18 == v21)
      {
        v22 = &v43[v20];
        v23 = &v44[v20 + 1];
        do
        {
          *v22++ = v19++;
          v24 = *v23++;
          ++v20;
        }
        while (v18 == v24);
      }
      if (1 << v18 <= v19)
      {
        v25 = *(void (***)(uint64_t))a1;
        *((_DWORD *)v25 + 10) = 9;
        (*v25)(a1);
      }
      v19 *= 2;
      ++v18;
      v21 = v44[v20];
    }
    while (v21);
  }
  v26 = 0;
  LODWORD(v27) = 0;
  v28 = v12 + 1;
  v29 = v42;
  do
  {
    if (*(_BYTE *)(v28 + v26))
    {
      v13[v26 + 19] = (int)v27 - (unint64_t)v43[(int)v27];
      v27 = *(unsigned __int8 *)(v28 + v26) + (uint64_t)(int)v27;
      v30 = v43[v27 - 1];
    }
    else
    {
      v30 = -1;
    }
    v13[++v26] = v30;
  }
  while (v26 != 16);
  v13[17] = 0xFFFFFLL;
  bzero(v13 + 36, 0x400uLL);
  LODWORD(v31) = 0;
  v32 = v13 + 164;
  for (j = 1; j != 9; ++j)
  {
    if (*(_BYTE *)(v12 + j))
    {
      v34 = 1;
      v31 = (int)v31;
      do
      {
        v35 = (int)(v43[v31] << (8 - j));
        v36 = (1 << (8 - j)) + 1;
        do
        {
          *((_DWORD *)v32 + v35 - 256) = j;
          *((_BYTE *)v32 + v35++) = *(_BYTE *)(v12 + v31 + 17);
          --v36;
        }
        while (v36 > 1);
        ++v31;
      }
      while (v34++ < *(unsigned __int8 *)(v12 + j));
    }
  }
  if (v29 && v14 >= 1)
  {
    v38 = v14;
    v39 = (unsigned __int8 *)(v12 + 17);
    do
    {
      v40 = *v39++;
      if (v40 >= 0x10)
      {
        v41 = *(void (***)(uint64_t))a1;
        *((_DWORD *)v41 + 10) = 9;
        (*v41)(a1);
      }
      --v38;
    }
    while (v38);
  }
}

uint64_t decode_mcu_sub(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = *(_QWORD *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    if (!*(_DWORD *)(v4 + 64))
    {
      result = process_restart(a1);
      if (!(_DWORD)result)
        return result;
    }
  }
  if (!*(_DWORD *)(v4 + 60))
  {
    v44 = *(_QWORD *)(a1 + 560);
    v6 = *(_DWORD *)(a1 + 568);
    v51 = a1;
    v7 = *(unsigned __int8 ***)(a1 + 40);
    v8 = *v7;
    v9 = v7[1];
    v47 = *v7;
    v48 = v9;
    v10 = *(_QWORD *)(v4 + 24);
    v11 = *(_DWORD *)(v4 + 32);
    v45 = *(_OWORD *)(v4 + 40);
    v46 = *(_DWORD *)(v4 + 56);
    if (*(int *)(a1 + 496) < 1)
    {
LABEL_76:
      *v7 = v8;
      v7[1] = v9;
      *(_QWORD *)(v4 + 24) = v10;
      *(_DWORD *)(v4 + 32) = v11;
      *(_OWORD *)(v4 + 40) = v45;
      *(_DWORD *)(v4 + 56) = v46;
      goto LABEL_5;
    }
    v12 = 0;
    v49 = 0;
    v50 = 0;
    v43 = a2;
LABEL_11:
    v13 = *(_WORD **)(a2 + 8 * v12);
    v14 = *(_QWORD *)(v4 + 8 * v12 + 176);
    if (v11 > 7)
      goto LABEL_15;
    result = jpeg_fill_bit_buffer(&v47, v10, v11, 0);
    if (!(_DWORD)result)
      return result;
    v10 = v49;
    v11 = v50;
    if ((int)v50 >= 8)
    {
LABEL_15:
      v16 = v10 >> (v11 - 8);
      v17 = *(_DWORD *)(v14 + 4 * v16 + 288);
      if (v17)
      {
        v11 -= v17;
        v18 = *(unsigned __int8 *)(v14 + v16 + 1312);
        goto LABEL_20;
      }
      v15 = 9;
    }
    else
    {
      v15 = 1;
    }
    v19 = jpeg_huff_decode((uint64_t)&v47, v10, v11, v14, v15);
    if (v19 < 0)
      return 0;
    v18 = v19;
    v10 = v49;
    v11 = v50;
LABEL_20:
    v20 = *(_QWORD *)(v4 + 8 * v12 + 256);
    v21 = *(_DWORD *)(v4 + 4 * v12 + 336);
    if (v21)
    {
      if (v18)
      {
        if (v11 < v18)
        {
          result = jpeg_fill_bit_buffer(&v47, v10, v11, v18);
          if (!(_DWORD)result)
            return result;
          v10 = v49;
          v11 = v50;
        }
        v11 -= v18;
        v22 = bmask[v18];
        v23 = v22 & (v10 >> v11);
        if (v23 > bmask[v18 - 1])
          v22 = 0;
        v24 = v23 - v22;
      }
      else
      {
        v24 = 0;
      }
      v25 = (char *)&v45 + 4 * *(int *)(a1 + 4 * v12 + 500);
      v26 = *((_DWORD *)v25 + 1) + v24;
      *((_DWORD *)v25 + 1) = v26;
      *v13 = v26;
      if (v21 >= 2)
      {
        v27 = 1;
        while (1)
        {
          if (v11 > 7)
            goto LABEL_40;
          result = jpeg_fill_bit_buffer(&v47, v10, v11, 0);
          if (!(_DWORD)result)
            return result;
          v10 = v49;
          v11 = v50;
          if ((int)v50 >= 8)
          {
LABEL_40:
            v29 = v10 >> (v11 - 8);
            v30 = *(_DWORD *)(v20 + 4 * v29 + 288);
            if (v30)
            {
              v11 -= v30;
              v31 = *(unsigned __int8 *)(v20 + v29 + 1312);
              goto LABEL_45;
            }
            v28 = 9;
          }
          else
          {
            v28 = 1;
          }
          v31 = jpeg_huff_decode((uint64_t)&v47, v10, v11, v20, v28);
          if ((v31 & 0x80000000) != 0)
            return 0;
          v10 = v49;
          v11 = v50;
LABEL_45:
          v32 = v31 >> 4;
          v33 = v31 & 0xF;
          if ((v31 & 0xF) != 0)
          {
            if (v11 < v33)
            {
              result = jpeg_fill_bit_buffer(&v47, v10, v11, v33);
              if (!(_DWORD)result)
                return result;
              v10 = v49;
              v11 = v50;
            }
            v34 = v32 + v27;
            v11 -= v33;
            v35 = bmask[v33];
            v36 = v35 & (v10 >> v11);
            if (v36 > bmask[v33 - 1])
              LOWORD(v35) = 0;
            v13[*(int *)(v44 + 4 * v34)] = v36 - v35;
          }
          else
          {
            if (v32 != 15)
            {
LABEL_74:
              ++v12;
              a2 = v43;
              if (v12 >= *(int *)(a1 + 496))
              {
                v7 = *(unsigned __int8 ***)(a1 + 40);
                v8 = v47;
                v9 = v48;
                goto LABEL_76;
              }
              goto LABEL_11;
            }
            v34 = v27 + 15;
          }
          v27 = v34 + 1;
          if (v34 + 1 >= v21)
          {
            while (1)
            {
LABEL_57:
              if (v27 > v6)
                goto LABEL_74;
              if (v11 > 7)
                goto LABEL_62;
              result = jpeg_fill_bit_buffer(&v47, v10, v11, 0);
              if (!(_DWORD)result)
                return result;
              v10 = v49;
              v11 = v50;
              if ((int)v50 >= 8)
              {
LABEL_62:
                v38 = v10 >> (v11 - 8);
                v39 = *(_DWORD *)(v20 + 4 * v38 + 288);
                if (v39)
                {
                  v11 -= v39;
                  v40 = *(unsigned __int8 *)(v20 + v38 + 1312);
                  goto LABEL_67;
                }
                v37 = 9;
              }
              else
              {
                v37 = 1;
              }
              v40 = jpeg_huff_decode((uint64_t)&v47, v10, v11, v20, v37);
              if ((v40 & 0x80000000) != 0)
                return 0;
              v10 = v49;
              v11 = v50;
LABEL_67:
              v41 = v40 >> 4;
              v42 = v40 & 0xF;
              if ((v40 & 0xF) != 0)
              {
                if (v11 < v42)
                {
                  result = jpeg_fill_bit_buffer(&v47, v10, v11, v42);
                  if (!(_DWORD)result)
                    return result;
                  v10 = v49;
                  v11 = v50;
                }
                v11 -= v42;
              }
              else if (v41 != 15)
              {
                goto LABEL_74;
              }
              v27 += v41 + 1;
            }
          }
        }
      }
    }
    else if (v18)
    {
      if (v11 < v18)
      {
        result = jpeg_fill_bit_buffer(&v47, v10, v11, v18);
        if (!(_DWORD)result)
          return result;
        v10 = v49;
        v11 = v50;
      }
      v11 -= v18;
    }
    v27 = 1;
    goto LABEL_57;
  }
LABEL_5:
  if (*(_DWORD *)(a1 + 372))
    --*(_DWORD *)(v4 + 64);
  return 1;
}

uint64_t decode_mcu(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  __int128 v42;
  int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *(_QWORD *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    if (!*(_DWORD *)(v4 + 64))
    {
      result = process_restart(a1);
      if (!(_DWORD)result)
        return result;
    }
  }
  if (*(_DWORD *)(v4 + 60))
    goto LABEL_5;
  v48 = a1;
  v6 = *(unsigned __int8 ***)(a1 + 40);
  v7 = *v6;
  v8 = v6[1];
  v44 = *v6;
  v45 = v8;
  v9 = *(_QWORD *)(v4 + 24);
  v10 = *(_DWORD *)(v4 + 32);
  v42 = *(_OWORD *)(v4 + 40);
  v43 = *(_DWORD *)(v4 + 56);
  if (*(int *)(a1 + 496) < 1)
    goto LABEL_76;
  v11 = 0;
  v46 = 0;
  v47 = 0;
  do
  {
    v12 = *(_WORD **)(a2 + 8 * v11);
    v13 = *(_QWORD *)(v4 + 8 * v11 + 176);
    if (v10 > 7)
      goto LABEL_15;
    result = jpeg_fill_bit_buffer(&v44, v9, v10, 0);
    if (!(_DWORD)result)
      return result;
    v9 = v46;
    v10 = v47;
    if ((int)v47 >= 8)
    {
LABEL_15:
      v15 = v9 >> (v10 - 8);
      v16 = *(_DWORD *)(v13 + 4 * v15 + 288);
      if (v16)
      {
        v10 -= v16;
        v17 = *(unsigned __int8 *)(v13 + v15 + 1312);
        goto LABEL_20;
      }
      v14 = 9;
    }
    else
    {
      v14 = 1;
    }
    v18 = jpeg_huff_decode((uint64_t)&v44, v9, v10, v13, v14);
    if (v18 < 0)
      return 0;
    v17 = v18;
    v9 = v46;
    v10 = v47;
LABEL_20:
    v19 = *(_QWORD *)(v4 + 8 * v11 + 256);
    v20 = *(_DWORD *)(v4 + 4 * v11 + 336);
    if (!v20)
    {
      if (v17)
      {
        if (v10 < v17)
        {
          result = jpeg_fill_bit_buffer(&v44, v9, v10, v17);
          if (!(_DWORD)result)
            return result;
          v9 = v46;
          v10 = v47;
        }
        v10 -= v17;
      }
LABEL_57:
      v26 = 1;
      while (1)
      {
LABEL_58:
        if (v10 > 7)
          goto LABEL_62;
        result = jpeg_fill_bit_buffer(&v44, v9, v10, 0);
        if (!(_DWORD)result)
          return result;
        v9 = v46;
        v10 = v47;
        if ((int)v47 >= 8)
        {
LABEL_62:
          v37 = v9 >> (v10 - 8);
          v38 = *(_DWORD *)(v19 + 4 * v37 + 288);
          if (v38)
          {
            v10 -= v38;
            v39 = *(unsigned __int8 *)(v19 + v37 + 1312);
            goto LABEL_67;
          }
          v36 = 9;
        }
        else
        {
          v36 = 1;
        }
        v39 = jpeg_huff_decode((uint64_t)&v44, v9, v10, v19, v36);
        if ((v39 & 0x80000000) != 0)
          return 0;
        v9 = v46;
        v10 = v47;
LABEL_67:
        v40 = v39 >> 4;
        v41 = v39 & 0xF;
        if ((v39 & 0xF) != 0)
        {
          if (v10 < v41)
          {
            result = jpeg_fill_bit_buffer(&v44, v9, v10, v41);
            if (!(_DWORD)result)
              return result;
            v9 = v46;
            v10 = v47;
          }
          v10 -= v41;
        }
        else if (v40 != 15)
        {
          goto LABEL_74;
        }
        v26 += v40 + 1;
        if (v26 >= 64)
          goto LABEL_74;
      }
    }
    if (v17)
    {
      if (v10 < v17)
      {
        result = jpeg_fill_bit_buffer(&v44, v9, v10, v17);
        if (!(_DWORD)result)
          return result;
        v9 = v46;
        v10 = v47;
      }
      v10 -= v17;
      v21 = bmask[v17];
      v22 = v21 & (v9 >> v10);
      if (v22 > bmask[v17 - 1])
        v21 = 0;
      v23 = v22 - v21;
    }
    else
    {
      v23 = 0;
    }
    v24 = (char *)&v42 + 4 * *(int *)(a1 + 4 * v11 + 500);
    v25 = *((_DWORD *)v24 + 1) + v23;
    *((_DWORD *)v24 + 1) = v25;
    *v12 = v25;
    if (v20 < 2)
      goto LABEL_57;
    v26 = 1;
    do
    {
      if (v10 > 7)
        goto LABEL_40;
      result = jpeg_fill_bit_buffer(&v44, v9, v10, 0);
      if (!(_DWORD)result)
        return result;
      v9 = v46;
      v10 = v47;
      if ((int)v47 >= 8)
      {
LABEL_40:
        v28 = v9 >> (v10 - 8);
        v29 = *(_DWORD *)(v19 + 4 * v28 + 288);
        if (v29)
        {
          v10 -= v29;
          v30 = *(unsigned __int8 *)(v19 + v28 + 1312);
          goto LABEL_45;
        }
        v27 = 9;
      }
      else
      {
        v27 = 1;
      }
      v30 = jpeg_huff_decode((uint64_t)&v44, v9, v10, v19, v27);
      if ((v30 & 0x80000000) != 0)
        return 0;
      v9 = v46;
      v10 = v47;
LABEL_45:
      v31 = v30 >> 4;
      v32 = v30 & 0xF;
      if ((v30 & 0xF) != 0)
      {
        if (v10 < v32)
        {
          result = jpeg_fill_bit_buffer(&v44, v9, v10, v32);
          if (!(_DWORD)result)
            return result;
          v9 = v46;
          v10 = v47;
        }
        v33 = v31 + v26;
        v10 -= v32;
        v34 = bmask[v32];
        v35 = v34 & (v9 >> v10);
        if (v35 > bmask[v32 - 1])
          LOWORD(v34) = 0;
        v12[jpeg_natural_order[v33]] = v35 - v34;
      }
      else
      {
        if (v31 != 15)
          goto LABEL_74;
        v33 = v26 + 15;
      }
      v26 = v33 + 1;
    }
    while (v33 + 1 < v20);
    if (v33 <= 62)
      goto LABEL_58;
LABEL_74:
    ++v11;
  }
  while (v11 < *(int *)(a1 + 496));
  v6 = *(unsigned __int8 ***)(a1 + 40);
  v7 = v44;
  v8 = v45;
LABEL_76:
  *v6 = v7;
  v6[1] = v8;
  *(_QWORD *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 32) = v10;
  *(_OWORD *)(v4 + 40) = v42;
  *(_DWORD *)(v4 + 56) = v43;
LABEL_5:
  if (*(_DWORD *)(a1 + 372))
    --*(_DWORD *)(v4 + 64);
  return 1;
}

uint64_t process_restart(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *(_DWORD **)(a1 + 624);
  v3 = *(_QWORD *)(a1 + 616);
  *(_DWORD *)(v3 + 36) += v2[8] / 8;
  v2[8] = 0;
  result = (*(uint64_t (**)(void))(v3 + 16))();
  if ((_DWORD)result)
  {
    if (*(int *)(a1 + 448) >= 1)
    {
      v5 = 0;
      do
        v2[v5++ + 11] = 0;
      while (v5 < *(int *)(a1 + 448));
    }
    v2[10] = 0;
    v2[16] = *(_DWORD *)(a1 + 372);
    if (!*(_DWORD *)(a1 + 572))
      v2[15] = 0;
    return 1;
  }
  return result;
}

uint64_t jpeg_fill_bit_buffer(unsigned __int8 **a1, uint64_t a2, int a3, int a4)
{
  int v5;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  unsigned __int8 **v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 **v17;
  int v18;
  int v19;
  BOOL v20;

  v5 = a3;
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[4];
  if (*((_DWORD *)v10 + 143))
  {
LABEL_2:
    if (v5 < a4)
    {
      if (!*(_DWORD *)(*((_QWORD *)v10 + 78) + 60))
      {
        v11 = *(_QWORD *)v10;
        *(_DWORD *)(v11 + 40) = 120;
        (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(v10, 0xFFFFFFFFLL);
        *(_DWORD *)(*((_QWORD *)v10 + 78) + 60) = 1;
      }
      v12 = 25;
      a2 <<= 25 - v5;
      goto LABEL_20;
    }
  }
  else if (a3 <= 24)
  {
    while (1)
    {
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned __int8 *))(*((_QWORD *)v10 + 5) + 24))(v10);
        if (!(_DWORD)result)
          return result;
        v14 = (unsigned __int8 **)*((_QWORD *)v10 + 5);
        v8 = *v14;
        v9 = v14[1];
      }
      --v9;
      v16 = *v8++;
      v15 = v16;
      if (v16 == 255)
      {
        do
        {
          if (!v9)
          {
            result = (*(uint64_t (**)(unsigned __int8 *))(*((_QWORD *)v10 + 5) + 24))(v10);
            if (!(_DWORD)result)
              return result;
            v17 = (unsigned __int8 **)*((_QWORD *)v10 + 5);
            v8 = *v17;
            v9 = v17[1];
          }
          --v9;
          v19 = *v8++;
          v18 = v19;
        }
        while (v19 == 255);
        if (v18)
        {
          *((_DWORD *)v10 + 143) = v18;
          goto LABEL_2;
        }
        v15 = 255;
      }
      a2 = v15 | (a2 << 8);
      v12 = v5 + 8;
      v20 = v5 < 17;
      v5 += 8;
      if (!v20)
        goto LABEL_20;
    }
  }
  v12 = v5;
LABEL_20:
  *a1 = v8;
  a1[1] = v9;
  a1[2] = (unsigned __int8 *)a2;
  result = 1;
  *((_DWORD *)a1 + 6) = v12;
  return result;
}

uint64_t jpeg_huff_decode(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v5 = a5;
  if (a3 < a5)
  {
    if (!jpeg_fill_bit_buffer((unsigned __int8 **)a1, a2, a3, a5))
      return 0xFFFFFFFFLL;
    a2 = *(_QWORD *)(a1 + 16);
    a3 = *(_DWORD *)(a1 + 24);
  }
  v8 = a3 - v5;
  v9 = (int)(bmask[v5] & (a2 >> v8));
  v10 = v5;
  if (*(_QWORD *)(a4 + 8 * v5) >= v9)
  {
    v11 = v5;
  }
  else
  {
    do
    {
      if (v8 <= 0)
      {
        if (!jpeg_fill_bit_buffer((unsigned __int8 **)a1, a2, v8, 1))
          return 0xFFFFFFFFLL;
        a2 = *(_QWORD *)(a1 + 16);
        v8 = *(_DWORD *)(a1 + 24);
      }
      v9 = ((unint64_t)a2 >> --v8) & 1 | (2 * v9);
      v11 = v10 + 1;
      v12 = *(_QWORD *)(a4 + 8 + 8 * v10++);
    }
    while (v9 > v12);
    v5 = v11;
  }
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = v8;
  if (v5 < 17)
    return *(unsigned __int8 *)(*(_QWORD *)(a4 + 280) + *(_DWORD *)(a4 + 8 * v11 + 144) + (int)v9 + 17);
  v13 = *(uint64_t **)(a1 + 32);
  v14 = *v13;
  *(_DWORD *)(v14 + 40) = 121;
  (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v13, 0xFFFFFFFFLL);
  return 0;
}

uint64_t jpeg_core_output_dimensions(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  int v9;
  int *v10;

  v2 = *(int *)(a1 + 556);
  v3 = *(_DWORD *)(a1 + 72);
  v4 = v2 * *(_DWORD *)(a1 + 68);
  if (v4 <= v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(*(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(*(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0x100000001;
    v8 = 1;
  }
  else if (v4 <= 2 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(2 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(2 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0x200000002;
    v8 = 2;
  }
  else if (v4 <= 3 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(3 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(3 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0x300000003;
    v8 = 3;
  }
  else if (v4 <= 4 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(4 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(4 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0x400000004;
    v8 = 4;
  }
  else if (v4 <= 5 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(5 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(5 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0x500000005;
    v8 = 5;
  }
  else if (v4 <= 6 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(6 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(6 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0x600000006;
    v8 = 6;
  }
  else if (v4 <= 7 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(7 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(7 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0x700000007;
    v8 = 7;
  }
  else if (v4 <= 8 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(8 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(8 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0x800000008;
    v8 = 8;
  }
  else if (v4 <= 9 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(9 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(9 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0x900000009;
    v8 = 9;
  }
  else if (v4 <= 10 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(10 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(10 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0xA0000000ALL;
    v8 = 10;
  }
  else if (v4 <= 11 * v3)
  {
    v8 = 11;
    *(_DWORD *)(a1 + 136) = jdiv_round_up(11 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(11 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0xB0000000BLL;
  }
  else if (v4 <= 12 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(12 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(12 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0xC0000000CLL;
    v8 = 12;
  }
  else if (v4 <= 13 * v3)
  {
    v8 = 13;
    *(_DWORD *)(a1 + 136) = jdiv_round_up(13 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(13 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0xD0000000DLL;
  }
  else if (v4 <= 14 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(14 * *(unsigned int *)(a1 + 48), v2);
    result = jdiv_round_up(14 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 140) = result;
    *(_QWORD *)(a1 + 424) = 0xE0000000ELL;
    v8 = 14;
  }
  else
  {
    v5 = 15 * v3;
    v6 = *(unsigned int *)(a1 + 48);
    if (v4 <= v5)
    {
      *(_DWORD *)(a1 + 136) = jdiv_round_up(15 * v6, v2);
      result = jdiv_round_up(15 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
      *(_DWORD *)(a1 + 140) = result;
      *(_QWORD *)(a1 + 424) = 0xF0000000FLL;
      v8 = 15;
    }
    else
    {
      *(_DWORD *)(a1 + 136) = jdiv_round_up(16 * v6, v2);
      result = jdiv_round_up(16 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
      *(_DWORD *)(a1 + 140) = result;
      *(_QWORD *)(a1 + 424) = 0x1000000010;
      v8 = 16;
    }
  }
  v9 = *(_DWORD *)(a1 + 56);
  if (v9 >= 1)
  {
    v10 = (int *)(*(_QWORD *)(a1 + 304) + 40);
    do
    {
      *(v10 - 1) = v8;
      *v10 = v8;
      v10 += 24;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t jinit_input_controller(uint64_t a1)
{
  uint64_t result;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 608) = result;
  *(_QWORD *)result = consume_markers;
  *(_QWORD *)(result + 8) = reset_input_controller;
  *(_QWORD *)(result + 16) = start_input_pass_0;
  *(_QWORD *)(result + 24) = finish_input_pass;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 1;
  return result;
}

uint64_t consume_markers(uint64_t *a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v5;
  __n128 v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;

  v1 = (_DWORD *)a1[76];
  v2 = 2;
  if (v1[9])
    return v2;
  while (1)
  {
    v5 = (*(uint64_t (**)(uint64_t *))(a1[77] + 8))(a1);
    if ((_DWORD)v5 != 1)
      break;
    v7 = v1[10];
    if (v7)
    {
      if (v7 != 1)
      {
        if (*((_DWORD *)a1 + 112))
          goto LABEL_86;
        goto LABEL_37;
      }
      if (*((_DWORD *)a1 + 13) > 0xFFDCu || *((_DWORD *)a1 + 12) >= 0xFFDDu)
      {
        *(_QWORD *)(*a1 + 40) = 0xFFDC0000002ALL;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      v8 = *((_DWORD *)a1 + 74);
      if ((v8 - 13) <= 0xFFFFFFFA)
      {
        v9 = *a1;
        *(_DWORD *)(v9 + 40) = 16;
        *(_DWORD *)(v9 + 44) = v8;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      v10 = *((_DWORD *)a1 + 14);
      if (v10 >= 11)
      {
        v11 = *a1;
        *(_DWORD *)(v11 + 40) = 27;
        *(_DWORD *)(v11 + 44) = v10;
        *(_DWORD *)(*a1 + 48) = 10;
        (*(void (**)(uint64_t *))*a1)(a1);
        v10 = *((_DWORD *)a1 + 14);
      }
      a1[52] = 0x100000001;
      if (v10 >= 1)
      {
        v12 = 0;
        v13 = a1[38] + 8;
        v6.n128_u64[0] = 0x100000001;
        do
        {
          if ((*(_DWORD *)v13 - 5) >= 0xFFFFFFFC && (*(_DWORD *)(v13 + 4) - 5) > 0xFFFFFFFB)
          {
            v15 = *(int32x2_t *)v13;
          }
          else
          {
            v14 = *a1;
            *(_DWORD *)(v14 + 40) = 19;
            (*(void (**)(uint64_t *, __n128))v14)(a1, v6);
            v6.n128_u64[0] = a1[52];
            v15 = *(int32x2_t *)v13;
            v10 = *((_DWORD *)a1 + 14);
          }
          v6.n128_u64[0] = (unint64_t)vmax_s32((int32x2_t)v6.n128_u64[0], v15);
          a1[52] = v6.n128_u64[0];
          ++v12;
          v13 += 96;
        }
        while (v12 < v10);
      }
      if (*((_DWORD *)a1 + 78) || *((_DWORD *)a1 + 79) && *((_DWORD *)a1 + 112))
      {
LABEL_21:
        v16 = 8;
LABEL_22:
        *((_DWORD *)a1 + 139) = v16;
        a1[70] = (uint64_t)&jpeg_natural_order;
        *((_DWORD *)a1 + 142) = 63;
        goto LABEL_23;
      }
      v23 = *((_DWORD *)a1 + 136);
      if (v23 > 79)
      {
        if (v23 > 167)
        {
          if (v23 > 223)
          {
            if (v23 == 224)
            {
              v16 = 15;
              goto LABEL_22;
            }
            if (v23 == 255)
            {
              v16 = 16;
              goto LABEL_22;
            }
          }
          else
          {
            if (v23 == 168)
            {
              v16 = 13;
              goto LABEL_22;
            }
            if (v23 == 195)
            {
              v16 = 14;
              goto LABEL_22;
            }
          }
        }
        else if (v23 > 119)
        {
          if (v23 == 120)
          {
            v16 = 11;
            goto LABEL_22;
          }
          if (v23 == 143)
          {
            v16 = 12;
            goto LABEL_22;
          }
        }
        else
        {
          if (v23 == 80)
          {
            v16 = 9;
            goto LABEL_22;
          }
          if (v23 == 99)
          {
            v16 = 10;
            goto LABEL_22;
          }
        }
      }
      else if (v23 > 23)
      {
        if (v23 > 47)
        {
          if (v23 == 48)
          {
            v16 = 7;
            *((_DWORD *)a1 + 139) = 7;
            a1[70] = (uint64_t)&jpeg_natural_order7;
            v24 = 48;
            goto LABEL_78;
          }
          if (v23 == 63)
            goto LABEL_21;
        }
        else
        {
          if (v23 == 24)
          {
            v16 = 5;
            *((_DWORD *)a1 + 139) = 5;
            a1[70] = (uint64_t)&jpeg_natural_order5;
            v24 = 24;
            goto LABEL_78;
          }
          if (v23 == 35)
          {
            v16 = 6;
            *((_DWORD *)a1 + 139) = 6;
            a1[70] = (uint64_t)&jpeg_natural_order6;
            v24 = 35;
            goto LABEL_78;
          }
        }
      }
      else if (v23 > 7)
      {
        if (v23 == 8)
        {
          v16 = 3;
          *((_DWORD *)a1 + 139) = 3;
          a1[70] = (uint64_t)&jpeg_natural_order3;
          v24 = 8;
          goto LABEL_78;
        }
        if (v23 == 15)
        {
          v16 = 4;
          *((_DWORD *)a1 + 139) = 4;
          a1[70] = (uint64_t)&jpeg_natural_order4;
          v24 = 15;
          goto LABEL_78;
        }
      }
      else
      {
        if (!v23)
        {
          v16 = 1;
          *((_DWORD *)a1 + 139) = 1;
          a1[70] = (uint64_t)&jpeg_natural_order;
          *((_DWORD *)a1 + 142) = 0;
          goto LABEL_23;
        }
        if (v23 == 3)
        {
          v16 = 2;
          *((_DWORD *)a1 + 139) = 2;
          a1[70] = (uint64_t)&jpeg_natural_order2;
          v24 = 3;
LABEL_78:
          *((_DWORD *)a1 + 142) = v24;
          goto LABEL_23;
        }
      }
      v25 = *a1;
      v26 = *((_DWORD *)a1 + 135);
      *(_DWORD *)(v25 + 40) = 17;
      *(_DWORD *)(v25 + 44) = v26;
      *(_DWORD *)(*a1 + 48) = *((_DWORD *)a1 + 136);
      *(_DWORD *)(*a1 + 52) = *((_DWORD *)a1 + 137);
      *(_DWORD *)(*a1 + 56) = *((_DWORD *)a1 + 138);
      (*(void (**)(uint64_t *))*a1)(a1);
      v16 = *((_DWORD *)a1 + 139);
      v10 = *((_DWORD *)a1 + 14);
LABEL_23:
      *((_DWORD *)a1 + 106) = v16;
      *((_DWORD *)a1 + 107) = v16;
      if (v10 >= 1)
      {
        v17 = 0;
        v18 = a1[38] + 40;
        do
        {
          v19 = *((_DWORD *)a1 + 139);
          *(_DWORD *)(v18 - 4) = v19;
          *(_DWORD *)v18 = v19;
          *(_DWORD *)(v18 - 12) = jdiv_round_up(*(int *)(v18 - 32) * (unint64_t)*((unsigned int *)a1 + 12), *((int *)a1 + 104) * (uint64_t)v19);
          *(_DWORD *)(v18 - 8) = jdiv_round_up(*(int *)(v18 - 28) * (unint64_t)*((unsigned int *)a1 + 13), *((int *)a1 + 139) * (uint64_t)*((int *)a1 + 105));
          *(_DWORD *)(v18 + 4) = jdiv_round_up(*(int *)(v18 - 32) * (unint64_t)*((unsigned int *)a1 + 12), *((int *)a1 + 104));
          *(_DWORD *)(v18 + 8) = jdiv_round_up(*(int *)(v18 - 28) * (unint64_t)*((unsigned int *)a1 + 13), *((int *)a1 + 105));
          *(_DWORD *)(v18 + 12) = 1;
          *(_QWORD *)(v18 + 40) = 0;
          ++v17;
          v18 += 96;
        }
        while (v17 < *((_DWORD *)a1 + 14));
        v16 = *((_DWORD *)a1 + 139);
      }
      *((_DWORD *)a1 + 108) = jdiv_round_up(*((unsigned int *)a1 + 13), *((int *)a1 + 105) * (uint64_t)v16);
      v20 = *((_DWORD *)a1 + 112);
      v21 = v20 < *((_DWORD *)a1 + 14) || *((_DWORD *)a1 + 79) != 0;
      *(_DWORD *)(a1[76] + 32) = v21;
      if (v20)
      {
LABEL_86:
        v1[10] = 0;
        return 1;
      }
LABEL_37:
      v1[10] = 2;
    }
    else
    {
      if (!v1[8])
      {
        v22 = *a1;
        *(_DWORD *)(v22 + 40) = 36;
        (*(void (**)(uint64_t *))v22)(a1);
      }
      if (*((_DWORD *)a1 + 112))
      {
        start_input_pass_0(a1);
        return 1;
      }
    }
  }
  if ((_DWORD)v5 != 2)
    return v5;
  v1[9] = 1;
  if (v1[10])
  {
    if (*(_DWORD *)(a1[77] + 28))
    {
      v27 = *a1;
      *(_DWORD *)(v27 + 40) = 62;
      (*(void (**)(uint64_t *))v27)(a1);
    }
  }
  else
  {
    v28 = *((_DWORD *)a1 + 43);
    if (*((_DWORD *)a1 + 45) > v28)
      *((_DWORD *)a1 + 45) = v28;
  }
  return 2;
}

uint64_t reset_input_controller(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)v2 = consume_markers;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  result = (**(uint64_t (***)(uint64_t))(a1 + 616))(a1);
  *(_QWORD *)(a1 + 192) = 0;
  return result;
}

uint64_t start_input_pass_0(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  void (**v8)(_QWORD);
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(_QWORD);
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 112);
  if (v2 == 1)
  {
    v3 = a1[57];
    v4 = *(_DWORD *)(v3 + 32);
    *((_DWORD *)a1 + 122) = *(_DWORD *)(v3 + 28);
    *((_DWORD *)a1 + 123) = v4;
    *(_QWORD *)(v3 + 56) = 0x100000001;
    LODWORD(v5) = 1;
    v6 = *(_DWORD *)(v3 + 36);
    *(_DWORD *)(v3 + 64) = 1;
    *(_DWORD *)(v3 + 68) = v6;
    v7 = v4 % *(_DWORD *)(v3 + 12);
    if (!v7)
      v7 = *(_DWORD *)(v3 + 12);
    *(_DWORD *)(v3 + 72) = 1;
    *(_DWORD *)(v3 + 76) = v7;
    a1[62] = 1;
LABEL_20:
    v20 = 0;
    do
    {
      v21 = a1[v20 + 57];
      if (!*(_QWORD *)(v21 + 80))
      {
        v22 = *(unsigned int *)(v21 + 16);
        if (v22 > 3 || !a1[v22 + 25])
        {
          v23 = (void (**)(_QWORD))*a1;
          *((_DWORD *)v23 + 10) = 54;
          *((_DWORD *)v23 + 11) = v22;
          (*(void (**)(uint64_t *))*a1)(a1);
        }
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 132);
        v5 = a1[(int)v22 + 25];
        *(_OWORD *)v24 = *(_OWORD *)v5;
        v25 = *(_OWORD *)(v5 + 16);
        v26 = *(_OWORD *)(v5 + 32);
        v27 = *(_OWORD *)(v5 + 64);
        *(_OWORD *)(v24 + 48) = *(_OWORD *)(v5 + 48);
        *(_OWORD *)(v24 + 64) = v27;
        *(_OWORD *)(v24 + 16) = v25;
        *(_OWORD *)(v24 + 32) = v26;
        v28 = *(_OWORD *)(v5 + 80);
        v29 = *(_OWORD *)(v5 + 96);
        v30 = *(_OWORD *)(v5 + 112);
        *(_DWORD *)(v24 + 128) = *(_DWORD *)(v5 + 128);
        *(_OWORD *)(v24 + 96) = v29;
        *(_OWORD *)(v24 + 112) = v30;
        *(_OWORD *)(v24 + 80) = v28;
        *(_QWORD *)(v21 + 80) = v24;
        LODWORD(v5) = *((_DWORD *)a1 + 112);
      }
      ++v20;
    }
    while (v20 < (int)v5);
    goto LABEL_27;
  }
  if ((v2 - 5) <= 0xFFFFFFFB)
  {
    v8 = (void (**)(_QWORD))*a1;
    *((_DWORD *)v8 + 10) = 27;
    *((_DWORD *)v8 + 11) = v2;
    *(_DWORD *)(*a1 + 48) = 4;
    (*(void (**)(uint64_t *))*a1)(a1);
  }
  *((_DWORD *)a1 + 122) = jdiv_round_up(*((unsigned int *)a1 + 12), *((int *)a1 + 139) * (uint64_t)*((int *)a1 + 104));
  *((_DWORD *)a1 + 123) = jdiv_round_up(*((unsigned int *)a1 + 13), *((int *)a1 + 139) * (uint64_t)*((int *)a1 + 105));
  *((_DWORD *)a1 + 124) = 0;
  if (*((int *)a1 + 112) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = (_DWORD *)a1[v9 + 57];
      v11 = v10[2];
      v12 = v10[3];
      v13 = v12 * v11;
      v14 = v10[8];
      v15 = v10[9] * v11;
      v10[16] = v12 * v11;
      v10[17] = v15;
      v16 = v10[7] % v11;
      v10[14] = v11;
      v10[15] = v12;
      if (v16)
        v11 = v16;
      if (v14 % v12)
        v12 = v14 % v12;
      v10[18] = v11;
      v10[19] = v12;
      if (*((_DWORD *)a1 + 124) + v13 >= 11)
      {
        v17 = *a1;
        *(_DWORD *)(v17 + 40) = 14;
        (*(void (**)(uint64_t *))v17)(a1);
      }
      if (v13 >= 1)
      {
        v18 = v13 + 1;
        do
        {
          v19 = *((int *)a1 + 124);
          *((_DWORD *)a1 + 124) = v19 + 1;
          *((_DWORD *)a1 + v19 + 125) = v9;
          --v18;
        }
        while (v18 > 1);
      }
      ++v9;
      v5 = *((int *)a1 + 112);
    }
    while (v9 < v5);
    if ((int)v5 >= 1)
      goto LABEL_20;
  }
LABEL_27:
  (*(void (**)(uint64_t *))a1[78])(a1);
  result = (*(uint64_t (**)(uint64_t *))a1[74])(a1);
  *(_QWORD *)a1[76] = *(_QWORD *)(a1[74] + 8);
  return result;
}

uint64_t finish_input_pass(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 624) + 16))();
  **(_QWORD **)(a1 + 608) = consume_markers;
  return result;
}

uint64_t (**jinit_d_main_controller(uint64_t *a1, int a2))(uint64_t result, int a2)
{
  uint64_t (**result)(uint64_t, int);
  uint64_t (**v5)(uint64_t, int);
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t (**v17)(uint64_t, int);
  uint64_t v18;
  uint64_t (**v19)(uint64_t, int);
  _DWORD *v20;

  result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(void))a1[1])();
  v5 = result;
  a1[73] = (uint64_t)result;
  *result = start_pass_main;
  if (a2)
  {
    v6 = *a1;
    *(_DWORD *)(v6 + 40) = 3;
    result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *))v6)(a1);
  }
  v7 = *((_DWORD *)a1 + 107);
  if (*(_DWORD *)(a1[80] + 16))
  {
    if (v7 <= 1)
    {
      v8 = *a1;
      *(_DWORD *)(v8 + 40) = 48;
      (*(void (**)(uint64_t *))v8)(a1);
      v7 = *((_DWORD *)a1 + 107);
    }
    v9 = a1[73];
    result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 16 * *((int *)a1 + 14));
    v10 = *((int *)a1 + 14);
    *(_QWORD *)(v9 + 112) = result;
    *(_QWORD *)(v9 + 120) = &result[v10];
    if ((int)v10 >= 1)
    {
      v11 = 0;
      v12 = v7 + 4;
      v13 = (int *)(a1[38] + 40);
      do
      {
        v14 = *(v13 - 7);
        v15 = *v13;
        v13 += 24;
        v16 = v15 * v14 / *((_DWORD *)a1 + 107);
        result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 16 * v16 * v12);
        v17 = &result[v16];
        *(_QWORD *)(*(_QWORD *)(v9 + 112) + 8 * v11) = v17;
        *(_QWORD *)(*(_QWORD *)(v9 + 120) + 8 * v11++) = &v17[v16 * v12];
        v10 = *((int *)a1 + 14);
      }
      while (v11 < v10);
    }
    v7 = *((_DWORD *)a1 + 107) + 2;
  }
  else
  {
    *((_DWORD *)v5 + 25) = v7;
    LODWORD(v10) = *((_DWORD *)a1 + 14);
  }
  if ((int)v10 >= 1)
  {
    v18 = 0;
    v19 = v5 + 2;
    v20 = (_DWORD *)(a1[38] + 40);
    do
    {
      result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, _QWORD, _QWORD))(a1[1] + 16))(a1, 1, (*(v20 - 1) * *(v20 - 3)), (*v20 * *(v20 - 7) / *((_DWORD *)a1 + 107) * v7));
      v19[v18++] = (uint64_t (*)(uint64_t, int))result;
      v20 += 24;
    }
    while (v18 < *((int *)a1 + 14));
  }
  return result;
}

uint64_t start_pass_main(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = *(_QWORD *)(result + 584);
  if (a2 == 2)
  {
    *(_QWORD *)(v2 + 8) = process_data_crank_post;
  }
  else if (a2)
  {
    v20 = *(_QWORD *)result;
    *(_DWORD *)(v20 + 40) = 3;
    return (*(uint64_t (**)(uint64_t))v20)(result);
  }
  else if (*(_DWORD *)(*(_QWORD *)(result + 640) + 16))
  {
    *(_QWORD *)(v2 + 8) = process_data_context_main;
    v3 = *(unsigned int *)(result + 56);
    if ((int)v3 >= 1)
    {
      v4 = 0;
      v5 = *(_DWORD *)(result + 428);
      v6 = *(_QWORD *)(result + 304);
      do
      {
        v7 = *(_DWORD *)(v6 + 40) * *(_DWORD *)(v6 + 12) / v5;
        v8 = *(_QWORD **)(*(_QWORD *)(v2 + 112) + 8 * v4);
        v9 = *(_QWORD *)(*(_QWORD *)(v2 + 120) + 8 * v4);
        result = *(_QWORD *)(v2 + 8 * v4 + 16);
        v10 = (v7 * (v5 + 2));
        if ((int)v10 >= 1)
        {
          v11 = *(uint64_t **)(v2 + 8 * v4 + 16);
          v12 = *(_QWORD **)(*(_QWORD *)(v2 + 120) + 8 * v4);
          v13 = *(_QWORD **)(*(_QWORD *)(v2 + 112) + 8 * v4);
          do
          {
            v14 = *v11++;
            *v12++ = v14;
            *v13++ = v14;
            --v10;
          }
          while (v10);
        }
        if (v7 >= 1)
        {
          LODWORD(v15) = 2 * v7;
          v16 = v7 * v5;
          v17 = v7 * (v5 - 2);
          if (2 * v7 <= 1)
            v15 = 1;
          else
            v15 = v15;
          do
          {
            *(_QWORD *)(v9 + 8 * v17) = *(_QWORD *)(result + 8 * v16);
            *(_QWORD *)(v9 + 8 * v16) = *(_QWORD *)(result + 8 * v17);
            result += 8;
            v9 += 8;
            --v15;
          }
          while (v15);
          v18 = -(uint64_t)v7;
          do
            v8[v18] = *v8;
          while (!__CFADD__(v18++, 1));
        }
        ++v4;
        v6 += 96;
      }
      while (v4 != v3);
    }
    *(_QWORD *)(v2 + 128) = 0;
    *(_DWORD *)(v2 + 136) = 0;
    *(_DWORD *)(v2 + 104) = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 8) = process_data_simple_main;
    *(_DWORD *)(v2 + 96) = *(_DWORD *)(v2 + 100);
  }
  return result;
}

int32x2_t process_data_context_main(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int32x2_t *v8;
  int32x2_t result;
  __int32 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;

  v8 = *(int32x2_t **)(a1 + 584);
  if (!v8[13].i32[0])
  {
    if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 592) + 24))(a1, *(_QWORD *)&v8[v8[16].i32[0] + 14]))return result;
    v8[13].i32[0] = 1;
    ++v8[17].i32[0];
  }
  v10 = v8[16].i32[1];
  if (!v10)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 428);
    v8[12].i32[0] = 0;
    v8[12].i32[1] = v11 - 1;
    if (v8[17].i32[0] == *(_DWORD *)(a1 + 432))
    {
      v12 = *(unsigned int *)(a1 + 56);
      if ((int)v12 >= 1)
      {
        v13 = 0;
        v14 = *(_DWORD **)(a1 + 304);
        v15 = *(_QWORD *)(a1 + 584);
        v16 = (_QWORD *)(v15 + 8 * *(int *)(v15 + 128) + 112);
        do
        {
          v17 = v14[10] * v14[3];
          v18 = v17 / v11;
          v19 = v14[12] % v17;
          if (!v19)
            v19 = v14[10] * v14[3];
          if (!v13)
            *(_DWORD *)(v15 + 100) = (v19 - 1) / v18 + 1;
          if (v18 >= 1)
          {
            v20 = *(_QWORD *)(*v16 + 8 * v13);
            LODWORD(v21) = 2 * v18;
            v22 = v19 - 1;
            if ((int)v21 <= 1)
              v21 = 1;
            else
              v21 = v21;
            v23 = (_QWORD *)(v20 + 8 * v19);
            do
            {
              *v23++ = *(_QWORD *)(v20 + 8 * v22);
              --v21;
            }
            while (v21);
          }
          ++v13;
          v14 += 24;
        }
        while (v13 != v12);
      }
    }
    v8[16].i32[1] = 1;
    goto LABEL_24;
  }
  if (v10 != 1)
  {
    if (v10 != 2)
      return result;
    (*(void (**)(uint64_t, _QWORD, int32x2_t *, _QWORD, uint64_t, _DWORD *, uint64_t))(*(_QWORD *)(a1 + 600)
                                                                                             + 8))(a1, *(_QWORD *)&v8[v8[16].i32[0] + 14], v8 + 12, v8[12].u32[1], a2, a3, a4);
    if (v8[12].i32[0] < (unsigned __int32)v8[12].i32[1])
      return result;
    v8[16].i32[1] = 0;
    if (*a3 >= a4)
      return result;
    goto LABEL_9;
  }
LABEL_24:
  (*(void (**)(uint64_t, _QWORD, int32x2_t *, _QWORD, uint64_t, _DWORD *, uint64_t))(*(_QWORD *)(a1 + 600) + 8))(a1, *(_QWORD *)&v8[v8[16].i32[0] + 14], v8 + 12, v8[12].u32[1], a2, a3, a4);
  if (v8[12].i32[0] >= (unsigned __int32)v8[12].i32[1])
  {
    v24 = *(_DWORD *)(a1 + 428);
    if (v8[17].i32[0] == 1)
    {
      v25 = *(unsigned int *)(a1 + 56);
      if ((int)v25 >= 1)
      {
        v26 = 0;
        v27 = *(_QWORD *)(a1 + 304);
        v28 = *(_QWORD *)(a1 + 584);
        v29 = v24 + 2;
        do
        {
          v30 = *(_DWORD *)(v27 + 40) * *(_DWORD *)(v27 + 12) / v24;
          if (v30 >= 1)
          {
            v31 = 0;
            v32 = *(_QWORD *)(*(_QWORD *)(v28 + 112) + 8 * v26);
            v33 = *(_QWORD *)(*(_QWORD *)(v28 + 120) + 8 * v26);
            v34 = 8 * (*(_DWORD *)(v27 + 40) * *(_DWORD *)(v27 + 12) / v24);
            v35 = v30 * (v24 + 1);
            v36 = v33 + 8 * v30 * v29;
            v37 = v32 + 8 * v30 * v29;
            v38 = v33 - 8 * v30;
            v39 = v32 - 8 * v30;
            v40 = v33 + 8 * v35;
            v41 = v32 + 8 * v35;
            do
            {
              *(_QWORD *)(v39 + v31) = *(_QWORD *)(v41 + v31);
              *(_QWORD *)(v38 + v31) = *(_QWORD *)(v40 + v31);
              *(_QWORD *)(v37 + v31) = *(_QWORD *)(v32 + v31);
              *(_QWORD *)(v36 + v31) = *(_QWORD *)(v33 + v31);
              v31 += 8;
            }
            while (v34 != v31);
          }
          ++v26;
          v27 += 96;
        }
        while (v26 != v25);
      }
    }
    v42 = v8[16].i32[0] ^ 1;
    v8[13].i32[0] = 0;
    result = vadd_s32(vdup_n_s32(v24), (int32x2_t)0x200000001);
    v8[12] = result;
    v8[16].i32[0] = v42;
    v8[16].i32[1] = 2;
  }
  return result;
}

uint64_t process_data_simple_main(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = a1[73];
  v9 = *(unsigned int *)(v8 + 100);
  if (*(_DWORD *)(v8 + 96) >= v9)
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(a1[74] + 24))(a1, v8 + 16);
    if (!(_DWORD)result)
      return result;
    *(_DWORD *)(v8 + 96) = 0;
    v9 = *(unsigned int *)(v8 + 100);
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1[75] + 8))(a1, v8 + 16, v8 + 96, v9, a2, a3, a4);
}

uint64_t process_data_crank_post(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 600) + 8))();
}

uint64_t jpeg_resync_to_restart(_DWORD *a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1[143];
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(v5 + 40) = 124;
  *(_DWORD *)(v5 + 44) = v4;
  *(_DWORD *)(*(_QWORD *)a1 + 48) = a2;
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 0xFFFFFFFFLL);
  while (1)
  {
    if (v4 >= 192)
    {
      if ((v4 - 216) < 0xFFFFFFF8
        || v4 == (((_BYTE)a2 + 1) & 7 | 0xD0)
        || v4 == (((_BYTE)a2 + 2) & 7 | 0xD0))
      {
        v8 = *(_QWORD *)a1;
        *(_DWORD *)(v8 + 40) = 99;
        *(_DWORD *)(v8 + 44) = v4;
        *(_DWORD *)(*(_QWORD *)a1 + 48) = 3;
        (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 4);
        return 1;
      }
      if (v4 != (((_BYTE)a2 - 1) & 7 | 0xD0) && v4 != ((a2 + 6) & 7 | 0xD0))
        break;
    }
    v6 = *(_QWORD *)a1;
    *(_DWORD *)(v6 + 40) = 99;
    *(_DWORD *)(v6 + 44) = v4;
    *(_DWORD *)(*(_QWORD *)a1 + 48) = 2;
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 4);
    if (!next_marker(a1))
      return 0;
    v4 = a1[143];
  }
  v9 = *(_QWORD *)a1;
  *(_DWORD *)(v9 + 40) = 99;
  *(_DWORD *)(v9 + 44) = v4;
  v7 = 1;
  *(_DWORD *)(*(_QWORD *)a1 + 48) = 1;
  (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 8))(a1, 4);
  a1[143] = 0;
  return v7;
}

uint64_t next_marker(_QWORD *a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  unsigned __int8 *i;
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v2 = (unsigned __int8 **)a1[5];
  v3 = *v2;
  for (i = v2[1]; i; v2[1] = i)
  {
LABEL_4:
    v6 = *v3++;
    --i;
    if (v6 == 255)
    {
      do
      {
        if (!i)
        {
          result = ((uint64_t (*)(_QWORD *))v2[3])(a1);
          if (!(_DWORD)result)
            return result;
          v3 = *v2;
          i = v2[1];
        }
        --i;
        v10 = *v3++;
        v9 = v10;
      }
      while (v10 == 255);
      if (v9)
      {
        v11 = *(_DWORD *)(a1[77] + 36);
        if (v11)
        {
          v12 = *a1;
          *(_DWORD *)(v12 + 40) = 119;
          *(_DWORD *)(v12 + 44) = v11;
          *(_DWORD *)(*a1 + 48) = v9;
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
          *(_DWORD *)(a1[77] + 36) = 0;
        }
        *((_DWORD *)a1 + 143) = v9;
        result = 1;
        *v2 = v3;
        v2[1] = i;
        return result;
      }
      v7 = a1[77];
      v8 = *(_DWORD *)(v7 + 36) + 2;
    }
    else
    {
      v7 = a1[77];
      v8 = *(_DWORD *)(v7 + 36) + 1;
    }
    *(_DWORD *)(v7 + 36) = v8;
    *v2 = v3;
  }
  result = ((uint64_t (*)(_QWORD *))v2[3])(a1);
  if ((_DWORD)result)
  {
    v3 = *v2;
    i = v2[1];
    goto LABEL_4;
  }
  return result;
}

void jinit_marker_reader(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 616) = v2;
  *(_QWORD *)v2 = reset_marker_reader;
  *(_QWORD *)(v2 + 8) = read_markers;
  *(_QWORD *)(v2 + 16) = read_restart_marker;
  *(_QWORD *)(v2 + 40) = skip_variable;
  *(_DWORD *)(v2 + 176) = 0;
  memset_pattern16((void *)(v2 + 48), off_24D93CAA0, 0x80uLL);
  for (i = 0; i != 64; i += 16)
  {
    v4 = (_QWORD *)(v2 + 180 + i);
    *v4 = 0;
    v4[1] = 0;
  }
  *(_QWORD *)(v2 + 48) = get_interesting_appn;
  *(_QWORD *)(v2 + 160) = get_interesting_appn;
  v5 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 572) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 36) = 0;
  *(_QWORD *)(v5 + 248) = 0;
}

uint64_t reset_marker_reader(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 616);
  *(_QWORD *)(result + 304) = 0;
  *(_DWORD *)(result + 172) = 0;
  *(_DWORD *)(result + 572) = 0;
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  *(_QWORD *)(v1 + 248) = 0;
  return result;
}

uint64_t read_markers(uint64_t a1)
{
  int v2;
  uint64_t result;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint8x8_t v32;
  int64_t v33;
  uint64_t i;
  int v35;
  int64_t v36;
  uint64_t v37;
  uint32x4_t v38;
  __n128 v39;
  uint64_t v40;
  uint32x4_t v41;
  uint64_t v42;
  _BYTE *v43;
  int64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 **v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 **v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint16x4_t **v88;
  uint16x4_t *v89;
  uint16x4_t *v90;
  unint64_t v91;
  int *v92;
  unint64_t v93;
  __int16 v94;
  __int16 v95;
  __int16 v96;
  uint64_t v97;
  uint16x4_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint16x4_t v101;
  unint64_t v102;
  unsigned __int8 **v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  int v113;
  int v114;
  unsigned __int8 *v115;
  int v116;
  unsigned __int8 *v117;
  int v118;
  uint64_t v119;
  unsigned __int8 **v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 *v125;
  unsigned int v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  unsigned int v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  int v136;
  unsigned __int8 *v137;
  int v138;
  unsigned __int8 *v139;
  int v140;
  int v141;
  int v142;
  _DWORD *v143;
  int v144;
  int v145;
  int v146;
  int v147;
  unsigned __int8 *v148;
  int v149;
  unsigned __int8 *v150;
  int v151;
  int v152;
  unsigned __int8 *v153;
  int v154;
  unsigned __int8 *v155;
  int v156;
  int v158;
  unsigned __int8 *v159;
  int v160;
  unsigned __int8 *v161;
  int v162;
  int v163;
  unsigned __int8 *v164;
  int v165;
  unsigned __int8 *v166;
  int v167;
  int v169;
  unsigned __int8 *v170;
  int v171;
  unsigned __int8 *v172;
  int v173;
  int v174;
  unsigned __int8 *v175;
  int v176;
  unsigned __int8 *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned __int8 **v183;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  uint64_t v186;
  unsigned __int8 *v187;
  uint64_t v188;
  unsigned int v189;
  unsigned __int8 *v190;
  unsigned __int8 *v191;
  uint64_t v192;
  unsigned int v193;
  unsigned __int8 *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v199;
  unsigned __int8 *v200;
  unsigned __int8 *v201;
  unint64_t v202;
  int v203;
  unsigned __int8 *v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  _DWORD *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 *v213;
  unsigned int v214;
  uint64_t v215;
  char v216;
  unsigned __int8 *v217;
  int v218;
  unsigned __int8 *v219;
  unsigned __int8 *v220;
  int v221;
  unsigned __int8 *v222;
  unsigned __int8 *v223;
  unsigned __int8 *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  _QWORD *v230;
  _BYTE __src[256];
  _BYTE v232[17];
  uint64_t v233;

  v229 = (_QWORD *)(a1 + 340);
  v230 = (_QWORD *)(a1 + 324);
  v233 = *MEMORY[0x24BDAC8D0];
  v228 = (_QWORD *)(a1 + 356);
  v2 = *(_DWORD *)(a1 + 572);
  if (v2)
    goto LABEL_15;
  while (2)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 616) + 24))
    {
      result = next_marker((_QWORD *)a1);
      if (!(_DWORD)result)
        return result;
      v2 = *(_DWORD *)(a1 + 572);
    }
    else
    {
      v4 = *(unsigned __int8 ***)(a1 + 40);
      v5 = v4[1];
      if (!v5)
      {
        result = ((uint64_t (*)(uint64_t))v4[3])(a1);
        if (!(_DWORD)result)
          return result;
        v5 = v4[1];
      }
      v6 = *v4 + 1;
      v7 = **v4;
      v8 = v5 - 1;
      if (v5 == (unsigned __int8 *)1)
      {
        result = ((uint64_t (*)(uint64_t))v4[3])(a1);
        if (!(_DWORD)result)
          return result;
        v6 = *v4;
        v8 = v4[1];
      }
      v10 = *v6;
      v9 = v6 + 1;
      v2 = v10;
      if (v7 != 255 || v2 != 216)
      {
        v11 = *(_QWORD *)a1;
        *(_DWORD *)(v11 + 40) = 55;
        *(_DWORD *)(v11 + 44) = v7;
        *(_DWORD *)(*(_QWORD *)a1 + 48) = v2;
        (**(void (***)(uint64_t))a1)(a1);
      }
      *(_DWORD *)(a1 + 572) = v2;
      *v4 = v9;
      v4[1] = v8 - 1;
    }
LABEL_15:
    switch(v2)
    {
      case 192:
        v15 = (uint64_t *)a1;
        v16 = 1;
        goto LABEL_26;
      case 193:
        v15 = (uint64_t *)a1;
        v16 = 0;
LABEL_26:
        v17 = 0;
        goto LABEL_28;
      case 194:
        v15 = (uint64_t *)a1;
        v16 = 0;
        v17 = 1;
LABEL_28:
        v18 = 0;
        goto LABEL_70;
      case 195:
      case 197:
      case 198:
      case 199:
      case 200:
      case 203:
      case 205:
      case 206:
      case 207:
        v12 = *(_QWORD *)a1;
        v13 = 63;
        goto LABEL_20;
      case 196:
        v19 = *(unsigned __int8 ***)(a1 + 40);
        v20 = v19[1];
        if (v20)
          goto LABEL_32;
        if (!((unsigned int (*)(uint64_t))v19[3])(a1))
          return 0;
        v20 = v19[1];
LABEL_32:
        v22 = *v19 + 1;
        v21 = **v19;
        v23 = v20 - 1;
        if (v23)
          goto LABEL_35;
        if (!((unsigned int (*)(uint64_t))v19[3])(a1))
          return 0;
        v22 = *v19;
        v23 = v19[1];
LABEL_35:
        v24 = v23 - 1;
        v26 = *v22;
        v25 = v22 + 1;
        v27 = (v21 << 8) | v26;
        v28 = v27 - 2;
        if (v27 < 0x13)
          goto LABEL_64;
        while (2)
        {
          if (v24)
            goto LABEL_39;
          if (((unsigned int (*)(uint64_t))v19[3])(a1))
          {
            v25 = *v19;
            v24 = v19[1];
LABEL_39:
            v30 = *v25++;
            v29 = v30;
            v31 = *(_QWORD *)a1;
            *(_DWORD *)(v31 + 40) = 82;
            *(_DWORD *)(v31 + 44) = v30;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
            LODWORD(v33) = 0;
            v232[0] = 0;
            --v24;
            for (i = 1; i != 17; ++i)
            {
              if (!v24)
              {
                if (!((unsigned int (*)(uint64_t))v19[3])(a1))
                  return 0;
                v25 = *v19;
                v24 = v19[1];
              }
              v35 = *v25++;
              v232[i] = v35;
              v33 = (v33 + v35);
              --v24;
            }
            v36 = v28 - 17;
            v37 = *(_QWORD *)a1;
            v32.i32[0] = *(_DWORD *)&v232[1];
            v38 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v32));
            *(uint32x4_t *)(v37 + 44) = v38;
            v38.i32[0] = *(_DWORD *)&v232[5];
            *(uint32x4_t *)(v37 + 60) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v38.i8));
            *(_DWORD *)(v37 + 40) = 88;
            v39 = ((__n128 (*)(uint64_t, uint64_t))*(_QWORD *)(v37 + 8))(a1, 2);
            v40 = *(_QWORD *)a1;
            v39.n128_u32[0] = *(_DWORD *)&v232[9];
            v41 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v39.n128_u64[0]));
            *(uint32x4_t *)(v40 + 44) = v41;
            v41.i32[0] = *(_DWORD *)&v232[13];
            *(uint32x4_t *)(v40 + 60) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v41.i8));
            *(_DWORD *)(v40 + 40) = 88;
            (*(void (**)(uint64_t, uint64_t))(v40 + 8))(a1, 2);
            if (v33 > 0x100 || v36 < v33)
            {
              v42 = *(_QWORD *)a1;
              *(_DWORD *)(v42 + 40) = 9;
              (*(void (**)(uint64_t))v42)(a1);
              if (!(_DWORD)v33)
                goto LABEL_54;
            }
            else if (!(_DWORD)v33)
            {
              goto LABEL_54;
            }
            v43 = __src;
            v44 = v33;
            do
            {
              if (!v24)
              {
                if (!((unsigned int (*)(uint64_t))v19[3])(a1))
                  return 0;
                v25 = *v19;
                v24 = v19[1];
              }
              --v24;
              v45 = *v25++;
              *v43++ = v45;
              --v44;
            }
            while (v44);
LABEL_54:
            v46 = v29 - 16;
            if ((v29 & 0x10) != 0)
            {
              v47 = a1 + 8 * (v29 - 16) + 264;
            }
            else
            {
              v46 = v29;
              v47 = a1 + 8 * v29 + 232;
            }
            if (v46 >= 4)
            {
              v48 = *(_QWORD *)a1;
              *(_DWORD *)(v48 + 40) = 31;
              *(_DWORD *)(v48 + 44) = v46;
              (**(void (***)(uint64_t))a1)(a1);
            }
            v49 = *(_QWORD *)v47;
            if (!*(_QWORD *)v47)
            {
              v49 = jpeg_alloc_huff_table(a1);
              *(_QWORD *)v47 = v49;
            }
            *(_OWORD *)v49 = *(_OWORD *)v232;
            *(_BYTE *)(v49 + 16) = v232[16];
            if ((_DWORD)v33)
              memcpy((void *)(*(_QWORD *)v47 + 17), __src, v33);
            v28 = v36 - v33;
            if (v36 - v33 <= 16)
            {
LABEL_64:
              if (v28)
              {
                v50 = *(_QWORD *)a1;
                *(_DWORD *)(v50 + 40) = 12;
                (*(void (**)(uint64_t))v50)(a1);
              }
              *v19 = v25;
              v19[1] = v24;
              goto LABEL_274;
            }
            continue;
          }
          return 0;
        }
      case 201:
        v15 = (uint64_t *)a1;
        v16 = 0;
        v17 = 0;
        goto LABEL_69;
      case 202:
        v15 = (uint64_t *)a1;
        v16 = 0;
        v17 = 1;
LABEL_69:
        v18 = 1;
LABEL_70:
        result = get_sof(v15, v16, v17, v18);
        if (!(_DWORD)result)
          return result;
        goto LABEL_274;
      case 204:
        v51 = *(unsigned __int8 ***)(a1 + 40);
        v52 = v51[1];
        if (v52)
          goto LABEL_75;
        result = ((uint64_t (*)(uint64_t))v51[3])(a1);
        if (!(_DWORD)result)
          return result;
        v52 = v51[1];
LABEL_75:
        v54 = *v51 + 1;
        v53 = **v51;
        v55 = v52 - 1;
        if (v55)
          goto LABEL_78;
        result = ((uint64_t (*)(uint64_t))v51[3])(a1);
        if (!(_DWORD)result)
          return result;
        v54 = *v51;
        v55 = v51[1];
LABEL_78:
        v57 = *v54;
        v56 = v54 + 1;
        v58 = (v53 << 8) | v57;
        v59 = v55 - 1;
        if (v58 >= 3)
        {
          while (1)
          {
            if (!v59)
            {
              result = ((uint64_t (*)(uint64_t))v51[3])(a1);
              if (!(_DWORD)result)
                return result;
              v56 = *v51;
              v59 = v51[1];
            }
            v62 = *v56;
            v60 = v56 + 1;
            v61 = v62;
            v63 = v59 - 1;
            if (!v63)
            {
              result = ((uint64_t (*)(uint64_t))v51[3])(a1);
              if (!(_DWORD)result)
                return result;
              v60 = *v51;
              v63 = v51[1];
            }
            v64 = *v60;
            v65 = *(_QWORD *)a1;
            *(_DWORD *)(v65 + 40) = 81;
            *(_DWORD *)(v65 + 44) = v61;
            *(_DWORD *)(*(_QWORD *)a1 + 48) = v64;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
            if (v61 < 0x20)
            {
              if (v61 < 0x10)
              {
                v68 = a1 + v61;
                *(_BYTE *)(v68 + 324) = v64 & 0xF;
                *(_BYTE *)(v68 + 340) = v64 >> 4;
                if ((v64 & 0xF) > v64 >> 4)
                {
                  v69 = *(_QWORD *)a1;
                  *(_DWORD *)(v69 + 40) = 30;
                  *(_DWORD *)(v69 + 44) = v64;
                  (**(void (***)(uint64_t))a1)(a1);
                }
                goto LABEL_89;
              }
            }
            else
            {
              v66 = *(_QWORD *)a1;
              *(_DWORD *)(v66 + 40) = 29;
              *(_DWORD *)(v66 + 44) = v61;
              (**(void (***)(uint64_t))a1)(a1);
            }
            *(_BYTE *)(a1 + (v61 - 16) + 356) = v64;
LABEL_89:
            v56 = v60 + 1;
            v59 = v63 - 1;
            v58 -= 2;
            v67 = v58 - 2;
            if (v58 <= 2)
              goto LABEL_269;
          }
        }
        v67 = v58 - 2;
LABEL_269:
        if (v67)
        {
          v180 = *(_QWORD *)a1;
          *(_DWORD *)(v180 + 40) = 12;
          (*(void (**)(uint64_t))v180)(a1);
        }
        *v51 = v56;
        v51[1] = v59;
LABEL_274:
        *(_DWORD *)(a1 + 572) = 0;
        continue;
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
        goto LABEL_22;
      case 216:
        v70 = *(_QWORD *)a1;
        *(_DWORD *)(v70 + 40) = 104;
        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(a1, 1);
        v71 = *(_QWORD *)(a1 + 616);
        if (*(_DWORD *)(v71 + 24))
        {
          v72 = *(_QWORD *)a1;
          *(_DWORD *)(v72 + 40) = 64;
          (*(void (**)(uint64_t))v72)(a1);
          v71 = *(_QWORD *)(a1 + 616);
        }
        *v230 = 0;
        v230[1] = 0;
        *v229 = 0x101010101010101;
        v229[1] = 0x101010101010101;
        *v228 = 0x505050505050505;
        v228[1] = 0x505050505050505;
        *(_QWORD *)(a1 + 372) = 0;
        *(_DWORD *)(a1 + 60) = 0;
        *(_QWORD *)(a1 + 396) = 0;
        *(_WORD *)(a1 + 380) = 257;
        *(_BYTE *)(a1 + 382) = 0;
        *(_QWORD *)(a1 + 384) = 65537;
        *(_BYTE *)(a1 + 392) = 0;
        *(_DWORD *)(v71 + 24) = 1;
        goto LABEL_274;
      case 217:
        v182 = *(_QWORD *)a1;
        *(_DWORD *)(v182 + 40) = 87;
        (*(void (**)(uint64_t, uint64_t))(v182 + 8))(a1, 1);
        *(_DWORD *)(a1 + 572) = 0;
        return 2;
      case 218:
        v183 = *(unsigned __int8 ***)(a1 + 40);
        v184 = *v183;
        v185 = v183[1];
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 616) + 28))
        {
          v186 = *(_QWORD *)a1;
          *(_OWORD *)(v186 + 60) = unk_2186F987A;
          *(_OWORD *)(v186 + 76) = xmmword_2186F988A;
          *(_OWORD *)(v186 + 92) = unk_2186F989A;
          *(_OWORD *)(v186 + 108) = xmmword_2186F98AA;
          *(_DWORD *)(v186 + 40) = 60;
          *(_OWORD *)(v186 + 44) = xmmword_2186F986A;
          (**(void (***)(uint64_t))a1)(a1);
        }
        if (v185)
          goto LABEL_283;
        result = ((uint64_t (*)(uint64_t))v183[3])(a1);
        if (!(_DWORD)result)
          return result;
        v184 = *v183;
        v185 = v183[1];
LABEL_283:
        v189 = *v184;
        v187 = v184 + 1;
        v188 = v189;
        v190 = v185 - 1;
        if (v185 != (unsigned __int8 *)1)
          goto LABEL_286;
        result = ((uint64_t (*)(uint64_t))v183[3])(a1);
        if (!(_DWORD)result)
          return result;
        v187 = *v183;
        v190 = v183[1];
LABEL_286:
        v193 = *v187;
        v191 = v187 + 1;
        v192 = v193;
        v194 = v190 - 1;
        if (v190 != (unsigned __int8 *)1)
          goto LABEL_289;
        result = ((uint64_t (*)(uint64_t))v183[3])(a1);
        if (!(_DWORD)result)
          return result;
        v191 = *v183;
        v194 = v183[1];
LABEL_289:
        v195 = (v188 << 8) | v192;
        v196 = *v191;
        v197 = *(_QWORD *)a1;
        *(_DWORD *)(v197 + 40) = 105;
        *(_DWORD *)(v197 + 44) = v196;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
        if (v195 != 2 * v196 + 6 || v196 > 4)
          goto LABEL_294;
        if ((_DWORD)v196)
        {
          *(_DWORD *)(a1 + 448) = v196;
          v200 = v191 + 1;
          v201 = v194 - 1;
          goto LABEL_298;
        }
        if (*(_DWORD *)(a1 + 316))
        {
          *(_DWORD *)(a1 + 448) = 0;
          v200 = v191 + 1;
          v201 = v194 - 1;
        }
        else
        {
LABEL_294:
          v199 = *(_QWORD *)a1;
          *(_DWORD *)(v199 + 40) = 12;
          (*(void (**)(uint64_t))v199)(a1);
          *(_DWORD *)(a1 + 448) = v196;
          v200 = v191 + 1;
          v201 = v194 - 1;
          if ((_DWORD)v196)
          {
LABEL_298:
            v202 = 0;
            while (1)
            {
              if (!v201)
              {
                result = ((uint64_t (*)(uint64_t))v183[3])(a1);
                if (!(_DWORD)result)
                  return result;
                v200 = *v183;
                v201 = v183[1];
              }
              v205 = *v200;
              v204 = v200 + 1;
              v203 = v205;
              if (v202)
              {
                v206 = 0;
                while (**(_DWORD **)(a1 + 456 + 8 * v206) != v203)
                {
                  if (v202 == ++v206)
                    goto LABEL_313;
                }
                v207 = **(_DWORD **)(a1 + 456);
                if (v202 >= 2)
                {
                  v208 = 0;
                  do
                  {
                    if (**(_DWORD **)(a1 + 464 + 8 * v208) > v207)
                      v207 = **(_DWORD **)(a1 + 464 + 8 * v208);
                    ++v208;
                  }
                  while (v202 - 1 != v208);
                }
                v203 = v207 + 1;
              }
LABEL_313:
              v209 = *(_DWORD **)(a1 + 304);
              v210 = *(_DWORD *)(a1 + 56);
              if (v210 >= 1)
              {
                v211 = (uint64_t)&v209[24 * (v210 - 1) + 24];
                do
                {
                  if (v203 == *v209)
                    goto LABEL_319;
                  v209 += 24;
                  --v210;
                }
                while (v210);
                v209 = (_DWORD *)v211;
              }
              v212 = *(_QWORD *)a1;
              *(_DWORD *)(v212 + 40) = 4;
              *(_DWORD *)(v212 + 44) = v203;
              (**(void (***)(uint64_t))a1)(a1);
LABEL_319:
              *(_QWORD *)(a1 + 8 * v202 + 456) = v209;
              v213 = v201 - 1;
              if (!v213)
              {
                result = ((uint64_t (*)(uint64_t))v183[3])(a1);
                if (!(_DWORD)result)
                  return result;
                v204 = *v183;
                v213 = v183[1];
              }
              v214 = *v204;
              v200 = v204 + 1;
              v209[5] = v214 >> 4;
              v209[6] = v214 & 0xF;
              v215 = *(_QWORD *)a1;
              *(_DWORD *)(v215 + 44) = *v209;
              *(_DWORD *)(v215 + 48) = v209[5];
              *(_DWORD *)(v215 + 52) = v209[6];
              *(_DWORD *)(v215 + 40) = 106;
              (*(void (**)(uint64_t, uint64_t))(v215 + 8))(a1, 1);
              ++v202;
              v201 = v213 - 1;
              if (v202 == v196)
              {
                v216 = 0;
                goto LABEL_327;
              }
            }
          }
        }
        v216 = 1;
LABEL_327:
        if (v201)
          goto LABEL_330;
        result = ((uint64_t (*)(uint64_t))v183[3])(a1);
        if (!(_DWORD)result)
          return result;
        v200 = *v183;
        v201 = v183[1];
LABEL_330:
        v218 = *v200;
        v217 = v200 + 1;
        *(_DWORD *)(a1 + 540) = v218;
        v219 = v201 - 1;
        if (v201 != (unsigned __int8 *)1)
          goto LABEL_333;
        result = ((uint64_t (*)(uint64_t))v183[3])(a1);
        if (!(_DWORD)result)
          return result;
        v217 = *v183;
        v219 = v183[1];
LABEL_333:
        v221 = *v217;
        v220 = v217 + 1;
        *(_DWORD *)(a1 + 544) = v221;
        v222 = v219 - 1;
        if (v222)
          goto LABEL_336;
        result = ((uint64_t (*)(uint64_t))v183[3])(a1);
        if ((_DWORD)result)
        {
          v220 = *v183;
          v222 = v183[1];
LABEL_336:
          v223 = v222 - 1;
          v225 = *v220;
          v224 = v220 + 1;
          *(_DWORD *)(a1 + 548) = v225 >> 4;
          *(_DWORD *)(a1 + 552) = v225 & 0xF;
          v226 = *(_QWORD *)a1;
          *(_DWORD *)(v226 + 44) = *(_DWORD *)(a1 + 540);
          *(_DWORD *)(v226 + 48) = *(_DWORD *)(a1 + 544);
          *(_DWORD *)(v226 + 52) = *(_DWORD *)(a1 + 548);
          *(_DWORD *)(v226 + 56) = *(_DWORD *)(a1 + 552);
          *(_DWORD *)(v226 + 40) = 107;
          (*(void (**)(uint64_t, uint64_t))(v226 + 8))(a1, 1);
          *(_DWORD *)(*(_QWORD *)(a1 + 616) + 32) = 0;
          if ((v216 & 1) == 0)
            ++*(_DWORD *)(a1 + 172);
          *v183 = v224;
          v183[1] = v223;
          result = 1;
          *(_DWORD *)(a1 + 572) = 0;
        }
        return result;
      case 219:
        v73 = *(unsigned __int8 ***)(a1 + 40);
        v74 = v73[1];
        if (v74)
          goto LABEL_99;
        result = ((uint64_t (*)(uint64_t))v73[3])(a1);
        if (!(_DWORD)result)
          return result;
        v74 = v73[1];
LABEL_99:
        v76 = *v73 + 1;
        v75 = **v73;
        v77 = v74 - 1;
        if (v77)
          goto LABEL_102;
        result = ((uint64_t (*)(uint64_t))v73[3])(a1);
        if (!(_DWORD)result)
          return result;
        v76 = *v73;
        v77 = v73[1];
LABEL_102:
        v78 = v77 - 1;
        v80 = *v76;
        v79 = v76 + 1;
        v81 = (v75 << 8) | v80;
        v82 = v81 - 2;
        if (v81 < 3)
          goto LABEL_265;
        break;
      case 220:
        result = skip_variable((_QWORD *)a1);
        if (!(_DWORD)result)
          return result;
        goto LABEL_274;
      case 221:
        v103 = *(unsigned __int8 ***)(a1 + 40);
        v104 = v103[1];
        if (v104)
          goto LABEL_158;
        result = ((uint64_t (*)(uint64_t))v103[3])(a1);
        if (!(_DWORD)result)
          return result;
        v104 = v103[1];
LABEL_158:
        v105 = *v103 + 1;
        v106 = **v103;
        v107 = v104 - 1;
        if (v104 != (unsigned __int8 *)1)
          goto LABEL_161;
        result = ((uint64_t (*)(uint64_t))v103[3])(a1);
        if (!(_DWORD)result)
          return result;
        v105 = *v103;
        v107 = v103[1];
LABEL_161:
        v109 = *v105;
        v108 = v105 + 1;
        if (((v106 << 8) | v109) != 4)
        {
          v110 = *(_QWORD *)a1;
          *(_DWORD *)(v110 + 40) = 12;
          (*(void (**)(uint64_t))v110)(a1);
        }
        v111 = v107 - 1;
        if (v107 != (unsigned __int8 *)1)
          goto LABEL_166;
        result = ((uint64_t (*)(uint64_t))v103[3])(a1);
        if (!(_DWORD)result)
          return result;
        v108 = *v103;
        v111 = v103[1];
LABEL_166:
        v114 = *v108;
        v112 = v108 + 1;
        v113 = v114;
        v115 = v111 - 1;
        if (v115)
          goto LABEL_169;
        result = ((uint64_t (*)(uint64_t))v103[3])(a1);
        if (!(_DWORD)result)
          return result;
        v112 = *v103;
        v115 = v103[1];
LABEL_169:
        v116 = v113 << 8;
        v117 = v115 - 1;
        v118 = v116 | *v112;
        v119 = *(_QWORD *)a1;
        *(_DWORD *)(v119 + 40) = 84;
        *(_DWORD *)(v119 + 44) = v118;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
        *(_DWORD *)(a1 + 372) = v118;
        *v103 = v112 + 1;
        v103[1] = v117;
        goto LABEL_274;
      case 222:
      case 223:
      case 240:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 249:
      case 250:
      case 251:
      case 252:
      case 253:
        goto LABEL_23;
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 616) + 8 * (v2 - 224) + 48))(a1);
        goto LABEL_17;
      case 248:
        v120 = *(unsigned __int8 ***)(a1 + 40);
        v121 = *v120;
        v122 = v120[1];
        if (!*(_DWORD *)(*(_QWORD *)(a1 + 616) + 28))
        {
          v123 = *(_QWORD *)a1;
          *(_DWORD *)(v123 + 40) = 60;
          *(_OWORD *)(v123 + 60) = unk_2186F98CB;
          *(_OWORD *)(v123 + 76) = xmmword_2186F98DB;
          *(_OWORD *)(v123 + 92) = unk_2186F98EB;
          *(_OWORD *)(v123 + 108) = xmmword_2186F98FB;
          *(_OWORD *)(v123 + 44) = xmmword_2186F98BB;
          (**(void (***)(uint64_t))a1)(a1);
        }
        if (*(int *)(a1 + 56) < 3)
          goto LABEL_272;
        if (v122)
          goto LABEL_176;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_176:
        v126 = *v121;
        v125 = v121 + 1;
        v124 = v126;
        v127 = v122 - 1;
        if (v122 != (unsigned __int8 *)1)
          goto LABEL_179;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v125 = *v120;
        v127 = v120[1];
LABEL_179:
        v129 = *v125;
        v128 = v125 + 1;
        if (((v124 << 8) | v129) != 0x18)
        {
          v130 = *(_QWORD *)a1;
          *(_DWORD *)(v130 + 40) = 12;
          (*(void (**)(uint64_t))v130)(a1);
        }
        v131 = v127 - 1;
        if (v131)
          goto LABEL_184;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v128 = *v120;
        v131 = v120[1];
LABEL_184:
        v133 = *v128;
        v132 = v128 + 1;
        if (v133 != 13)
        {
          v134 = *(_QWORD *)a1;
          *(_DWORD *)(v134 + 40) = 70;
          *(_DWORD *)(v134 + 44) = *(_DWORD *)(a1 + 572);
          (**(void (***)(uint64_t))a1)(a1);
        }
        v135 = v131 - 1;
        if (v131 != (unsigned __int8 *)1)
          goto LABEL_189;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v132 = *v120;
        v135 = v120[1];
LABEL_189:
        v138 = *v132;
        v137 = v132 + 1;
        v136 = v138;
        v139 = v135 - 1;
        if (v139)
          goto LABEL_192;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v137 = *v120;
        v139 = v120[1];
LABEL_192:
        v122 = v139 - 1;
        v140 = *v137;
        v121 = v137 + 1;
        if (((v136 << 8) | v140) != 0xFF)
          goto LABEL_272;
        if (v139 != (unsigned __int8 *)1)
          goto LABEL_196;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_196:
        --v122;
        v141 = *v121++;
        if (v141 != 3)
          goto LABEL_272;
        if (v122)
          goto LABEL_200;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_200:
        --v122;
        v142 = *v121++;
        v143 = *(_DWORD **)(a1 + 304);
        if (v143[24] != v142)
          goto LABEL_272;
        if (v122)
          goto LABEL_204;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
        v143 = *(_DWORD **)(a1 + 304);
LABEL_204:
        --v122;
        v144 = *v121++;
        if (*v143 != v144)
          goto LABEL_272;
        if (v122)
          goto LABEL_208;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
        v143 = *(_DWORD **)(a1 + 304);
LABEL_208:
        --v122;
        v145 = *v121++;
        if (v143[48] != v145)
          goto LABEL_272;
        if (v122)
          goto LABEL_212;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_212:
        --v122;
        v146 = *v121++;
        if (v146 != 128)
          goto LABEL_272;
        if (v122)
          goto LABEL_216;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_216:
        v149 = *v121;
        v148 = v121 + 1;
        v147 = v149;
        v150 = v122 - 1;
        if (v122 != (unsigned __int8 *)1)
          goto LABEL_219;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v148 = *v120;
        v150 = v120[1];
LABEL_219:
        v122 = v150 - 1;
        v151 = *v148;
        v121 = v148 + 1;
        if ((v147 << 8) | v151)
          goto LABEL_272;
        if (v150 != (unsigned __int8 *)1)
          goto LABEL_223;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_223:
        v154 = *v121;
        v153 = v121 + 1;
        v152 = v154;
        v155 = v122 - 1;
        if (v122 != (unsigned __int8 *)1)
          goto LABEL_226;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v153 = *v120;
        v155 = v120[1];
LABEL_226:
        v122 = v155 - 1;
        v156 = *v153;
        v121 = v153 + 1;
        if ((v152 << 8) | v156)
          goto LABEL_272;
        if (v155 != (unsigned __int8 *)1)
          goto LABEL_230;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_230:
        --v122;
        if (*v121++)
          goto LABEL_272;
        if (v122)
          goto LABEL_234;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_234:
        v160 = *v121;
        v159 = v121 + 1;
        v158 = v160;
        v161 = v122 - 1;
        if (v122 != (unsigned __int8 *)1)
          goto LABEL_237;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v159 = *v120;
        v161 = v120[1];
LABEL_237:
        v122 = v161 - 1;
        v162 = *v159;
        v121 = v159 + 1;
        if (((v158 << 8) | v162) != 1)
          goto LABEL_272;
        if (v161 != (unsigned __int8 *)1)
          goto LABEL_241;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_241:
        v165 = *v121;
        v164 = v121 + 1;
        v163 = v165;
        v166 = v122 - 1;
        if (v122 != (unsigned __int8 *)1)
          goto LABEL_244;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v164 = *v120;
        v166 = v120[1];
LABEL_244:
        v122 = v166 - 1;
        v167 = *v164;
        v121 = v164 + 1;
        if ((v163 << 8) | v167)
          goto LABEL_272;
        if (v166 != (unsigned __int8 *)1)
          goto LABEL_248;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_248:
        --v122;
        if (*v121++)
          goto LABEL_272;
        if (v122)
          goto LABEL_252;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_252:
        v171 = *v121;
        v170 = v121 + 1;
        v169 = v171;
        v172 = v122 - 1;
        if (v122 != (unsigned __int8 *)1)
          goto LABEL_255;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v170 = *v120;
        v172 = v120[1];
LABEL_255:
        v122 = v172 - 1;
        v173 = *v170;
        v121 = v170 + 1;
        if (((v169 << 8) | v173) != 1)
          goto LABEL_272;
        if (v172 != (unsigned __int8 *)1)
          goto LABEL_259;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v121 = *v120;
        v122 = v120[1];
LABEL_259:
        v176 = *v121;
        v175 = v121 + 1;
        v174 = v176;
        v177 = v122 - 1;
        if (v122 != (unsigned __int8 *)1)
          goto LABEL_262;
        result = ((uint64_t (*)(uint64_t))v120[3])(a1);
        if (!(_DWORD)result)
          return result;
        v175 = *v120;
        v177 = v120[1];
LABEL_262:
        v122 = v177 - 1;
        v178 = *v175;
        v121 = v175 + 1;
        if ((v174 << 8) | v178)
        {
LABEL_272:
          v181 = *(_QWORD *)a1;
          *(_DWORD *)(v181 + 40) = 28;
          (*(void (**)(uint64_t))v181)(a1);
        }
        *(_DWORD *)(a1 + 396) = 1;
        *v120 = v121;
        v120[1] = v122;
        goto LABEL_274;
      case 254:
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 616) + 40))(a1);
LABEL_17:
        if (!(_DWORD)result)
          return result;
        goto LABEL_274;
      default:
        if (v2 == 1)
        {
LABEL_22:
          v14 = *(_QWORD *)a1;
          *(_DWORD *)(v14 + 40) = 94;
          *(_DWORD *)(v14 + 44) = v2;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
        }
        else
        {
LABEL_23:
          v12 = *(_QWORD *)a1;
          v13 = 70;
LABEL_20:
          *(_DWORD *)(v12 + 40) = v13;
          *(_DWORD *)(v12 + 44) = v2;
          (**(void (***)(uint64_t))a1)(a1);
        }
        goto LABEL_274;
    }
    break;
  }
  while (1)
  {
    if (!v78)
    {
      result = ((uint64_t (*)(uint64_t))v73[3])(a1);
      if (!(_DWORD)result)
        return result;
      v79 = *v73;
      v78 = v73[1];
    }
    v83 = *v79;
    v84 = v83 & 0xF;
    v85 = *(_QWORD *)a1;
    *(_DWORD *)(v85 + 40) = 83;
    *(_DWORD *)(v85 + 44) = v83 & 0xF;
    *(_DWORD *)(*(_QWORD *)a1 + 48) = v83 >> 4;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, 1);
    if ((v83 & 0xF) >= 4)
    {
      v86 = *(_QWORD *)a1;
      *(_DWORD *)(v86 + 40) = 32;
      *(_DWORD *)(v86 + 44) = v84;
      (**(void (***)(uint64_t))a1)(a1);
    }
    v87 = a1 + 8 * v84;
    v90 = *(uint16x4_t **)(v87 + 200);
    v88 = (uint16x4_t **)(v87 + 200);
    v89 = v90;
    if (!v90)
    {
      v89 = (uint16x4_t *)jpeg_alloc_quant_table(a1);
      *v88 = v89;
    }
    v91 = v82 - 1;
    v227 = v82 - 1;
    if (v83 >= 0x10)
    {
      if ((unint64_t)v82 > 0x80)
      {
LABEL_120:
        v91 = 64;
LABEL_121:
        v92 = &jpeg_natural_order;
        goto LABEL_122;
      }
      memset_pattern16(v89, &unk_2186F9910, 0x80uLL);
      v91 >>= 1;
    }
    else
    {
      if ((unint64_t)v82 > 0x40)
        goto LABEL_120;
      memset_pattern16(v89, &unk_2186F9910, 0x80uLL);
    }
    if ((int)v91 > 24)
    {
      switch((_DWORD)v91)
      {
        case 0x19:
          v92 = &jpeg_natural_order5;
          goto LABEL_122;
        case 0x24:
          v92 = &jpeg_natural_order6;
          goto LABEL_122;
        case 0x31:
          v92 = &jpeg_natural_order7;
          goto LABEL_122;
      }
      goto LABEL_121;
    }
    if ((_DWORD)v91 == 4)
    {
      v92 = &jpeg_natural_order2;
      goto LABEL_122;
    }
    if ((_DWORD)v91 == 9)
    {
      v92 = &jpeg_natural_order3;
      goto LABEL_122;
    }
    if ((_DWORD)v91 != 16)
      goto LABEL_121;
    v92 = &jpeg_natural_order4;
LABEL_122:
    ++v79;
    --v78;
    if (v91)
    {
      v93 = v91;
      do
      {
        if (v83 >= 0x10)
        {
          if (!v78)
          {
            result = ((uint64_t (*)(uint64_t))v73[3])(a1);
            if (!(_DWORD)result)
              return result;
            v79 = *v73;
            v78 = v73[1];
          }
          v96 = *v79++;
          v95 = v96;
          if (!--v78)
          {
            result = ((uint64_t (*)(uint64_t))v73[3])(a1);
            if (!(_DWORD)result)
              return result;
            v79 = *v73;
            v78 = v73[1];
          }
          v94 = (v95 << 8) | *v79;
        }
        else
        {
          if (!v78)
          {
            result = ((uint64_t (*)(uint64_t))v73[3])(a1);
            if (!(_DWORD)result)
              return result;
            v79 = *v73;
            v78 = v73[1];
          }
          v94 = *v79;
        }
        v97 = *v92++;
        v89->i16[v97] = v94;
        ++v79;
        --v78;
        --v93;
      }
      while (v93);
    }
    if (*(int *)(*(_QWORD *)a1 + 124) >= 2)
    {
      v98 = v89 + 1;
      v99 = -8;
      do
      {
        v100 = *(_QWORD *)a1;
        *(uint32x4_t *)(v100 + 44) = vmovl_u16(v98[-1]);
        v101 = *v98;
        v98 += 2;
        *(uint32x4_t *)(v100 + 60) = vmovl_u16(v101);
        *(_DWORD *)(v100 + 40) = 95;
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(a1, 2);
        v99 += 8;
      }
      while (v99 < 0x38);
    }
    if (v83 >= 0x10)
      v102 = v91;
    else
      v102 = 0;
    v82 = v227 - v91 - v102;
    if (v82 <= 0)
    {
LABEL_265:
      if (v82)
      {
        v179 = *(_QWORD *)a1;
        *(_DWORD *)(v179 + 40) = 12;
        (*(void (**)(uint64_t))v179)(a1);
      }
      *v73 = v79;
      v73[1] = v78;
      goto LABEL_274;
    }
  }
}

uint64_t read_restart_marker(uint64_t *a1)
{
  int v2;
  uint64_t result;
  int v4;
  uint64_t v5;

  v2 = *((_DWORD *)a1 + 143);
  if (!v2)
  {
    result = next_marker(a1);
    if (!(_DWORD)result)
      return result;
    v2 = *((_DWORD *)a1 + 143);
  }
  v4 = *(_DWORD *)(a1[77] + 32);
  if (v2 == v4 + 208)
  {
    v5 = *a1;
    *(_DWORD *)(v5 + 40) = 100;
    *(_DWORD *)(v5 + 44) = v4;
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 3);
    *((_DWORD *)a1 + 143) = 0;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t *))(a1[5] + 40))(a1);
    if (!(_DWORD)result)
      return result;
  }
  *(_DWORD *)(a1[77] + 32) = (*(_DWORD *)(a1[77] + 32) + 1) & 7;
  return 1;
}

uint64_t skip_variable(_QWORD *a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v2 = (unsigned __int8 **)a1[5];
  v3 = v2[1];
  if (!v3)
  {
    if (!((unsigned int (*)(_QWORD *))v2[3])(a1))
      return 0;
    v3 = v2[1];
  }
  v5 = *v2 + 1;
  v4 = **v2;
  v6 = v3 - 1;
  if (v6)
    goto LABEL_7;
  if (!((unsigned int (*)(_QWORD *))v2[3])(a1))
    return 0;
  v5 = *v2;
  v6 = v2[1];
LABEL_7:
  v7 = v6 - 1;
  v8 = (v4 << 8) | *v5;
  v9 = *a1;
  v10 = *((_DWORD *)a1 + 143);
  *(_DWORD *)(v9 + 40) = 93;
  *(_DWORD *)(v9 + 44) = v10;
  *(_DWORD *)(*a1 + 48) = v8 - 2;
  v11 = 1;
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 8))(a1, 1);
  *v2 = v5 + 1;
  v2[1] = v7;
  if (v8 >= 3)
    (*(void (**)(_QWORD *, unint64_t))(a1[5] + 32))(a1, v8 - 2);
  return v11;
}

uint64_t get_interesting_appn(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _BYTE v22[14];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 ***)(a1 + 40);
  v3 = v2[1];
  if (!v3)
  {
    result = ((uint64_t (*)(uint64_t))v2[3])(a1);
    if (!(_DWORD)result)
      return result;
    v3 = v2[1];
  }
  v6 = *v2 + 1;
  v5 = **v2;
  v7 = v3 - 1;
  if (!v7)
  {
    result = ((uint64_t (*)(uint64_t))v2[3])(a1);
    if (!(_DWORD)result)
      return result;
    v6 = *v2;
    v7 = v2[1];
  }
  v9 = *v6;
  v8 = v6 + 1;
  v10 = (v5 << 8) | v9;
  v11 = v10 - 2;
  if (v10 <= 2)
    v12 = 0;
  else
    v12 = v10 - 2;
  if (v10 <= 0xF)
    v13 = v12;
  else
    v13 = 14;
  v14 = v7 - 1;
  if ((_DWORD)v13)
  {
    v15 = v22;
    v16 = v13;
    do
    {
      if (!v14)
      {
        result = ((uint64_t (*)(uint64_t))v2[3])(a1);
        if (!(_DWORD)result)
          return result;
        v8 = *v2;
        v14 = v2[1];
      }
      v17 = *v8++;
      *v15++ = v17;
      --v14;
      --v16;
    }
    while (v16);
    v18 = v13;
  }
  else
  {
    v18 = 0;
  }
  v19 = v11 - v18;
  v20 = *(_DWORD *)(a1 + 572);
  if (v20 == 238)
  {
    examine_app14((uint64_t *)a1, (uint64_t)v22, v13, v19);
  }
  else if (v20 == 224)
  {
    examine_app0((uint64_t *)a1, (uint64_t)v22, v13, v19);
  }
  else
  {
    v21 = *(_QWORD *)a1;
    *(_DWORD *)(v21 + 40) = 70;
    *(_DWORD *)(v21 + 44) = v20;
    (**(void (***)(uint64_t))a1)(a1);
  }
  *v2 = v8;
  v2[1] = v14;
  if (v19 >= 1)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 32))(a1, v19);
  return 1;
}

uint64_t get_sof(uint64_t *a1, int a2, int a3, int a4)
{
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t result;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  int *v48;
  unsigned int v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned int v58;
  unsigned __int8 *v59;
  int v60;
  uint64_t v61;

  v5 = (unsigned __int8 **)a1[5];
  v7 = *v5;
  v6 = v5[1];
  *((_DWORD *)a1 + 78) = a2;
  *((_DWORD *)a1 + 79) = a3;
  *((_DWORD *)a1 + 80) = a4;
  if (!v6)
  {
    result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!(_DWORD)result)
      return result;
    v7 = *v5;
    v6 = v5[1];
  }
  v11 = *v7;
  v9 = v7 + 1;
  v10 = v11;
  v12 = v6 - 1;
  if (!v12)
  {
    result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!(_DWORD)result)
      return result;
    v9 = *v5;
    v12 = v5[1];
  }
  v15 = *v9;
  v13 = v9 + 1;
  v14 = v15;
  v16 = v12 - 1;
  if (!v16)
  {
    result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!(_DWORD)result)
      return result;
    v13 = *v5;
    v16 = v5[1];
  }
  v18 = *v13;
  v17 = v13 + 1;
  *((_DWORD *)a1 + 74) = v18;
  v19 = v16 - 1;
  if (!v19)
  {
    result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!(_DWORD)result)
      return result;
    v17 = *v5;
    v19 = v5[1];
  }
  v21 = *v17;
  v20 = v17 + 1;
  v22 = v21 << 8;
  *((_DWORD *)a1 + 13) = v21 << 8;
  v23 = v19 - 1;
  if (!v23)
  {
    result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!(_DWORD)result)
      return result;
    v20 = *v5;
    v23 = v5[1];
    v22 = *((_DWORD *)a1 + 13);
  }
  v25 = *v20;
  v24 = v20 + 1;
  *((_DWORD *)a1 + 13) = v22 + v25;
  v26 = v23 - 1;
  if (!v26)
  {
    result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!(_DWORD)result)
      return result;
    v24 = *v5;
    v26 = v5[1];
  }
  v28 = *v24;
  v27 = v24 + 1;
  v29 = v28 << 8;
  *((_DWORD *)a1 + 12) = v28 << 8;
  v30 = v26 - 1;
  if (!v30)
  {
    result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!(_DWORD)result)
      return result;
    v27 = *v5;
    v30 = v5[1];
    v29 = *((_DWORD *)a1 + 12);
  }
  v32 = *v27;
  v31 = v27 + 1;
  *((_DWORD *)a1 + 12) = v29 + v32;
  v33 = v30 - 1;
  if (v30 == (unsigned __int8 *)1)
  {
    result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!(_DWORD)result)
      return result;
    v31 = *v5;
    v33 = v5[1];
  }
  v34 = (v10 << 8) | v14;
  *((_DWORD *)a1 + 14) = *v31;
  v35 = *a1;
  *(_DWORD *)(v35 + 44) = *((_DWORD *)a1 + 143);
  *(_DWORD *)(v35 + 48) = *((_DWORD *)a1 + 12);
  *(_DWORD *)(v35 + 52) = *((_DWORD *)a1 + 13);
  *(_DWORD *)(v35 + 56) = *((_DWORD *)a1 + 14);
  *(_DWORD *)(v35 + 40) = 102;
  (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(a1, 1);
  if (*(_DWORD *)(a1[77] + 28))
  {
    v36 = *a1;
    *(_DWORD *)(v36 + 40) = 61;
    (*(void (**)(uint64_t *))v36)(a1);
  }
  v37 = v34 - 8;
  if (!*((_DWORD *)a1 + 13) || !*((_DWORD *)a1 + 12) || (v38 = *((_DWORD *)a1 + 14), v38 <= 0))
  {
    v39 = *a1;
    *(_DWORD *)(v39 + 40) = 33;
    (*(void (**)(uint64_t *))v39)(a1);
    v38 = *((_DWORD *)a1 + 14);
  }
  if (v37 != 3 * v38)
  {
    v40 = *a1;
    *(_DWORD *)(v40 + 40) = 12;
    (*(void (**)(uint64_t *))v40)(a1);
    v38 = *((_DWORD *)a1 + 14);
  }
  if (!a1[38])
  {
    a1[38] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 96 * v38);
    v38 = *((_DWORD *)a1 + 14);
  }
  v41 = v31 + 1;
  v42 = v33 - 1;
  if (v38 >= 1)
  {
    v43 = 0;
    v44 = -1;
    do
    {
      if (!v42)
      {
        result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
        if (!(_DWORD)result)
          return result;
        v41 = *v5;
        v42 = v5[1];
      }
      v47 = *v41;
      v46 = v41 + 1;
      v45 = v47;
      v48 = (int *)a1[38];
      if (v43)
      {
        v49 = v43;
        v50 = (int *)a1[38];
        while (*v50 != v45)
        {
          v50 += 24;
          if (!--v49)
          {
            v48 = v50;
            goto LABEL_51;
          }
        }
        v52 = *v48;
        v48 += 24;
        v51 = v52;
        if (v43 >= 2)
        {
          v53 = v44;
          do
          {
            v55 = *v48;
            v48 += 24;
            v54 = v55;
            if (v55 > v51)
              v51 = v54;
            --v53;
          }
          while (v53);
        }
        v45 = v51 + 1;
      }
LABEL_51:
      *v48 = v45;
      v48[1] = v43;
      v56 = v42 - 1;
      if (!v56)
      {
        result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
        if (!(_DWORD)result)
          return result;
        v46 = *v5;
        v56 = v5[1];
      }
      v58 = *v46;
      v57 = v46 + 1;
      v48[2] = v58 >> 4;
      v48[3] = v58 & 0xF;
      v59 = v56 - 1;
      if (v56 == (unsigned __int8 *)1)
      {
        result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
        if (!(_DWORD)result)
          return result;
        v57 = *v5;
        v59 = v5[1];
      }
      v60 = *v57;
      v41 = v57 + 1;
      v48[4] = v60;
      v61 = *a1;
      *(_DWORD *)(v61 + 44) = *v48;
      *(_DWORD *)(v61 + 48) = v48[2];
      *(_DWORD *)(v61 + 52) = v48[3];
      *(_DWORD *)(v61 + 56) = v48[4];
      *(_DWORD *)(v61 + 40) = 103;
      (*(void (**)(uint64_t *, uint64_t))(v61 + 8))(a1, 1);
      ++v43;
      v42 = v59 - 1;
      ++v44;
    }
    while ((signed int)v43 < *((_DWORD *)a1 + 14));
  }
  result = 1;
  *(_DWORD *)(a1[77] + 28) = 1;
  *v5 = v41;
  v5[1] = v42;
  return result;
}

uint64_t examine_app0(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a4 + a3;
  if (a3 < 0xE)
  {
    if (a3 < 6 || *(_BYTE *)a2 != 74)
      goto LABEL_19;
    goto LABEL_15;
  }
  if (*(_BYTE *)a2 != 74)
    goto LABEL_19;
  if (*(_BYTE *)(a2 + 1) != 70 || *(_BYTE *)(a2 + 2) != 73 || *(_BYTE *)(a2 + 3) != 70 || *(_BYTE *)(a2 + 4))
  {
LABEL_15:
    if (*(_BYTE *)(a2 + 1) == 70 && *(_BYTE *)(a2 + 2) == 88 && *(_BYTE *)(a2 + 3) == 88 && !*(_BYTE *)(a2 + 4))
    {
      v20 = *(unsigned __int8 *)(a2 + 5);
      switch(v20)
      {
        case 19:
          v18 = *a1;
          v19 = 112;
          break;
        case 17:
          v18 = *a1;
          v19 = 111;
          break;
        case 16:
          v18 = *a1;
          v19 = 110;
          break;
        default:
          v22 = *a1;
          *(_DWORD *)(v22 + 40) = 91;
          *(_DWORD *)(v22 + 44) = *(unsigned __int8 *)(a2 + 5);
          *(_DWORD *)(*a1 + 48) = v6;
          return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
      }
      goto LABEL_20;
    }
LABEL_19:
    v18 = *a1;
    v19 = 79;
LABEL_20:
    *(_DWORD *)(v18 + 40) = v19;
    *(_DWORD *)(v18 + 44) = v6;
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
  }
  *((_DWORD *)a1 + 94) = 1;
  v7 = *(unsigned __int8 *)(a2 + 5);
  *((_BYTE *)a1 + 380) = v7;
  v8 = *(unsigned __int8 *)(a2 + 6);
  *((_BYTE *)a1 + 381) = v8;
  v9 = *(unsigned __int8 *)(a2 + 7);
  *((_BYTE *)a1 + 382) = v9;
  v10 = bswap32(*(unsigned __int16 *)(a2 + 8)) >> 16;
  *((_WORD *)a1 + 192) = v10;
  v11 = bswap32(*(unsigned __int16 *)(a2 + 10)) >> 16;
  *((_WORD *)a1 + 193) = v11;
  if ((v7 - 1) >= 2)
  {
    v12 = *a1;
    *(_DWORD *)(v12 + 40) = 122;
    *(_DWORD *)(v12 + 44) = v7;
    *(_DWORD *)(*a1 + 48) = *((unsigned __int8 *)a1 + 381);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
    v7 = *((unsigned __int8 *)a1 + 380);
    v8 = *((unsigned __int8 *)a1 + 381);
    v10 = *((unsigned __int16 *)a1 + 192);
    v11 = *((unsigned __int16 *)a1 + 193);
    v9 = *((unsigned __int8 *)a1 + 382);
  }
  v13 = *a1;
  *(_DWORD *)(v13 + 48) = v8;
  *(_DWORD *)(v13 + 52) = v10;
  *(_DWORD *)(v13 + 56) = v11;
  *(_DWORD *)(v13 + 60) = v9;
  *(_DWORD *)(v13 + 40) = 89;
  *(_DWORD *)(v13 + 44) = v7;
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(a1, 1);
  v15 = *(unsigned __int8 *)(a2 + 12);
  v16 = *(unsigned __int8 *)(a2 + 13);
  if (v16 | v15)
  {
    v17 = *a1;
    *(_DWORD *)(v17 + 40) = 92;
    *(_DWORD *)(v17 + 44) = *(unsigned __int8 *)(a2 + 12);
    *(_DWORD *)(*a1 + 48) = *(unsigned __int8 *)(a2 + 13);
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
    v15 = *(unsigned __int8 *)(a2 + 12);
    v16 = *(unsigned __int8 *)(a2 + 13);
  }
  if (v6 - 14 != 3 * v15 * (unint64_t)v16)
  {
    v21 = *a1;
    *(_DWORD *)(v21 + 40) = 90;
    *(_DWORD *)(v21 + 44) = v6 - 14;
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
  }
  return result;
}

uint64_t examine_app14(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  if (a3 >= 0xC
    && *(_BYTE *)a2 == 65
    && *(_BYTE *)(a2 + 1) == 100
    && *(_BYTE *)(a2 + 2) == 111
    && *(_BYTE *)(a2 + 3) == 98
    && *(_BYTE *)(a2 + 4) == 101)
  {
    v5 = __rev16(*(unsigned __int16 *)(a2 + 5));
    v6 = __rev16(*(unsigned __int16 *)(a2 + 9));
    v7 = *(unsigned __int8 *)(a2 + 11);
    v8 = *a1;
    *(_DWORD *)(v8 + 48) = __rev16(*(unsigned __int16 *)(a2 + 7));
    *(_DWORD *)(v8 + 52) = v6;
    *(_DWORD *)(v8 + 56) = v7;
    *(_DWORD *)(v8 + 40) = 78;
    *(_DWORD *)(v8 + 44) = v5;
    result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(a1, 1);
    *((_DWORD *)a1 + 97) = 1;
    *((_BYTE *)a1 + 392) = v7;
  }
  else
  {
    v10 = *a1;
    *(_DWORD *)(v10 + 40) = 80;
    *(_DWORD *)(v10 + 44) = a4 + a3;
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
  }
  return result;
}

BOOL jpeg_calc_output_dimensions(uint64_t a1)
{
  int v2;
  void (**v3)(_QWORD);
  int v4;
  int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _BOOL8 result;
  int v19;

  v2 = *(_DWORD *)(a1 + 36);
  if (v2 != 202)
  {
    v3 = *(void (***)(_QWORD))a1;
    *((_DWORD *)v3 + 10) = 21;
    *((_DWORD *)v3 + 11) = v2;
    (**(void (***)(uint64_t))a1)(a1);
  }
  jpeg_core_output_dimensions(a1);
  v4 = *(_DWORD *)(a1 + 56);
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = *(_DWORD **)(a1 + 304);
    do
    {
      v7 = *(_DWORD *)(a1 + 424);
      if (*(_DWORD *)(a1 + 92))
      {
        v6[9] = v7;
        v8 = v6 + 9;
        v9 = *(_DWORD *)(a1 + 428);
      }
      else
      {
        if (*(_DWORD *)(a1 + 100))
          v10 = 8;
        else
          v10 = 4;
        if (v7 <= v10)
        {
          v11 = 1;
          do
          {
            v12 = 2 * v11;
            if (*(_DWORD *)(a1 + 416) % (2 * v11 * v6[2]))
              break;
            v11 *= 2;
          }
          while (v7 * v12 <= v10);
        }
        else
        {
          v11 = 1;
        }
        v7 *= v11;
        v6[9] = v7;
        v8 = v6 + 9;
        v9 = *(_DWORD *)(a1 + 428);
        if (v9 <= v10)
        {
          v13 = 1;
          while (1)
          {
            v15 = 2 * v13;
            if (*(_DWORD *)(a1 + 420) % (2 * v13 * v6[3]))
              goto LABEL_17;
            v13 *= 2;
            if (v9 * v15 > v10)
            {
              v13 = v15;
              goto LABEL_17;
            }
          }
        }
      }
      v13 = 1;
LABEL_17:
      v14 = v9 * v13;
      v6[10] = v9 * v13;
      if (v7 <= 2 * v9 * v13)
      {
        if (v14 > 2 * v7)
          v6[10] = 2 * v7;
      }
      else
      {
        v7 = 2 * v14;
        *v8 = 2 * v14;
      }
      v6[11] = jdiv_round_up((int)v6[2] * (uint64_t)v7 * *(unsigned int *)(a1 + 48), *(int *)(a1 + 556) * (uint64_t)*(int *)(a1 + 416));
      v6[12] = jdiv_round_up((int)v6[10] * (uint64_t)(int)v6[3] * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556) * (uint64_t)*(int *)(a1 + 420));
      ++v5;
      v6 += 24;
      v4 = *(_DWORD *)(a1 + 56);
    }
    while (v5 < v4);
  }
  v16 = *(_DWORD *)(a1 + 64) - 1;
  if (v16 <= 6)
    v4 = dword_2186F9930[v16];
  if (*(_DWORD *)(a1 + 108))
    v17 = 1;
  else
    v17 = v4;
  *(_DWORD *)(a1 + 144) = v4;
  *(_DWORD *)(a1 + 148) = v17;
  result = use_merged_upsample(a1);
  if (result)
    v19 = *(_DWORD *)(a1 + 420);
  else
    v19 = 1;
  *(_DWORD *)(a1 + 152) = v19;
  return result;
}

BOOL use_merged_upsample(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;

  if (!*(_DWORD *)(a1 + 400)
    && (*(_DWORD *)(a1 + 60) | 4) == 7
    && *(_DWORD *)(a1 + 56) == 3
    && *(_DWORD *)(a1 + 64) == 2
    && *(_DWORD *)(a1 + 144) == 3
    && !*(_DWORD *)(a1 + 396)
    && (v2 = *(_DWORD **)(a1 + 304), v2[2] == 2)
    && v2[26] == 1
    && v2[50] == 1
    && (int)v2[3] <= 2
    && v2[27] == 1
    && v2[51] == 1
    && (v3 = v2[9], v3 == *(_DWORD *)(a1 + 424))
    && v2[33] == v3
    && v2[57] == v3
    && (v4 = v2[10], v4 == *(_DWORD *)(a1 + 428))
    && v2[34] == v4)
  {
    return v2[58] == v4;
  }
  else
  {
    return 0;
  }
}

uint64_t jinit_master_decompress(uint64_t a1)
{
  uint64_t v2;
  int v3;
  void (**v4)(uint64_t);
  _OWORD *v5;
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  __int128 v9;
  unsigned int v10;
  int v11;
  void (**v12)(uint64_t);
  void (**v13)(uint64_t);
  _BOOL4 v14;
  void (**v15)(uint64_t);
  _BOOL4 v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 576) = v2;
  *(_QWORD *)v2 = prepare_for_output_pass;
  *(_QWORD *)(v2 + 8) = finish_output_pass;
  *(_DWORD *)(v2 + 16) = 0;
  v3 = *(_DWORD *)(a1 + 296);
  if (v3 != 8)
  {
    v4 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v4 + 10) = 16;
    *((_DWORD *)v4 + 11) = v3;
    (**(void (***)(uint64_t))a1)(a1);
  }
  jpeg_calc_output_dimensions(a1);
  v5 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1280);
  v6 = 0;
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[26] = 0u;
  v5[27] = 0u;
  v5[28] = 0u;
  v5[29] = 0u;
  v5[30] = 0u;
  v5[31] = 0u;
  v7 = (int8x16_t)xmmword_2186F9920;
  v8.i64[0] = 0x1010101010101010;
  v8.i64[1] = 0x1010101010101010;
  *(_QWORD *)(a1 + 440) = v5 + 32;
  do
  {
    v5[v6 + 32] = v7;
    ++v6;
    v7 = vaddq_s8(v7, v8);
  }
  while (v6 != 16);
  *(_QWORD *)&v9 = -1;
  *((_QWORD *)&v9 + 1) = -1;
  v5[79] = v9;
  v5[78] = v9;
  v5[77] = v9;
  v5[76] = v9;
  v5[75] = v9;
  v5[74] = v9;
  v5[73] = v9;
  v5[72] = v9;
  v5[71] = v9;
  v5[70] = v9;
  v5[69] = v9;
  v5[68] = v9;
  v5[67] = v9;
  v5[66] = v9;
  v5[65] = v9;
  v5[63] = v9;
  v5[64] = v9;
  v5[61] = v9;
  v5[62] = v9;
  v5[59] = v9;
  v5[60] = v9;
  v5[57] = v9;
  v5[58] = v9;
  v5[55] = v9;
  v5[56] = v9;
  v5[53] = v9;
  v5[54] = v9;
  v5[51] = v9;
  v5[52] = v9;
  v5[49] = v9;
  v5[50] = v9;
  v5[48] = v9;
  if (!*(_DWORD *)(a1 + 140) || (v10 = *(_DWORD *)(a1 + 136)) == 0 || (v11 = *(_DWORD *)(a1 + 144), v11 <= 0))
  {
    v12 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v12 + 10) = 33;
    (*v12)(a1);
    v10 = *(_DWORD *)(a1 + 136);
    v11 = *(_DWORD *)(a1 + 144);
  }
  if (((unint64_t)v10 * v11) >> 32)
  {
    v13 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v13 + 10) = 72;
    (*v13)(a1);
  }
  *(_DWORD *)(v2 + 24) = 0;
  v14 = use_merged_upsample(a1);
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 28) = v14;
  *(_QWORD *)(v2 + 40) = 0;
  if (*(_DWORD *)(a1 + 108))
  {
    if (!*(_DWORD *)(a1 + 88))
    {
      *(_QWORD *)(a1 + 128) = 0;
      *(_DWORD *)(a1 + 124) = 0;
    }
    if (*(_DWORD *)(a1 + 92))
    {
      v15 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v15 + 10) = 48;
      (*v15)(a1);
    }
    if (*(_DWORD *)(a1 + 144) == 3)
    {
      if (*(_QWORD *)(a1 + 160))
      {
        *(_DWORD *)(a1 + 128) = 1;
      }
      else if (*(_DWORD *)(a1 + 116))
      {
        *(_DWORD *)(a1 + 132) = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 124) = 1;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 124) = 1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_QWORD *)(a1 + 160) = 0;
    }
    if (*(_DWORD *)(a1 + 124))
    {
      jinit_1pass_quantizer(a1);
      *(_QWORD *)(v2 + 32) = *(_QWORD *)(a1 + 656);
    }
    if (*(_DWORD *)(a1 + 132) || *(_DWORD *)(a1 + 128))
    {
      jinit_2pass_quantizer(a1);
      *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 656);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 124) = 0;
  }
  if (!*(_DWORD *)(a1 + 92))
  {
    if (*(_DWORD *)(v2 + 28))
    {
      jinit_merged_upsampler(a1);
    }
    else
    {
      jinit_color_deconverter(a1);
      jinit_upsampler((uint64_t *)a1);
    }
    jinit_d_post_controller(a1, *(_DWORD *)(a1 + 132));
  }
  jinit_inverse_dct(a1);
  if (*(_DWORD *)(a1 + 320))
    jinit_arith_decoder(a1);
  else
    jinit_huff_decoder(a1);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 608) + 32))
    v16 = 1;
  else
    v16 = *(_DWORD *)(a1 + 88) != 0;
  jinit_d_coef_controller(a1, v16);
  if (!*(_DWORD *)(a1 + 92))
    jinit_d_main_controller((uint64_t *)a1, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 16))(a1);
  v18 = *(_QWORD *)(a1 + 16);
  if (v18 && !*(_DWORD *)(a1 + 88) && *(_DWORD *)(*(_QWORD *)(a1 + 608) + 32))
  {
    if (*(_DWORD *)(a1 + 316))
      v19 = 3 * *(_DWORD *)(a1 + 56) + 2;
    else
      v19 = *(_DWORD *)(a1 + 56);
    v20 = *(unsigned int *)(a1 + 432);
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 16) = v19 * v20;
    if (*(_DWORD *)(a1 + 132))
      v21 = 3;
    else
      v21 = 2;
    *(_DWORD *)(v18 + 24) = 0;
    *(_DWORD *)(v18 + 28) = v21;
    ++*(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t prepare_for_output_pass(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[72];
  if (*(_DWORD *)(v2 + 16))
  {
    *(_DWORD *)(v2 + 16) = 0;
    (*(void (**)(uint64_t *, _QWORD))a1[82])(a1, 0);
    v3 = 2;
    (*(void (**)(uint64_t *, uint64_t))a1[75])(a1, 2);
LABEL_3:
    result = (*(uint64_t (**)(uint64_t *, uint64_t))a1[73])(a1, v3);
    goto LABEL_7;
  }
  if (*((_DWORD *)a1 + 27) && !a1[20])
  {
    if (*((_DWORD *)a1 + 29) && *((_DWORD *)a1 + 33))
    {
      a1[82] = *(_QWORD *)(v2 + 40);
      *(_DWORD *)(v2 + 16) = 1;
    }
    else if (*((_DWORD *)a1 + 31))
    {
      a1[82] = *(_QWORD *)(v2 + 32);
    }
    else
    {
      v11 = *a1;
      *(_DWORD *)(v11 + 40) = 47;
      (*(void (**)(uint64_t *))v11)(a1);
    }
  }
  (*(void (**)(uint64_t *))a1[79])(a1);
  result = (*(uint64_t (**)(uint64_t *))(a1[74] + 16))(a1);
  if (!*((_DWORD *)a1 + 23))
  {
    if (!*(_DWORD *)(v2 + 28))
      (*(void (**)(uint64_t *))a1[81])(a1);
    (*(void (**)(uint64_t *))a1[80])(a1);
    if (*((_DWORD *)a1 + 27))
      (*(void (**)(uint64_t *, _QWORD))a1[82])(a1, *(unsigned int *)(v2 + 16));
    if (*(_DWORD *)(v2 + 16))
      v10 = 3;
    else
      v10 = 0;
    (*(void (**)(uint64_t *, uint64_t))a1[75])(a1, v10);
    v3 = 0;
    goto LABEL_3;
  }
LABEL_7:
  v5 = a1[2];
  if (v5)
  {
    v6 = *(_DWORD *)(v2 + 24);
    v7 = *(_DWORD *)(v2 + 16) ? 2 : 1;
    v8 = v7 + v6;
    *(_DWORD *)(v5 + 24) = v6;
    *(_DWORD *)(v5 + 28) = v8;
    if (*((_DWORD *)a1 + 22))
    {
      if (!*(_DWORD *)(a1[76] + 36))
      {
        if (*((_DWORD *)a1 + 33))
          v9 = 2;
        else
          v9 = 1;
        *(_DWORD *)(v5 + 28) = v9 + v8;
      }
    }
  }
  return result;
}

uint64_t finish_output_pass(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 576);
  if (*(_DWORD *)(result + 108))
    result = (*(uint64_t (**)(void))(*(_QWORD *)(result + 656) + 16))();
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t jinit_merged_upsampler(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  v3 = (_QWORD *)v2;
  *(_QWORD *)(a1 + 640) = v2;
  *(_QWORD *)v2 = start_pass_merged_upsample;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 76) = *(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 136);
  if (*(_DWORD *)(a1 + 420) == 2)
  {
    *(_QWORD *)(v2 + 8) = merged_2v_upsample;
    *(_QWORD *)(v2 + 24) = h2v2_merged_upsample;
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1);
  }
  else
  {
    v4 = 0;
    v3[1] = merged_1v_upsample;
    v3[3] = h2v1_merged_upsample;
  }
  v3[8] = v4;
  v5 = *(_DWORD *)(a1 + 60);
  v6 = *(_QWORD **)(a1 + 640);
  v6[4] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
  v6[5] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
  v6[6] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  v6[7] = result;
  v8 = v6[4];
  v9 = v6[5];
  v10 = v6[6];
  if (v5 == 7)
  {
    v11 = 0;
    v12 = -29696512;
    v13 = -23488896;
    v14 = 5806464;
    v15 = 11981184;
    do
    {
      *(_DWORD *)(v8 + 4 * v11) = v13 >> 16;
      *(_DWORD *)(v9 + 4 * v11) = v12 >> 16;
      *(_QWORD *)(v10 + 8 * v11) = v15;
      *(_QWORD *)(result + 8 * v11++) = v14;
      v14 -= 45107;
      v15 -= 93603;
      v12 += 232260;
      v13 += 183763;
    }
    while (v11 != 256);
  }
  else
  {
    v16 = 0;
    v17 = -14831872;
    v18 = -11728000;
    v19 = 2919552;
    v20 = 5990656;
    do
    {
      *(_DWORD *)(v8 + 4 * v16) = v18 >> 16;
      *(_DWORD *)(v9 + 4 * v16) = v17 >> 16;
      *(_QWORD *)(v10 + 8 * v16) = v20;
      *(_QWORD *)(result + 8 * v16++) = v19;
      v19 -= 22553;
      v20 -= 46802;
      v17 += 116130;
      v18 += 91881;
    }
    while (v16 != 256);
  }
  return result;
}

uint64_t start_pass_merged_upsample(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 640);
  *(_DWORD *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 80) = *(_DWORD *)(result + 140);
  return result;
}

char *merged_2v_upsample(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v9;
  char *result;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 640);
  if (*(_DWORD *)(v9 + 72))
  {
    result = jcopy_sample_rows((char *)(v9 + 64), 0, a5 + 8 * *a6, 0, 1, *(unsigned int *)(v9 + 76));
    *(_DWORD *)(v9 + 72) = 0;
    ++*a6;
    --*(_DWORD *)(v9 + 80);
LABEL_3:
    ++*a3;
    return result;
  }
  v11 = *(_DWORD *)(v9 + 80);
  v12 = *a6;
  if (v11 >= a7 - (int)v12)
    v11 = a7 - v12;
  if (v11 >= 2)
    v13 = 2;
  else
    v13 = v11;
  v16 = *(_QWORD *)(a5 + 8 * v12);
  if (v13 < 2)
  {
    v14 = *(_QWORD *)(v9 + 64);
    *(_DWORD *)(v9 + 72) = 1;
  }
  else
  {
    v14 = *(_QWORD *)(a5 + 8 * (v12 + 1));
  }
  v17 = v14;
  result = (char *)(*(uint64_t (**)(void))(v9 + 24))();
  v15 = *(_DWORD *)(v9 + 72);
  *a6 += v13;
  *(_DWORD *)(v9 + 80) -= v13;
  if (!v15)
    goto LABEL_3;
  return result;
}

uint64_t h2v2_merged_upsample(uint64_t result, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *(_QWORD **)(result + 640);
  v5 = *(_QWORD *)(result + 440);
  v7 = v4[4];
  v6 = v4[5];
  v8 = v4[6];
  v9 = v4[7];
  v10 = *(unsigned __int8 **)(*a2 + 16 * a3);
  v11 = *(unsigned __int8 **)(*a2 + 8 * ((2 * a3) | 1));
  v12 = *(unsigned __int8 **)(a2[1] + 8 * a3);
  v13 = *(unsigned __int8 **)(a2[2] + 8 * a3);
  v15 = *(_BYTE **)a4;
  v14 = *(_BYTE **)(a4 + 8);
  v16 = *(unsigned int *)(result + 136);
  if (v16 >= 2)
  {
    v17 = 0;
    v18 = v16 >> 1;
    do
    {
      v19 = v12[v17];
      v20 = v13[v17];
      v21 = *(int *)(v7 + 4 * v20);
      v22 = *v10;
      v23 = *(int *)(v6 + 4 * v19);
      v24 = (*(_QWORD *)(v8 + 8 * v20) + *(_QWORD *)(v9 + 8 * v19)) >> 16;
      *v15 = *(_BYTE *)(v5 + v21 + v22);
      v15[1] = *(_BYTE *)(v5 + v22 + (int)v24);
      v15[2] = *(_BYTE *)(v5 + v23 + v22);
      v25 = v10[1];
      v15[3] = *(_BYTE *)(v5 + v21 + v25);
      v15[4] = *(_BYTE *)(v5 + v25 + (int)v24);
      v15[5] = *(_BYTE *)(v5 + v23 + v25);
      v26 = *v11;
      *v14 = *(_BYTE *)(v5 + v21 + v26);
      v14[1] = *(_BYTE *)(v5 + v26 + (int)v24);
      v14[2] = *(_BYTE *)(v5 + v23 + v26);
      v27 = v11[1];
      v14[3] = *(_BYTE *)(v5 + v21 + v27);
      LOBYTE(v21) = *(_BYTE *)(v5 + v27 + (int)v24);
      v28 = v10 + 2;
      v29 = v11 + 2;
      v14[4] = v21;
      v15 += 6;
      v14[5] = *(_BYTE *)(v5 + v23 + v27);
      v14 += 6;
      ++v17;
      v11 += 2;
      v10 += 2;
    }
    while ((_DWORD)v18 != (_DWORD)v17);
    LODWORD(v16) = *(_DWORD *)(result + 136);
    v13 += v17;
    v12 += v17;
    v10 = v28;
    v11 = v29;
  }
  if ((v16 & 1) != 0)
  {
    v30 = *v13;
    v31 = *(int *)(v7 + 4 * v30);
    v32 = *v12;
    v33 = *(_QWORD *)(v8 + 8 * v30) + *(_QWORD *)(v9 + 8 * v32);
    v34 = *(int *)(v6 + 4 * v32);
    v35 = *v10;
    v33 >>= 16;
    *v15 = *(_BYTE *)(v5 + v31 + v35);
    v15[1] = *(_BYTE *)(v5 + v35 + (int)v33);
    v15[2] = *(_BYTE *)(v5 + v34 + v35);
    v36 = *v11;
    *v14 = *(_BYTE *)(v5 + v31 + v36);
    v14[1] = *(_BYTE *)(v5 + v36 + (int)v33);
    v14[2] = *(_BYTE *)(v5 + v34 + v36);
  }
  return result;
}

uint64_t merged_1v_upsample(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 640) + 24))();
  ++*a6;
  ++*a3;
  return result;
}

uint64_t h2v1_merged_upsample(uint64_t result, _QWORD *a2, unsigned int a3, _BYTE **a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD **)(result + 640);
  v5 = *(_QWORD *)(result + 440);
  v7 = v4[4];
  v6 = v4[5];
  v8 = v4[6];
  v9 = v4[7];
  v10 = *(unsigned __int8 **)(*a2 + 8 * a3);
  v11 = *(unsigned __int8 **)(a2[1] + 8 * a3);
  v12 = *(unsigned __int8 **)(a2[2] + 8 * a3);
  v13 = *a4;
  v14 = *(_DWORD *)(result + 136);
  if (v14 < 2)
  {
    if ((v14 & 1) == 0)
      return result;
LABEL_7:
    v25 = *v11;
    v26 = *v12;
    v27 = (*(_QWORD *)(v8 + 8 * v26) + *(_QWORD *)(v9 + 8 * v25)) >> 16;
    v28 = *(int *)(v6 + 4 * v25);
    v29 = *v10;
    *v13 = *(_BYTE *)(v5 + *(int *)(v7 + 4 * v26) + v29);
    v13[1] = *(_BYTE *)(v5 + v29 + (int)v27);
    v13[2] = *(_BYTE *)(v5 + v28 + v29);
    return result;
  }
  v15 = v14 >> 1;
  do
  {
    v17 = *v11++;
    v16 = v17;
    v18 = *v12++;
    v19 = *(int *)(v7 + 4 * v18);
    v20 = (*(_QWORD *)(v8 + 8 * v18) + *(_QWORD *)(v9 + 8 * v16)) >> 16;
    v21 = *(int *)(v6 + 4 * v16);
    v22 = *v10;
    *v13 = *(_BYTE *)(v5 + v19 + v22);
    v13[1] = *(_BYTE *)(v5 + v22 + (int)v20);
    v13[2] = *(_BYTE *)(v5 + v21 + v22);
    v23 = v10 + 2;
    v24 = v10[1];
    v13[3] = *(_BYTE *)(v5 + v19 + v24);
    v13[4] = *(_BYTE *)(v5 + v24 + (int)v20);
    v13[5] = *(_BYTE *)(v5 + v21 + v24);
    v13 += 6;
    v10 = v23;
    --v15;
  }
  while (v15);
  v10 = v23;
  if ((*(_DWORD *)(result + 136) & 1) != 0)
    goto LABEL_7;
  return result;
}

uint64_t jinit_d_post_controller(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v12;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 600) = result;
  *(_QWORD *)result = start_pass_dpost;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  if (*(_DWORD *)(a1 + 108))
  {
    v5 = result;
    v6 = *(unsigned int *)(a1 + 420);
    *(_DWORD *)(result + 32) = v6;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 136);
    v9 = *(_DWORD *)(a1 + 144);
    v10 = (v9 * v8);
    if (a2)
    {
      v11 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(v7 + 32);
      v12 = jround_up(*(unsigned int *)(a1 + 140), v6);
      result = v11(a1, 1, 0, v10, v12, *(unsigned int *)(v5 + 32));
      *(_QWORD *)(v5 + 16) = result;
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v7 + 16))(a1, 1, (v9 * v8));
      *(_QWORD *)(v5 + 24) = result;
    }
  }
  return result;
}

uint64_t start_pass_dpost(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 600);
  if (a2 == 3)
  {
    if (!*(_QWORD *)(v2 + 16))
    {
      v3 = *(_QWORD *)result;
      *(_DWORD *)(v3 + 40) = 3;
      result = (*(uint64_t (**)(uint64_t))v3)(result);
    }
    v4 = post_process_prepass;
    goto LABEL_15;
  }
  if (a2 == 2)
  {
    if (!*(_QWORD *)(v2 + 16))
    {
      v5 = *(_QWORD *)result;
      *(_DWORD *)(v5 + 40) = 3;
      result = (*(uint64_t (**)(uint64_t))v5)(result);
    }
    v4 = post_process_2pass;
    goto LABEL_15;
  }
  if (a2)
  {
    v6 = *(_QWORD *)result;
    *(_DWORD *)(v6 + 40) = 3;
    result = (*(uint64_t (**)(uint64_t))v6)(result);
    goto LABEL_16;
  }
  if (!*(_DWORD *)(result + 108))
  {
    v4 = *(void **)(*(_QWORD *)(result + 640) + 8);
LABEL_15:
    *(_QWORD *)(v2 + 8) = v4;
    goto LABEL_16;
  }
  *(_QWORD *)(v2 + 8) = post_process_1pass;
  if (!*(_QWORD *)(v2 + 24))
  {
    result = (*(uint64_t (**)(void))(*(_QWORD *)(result + 8) + 56))();
    *(_QWORD *)(v2 + 24) = result;
  }
LABEL_16:
  *(_DWORD *)(v2 + 36) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  return result;
}

uint64_t post_process_1pass(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v9;
  uint64_t result;

  v9 = a1[75];
  (*(void (**)(void))(a1[80] + 8))();
  result = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, _QWORD))(a1[82] + 8))(a1, *(_QWORD *)(v9 + 24), a5 + 8 * *a6, 0);
  *a6 = *a6;
  return result;
}

uint64_t post_process_prepass(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v11 = a1[75];
  v12 = *(_DWORD *)(v11 + 40);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v13 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD, uint64_t))(a1[1] + 56))(a1, *(_QWORD *)(v11 + 16), *(unsigned int *)(v11 + 36), *(unsigned int *)(v11 + 32), 1);
    *(_QWORD *)(v11 + 24) = v13;
    v12 = *(_DWORD *)(v11 + 40);
  }
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1[80] + 8))(a1, a2, a3, a4, v13, v11 + 40, *(unsigned int *)(v11 + 32));
  v15 = *(_DWORD *)(v11 + 40);
  v16 = v15 - v12;
  if (v15 > v12)
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(a1[82] + 8))(a1, *(_QWORD *)(v11 + 24) + 8 * v12, 0, v16);
    *a6 += v16;
    v15 = *(_DWORD *)(v11 + 40);
  }
  v17 = *(_DWORD *)(v11 + 32);
  if (v15 >= v17)
    *(_QWORD *)(v11 + 36) = *(_DWORD *)(v11 + 36) + v17;
  return result;
}

uint64_t post_process_2pass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;

  v11 = *(_QWORD *)(a1 + 600);
  v12 = *(_DWORD *)(v11 + 40);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 8) + 56))(a1, *(_QWORD *)(v11 + 16), *(unsigned int *)(v11 + 36), *(unsigned int *)(v11 + 32), 0);
    *(_QWORD *)(v11 + 24) = v13;
    v12 = *(_DWORD *)(v11 + 40);
  }
  v14 = *(_DWORD *)(v11 + 32) - v12;
  v15 = *a6;
  if (v14 >= a7 - (int)v15)
    v14 = a7 - v15;
  v16 = *(_DWORD *)(a1 + 140) - *(_DWORD *)(v11 + 36);
  if (v14 >= v16)
    v17 = v16;
  else
    v17 = v14;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 656) + 8))(a1, v13 + 8 * v12, a5 + 8 * v15, v17);
  *a6 += v17;
  v19 = *(_DWORD *)(v11 + 40) + v17;
  *(_DWORD *)(v11 + 40) = v19;
  v20 = *(_DWORD *)(v11 + 32);
  if (v19 >= v20)
    *(_QWORD *)(v11 + 36) = *(_DWORD *)(v11 + 36) + v20;
  return result;
}

void CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Normalizer.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  qword_254FFA5B8 = 0;
  unk_254FFA5C0 = 0;
  CoreML::Specification::_Normalizer_default_instance_ = (uint64_t)&off_24D93CAC0;
  byte_254FFA5C8 = 1;
}

void CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(CoreML::Specification::protobuf_Normalizer_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_218374FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Normalizer *CoreML::Specification::Normalizer::Normalizer(CoreML::Specification::Normalizer *this)
{
  *(_QWORD *)this = &off_24D93CAC0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Normalizer *)&CoreML::Specification::_Normalizer_default_instance_)
    CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_218375004(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Normalizer::~Normalizer(CoreML::Specification::Normalizer *this)
{
  *(_QWORD *)this = &off_24D93CAC0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D93CAC0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::Normalizer::default_instance(CoreML::Specification::Normalizer *this)
{
  CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(this);
  return &CoreML::Specification::_Normalizer_default_instance_;
}

CoreML::Specification::Normalizer *CoreML::Specification::Normalizer::New(CoreML::Specification::Normalizer *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Normalizer *v3;

  v3 = (CoreML::Specification::Normalizer *)operator new();
  CoreML::Specification::Normalizer::Normalizer(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Normalizer>(a2, v3);
  return v3;
}

void sub_2183750F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Normalizer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Normalizer>);
  return result;
}

uint64_t CoreML::Specification::Normalizer::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::Normalizer::MergePartialFromCodedStream(CoreML::Specification::Normalizer *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  int v12;
  uint64_t Varint32Fallback;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1])
      {
        v12 = 0;
      }
      else
      {
        v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
      v12 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Normalizer::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5;

  v5 = *(_DWORD *)(this + 16);
  if (v5)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v5, a2, a4);
  return this;
}

uint64_t CoreML::Specification::Normalizer::ByteSizeLong(CoreML::Specification::Normalizer *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

std::string *CoreML::Specification::Normalizer::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  return this;
}

uint64_t CoreML::Specification::Normalizer::IsInitialized(CoreML::Specification::Normalizer *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Normalizer::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Normalizer");
}

CoreML::Specification::Normalizer *CoreML::Specification::Normalizer::New(CoreML::Specification::Normalizer *this)
{
  return CoreML::Specification::Normalizer::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Normalizer>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_Normalizer_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t jinit_upsampler(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t *, uint64_t, uint64_t, _QWORD);
  uint64_t v22;
  uint64_t v23;

  result = (*(uint64_t (**)(void))a1[1])();
  v3 = result;
  a1[80] = result;
  *(_QWORD *)result = start_pass_upsample;
  *(_QWORD *)(result + 8) = sep_upsample;
  *(_DWORD *)(result + 16) = 0;
  if (*((_DWORD *)a1 + 100))
  {
    v4 = *a1;
    *(_DWORD *)(v4 + 40) = 26;
    result = (*(uint64_t (**)(uint64_t *))v4)(a1);
  }
  if (*((int *)a1 + 14) >= 1)
  {
    v5 = 0;
    v6 = v3 + 192;
    v7 = (_QWORD *)(v3 + 104);
    v8 = (int *)(a1[38] + 36);
    do
    {
      v9 = *((_DWORD *)a1 + 106);
      v10 = *(v8 - 7);
      v11 = *v8;
      v12 = v8[1] * *(v8 - 6) / *((_DWORD *)a1 + 107);
      v13 = *((_DWORD *)a1 + 104);
      v14 = *((_DWORD *)a1 + 105);
      *(_DWORD *)(v6 + 4 * v5) = v12;
      if (v8[4])
      {
        v15 = v11 * v10 / v9;
        if (v15 == v13 && v12 == v14)
        {
          *v7 = fullsize_upsample;
        }
        else
        {
          if (2 * v15 == v13 && v12 == v14)
          {
            *v7 = h2v1_upsample;
          }
          else if (2 * v15 == v13 && 2 * v12 == v14)
          {
            *v7 = h2v2_upsample;
          }
          else
          {
            v18 = v13 / v15;
            if (v13 % v15 || (v19 = v14 / v12, v14 % v12))
            {
              v20 = *a1;
              *(_DWORD *)(v20 + 40) = 39;
              (*(void (**)(uint64_t *))v20)(a1);
            }
            else
            {
              *v7 = int_upsample;
              v23 = v6 + v5;
              *(_BYTE *)(v23 + 40) = v18;
              *(_BYTE *)(v23 + 50) = v19;
            }
          }
          v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD))(a1[1] + 16);
          v22 = jround_up(*((unsigned int *)a1 + 34), *((int *)a1 + 104));
          result = v21(a1, 1, v22, *((unsigned int *)a1 + 105));
          *(v7 - 10) = result;
        }
      }
      else
      {
        *v7 = noop_upsample;
      }
      v8 += 24;
      ++v5;
      ++v7;
    }
    while (v5 < *((int *)a1 + 14));
  }
  return result;
}

uint64_t start_pass_upsample(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 640);
  v2 = *(_DWORD *)(result + 140);
  *(_DWORD *)(v1 + 184) = *(_DWORD *)(result + 420);
  *(_DWORD *)(v1 + 188) = v2;
  return result;
}

uint64_t sep_upsample(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  void (**v17)(uint64_t, uint64_t, uint64_t, _QWORD);
  void (**v18)(uint64_t, uint64_t, uint64_t, _QWORD);
  void (*v19)(uint64_t, uint64_t, uint64_t, _QWORD);
  unsigned int v20;
  unsigned int v21;
  uint64_t result;
  unsigned int v23;
  signed int v24;

  v11 = *(_QWORD *)(a1 + 640);
  v12 = *(_DWORD *)(v11 + 184);
  v13 = *(_DWORD *)(a1 + 420);
  if (v12 >= v13)
  {
    if (*(int *)(a1 + 56) >= 1)
    {
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 304);
      v17 = (void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v11 + 104);
      do
      {
        v18 = v17 - 10;
        v19 = *v17++;
        v19(a1, v16, *(_QWORD *)(a2 + 8 * v15) + 8 * (*(_DWORD *)(v11 + 192 + 4 * v15) * *a3), v18);
        ++v15;
        v16 += 96;
      }
      while (v15 < *(int *)(a1 + 56));
      v13 = *(_DWORD *)(a1 + 420);
    }
    v12 = 0;
    *(_DWORD *)(v11 + 184) = 0;
  }
  v20 = v13 - v12;
  if (v20 >= *(_DWORD *)(v11 + 188))
    v20 = *(_DWORD *)(v11 + 188);
  if (v20 >= a7 - *a6)
    v21 = a7 - *a6;
  else
    v21 = v20;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 648) + 8))(a1, v11 + 24);
  *a6 += v21;
  v23 = *(_DWORD *)(v11 + 188) - v21;
  v24 = *(_DWORD *)(v11 + 184) + v21;
  *(_DWORD *)(v11 + 184) = v24;
  *(_DWORD *)(v11 + 188) = v23;
  if (v24 >= *(_DWORD *)(a1 + 420))
    ++*a3;
  return result;
}

void noop_upsample(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = 0;
}

void fullsize_upsample(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = a3;
}

uint64_t h2v1_upsample(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  char v11;

  v4 = *(_DWORD *)(result + 420);
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = *a4;
    do
    {
      v7 = *(unsigned int *)(result + 136);
      if ((_DWORD)v7)
      {
        v8 = *(_BYTE **)(v6 + 8 * v5);
        v9 = &v8[v7];
        v10 = *(char **)(a3 + 8 * v5);
        do
        {
          v11 = *v10++;
          *v8 = v11;
          v8[1] = v11;
          v8 += 2;
        }
        while (v8 < v9);
        v4 = *(_DWORD *)(result + 420);
      }
      ++v5;
    }
    while (v5 < v4);
  }
  return result;
}

char *h2v2_upsample(char *result, uint64_t a2, uint64_t a3, char **a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  char v13;
  size_t v14;

  if (*((int *)result + 105) >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = 0;
    v8 = *a4;
    do
    {
      v9 = *((unsigned int *)v5 + 34);
      if ((_DWORD)v9)
      {
        v10 = *(_BYTE **)&v8[8 * v7];
        v11 = &v10[v9];
        v12 = *(char **)(a3 + 8 * v6);
        do
        {
          v13 = *v12++;
          *v10 = v13;
          v10[1] = v13;
          v10 += 2;
        }
        while (v10 < v11);
        v14 = *((unsigned int *)v5 + 34);
      }
      else
      {
        v14 = 0;
      }
      result = jcopy_sample_rows(v8, v7, (uint64_t)v8, v7 | 1, 1, v14);
      ++v6;
      v7 += 2;
    }
    while (*((_DWORD *)v5 + 105) > (int)v7);
  }
  return result;
}

_QWORD *int_upsample(_QWORD *result, uint64_t a2, uint64_t a3, char **a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned __int8 *v14;

  if (*((int *)result + 105) >= 1)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v7 = *a4;
    v8 = result[80] + *(int *)(a2 + 4);
    v9 = *(unsigned __int8 *)(v8 + 242);
    v10 = *(unsigned __int8 *)(v8 + 232);
    do
    {
      v11 = *((unsigned int *)v4 + 34);
      if ((_DWORD)v11)
      {
        v12 = *(char **)&v7[8 * v6];
        v13 = &v12[v11];
        v14 = *(unsigned __int8 **)(a3 + 8 * v5);
        do
        {
          if ((_DWORD)v10)
          {
            result = memset(v12, *v14, v10);
            v12 += (v10 - 1) + 1;
          }
          ++v14;
        }
        while (v12 < v13);
      }
      if (v9 >= 2)
        result = jcopy_sample_rows(v7, v6, (uint64_t)v7, (int)v6 + 1, (int)v9 - 1, *((unsigned int *)v4 + 34));
      ++v5;
      v6 += v9;
    }
    while (*((_DWORD *)v4 + 105) > (int)v6);
  }
  return result;
}

void turi::neural_net::convert_chw_to_hwc(uint64_t a1, char *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  vImagePixelCount v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  vImage_Buffer *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  const unint64_t *v16;
  unint64_t v17;
  const float *v18;
  uint64_t v19;
  vImagePixelCount v20;
  void *__p[5];
  void **__attribute__((__org_arrdim(0,0))) destChannels[3];
  vImage_Buffer **srcPlanarBuffers[3];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = *v5;
  if (v4 == 3)
  {
    v20 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 8);
    v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 16);
    std::vector<vImage_Buffer>::vector(__p, v6);
    std::vector<vImage_Buffer const*>::vector(srcPlanarBuffers, v6);
    std::vector<void *>::vector(destChannels, v6);
    if ((_DWORD)v6)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        v12 = (vImage_Buffer *)((char *)__p[0] + v10);
        v12->data = (void *)(v11 + v8);
        v12->height = v20;
        v12->width = v7;
        v12->rowBytes = 4 * v7;
        srcPlanarBuffers[0][v9] = v12;
        destChannels[0][v9] = a2;
        v10 += 32;
        a2 += 4;
        ++v9;
        v8 += 4 * v7 * v20;
      }
      while (32 * v6 != v10);
    }
    vImageConvert_PlanarToChunkyF((const vImage_Buffer **__attribute__((__org_arrdim(0,0))))srcPlanarBuffers[0], destChannels[0], v6, 4 * v6, v7, v20, 4 * v6 * v7, 0);
    if (destChannels[0])
    {
      destChannels[1] = destChannels[0];
      operator delete(destChannels[0]);
    }
    if (srcPlanarBuffers[0])
    {
      srcPlanarBuffers[1] = srcPlanarBuffers[0];
      operator delete(srcPlanarBuffers[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    v13 = v5;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (v6)
    {
      v15 = 0;
      v16 = v13 + 1;
      v17 = v14 / v6;
      do
      {
        v18 = (const float *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + 4 * v15 * v17);
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        turi::neural_net::external_float_array::external_float_array((turi::neural_net::external_float_array *)__p, v18, v17, v16, v19 - 1);
        turi::neural_net::convert_chw_to_hwc(__p, a2);
        ++v15;
        a2 += 4 * v17;
        --v6;
      }
      while (v6);
    }
  }
}

void sub_218375AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void turi::neural_net::convert_hwc_to_chw(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  vImagePixelCount *v5;
  vImagePixelCount v6;
  uint64_t v7;
  vImagePixelCount v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  vImage_Buffer *v17;
  _QWORD *v18;
  vImagePixelCount *v19;
  unint64_t v20;
  uint64_t v21;
  const unint64_t *v22;
  unint64_t v23;
  const float *v24;
  uint64_t v25;
  int v26;
  void **srcChannels[5];
  vImage_Buffer **destPlanarBuffers[3];
  void *__p[3];

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
  v5 = (vImagePixelCount *)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  v6 = *v5;
  v7 = *a1;
  if (v4 == 3)
  {
    v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t *))(v7 + 32))(a1) + 8);
    v9 = *(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1) + 16);
    v10 = v9;
    std::vector<void const*>::vector(srcChannels, v9);
    std::vector<vImage_Buffer>::vector(__p, v9);
    std::vector<vImage_Buffer const*>::vector(destPlanarBuffers, v9);
    v11 = 4 * v9;
    if ((_DWORD)v9)
    {
      v26 = v9;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 4 * v8;
      do
      {
        v16 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
        srcChannels[0][v13] = (void *)(v16 + v14);
        v17 = (vImage_Buffer *)((char *)__p[0] + v12);
        v18 = (char *)__p[0] + 8 * v14;
        *v18 = a2;
        v18[1] = v6;
        v18[2] = v8;
        v18[3] = v15;
        destPlanarBuffers[0][v13] = v17;
        v14 += 4;
        ++v13;
        v12 += 32;
        a2 += 4 * v6 * v8;
      }
      while (v11 != v14);
      LODWORD(v9) = v26;
    }
    else
    {
      v15 = 4 * v8;
    }
    vImageConvert_ChunkyToPlanarF((const void **__attribute__((__org_arrdim(0,0))))srcChannels[0], (const vImage_Buffer **__attribute__((__org_arrdim(0,0))))destPlanarBuffers[0], v9, v11, v8, v6, v15 * v10, 0);
    if (destPlanarBuffers[0])
    {
      destPlanarBuffers[1] = destPlanarBuffers[0];
      operator delete(destPlanarBuffers[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (srcChannels[0])
    {
      srcChannels[1] = srcChannels[0];
      operator delete(srcChannels[0]);
    }
  }
  else
  {
    v19 = v5;
    v20 = (*(uint64_t (**)(uint64_t *))(v7 + 24))(a1);
    if (v6)
    {
      v21 = 0;
      v22 = v19 + 1;
      v23 = v20 / v6;
      do
      {
        v24 = (const float *)((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) + 4 * v21 * v23);
        v25 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
        turi::neural_net::external_float_array::external_float_array((turi::neural_net::external_float_array *)srcChannels, v24, v23, v22, v25 - 1);
        turi::neural_net::convert_hwc_to_chw(srcChannels, a2);
        ++v21;
        a2 += 4 * v23;
        --v6;
      }
      while (v6);
    }
  }
}

void sub_218375D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void turi::neural_net::copy_image_batch_float16(uint64_t **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *__p[2];
  uint64_t *v16;
  void *v17[2];
  uint64_t v18;
  void *v19[2];
  uint64_t v20;

  v5 = a2;
  v6 = **a1;
  v7 = (*a1)[2] * (*a1)[1] * (*a1)[3];
  v8 = v7 * v6;
  v9 = operator new[]();
  v10 = (__int16 *)v9;
  if (v6)
  {
    v11 = 0;
    v12 = 2 * v7;
    v13 = v9;
    do
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", v11);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "readBytes:dataLayout:imageIndex:", v13, 0, 0);

      ++v11;
      v13 += v12;
    }
    while (v6 != v11);
  }
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<half *,half *>((char *)v19, v10, &v10[v8], v8);
  *(_OWORD *)v17 = *(_OWORD *)v19;
  v18 = v20;
  v19[1] = 0;
  v20 = 0;
  v19[0] = 0;
  *(_OWORD *)__p = *(_OWORD *)a1;
  v16 = a1[2];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  turi::neural_net::shared_float_array::wrap((uint64_t)v17, (uint64_t)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  MEMORY[0x219A199F0](v10, 0x1000C80BDFB0063);

}

void sub_218375EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  void *v18;
  uint64_t v19;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a17)
    operator delete(a17);
  MEMORY[0x219A199F0](v19, 0x1000C80BDFB0063);

  _Unwind_Resume(a1);
}

void turi::neural_net::copy_image_batch(uint64_t **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *__p[2];
  uint64_t *v13;
  void *v14[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;

  v5 = a2;
  v6 = **a1;
  v7 = (*a1)[2] * (*a1)[1] * (*a1)[3];
  std::vector<float>::vector(v16, v7 * v6);
  if (v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = 4 * v7;
    do
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "readBytes:dataLayout:imageIndex:", (char *)v16[0] + v8, 0, 0);

      ++v9;
      v8 += v10;
    }
    while (v6 != v9);
  }
  *(_OWORD *)v14 = *(_OWORD *)v16;
  v15 = v17;
  v16[1] = 0;
  v17 = 0;
  v16[0] = 0;
  *(_OWORD *)__p = *(_OWORD *)a1;
  v13 = a1[2];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  turi::neural_net::shared_float_array::wrap((uint64_t)v14, (uint64_t)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }

}

void sub_218376080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  void *v18;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a17)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void turi::neural_net::fill_image_batch(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = v5[1];
  v7 = v5[2];
  v8 = v5[3];
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v9 = v3;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v15;
    v12 = 4 * v7 * v6 * v8;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v15 != v11)
          objc_enumerationMutation(v9);
        objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * v13++), "writeBytes:dataLayout:imageIndex:", v4, 0, 0, (_QWORD)v14);
        v4 += v12;
      }
      while (v10 != v13);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v10);
  }

}

void sub_218376228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float turi::neural_net::get_array_map_scalar(uint64_t a1, const void **a2, float a3)
{
  uint64_t v6;

  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2))
  {
    v6 = std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) == 1)
      return *(float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  return a3;
}

BOOL turi::neural_net::get_array_map_BOOL(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6;

  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2))
  {
    v6 = std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) == 1)
      return *(float *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) != 0.0;
  }
  return a3;
}

void turi::neural_net::get_array_map_optimizer_options(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v5;

  *(_BYTE *)a2 = 0;
  *(_OWORD *)(a2 + 4) = xmmword_2186C17F0;
  *(_QWORD *)(a2 + 20) = 0x3F7FBE773F666666;
  *(_DWORD *)(a2 + 28) = 841731191;
  std::string::basic_string[abi:ne180100]<0>(__p, "use_sgd");
  *(_BYTE *)a2 = turi::neural_net::get_array_map_BOOL(a1, (const void **)__p, 0);
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "learning_rate");
  *(float *)(a2 + 4) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.001);
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "gradient_clipping");
  *(float *)(a2 + 8) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.0);
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_decay");
  *(float *)(a2 + 12) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.0);
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "sgd_momentum");
  *(float *)(a2 + 16) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.9);
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "adam_beta1");
  *(float *)(a2 + 20) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.9);
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "adam_beta2");
  *(float *)(a2 + 24) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.999);
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "adam_epsilon");
  *(float *)(a2 + 28) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.00000001);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_21837654C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float turi::neural_net::sumImage(turi::neural_net *this, MPSImage *a2)
{
  turi::neural_net *v2;
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v7;

  v2 = this;
  v3 = -[turi::neural_net pixelFormat](v2, "pixelFormat");
  if (v3 == 25 || v3 == 115 || v3 == 65)
  {
    v4 = turi::neural_net::sumSingleImage<half>(v2);
  }
  else
  {
    v7 = -[turi::neural_net pixelFormat](v2, "pixelFormat");
    if (v7 == 55 || v7 == 125 || v7 == 105)
    {
      v4 = turi::neural_net::sumSingleImage<float>(v2);
    }
    else
    {
      if (-[turi::neural_net pixelFormat](v2, "pixelFormat") != 10
        && -[turi::neural_net pixelFormat](v2, "pixelFormat") != 30
        && -[turi::neural_net pixelFormat](v2, "pixelFormat") != 70
        && -[turi::neural_net pixelFormat](v2, "pixelFormat") != 80)
      {
        turi::neural_net::sumImage();
      }
      v4 = turi::neural_net::sumSingleImage<unsigned char>(v2);
    }
  }
  v5 = v4;

  return v5;
}

void sub_218376658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float turi::neural_net::sumSingleImage<half>(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 *v5;
  float i;
  __int16 v7;
  void *__p[3];

  v1 = a1;
  v2 = objc_msgSend(v1, "height");
  v3 = objc_msgSend(v1, "width");
  v4 = v3 * v2 * objc_msgSend(v1, "featureChannels");
  std::vector<half>::vector(__p, v4);
  v5 = (__int16 *)__p[0];
  objc_msgSend(v1, "readBytes:dataLayout:imageIndex:", __p[0], 1, 0);
  for (i = 0.0; v4; --v4)
  {
    v7 = *v5++;
    _H0 = v7;
    __asm { FCVT            S0, H0 }
    i = i + _S0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return i;
}

void sub_21837671C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

float turi::neural_net::sumSingleImage<float>(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  float *v5;
  float i;
  float v7;
  void *__p[3];

  v1 = a1;
  v2 = objc_msgSend(v1, "height");
  v3 = objc_msgSend(v1, "width");
  v4 = v3 * v2 * objc_msgSend(v1, "featureChannels");
  std::vector<float>::vector(__p, v4);
  v5 = (float *)__p[0];
  objc_msgSend(v1, "readBytes:dataLayout:imageIndex:", __p[0], 1, 0);
  for (i = 0.0; v4; --v4)
  {
    v7 = *v5++;
    i = i + v7;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return i;
}

void sub_2183767F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

float turi::neural_net::sumSingleImage<unsigned char>(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  unsigned __int8 *v5;
  float i;
  unsigned int v7;
  void *__p[3];

  v1 = a1;
  v2 = objc_msgSend(v1, "height");
  v3 = objc_msgSend(v1, "width");
  v4 = v3 * v2 * objc_msgSend(v1, "featureChannels");
  std::vector<unsigned char>::vector(__p, v4);
  v5 = (unsigned __int8 *)__p[0];
  objc_msgSend(v1, "readBytes:dataLayout:imageIndex:", __p[0], 1, 0);
  for (i = 0.0; v4; --v4)
  {
    v7 = *v5++;
    i = i + (float)v7;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return i;
}

void sub_2183768D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<vImage_Buffer>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_21837695C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<vImage_Buffer const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2183769D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<void *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_218376A44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<void const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_218376AB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<half *,half *>(char *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  __int16 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      _H0 = v8;
      __asm { FCVT            S0, H0 }
      *v7++ = _S0;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_218376B2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<half>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<half>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_218376BA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_218376C10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _GLOBAL__sub_I_mps_utils_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

uint64_t jpeg_std_error(uint64_t result)
{
  *(_QWORD *)result = error_exit;
  *(_QWORD *)(result + 8) = emit_message;
  *(_QWORD *)(result + 16) = output_message;
  *(_QWORD *)(result + 24) = format_message;
  *(_QWORD *)(result + 32) = reset_error_mgr;
  *(_DWORD *)(result + 124) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = jpeg_std_message_table;
  *(_DWORD *)(result + 144) = 126;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  return result;
}

void error_exit(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  jpeg_destroy(a1);
  exit(1);
}

uint64_t *emit_message(uint64_t *result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  if (a2 < 0)
  {
    v3 = *(_QWORD *)(v2 + 128);
    if (!v3 || *(int *)(v2 + 124) >= 3)
    {
      result = (uint64_t *)(*(uint64_t (**)(void))(v2 + 16))();
      v3 = *(_QWORD *)(v2 + 128);
    }
    *(_QWORD *)(v2 + 128) = v3 + 1;
  }
  else if (*(_DWORD *)(v2 + 124) >= a2)
  {
    return (uint64_t *)(*(uint64_t (**)(void))(v2 + 16))();
  }
  return result;
}

uint64_t output_message(uint64_t a1)
{
  char v2[200];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 24))(a1, v2);
  return fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", v2);
}

uint64_t format_message(uint64_t *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  const char **v9;
  const char *v10;
  const char *v11;
  int v12;
  int v13;
  const char *v14;
  const char *v16;

  v3 = *a1;
  v4 = *(unsigned int *)(*a1 + 40);
  if ((int)v4 >= 1 && (int)v4 <= *(_DWORD *)(v3 + 144))
  {
    v9 = (const char **)(*(_QWORD *)(v3 + 136) + 8 * v4);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 152);
    if (!v5)
      goto LABEL_9;
    v6 = *(_DWORD *)(v3 + 160);
    v7 = __OFSUB__((_DWORD)v4, v6);
    v8 = v4 - v6;
    if (v8 < 0 != v7 || (int)v4 > *(_DWORD *)(v3 + 164))
      goto LABEL_9;
    v9 = (const char **)(v5 + 8 * v8);
  }
  v10 = *v9;
  if (!*v9)
  {
LABEL_9:
    *(_DWORD *)(v3 + 44) = v4;
    v10 = **(const char ***)(v3 + 136);
  }
  v11 = v10;
  while (1)
  {
    v13 = *(unsigned __int8 *)v11++;
    v12 = v13;
    if (!v13)
      break;
    if (v12 == 37)
    {
      if (*v11 == 115)
      {
        v14 = fmtcheck(v10, "Invalid format string error message: %s");
        return sprintf(a2, v14, v3 + 44);
      }
      break;
    }
  }
  v16 = fmtcheck(v10, "Invalid format string error message: %d %d %d %d %d %d %d %d");
  return sprintf(a2, v16, *(unsigned int *)(v3 + 44), *(unsigned int *)(v3 + 48), *(unsigned int *)(v3 + 52), *(unsigned int *)(v3 + 56), *(unsigned int *)(v3 + 60), *(unsigned int *)(v3 + 64), *(unsigned int *)(v3 + 68), *(unsigned int *)(v3 + 72));
}

uint64_t *reset_error_mgr(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_QWORD *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t jpeg_idct_float(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  unsigned int i;
  float *v10;
  int v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  float v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  _BYTE *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  _BYTE v74[256];
  uint64_t v75;

  v5 = 0;
  v75 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(result + 440);
  v7 = (__int16 *)(a3 + 64);
  v8 = *(_QWORD *)(a2 + 88) + 128;
  for (i = 9; i > 1; --i)
  {
    v10 = (float *)(v8 + v5);
    v11 = (unsigned __int16)*(v7 - 24);
    v12 = (unsigned __int16)*(v7 - 16);
    if (v11 | v12)
      goto LABEL_9;
    if (*(v7 - 8) || *v7 || v7[8] || v7[16] || v7[24])
    {
      LOWORD(v12) = 0;
LABEL_9:
      v13 = *(v10 - 32) * (float)*(v7 - 32);
      v14 = *(v10 - 16) * (float)(__int16)v12;
      v15 = *v10 * (float)*v7;
      v16 = v10[16] * (float)v7[16];
      v17 = v13 + v15;
      v18 = v13 - v15;
      v19 = v14 + v16;
      v20 = -(float)((float)(v14 + v16) - (float)((float)(v14 - v16) * 1.4142));
      v21 = v17 + v19;
      v22 = v17 - v19;
      v23 = v18 + v20;
      v24 = v18 - v20;
      v25 = *(v10 - 24) * (float)(__int16)v11;
      v26 = *(v10 - 8) * (float)*(v7 - 8);
      v27 = v10[8] * (float)v7[8];
      v28 = v10[24] * (float)v7[24];
      v29 = v26 + v27;
      v30 = v27 - v26;
      v31 = v25 + v28;
      v32 = v25 - v28;
      v33 = v29 + v31;
      v34 = (float)(v31 - v29) * 1.4142;
      v35 = (float)(v30 + v32) * 1.8478;
      v36 = (float)(v35 + (float)(v30 * -2.6131)) - v33;
      v37 = v34 - v36;
      v38 = (float)(v35 + (float)(v32 * -1.0824)) - v37;
      v39 = (float *)&v74[v5];
      *v39 = v21 + v33;
      v39[56] = v21 - v33;
      v39[8] = v23 + v36;
      v39[48] = v23 - v36;
      v39[16] = v24 + v37;
      v39[40] = v24 - v37;
      v39[24] = v22 + v38;
      v40 = v22 - v38;
      v41 = 32;
      goto LABEL_10;
    }
    v40 = *(v10 - 32) * (float)*(v7 - 32);
    v42 = (float *)&v74[v5];
    *v42 = v40;
    v42[8] = v40;
    v42[16] = v40;
    v42[24] = v40;
    v42[32] = v40;
    v42[40] = v40;
    v42[48] = v40;
    v41 = 56;
LABEL_10:
    *(float *)&v74[4 * v41 + v5] = v40;
    v5 += 4;
    ++v7;
  }
  v43 = 0;
  v44 = v6 - 384;
  do
  {
    v45 = (float *)&v74[4 * v43];
    v46 = (_BYTE *)(*(_QWORD *)(a4 + v43) + a5);
    v47 = v45[1];
    v48 = *v45 + 512.5;
    v49 = v45[4];
    v50 = v45[5];
    v51 = v48 + v49;
    v52 = v45[2];
    v53 = v45[3];
    v54 = v45[6];
    v55 = v45[7];
    v56 = v52 + v54;
    v57 = v48 - v49;
    v58 = -(float)((float)(v52 + v54) - (float)((float)(v52 - v54) * 1.4142));
    v59 = v50 + v53;
    v60 = v50 - v53;
    v61 = v51 + v56;
    v62 = v51 - v56;
    v63 = v47 + v55;
    v64 = v47 - v55;
    v65 = v59 + v63;
    v66 = v63 - v59;
    v67 = v57 + v58;
    v68 = v57 - v58;
    v69 = v66 * 1.4142;
    v70 = (float)(v60 + v64) * 1.8478;
    v71 = v70 + (float)(v64 * -1.0824);
    v72 = (float)(v70 + (float)(v60 * -2.6131)) - v65;
    v73 = v69 - v72;
    *v46 = *(_BYTE *)(v44 + ((int)(float)(v61 + v65) & 0x3FFLL));
    v46[7] = *(_BYTE *)(v44 + ((int)(float)(v61 - v65) & 0x3FFLL));
    v46[1] = *(_BYTE *)(v44 + ((int)(float)(v67 + v72) & 0x3FFLL));
    v46[6] = *(_BYTE *)(v44 + ((int)(float)(v67 - v72) & 0x3FFLL));
    v46[2] = *(_BYTE *)(v44 + ((int)(float)(v68 + v73) & 0x3FFLL));
    v46[5] = *(_BYTE *)(v44 + ((int)(float)(v68 - v73) & 0x3FFLL));
    v46[3] = *(_BYTE *)(v44 + ((int)(float)(v62 + (float)(v71 - v73)) & 0x3FFLL));
    v46[4] = *(_BYTE *)(v44 + ((int)(float)(v62 - (float)(v71 - v73)) & 0x3FFLL));
    v43 += 8;
  }
  while (v43 != 64);
  return result;
}

uint64_t jpeg_idct_ifast(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  unsigned int i;
  _DWORD *v10;
  unsigned __int16 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  _BYTE *v45;
  int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  uint64_t result;
  uint64_t v72;
  _BYTE v73[256];
  uint64_t v74;

  v5 = 0;
  v74 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = (__int16 *)(a3 + 64);
  v8 = *(_QWORD *)(a2 + 88) + 128;
  for (i = 9; i > 1; --i)
  {
    v10 = (_DWORD *)(v8 + v5);
    v11 = *(v7 - 16);
    if ((unsigned __int16)*(v7 - 24) | v11)
      goto LABEL_9;
    if (*(v7 - 8) || *v7 || v7[8] || v7[16] || v7[24])
    {
      v11 = 0;
LABEL_9:
      v12 = *(v10 - 32) * *(v7 - 32);
      v13 = *(v10 - 16) * (__int16)v11;
      v14 = *v10 * *v7;
      v15 = v10[16] * v7[16];
      v16 = v14 + v12;
      v17 = v12 - v14;
      v18 = v15 + v13;
      v19 = ((unint64_t)(362 * (v13 - v15)) >> 8) - (v15 + v13);
      v20 = v18 + v16;
      v21 = v16 - v18;
      v22 = v19 + v17;
      v23 = v17 - v19;
      v24 = *(v10 - 24) * *(v7 - 24);
      v25 = *(v10 - 8) * *(v7 - 8);
      v26 = v10[8] * v7[8];
      v27 = v10[24] * v7[24];
      v28 = v26 + v25;
      v29 = v26 - v25;
      v30 = v27 + v24;
      v31 = v24 - v27;
      v32 = v30 + v28;
      v33 = (unint64_t)(362 * (v30 - v28)) >> 8;
      v34 = &v73[v5];
      *v34 = v32 + v20;
      v35 = (unint64_t)(473 * (v31 + v29)) >> 8;
      v36 = v35 - (v32 + ((unint64_t)(669 * v29) >> 8));
      LODWORD(v33) = v33 - v36;
      v34[56] = v20 - v32;
      v34[8] = v36 + v22;
      v37 = v35 - ((unint64_t)(277 * v31) >> 8) - v33;
      v34[48] = v22 - v36;
      v34[16] = v33 + v23;
      v34[40] = v23 - v33;
      v34[24] = v37 + v21;
      v38 = v21 - v37;
      v39 = 32;
      goto LABEL_10;
    }
    v38 = *(v10 - 32) * *(v7 - 32);
    v40 = (int *)&v73[v5];
    *v40 = v38;
    v40[8] = v38;
    v40[16] = v38;
    v40[24] = v38;
    v40[32] = v38;
    v40[40] = v38;
    v40[48] = v38;
    v39 = 56;
LABEL_10:
    *(_DWORD *)&v73[4 * v39 + v5] = v38;
    v5 += 4;
    ++v7;
  }
  v41 = v6 - 384;
  v42 = 28;
  v43 = a5;
  do
  {
    v44 = (int *)&v73[v42];
    v45 = (_BYTE *)(*a4 + v43);
    v46 = *(_DWORD *)&v73[v42 - 24];
    v47 = (*(_DWORD *)&v73[v42 - 28] + 16400);
    v48 = *(_DWORD *)&v73[v42 - 20];
    if (*(_QWORD *)&v73[v42 - 24])
      goto LABEL_20;
    if (*(v44 - 4)
      || *(_DWORD *)&v73[v42 - 12]
      || *(_DWORD *)&v73[v42 - 8]
      || *(_DWORD *)&v73[v42 - 4]
      || *(_DWORD *)&v73[v42])
    {
      v48 = 0;
LABEL_20:
      v50 = *(v44 - 4);
      v49 = *(v44 - 3);
      v51 = v49 + v47;
      v52 = v47 - v49;
      v54 = *(v44 - 2);
      v53 = *(v44 - 1);
      v55 = v53 + v48;
      v56 = ((362 * (unint64_t)(v48 - v53)) >> 8) - (v53 + v48);
      v57 = v55 + v51;
      v58 = v51 - v55;
      v59 = v56 + v52;
      v60 = v52 - v56;
      v61 = v50 + v54;
      v62 = v54 - v50;
      v63 = *v44;
      v64 = v63 + v46;
      v65 = v46 - v63;
      v66 = v64 + v61;
      v67 = (362 * (unint64_t)(v64 - v61)) >> 8;
      *v45 = *(_BYTE *)(v41 + (((unint64_t)(v66 + v57) >> 5) & 0x3FF));
      v68 = (473 * (unint64_t)(v65 + v62)) >> 8;
      v69 = v66 + ((669 * (unint64_t)v62) >> 8);
      v45[7] = *(_BYTE *)(v41 + (((unint64_t)(v57 - v66) >> 5) & 0x3FF));
      v45[1] = *(_BYTE *)(v41 + (((unint64_t)(v68 - v69 + v59) >> 5) & 0x3FF));
      LODWORD(v67) = v67 - (v68 - v69);
      v45[6] = *(_BYTE *)(v41 + (((unint64_t)(v59 - (v68 - v69)) >> 5) & 0x3FF));
      v45[2] = *(_BYTE *)(v41 + (((unint64_t)(v67 + v60) >> 5) & 0x3FF));
      v70 = v68 - ((277 * (unint64_t)v65) >> 8) - v67;
      v45[5] = *(_BYTE *)(v41 + (((unint64_t)(v60 - v67) >> 5) & 0x3FF));
      v45[3] = *(_BYTE *)(v41 + (((unint64_t)(v70 + v58) >> 5) & 0x3FF));
      result = *(unsigned __int8 *)(v41 + (((unint64_t)(v58 - v70) >> 5) & 0x3FF));
      v72 = 4;
      goto LABEL_21;
    }
    result = *(unsigned __int8 *)(v41 + ((v47 >> 5) & 0x3FF));
    *(_DWORD *)v45 = vdup_n_s8(result).u32[0];
    v45[4] = result;
    v45[5] = result;
    v45[6] = result;
    v72 = 7;
LABEL_21:
    v45[v72] = result;
    ++a4;
    v42 += 32;
  }
  while (v42 != 284);
  return result;
}

uint64_t jpeg_idct_islow(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  unsigned int i;
  _DWORD *v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  int *v45;
  _BYTE *v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v78[256];
  uint64_t v79;

  v5 = 0;
  v79 = *MEMORY[0x24BDAC8D0];
  v6 = (__int16 *)(a3 + 64);
  v7 = *(_QWORD *)(a2 + 88) + 128;
  v76 = *(_QWORD *)(a1 + 440);
  for (i = 9; i > 1; --i)
  {
    v9 = (_DWORD *)(v7 + v5);
    v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10)
      goto LABEL_9;
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      v10 = 0;
LABEL_9:
      v11 = *v9 * *v6;
      v12 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      v13 = v12 + (v11 << 13);
      v14 = v12 - (v11 << 13);
      v15 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      v16 = (int)v9[16] * (uint64_t)v6[16];
      v17 = 4433 * (v15 + v16);
      v18 = v17 + 6270 * v15;
      v19 = v17 - 15137 * v16;
      v20 = v18 + v13;
      v21 = v13 - v18;
      v22 = v19 + v14;
      v23 = v14 - v19;
      v24 = (int)v9[24] * (uint64_t)v6[24];
      v25 = (int)v9[8] * (uint64_t)v6[8];
      v26 = *(v9 - 8);
      v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      v28 = v24 + v26 * (uint64_t)*(v6 - 8);
      v29 = 9633 * (v25 + v27 + v28);
      v30 = v29 - 16069 * v28;
      v31 = v29 - 3196 * (v25 + v27);
      v32 = -7373 * (v24 + v27);
      v33 = v32 + 2446 * v24 + v30;
      v34 = v32 + 12299 * v27 + v31;
      v35 = -20995 * (v25 + v26 * (uint64_t)*(v6 - 8));
      v36 = v35 + 16819 * v25 + v31;
      v37 = v35 + 25172 * v26 * (uint64_t)*(v6 - 8) + v30;
      v38 = &v78[v5];
      *v38 = (unint64_t)(v34 + v20) >> 11;
      v38[56] = (unint64_t)(v20 - v34) >> 11;
      v38[8] = (unint64_t)(v37 + v22) >> 11;
      v38[48] = (unint64_t)(v22 - v37) >> 11;
      v38[16] = (unint64_t)(v36 + v23) >> 11;
      v38[40] = (unint64_t)(v23 - v36) >> 11;
      v38[24] = (unint64_t)(v33 + v21) >> 11;
      v39 = (unint64_t)(v21 - v33) >> 11;
      v40 = 32;
      goto LABEL_10;
    }
    LODWORD(v39) = 4 * *(v6 - 32) * *(v9 - 32);
    v41 = &v78[v5];
    *v41 = v39;
    v41[8] = v39;
    v41[16] = v39;
    v41[24] = v39;
    v41[32] = v39;
    v41[40] = v39;
    v41[48] = v39;
    v40 = 56;
LABEL_10:
    *(_DWORD *)&v78[4 * v40 + v5] = v39;
    v5 += 4;
    ++v6;
  }
  v42 = v76 - 384;
  v43 = 28;
  result = 4294959923;
  do
  {
    v45 = (int *)&v78[v43];
    v46 = (_BYTE *)(*a4 + a5);
    v47 = *(_DWORD *)&v78[v43 - 24];
    v48 = *(int *)&v78[v43 - 28] + 16400;
    v49 = *(unsigned int *)&v78[v43 - 20];
    if (v47)
      v50 = 0;
    else
      v50 = v49 == 0;
    if (!v50)
      goto LABEL_24;
    if (*(v45 - 4)
      || *(_DWORD *)&v78[v43 - 12]
      || *(_DWORD *)&v78[v43 - 8]
      || *(_DWORD *)&v78[v43 - 4]
      || *(_DWORD *)&v78[v43])
    {
      LODWORD(v49) = 0;
LABEL_24:
      v52 = *(v45 - 4);
      v51 = *(v45 - 3);
      v53 = v48 + v51;
      v54 = ((_DWORD)v48 + v51) << 13;
      v55 = ((_DWORD)v48 - v51) << 13;
      v57 = *(v45 - 2);
      v56 = *(v45 - 1);
      v58 = 4433 * (v56 + v49);
      v59 = v58 + 6270 * v49;
      v60 = v58 - 15137 * v56;
      v61 = v59 + (v53 << 13);
      v62 = v54 - v59;
      v63 = v60 + v55;
      v64 = v55 - v60;
      v65 = *v45;
      v66 = 9633 * (v52 + v65 + v57 + v47);
      v67 = v66 - 16069 * (v52 + v65);
      v68 = v66 - 3196 * (v57 + v47);
      v69 = -7373 * (v65 + v47);
      v70 = v69 + 12299 * v47 + v68;
      *v46 = *(_BYTE *)(v42 + (((unint64_t)(v70 + v61) >> 18) & 0x3FF));
      v71 = (v61 - v70);
      v72 = -20995 * (v52 + v57);
      v73 = v72 + 25172 * v52 + v67;
      v46[7] = *(_BYTE *)(v42 + ((v71 >> 18) & 0x3FF));
      v46[1] = *(_BYTE *)(v42 + (((unint64_t)(v73 + v63) >> 18) & 0x3FF));
      v74 = v72 + 16819 * v57 + v68;
      v46[6] = *(_BYTE *)(v42 + (((unint64_t)(v63 - v73) >> 18) & 0x3FF));
      v46[2] = *(_BYTE *)(v42 + (((unint64_t)(v74 + v64) >> 18) & 0x3FF));
      LODWORD(v71) = v69 + 2446 * v65 + v67;
      v46[5] = *(_BYTE *)(v42 + (((unint64_t)(v64 - v74) >> 18) & 0x3FF));
      v46[3] = *(_BYTE *)(v42 + (((unint64_t)(v71 + v62) >> 18) & 0x3FF));
      LOBYTE(v74) = *(_BYTE *)(v42 + (((unint64_t)(v62 - v71) >> 18) & 0x3FF));
      v75 = 4;
      goto LABEL_25;
    }
    v74 = *(unsigned __int8 *)(v42 + ((v48 >> 5) & 0x3FF));
    *(_DWORD *)v46 = vdup_n_s8(v74).u32[0];
    v46[4] = v74;
    v46[5] = v74;
    v46[6] = v74;
    v75 = 7;
LABEL_25:
    v46[v75] = v74;
    ++a4;
    v43 += 32;
  }
  while (v43 != 284);
  return result;
}

uint64_t jpeg_idct_7x7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  _BYTE *v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  _BYTE v63[196];
  uint64_t v64;

  v5 = 0;
  v64 = *MEMORY[0x24BDAC8D0];
  v61 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = &v63[4 * v5];
    v8 = (_DWORD *)(v6 + 4 * v5);
    v9 = (__int16 *)(a3 + 2 * v5);
    v10 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    v11 = (int)v8[16] * (uint64_t)v9[16];
    v12 = (int)v8[32] * (uint64_t)v9[32];
    v13 = (int)v8[48] * (uint64_t)v9[48];
    v14 = 7223 * (v12 - v13);
    v15 = 2578 * (v11 - v12);
    v16 = v10 - 15083 * v12 + v15 + v14;
    v17 = v10 + 10438 * (v11 + v13);
    v18 = v14 - 637 * v13 + v17;
    v19 = v15 - 20239 * v11 + v17;
    v20 = v10 + 11585 * (v12 - (v11 + v13));
    v21 = (int)v8[8] * (uint64_t)v9[8];
    v22 = (int)v8[24] * (uint64_t)v9[24];
    v23 = (int)v8[40] * (uint64_t)v9[40];
    v24 = 7663 * (v21 + v22);
    v25 = 1395 * (v21 - v22);
    v26 = v24 - v25;
    v27 = v24 + v25 - 11295 * (v22 + v23);
    v28 = 5027 * (v21 + v23);
    v29 = v28 + v26;
    v30 = v28 + 15326 * v23 - 11295 * (v22 + v23);
    *v7 = (unint64_t)(v29 + v18) >> 11;
    v7[42] = (unint64_t)(v18 - v29) >> 11;
    v7[7] = (unint64_t)(v27 + v16) >> 11;
    v7[35] = (unint64_t)(v16 - v27) >> 11;
    v7[14] = (unint64_t)(v30 + v19) >> 11;
    v7[28] = (unint64_t)(v19 - v30) >> 11;
    v7[21] = v20 >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 7);
  v31 = 0;
  v32 = v61 - 384;
  result = 11585;
  do
  {
    v34 = *a4++;
    v35 = *(_DWORD *)&v63[v31 + 4];
    v36 = (*(_DWORD *)&v63[v31] << 13) + 134348800;
    v38 = *(_DWORD *)&v63[v31 + 20];
    v37 = *(_DWORD *)&v63[v31 + 24];
    v39 = *(_DWORD *)&v63[v31 + 16];
    v40 = 7223 * (v39 - v37);
    v42 = *(_DWORD *)&v63[v31 + 8];
    v41 = *(_DWORD *)&v63[v31 + 12];
    v43 = 2578 * (v42 - v39);
    v44 = v43 + v40;
    v45 = v37 + v42;
    v46 = v40 - 637 * v37;
    v47 = 7663 * (v41 + v35);
    v48 = v43 - 20239 * v42;
    v49 = 1395 * (v35 - v41);
    v50 = v47 - v49;
    v51 = v47 + v49;
    v52 = v36 + 10438 * v45;
    v53 = v46 + v52;
    v54 = 5027 * (v38 + v35);
    v55 = v50 + v54;
    v56 = v36 - 15083 * v39 + v44;
    v57 = (_BYTE *)(v34 + a5);
    *v57 = *(_BYTE *)(v32 + (((unint64_t)(v55 + v53) >> 18) & 0x3FF));
    v58 = -11295 * (v38 + v41);
    v59 = v51 + v58;
    v57[6] = *(_BYTE *)(v32 + (((unint64_t)(v53 - v55) >> 18) & 0x3FF));
    v60 = v54 + 15326 * v38 + v58;
    v57[1] = *(_BYTE *)(v32 + (((unint64_t)(v59 + v56) >> 18) & 0x3FF));
    v57[5] = *(_BYTE *)(v32 + (((unint64_t)(v56 - v59) >> 18) & 0x3FF));
    v57[2] = *(_BYTE *)(v32 + (((unint64_t)(v60 + v48 + v52) >> 18) & 0x3FF));
    v57[4] = *(_BYTE *)(v32 + (((unint64_t)(v48 + v52 - v60) >> 18) & 0x3FF));
    v57[3] = *(_BYTE *)(v32 + (((unint64_t)(v36 + 11585 * (v39 - v45)) >> 18) & 0x3FF));
    v31 += 28;
  }
  while (v31 != 196);
  return result;
}

uint64_t jpeg_idct_6x6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t result;
  _BYTE v43[144];
  uint64_t v44;

  v5 = 0;
  v44 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v43[4 * v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    v12 = (int)v9[32] * (uint64_t)v10[32];
    v13 = v11 + 5793 * v12;
    v14 = (unint64_t)(v11 - 11586 * v12) >> 11;
    v15 = 10033 * (int)v9[16] * (uint64_t)v10[16];
    v16 = v15 + v13;
    v17 = v13 - v15;
    v18 = (int)v9[8] * (uint64_t)v10[8];
    v19 = (int)v9[24] * (uint64_t)v10[24];
    v20 = (int)v9[40] * (uint64_t)v10[40];
    v21 = 2998 * (v18 + v20);
    v22 = v21 + ((v18 + v19) << 13);
    v23 = v21 + ((v20 - v19) << 13);
    LODWORD(v18) = v18 - (v19 + v20);
    *v8 = (unint64_t)(v22 + v16) >> 11;
    v8[30] = (unint64_t)(v16 - v22) >> 11;
    v8[6] = v14 + 4 * v18;
    v8[24] = v14 - 4 * v18;
    v8[12] = (unint64_t)(v23 + v17) >> 11;
    v8[18] = (unint64_t)(v17 - v23) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 6);
  v24 = 0;
  v25 = v6 - 384;
  v26 = a5;
  do
  {
    v27 = *a4++;
    v28 = (_BYTE *)(v27 + v26);
    v29 = *(_DWORD *)&v43[v24 + 4];
    v30 = *(_DWORD *)&v43[v24 + 16];
    v31 = *(_DWORD *)&v43[v24 + 20];
    v32 = (*(_DWORD *)&v43[v24] << 13) + 134348800;
    v33 = v32 + 5793 * v30;
    v34 = *(_DWORD *)&v43[v24 + 12];
    v35 = 10033 * *(_DWORD *)&v43[v24 + 8];
    v36 = 2998 * (v31 + v29);
    v37 = v36 + ((v34 + v29) << 13);
    v38 = v31 - v34;
    v39 = v29 - (v34 + v31);
    v40 = v32 - 11586 * v30;
    *v28 = *(_BYTE *)(v25 + (((unint64_t)(v37 + v33 + v35) >> 18) & 0x3FF));
    v41 = v36 + (v38 << 13);
    v28[5] = *(_BYTE *)(v25 + (((unint64_t)(v33 + v35 - v37) >> 18) & 0x3FF));
    v28[1] = *(_BYTE *)(v25 + (((unint64_t)(v40 + (v39 << 13)) >> 18) & 0x3FF));
    v28[4] = *(_BYTE *)(v25 + (((unint64_t)(v40 - (v39 << 13)) >> 18) & 0x3FF));
    v28[2] = *(_BYTE *)(v25 + (((unint64_t)(v41 + v33 - v35) >> 18) & 0x3FF));
    result = *(unsigned __int8 *)(v25 + (((unint64_t)(v33 - v35 - v41) >> 18) & 0x3FF));
    v28[3] = result;
    v24 += 24;
  }
  while (v24 != 144);
  return result;
}

uint64_t jpeg_idct_5x5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  _BYTE *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  _BYTE v43[100];
  uint64_t v44;

  v5 = 0;
  v44 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v43[4 * v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    v12 = (int)v9[16] * (uint64_t)v10[16];
    v13 = v9[32];
    v14 = 6476 * (v12 + v13 * (uint64_t)v10[32]);
    v15 = v12 - v13 * (uint64_t)v10[32];
    v16 = v11 + 2896 * v15;
    v17 = v16 + v14;
    v18 = v16 - v14;
    v19 = v11 + 0x7FFFFFFD2C0 * v15;
    v20 = (int)v9[8] * (uint64_t)v10[8];
    v21 = (int)v9[24] * (uint64_t)v10[24];
    v22 = 6810 * (v20 + v21);
    v23 = v22 + 4209 * v20;
    v24 = v22 - 17828 * v21;
    *v8 = (unint64_t)(v23 + v17) >> 11;
    v8[20] = (unint64_t)(v17 - v23) >> 11;
    v8[5] = (unint64_t)(v24 + v18) >> 11;
    v8[15] = (unint64_t)(v18 - v24) >> 11;
    v8[10] = v19 >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 5);
  v25 = 0;
  v26 = v6 - 384;
  result = a5;
  do
  {
    v28 = *a4++;
    v29 = *(_DWORD *)&v43[v25 + 4];
    v30 = (_BYTE *)(v28 + result);
    v31 = (*(_DWORD *)&v43[v25] << 13) + 134348800;
    v32 = *(_DWORD *)&v43[v25 + 8];
    v33 = *(_DWORD *)&v43[v25 + 12];
    v34 = *(_DWORD *)&v43[v25 + 16];
    v35 = 6476 * (v34 + v32);
    v36 = v32 - v34;
    v37 = v31 + 2896 * v36;
    v38 = 6810 * (v33 + v29);
    v39 = v37 + v35;
    v40 = v38 + 4209 * v29;
    v41 = v38 - 17828 * v33;
    *v30 = *(_BYTE *)(v26 + (((unint64_t)(v40 + v37 + v35) >> 18) & 0x3FF));
    v42 = v37 - v35;
    v30[4] = *(_BYTE *)(v26 + (((unint64_t)(v39 - v40) >> 18) & 0x3FF));
    v30[1] = *(_BYTE *)(v26 + (((unint64_t)(v41 + v42) >> 18) & 0x3FF));
    v30[3] = *(_BYTE *)(v26 + (((unint64_t)(v42 - v41) >> 18) & 0x3FF));
    v30[2] = *(_BYTE *)(v26 + (((unint64_t)(v31 + 268423872 * v36) >> 18) & 0x3FF));
    v25 += 20;
  }
  while (v25 != 100);
  return result;
}

uint64_t jpeg_idct_4x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t result;
  _BYTE v38[64];
  uint64_t v39;

  v5 = 0;
  v39 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v38[4 * v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = *v9 * *v10;
    v12 = v9[16] * v10[16];
    v13 = v12 + v11;
    v14 = 4 * (v12 + v11);
    v15 = v11 - v12;
    v16 = (int)v9[8] * (uint64_t)v10[8];
    v17 = (int)v9[24] * (uint64_t)v10[24];
    v18 = 4433 * (v16 + v17) + 1024;
    v19 = (unint64_t)(v18 + 6270 * v16) >> 11;
    v20 = (unint64_t)(v18 - 15137 * v17) >> 11;
    *v8 = v19 + 4 * v13;
    v8[12] = v14 - v19;
    v8[4] = v20 + 4 * v15;
    v8[8] = 4 * v15 - v20;
    ++v5;
  }
  while ((_DWORD)v5 != 4);
  v21 = 0;
  v22 = v6 - 384;
  v23 = a5;
  do
  {
    v24 = *a4++;
    v25 = (_BYTE *)(v24 + v23);
    v26 = *(_DWORD *)&v38[v21 + 4];
    v27 = *(_DWORD *)&v38[v21 + 8];
    v28 = *(_DWORD *)&v38[v21 + 12];
    v29 = *(_DWORD *)&v38[v21] + 16400;
    v30 = v29 + v27;
    v31 = (v29 + v27) << 13;
    v32 = v29 - v27;
    v33 = 4433 * (v28 + v26);
    v34 = v32 << 13;
    v35 = v33 + 6270 * v26;
    v36 = v33 - 15137 * v28;
    *v25 = *(_BYTE *)(v22 + (((unint64_t)(v35 + (v30 << 13)) >> 18) & 0x3FF));
    v25[3] = *(_BYTE *)(v22 + (((unint64_t)(v31 - v35) >> 18) & 0x3FF));
    result = *(unsigned __int8 *)(v22 + (((unint64_t)(v36 + (v32 << 13)) >> 18) & 0x3FF));
    v25[1] = result;
    v25[2] = *(_BYTE *)(v22 + (((unint64_t)(v34 - v36) >> 18) & 0x3FF));
    v21 += 16;
  }
  while (v21 != 64);
  return result;
}

uint64_t jpeg_idct_3x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t result;
  _BYTE v25[36];
  uint64_t v26;

  v5 = 0;
  v26 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v25[4 * v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    v12 = (int)v9[16] * (uint64_t)v10[16];
    v13 = v11 + 5793 * v12;
    v14 = 10033 * (int)v9[8] * (uint64_t)v10[8];
    *v8 = (unint64_t)(v14 + v13) >> 11;
    v8[6] = (unint64_t)(v13 - v14) >> 11;
    v8[3] = (unint64_t)(v11 + 0x7FFFFFFD2BELL * v12) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 3);
  v15 = 0;
  v16 = v6 - 384;
  do
  {
    v17 = *a4++;
    v18 = (_BYTE *)(v17 + a5);
    v19 = (*(_DWORD *)&v25[v15] << 13) + 134348800;
    v20 = *(_DWORD *)&v25[v15 + 8];
    v21 = v19 + 5793 * v20;
    v22 = (v19 + 268423870 * v20);
    v23 = 10033 * *(_DWORD *)&v25[v15 + 4];
    *v18 = *(_BYTE *)(v16 + (((unint64_t)(v21 + v23) >> 18) & 0x3FF));
    result = *(unsigned __int8 *)(v16 + (((unint64_t)(v21 - v23) >> 18) & 0x3FF));
    v18[2] = result;
    v18[1] = *(_BYTE *)(v16 + ((v22 >> 18) & 0x3FF));
    v15 += 12;
  }
  while (v15 != 36);
  return result;
}

uint64_t jpeg_idct_2x2(uint64_t result, uint64_t a2, unsigned __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;

  v5 = *(_QWORD *)(result + 440) - 384;
  v6 = *(_DWORD **)(a2 + 88);
  v7 = *v6 * *a3 + 4100;
  v8 = v6[8] * a3[8];
  v9 = v8 + v7;
  v10 = v7 - v8;
  v11 = v6[1] * a3[1];
  LODWORD(v6) = v6[9] * a3[9];
  v12 = (_DWORD)v6 + v11;
  LODWORD(v6) = v11 - (_DWORD)v6;
  v13 = (_BYTE *)(*a4 + a5);
  *v13 = *(_BYTE *)(v5 + (((unint64_t)(v12 + v9) >> 3) & 0x3FF));
  v13[1] = *(_BYTE *)(v5 + (((unint64_t)(v9 - v12) >> 3) & 0x3FF));
  v14 = (_BYTE *)(a4[1] + a5);
  *v14 = *(_BYTE *)(v5 + (((unint64_t)((_DWORD)v6 + v10) >> 3) & 0x3FF));
  v14[1] = *(_BYTE *)(v5 + (((unint64_t)(v10 - (_DWORD)v6) >> 3) & 0x3FF));
  return result;
}

uint64_t jpeg_idct_1x1(uint64_t result, uint64_t a2, unsigned __int16 *a3, _QWORD *a4, unsigned int a5)
{
  *(_BYTE *)(*a4 + a5) = *(_BYTE *)(*(_QWORD *)(result + 440)
                                  + (((unint64_t)(**(_DWORD **)(a2 + 88) * *a3 + 4100) >> 3) & 0x3FF)
                                  - 384);
  return result;
}

uint64_t jpeg_idct_9x9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  _BYTE *v67;
  int v68;
  int v69;
  _DWORD v72[72];
  uint64_t v73;

  v5 = 0;
  v73 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = (_DWORD *)(v7 + 4 * v5);
    v9 = (__int16 *)(a3 + 2 * v5);
    v10 = (int)v8[16] * (uint64_t)v9[16];
    v11 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    v12 = v8[32];
    v13 = (int)v8[48] * (uint64_t)v9[48];
    v14 = v11 + 5793 * v13;
    v15 = v11 - 11586 * v13;
    v16 = (int)v8[8] * (uint64_t)v9[8];
    v17 = (int)v8[40] * (uint64_t)v9[40];
    v18 = v16 + v17;
    v19 = v16 - v17;
    v20 = v8[56];
    v21 = v16 + v20 * (uint64_t)v9[56];
    v22 = v17 - v20 * (uint64_t)v9[56];
    v23 = v19 - v20 * (uint64_t)v9[56];
    v24 = v10 - v12 * (uint64_t)v9[32];
    v25 = v15 + 5793 * v24;
    v26 = v15 + 0x7FFFFFFD2BELL * v24;
    v27 = v12 * (uint64_t)v9[32];
    v28 = 10887 * (v10 + v27);
    v10 *= 8875;
    v29 = 2012 * v27;
    v30 = v28 - 2012 * v27 + v14;
    v31 = v14 - v28 + v10;
    v32 = v14 - v10 + v29;
    v33 = -10033 * (int)v8[24] * (uint64_t)v9[24];
    v22 *= 11409;
    v18 *= 7447;
    v34 = v33 - v22 + v18;
    v35 = v18 - v33;
    v36 = v22 + v33;
    v37 = &v72[v5];
    v38 = v35 + 3962 * v21;
    v39 = v36 + 3962 * v21;
    *v37 = (unint64_t)(v38 + v30) >> 11;
    v23 *= 10033;
    v37[64] = (unint64_t)(v30 - v38) >> 11;
    v37[8] = (unint64_t)(v23 + v25) >> 11;
    v37[56] = (unint64_t)(v25 - v23) >> 11;
    v37[16] = (unint64_t)(v34 + v31) >> 11;
    v37[48] = (unint64_t)(v31 - v34) >> 11;
    v37[24] = (unint64_t)(v39 + v32) >> 11;
    v37[40] = (unint64_t)(v32 - v39) >> 11;
    v37[32] = v26 >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v40 = 0;
  v41 = v6 - 384;
  result = 4294957263;
  do
  {
    v43 = &v72[v40];
    v44 = v43[1];
    v45 = v43[6];
    v46 = v43[7];
    v47 = (*v43 << 13) + 134348800;
    v48 = v47 + 5793 * v45;
    v49 = v43[2];
    v50 = v43[3];
    v51 = v43[4];
    LODWORD(v43) = v43[5];
    v52 = v47 - 11586 * v45;
    v53 = v49 - v51;
    v54 = v52 + 5793 * (v49 - v51);
    v55 = 10887 * (v51 + v49);
    v49 *= 8875;
    v56 = (v52 + 268423870 * v53);
    v57 = 2012 * v51;
    v58 = v55 - 2012 * v51 + v48;
    v59 = v48 - v55;
    v60 = v48 - v49;
    v61 = v59 + v49;
    v50 *= -10033;
    v62 = 7447 * ((_DWORD)v43 + v44);
    v63 = 3962 * (v46 + v44);
    v64 = v60 + v57;
    v65 = v62 - v50 + v63;
    v66 = (_DWORD)v43 - v46;
    LODWORD(v43) = v44 - ((_DWORD)v43 + v46);
    v67 = (_BYTE *)(*(_QWORD *)(a4 + v40) + a5);
    *v67 = *(_BYTE *)(v41 + (((unint64_t)(v65 + v58) >> 18) & 0x3FF));
    LODWORD(v43) = 10033 * (_DWORD)v43;
    v67[8] = *(_BYTE *)(v41 + (((unint64_t)(v58 - v65) >> 18) & 0x3FF));
    v67[1] = *(_BYTE *)(v41 + (((unint64_t)((_DWORD)v43 + v54) >> 18) & 0x3FF));
    v66 *= 11409;
    v68 = v50 - v66 + v62;
    v67[7] = *(_BYTE *)(v41 + (((unint64_t)(v54 - (_DWORD)v43) >> 18) & 0x3FF));
    v67[2] = *(_BYTE *)(v41 + (((unint64_t)(v68 + v61) >> 18) & 0x3FF));
    v69 = v66 + v50 + v63;
    v67[6] = *(_BYTE *)(v41 + (((unint64_t)(v61 - v68) >> 18) & 0x3FF));
    v67[3] = *(_BYTE *)(v41 + (((unint64_t)(v69 + v64) >> 18) & 0x3FF));
    v67[5] = *(_BYTE *)(v41 + (((unint64_t)(v64 - v69) >> 18) & 0x3FF));
    v67[4] = *(_BYTE *)(v41 + ((v56 >> 18) & 0x3FF));
    v40 += 8;
  }
  while (v40 != 72);
  return result;
}

uint64_t jpeg_idct_10x10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _BYTE *v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  _DWORD v74[80];
  uint64_t v75;

  v5 = 0;
  v75 = *MEMORY[0x24BDAC8D0];
  v72 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v10 = (int)v7[32] * (uint64_t)v8[32];
    v11 = v9 + 9373 * v10;
    v12 = v9 - 3580 * v10;
    v13 = v9 - 11586 * v10;
    v14 = (int)v7[16] * (uint64_t)v8[16];
    v15 = (int)v7[48] * (uint64_t)v8[48];
    v16 = 6810 * (v14 + v15);
    v17 = v16 + 4209 * v14;
    v18 = v16 - 17828 * v15;
    v19 = v17 + v11;
    v20 = v11 - v17;
    v21 = v18 + v12;
    v22 = v12 - v18;
    v23 = (int)v7[8] * (uint64_t)v8[8];
    v24 = (int)v7[24] * (uint64_t)v8[24];
    v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    v26 = v24 + (int)v7 * (uint64_t)(int)v8;
    v27 = v24 - (int)v7 * (uint64_t)(int)v8;
    v28 = 2531 * v27 + (v25 << 13);
    v29 = 7791 * v26 + 11443 * v23 + v28;
    v30 = 1812 * v23 - 7791 * v26 + v28;
    v31 = 4815 * v26;
    v32 = -6627 * v27 + (v25 << 13);
    LODWORD(v27) = v23 - v25 - v27;
    v33 = 10323 * v23 - (v31 + v32);
    v34 = 5260 * v23 - v31;
    v35 = &v74[v5];
    v36 = v34 + v32;
    *v35 = (unint64_t)(v29 + v19) >> 11;
    v35[72] = (unint64_t)(v19 - v29) >> 11;
    v35[8] = (unint64_t)(v33 + v21) >> 11;
    v35[64] = (unint64_t)(v21 - v33) >> 11;
    v35[16] = (v13 >> 11) + 4 * v27;
    v35[56] = (v13 >> 11) - 4 * v27;
    v35[24] = (unint64_t)(v36 + v22) >> 11;
    v35[48] = (unint64_t)(v22 - v36) >> 11;
    v35[32] = (unint64_t)(v30 + v20) >> 11;
    v35[40] = (unint64_t)(v20 - v30) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v37 = 0;
  v38 = v72 - 384;
  result = 2531;
  do
  {
    v40 = &v74[v37];
    v41 = *(_QWORD *)(a4 + v37);
    v42 = v40[1];
    v43 = v40[4];
    v44 = v40[5];
    v45 = (*v40 << 13) + 134348800;
    v46 = v45 + 9373 * v43;
    v47 = v45 - 3580 * v43;
    v49 = v40[2];
    v48 = v40[3];
    v50 = v45 - 11586 * v43;
    v51 = a4;
    v53 = v40[6];
    v52 = v40[7];
    LODWORD(v40) = 6810 * (v53 + v49);
    v54 = (_DWORD)v40 + 4209 * v49;
    v55 = (_DWORD)v40 - 17828 * v53;
    v56 = v54 + v46;
    LODWORD(v40) = v46 - v54;
    v57 = v55 + v47;
    v58 = v52 + v48;
    v59 = v48 - v52;
    v60 = v47 - v55;
    v61 = 2531 * v59 + (v44 << 13);
    v62 = 7791 * v58 + 11443 * v42 + v61;
    v63 = (_BYTE *)(v41 + a5);
    v64 = 1812 * v42 - 7791 * v58 + v61;
    v65 = 4815 * v58;
    v66 = (v62 + v56);
    v67 = (v56 - v62);
    v68 = -6627 * v59 + (v44 << 13);
    *v63 = *(_BYTE *)(v38 + ((v66 >> 18) & 0x3FF));
    LODWORD(v66) = 10323 * v42 - (v65 + v68);
    v63[9] = *(_BYTE *)(v38 + ((v67 >> 18) & 0x3FF));
    v69 = v42 - v44 - v59;
    v63[1] = *(_BYTE *)(v38 + (((unint64_t)(v66 + v57) >> 18) & 0x3FF));
    v63[8] = *(_BYTE *)(v38 + (((unint64_t)(v57 - v66) >> 18) & 0x3FF));
    v70 = 5260 * v42 - v65;
    v63[2] = *(_BYTE *)(v38 + (((unint64_t)(v50 + (v69 << 13)) >> 18) & 0x3FF));
    v63[7] = *(_BYTE *)(v38 + (((unint64_t)(v50 - (v69 << 13)) >> 18) & 0x3FF));
    v63[3] = *(_BYTE *)(v38 + (((unint64_t)(v70 + v68 + v60) >> 18) & 0x3FF));
    v71 = (v60 - (v70 + v68));
    a4 = v51;
    v63[6] = *(_BYTE *)(v38 + ((v71 >> 18) & 0x3FF));
    v63[4] = *(_BYTE *)(v38 + (((unint64_t)(v64 + (_DWORD)v40) >> 18) & 0x3FF));
    v63[5] = *(_BYTE *)(v38 + (((unint64_t)((_DWORD)v40 - v64) >> 18) & 0x3FF));
    v37 += 8;
  }
  while (v37 != 80);
  return result;
}

uint64_t jpeg_idct_11x11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  _BYTE *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t result;
  int v78;
  uint64_t v79;
  _DWORD v82[88];
  uint64_t v83;

  v5 = 0;
  v83 = *MEMORY[0x24BDAC8D0];
  v79 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = *v7 * *v8;
    v10 = (int)v7[16] * (uint64_t)v8[16];
    v11 = (int)v7[32] * (uint64_t)v8[32];
    v12 = (int)v7[48] * (uint64_t)v8[48];
    v13 = (int)v7[8] * (uint64_t)v8[8];
    v14 = (int)v7[24] * (uint64_t)v8[24];
    v15 = (int)v7[40] * (uint64_t)v8[40];
    v16 = (int)v7[56] * (uint64_t)v8[56];
    v17 = v10 + v12 - v11;
    v18 = v13 + v16;
    v19 = 3264 * (v13 + v14 + v15 + v16);
    v20 = 7274 * (v13 + v14);
    v21 = 5492 * (v13 + v15);
    v22 = v20 - 7562 * v13 + v21;
    v23 = v19 - 9527 * (v14 + v15);
    v24 = v21 - 9766 * v15 + v23;
    v25 = v20 + 16984 * v14 - 14731 * (v14 + v16) + v23;
    v26 = v19 + 3000 * v18;
    v27 = v22 + v26;
    v28 = -14731 * (v14 + v16) + 17223 * v16 + v26;
    v29 = &v82[v5];
    v30 = ((uint64_t)v9 << 13) | 0x400;
    v31 = -12019 * v14 + 8203 * v15;
    v32 = v30 + 11116 * v17;
    v33 = 20862 * (v11 - v12);
    v34 = v32 + 3529 * (v11 - v10);
    v35 = v32 + v33;
    v36 = v31 - 13802 * v16 + v19;
    v37 = v34 - 14924 * v11 + v33;
    v38 = v35 + 17333 * v12;
    *v29 = (unint64_t)(v27 + v38) >> 11;
    v29[80] = (unint64_t)(v38 - v27) >> 11;
    v39 = v25 + v37;
    v40 = v37 - v25;
    v41 = v32 - 9467 * (v10 + v12);
    v29[8] = v39 >> 11;
    v42 = -11395 * v10 + 15929 * v11 + v41;
    v43 = v41 - 6461 * v12;
    v29[16] = (unint64_t)(v24 + v43) >> 11;
    v29[64] = (unint64_t)(v43 - v24) >> 11;
    v29[72] = v40 >> 11;
    v44 = v34 - 12399 * v10;
    v29[24] = (unint64_t)(v28 + v44) >> 11;
    v29[56] = (unint64_t)(v44 - v28) >> 11;
    v29[32] = (unint64_t)(v36 + v42) >> 11;
    v29[48] = (unint64_t)(v42 - v36) >> 11;
    v29[40] = (unint64_t)(v30 + 0x7FFFFFFD2BFLL * v17) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v45 = 0;
  v46 = v79 - 384;
  do
  {
    v47 = &v82[v45];
    v48 = v47[1];
    v49 = (_BYTE *)(*(_QWORD *)(a4 + v45) + a5);
    v50 = (*v47 << 13) + 134348800;
    v51 = v47[4];
    v52 = v47[5];
    v54 = v47[6];
    v53 = v47[7];
    v55 = 20862 * (v51 - v54);
    v56 = v47[2];
    v57 = v47[3];
    v58 = v54 + v56 - v51;
    v59 = v50 + 11116 * v58;
    LODWORD(v47) = v59 + 3529 * (v51 - v56);
    v60 = (_DWORD)v47 - 14924 * v51;
    v61 = v59 + v55 + 17333 * v54;
    v62 = (_DWORD)v47 - 12399 * v56;
    v63 = v59 - 9467 * (v54 + v56);
    v64 = -11395 * v56 + 15929 * v51;
    v65 = (v50 + 268423871 * v58);
    v66 = v63 - 6461 * v54;
    v67 = 3264 * (v57 + v48 + v52 + v53);
    v68 = 7274 * (v57 + v48);
    v69 = v64 + v63;
    v70 = 5492 * (v52 + v48);
    v71 = v67 + 3000 * (v53 + v48);
    v72 = v60 + v55;
    v73 = v68 - 7562 * v48 + v70 + v71;
    *v49 = *(_BYTE *)(v46 + (((unint64_t)(v73 + v61) >> 18) & 0x3FF));
    v74 = v67 - 9527 * (v52 + v57);
    v75 = v70 - 9766 * v52 + v74;
    v76 = v68 + 16984 * v57 - 14731 * (v53 + v57) + v74;
    v49[10] = *(_BYTE *)(v46 + (((unint64_t)(v61 - v73) >> 18) & 0x3FF));
    v49[1] = *(_BYTE *)(v46 + (((unint64_t)(v76 + v72) >> 18) & 0x3FF));
    LOBYTE(v73) = *(_BYTE *)(v46 + (((unint64_t)(v72 - v76) >> 18) & 0x3FF));
    result = (-14731 * (v53 + v57) + 17223 * v53 + v71);
    v49[9] = v73;
    v49[2] = *(_BYTE *)(v46 + (((unint64_t)(v75 + v66) >> 18) & 0x3FF));
    v49[8] = *(_BYTE *)(v46 + (((unint64_t)(v66 - v75) >> 18) & 0x3FF));
    v49[3] = *(_BYTE *)(v46 + (((unint64_t)(result + v62) >> 18) & 0x3FF));
    v78 = -12019 * v57 + 8203 * v52 - 13802 * v53 + v67;
    v49[7] = *(_BYTE *)(v46 + (((unint64_t)(v62 - result) >> 18) & 0x3FF));
    v49[4] = *(_BYTE *)(v46 + (((unint64_t)(v78 + v69) >> 18) & 0x3FF));
    v49[6] = *(_BYTE *)(v46 + (((unint64_t)(v69 - v78) >> 18) & 0x3FF));
    v49[5] = *(_BYTE *)(v46 + ((v65 >> 18) & 0x3FF));
    v45 += 8;
  }
  while (v45 != 88);
  return result;
}

_BYTE *jpeg_idct_12x12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _BYTE *result;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v78;
  _DWORD v80[96];
  uint64_t v81;

  v5 = 0;
  v81 = *MEMORY[0x24BDAC8D0];
  v78 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v10 = 10033 * (int)v7[32] * (uint64_t)v8[32];
    v11 = v10 + v9;
    v12 = v9 - v10;
    v13 = (int)v7[16] * (uint64_t)v8[16];
    v14 = (int)v7[48] * (uint64_t)v8[48];
    v15 = v9 + ((v13 - v14) << 13);
    v16 = v9 - ((v13 - v14) << 13);
    v17 = 11190 * v13 + (v14 << 13);
    v18 = v17 + v11;
    v19 = v11 - v17;
    v20 = 2998 * v13 - (v14 << 13);
    v21 = v20 + v12;
    v22 = v12 - v20;
    v23 = (int)v7[8] * (uint64_t)v8[8];
    v24 = (int)v7[24] * (uint64_t)v8[24];
    v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    v26 = 10703 * v24;
    v27 = -4433 * v24;
    v28 = 7053 * (v23 + v25 + (int)v7 * (uint64_t)(int)v8);
    v29 = v28 + 2139 * (v23 + v25);
    v30 = v24 - v25;
    v31 = v26 + 2295 * v23 + v29;
    v32 = -8565 * (v25 + (int)v7 * (uint64_t)(int)v8);
    v33 = v27 - 12112 * v25 - 8565 * (v25 + (int)v7 * (uint64_t)(int)v8) + v29;
    v34 = (int)v7 * (uint64_t)(int)v8;
    v35 = 12998 * v34 - v26 + v32;
    v36 = v23 - v34;
    v37 = &v80[v5];
    v38 = v35 + v28;
    v39 = v27 - 5540 * v23 - 16244 * v34 + v28;
    v40 = 4433 * (v36 + v30);
    v41 = v40 + 6270 * v36;
    v42 = v40 - 15137 * v30;
    *v37 = (unint64_t)(v31 + v18) >> 11;
    v37[88] = (unint64_t)(v18 - v31) >> 11;
    v37[8] = (unint64_t)(v41 + v15) >> 11;
    v37[80] = (unint64_t)(v15 - v41) >> 11;
    v37[16] = (unint64_t)(v33 + v21) >> 11;
    v37[72] = (unint64_t)(v21 - v33) >> 11;
    v37[24] = (unint64_t)(v38 + v22) >> 11;
    v37[64] = (unint64_t)(v22 - v38) >> 11;
    v37[32] = (unint64_t)(v42 + v16) >> 11;
    v37[56] = (unint64_t)(v16 - v42) >> 11;
    v37[40] = (unint64_t)(v39 + v19) >> 11;
    v37[48] = (unint64_t)(v19 - v39) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v43 = 0;
  v44 = v78 - 384;
  do
  {
    v45 = &v80[v43];
    v46 = v45[1];
    v47 = (*v45 << 13) + 134348800;
    v48 = v45[5];
    v49 = 10033 * v45[4];
    v50 = v47 + v49;
    v52 = v45[2];
    v51 = v45[3];
    v53 = v45[6];
    v54 = v45[7];
    v55 = v47 - v49;
    v56 = v47 + ((v52 - v53) << 13);
    v57 = v47 - ((v52 - v53) << 13);
    v58 = 11190 * v52 + (v53 << 13);
    v59 = v58 + v50;
    LODWORD(v45) = v50 - v58;
    v60 = 2998 * v52 - (v53 << 13);
    v61 = 10703 * v51;
    v62 = -4433 * v51;
    v63 = v60 + v55;
    v64 = 7053 * (v48 + v46 + v54);
    v65 = v64 + 2139 * (v48 + v46);
    v66 = v55 - v60;
    v67 = 10703 * v51 + 2295 * v46 + v65;
    v68 = -8565 * (v54 + v48);
    v69 = -4433 * v51 - 12112 * v48 - 8565 * (v54 + v48) + v65;
    v70 = v51 - v48;
    result = (_BYTE *)(*(_QWORD *)(a4 + v43) + a5);
    *result = *(_BYTE *)(v44 + (((unint64_t)(v67 + v59) >> 18) & 0x3FF));
    v72 = (v59 - v67);
    v73 = 4433 * (v46 - v54 + v70);
    v74 = v73 + 6270 * (v46 - v54);
    result[11] = *(_BYTE *)(v44 + ((v72 >> 18) & 0x3FF));
    result[1] = *(_BYTE *)(v44 + (((unint64_t)(v74 + v56) >> 18) & 0x3FF));
    LODWORD(v72) = 12998 * v54 - v61 + v64 + v68;
    result[10] = *(_BYTE *)(v44 + (((unint64_t)(v56 - v74) >> 18) & 0x3FF));
    result[2] = *(_BYTE *)(v44 + (((unint64_t)(v69 + v63) >> 18) & 0x3FF));
    result[9] = *(_BYTE *)(v44 + (((unint64_t)(v63 - v69) >> 18) & 0x3FF));
    v75 = v62 - 5540 * v46 - 16244 * v54 + v64;
    result[3] = *(_BYTE *)(v44 + (((unint64_t)(v72 + v66) >> 18) & 0x3FF));
    v76 = v73 - 15137 * v70;
    result[8] = *(_BYTE *)(v44 + (((unint64_t)(v66 - v72) >> 18) & 0x3FF));
    result[4] = *(_BYTE *)(v44 + (((unint64_t)(v76 + v57) >> 18) & 0x3FF));
    result[7] = *(_BYTE *)(v44 + (((unint64_t)(v57 - v76) >> 18) & 0x3FF));
    result[5] = *(_BYTE *)(v44 + (((unint64_t)(v75 + (_DWORD)v45) >> 18) & 0x3FF));
    result[6] = *(_BYTE *)(v44 + (((unint64_t)((_DWORD)v45 - v75) >> 18) & 0x3FF));
    v43 += 8;
  }
  while (v43 != 96);
  return result;
}

uint64_t jpeg_idct_13x13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  _BYTE *v78;
  int v79;
  unint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t result;
  uint64_t v85;
  _DWORD v88[104];
  uint64_t v89;

  v5 = 0;
  v89 = *MEMORY[0x24BDAC8D0];
  v85 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = v8[16];
    v10 = v7[16];
    v11 = v10 * (uint64_t)v8[16];
    v12 = (int)v7[32] * (uint64_t)v8[32];
    v13 = v7[48];
    v14 = v12 + v13 * (uint64_t)v8[48];
    v15 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v16 = v12 - v13 * (uint64_t)v8[48];
    v17 = v15 + 793 * v16;
    v18 = (int)v7[8] * (uint64_t)v8[8];
    v19 = (int)v7[24] * (uint64_t)v8[24];
    v20 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    v21 = 10832 * (v18 + v19);
    v22 = 9534 * (v18 + v20);
    v23 = v18 + (int)v7 * (uint64_t)(int)v8;
    v24 = 9465 * v14 + 11249 * v11 + v17;
    v25 = -2773 * (v19 + v20);
    v26 = v21 - 16549 * v18 + v22 + 7682 * v23;
    v27 = -9534 * (v19 + (int)v7 * (uint64_t)(int)v8);
    v28 = v21 + 6859 * v19 + v25 - 9534 * (v19 + (int)v7 * (uint64_t)(int)v8);
    v29 = -9465 * v14 + 4108 * v11 + v17;
    v30 = (int)v7 * (uint64_t)(int)v8;
    v31 = v15 + 3989 * v16;
    v32 = v25 - 12879 * v20 + v22 - 5384 * (v20 + v30);
    v33 = 2592 * v14 - 10258 * v11 + v31;
    v34 = -2592 * v14 + 8672 * v11 + v31;
    v14 *= 3570;
    v35 = v27 + 18068 * v30 + 7682 * v23 - 5384 * (v20 + v30);
    v36 = -v14 - 1396 * v11;
    v37 = v16 - v10 * (uint64_t)v9;
    v38 = &v88[v5];
    v39 = v15 - 7678 * v16;
    v40 = v14 - 6581 * v11 + v39;
    v41 = v36 + v39;
    *v38 = (unint64_t)(v26 + v24) >> 11;
    v38[96] = (unint64_t)(v24 - v26) >> 11;
    v38[8] = (unint64_t)(v28 + v34) >> 11;
    v38[88] = (unint64_t)(v34 - v28) >> 11;
    v38[16] = (unint64_t)(v32 + v29) >> 11;
    v42 = 7682 * (v20 - v19) + 2773 * v23;
    v38[80] = (unint64_t)(v29 - v32) >> 11;
    v38[24] = (unint64_t)(v35 + v41) >> 11;
    v38[72] = (unint64_t)(v41 - v35) >> 11;
    v43 = v42 + 2611 * v18 - 3818 * v19;
    v38[32] = (unint64_t)(v43 + v40) >> 11;
    v38[64] = (unint64_t)(v40 - v43) >> 11;
    v44 = v42 + 3150 * v20 - 14273 * v30;
    v38[40] = (unint64_t)(v44 + v33) >> 11;
    v38[56] = (unint64_t)(v33 - v44) >> 11;
    v38[48] = (unint64_t)(v15 + 11585 * v37) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v45 = 0;
  v46 = v85 - 384;
  do
  {
    v47 = &v88[v45];
    v48 = v47[1];
    v50 = v47[4];
    v49 = v47[5];
    v51 = (*v47 << 13) + 134348800;
    v52 = v47[6];
    v53 = v47[7];
    v54 = v52 + v50;
    v55 = v50 - v52;
    v56 = 9465 * (v52 + v50);
    v57 = v51 + 793 * v55;
    v59 = v47[2];
    v58 = v47[3];
    v60 = 4108 * v59 - v56;
    v61 = v56 + 11249 * v59 + v57;
    v62 = v51 + 3989 * v55;
    v63 = -2592 * v54 + 8672 * v59;
    LODWORD(v47) = 2592 * v54 - 10258 * v59;
    v54 *= 3570;
    v64 = (_DWORD)v47 + v62;
    v65 = v51 - 7678 * v55;
    v66 = -v54 - 1396 * v59;
    v67 = v54 - 6581 * v59 + v65;
    v68 = v60 + v57;
    v69 = (v51 + 11585 * (v55 - v59));
    v70 = 10832 * (v58 + v48);
    v71 = v63 + v62;
    v72 = 9534 * (v49 + v48);
    v73 = v66 + v65;
    v74 = v70 - 16549 * v48 + v72 + 7682 * (v53 + v48);
    v75 = -2773 * (v49 + v58);
    v76 = v70 + 6859 * v58 + v75 - 9534 * (v53 + v58);
    v77 = v75 - 12879 * v49 + v72 - 5384 * (v53 + v49);
    v78 = (_BYTE *)(*(_QWORD *)(a4 + v45) + a5);
    *v78 = *(_BYTE *)(v46 + (((unint64_t)(v74 + v61) >> 18) & 0x3FF));
    v78[12] = *(_BYTE *)(v46 + (((unint64_t)(v61 - v74) >> 18) & 0x3FF));
    v79 = -9534 * (v53 + v58) + 18068 * v53 + 7682 * (v53 + v48) - 5384 * (v53 + v49);
    v78[1] = *(_BYTE *)(v46 + (((unint64_t)(v76 + v71) >> 18) & 0x3FF));
    v78[11] = *(_BYTE *)(v46 + (((unint64_t)(v71 - v76) >> 18) & 0x3FF));
    v78[2] = *(_BYTE *)(v46 + (((unint64_t)(v77 + v68) >> 18) & 0x3FF));
    v80 = (v68 - v77);
    v81 = 7682 * (v49 - v58) + 2773 * (v53 + v48);
    v78[10] = *(_BYTE *)(v46 + ((v80 >> 18) & 0x3FF));
    v78[3] = *(_BYTE *)(v46 + (((unint64_t)(v79 + v73) >> 18) & 0x3FF));
    v82 = v81 + 2611 * v48 - 3818 * v58;
    v78[9] = *(_BYTE *)(v46 + (((unint64_t)(v73 - v79) >> 18) & 0x3FF));
    v78[4] = *(_BYTE *)(v46 + (((unint64_t)(v82 + v67) >> 18) & 0x3FF));
    v83 = v81 + 3150 * v49 - 14273 * v53;
    v78[8] = *(_BYTE *)(v46 + (((unint64_t)(v67 - v82) >> 18) & 0x3FF));
    result = *(unsigned __int8 *)(v46 + (((unint64_t)(v83 + v64) >> 18) & 0x3FF));
    v78[5] = result;
    v78[7] = *(_BYTE *)(v46 + (((unint64_t)(v64 - v83) >> 18) & 0x3FF));
    v78[6] = *(_BYTE *)(v46 + ((v69 >> 18) & 0x3FF));
    v45 += 8;
  }
  while (v45 != 104);
  return result;
}

uint64_t jpeg_idct_14x14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  _BYTE *v80;
  int v81;
  int v82;
  uint64_t result;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  _DWORD v91[112];
  uint64_t v92;

  v5 = 0;
  v92 = *MEMORY[0x24BDAC8D0];
  v88 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = (int)v7[32] * (uint64_t)v8[32];
    v10 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v11 = v10 + 10438 * v9;
    v12 = v10 + 2578 * v9;
    v13 = v10 - 7223 * v9;
    v14 = (int)v7[16] * (uint64_t)v8[16];
    v15 = (int)v7[48] * (uint64_t)v8[48];
    v16 = 9058 * (v14 + v15);
    v17 = v16 + 2237 * v14;
    v18 = v16 - 14084 * v15;
    v19 = 5027 * v14 - 11295 * v15;
    v20 = v17 + v11;
    v21 = v11 - v17;
    v22 = v18 + v12;
    v23 = v12 - v18;
    v24 = v19 + v13;
    v25 = v13 - v19;
    v26 = (int)v7[8] * (uint64_t)v8[8];
    v27 = (int)v7[24] * (uint64_t)v8[24];
    v28 = (int)v7[40] * (uint64_t)v8[40];
    v29 = (int)v7[56] * (uint64_t)v8[56];
    v30 = 10935 * (v26 + v27);
    v31 = 9810 * (v26 + v28);
    v32 = v30 - 9232 * v26 + v31;
    v33 = -1297 * (v27 + v28) - (v29 << 13);
    v34 = v30 - 3474 * v27 + v33;
    v35 = v31 - 19447 * v28 + v33;
    v36 = 6164 * (v26 + v28);
    v37 = v26 - v27;
    v38 = 11512 * (v28 - v27);
    v39 = v38 - 13850 * v28 + v36;
    v40 = v36 - 8693 * v26;
    v41 = v38 + 5529 * v27;
    v42 = 3826 * v37 - (v29 << 13);
    v43 = v40 + v42;
    v44 = v41 + v42;
    v45 = &v91[v5];
    v46 = v32 + (v29 << 13);
    v47 = v39 + (v29 << 13);
    LODWORD(v29) = v37 - v28 + v29;
    *v45 = (unint64_t)(v46 + v20) >> 11;
    v45[104] = (unint64_t)(v20 - v46) >> 11;
    v45[8] = (unint64_t)(v34 + v22) >> 11;
    v45[96] = (unint64_t)(v22 - v34) >> 11;
    v45[16] = (unint64_t)(v35 + v24) >> 11;
    v48 = (unint64_t)(v10 - 11586 * v9) >> 11;
    v45[88] = (unint64_t)(v24 - v35) >> 11;
    v45[24] = v48 + 4 * v29;
    v45[80] = v48 - 4 * v29;
    v45[32] = (unint64_t)(v47 + v25) >> 11;
    v45[72] = (unint64_t)(v25 - v47) >> 11;
    v45[40] = (unint64_t)(v44 + v23) >> 11;
    v45[64] = (unint64_t)(v23 - v44) >> 11;
    v45[48] = (unint64_t)(v43 + v21) >> 11;
    v45[56] = (unint64_t)(v21 - v43) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v49 = 0;
  v50 = v88 - 384;
  do
  {
    v51 = &v91[v49];
    v52 = v51[1];
    v53 = (*v51 << 13) + 134348800;
    v55 = v51[4];
    v54 = v51[5];
    v56 = v53 + 10438 * v55;
    v57 = v53 + 2578 * v55;
    v58 = v53 - 7223 * v55;
    v60 = v51[2];
    v59 = v51[3];
    v61 = v51[6];
    v62 = v51[7];
    v63 = v53 - 11586 * v55;
    LODWORD(v51) = 9058 * (v61 + v60);
    v64 = (_DWORD)v51 + 2237 * v60;
    v65 = (_DWORD)v51 - 14084 * v61;
    LODWORD(v51) = 5027 * v60 - 11295 * v61;
    v66 = v64 + v56;
    v67 = v56 - v64;
    v68 = (_DWORD)v51 + v58;
    LODWORD(v51) = v58 - (_DWORD)v51;
    v69 = v65 + v57;
    v70 = 10935 * (v59 + v52);
    v71 = 9810 * (v54 + v52);
    v72 = v70 - 9232 * v52 + v71 + (v62 << 13);
    v73 = v57 - v65;
    v74 = -1297 * (v54 + v59) - (v62 << 13);
    v75 = v70 - 3474 * v59 + v74;
    v76 = v71 - 19447 * v54 + v74;
    v77 = -13850 * v54 + (v62 << 13);
    v78 = 3826 * (v52 - v59) - (v62 << 13);
    v79 = v52 - v59 - v54 + v62;
    v80 = (_BYTE *)(*(_QWORD *)(a4 + v49) + a5);
    *v80 = *(_BYTE *)(v50 + (((unint64_t)(v72 + v66) >> 18) & 0x3FF));
    v80[13] = *(_BYTE *)(v50 + (((unint64_t)(v66 - v72) >> 18) & 0x3FF));
    v80[1] = *(_BYTE *)(v50 + (((unint64_t)(v75 + v69) >> 18) & 0x3FF));
    v80[12] = *(_BYTE *)(v50 + (((unint64_t)(v69 - v75) >> 18) & 0x3FF));
    v80[2] = *(_BYTE *)(v50 + (((unint64_t)(v76 + v68) >> 18) & 0x3FF));
    v81 = 6164 * (v54 + v52);
    v82 = 11512 * (v54 - v59);
    LOBYTE(v66) = *(_BYTE *)(v50 + (((unint64_t)(v68 - v76) >> 18) & 0x3FF));
    result = 4294958603;
    v84 = v81 - 8693 * v52;
    v80[11] = v66;
    v85 = v77 + v82 + v81;
    v80[3] = *(_BYTE *)(v50 + (((unint64_t)(v63 + (v79 << 13)) >> 18) & 0x3FF));
    v80[10] = *(_BYTE *)(v50 + (((unint64_t)(v63 - (v79 << 13)) >> 18) & 0x3FF));
    v80[4] = *(_BYTE *)(v50 + (((unint64_t)(v85 + (_DWORD)v51) >> 18) & 0x3FF));
    v86 = v84 + v78;
    v87 = v82 + 5529 * v59 + v78;
    v80[9] = *(_BYTE *)(v50 + (((unint64_t)((_DWORD)v51 - v85) >> 18) & 0x3FF));
    v80[5] = *(_BYTE *)(v50 + (((unint64_t)(v87 + v73) >> 18) & 0x3FF));
    v80[8] = *(_BYTE *)(v50 + (((unint64_t)(v73 - v87) >> 18) & 0x3FF));
    v80[6] = *(_BYTE *)(v50 + (((unint64_t)(v86 + v67) >> 18) & 0x3FF));
    v80[7] = *(_BYTE *)(v50 + (((unint64_t)(v67 - v86) >> 18) & 0x3FF));
    v49 += 8;
  }
  while (v49 != 112);
  return result;
}

uint64_t jpeg_idct_15x15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  _BYTE *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  unint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  int v85;
  int v86;
  uint64_t result;
  int v88;
  int v89;
  uint64_t v90;
  _DWORD v93[120];
  uint64_t v94;

  v5 = 0;
  v94 = *MEMORY[0x24BDAC8D0];
  v90 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = (int)v7[16] * (uint64_t)v8[16];
    v10 = (int)v7[48] * (uint64_t)v8[48];
    v11 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v12 = v7[32];
    v13 = v11 - 3580 * v10;
    v14 = v11 + 9373 * v10;
    v15 = v9 - v12 * (uint64_t)v8[32];
    v16 = v9 + v12 * (uint64_t)v8[32];
    v17 = 11795 * v9;
    v18 = 374 * v15 + 10958 * v16 + v14;
    v19 = 11795 * v9 - 10958 * v16 + 374 * v15 + v13;
    v20 = -3271 * v15 - 4482 * v16 + v14;
    v21 = 4482 * v16 - v17 + -3271 * v15 + v13;
    v22 = 6476 * v16;
    v23 = 2896 * v15 + 6476 * v16 + v13;
    v24 = v14 - v22 + 2896 * v15;
    v25 = (int)v7[8] * (uint64_t)v8[8];
    v26 = (int)v7[24] * (uint64_t)v8[24];
    v27 = v8[40];
    v28 = v7[40];
    v29 = 10033 * v28 * (uint64_t)v8[40];
    v30 = (int)v7[56] * (uint64_t)v8[56];
    v31 = -11018 * v26;
    v32 = v29 + 11522 * (v25 - v30);
    v33 = 11018 * v26 + 20131 * v30 + v32;
    v34 = -6810 * v26 - 9113 * v25 + v32;
    v35 = v26 - v30;
    v36 = -6810 * v26 + 3897 * v25 - v29;
    v37 = &v93[v5];
    v38 = 4712 * (v25 + v30);
    v39 = v36 + v38;
    v40 = v29 + v31 - 7121 * v30 + v38;
    *v37 = (unint64_t)(v33 + v18) >> 11;
    v37[112] = (unint64_t)(v18 - v33) >> 11;
    v41 = 6810 * (v35 + v25);
    v42 = v41 + 4209 * v25;
    v37[8] = (unint64_t)(v42 + v23) >> 11;
    v37[104] = (unint64_t)(v23 - v42) >> 11;
    v43 = v11 - 11586 * v10;
    v44 = v43 + 5792 * v15;
    v45 = 10033 * (v25 - v30 - v28 * (uint64_t)v27);
    v37[16] = (unint64_t)(v45 + v44) >> 11;
    v37[96] = (unint64_t)(v44 - v45) >> 11;
    v37[24] = (unint64_t)(v39 + v19) >> 11;
    v37[88] = (unint64_t)(v19 - v39) >> 11;
    v46 = v41 - 17828 * v35;
    v37[32] = (unint64_t)(v46 + v24) >> 11;
    v37[80] = (unint64_t)(v24 - v46) >> 11;
    v37[40] = (unint64_t)(v40 + v20) >> 11;
    v37[72] = (unint64_t)(v20 - v40) >> 11;
    v37[48] = (unint64_t)(v34 + v21) >> 11;
    v37[64] = (unint64_t)(v21 - v34) >> 11;
    v37[56] = (unint64_t)(v43 + 0x7FFFFFFD2C0 * v15) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v47 = 0;
  v48 = v90 - 384;
  do
  {
    v49 = &v93[v47];
    v50 = (_BYTE *)(*(_QWORD *)(a4 + v47) + a5);
    v51 = v49[1];
    v52 = (*v49 << 13) + 134348800;
    v53 = v49[6];
    v54 = v49[7];
    v55 = v52 - 3580 * v53;
    v56 = v52 + 9373 * v53;
    v57 = v49[2];
    v58 = v49[3];
    v59 = v49[4];
    v60 = v49[5];
    LODWORD(v49) = v52 - 11586 * v53;
    v61 = v57 - v59;
    v62 = v59 + v57;
    v57 *= 11795;
    v63 = 374 * v61 + 10958 * v62 + v56;
    v64 = v57 - 10958 * v62 + 374 * v61;
    v65 = -3271 * v61 - 4482 * v62 + v56;
    v66 = 4482 * v62 - v57 - 3271 * v61;
    v62 *= 6476;
    v67 = 2896 * v61;
    v68 = v64 + v55;
    v69 = 2896 * v61 + v62 + v55;
    v70 = v56 - v62;
    v71 = (_DWORD)v49 + 5792 * v61;
    v72 = ((_DWORD)v49 + 268423872 * v61);
    v73 = v66 + v55;
    v74 = 10033 * v60;
    v75 = v58 - v54;
    v76 = -11018 * v58;
    v77 = 10033 * v60 + 11522 * (v51 - v54);
    v78 = v70 + v67;
    v79 = 11018 * v58 + 20131 * v54 + v77;
    v80 = (v79 + v63);
    v81 = (v63 - v79);
    v82 = 6810 * (v58 - v54 + v51);
    *v50 = *(_BYTE *)(v48 + ((v80 >> 18) & 0x3FF));
    LODWORD(v80) = v82 + 4209 * v51;
    v50[14] = *(_BYTE *)(v48 + ((v81 >> 18) & 0x3FF));
    v50[1] = *(_BYTE *)(v48 + (((unint64_t)(v80 + v69) >> 18) & 0x3FF));
    v83 = 10033 * (v51 - v54 - v60);
    v50[13] = *(_BYTE *)(v48 + (((unint64_t)(v69 - v80) >> 18) & 0x3FF));
    v58 *= -6810;
    v50[2] = *(_BYTE *)(v48 + (((unint64_t)(v83 + v71) >> 18) & 0x3FF));
    LODWORD(v81) = 4712 * (v54 + v51);
    v84 = (v71 - v83);
    v85 = v58 + 3897 * v51 - v74 + v81;
    v50[12] = *(_BYTE *)(v48 + ((v84 >> 18) & 0x3FF));
    v86 = v82 - 17828 * v75;
    v50[3] = *(_BYTE *)(v48 + (((unint64_t)(v85 + v68) >> 18) & 0x3FF));
    result = (v74 + v76);
    v50[11] = *(_BYTE *)(v48 + (((unint64_t)(v68 - v85) >> 18) & 0x3FF));
    v50[4] = *(_BYTE *)(v48 + (((unint64_t)(v86 + v78) >> 18) & 0x3FF));
    v88 = result - 7121 * v54 + v81;
    v50[10] = *(_BYTE *)(v48 + (((unint64_t)(v78 - v86) >> 18) & 0x3FF));
    v50[5] = *(_BYTE *)(v48 + (((unint64_t)(v88 + v65) >> 18) & 0x3FF));
    v89 = v58 - 9113 * v51 + v77;
    v50[9] = *(_BYTE *)(v48 + (((unint64_t)(v65 - v88) >> 18) & 0x3FF));
    v50[6] = *(_BYTE *)(v48 + (((unint64_t)(v89 + v73) >> 18) & 0x3FF));
    v50[8] = *(_BYTE *)(v48 + (((unint64_t)(v73 - v89) >> 18) & 0x3FF));
    v50[7] = *(_BYTE *)(v48 + ((v72 >> 18) & 0x3FF));
    v47 += 8;
  }
  while (v47 != 120);
  return result;
}

uint64_t jpeg_idct_16x16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t result;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  _BYTE *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v112;
  uint64_t v114;
  _DWORD v115[128];
  uint64_t v116;

  v5 = 0;
  v116 = *MEMORY[0x24BDAC8D0];
  v109 = *(_QWORD *)(a1 + 440);
  v112 = *(_QWORD *)(a2 + 88);
  do
  {
    v6 = (_DWORD *)(v112 + 4 * v5);
    v7 = (__int16 *)(a3 + 2 * v5);
    v8 = (int)v6[32] * (uint64_t)v7[32];
    v9 = 10703 * v8;
    v10 = ((uint64_t)(*v6 * *v7) << 13) | 0x400;
    v8 *= 4433;
    v11 = v9 + v10;
    v12 = v10 - v9;
    v13 = v8 + v10;
    v14 = v10 - v8;
    v15 = (int)v6[16] * (uint64_t)v7[16];
    v16 = (int)v6[48] * (uint64_t)v7[48];
    v17 = 2260 * (v15 - v16);
    v18 = 11363 * (v15 - v16);
    v19 = v18 + 20995 * v16;
    v20 = v17 + 7373 * v15;
    v21 = v18 - 4926 * v15;
    v22 = v17 - 4176 * v16;
    v23 = v19 + v11;
    v114 = v11 - v19;
    v24 = v20 + v13;
    v25 = v13 - v20;
    v26 = v21 + v14;
    v27 = v14 - v21;
    v28 = v22 + v12;
    v29 = v12 - v22;
    v30 = (int)v6[8] * (uint64_t)v7[8];
    v31 = (int)v6[24] * (uint64_t)v7[24];
    v32 = v7[40];
    v33 = v6[40];
    v34 = v7[56];
    v35 = v6[56];
    v36 = v30 + v33 * (uint64_t)v7[40];
    v37 = 11086 * (v30 + v31);
    v38 = 10217 * v36;
    v39 = 8956 * (v30 + v35 * (uint64_t)v34);
    v40 = 7350 * (v30 - v35 * (uint64_t)v34);
    v41 = 5461 * v36;
    v42 = 3363 * (v30 - v31);
    v43 = v37 - 18730 * v30 + 10217 * v36 + v39;
    v44 = v42 - 15038 * v30 + 5461 * v36 + v40;
    v45 = 1136 * (v31 + v33 * (uint64_t)v32);
    v46 = v31 + v35 * (uint64_t)v34;
    v47 = -5461 * v46;
    v48 = v37 + 589 * v31 + v45 - 5461 * v46;
    v49 = v33 * (uint64_t)v32;
    v50 = 11529 * (v49 - v31);
    v46 *= -10217;
    v51 = v42 + 16154 * v31 + v50 + v46;
    v52 = v45 - 9222 * v49 + v38 - 11086 * (v49 + v35 * (uint64_t)v34);
    v53 = v35 * (uint64_t)v34;
    v54 = v47 + 8728 * v53 + v39 - 11086 * (v49 + v53);
    v55 = 3363 * (v53 - v49);
    v56 = v46 + 25733 * v53 + v40 + v55;
    v57 = &v115[v5];
    v58 = v50 - 6278 * v49 + v41 + v55;
    *v57 = (unint64_t)(v43 + v23) >> 11;
    v57[120] = (unint64_t)(v23 - v43) >> 11;
    v57[8] = (unint64_t)(v48 + v24) >> 11;
    v57[112] = (unint64_t)(v24 - v48) >> 11;
    v57[16] = (unint64_t)(v52 + v26) >> 11;
    v57[104] = (unint64_t)(v26 - v52) >> 11;
    v57[24] = (unint64_t)(v54 + v28) >> 11;
    v57[96] = (unint64_t)(v28 - v54) >> 11;
    v57[32] = (unint64_t)(v56 + v29) >> 11;
    v57[88] = (unint64_t)(v29 - v56) >> 11;
    v57[40] = (unint64_t)(v58 + v27) >> 11;
    v57[80] = (unint64_t)(v27 - v58) >> 11;
    v57[48] = (unint64_t)(v51 + v25) >> 11;
    v57[72] = (unint64_t)(v25 - v51) >> 11;
    v57[56] = (unint64_t)(v44 + v114) >> 11;
    v57[64] = (unint64_t)(v114 - v44) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v59 = 0;
  v60 = v109 - 384;
  do
  {
    v61 = &v115[v59];
    v62 = v61[1];
    v63 = v61[4];
    v64 = v61[5];
    v65 = (*v61 << 13) + 134348800;
    v66 = 10703 * v63;
    v63 *= 4433;
    v67 = v65 + v66;
    v68 = v65 - v66;
    v70 = v61[2];
    v69 = v61[3];
    v71 = v65 + v63;
    v72 = v61[6];
    v73 = v61[7];
    v74 = 2260 * (v70 - v72);
    v75 = v65 - v63;
    LODWORD(v61) = 11363 * (v70 - v72);
    v76 = (_DWORD)v61 + 20995 * v72;
    v77 = v74 + 7373 * v70;
    v78 = (_DWORD)v61 - 4926 * v70;
    v79 = v74 - 4176 * v72;
    v80 = v76 + v67;
    LODWORD(v61) = v67 - v76;
    v81 = v77 + v71;
    v82 = v71 - v77;
    v83 = v78 + v75;
    result = (v75 - v78);
    v85 = 11086 * (v69 + v62);
    v86 = 10217 * (v64 + v62);
    v87 = 8956 * (v73 + v62);
    v88 = v79 + v68;
    v89 = 7350 * (v62 - v73);
    v90 = 5461 * (v64 + v62);
    v91 = 3363 * (v62 - v69);
    v92 = v68 - v79;
    v93 = v85 - 18730 * v62 + v86 + v87;
    v94 = v91 - 15038 * v62 + v90 + v89;
    v95 = 1136 * (v64 + v69);
    v96 = v95 - 9222 * v64;
    v97 = v85 + 589 * v69 + v95 - 5461 * (v73 + v69);
    v98 = v96 + v86 - 11086 * (v73 + v64);
    v99 = -5461 * (v73 + v69) + 8728 * v73 + v87 - 11086 * (v73 + v64);
    v100 = (_BYTE *)(*(_QWORD *)(a4 + v59) + a5);
    *v100 = *(_BYTE *)(v60 + (((unint64_t)(v93 + v80) >> 18) & 0x3FF));
    v100[15] = *(_BYTE *)(v60 + (((unint64_t)(v80 - v93) >> 18) & 0x3FF));
    v100[1] = *(_BYTE *)(v60 + (((unint64_t)(v97 + v81) >> 18) & 0x3FF));
    v101 = -10217 * (v73 + v69);
    v102 = v101 + 25733 * v73;
    v103 = 3363 * (v73 - v64);
    v104 = v102 + v89 + v103;
    v100[14] = *(_BYTE *)(v60 + (((unint64_t)(v81 - v97) >> 18) & 0x3FF));
    v100[2] = *(_BYTE *)(v60 + (((unint64_t)(v98 + v83) >> 18) & 0x3FF));
    v100[13] = *(_BYTE *)(v60 + (((unint64_t)(v83 - v98) >> 18) & 0x3FF));
    v100[3] = *(_BYTE *)(v60 + (((unint64_t)(v99 + v88) >> 18) & 0x3FF));
    v100[12] = *(_BYTE *)(v60 + (((unint64_t)(v88 - v99) >> 18) & 0x3FF));
    v100[4] = *(_BYTE *)(v60 + (((unint64_t)(v104 + v92) >> 18) & 0x3FF));
    v105 = v91 + 16154 * v69;
    v106 = 11529 * (v64 - v69);
    v107 = v106 - 6278 * v64 + v90 + v103;
    v100[11] = *(_BYTE *)(v60 + (((unint64_t)(v92 - v104) >> 18) & 0x3FF));
    v100[5] = *(_BYTE *)(v60 + (((unint64_t)(v107 + result) >> 18) & 0x3FF));
    v108 = v105 + v106 + v101;
    v100[10] = *(_BYTE *)(v60 + (((unint64_t)(result - v107) >> 18) & 0x3FF));
    v100[6] = *(_BYTE *)(v60 + (((unint64_t)(v108 + v82) >> 18) & 0x3FF));
    v100[9] = *(_BYTE *)(v60 + (((unint64_t)(v82 - v108) >> 18) & 0x3FF));
    v100[7] = *(_BYTE *)(v60 + (((unint64_t)(v94 + (_DWORD)v61) >> 18) & 0x3FF));
    v100[8] = *(_BYTE *)(v60 + (((unint64_t)((_DWORD)v61 - v94) >> 18) & 0x3FF));
    v59 += 8;
  }
  while (v59 != 128);
  return result;
}

uint64_t jpeg_idct_16x8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  unsigned int i;
  _DWORD *v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t result;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  _BYTE *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  _BYTE v94[256];
  uint64_t v95;

  v5 = 0;
  v95 = *MEMORY[0x24BDAC8D0];
  v6 = (__int16 *)(a3 + 64);
  v7 = *(_QWORD *)(a2 + 88) + 128;
  v91 = *(_QWORD *)(a1 + 440);
  for (i = 9; i > 1; --i)
  {
    v9 = (_DWORD *)(v7 + v5);
    v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10)
      goto LABEL_9;
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      v10 = 0;
LABEL_9:
      v11 = *v9 * *v6;
      v12 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      v13 = v12 + (v11 << 13);
      v14 = v12 - (v11 << 13);
      v15 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      v16 = (int)v9[16] * (uint64_t)v6[16];
      v17 = 4433 * (v15 + v16);
      v18 = v17 + 6270 * v15;
      v19 = v17 - 15137 * v16;
      v20 = v18 + v13;
      v21 = v13 - v18;
      v22 = v19 + v14;
      v23 = v14 - v19;
      v24 = (int)v9[24] * (uint64_t)v6[24];
      v25 = (int)v9[8] * (uint64_t)v6[8];
      v26 = (int)*(v9 - 8) * (uint64_t)*(v6 - 8);
      v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      v28 = 9633 * (v25 + v27 + v24 + v26);
      v29 = v28 - 16069 * (v24 + v26);
      v30 = v28 - 3196 * (v25 + v27);
      v31 = -7373 * (v24 + v27);
      v32 = v31 + 2446 * v24 + v29;
      v33 = v31 + 12299 * v27 + v30;
      v34 = -20995 * (v25 + v26);
      v35 = v34 + 16819 * v25 + v30;
      v36 = v34 + 25172 * v26 + v29;
      v37 = &v94[v5];
      *v37 = (unint64_t)(v33 + v20) >> 11;
      v37[56] = (unint64_t)(v20 - v33) >> 11;
      v37[8] = (unint64_t)(v36 + v22) >> 11;
      v37[48] = (unint64_t)(v22 - v36) >> 11;
      v37[16] = (unint64_t)(v35 + v23) >> 11;
      v37[40] = (unint64_t)(v23 - v35) >> 11;
      v37[24] = (unint64_t)(v32 + v21) >> 11;
      v38 = (unint64_t)(v21 - v32) >> 11;
      v39 = 32;
      goto LABEL_10;
    }
    LODWORD(v38) = 4 * *(v6 - 32) * *(v9 - 32);
    v40 = &v94[v5];
    *v40 = v38;
    v40[8] = v38;
    v40[16] = v38;
    v40[24] = v38;
    v40[32] = v38;
    v40[40] = v38;
    v40[48] = v38;
    v39 = 56;
LABEL_10:
    *(_DWORD *)&v94[4 * v39 + v5] = v38;
    v5 += 4;
    ++v6;
  }
  v41 = 0;
  v42 = v91 - 384;
  do
  {
    v43 = &v94[4 * v41];
    v44 = v43[1];
    v45 = v43[4];
    v46 = v43[5];
    v47 = (*v43 << 13) + 134348800;
    v48 = 10703 * v45;
    v45 *= 4433;
    v49 = v47 + v48;
    v50 = v47 - v48;
    v52 = v43[2];
    v51 = v43[3];
    v53 = v47 + v45;
    v54 = v43[6];
    v55 = v43[7];
    v56 = 2260 * (v52 - v54);
    v57 = v47 - v45;
    LODWORD(v43) = 11363 * (v52 - v54);
    v58 = (_DWORD)v43 + 20995 * v54;
    v59 = v56 + 7373 * v52;
    v60 = (_DWORD)v43 - 4926 * v52;
    v61 = v56 - 4176 * v54;
    v62 = v58 + v49;
    LODWORD(v43) = v49 - v58;
    v63 = v59 + v53;
    v64 = v53 - v59;
    v65 = v60 + v57;
    result = (v57 - v60);
    v67 = 11086 * (v51 + v44);
    v68 = 10217 * (v46 + v44);
    v69 = 8956 * (v55 + v44);
    v70 = v61 + v50;
    v71 = 7350 * (v44 - v55);
    v72 = 5461 * (v46 + v44);
    v73 = 3363 * (v44 - v51);
    v74 = v50 - v61;
    v75 = v67 - 18730 * v44 + v68 + v69;
    v76 = v73 - 15038 * v44 + v72 + v71;
    v77 = 1136 * (v46 + v51);
    v78 = v77 - 9222 * v46;
    v79 = v67 + 589 * v51 + v77 - 5461 * (v55 + v51);
    v80 = v78 + v68 - 11086 * (v55 + v46);
    v81 = -5461 * (v55 + v51) + 8728 * v55 + v69 - 11086 * (v55 + v46);
    v82 = (_BYTE *)(*(_QWORD *)(a4 + v41) + a5);
    *v82 = *(_BYTE *)(v42 + (((unint64_t)(v75 + v62) >> 18) & 0x3FF));
    v82[15] = *(_BYTE *)(v42 + (((unint64_t)(v62 - v75) >> 18) & 0x3FF));
    v82[1] = *(_BYTE *)(v42 + (((unint64_t)(v79 + v63) >> 18) & 0x3FF));
    v83 = -10217 * (v55 + v51);
    v84 = v83 + 25733 * v55;
    v85 = 3363 * (v55 - v46);
    v86 = v84 + v71 + v85;
    v82[14] = *(_BYTE *)(v42 + (((unint64_t)(v63 - v79) >> 18) & 0x3FF));
    v82[2] = *(_BYTE *)(v42 + (((unint64_t)(v80 + v65) >> 18) & 0x3FF));
    v82[13] = *(_BYTE *)(v42 + (((unint64_t)(v65 - v80) >> 18) & 0x3FF));
    v82[3] = *(_BYTE *)(v42 + (((unint64_t)(v81 + v70) >> 18) & 0x3FF));
    v82[12] = *(_BYTE *)(v42 + (((unint64_t)(v70 - v81) >> 18) & 0x3FF));
    v82[4] = *(_BYTE *)(v42 + (((unint64_t)(v86 + v74) >> 18) & 0x3FF));
    v87 = v73 + 16154 * v51;
    v88 = 11529 * (v46 - v51);
    v89 = v88 - 6278 * v46 + v72 + v85;
    v82[11] = *(_BYTE *)(v42 + (((unint64_t)(v74 - v86) >> 18) & 0x3FF));
    v82[5] = *(_BYTE *)(v42 + (((unint64_t)(v89 + result) >> 18) & 0x3FF));
    v90 = v87 + v88 + v83;
    v82[10] = *(_BYTE *)(v42 + (((unint64_t)(result - v89) >> 18) & 0x3FF));
    v82[6] = *(_BYTE *)(v42 + (((unint64_t)(v90 + v64) >> 18) & 0x3FF));
    v82[9] = *(_BYTE *)(v42 + (((unint64_t)(v64 - v90) >> 18) & 0x3FF));
    v82[7] = *(_BYTE *)(v42 + (((unint64_t)(v76 + (_DWORD)v43) >> 18) & 0x3FF));
    v82[8] = *(_BYTE *)(v42 + (((unint64_t)((_DWORD)v43 - v76) >> 18) & 0x3FF));
    v41 += 8;
  }
  while (v41 != 64);
  return result;
}

uint64_t jpeg_idct_14x7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  _BYTE *v62;
  int v63;
  int v64;
  uint64_t result;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  _DWORD v72[56];
  uint64_t v73;

  v5 = 0;
  v73 = *MEMORY[0x24BDAC8D0];
  v69 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = &v72[v5];
    v8 = (_DWORD *)(v6 + 4 * v5);
    v9 = (__int16 *)(a3 + 2 * v5);
    v10 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    v11 = (int)v8[16] * (uint64_t)v9[16];
    v12 = (int)v8[32] * (uint64_t)v9[32];
    v13 = (int)v8[48] * (uint64_t)v9[48];
    v14 = 7223 * (v12 - v13);
    v15 = 2578 * (v11 - v12);
    v16 = v10 - 15083 * v12 + v15 + v14;
    v17 = v10 + 10438 * (v11 + v13);
    v18 = v14 - 637 * v13 + v17;
    v19 = v15 - 20239 * v11 + v17;
    v20 = v10 + 11585 * (v12 - (v11 + v13));
    v21 = (int)v8[8] * (uint64_t)v9[8];
    v22 = (int)v8[24] * (uint64_t)v9[24];
    v23 = (int)v8[40] * (uint64_t)v9[40];
    v24 = 7663 * (v21 + v22);
    v25 = 1395 * (v21 - v22);
    v26 = v24 - v25;
    v27 = v24 + v25 - 11295 * (v22 + v23);
    v28 = 5027 * (v21 + v23);
    v29 = v28 + v26;
    v30 = v28 + 15326 * v23 - 11295 * (v22 + v23);
    *v7 = (unint64_t)(v29 + v18) >> 11;
    v7[48] = (unint64_t)(v18 - v29) >> 11;
    v7[8] = (unint64_t)(v27 + v16) >> 11;
    v7[40] = (unint64_t)(v16 - v27) >> 11;
    v7[16] = (unint64_t)(v30 + v19) >> 11;
    v7[32] = (unint64_t)(v19 - v30) >> 11;
    v7[24] = v20 >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v31 = 0;
  v32 = v69 - 384;
  do
  {
    v33 = &v72[v31];
    v34 = v33[1];
    v35 = (*v33 << 13) + 134348800;
    v36 = v33[4];
    v37 = v33[5];
    v38 = v35 + 10438 * v36;
    v39 = v35 + 2578 * v36;
    v40 = v35 - 7223 * v36;
    v42 = v33[2];
    v41 = v33[3];
    v43 = v33[6];
    v44 = v33[7];
    v45 = v35 - 11586 * v36;
    LODWORD(v33) = 9058 * (v43 + v42);
    v46 = (_DWORD)v33 + 2237 * v42;
    v47 = (_DWORD)v33 - 14084 * v43;
    LODWORD(v33) = 5027 * v42 - 11295 * v43;
    v48 = v46 + v38;
    v49 = v38 - v46;
    v50 = (_DWORD)v33 + v40;
    LODWORD(v33) = v40 - (_DWORD)v33;
    v51 = v47 + v39;
    v52 = 10935 * (v41 + v34);
    v53 = 9810 * (v37 + v34);
    v54 = v52 - 9232 * v34 + v53 + (v44 << 13);
    v55 = v39 - v47;
    v56 = -1297 * (v37 + v41) - (v44 << 13);
    v57 = v52 - 3474 * v41 + v56;
    v58 = v53 - 19447 * v37 + v56;
    v59 = -13850 * v37 + (v44 << 13);
    v60 = 3826 * (v34 - v41) - (v44 << 13);
    v61 = v34 - v41 - v37 + v44;
    v62 = (_BYTE *)(*(_QWORD *)(a4 + v31) + a5);
    *v62 = *(_BYTE *)(v32 + (((unint64_t)(v54 + v48) >> 18) & 0x3FF));
    v62[13] = *(_BYTE *)(v32 + (((unint64_t)(v48 - v54) >> 18) & 0x3FF));
    v62[1] = *(_BYTE *)(v32 + (((unint64_t)(v57 + v51) >> 18) & 0x3FF));
    v62[12] = *(_BYTE *)(v32 + (((unint64_t)(v51 - v57) >> 18) & 0x3FF));
    v62[2] = *(_BYTE *)(v32 + (((unint64_t)(v58 + v50) >> 18) & 0x3FF));
    v63 = 6164 * (v37 + v34);
    v64 = 11512 * (v37 - v41);
    LOBYTE(v48) = *(_BYTE *)(v32 + (((unint64_t)(v50 - v58) >> 18) & 0x3FF));
    result = 4294958603;
    v66 = v63 - 8693 * v34;
    v62[11] = v48;
    v67 = v59 + v64 + v63;
    v62[3] = *(_BYTE *)(v32 + (((unint64_t)(v45 + (v61 << 13)) >> 18) & 0x3FF));
    v62[10] = *(_BYTE *)(v32 + (((unint64_t)(v45 - (v61 << 13)) >> 18) & 0x3FF));
    v62[4] = *(_BYTE *)(v32 + (((unint64_t)(v67 + (_DWORD)v33) >> 18) & 0x3FF));
    v68 = v64 + 5529 * v41 + v60;
    v62[9] = *(_BYTE *)(v32 + (((unint64_t)((_DWORD)v33 - v67) >> 18) & 0x3FF));
    v62[5] = *(_BYTE *)(v32 + (((unint64_t)(v68 + v55) >> 18) & 0x3FF));
    v62[8] = *(_BYTE *)(v32 + (((unint64_t)(v55 - v68) >> 18) & 0x3FF));
    v62[6] = *(_BYTE *)(v32 + (((unint64_t)(v66 + v60 + v49) >> 18) & 0x3FF));
    v62[7] = *(_BYTE *)(v32 + (((unint64_t)(v49 - (v66 + v60)) >> 18) & 0x3FF));
    v31 += 8;
  }
  while (v31 != 56);
  return result;
}

uint64_t jpeg_idct_12x6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  _BYTE *v52;
  unint64_t v53;
  uint64_t result;
  int v55;
  int v56;
  int v57;
  int v58;
  _DWORD v59[48];
  uint64_t v60;

  v5 = 0;
  v60 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v59[v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    v12 = (int)v9[32] * (uint64_t)v10[32];
    v13 = v11 + 5793 * v12;
    v14 = (unint64_t)(v11 - 11586 * v12) >> 11;
    v15 = 10033 * (int)v9[16] * (uint64_t)v10[16];
    v16 = v15 + v13;
    v17 = v13 - v15;
    v18 = (int)v9[8] * (uint64_t)v10[8];
    v19 = (int)v9[24] * (uint64_t)v10[24];
    v20 = (int)v9[40] * (uint64_t)v10[40];
    v21 = 2998 * (v18 + v20);
    v22 = v21 + ((v18 + v19) << 13);
    v23 = v21 + ((v20 - v19) << 13);
    LODWORD(v18) = v18 - (v19 + v20);
    *v8 = (unint64_t)(v22 + v16) >> 11;
    v8[40] = (unint64_t)(v16 - v22) >> 11;
    v8[8] = v14 + 4 * v18;
    v8[32] = v14 - 4 * v18;
    v8[16] = (unint64_t)(v23 + v17) >> 11;
    v8[24] = (unint64_t)(v17 - v23) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v24 = 0;
  v25 = v6 - 384;
  do
  {
    v26 = &v59[v24];
    v27 = v26[1];
    v28 = (*v26 << 13) + 134348800;
    v29 = v26[5];
    v30 = 10033 * v26[4];
    v31 = v28 + v30;
    v33 = v26[2];
    v32 = v26[3];
    v34 = v26[6];
    v35 = v26[7];
    v36 = v28 - v30;
    v37 = v28 + ((v33 - v34) << 13);
    v38 = v28 - ((v33 - v34) << 13);
    v39 = 11190 * v33 + (v34 << 13);
    v40 = v39 + v31;
    LODWORD(v26) = v31 - v39;
    v41 = 2998 * v33 - (v34 << 13);
    v42 = 10703 * v32;
    v43 = -4433 * v32;
    v44 = v41 + v36;
    v45 = 7053 * (v29 + v27 + v35);
    v46 = v45 + 2139 * (v29 + v27);
    v47 = v36 - v41;
    v48 = 10703 * v32 + 2295 * v27 + v46;
    v49 = -8565 * (v35 + v29);
    v50 = -4433 * v32 - 12112 * v29 - 8565 * (v35 + v29) + v46;
    v51 = v32 - v29;
    v52 = (_BYTE *)(*(_QWORD *)(a4 + v24) + a5);
    *v52 = *(_BYTE *)(v25 + (((unint64_t)(v48 + v40) >> 18) & 0x3FF));
    v53 = (v40 - v48);
    result = (4433 * (v27 - v35 + v51));
    v55 = result + 6270 * (v27 - v35);
    v52[11] = *(_BYTE *)(v25 + ((v53 >> 18) & 0x3FF));
    v52[1] = *(_BYTE *)(v25 + (((unint64_t)(v55 + v37) >> 18) & 0x3FF));
    v56 = 12998 * v35 - v42 + v45 + v49;
    v52[10] = *(_BYTE *)(v25 + (((unint64_t)(v37 - v55) >> 18) & 0x3FF));
    v52[2] = *(_BYTE *)(v25 + (((unint64_t)(v50 + v44) >> 18) & 0x3FF));
    v52[9] = *(_BYTE *)(v25 + (((unint64_t)(v44 - v50) >> 18) & 0x3FF));
    v57 = v43 - 5540 * v27 - 16244 * v35 + v45;
    v52[3] = *(_BYTE *)(v25 + (((unint64_t)(v56 + v47) >> 18) & 0x3FF));
    v58 = result - 15137 * v51;
    v52[8] = *(_BYTE *)(v25 + (((unint64_t)(v47 - v56) >> 18) & 0x3FF));
    v52[4] = *(_BYTE *)(v25 + (((unint64_t)(v58 + v38) >> 18) & 0x3FF));
    v52[7] = *(_BYTE *)(v25 + (((unint64_t)(v38 - v58) >> 18) & 0x3FF));
    v52[5] = *(_BYTE *)(v25 + (((unint64_t)(v57 + (_DWORD)v26) >> 18) & 0x3FF));
    v52[6] = *(_BYTE *)(v25 + (((unint64_t)((_DWORD)v26 - v57) >> 18) & 0x3FF));
    v24 += 8;
  }
  while (v24 != 48);
  return result;
}

uint64_t jpeg_idct_10x5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  _BYTE *v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  _DWORD v56[40];
  uint64_t v57;

  v5 = 0;
  v57 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v56[v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    v12 = (int)v9[16] * (uint64_t)v10[16];
    v13 = v9[32];
    v14 = 6476 * (v12 + v13 * (uint64_t)v10[32]);
    v15 = v12 - v13 * (uint64_t)v10[32];
    v16 = v11 + 2896 * v15;
    v17 = v16 + v14;
    v18 = v16 - v14;
    v19 = v11 + 0x7FFFFFFD2C0 * v15;
    v20 = (int)v9[8] * (uint64_t)v10[8];
    v21 = (int)v9[24] * (uint64_t)v10[24];
    v22 = 6810 * (v20 + v21);
    v23 = v22 + 4209 * v20;
    v24 = v22 - 17828 * v21;
    *v8 = (unint64_t)(v23 + v17) >> 11;
    v8[32] = (unint64_t)(v17 - v23) >> 11;
    v8[8] = (unint64_t)(v24 + v18) >> 11;
    v8[24] = (unint64_t)(v18 - v24) >> 11;
    v8[16] = v19 >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v25 = 0;
  v26 = v6 - 384;
  result = 2531;
  do
  {
    v28 = &v56[v25];
    v29 = v28[1];
    v30 = v28[4];
    v31 = v28[5];
    v32 = (*v28 << 13) + 134348800;
    v33 = v32 + 9373 * v30;
    v34 = v32 - 3580 * v30;
    v36 = v28[2];
    v35 = v28[3];
    v37 = v32 - 11586 * v30;
    v39 = v28[6];
    v38 = v28[7];
    LODWORD(v28) = 6810 * (v39 + v36);
    v40 = (_DWORD)v28 + 4209 * v36;
    v41 = (_DWORD)v28 - 17828 * v39;
    v42 = v40 + v33;
    LODWORD(v28) = v33 - v40;
    v43 = v41 + v34;
    v44 = v38 + v35;
    v45 = v35 - v38;
    v46 = v34 - v41;
    v47 = 2531 * v45 + (v31 << 13);
    v48 = 7791 * v44 + 11443 * v29 + v47;
    v49 = (_BYTE *)(*(_QWORD *)(a4 + v25) + a5);
    v50 = 1812 * v29 - 7791 * v44 + v47;
    v51 = 4815 * v44;
    v52 = (v48 + v42);
    v53 = (v42 - v48);
    v54 = -6627 * v45 + (v31 << 13);
    *v49 = *(_BYTE *)(v26 + ((v52 >> 18) & 0x3FF));
    LODWORD(v52) = 10323 * v29 - (v51 + v54);
    v49[9] = *(_BYTE *)(v26 + ((v53 >> 18) & 0x3FF));
    v55 = v29 - v31 - v45;
    v49[1] = *(_BYTE *)(v26 + (((unint64_t)(v52 + v43) >> 18) & 0x3FF));
    v49[8] = *(_BYTE *)(v26 + (((unint64_t)(v43 - v52) >> 18) & 0x3FF));
    v49[2] = *(_BYTE *)(v26 + (((unint64_t)(v37 + (v55 << 13)) >> 18) & 0x3FF));
    LODWORD(v53) = 5260 * v29 - v51 + v54;
    v49[7] = *(_BYTE *)(v26 + (((unint64_t)(v37 - (v55 << 13)) >> 18) & 0x3FF));
    v49[3] = *(_BYTE *)(v26 + (((unint64_t)(v53 + v46) >> 18) & 0x3FF));
    v49[6] = *(_BYTE *)(v26 + (((unint64_t)(v46 - v53) >> 18) & 0x3FF));
    v49[4] = *(_BYTE *)(v26 + (((unint64_t)(v50 + (_DWORD)v28) >> 18) & 0x3FF));
    v49[5] = *(_BYTE *)(v26 + (((unint64_t)((_DWORD)v28 - v50) >> 18) & 0x3FF));
    v25 += 8;
  }
  while (v25 != 40);
  return result;
}

uint64_t jpeg_idct_8x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _DWORD *v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  _DWORD v56[32];
  uint64_t v57;

  v5 = 0;
  v57 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v56[v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = *v9 * *v10;
    v12 = v9[16] * v10[16];
    v13 = v12 + v11;
    v14 = 4 * (v12 + v11);
    v15 = v11 - v12;
    v16 = (int)v9[8] * (uint64_t)v10[8];
    v17 = (int)v9[24] * (uint64_t)v10[24];
    v18 = 4433 * (v16 + v17) + 1024;
    v19 = (unint64_t)(v18 + 6270 * v16) >> 11;
    v20 = (unint64_t)(v18 - 15137 * v17) >> 11;
    *v8 = v19 + 4 * v13;
    v8[24] = v14 - v19;
    v8[8] = v20 + 4 * v15;
    v8[16] = 4 * v15 - v20;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v21 = 0;
  v22 = v6 - 384;
  result = 4294959923;
  do
  {
    v24 = &v56[v21];
    v25 = (_BYTE *)(*(_QWORD *)(a4 + v21) + a5);
    v26 = v24[1];
    v27 = *v24 + 16400;
    v28 = v24[4];
    v29 = v24[5];
    v30 = v27 + v28;
    v31 = v27 - v28;
    v32 = v24[6];
    v33 = v24[7];
    v34 = v30 << 13;
    v35 = v24[2];
    LODWORD(v24) = v24[3];
    v36 = 4433 * (v32 + v35);
    v37 = v36 + 6270 * v35;
    v38 = v36 - 15137 * v32;
    v39 = (_DWORD)v24 + v33;
    v40 = 9633 * (v26 + v29 + (_DWORD)v24 + v33);
    v41 = v37 + (v30 << 13);
    v42 = v40 - 3196 * (v26 + v29);
    v43 = -7373 * (v26 + v33);
    v44 = v43 + 12299 * v26 + v42;
    v45 = v43 + 2446 * v33;
    v46 = -20995 * ((_DWORD)v24 + v29);
    v47 = v46 + 16819 * v29;
    LODWORD(v24) = v46 + 25172 * (_DWORD)v24;
    v48 = (v44 + v41);
    v49 = v40 - 16069 * v39;
    v50 = (v41 - v44);
    v51 = v31 << 13;
    *v25 = *(_BYTE *)(v22 + ((v48 >> 18) & 0x3FF));
    v52 = v38 + (v31 << 13);
    LODWORD(v24) = (_DWORD)v24 + v49;
    v53 = v51 - v38;
    v25[7] = *(_BYTE *)(v22 + ((v50 >> 18) & 0x3FF));
    v54 = v47 + v42;
    v25[1] = *(_BYTE *)(v22 + (((unint64_t)((_DWORD)v24 + v52) >> 18) & 0x3FF));
    v25[6] = *(_BYTE *)(v22 + (((unint64_t)(v52 - (_DWORD)v24) >> 18) & 0x3FF));
    v55 = v45 + v49;
    v25[2] = *(_BYTE *)(v22 + (((unint64_t)(v54 + v53) >> 18) & 0x3FF));
    v25[5] = *(_BYTE *)(v22 + (((unint64_t)(v53 - v54) >> 18) & 0x3FF));
    v25[3] = *(_BYTE *)(v22 + (((unint64_t)(v55 + v34 - v37) >> 18) & 0x3FF));
    v25[4] = *(_BYTE *)(v22 + (((unint64_t)(v34 - v37 - v55) >> 18) & 0x3FF));
    v21 += 8;
  }
  while (v21 != 32);
  return result;
}

uint64_t jpeg_idct_6x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t result;
  _BYTE v34[72];
  uint64_t v35;

  v5 = 0;
  v35 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v34[4 * v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    v12 = (int)v9[16] * (uint64_t)v10[16];
    v13 = v11 + 5793 * v12;
    v14 = 10033 * (int)v9[8] * (uint64_t)v10[8];
    *v8 = (unint64_t)(v14 + v13) >> 11;
    v8[12] = (unint64_t)(v13 - v14) >> 11;
    v8[6] = (unint64_t)(v11 + 0x7FFFFFFD2BELL * v12) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 6);
  v15 = 0;
  v16 = v6 - 384;
  v17 = a5;
  do
  {
    v18 = *a4++;
    v19 = (_BYTE *)(v18 + v17);
    v20 = *(_DWORD *)&v34[v15 + 4];
    v21 = *(_DWORD *)&v34[v15 + 16];
    v22 = *(_DWORD *)&v34[v15 + 20];
    v23 = (*(_DWORD *)&v34[v15] << 13) + 134348800;
    v24 = v23 + 5793 * v21;
    v25 = *(_DWORD *)&v34[v15 + 12];
    v26 = 10033 * *(_DWORD *)&v34[v15 + 8];
    v27 = 2998 * (v22 + v20);
    v28 = v27 + ((v25 + v20) << 13);
    v29 = v22 - v25;
    v30 = v20 - (v25 + v22);
    v31 = v23 - 11586 * v21;
    *v19 = *(_BYTE *)(v16 + (((unint64_t)(v28 + v24 + v26) >> 18) & 0x3FF));
    v32 = v27 + (v29 << 13);
    v19[5] = *(_BYTE *)(v16 + (((unint64_t)(v24 + v26 - v28) >> 18) & 0x3FF));
    v19[1] = *(_BYTE *)(v16 + (((unint64_t)(v31 + (v30 << 13)) >> 18) & 0x3FF));
    v19[4] = *(_BYTE *)(v16 + (((unint64_t)(v31 - (v30 << 13)) >> 18) & 0x3FF));
    v19[2] = *(_BYTE *)(v16 + (((unint64_t)(v32 + v24 - v26) >> 18) & 0x3FF));
    result = *(unsigned __int8 *)(v16 + (((unint64_t)(v24 - v26 - v32) >> 18) & 0x3FF));
    v19[3] = result;
    v15 += 24;
  }
  while (v15 != 72);
  return result;
}

uint64_t jpeg_idct_4x2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t result;
  _QWORD v28[9];

  v5 = 0;
  v28[8] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v28[v5];
    v9 = (int *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = *v9 * (uint64_t)*v10;
    LODWORD(v10) = v10[8];
    LODWORD(v9) = v9[8];
    *v8 = v11 + (int)v9 * (uint64_t)(int)v10;
    v8[4] = v11 - (int)v9 * (uint64_t)(int)v10;
    ++v5;
  }
  while ((_DWORD)v5 != 4);
  v12 = 0;
  v13 = v6 - 384;
  v14 = v28;
  v15 = 1;
  v16 = a5;
  do
  {
    v17 = (_BYTE *)(*(_QWORD *)(a4 + 8 * v12) + v16);
    v18 = *v14 + 4100;
    v19 = v14[4];
    v20 = v14[2];
    v21 = v14[6];
    v22 = 4433 * (v21 + v20);
    v23 = v22 + 6270 * v20;
    v24 = v22 - 15137 * v21;
    *v17 = *(_BYTE *)(v13 + (((unint64_t)(v23 + ((v18 + v19) << 13)) >> 16) & 0x3FF));
    v25 = ((unint64_t)(((v18 + v19) << 13) - v23) >> 16) & 0x3FF;
    v26 = v18 - v19;
    v17[3] = *(_BYTE *)(v13 + v25);
    v17[1] = *(_BYTE *)(v13 + (((unint64_t)(v24 + (v26 << 13)) >> 16) & 0x3FF));
    result = v15;
    v17[2] = *(_BYTE *)(v13 + (((unint64_t)((v26 << 13) - v24) >> 16) & 0x3FF));
    v14 += 8;
    v12 = 1;
    v15 = 0;
  }
  while ((result & 1) != 0);
  return result;
}

uint64_t jpeg_idct_2x1(uint64_t result, uint64_t a2, unsigned __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  _BYTE *v7;
  int v8;

  v5 = *(_QWORD *)(result + 440) - 384;
  v6 = *(_DWORD **)(a2 + 88);
  v7 = (_BYTE *)(*a4 + a5);
  v8 = *v6 * *a3 + 4100;
  LODWORD(v6) = v6[1] * a3[1];
  *v7 = *(_BYTE *)(v5 + (((unint64_t)((_DWORD)v6 + v8) >> 3) & 0x3FF));
  v7[1] = *(_BYTE *)(v5 + (((unint64_t)(v8 - (_DWORD)v6) >> 3) & 0x3FF));
  return result;
}

uint64_t jpeg_idct_8x16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  _DWORD *v62;
  _BYTE *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v97;
  uint64_t v99;
  _DWORD v100[128];
  uint64_t v101;

  v5 = 0;
  v101 = *MEMORY[0x24BDAC8D0];
  v94 = *(_QWORD *)(a1 + 440);
  v97 = *(_QWORD *)(a2 + 88);
  do
  {
    v6 = (_DWORD *)(v97 + 4 * v5);
    v7 = (__int16 *)(a3 + 2 * v5);
    v8 = (int)v6[32] * (uint64_t)v7[32];
    v9 = 10703 * v8;
    v10 = ((uint64_t)(*v6 * *v7) << 13) | 0x400;
    v8 *= 4433;
    v11 = v9 + v10;
    v12 = v10 - v9;
    v13 = v8 + v10;
    v14 = v10 - v8;
    v15 = (int)v6[16] * (uint64_t)v7[16];
    v16 = (int)v6[48] * (uint64_t)v7[48];
    v17 = 2260 * (v15 - v16);
    v18 = 11363 * (v15 - v16);
    v19 = v18 + 20995 * v16;
    v20 = v17 + 7373 * v15;
    v21 = v18 - 4926 * v15;
    v22 = v17 - 4176 * v16;
    v23 = v19 + v11;
    v99 = v11 - v19;
    v24 = v20 + v13;
    v25 = v13 - v20;
    v26 = v21 + v14;
    v27 = v14 - v21;
    v28 = v22 + v12;
    v29 = v12 - v22;
    v30 = (int)v6[8] * (uint64_t)v7[8];
    v31 = (int)v6[24] * (uint64_t)v7[24];
    LODWORD(v22) = v7[40];
    v32 = v6[40];
    v33 = v7[56];
    v34 = v6[56];
    v35 = v30 + v32 * (uint64_t)v7[40];
    v36 = 11086 * (v30 + v31);
    v37 = 10217 * v35;
    v38 = 8956 * (v30 + v34 * (uint64_t)v33);
    v39 = 7350 * (v30 - v34 * (uint64_t)v33);
    v40 = 5461 * v35;
    v41 = 3363 * (v30 - v31);
    v42 = v36 - 18730 * v30 + 10217 * v35 + v38;
    v43 = v41 - 15038 * v30 + 5461 * v35 + v39;
    v44 = 1136 * (v31 + v32 * (uint64_t)(int)v22);
    v45 = v31 + v34 * (uint64_t)v33;
    v46 = -5461 * v45;
    v47 = v36 + 589 * v31 + v44 - 5461 * v45;
    v48 = v32 * (uint64_t)(int)v22;
    v49 = 11529 * (v48 - v31);
    v45 *= -10217;
    v50 = v41 + 16154 * v31 + v49 + v45;
    v51 = v44 - 9222 * v48 + v37 - 11086 * (v48 + v34 * (uint64_t)v33);
    v52 = v38 - 11086 * (v48 + v34 * (uint64_t)v33);
    v53 = v34 * (uint64_t)v33;
    v54 = v46 + 8728 * v53 + v52;
    v55 = 3363 * (v53 - v48);
    v56 = v45 + 25733 * v53 + v39 + v55;
    v57 = &v100[v5];
    v58 = v49 - 6278 * v48 + v40 + v55;
    *v57 = (unint64_t)(v42 + v23) >> 11;
    v57[120] = (unint64_t)(v23 - v42) >> 11;
    v57[8] = (unint64_t)(v47 + v24) >> 11;
    v57[112] = (unint64_t)(v24 - v47) >> 11;
    v57[16] = (unint64_t)(v51 + v26) >> 11;
    v57[104] = (unint64_t)(v26 - v51) >> 11;
    v57[24] = (unint64_t)(v54 + v28) >> 11;
    v57[96] = (unint64_t)(v28 - v54) >> 11;
    v57[32] = (unint64_t)(v56 + v29) >> 11;
    v57[88] = (unint64_t)(v29 - v56) >> 11;
    v57[40] = (unint64_t)(v58 + v27) >> 11;
    v57[80] = (unint64_t)(v27 - v58) >> 11;
    v57[48] = (unint64_t)(v50 + v25) >> 11;
    v57[72] = (unint64_t)(v25 - v50) >> 11;
    v57[56] = (unint64_t)(v43 + v99) >> 11;
    v57[64] = (unint64_t)(v99 - v43) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 8);
  v59 = 0;
  v60 = v94 - 384;
  result = 4294959923;
  do
  {
    v62 = &v100[v59];
    v63 = (_BYTE *)(*(_QWORD *)(a4 + v59) + a5);
    v64 = v62[1];
    v65 = *v62 + 16400;
    v66 = v62[4];
    v67 = v62[5];
    v68 = v65 + v66;
    v69 = v65 - v66;
    v70 = v62[6];
    v71 = v62[7];
    v72 = v68 << 13;
    v73 = v62[2];
    LODWORD(v62) = v62[3];
    v74 = 4433 * (v70 + v73);
    v75 = v74 + 6270 * v73;
    v76 = v74 - 15137 * v70;
    v77 = (_DWORD)v62 + v71;
    v78 = 9633 * (v64 + v67 + (_DWORD)v62 + v71);
    v79 = v75 + (v68 << 13);
    v80 = v78 - 3196 * (v64 + v67);
    v81 = -7373 * (v64 + v71);
    v82 = v81 + 12299 * v64 + v80;
    v83 = v81 + 2446 * v71;
    v84 = -20995 * ((_DWORD)v62 + v67);
    v85 = v84 + 16819 * v67;
    LODWORD(v62) = v84 + 25172 * (_DWORD)v62;
    v86 = (v82 + v79);
    v87 = v78 - 16069 * v77;
    v88 = (v79 - v82);
    v89 = v69 << 13;
    *v63 = *(_BYTE *)(v60 + ((v86 >> 18) & 0x3FF));
    v90 = v76 + (v69 << 13);
    LODWORD(v62) = (_DWORD)v62 + v87;
    v91 = v89 - v76;
    v63[7] = *(_BYTE *)(v60 + ((v88 >> 18) & 0x3FF));
    v92 = v85 + v80;
    v63[1] = *(_BYTE *)(v60 + (((unint64_t)((_DWORD)v62 + v90) >> 18) & 0x3FF));
    v63[6] = *(_BYTE *)(v60 + (((unint64_t)(v90 - (_DWORD)v62) >> 18) & 0x3FF));
    v93 = v83 + v87;
    v63[2] = *(_BYTE *)(v60 + (((unint64_t)(v92 + v91) >> 18) & 0x3FF));
    v63[5] = *(_BYTE *)(v60 + (((unint64_t)(v91 - v92) >> 18) & 0x3FF));
    v63[3] = *(_BYTE *)(v60 + (((unint64_t)(v93 + v72 - v75) >> 18) & 0x3FF));
    v63[4] = *(_BYTE *)(v60 + (((unint64_t)(v72 - v75 - v93) >> 18) & 0x3FF));
    v59 += 8;
  }
  while (v59 != 128);
  return result;
}

uint64_t jpeg_idct_7x14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  _BYTE *v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  _BYTE v81[392];
  uint64_t v82;

  v5 = 0;
  v82 = *MEMORY[0x24BDAC8D0];
  v79 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = (int)v7[32] * (uint64_t)v8[32];
    v10 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v11 = v10 + 10438 * v9;
    v12 = v10 + 2578 * v9;
    v13 = v10 - 7223 * v9;
    v14 = (int)v7[16] * (uint64_t)v8[16];
    v15 = (int)v7[48] * (uint64_t)v8[48];
    v16 = 9058 * (v14 + v15);
    v17 = v16 + 2237 * v14;
    v18 = v16 - 14084 * v15;
    v19 = 5027 * v14 - 11295 * v15;
    v20 = v17 + v11;
    v21 = v11 - v17;
    v22 = v18 + v12;
    v23 = v12 - v18;
    v24 = v19 + v13;
    v25 = v13 - v19;
    v26 = (int)v7[8] * (uint64_t)v8[8];
    v27 = (int)v7[24] * (uint64_t)v8[24];
    v28 = (int)v7[40] * (uint64_t)v8[40];
    v29 = (int)v7[56] * (uint64_t)v8[56];
    v30 = 10935 * (v26 + v27);
    v31 = 9810 * (v26 + v28);
    v32 = v30 - 9232 * v26 + v31;
    v33 = -1297 * (v27 + v28) - (v29 << 13);
    v34 = v30 - 3474 * v27 + v33;
    v35 = v31 - 19447 * v28 + v33;
    v36 = 6164 * (v26 + v28);
    v37 = v26 - v27;
    v38 = 11512 * (v28 - v27);
    v39 = v38 - 13850 * v28 + v36;
    v40 = v36 - 8693 * v26;
    v41 = v38 + 5529 * v27;
    v42 = 3826 * v37 - (v29 << 13);
    v43 = v40 + v42;
    v44 = v41 + v42;
    v45 = &v81[4 * v5];
    v46 = v32 + (v29 << 13);
    v47 = v39 + (v29 << 13);
    LODWORD(v29) = v37 - v28 + v29;
    *v45 = (unint64_t)(v46 + v20) >> 11;
    v45[91] = (unint64_t)(v20 - v46) >> 11;
    v45[7] = (unint64_t)(v34 + v22) >> 11;
    v45[84] = (unint64_t)(v22 - v34) >> 11;
    v45[14] = (unint64_t)(v35 + v24) >> 11;
    v48 = (unint64_t)(v10 - 11586 * v9) >> 11;
    v45[77] = (unint64_t)(v24 - v35) >> 11;
    v45[21] = v48 + 4 * v29;
    v45[70] = v48 - 4 * v29;
    v45[28] = (unint64_t)(v47 + v25) >> 11;
    v45[63] = (unint64_t)(v25 - v47) >> 11;
    v45[35] = (unint64_t)(v44 + v23) >> 11;
    v45[56] = (unint64_t)(v23 - v44) >> 11;
    v45[42] = (unint64_t)(v43 + v21) >> 11;
    v45[49] = (unint64_t)(v21 - v43) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 7);
  v49 = 0;
  v50 = v79 - 384;
  result = 11585;
  do
  {
    v52 = *a4++;
    v53 = *(_DWORD *)&v81[v49 + 4];
    v54 = (*(_DWORD *)&v81[v49] << 13) + 134348800;
    v56 = *(_DWORD *)&v81[v49 + 20];
    v55 = *(_DWORD *)&v81[v49 + 24];
    v57 = *(_DWORD *)&v81[v49 + 16];
    v58 = 7223 * (v57 - v55);
    v60 = *(_DWORD *)&v81[v49 + 8];
    v59 = *(_DWORD *)&v81[v49 + 12];
    v61 = 2578 * (v60 - v57);
    v62 = v61 + v58;
    v63 = v55 + v60;
    v64 = v58 - 637 * v55;
    v65 = 7663 * (v59 + v53);
    v66 = v61 - 20239 * v60;
    v67 = 1395 * (v53 - v59);
    v68 = v65 - v67;
    v69 = v65 + v67;
    v70 = v54 + 10438 * v63;
    v71 = v64 + v70;
    v72 = 5027 * (v56 + v53);
    v73 = v68 + v72;
    v74 = v54 - 15083 * v57 + v62;
    v75 = (_BYTE *)(v52 + a5);
    *v75 = *(_BYTE *)(v50 + (((unint64_t)(v73 + v71) >> 18) & 0x3FF));
    v76 = -11295 * (v56 + v59);
    v77 = v69 + v76;
    v75[6] = *(_BYTE *)(v50 + (((unint64_t)(v71 - v73) >> 18) & 0x3FF));
    v78 = v72 + 15326 * v56 + v76;
    v75[1] = *(_BYTE *)(v50 + (((unint64_t)(v77 + v74) >> 18) & 0x3FF));
    v75[5] = *(_BYTE *)(v50 + (((unint64_t)(v74 - v77) >> 18) & 0x3FF));
    v75[2] = *(_BYTE *)(v50 + (((unint64_t)(v78 + v66 + v70) >> 18) & 0x3FF));
    v75[4] = *(_BYTE *)(v50 + (((unint64_t)(v66 + v70 - v78) >> 18) & 0x3FF));
    v75[3] = *(_BYTE *)(v50 + (((unint64_t)(v54 + 11585 * (v57 - v63)) >> 18) & 0x3FF));
    v49 += 28;
  }
  while (v49 != 392);
  return result;
}

uint64_t jpeg_idct_6x12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t result;
  uint64_t v61;
  _BYTE v63[288];
  uint64_t v64;

  v5 = 0;
  v64 = *MEMORY[0x24BDAC8D0];
  v61 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v10 = 10033 * (int)v7[32] * (uint64_t)v8[32];
    v11 = v10 + v9;
    v12 = v9 - v10;
    v13 = (int)v7[16] * (uint64_t)v8[16];
    v14 = (int)v7[48] * (uint64_t)v8[48];
    v15 = v9 + ((v13 - v14) << 13);
    v16 = v9 - ((v13 - v14) << 13);
    v17 = 11190 * v13 + (v14 << 13);
    v18 = v17 + v11;
    v19 = v11 - v17;
    v20 = 2998 * v13 - (v14 << 13);
    v21 = v20 + v12;
    v22 = v12 - v20;
    v23 = (int)v7[8] * (uint64_t)v8[8];
    v24 = (int)v7[24] * (uint64_t)v8[24];
    v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    v26 = 10703 * v24;
    v27 = -4433 * v24;
    v28 = 7053 * (v23 + v25 + (int)v7 * (uint64_t)(int)v8);
    v29 = v28 + 2139 * (v23 + v25);
    v30 = v24 - v25;
    v31 = v26 + 2295 * v23 + v29;
    v32 = -8565 * (v25 + (int)v7 * (uint64_t)(int)v8);
    v33 = v27 - 12112 * v25 - 8565 * (v25 + (int)v7 * (uint64_t)(int)v8) + v29;
    v34 = (int)v7 * (uint64_t)(int)v8;
    v35 = 12998 * v34 - v26 + v32;
    v36 = v23 - v34;
    v37 = &v63[4 * v5];
    v38 = v35 + v28;
    v39 = v27 - 5540 * v23 - 16244 * v34 + v28;
    v40 = 4433 * (v36 + v30);
    v41 = v40 + 6270 * v36;
    v42 = v40 - 15137 * v30;
    *v37 = (unint64_t)(v31 + v18) >> 11;
    v37[66] = (unint64_t)(v18 - v31) >> 11;
    v37[6] = (unint64_t)(v41 + v15) >> 11;
    v37[60] = (unint64_t)(v15 - v41) >> 11;
    v37[12] = (unint64_t)(v33 + v21) >> 11;
    v37[54] = (unint64_t)(v21 - v33) >> 11;
    v37[18] = (unint64_t)(v38 + v22) >> 11;
    v37[48] = (unint64_t)(v22 - v38) >> 11;
    v37[24] = (unint64_t)(v42 + v16) >> 11;
    v37[42] = (unint64_t)(v16 - v42) >> 11;
    v37[30] = (unint64_t)(v39 + v19) >> 11;
    v37[36] = (unint64_t)(v19 - v39) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 6);
  v43 = 0;
  v44 = v61 - 384;
  do
  {
    v45 = *a4++;
    v46 = (_BYTE *)(v45 + a5);
    v47 = *(_DWORD *)&v63[v43 + 4];
    v48 = *(_DWORD *)&v63[v43 + 16];
    v49 = *(_DWORD *)&v63[v43 + 20];
    v50 = (*(_DWORD *)&v63[v43] << 13) + 134348800;
    v51 = v50 + 5793 * v48;
    v52 = *(_DWORD *)&v63[v43 + 12];
    v53 = 10033 * *(_DWORD *)&v63[v43 + 8];
    v54 = 2998 * (v49 + v47);
    v55 = v54 + ((v52 + v47) << 13);
    v56 = v49 - v52;
    v57 = v47 - (v52 + v49);
    v58 = v50 - 11586 * v48;
    *v46 = *(_BYTE *)(v44 + (((unint64_t)(v55 + v51 + v53) >> 18) & 0x3FF));
    v59 = v54 + (v56 << 13);
    v46[5] = *(_BYTE *)(v44 + (((unint64_t)(v51 + v53 - v55) >> 18) & 0x3FF));
    v46[1] = *(_BYTE *)(v44 + (((unint64_t)(v58 + (v57 << 13)) >> 18) & 0x3FF));
    v46[4] = *(_BYTE *)(v44 + (((unint64_t)(v58 - (v57 << 13)) >> 18) & 0x3FF));
    v46[2] = *(_BYTE *)(v44 + (((unint64_t)(v59 + v51 - v53) >> 18) & 0x3FF));
    result = *(unsigned __int8 *)(v44 + (((unint64_t)(v51 - v53 - v59) >> 18) & 0x3FF));
    v46[3] = result;
    v43 += 24;
  }
  while (v43 != 288);
  return result;
}

uint64_t jpeg_idct_5x10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  _BYTE v57[200];
  uint64_t v58;

  v5 = 0;
  v58 = *MEMORY[0x24BDAC8D0];
  v55 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a2 + 88);
  do
  {
    v7 = (_DWORD *)(v6 + 4 * v5);
    v8 = (__int16 *)(a3 + 2 * v5);
    v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    v10 = (int)v7[32] * (uint64_t)v8[32];
    v11 = v9 + 9373 * v10;
    v12 = v9 - 3580 * v10;
    v13 = v9 - 11586 * v10;
    v14 = (int)v7[16] * (uint64_t)v8[16];
    v15 = (int)v7[48] * (uint64_t)v8[48];
    v16 = 6810 * (v14 + v15);
    v17 = v16 + 4209 * v14;
    v18 = v16 - 17828 * v15;
    v19 = v17 + v11;
    v20 = v11 - v17;
    v21 = v18 + v12;
    v22 = v12 - v18;
    v23 = (int)v7[8] * (uint64_t)v8[8];
    v24 = (int)v7[24] * (uint64_t)v8[24];
    v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    v26 = v24 + (int)v7 * (uint64_t)(int)v8;
    v27 = v24 - (int)v7 * (uint64_t)(int)v8;
    v28 = 2531 * v27 + (v25 << 13);
    v29 = 7791 * v26 + 11443 * v23 + v28;
    v30 = 1812 * v23 - 7791 * v26 + v28;
    v31 = 4815 * v26;
    v32 = -6627 * v27 + (v25 << 13);
    LODWORD(v27) = v23 - v25 - v27;
    v33 = 10323 * v23 - (v31 + v32);
    v34 = 5260 * v23 - v31;
    v35 = &v57[4 * v5];
    v36 = v34 + v32;
    *v35 = (unint64_t)(v29 + v19) >> 11;
    v35[45] = (unint64_t)(v19 - v29) >> 11;
    v35[5] = (unint64_t)(v33 + v21) >> 11;
    v35[40] = (unint64_t)(v21 - v33) >> 11;
    v35[10] = (v13 >> 11) + 4 * v27;
    v35[35] = (v13 >> 11) - 4 * v27;
    v35[15] = (unint64_t)(v36 + v22) >> 11;
    v35[30] = (unint64_t)(v22 - v36) >> 11;
    v35[20] = (unint64_t)(v30 + v20) >> 11;
    v35[25] = (unint64_t)(v20 - v30) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 5);
  v37 = 0;
  v38 = v55 - 384;
  result = a5;
  do
  {
    v40 = *a4++;
    v41 = *(_DWORD *)&v57[v37 + 4];
    v42 = (_BYTE *)(v40 + a5);
    v43 = (*(_DWORD *)&v57[v37] << 13) + 134348800;
    v44 = *(_DWORD *)&v57[v37 + 8];
    v45 = *(_DWORD *)&v57[v37 + 12];
    v46 = *(_DWORD *)&v57[v37 + 16];
    v47 = 6476 * (v46 + v44);
    v48 = v44 - v46;
    v49 = v43 + 2896 * v48;
    v50 = 6810 * (v45 + v41);
    v51 = v49 + v47;
    v52 = v50 + 4209 * v41;
    v53 = v50 - 17828 * v45;
    *v42 = *(_BYTE *)(v38 + (((unint64_t)(v52 + v49 + v47) >> 18) & 0x3FF));
    v54 = v49 - v47;
    v42[4] = *(_BYTE *)(v38 + (((unint64_t)(v51 - v52) >> 18) & 0x3FF));
    v42[1] = *(_BYTE *)(v38 + (((unint64_t)(v53 + v54) >> 18) & 0x3FF));
    v42[3] = *(_BYTE *)(v38 + (((unint64_t)(v54 - v53) >> 18) & 0x3FF));
    v42[2] = *(_BYTE *)(v38 + (((unint64_t)(v43 + 268423872 * v48) >> 18) & 0x3FF));
    v37 += 20;
  }
  while (v37 != 200);
  return result;
}

uint64_t jpeg_idct_4x8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  unsigned int i;
  _DWORD *v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t result;
  uint64_t v58;
  _BYTE v60[128];
  uint64_t v61;

  v5 = 0;
  v61 = *MEMORY[0x24BDAC8D0];
  v6 = (__int16 *)(a3 + 64);
  v7 = *(_QWORD *)(a2 + 88) + 128;
  v58 = *(_QWORD *)(a1 + 440);
  for (i = 5; i > 1; --i)
  {
    v9 = (_DWORD *)(v7 + v5);
    v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10)
      goto LABEL_9;
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      v10 = 0;
LABEL_9:
      v11 = *v9 * *v6;
      v12 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      v13 = v12 + (v11 << 13);
      v14 = v12 - (v11 << 13);
      v15 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      v16 = (int)v9[16] * (uint64_t)v6[16];
      v17 = 4433 * (v15 + v16);
      v18 = v17 + 6270 * v15;
      v19 = v17 - 15137 * v16;
      v20 = v18 + v13;
      v21 = v13 - v18;
      v22 = v19 + v14;
      v23 = v14 - v19;
      v24 = (int)v9[24] * (uint64_t)v6[24];
      v25 = (int)v9[8] * (uint64_t)v6[8];
      v26 = *(v9 - 8);
      v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      v28 = v24 + v26 * (uint64_t)*(v6 - 8);
      v29 = 9633 * (v25 + v27 + v28);
      v30 = v29 - 16069 * v28;
      v31 = v29 - 3196 * (v25 + v27);
      v32 = -7373 * (v24 + v27);
      v33 = v32 + 2446 * v24 + v30;
      v34 = v32 + 12299 * v27 + v31;
      v35 = -20995 * (v25 + v26 * (uint64_t)*(v6 - 8));
      v36 = v35 + 16819 * v25 + v31;
      v37 = v35 + 25172 * v26 * (uint64_t)*(v6 - 8) + v30;
      v38 = &v60[v5];
      *v38 = (unint64_t)(v34 + v20) >> 11;
      v38[28] = (unint64_t)(v20 - v34) >> 11;
      v38[4] = (unint64_t)(v37 + v22) >> 11;
      v38[24] = (unint64_t)(v22 - v37) >> 11;
      v38[8] = (unint64_t)(v36 + v23) >> 11;
      v38[20] = (unint64_t)(v23 - v36) >> 11;
      v38[12] = (unint64_t)(v33 + v21) >> 11;
      v39 = (unint64_t)(v21 - v33) >> 11;
      v40 = 16;
      goto LABEL_10;
    }
    LODWORD(v39) = 4 * *(v6 - 32) * *(v9 - 32);
    v41 = &v60[v5];
    *v41 = v39;
    v41[4] = v39;
    v41[8] = v39;
    v41[12] = v39;
    v41[16] = v39;
    v41[20] = v39;
    v41[24] = v39;
    v40 = 28;
LABEL_10:
    *(_DWORD *)&v60[4 * v40 + v5] = v39;
    v5 += 4;
    ++v6;
  }
  v42 = 0;
  v43 = v58 - 384;
  do
  {
    v44 = *a4++;
    v45 = (_BYTE *)(v44 + a5);
    v46 = *(_DWORD *)&v60[v42 + 4];
    v47 = *(_DWORD *)&v60[v42 + 8];
    v48 = *(_DWORD *)&v60[v42 + 12];
    v49 = *(_DWORD *)&v60[v42] + 16400;
    v50 = v49 + v47;
    v51 = (v49 + v47) << 13;
    v52 = v49 - v47;
    v53 = 4433 * (v48 + v46);
    v54 = v52 << 13;
    v55 = v53 + 6270 * v46;
    v56 = v53 - 15137 * v48;
    *v45 = *(_BYTE *)(v43 + (((unint64_t)(v55 + (v50 << 13)) >> 18) & 0x3FF));
    v45[3] = *(_BYTE *)(v43 + (((unint64_t)(v51 - v55) >> 18) & 0x3FF));
    result = *(unsigned __int8 *)(v43 + (((unint64_t)(v56 + (v52 << 13)) >> 18) & 0x3FF));
    v45[1] = result;
    v45[2] = *(_BYTE *)(v43 + (((unint64_t)(v54 - v56) >> 18) & 0x3FF));
    v42 += 16;
  }
  while (v42 != 128);
  return result;
}

uint64_t jpeg_idct_3x6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t result;
  _BYTE v34[72];
  uint64_t v35;

  v5 = 0;
  v35 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 440);
  v7 = *(_QWORD *)(a2 + 88);
  do
  {
    v8 = &v34[4 * v5];
    v9 = (_DWORD *)(v7 + 4 * v5);
    v10 = (__int16 *)(a3 + 2 * v5);
    v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    v12 = (int)v9[32] * (uint64_t)v10[32];
    v13 = v11 + 5793 * v12;
    v14 = (unint64_t)(v11 - 11586 * v12) >> 11;
    v15 = 10033 * (int)v9[16] * (uint64_t)v10[16];
    v16 = v15 + v13;
    v17 = v13 - v15;
    v18 = (int)v9[8] * (uint64_t)v10[8];
    v19 = (int)v9[24] * (uint64_t)v10[24];
    v20 = (int)v9[40] * (uint64_t)v10[40];
    v21 = 2998 * (v18 + v20);
    v22 = v21 + ((v18 + v19) << 13);
    v23 = v21 + ((v20 - v19) << 13);
    LODWORD(v18) = v18 - (v19 + v20);
    *v8 = (unint64_t)(v22 + v16) >> 11;
    v8[15] = (unint64_t)(v16 - v22) >> 11;
    v8[3] = v14 + 4 * v18;
    v8[12] = v14 - 4 * v18;
    v8[6] = (unint64_t)(v23 + v17) >> 11;
    v8[9] = (unint64_t)(v17 - v23) >> 11;
    ++v5;
  }
  while ((_DWORD)v5 != 3);
  v24 = 0;
  v25 = v6 - 384;
  do
  {
    v26 = *a4++;
    v27 = (_BYTE *)(v26 + a5);
    v28 = (*(_DWORD *)&v34[v24] << 13) + 134348800;
    v29 = *(_DWORD *)&v34[v24 + 8];
    v30 = v28 + 5793 * v29;
    v31 = (v28 + 268423870 * v29);
    v32 = 10033 * *(_DWORD *)&v34[v24 + 4];
    *v27 = *(_BYTE *)(v25 + (((unint64_t)(v30 + v32) >> 18) & 0x3FF));
    result = *(unsigned __int8 *)(v25 + (((unint64_t)(v30 - v32) >> 18) & 0x3FF));
    v27[2] = result;
    v27[1] = *(_BYTE *)(v25 + ((v31 >> 18) & 0x3FF));
    v24 += 12;
  }
  while (v24 != 72);
  return result;
}

uint64_t jpeg_idct_2x4(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  int v25;
  _BYTE v26[64];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 440);
  v6 = v26;
  v7 = *(int **)(a2 + 88);
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = *v7 * (uint64_t)*a3;
    v11 = v7[16];
    v12 = (v10 + v11 * (uint64_t)a3[16]) << 13;
    v13 = v10 - v11 * (uint64_t)a3[16];
    v14 = v7[8] * (uint64_t)a3[8];
    v15 = v7[24] * (uint64_t)a3[24];
    v16 = 4433 * (v14 + v15);
    v17 = v16 + 6270 * v14;
    v18 = v16 - 15137 * v15;
    result = v17 + v12;
    *v6 = v17 + v12;
    v6[6] = v12 - v17;
    v6[2] = v18 + (v13 << 13);
    v6[4] = (v13 << 13) - v18;
    ++a3;
    ++v7;
    ++v6;
    v8 = 0;
  }
  while ((v9 & 1) != 0);
  v20 = 0;
  v21 = v5 - 384;
  do
  {
    v22 = *a4++;
    v23 = (_BYTE *)(v22 + a5);
    v24 = *(_DWORD *)&v26[v20] + 33587200;
    v25 = *(_DWORD *)&v26[v20 + 8];
    *v23 = *(_BYTE *)(v21 + (((unint64_t)(v24 + v25) >> 16) & 0x3FF));
    v23[1] = *(_BYTE *)(v21 + (((unint64_t)(v24 - v25) >> 16) & 0x3FF));
    v20 += 16;
  }
  while (v20 != 64);
  return result;
}

uint64_t jpeg_idct_1x2(uint64_t result, uint64_t a2, unsigned __int16 *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  _DWORD *v6;
  int v7;

  v5 = *(_QWORD *)(result + 440) - 384;
  v6 = *(_DWORD **)(a2 + 88);
  v7 = *v6 * *a3 + 4100;
  LODWORD(v6) = v6[8] * a3[8];
  *(_BYTE *)(*a4 + a5) = *(_BYTE *)(v5 + (((unint64_t)((_DWORD)v6 + v7) >> 3) & 0x3FF));
  *(_BYTE *)(a4[1] + a5) = *(_BYTE *)(v5 + (((unint64_t)(v7 - (_DWORD)v6) >> 3) & 0x3FF));
  return result;
}

const char *jinit_memory_mgr(turi::neural_net::float_scalar *a1)
{
  uint64_t v2;
  char *small;
  const char *result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  *((_QWORD *)a1 + 1) = 0;
  v2 = turi::neural_net::float_scalar::shape(a1);
  v7 = v2;
  small = (char *)jpeg_get_small((int)a1, 0xA8uLL);
  if (!small)
  {
    turi::neural_net::float_scalar::~float_scalar(a1);
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 56;
    (**(void (***)(turi::neural_net::float_scalar *))a1)(a1);
  }
  *(_QWORD *)small = alloc_small;
  *((_QWORD *)small + 1) = alloc_large;
  *((_QWORD *)small + 2) = alloc_sarray;
  *((_QWORD *)small + 3) = alloc_barray;
  *((_QWORD *)small + 4) = request_virt_sarray;
  *((_QWORD *)small + 5) = request_virt_barray;
  *((_QWORD *)small + 6) = realize_virt_arrays;
  *((_QWORD *)small + 7) = access_virt_sarray;
  *((_QWORD *)small + 8) = access_virt_barray;
  *((_QWORD *)small + 9) = free_pool;
  *((_QWORD *)small + 11) = v2;
  *((_QWORD *)small + 12) = 1000000000;
  *((_QWORD *)small + 10) = self_destruct;
  *(_OWORD *)(small + 104) = 0u;
  *(_OWORD *)(small + 120) = 0u;
  *(_OWORD *)(small + 136) = 0u;
  *((_QWORD *)small + 19) = 168;
  *((_QWORD *)a1 + 1) = small;
  result = getenv("JPEGMEM");
  if (result)
  {
    v6 = 120;
    result = (const char *)sscanf(result, "%ld%c", &v7, &v6);
    if ((int)result >= 1)
    {
      if ((v6 & 0xDF) == 0x4D)
        v5 = 1000 * v7;
      else
        v5 = v7;
      *((_QWORD *)small + 11) = 1000 * v5;
    }
  }
  return result;
}

uint64_t alloc_small(_QWORD *a1, signed int a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *i;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;

  v6 = a1[1];
  if (a3 > 0x3B9AC9E8)
  {
    *(_QWORD *)(*a1 + 40) = 0x100000038;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  v7 = a3 + 7;
  if (a2 >= 2)
  {
    v8 = *a1;
    *(_DWORD *)(v8 + 40) = 15;
    *(_DWORD *)(v8 + 44) = a2;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  v10 = v6 + 8 * a2;
  v13 = *(_QWORD **)(v10 + 104);
  v12 = (_QWORD *)(v10 + 104);
  v11 = v13;
  if (v13)
  {
    while (1)
    {
      v14 = v11;
      if (v11[2] >= v9)
        break;
      v11 = (_QWORD *)*v11;
      if (!*v14)
        goto LABEL_10;
    }
  }
  else
  {
    v14 = 0;
LABEL_10:
    v15 = v9 + 24;
    v16 = &extra_pool_slop;
    if (!v14)
      v16 = &first_pool_slop;
    if (v16[a2] >= 999999976 - v9)
      v17 = 999999976 - v9;
    else
      v17 = v16[a2];
    v18 = v15 + v17;
    for (i = jpeg_get_small((int)a1, v15 + v17); !i; i = jpeg_get_small((int)a1, v15 + v17))
    {
      if (v17 <= 0x63)
      {
        *(_QWORD *)(*a1 + 40) = 0x200000038;
        (*(void (**)(_QWORD *))*a1)(a1);
      }
      v17 >>= 1;
      v18 = v15 + v17;
    }
    *(_QWORD *)(v6 + 152) += v18;
    *i = 0;
    i[1] = 0;
    i[2] = v17 + v9;
    if (v14)
      v20 = v14;
    else
      v20 = v12;
    *v20 = i;
    v14 = i;
  }
  v21 = v14[1];
  result = (uint64_t)v14 + v21 + 24;
  v23 = v14[2] - v9;
  v14[1] = v21 + v9;
  v14[2] = v23;
  return result;
}

_QWORD *alloc_large(_QWORD *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *large;
  uint64_t v10;

  v6 = a1[1];
  if (a3 >= 0x3B9AC9E9)
  {
    *(_QWORD *)(*a1 + 40) = 0x300000038;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  v7 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (a2 >= 2)
  {
    v8 = *a1;
    *(_DWORD *)(v8 + 40) = 15;
    *(_DWORD *)(v8 + 44) = a2;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  large = jpeg_get_large((int)a1, v7 + 24);
  if (!large)
  {
    *(_QWORD *)(*a1 + 40) = 0x400000038;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  *(_QWORD *)(v6 + 152) += v7 + 24;
  v10 = v6 + 8 * (int)a2;
  *large = *(_QWORD *)(v10 + 120);
  large[1] = v7;
  large[2] = 0;
  *(_QWORD *)(v10 + 120) = large;
  return large + 3;
}

uint64_t alloc_sarray(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;

  v8 = a1[1];
  v9 = 0x3B9AC9E8 / a3;
  if (a3 > 0x3B9AC9E8)
  {
    v10 = *a1;
    *(_DWORD *)(v10 + 40) = 72;
    (*(void (**)(uint64_t *))v10)(a1);
  }
  if (v9 >= a4)
    v9 = a4;
  *(_DWORD *)(v8 + 160) = v9;
  v11 = alloc_small(a1, a2, 8 * a4);
  if (a4)
  {
    v12 = 0;
    do
    {
      if (v9 >= a4 - v12)
        v9 = a4 - v12;
      v13 = alloc_large(a1, a2, a3 * (unint64_t)v9);
      if (v9)
      {
        v14 = v9;
        do
        {
          v15 = (v12 + 1);
          *(_QWORD *)(v11 + 8 * v12) = v13;
          v13 = (_QWORD *)((char *)v13 + a3);
          LODWORD(v12) = v12 + 1;
          --v14;
        }
        while (v14);
      }
      else
      {
        v15 = v12;
      }
      v12 = v15;
    }
    while (v15 < a4);
  }
  return v11;
}

uint64_t alloc_barray(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;

  v8 = a1[1];
  v9 = (unint64_t)a3 << 7;
  v10 = 0x3B9AC9E8 / v9;
  if (a3 >= 0x773594)
  {
    v11 = *a1;
    *(_DWORD *)(v11 + 40) = 72;
    (*(void (**)(uint64_t *))v11)(a1);
  }
  if (v10 >= a4)
    LODWORD(v10) = a4;
  *(_DWORD *)(v8 + 160) = v10;
  v12 = alloc_small(a1, a2, 8 * a4);
  if (a4)
  {
    v13 = 0;
    v14 = (unint64_t)a3 << 7;
    do
    {
      if (v10 >= a4 - v13)
        v10 = a4 - v13;
      else
        v10 = v10;
      v15 = alloc_large(a1, a2, v9 * v10);
      if ((_DWORD)v10)
      {
        v16 = v10;
        do
        {
          v17 = (v13 + 1);
          *(_QWORD *)(v12 + 8 * v13) = v15;
          v15 = (_QWORD *)((char *)v15 + v14);
          LODWORD(v13) = v13 + 1;
          --v16;
        }
        while (v16);
      }
      else
      {
        v17 = v13;
      }
      v13 = v17;
    }
    while (v17 < a4);
  }
  return v12;
}

uint64_t request_virt_sarray(_QWORD *a1, signed int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  void (**v13)(_QWORD);
  uint64_t result;

  v12 = a1[1];
  if (a2 != 1)
  {
    v13 = (void (**)(_QWORD))*a1;
    *((_DWORD *)v13 + 10) = 15;
    *((_DWORD *)v13 + 11) = a2;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  result = alloc_small(a1, a2, 0x98uLL);
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a5;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a6;
  *(_DWORD *)(result + 36) = a3;
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(v12 + 136);
  *(_QWORD *)(v12 + 136) = result;
  return result;
}

uint64_t request_virt_barray(_QWORD *a1, signed int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  void (**v13)(_QWORD);
  uint64_t result;

  v12 = a1[1];
  if (a2 != 1)
  {
    v13 = (void (**)(_QWORD))*a1;
    *((_DWORD *)v13 + 10) = 15;
    *((_DWORD *)v13 + 11) = a2;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  result = alloc_small(a1, a2, 0x98uLL);
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = a5;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a6;
  *(_DWORD *)(result + 36) = a3;
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(v12 + 144);
  *(_QWORD *)(v12 + 144) = result;
  return result;
}

uint64_t realize_virt_arrays(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t i;
  unint64_t v8;
  uint64_t v9;
  uint64_t j;
  uint64_t v11;
  uint64_t v12;
  uint64_t k;
  uint64_t v14;
  uint64_t v15;

  v1 = (uint64_t *)result;
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 136);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      if (!*(_QWORD *)v3)
      {
        v6 = *(_DWORD *)(v3 + 12);
        v5 += *(unsigned int *)(v3 + 16) * (unint64_t)v6;
        v4 += *(unsigned int *)(v3 + 8) * (unint64_t)v6;
      }
      v3 = *(_QWORD *)(v3 + 48);
    }
    while (v3);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  for (i = *(_QWORD *)(v2 + 144); i; i = *(_QWORD *)(i + 48))
  {
    if (!*(_QWORD *)i)
    {
      v8 = (unint64_t)*(unsigned int *)(i + 12) << 7;
      v5 += v8 * *(unsigned int *)(i + 16);
      v4 += v8 * *(unsigned int *)(i + 8);
    }
  }
  if (v5 >= 1)
  {
    result = jpeg_mem_available(result, v5, v4, *(_QWORD *)(v2 + 152));
    if (result >= v4)
    {
      v9 = 1000000000;
    }
    else if (result / v5 <= 1)
    {
      v9 = 1;
    }
    else
    {
      v9 = result / v5;
    }
    for (j = *(_QWORD *)(v2 + 136); j; j = *(_QWORD *)(j + 48))
    {
      if (!*(_QWORD *)j)
      {
        v11 = *(unsigned int *)(j + 8);
        v12 = *(unsigned int *)(j + 16);
        if ((v11 - 1) / v12 >= v9)
        {
          *(_DWORD *)(j + 20) = v12 * v9;
          jpeg_open_backing_store(v1);
          *(_DWORD *)(j + 44) = 1;
          LODWORD(v11) = *(_DWORD *)(j + 20);
        }
        else
        {
          *(_DWORD *)(j + 20) = v11;
        }
        result = alloc_sarray(v1, 1u, *(_DWORD *)(j + 12), v11);
        *(_QWORD *)j = result;
        *(_QWORD *)(j + 24) = *(unsigned int *)(v2 + 160);
        *(_DWORD *)(j + 32) = 0;
        *(_DWORD *)(j + 40) = 0;
      }
    }
    for (k = *(_QWORD *)(v2 + 144); k; k = *(_QWORD *)(k + 48))
    {
      if (!*(_QWORD *)k)
      {
        v14 = *(unsigned int *)(k + 8);
        v15 = *(unsigned int *)(k + 16);
        if ((v14 - 1) / v15 >= v9)
        {
          *(_DWORD *)(k + 20) = v15 * v9;
          jpeg_open_backing_store(v1);
          *(_DWORD *)(k + 44) = 1;
          LODWORD(v14) = *(_DWORD *)(k + 20);
        }
        else
        {
          *(_DWORD *)(k + 20) = v14;
        }
        result = alloc_barray(v1, 1u, *(_DWORD *)(k + 12), v14);
        *(_QWORD *)k = result;
        *(_QWORD *)(k + 24) = *(unsigned int *)(v2 + 160);
        *(_DWORD *)(k + 32) = 0;
        *(_DWORD *)(k + 40) = 0;
      }
    }
  }
  return result;
}

uint64_t access_virt_sarray(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  size_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v22;

  v10 = a4 + a3;
  if (v10 > *(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 16) < a4 || !*(_QWORD *)a2)
  {
    v11 = *a1;
    *(_DWORD *)(v11 + 40) = 23;
    (*(void (**)(uint64_t *))v11)(a1);
  }
  v12 = *(_DWORD *)(a2 + 28);
  if (v12 > a3 || v10 > *(_DWORD *)(a2 + 20) + v12)
  {
    if (!*(_DWORD *)(a2 + 44))
    {
      v13 = *a1;
      *(_DWORD *)(v13 + 40) = 71;
      (*(void (**)(uint64_t *))v13)(a1);
    }
    if (*(_DWORD *)(a2 + 40))
    {
      do_sarray_io((uint64_t)a1, a2, 1);
      *(_DWORD *)(a2 + 40) = 0;
    }
    v14 = a3;
    if (*(_DWORD *)(a2 + 28) >= a3)
      v14 = (v10 - *(_DWORD *)(a2 + 20)) & ~((v10 - *(unsigned int *)(a2 + 20)) >> 63);
    *(_DWORD *)(a2 + 28) = v14;
    do_sarray_io((uint64_t)a1, a2, 0);
  }
  v15 = *(_DWORD *)(a2 + 32);
  if (v15 < v10)
  {
    if (v15 >= a3)
    {
      if (a5)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v10;
        if (!*(_DWORD *)(a2 + 36))
          goto LABEL_26;
        goto LABEL_22;
      }
      if (*(_DWORD *)(a2 + 36))
      {
LABEL_22:
        v17 = *(_DWORD *)(a2 + 28);
        if (v15 - v17 < (int)v10 - v17)
        {
          v18 = *(unsigned int *)(a2 + 12);
          v19 = 8 * (v15 - v17);
          v20 = a4 + a3 - v15;
          do
          {
            bzero(*(void **)(*(_QWORD *)a2 + v19), v18);
            v19 += 8;
            --v20;
          }
          while (v20);
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (a5)
      {
        v16 = *a1;
        *(_DWORD *)(v16 + 40) = 23;
        (*(void (**)(uint64_t *))v16)(a1);
        v15 = a3;
        goto LABEL_19;
      }
      v15 = a3;
      if (*(_DWORD *)(a2 + 36))
        goto LABEL_22;
    }
    v22 = *a1;
    *(_DWORD *)(v22 + 40) = 23;
    (*(void (**)(uint64_t *))v22)(a1);
    return *(_QWORD *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
  }
LABEL_25:
  if (a5)
LABEL_26:
    *(_DWORD *)(a2 + 40) = 1;
  return *(_QWORD *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
}

uint64_t access_virt_barray(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  size_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v22;

  v10 = a4 + a3;
  if (v10 > *(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 16) < a4 || !*(_QWORD *)a2)
  {
    v11 = *a1;
    *(_DWORD *)(v11 + 40) = 23;
    (*(void (**)(uint64_t *))v11)(a1);
  }
  v12 = *(_DWORD *)(a2 + 28);
  if (v12 > a3 || v10 > *(_DWORD *)(a2 + 20) + v12)
  {
    if (!*(_DWORD *)(a2 + 44))
    {
      v13 = *a1;
      *(_DWORD *)(v13 + 40) = 71;
      (*(void (**)(uint64_t *))v13)(a1);
    }
    if (*(_DWORD *)(a2 + 40))
    {
      do_barray_io((uint64_t)a1, a2, 1);
      *(_DWORD *)(a2 + 40) = 0;
    }
    v14 = a3;
    if (*(_DWORD *)(a2 + 28) >= a3)
      v14 = (v10 - *(_DWORD *)(a2 + 20)) & ~((v10 - *(unsigned int *)(a2 + 20)) >> 63);
    *(_DWORD *)(a2 + 28) = v14;
    do_barray_io((uint64_t)a1, a2, 0);
  }
  v15 = *(_DWORD *)(a2 + 32);
  if (v15 < v10)
  {
    if (v15 >= a3)
    {
      if (a5)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v10;
        if (!*(_DWORD *)(a2 + 36))
          goto LABEL_26;
        goto LABEL_22;
      }
      if (*(_DWORD *)(a2 + 36))
      {
LABEL_22:
        v17 = *(_DWORD *)(a2 + 28);
        if (v15 - v17 < (int)v10 - v17)
        {
          v18 = (unint64_t)*(unsigned int *)(a2 + 12) << 7;
          v19 = 8 * (v15 - v17);
          v20 = a4 + a3 - v15;
          do
          {
            bzero(*(void **)(*(_QWORD *)a2 + v19), v18);
            v19 += 8;
            --v20;
          }
          while (v20);
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (a5)
      {
        v16 = *a1;
        *(_DWORD *)(v16 + 40) = 23;
        (*(void (**)(uint64_t *))v16)(a1);
        v15 = a3;
        goto LABEL_19;
      }
      v15 = a3;
      if (*(_DWORD *)(a2 + 36))
        goto LABEL_22;
    }
    v22 = *a1;
    *(_DWORD *)(v22 + 40) = 23;
    (*(void (**)(uint64_t *))v22)(a1);
    return *(_QWORD *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
  }
LABEL_25:
  if (a5)
LABEL_26:
    *(_DWORD *)(a2 + 40) = 1;
  return *(_QWORD *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
}

void free_pool(_QWORD *a1, signed int a2)
{
  _QWORD *v4;
  void (**v5)(_QWORD);
  uint64_t i;
  uint64_t j;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = (_QWORD *)a1[1];
  if (a2 < 2)
  {
    if (a2 == 1)
    {
      for (i = v4[17]; i; i = *(_QWORD *)(i + 48))
      {
        if (*(_DWORD *)(i + 44))
        {
          *(_DWORD *)(i + 44) = 0;
          (*(void (**)(_QWORD *, uint64_t))(i + 72))(a1, i + 56);
        }
      }
      v4[17] = 0;
      for (j = v4[18]; j; j = *(_QWORD *)(j + 48))
      {
        if (*(_DWORD *)(j + 44))
        {
          *(_DWORD *)(j + 44) = 0;
          (*(void (**)(_QWORD *, uint64_t))(j + 72))(a1, j + 56);
        }
      }
      v4[18] = 0;
    }
  }
  else
  {
    v5 = (void (**)(_QWORD))*a1;
    *((_DWORD *)v5 + 10) = 15;
    *((_DWORD *)v5 + 11) = a2;
    (*(void (**)(_QWORD *))*a1)(a1);
  }
  v8 = a2;
  v9 = &v4[a2];
  v10 = (_QWORD *)v9[15];
  v9[15] = 0;
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      v12 = v10[1] + v10[2] + 24;
      jpeg_free_small((int)a1, v10);
      v4[19] -= v12;
      v10 = v11;
    }
    while (v11);
  }
  v13 = &v4[v8];
  v14 = (_QWORD *)v13[13];
  v13[13] = 0;
  if (v14)
  {
    do
    {
      v15 = (_QWORD *)*v14;
      v16 = v14[1] + v14[2] + 24;
      jpeg_free_small((int)a1, v14);
      v4[19] -= v16;
      v14 = v15;
    }
    while (v15);
  }
}

void self_destruct(uint64_t a1)
{
  signed int i;

  for (i = 1; i != -1; --i)
    free_pool((_QWORD *)a1, i);
  jpeg_free_small(a1, *(void **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)a1);
}

uint64_t do_sarray_io(uint64_t result, uint64_t a2, int a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v3)
  {
    v5 = result;
    v6 = 0;
    v7 = *(unsigned int *)(a2 + 12);
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a2 + 28) * (unint64_t)v7;
    v10 = a2 + 56;
    if (a3)
      v11 = 64;
    else
      v11 = 56;
    do
    {
      v12 = v3 - v6;
      if (v12 >= v8)
        v12 = v8;
      v13 = v6 + *(unsigned int *)(a2 + 28);
      if (v12 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v13))
        v12 = *(unsigned int *)(a2 + 32) - v13;
      v14 = *(unsigned int *)(a2 + 8) - v13;
      if (v12 >= v14)
        v12 = v14;
      if (v12 < 1)
        break;
      v15 = v12 * v7;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unint64_t, uint64_t))(a2 + v11))(v5, v10, *(_QWORD *)(*(_QWORD *)a2 + 8 * v6), v9, v12 * v7);
      v9 += v15;
      v3 = *(unsigned int *)(a2 + 20);
      v8 = *(unsigned int *)(a2 + 24);
      v6 += v8;
    }
    while (v6 < v3);
  }
  return result;
}

uint64_t do_barray_io(uint64_t result, uint64_t a2, int a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v3)
  {
    v5 = result;
    v6 = 0;
    v7 = (unint64_t)*(unsigned int *)(a2 + 12) << 7;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = v7 * *(unsigned int *)(a2 + 28);
    v10 = a2 + 56;
    if (a3)
      v11 = 64;
    else
      v11 = 56;
    do
    {
      v12 = v3 - v6;
      if (v12 >= v8)
        v12 = v8;
      v13 = v6 + *(unsigned int *)(a2 + 28);
      if (v12 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v13))
        v12 = *(unsigned int *)(a2 + 32) - v13;
      v14 = *(unsigned int *)(a2 + 8) - v13;
      if (v12 >= v14)
        v12 = v14;
      if (v12 < 1)
        break;
      v15 = v12 * v7;
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unint64_t, unint64_t))(a2 + v11))(v5, v10, *(_QWORD *)(*(_QWORD *)a2 + 8 * v6), v9, v12 * v7);
      v9 += v15;
      v3 = *(unsigned int *)(a2 + 20);
      v8 = *(unsigned int *)(a2 + 24);
      v6 += v8;
    }
    while (v6 < v3);
  }
  return result;
}

void CoreML::validate<(MLModelType)501>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreML *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 __p;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 16))
    v4 = *(CoreML **)(a1 + 16);
  else
    v4 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v13);
  CoreML::validateModelDescription(v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v10);
  v13 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
  __p = v11;
  v15 = v12;
  if (CoreML::Result::good((CoreML::Result *)&v13))
  {
    CoreML::Recommender::constructAndValidateItemSimilarityRecommenderFromSpec((CoreML::Recommender *)a1, &v8);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    CoreML::Result::Result((CoreML::Result *)a2);
  }
  else
  {
    *(_QWORD *)a2 = v13;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v15;
    __p = 0uLL;
    v15 = 0;
  }
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
}

uint64_t _GLOBAL__sub_I_ItemSimilarityRecommenderValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void *jpeg_get_small(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x1914B082uLL);
}

void jpeg_free_small(int a1, void *a2)
{
  free(a2);
}

void *jpeg_get_large(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x131737E5uLL);
}

uint64_t jpeg_mem_available(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 88);
  if (v4)
    return v4 - a4;
  else
    return a3;
}

uint64_t jpeg_open_backing_store(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *(_DWORD *)(v1 + 40) = 51;
  return (*(uint64_t (**)(uint64_t *))v1)(a1);
}

uint64_t jinit_1pass_quantizer(uint64_t a1)
{
  void (**v2)(uint64_t);
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64x2_t v14;
  int32x2_t v15;
  int64x2_t v16;
  unsigned int *v17;
  int32x2_t v18;
  int64x2_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char v31;
  int v32;
  void (**v33)(uint64_t, uint64_t);
  int v34;
  void (**v35)(uint64_t, uint64_t);
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t result;

  v2 = (void (**)(uint64_t))(**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 656) = v2;
  *v2 = start_pass_1_quant;
  v2[2] = (void (*)(uint64_t))finish_pass_1_quant;
  v2[3] = (void (*)(uint64_t))new_color_map_1_quant;
  v2[14] = 0;
  v2[10] = 0;
  if (*(int *)(a1 + 144) >= 5)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 0x400000039;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v3 = *(_DWORD *)(a1 + 120);
  if (v3 >= 257)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 40) = 0x1000000003BLL;
    (**(void (***)(uint64_t))a1)(a1);
    v3 = *(_DWORD *)(a1 + 120);
  }
  v4 = *(_QWORD *)(a1 + 656);
  v5 = *(unsigned int *)(a1 + 144);
  v6 = v3;
  v7 = 1;
  do
  {
    v8 = v7++;
    v9 = v7;
    if ((int)v5 >= 2)
    {
      v10 = v5 - 1;
      v9 = v7;
      do
      {
        v9 *= v7;
        --v10;
      }
      while (v10);
    }
  }
  while (v9 <= v3);
  if (v8 <= 1)
  {
    v11 = *(_QWORD *)a1;
    *(_DWORD *)(v11 + 40) = 58;
    *(_DWORD *)(v11 + 44) = v9;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if ((int)v5 < 1)
  {
    v23 = 1;
  }
  else
  {
    v12 = v4 + 60;
    v13 = (v5 + 1) & 0x1FFFFFFFELL;
    v14 = (uint64x2_t)vdupq_n_s64(v5 - 1);
    v15 = vdup_n_s32(v8);
    v16 = (int64x2_t)xmmword_2186CF1A0;
    v17 = (unsigned int *)(v4 + 64);
    v18 = (int32x2_t)0x100000001;
    v19 = vdupq_n_s64(2uLL);
    do
    {
      v20 = (int8x8_t)v18;
      v21 = (int8x8_t)vmovn_s64((int64x2_t)vcgeq_u64(v14, (uint64x2_t)v16));
      if ((v21.i8[0] & 1) != 0)
        *(v17 - 1) = v8;
      if ((v21.i8[4] & 1) != 0)
        *v17 = v8;
      v18 = vmul_s32(v18, v15);
      v16 = vaddq_s64(v16, v19);
      v17 += 2;
      v13 -= 2;
    }
    while (v13);
    v22 = vbsl_s8(v21, (int8x8_t)v18, v20);
    v23 = (v22.i32[0] * v22.i32[1]);
    v24 = 0;
    v25 = *(_DWORD *)(a1 + 64);
    v26 = 1;
    while (1)
    {
      v27 = v24;
      if (v25 == 2)
        v27 = select_ncolors_RGB_order[v24];
      v28 = *(int *)(v12 + 4 * v27);
      v29 = v28 + 1;
      v30 = (int)v23 / (int)v28 * (v28 + 1);
      if (v30 <= v6)
      {
        v26 = 0;
        *(_DWORD *)(v12 + 4 * v27) = v29;
        ++v24;
        v23 = v30;
        if (v24 != v5)
          continue;
      }
      v24 = 0;
      v31 = v26;
      v26 = 1;
      if ((v31 & 1) != 0)
        break;
    }
  }
  v32 = *(_DWORD *)(a1 + 144);
  v33 = *(void (***)(uint64_t, uint64_t))a1;
  *(_DWORD *)(*(_QWORD *)a1 + 44) = v23;
  if (v32 == 3)
  {
    *((_DWORD *)v33 + 12) = *(_DWORD *)(v4 + 60);
    *((_DWORD *)v33 + 13) = *(_DWORD *)(v4 + 64);
    *((_DWORD *)v33 + 14) = *(_DWORD *)(v4 + 68);
    v34 = 96;
    v35 = v33;
  }
  else
  {
    v35 = *(void (***)(uint64_t, uint64_t))a1;
    v34 = 97;
  }
  *((_DWORD *)v33 + 10) = v34;
  v35[1](a1, 1);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 16))(a1, 1, v23, *(unsigned int *)(a1 + 144));
  v37 = *(_DWORD *)(a1 + 144);
  if (v37 >= 1)
  {
    v38 = 0;
    v39 = v23;
    do
    {
      v40 = *(unsigned int *)(v4 + 4 * v38 + 60);
      v41 = (v39 / (int)v40);
      if ((int)v40 >= 1)
      {
        v42 = 0;
        v43 = 0;
        do
        {
          if (v42 * (int)v41 < (int)v23)
          {
            v44 = v43;
            do
            {
              if ((int)v41 >= 1)
              {
                for (i = 0; i != v41; ++i)
                  *(_BYTE *)(*(_QWORD *)(v36 + 8 * v38) + v44 + i) = ((unint64_t)((v40 - 1) >> 1)
                                                                    - v42
                                                                    + (v42 << 8))
                                                                   / (v40 - 1);
              }
              v44 += v39;
            }
            while (v44 < (int)v23);
          }
          ++v42;
          v43 += (int)v41;
        }
        while (v42 != v40);
        v37 = *(_DWORD *)(a1 + 144);
      }
      ++v38;
      v39 /= (int)v40;
    }
    while (v38 < v37);
  }
  *(_QWORD *)(v4 + 32) = v36;
  *(_DWORD *)(v4 + 40) = v23;
  result = create_colorindex(a1);
  if (*(_DWORD *)(a1 + 112) == 2)
    return alloc_fs_workspace(a1);
  return result;
}

void start_pass_1_quant(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, int);
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(v2 + 32);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(v2 + 40);
  v3 = *(_DWORD *)(a1 + 112);
  if (v3 == 2)
  {
    *(_QWORD *)(v2 + 8) = quantize_fs_dither;
    *(_DWORD *)(v2 + 144) = 0;
    if (!*(_QWORD *)(v2 + 112))
      alloc_fs_workspace(a1);
    if (*(int *)(a1 + 144) >= 1)
    {
      v5 = 0;
      v6 = 2 * (*(_DWORD *)(a1 + 136) + 2);
      v7 = v2 + 112;
      do
        bzero(*(void **)(v7 + 8 * v5++), v6);
      while (v5 < *(int *)(a1 + 144));
    }
  }
  else if (v3 == 1)
  {
    v8 = quantize_ord_dither;
    if (*(_DWORD *)(a1 + 144) == 3)
      v8 = quantize3_ord_dither;
    *(_QWORD *)(v2 + 8) = v8;
    *(_DWORD *)(v2 + 76) = 0;
    if (!*(_DWORD *)(v2 + 56))
      create_colorindex(a1);
    if (!*(_QWORD *)(v2 + 80))
    {
      v9 = *(_DWORD *)(a1 + 144);
      if (v9 >= 1)
      {
        v10 = 0;
        v11 = *(_QWORD *)(a1 + 656);
        v12 = v11 + 60;
        do
        {
          v13 = *(_DWORD *)(v11 + 4 * v10 + 60);
          if (!v10)
            goto LABEL_25;
          v14 = 0;
          while (v13 != *(_DWORD *)(v12 + 4 * v14))
          {
            if (v10 == ++v14)
              goto LABEL_25;
          }
          v15 = *(_QWORD *)(v12 + 8 * v14 + 20);
          if (!v15)
          {
LABEL_25:
            v15 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
            v16 = 0;
            v17 = (unsigned __int8 *)&base_dither_matrix;
            v18 = v15;
            do
            {
              for (i = 0; i != 16; ++i)
                *(_DWORD *)(v18 + 4 * i) = 255 * (255 - 2 * v17[i]) / ((uint64_t)(v13 - 1) << 9);
              ++v16;
              v18 += 64;
              v17 += 16;
            }
            while (v16 != 16);
            v9 = *(_DWORD *)(a1 + 144);
          }
          *(_QWORD *)(v11 + 8 * v10++ + 80) = v15;
        }
        while (v10 < v9);
      }
    }
  }
  else if (v3)
  {
    v20 = *(_QWORD *)a1;
    *(_DWORD *)(v20 + 40) = 49;
    (*(void (**)(uint64_t))v20)(a1);
  }
  else
  {
    if (*(_DWORD *)(a1 + 144) == 3)
      v4 = color_quantize3;
    else
      v4 = color_quantize;
    *(_QWORD *)(v2 + 8) = v4;
  }
}

uint64_t new_color_map_1_quant(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *(_DWORD *)(v1 + 40) = 47;
  return (*(uint64_t (**)(uint64_t *))v1)(a1);
}

uint64_t create_colorindex(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  _BYTE *v19;

  v2 = *(_QWORD *)(a1 + 656);
  v3 = *(_DWORD *)(a1 + 112);
  if (v3 == 1)
    v4 = 766;
  else
    v4 = 256;
  *(_DWORD *)(v2 + 56) = v3 == 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 8) + 16))(a1, 1, v4, *(unsigned int *)(a1 + 144));
  *(_QWORD *)(v2 + 48) = result;
  if (*(int *)(a1 + 144) >= 1)
  {
    v6 = 0;
    v7 = *(_DWORD *)(v2 + 40);
    do
    {
      v8 = *(int *)(v2 + 4 * v6 + 60);
      v9 = *(_QWORD *)(v2 + 48);
      if (v3 == 1)
      {
        *(_QWORD *)(v9 + 8 * v6) += 255;
        v9 = *(_QWORD *)(v2 + 48);
      }
      v10 = 0;
      v11 = 0;
      v12 = *(char **)(v9 + 8 * v6);
      v13 = v8 - 1;
      v14 = 2 * ((int)v8 - 1);
      v15 = (v8 + 254) / v14;
      v7 /= (int)v8;
      do
      {
        if (v10 > (int)v15)
        {
          v16 = 2 * v11 + 3;
          do
          {
            v15 = (v13 - v16 + ((uint64_t)v16 << 8)) / v14;
            ++v11;
            v16 += 2;
          }
          while (v10 > (int)v15);
        }
        v12[v10++] = v11 * v7;
      }
      while (v10 != 256);
      if (v3 == 1)
      {
        v17 = 0;
        v18 = *v12;
        v19 = v12 + 256;
        do
        {
          v12[v17 - 1] = v18;
          *v19++ = v12[255];
          --v17;
        }
        while (v17 != -255);
      }
      ++v6;
    }
    while (v6 < *(int *)(a1 + 144));
  }
  return result;
}

uint64_t alloc_fs_workspace(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(int *)(result + 144) >= 1)
  {
    v1 = result;
    v2 = 0;
    v3 = 2 * (*(_DWORD *)(result + 136) + 2);
    v4 = *(_QWORD *)(result + 656) + 112;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 8) + 8))(v1, 1, v3);
      *(_QWORD *)(v4 + 8 * v2++) = result;
    }
    while (v2 < *(int *)(v1 + 144));
  }
  return result;
}

uint64_t color_quantize3(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  int v12;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = *(uint64_t **)(*(_QWORD *)(result + 656) + 48);
    v6 = *v5;
    v7 = v5[1];
    v8 = v5[2];
    v9 = *(_DWORD *)(result + 136);
    do
    {
      if (v9)
      {
        v10 = *(_BYTE **)(a3 + 8 * v4);
        v11 = *(unsigned __int8 **)(a2 + 8 * v4);
        v12 = v9;
        do
        {
          result = *(unsigned __int8 *)(v7 + v11[1]);
          *v10++ = result + *(_BYTE *)(v6 + *v11) + *(_BYTE *)(v8 + v11[2]);
          v11 += 3;
          --v12;
        }
        while (v12);
      }
      ++v4;
    }
    while (v4 != a4);
  }
  return result;
}

uint64_t color_quantize(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned __int8 *v10;
  int v11;
  char v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = *(uint64_t **)(*(_QWORD *)(result + 656) + 48);
    v6 = *(_DWORD *)(result + 136);
    v7 = *(unsigned int *)(result + 144);
    v8 = a4;
    do
    {
      if (v6)
      {
        v9 = *(_BYTE **)(a3 + 8 * v4);
        v10 = *(unsigned __int8 **)(a2 + 8 * v4);
        v11 = v6;
        do
        {
          if ((int)v7 < 1)
          {
            v12 = 0;
          }
          else
          {
            v12 = 0;
            result = v7;
            v13 = v5;
            v14 = v10;
            do
            {
              v16 = *v13++;
              v15 = v16;
              LODWORD(v16) = *v14++;
              v12 += *(_BYTE *)(v15 + v16);
              --result;
            }
            while (result);
            v10 += (v7 - 1) + 1;
          }
          *v9++ = v12;
          --v11;
        }
        while (v11);
      }
      ++v4;
    }
    while (v4 != v8);
  }
  return result;
}

uint64_t quantize3_ord_dither(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned __int8 *v17;
  int v18;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 656);
    v6 = *(uint64_t **)(v5 + 48);
    v7 = *v6;
    v8 = v6[1];
    v9 = v6[2];
    v10 = *(_DWORD *)(result + 136);
    v11 = a4;
    v12 = *(_DWORD *)(v5 + 76);
    do
    {
      if (v10)
      {
        v13 = 0;
        v14 = *(_QWORD *)(v5 + 80) + ((uint64_t)v12 << 6);
        result = *(_QWORD *)(v5 + 88) + ((uint64_t)v12 << 6);
        v15 = *(_QWORD *)(v5 + 96) + ((uint64_t)v12 << 6);
        v16 = *(_BYTE **)(a3 + 8 * v4);
        v17 = *(unsigned __int8 **)(a2 + 8 * v4);
        v18 = v10;
        do
        {
          *v16++ = *(_BYTE *)(v8 + *(int *)(result + 4 * v13) + (unint64_t)v17[1])
                 + *(_BYTE *)(v7 + *(int *)(v14 + 4 * v13) + (unint64_t)*v17)
                 + *(_BYTE *)(v9 + *(int *)(v15 + 4 * v13) + (unint64_t)v17[2]);
          v13 = ((_BYTE)v13 + 1) & 0xF;
          v17 += 3;
          --v18;
        }
        while (v18);
      }
      v12 = ((_BYTE)v12 + 1) & 0xF;
      *(_DWORD *)(v5 + 76) = v12;
      ++v4;
    }
    while (v4 != v11);
  }
  return result;
}

void quantize_ord_dither(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;

  if (a4 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 656);
    v8 = *(unsigned int *)(a1 + 136);
    v9 = *(unsigned int *)(a1 + 144);
    v10 = *(_DWORD *)(a1 + 144);
    v11 = a4;
    do
    {
      bzero(*(void **)(a3 + 8 * v6), v8);
      v12 = *(int *)(v7 + 76);
      if (v10 >= 1)
      {
        v13 = 0;
        do
        {
          if ((_DWORD)v8)
          {
            v14 = 0;
            v15 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13);
            v16 = *(_QWORD *)(v7 + 8 * v13 + 80) + (v12 << 6);
            v17 = *(_BYTE **)(a3 + 8 * v6);
            v18 = *(_QWORD *)(a2 + 8 * v6);
            v19 = v8;
            do
            {
              *v17++ += *(_BYTE *)(v15 + *(int *)(v16 + 4 * v14) + (unint64_t)*(unsigned __int8 *)(v18 + v13));
              v14 = ((_BYTE)v14 + 1) & 0xF;
              v18 += (int)v9;
              --v19;
            }
            while (v19);
          }
          ++v13;
        }
        while (v13 != v9);
      }
      *(_DWORD *)(v7 + 76) = ((_BYTE)v12 + 1) & 0xF;
      ++v6;
    }
    while (v6 != v11);
  }
}

void quantize_fs_dither(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  unsigned __int8 *v17;
  _BYTE *v18;
  _WORD *v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  __int16 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;

  if (a4 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 656);
    v8 = *(unsigned int *)(a1 + 144);
    v9 = *(unsigned int *)(a1 + 136);
    v10 = *(_QWORD *)(a1 + 440);
    v11 = (v9 - 1);
    v12 = (v11 * v8);
    v13 = -(int)v8;
    v31 = a4;
    do
    {
      v14 = v13;
      v15 = v11;
      bzero(*(void **)(a3 + 8 * v6), v9);
      v11 = v15;
      v13 = v14;
      if ((int)v8 >= 1)
      {
        for (i = 0; i != v8; ++i)
        {
          v17 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * v6) + i);
          v18 = *(_BYTE **)(a3 + 8 * v6);
          if (*(_DWORD *)(v7 + 144))
          {
            v17 += v12;
            v18 += v11;
            v19 = (_WORD *)(*(_QWORD *)(v7 + 8 * i + 112) + 2 * (v9 + 1));
            v20 = -1;
            v21 = v14;
          }
          else
          {
            v19 = *(_WORD **)(v7 + 8 * i + 112);
            v20 = 1;
            v21 = v8;
          }
          v22 = 0;
          if ((_DWORD)v9)
          {
            v23 = 0;
            v24 = 0;
            v25 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * i);
            v26 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8 * i);
            v27 = v9;
            do
            {
              v28 = *(unsigned __int8 *)(v10 + *v17 + (uint64_t)((v24 + (__int16)v19[v20] + 8) >> 4));
              v29 = *(unsigned __int8 *)(v25 + v28);
              *v18 += v29;
              LODWORD(v29) = v28 - *(unsigned __int8 *)(v26 + v29);
              v30 = 3 * v29 + v22;
              v22 = 5 * v29 + v23;
              v24 = 7 * v29;
              v17 += v21;
              *v19 = v30;
              v18 += v20;
              v19 += v20;
              v23 = v29;
              --v27;
            }
            while (v27);
          }
          *v19 = v22;
        }
      }
      *(_DWORD *)(v7 + 144) = *(_DWORD *)(v7 + 144) == 0;
      ++v6;
    }
    while (v6 != v31);
  }
}

void CoreML::validate<(MLModelType)609>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  _DWORD *v5;
  _DWORD *v6;
  _BOOL8 v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  _DWORD *v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  __int128 __p;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 16))
    v3 = *(uint64_t **)(a1 + 16);
  else
    v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a1 + 44) != 609)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "Model not an array feature extractor.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(__p) & 0x80000000) == 0)
      return;
    v10 = v17;
    goto LABEL_34;
  }
  CoreML::Result::Result((CoreML::Result *)&v17);
  CoreML::validateModelDescription((CoreML *)v3, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v14);
  v17 = v14;
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  __p = v15;
  v19 = v16;
  if (!CoreML::Result::good((CoreML::Result *)&v17))
    goto LABEL_31;
  v5 = operator new(4uLL);
  v11 = v5;
  *v5 = 5;
  v12 = v5 + 1;
  v13 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&v11, (uint64_t)&v14);
  v17 = v14;
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  __p = v15;
  v19 = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v17))
    goto LABEL_31;
  v6 = operator new(0xCuLL);
  v12 = v6 + 3;
  v13 = v6 + 3;
  *(_QWORD *)v6 = 0x100000002;
  v6[2] = 5;
  v11 = v6;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&v11, (uint64_t)&v14);
  v17 = v14;
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  __p = v15;
  v19 = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  v7 = CoreML::Result::good((CoreML::Result *)&v17);
  if (!v7)
    goto LABEL_31;
  if (*((_DWORD *)v3 + 6) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "Exactly one input array column must be specified.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_27;
  }
  v8 = *(uint64_t **)(*(_QWORD *)(v3[7] + 8) + 32);
  if (!v8)
    v8 = &CoreML::Specification::_FeatureType_default_instance_;
  if (*((_DWORD *)v8 + 9) == 2)
  {
    v9 = *(_DWORD *)(a1 + 44) == 609
       ? *(uint64_t **)(a1 + 32)
       : CoreML::Specification::ArrayFeatureExtractor::default_instance((CoreML::Specification::ArrayFeatureExtractor *)v7);
    if (*((_DWORD *)v9 + 4) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "If output type is Double in interface, exactly one extraction index must be specified.");
      CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_27:
      if (SHIBYTE(v15) < 0)
        operator delete(v14);
      goto LABEL_32;
    }
  }
LABEL_31:
  *(_QWORD *)a2 = v17;
  *(_OWORD *)(a2 + 8) = __p;
  *(_QWORD *)(a2 + 24) = v19;
  __p = 0uLL;
  v19 = 0;
LABEL_32:
  if ((SHIBYTE(v19) & 0x80000000) == 0)
    return;
  v10 = (void *)__p;
LABEL_34:
  operator delete(v10);
}

void sub_21837F930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_ArrayFeatureExtractorValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t jinit_2pass_quantizer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 656) = v2;
  *(_QWORD *)v2 = start_pass_2_quant;
  *(_QWORD *)(v2 + 24) = new_color_map_2_quant;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  if (*(_DWORD *)(a1 + 144) != 3)
  {
    v3 = *(_QWORD *)a1;
    *(_DWORD *)(v3 + 40) = 48;
    (*(void (**)(uint64_t))v3)(a1);
  }
  v4 = 0;
  *(_QWORD *)(v2 + 48) = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
  do
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 4096);
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + v4) = result;
    v4 += 8;
  }
  while (v4 != 256);
  *(_DWORD *)(v2 + 56) = 1;
  if (!*(_DWORD *)(a1 + 132))
  {
    *(_QWORD *)(v2 + 32) = 0;
    goto LABEL_13;
  }
  v6 = *(unsigned int *)(a1 + 120);
  if ((int)v6 < 8)
  {
    v7 = 0x80000003ALL;
LABEL_11:
    *(_QWORD *)(*(_QWORD *)a1 + 40) = v7;
    (**(void (***)(uint64_t))a1)(a1);
    goto LABEL_12;
  }
  if (v6 >= 0x101)
  {
    v7 = 0x1000000003BLL;
    goto LABEL_11;
  }
LABEL_12:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1, 1, v6, 3);
  *(_QWORD *)(v2 + 32) = result;
  *(_DWORD *)(v2 + 40) = v6;
LABEL_13:
  if (*(_DWORD *)(a1 + 112))
  {
    *(_DWORD *)(a1 + 112) = 2;
    *(_QWORD *)(v2 + 64) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, 6 * (*(_DWORD *)(a1 + 136) + 2));
    return init_error_limit(a1);
  }
  return result;
}

void start_pass_2_quant(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t i;

  v3 = *(_QWORD *)(a1 + 656);
  v4 = *(_QWORD *)(v3 + 48);
  if (*(_DWORD *)(a1 + 112))
  {
    *(_DWORD *)(a1 + 112) = 2;
    if (!a2)
    {
      v5 = pass2_fs_dither;
      goto LABEL_7;
    }
LABEL_5:
    *(_QWORD *)(v3 + 8) = prescan_quantize;
    *(_QWORD *)(v3 + 16) = finish_pass1;
    *(_DWORD *)(v3 + 56) = 1;
    goto LABEL_18;
  }
  if (a2)
    goto LABEL_5;
  v5 = pass2_no_dither;
LABEL_7:
  *(_QWORD *)(v3 + 8) = v5;
  *(_QWORD *)(v3 + 16) = finish_pass2;
  v6 = *(_DWORD *)(a1 + 156);
  if (v6 < 1)
  {
    v7 = 0x10000003ALL;
  }
  else
  {
    if (v6 < 0x101)
      goto LABEL_12;
    v7 = 0x1000000003BLL;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 40) = v7;
  (**(void (***)(uint64_t))a1)(a1);
LABEL_12:
  if (*(_DWORD *)(a1 + 112) == 2)
  {
    v8 = 6 * (*(_DWORD *)(a1 + 136) + 2);
    v9 = *(void **)(v3 + 64);
    if (!v9)
    {
      v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(_QWORD *)(a1 + 8) + 8))(a1, 1, v8);
      *(_QWORD *)(v3 + 64) = v9;
    }
    bzero(v9, v8);
    if (!*(_QWORD *)(v3 + 80))
      init_error_limit(a1);
    *(_DWORD *)(v3 + 72) = 0;
  }
LABEL_18:
  if (*(_DWORD *)(v3 + 56))
  {
    for (i = 0; i != 256; i += 8)
      bzero(*(void **)(v4 + i), 0x1000uLL);
    *(_DWORD *)(v3 + 56) = 0;
  }
}

uint64_t new_color_map_2_quant(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 656) + 56) = 1;
  return result;
}

uint64_t init_error_limit(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 656);
  result = (**(uint64_t (***)(void))(a1 + 8))();
  v3 = 0;
  v4 = 0;
  v5 = result + 1020;
  *(_QWORD *)(v1 + 80) = result + 1020;
  do
  {
    *(_DWORD *)(v5 + 4 * v4) = v4;
    *(_DWORD *)(v5 + 4 * v3) = v3;
    ++v4;
    --v3;
  }
  while (v4 != 16);
  v6 = 16;
  v7 = 271;
  v8 = 956;
  do
  {
    *(_DWORD *)(result + 4 * v7) = v6;
    *(_DWORD *)(result + v8) = -v6;
    v6 += (((_DWORD)v7++ - 254) & 1) == 0;
    v8 -= 4;
  }
  while (v7 != 303);
  v9 = 1212;
  for (i = 828; i != -4; i -= 4)
  {
    *(_DWORD *)(result + v9) = 32;
    *(_DWORD *)(result + i) = -32;
    v9 += 4;
  }
  return result;
}

uint64_t prescan_quantize(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(*(_QWORD *)(result + 656) + 48);
    v6 = *(_DWORD *)(result + 136);
    do
    {
      if (v6)
      {
        v7 = *(_BYTE **)(a2 + 8 * v4);
        v8 = v6;
        do
        {
          v9 = *(_QWORD *)(v5 + (*v7 & 0xF8)) + ((16 * v7[1]) & 0xFC0);
          v10 = ((unint64_t)v7[2] >> 2) & 0x3E;
          v11 = *(unsigned __int16 *)(v9 + v10);
          if (((v11 + 1) & 0x10000) == 0)
            LOWORD(v11) = v11 + 1;
          *(_WORD *)(v9 + v10) = v11;
          v7 += 3;
          --v8;
        }
        while (v8);
      }
      ++v4;
    }
    while (v4 != a4);
  }
  return result;
}

uint64_t finish_pass1(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned __int16 *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v2 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(v2 + 32);
  v56 = v2;
  v3 = *(_DWORD *)(v2 + 40);
  v4 = (**(uint64_t (***)(void))(a1 + 8))();
  *(_OWORD *)v4 = xmmword_2186F9B10;
  *(_QWORD *)(v4 + 16) = 0x1F00000000;
  v58 = v4;
  v59 = a1;
  update_box(a1, v4);
  v5 = 1;
  if (v3 < 2)
    goto LABEL_35;
  v6 = 1;
  while (1)
  {
    if (v3 >= (unint64_t)(2 * v6))
    {
      v7 = 0;
      v12 = 0;
      v13 = v6;
      v10 = v58;
      v14 = v58;
      do
      {
        if (*(_QWORD *)(v14 + 32) > v12 && *(uint64_t *)(v14 + 24) > 0)
        {
          v12 = *(_QWORD *)(v14 + 32);
          v7 = v14;
        }
        v14 += 40;
        --v13;
      }
      while (v13);
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = v6;
      v10 = v58;
      v11 = v58;
      do
      {
        if (*(_QWORD *)(v11 + 24) > v8)
        {
          v8 = *(_QWORD *)(v11 + 24);
          v7 = v11;
        }
        v11 += 40;
        --v9;
      }
      while (v9);
    }
    if (!v7)
      break;
    v15 = v10 + 40 * v6;
    *(_DWORD *)(v15 + 20) = *(_DWORD *)(v7 + 20);
    *(_OWORD *)v15 = *(_OWORD *)v7;
    v16 = *(_DWORD *)(v7 + 20);
    *(_DWORD *)(v15 + 16) = *(_DWORD *)(v7 + 16);
    v17 = (_DWORD *)(v15 + 16);
    v19 = *(_DWORD *)v7;
    v18 = *(_DWORD *)(v7 + 4);
    v20 = 16 * (v18 - *(_DWORD *)v7);
    v22 = *(_DWORD *)(v7 + 8);
    v21 = *(_DWORD *)(v7 + 12);
    v23 = *(_DWORD *)(v7 + 16);
    v24 = v20 <= 12 * (v21 - v22);
    if (v20 <= 12 * (v21 - v22))
      v20 = 12 * (v21 - v22);
    if (v20 >= 8 * (v16 - v23))
      v25 = v24;
    else
      v25 = 2;
    if (v25 == 2)
    {
      v28 = v23 + v16;
      if (v23 + v16 < 0 != __OFADD__(v23, v16))
        ++v28;
      v27 = v28 >> 1;
      *(_DWORD *)(v7 + 20) = v27;
    }
    else if (v25 == 1)
    {
      v17 = (_DWORD *)(v10 + 40 * v6 + 8);
      v29 = v22 + v21;
      if (v22 + v21 < 0 != __OFADD__(v22, v21))
        ++v29;
      v27 = v29 >> 1;
      *(_DWORD *)(v7 + 12) = v27;
    }
    else
    {
      v26 = v19 + v18;
      if (v19 + v18 < 0 != __OFADD__(v19, v18))
        ++v26;
      v27 = v26 >> 1;
      *(_DWORD *)(v7 + 4) = v26 >> 1;
      v17 = (_DWORD *)(v10 + 40 * v6);
    }
    *v17 = v27 + 1;
    update_box(a1, v7);
    update_box(a1, v15);
    if (++v6 == v3)
      goto LABEL_34;
  }
  v3 = v6;
LABEL_34:
  v5 = v3;
  if (v3 >= 1)
  {
LABEL_35:
    v30 = 0;
    v55 = v5;
    v57 = v5;
    do
    {
      v31 = (int *)(v58 + 40 * v30);
      v32 = v31[1];
      v33 = *v31;
      if ((int)v33 <= v32)
      {
        v37 = 0;
        v36 = 0;
        v35 = 0;
        v34 = 0;
        v38 = (int *)(v58 + 40 * v30);
        v39 = v38[5];
        v40 = v38[4];
        v41 = v38[3];
        v42 = v38[2];
        v43 = v32 + 1;
        do
        {
          if ((int)v42 <= v41)
          {
            v44 = v42;
            do
            {
              if ((int)v40 <= v39)
              {
                v45 = (8 * v40) | 4;
                v46 = v39 - v40 + 1;
                v47 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 656) + 48) + 8 * v33)
                                         + (v44 << 6)
                                         + 2 * v40);
                do
                {
                  v48 = *v47++;
                  v49 = v34 + v48;
                  v50 = v35 + (int)v48 * (uint64_t)(int)((8 * v33) | 4);
                  v51 = v36 + (int)v48 * (uint64_t)(int)((4 * v44) | 2);
                  v52 = v37 + (int)v48 * (uint64_t)v45;
                  if (v48)
                  {
                    v34 = v49;
                    v35 = v50;
                    v36 = v51;
                    v37 = v52;
                  }
                  v45 += 8;
                  --v46;
                }
                while (v46);
              }
              ++v44;
            }
            while (v41 + 1 != (_DWORD)v44);
          }
          ++v33;
        }
        while (v43 != (_DWORD)v33);
      }
      else
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = 0;
      }
      *(_BYTE *)(**(_QWORD **)(v59 + 160) + v30) = (v35 + (v34 >> 1)) / v34;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v59 + 160) + 8) + v30) = (v36 + (v34 >> 1)) / v34;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v59 + 160) + 16) + v30++) = (v37 + (v34 >> 1)) / v34;
    }
    while (v30 != v57);
    v5 = v55;
  }
  *(_DWORD *)(v59 + 156) = v5;
  v53 = *(_QWORD *)v59;
  *(_DWORD *)(v53 + 40) = 98;
  *(_DWORD *)(v53 + 44) = v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 8))(v59, 1);
  *(_DWORD *)(v56 + 56) = 1;
  return result;
}

uint64_t pass2_fs_dither(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  _WORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  _WORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _WORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  __int16 v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;

  v56 = result;
  if (a4 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 656);
    v6 = *(_QWORD *)(v5 + 48);
    v7 = *(_DWORD *)(result + 136);
    result = *(_QWORD *)(result + 440);
    v8 = *(_QWORD *)(v5 + 80);
    v9 = *(uint64_t **)(v56 + 160);
    v10 = *v9;
    v11 = v9[1];
    v12 = v9[2];
    v44 = (v7 - 1);
    v42 = (3 * v7 + 3);
    v43 = (3 * v7 - 3);
    v45 = a4;
    v47 = *(_QWORD *)(v56 + 656);
    v46 = *(_DWORD *)(v56 + 136);
    v54 = *v9;
    v55 = *(_QWORD *)(v56 + 440);
    v52 = v12;
    v53 = v6;
    v51 = v8;
    do
    {
      v13 = *(_QWORD *)(a2 + 8 * v4);
      v14 = *(_BYTE **)(a3 + 8 * v4);
      v50 = v4;
      if (*(_DWORD *)(v5 + 72))
      {
        v15 = 0;
        v13 += v43;
        v14 += v44;
        v16 = (_WORD *)(*(_QWORD *)(v5 + 64) + 2 * v42);
        v17 = -3;
        v18 = -1;
      }
      else
      {
        v16 = *(_WORD **)(v5 + 64);
        v17 = 3;
        v15 = 1;
        v18 = 1;
      }
      *(_DWORD *)(v5 + 72) = v15;
      if (v7)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v27 = 0;
        v60 = v17;
        v61 = v17;
        v28 = (unsigned __int8 *)(v13 + 2);
        v29 = v16;
        v57 = v18;
        do
        {
          v62 = v23;
          v63 = v22;
          v64 = v21;
          v16 = &v29[v60];
          v30 = *(unsigned __int8 *)(result
                                   + *(int *)(v8 + 4 * ((v19 + (__int16)v29[v60] + 8) >> 4))
                                   + (unint64_t)*(v28 - 2));
          v31 = *(unsigned __int8 *)(result
                                   + *(int *)(v8 + 4 * ((v27 + (__int16)v29[v60 + 1] + 8) >> 4))
                                   + (unint64_t)*(v28 - 1));
          v32 = *(unsigned __int8 *)(result
                                   + *(int *)(v8 + 4 * ((v26 + (__int16)v29[v60 + 2] + 8) >> 4))
                                   + (unint64_t)*v28);
          v33 = (_WORD *)(*(_QWORD *)(v6 + 8 * (v30 >> 3)) + (v31 >> 2 << 6) + 2 * (v32 >> 3));
          v34 = (unsigned __int16)*v33;
          if (!*v33)
          {
            v35 = v11;
            v59 = v24;
            v58 = v25;
            fill_inverse_cmap(v56, v30 >> 3, v31 >> 2, v32 >> 3);
            v25 = v58;
            v24 = v59;
            v8 = v51;
            v12 = v52;
            v11 = v35;
            v18 = v57;
            v10 = v54;
            result = v55;
            v6 = v53;
            v34 = (unsigned __int16)*v33;
          }
          v36 = v34 - 1;
          *v14 = v36;
          v37 = v30 - *(unsigned __int8 *)(v10 + v36);
          v38 = v31 - *(unsigned __int8 *)(v11 + v36);
          v39 = v32 - *(unsigned __int8 *)(v12 + v36);
          v22 = 5 * v37 + v25;
          v40 = 3 * (v31 - *(unsigned __int8 *)(v11 + v36)) + v64;
          v21 = 5 * v38 + v24;
          v41 = 3 * (v32 - *(unsigned __int8 *)(v12 + v36)) + v20;
          v19 = 7 * v37;
          v20 = 5 * v39 + v62;
          v27 = 7 * v38;
          *v29 = 3 * (v30 - *(unsigned __int8 *)(v10 + v36)) + v63;
          v29[1] = v40;
          v26 = 7 * v39;
          v14 += v18;
          v28 += v61;
          v29[2] = v41;
          v29 = (_WORD *)((char *)v29 + v60 * 2);
          v23 = v39;
          v24 = v38;
          v25 = v37;
          --v7;
        }
        while (v7);
      }
      else
      {
        v22 = 0;
        v21 = 0;
        v20 = 0;
      }
      *v16 = v22;
      v16[1] = v21;
      v16[2] = v20;
      v4 = v50 + 1;
      v5 = v47;
      v7 = v46;
    }
    while (v50 + 1 != v45);
  }
  return result;
}

void pass2_no_dither(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 *v16;
  __int16 v17;

  if (a4 >= 1)
  {
    v6 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 656) + 48);
    v8 = *(_DWORD *)(a1 + 136);
    v9 = a4;
    do
    {
      if (v8)
      {
        v10 = *(_BYTE **)(a3 + 8 * v6);
        v11 = *(unsigned __int8 **)(a2 + 8 * v6);
        v12 = v8;
        do
        {
          v13 = (unint64_t)*v11 >> 3;
          v14 = (unint64_t)v11[1] >> 2;
          v15 = (unint64_t)v11[2] >> 3;
          v16 = (__int16 *)(*(_QWORD *)(v7 + 8 * v13) + (v14 << 6) + 2 * v15);
          v17 = *v16;
          if (!*v16)
          {
            fill_inverse_cmap(a1, v13, v14, v15);
            LOBYTE(v17) = *(_BYTE *)v16;
          }
          *v10++ = v17 - 1;
          v11 += 3;
          --v12;
        }
        while (v12);
      }
      ++v6;
    }
    while (v6 != v9);
  }
}

uint64_t update_box(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _WORD *v18;
  int v19;
  uint64_t v20;
  _WORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  int v26;
  uint64_t v27;
  _WORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 656) + 48);
  LODWORD(v4) = *(_DWORD *)a2;
  v3 = *(_DWORD *)(a2 + 4);
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 12);
  v7 = v5;
  v8 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  v10 = v8;
  if (v3 > *(_DWORD *)a2)
  {
    v11 = (int)v4;
    result = (v6 + 1);
    while (v5 > v6)
    {
LABEL_4:
      if (v3 + 1 == (_DWORD)++v11)
        goto LABEL_14;
    }
    v12 = v5;
    while (v8 > v9)
    {
LABEL_11:
      if ((_DWORD)result == (_DWORD)++v12)
        goto LABEL_4;
    }
    v13 = (_WORD *)(*(_QWORD *)(v2 + 8 * v11) + (v12 << 6) + 2 * v8);
    v14 = v9 - v8 + 1;
    while (!*v13)
    {
      ++v13;
      if (!--v14)
        goto LABEL_11;
    }
    *(_DWORD *)a2 = v11;
    LODWORD(v4) = v11;
  }
LABEL_14:
  if (v3 > (int)v4)
  {
    v15 = v3;
    result = (v6 + 1);
    while (v5 > v6)
    {
LABEL_17:
      v16 = v15-- <= (int)v4;
      if (v16)
        goto LABEL_28;
    }
    v17 = v5;
    while (v8 > v9)
    {
LABEL_25:
      if ((_DWORD)result == (_DWORD)++v17)
        goto LABEL_17;
    }
    v18 = (_WORD *)(*(_QWORD *)(v2 + 8 * v15) + (v17 << 6) + 2 * v8);
    v19 = v9 - v8 + 1;
    while (!*v18)
    {
      ++v18;
      if (!--v19)
        goto LABEL_25;
    }
    *(_DWORD *)(a2 + 4) = v15;
    v3 = v15;
  }
LABEL_28:
  if (v6 > v5)
  {
    result = (v3 + 1);
    while (v3 < (int)v4)
    {
LABEL_31:
      if (v6 + 1 == (_DWORD)++v7)
        goto LABEL_41;
    }
    v20 = (int)v4;
    while (v8 > v9)
    {
LABEL_38:
      if ((_DWORD)result == (_DWORD)++v20)
        goto LABEL_31;
    }
    v21 = (_WORD *)(*(_QWORD *)(v2 + 8 * v20) + (v7 << 6) + 2 * v8);
    v22 = v9 - v8 + 1;
    while (!*v21)
    {
      ++v21;
      if (!--v22)
        goto LABEL_38;
    }
    *(_DWORD *)(a2 + 8) = v7;
    v5 = v7;
  }
LABEL_41:
  if (v6 > v5)
  {
    v23 = v6;
    result = (v3 + 1);
    while (v3 < (int)v4)
    {
LABEL_44:
      v16 = v23-- <= v5;
      if (v16)
        goto LABEL_55;
    }
    v24 = (int)v4;
    while (v8 > v9)
    {
LABEL_52:
      if ((_DWORD)result == (_DWORD)++v24)
        goto LABEL_44;
    }
    v25 = (_WORD *)(*(_QWORD *)(v2 + 8 * v24) + (v23 << 6) + 2 * v8);
    v26 = v9 - v8 + 1;
    while (!*v25)
    {
      ++v25;
      if (!--v26)
        goto LABEL_52;
    }
    *(_DWORD *)(a2 + 12) = v23;
    v6 = v23;
  }
LABEL_55:
  if (v9 > v8)
  {
    result = (v3 + 1);
    while (v3 < (int)v4)
    {
LABEL_58:
      if (v9 + 1 == (_DWORD)++v10)
        goto LABEL_68;
    }
    v27 = (int)v4;
    while (v6 < v5)
    {
LABEL_65:
      if ((_DWORD)result == (_DWORD)++v27)
        goto LABEL_58;
    }
    v28 = (_WORD *)(*(_QWORD *)(v2 + 8 * v27) + ((uint64_t)v5 << 6) + 2 * v10);
    v29 = v6 - v5 + 1;
    while (!*v28)
    {
      v28 += 32;
      if (!--v29)
        goto LABEL_65;
    }
    *(_DWORD *)(a2 + 16) = v10;
    v8 = v10;
  }
LABEL_68:
  if (v9 > v8)
  {
    v30 = v9;
    result = (v3 + 1);
    while (v3 < (int)v4)
    {
LABEL_71:
      v16 = v30-- <= v8;
      if (v16)
        goto LABEL_82;
    }
    v31 = (int)v4;
    while (v6 < v5)
    {
LABEL_79:
      if ((_DWORD)result == (_DWORD)++v31)
        goto LABEL_71;
    }
    v32 = (_WORD *)(*(_QWORD *)(v2 + 8 * v31) + ((uint64_t)v5 << 6) + 2 * v30);
    v33 = v6 - v5 + 1;
    while (!*v32)
    {
      v32 += 32;
      if (!--v33)
        goto LABEL_79;
    }
    *(_DWORD *)(a2 + 20) = v30;
    v9 = v30;
  }
LABEL_82:
  *(_QWORD *)(a2 + 24) = 12 * (v6 - v5) * (uint64_t)(12 * (v6 - v5))
                       + 16 * (v3 - (int)v4) * (uint64_t)(16 * (v3 - (int)v4))
                       + 8 * (v9 - v8) * (uint64_t)(8 * (v9 - v8));
  v34 = 0;
  if (v3 >= (int)v4)
  {
    result = (v6 + 1);
    v4 = (int)v4;
    v35 = v3 + 1;
    do
    {
      if (v6 >= v5)
      {
        v36 = v5;
        do
        {
          if (v9 >= v8)
          {
            v37 = (unsigned __int16 *)(*(_QWORD *)(v2 + 8 * v4) + (v36 << 6) + 2 * v8);
            v38 = v9 - v8 + 1;
            do
            {
              if (*v37++)
                ++v34;
              --v38;
            }
            while (v38);
          }
          ++v36;
        }
        while ((_DWORD)result != (_DWORD)v36);
      }
      ++v4;
    }
    while (v35 != (_DWORD)v4);
  }
  *(_QWORD *)(a2 + 32) = v34;
  return result;
}

void fill_inverse_cmap(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  signed int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  _BYTE *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t i;
  _BYTE v78[384];
  _QWORD __b[258];

  __b[256] = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 656) + 48);
  v8 = *(unsigned int *)(a1 + 156);
  if ((int)v8 <= 0)
    goto LABEL_43;
  v10 = 0;
  v11 = (32 * (a2 >> 2)) | 4;
  v12 = 4 * a3;
  v13 = v12 & 0xFFFFFFFFFFFFFFE0 | 2;
  v14 = 8 * (int)a4;
  v15 = v14 & 0xFFFFFFFFFFFFFFE0 | 4;
  v16 = (8 * a2) | 0x1C;
  v17 = v12 | 0x1E;
  v18 = (v13 + (v12 | 0x1E)) >> 1;
  v19 = v14 | 0x1C;
  v20 = *(uint64_t **)(a1 + 160);
  v22 = *v20;
  v21 = v20[1];
  v23 = v20[2];
  v24 = 0x7FFFFFFFLL;
  do
  {
    v25 = *(unsigned __int8 *)(v22 + v10);
    v26 = v25 - v11;
    if (v25 < v11)
    {
      v27 = 2 * v26 * (uint64_t)(2 * v26);
      v26 = v25 - v16;
LABEL_9:
      v29 = 2 * v26;
      goto LABEL_10;
    }
    v28 = v25 - v16;
    if (v25 > v16)
    {
      v27 = 2 * v28 * (uint64_t)(2 * v28);
      goto LABEL_9;
    }
    if ((v11 + v16) >> 1 < v25)
    {
      v27 = 0;
      goto LABEL_9;
    }
    v27 = 0;
    v29 = 2 * v28;
LABEL_10:
    v30 = v29 * (uint64_t)v29;
    v31 = *(unsigned __int8 *)(v21 + v10);
    v32 = 3 * (v31 - (int)v13) * 3 * (v31 - (int)v13);
    v33 = 3 * (v31 - (int)v17);
    v34 = v33 * v33;
    if (v18 < v31)
      v34 = 3 * (v31 - (int)v13) * 3 * (v31 - (int)v13);
    v35 = v27 + v33 * v33;
    if ((int)v31 <= (int)v17)
    {
      v35 = v27;
      v32 = v34;
    }
    v36 = v27 + 3 * (v31 - v13) * 3 * (v31 - v13);
    if ((int)v31 < (int)v13)
    {
      v37 = 3 * (v31 - v17) * 3 * (v31 - v17);
    }
    else
    {
      v36 = v35;
      v37 = v32;
    }
    v38 = v37 + v30;
    v39 = *(unsigned __int8 *)(v23 + v10);
    v40 = (v39 - (int)v15) * (v39 - (int)v15);
    v41 = v39 - (int)v19;
    v42 = v41 * v41;
    if ((v15 + v19) >> 1 < v39)
      v42 = (v39 - (int)v15) * (v39 - (int)v15);
    v43 = v36 + v41 * v41;
    if ((int)v39 <= (int)v19)
    {
      v43 = v36;
      v40 = v42;
    }
    v44 = v36 + (v39 - v15) * (v39 - v15);
    if ((int)v39 < (int)v15)
    {
      v45 = (v39 - v19) * (v39 - v19);
    }
    else
    {
      v44 = v43;
      v45 = v40;
    }
    v46 = v38 + v45;
    __b[v10] = v44;
    if (v46 < v24)
      v24 = v46;
    ++v10;
  }
  while (v8 != v10);
  v47 = 0;
  v48 = 0;
  do
  {
    if (__b[v47] <= v24)
      v78[v48++ + 128] = v47;
    ++v47;
  }
  while (v8 != v47);
  memset_pattern16(__b, &unk_2186F9B20, 0x400uLL);
  if (v48 >= 1)
  {
    v49 = 0;
    v50 = (int)v13;
    v51 = (int)v15;
    v52 = v48;
    do
    {
      v53 = v78[v49 + 128];
      v54 = *(_QWORD **)(a1 + 160);
      v55 = 2 * (v11 - *(unsigned __int8 *)(*v54 + v53));
      v56 = v50 - *(unsigned __int8 *)(v54[1] + v53);
      v57 = v51 - *(unsigned __int8 *)(v54[2] + v53);
      v58 = 3 * v56 * 3 * v56 + v55 * (uint64_t)v55 + v57 * v57;
      v59 = 32 * v55 + 256;
      v60 = 72 * v56 + 144;
      v61 = 16 * v57 + 64;
      v62 = 3;
      v63 = __b;
      v64 = v78;
      do
      {
        v65 = v62;
        v66 = 7;
        v67 = v60;
        v68 = v58;
        do
        {
          v69 = 0;
          v70 = v66;
          v71 = v61;
          v72 = v68;
          do
          {
            if (v72 < v63[v69])
            {
              v63[v69] = v72;
              *v64 = v53;
            }
            v72 += v71;
            v71 += 128;
            ++v64;
            ++v69;
          }
          while ((_DWORD)(v69 * 8) != 32);
          v68 += v67;
          v67 += 288;
          v66 = v70 - 1;
          v63 = (_QWORD *)((char *)v63 + v69 * 8);
        }
        while (v70);
        v58 += v59;
        v59 += 512;
        v62 = v65 - 1;
      }
      while (v65);
      ++v49;
    }
    while (v49 != v52);
  }
LABEL_43:
  v73 = 0;
  v74 = v78;
  do
  {
    v75 = 0;
    v76 = *(_QWORD *)(v7 + 8 * (v73 + (int)(a2 & 0xFFFFFFFC)))
        + ((2 * a4) & 0x1FFFFFFF8)
        + ((uint64_t)(int)(a3 & 0xFFFFFFF8) << 6);
    do
    {
      for (i = 0; i != 4; ++i)
        *(_WORD *)(v76 + 2 * i) = v74[i] + 1;
      ++v75;
      v76 += 64;
      v74 += 4;
    }
    while (v75 != 8);
    ++v73;
  }
  while (v73 != 4);
}

uint64_t jdiv_round_up(uint64_t a1, uint64_t a2)
{
  return (a1 + a2 - 1) / a2;
}

uint64_t jround_up(uint64_t a1, uint64_t a2)
{
  return (a1 + a2 - 1) / a2 * a2;
}

char *jcopy_sample_rows(char *result, int a2, uint64_t a3, int a4, int a5, size_t __n)
{
  size_t v6;
  void **v7;
  unsigned int v8;
  const void **v9;
  const void *v10;
  const void *v11;
  void *v12;

  if (a5 >= 1)
  {
    v6 = __n;
    v7 = (void **)(a3 + 8 * a4);
    v8 = a5 + 1;
    v9 = (const void **)&result[8 * a2];
    do
    {
      v11 = *v9++;
      v10 = v11;
      v12 = *v7++;
      result = (char *)memcpy(v12, v10, v6);
      --v8;
    }
    while (v8 > 1);
  }
  return result;
}

void *jcopy_block_row(void *__src, void *__dst, unsigned int a3)
{
  return memcpy(__dst, __src, (unint64_t)a3 << 7);
}

uint64_t _GLOBAL__sub_I_JSONAllocator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_DWORD *jsonChildren::inc(_DWORD *this)
{
  int v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = this[2];
  if (v1 == this[3])
  {
    v2 = this;
    if (v1)
    {
      v3 = (2 * v1);
      this[3] = v3;
      this = json_realloc<JSONNode *>(*(void **)this, v3);
      *(_QWORD *)v2 = this;
    }
    else
    {
      this = json_malloc<JSONNode *>(8);
      *(_QWORD *)v2 = this;
      v2[3] = 8;
    }
  }
  return this;
}

void *json_malloc<JSONNode *>(uint64_t a1)
{
  return malloc_type_malloc(8 * a1, 0x2004093837F09uLL);
}

void *json_realloc<JSONNode *>(void *a1, uint64_t a2)
{
  return malloc_type_realloc(a1, 8 * a2, 0x2004093837F09uLL);
}

internalJSONNode **jsonChildren::deleteAll(internalJSONNode **this, JSONNode *a2)
{
  uint64_t v2;
  internalJSONNode ***v3;
  uint64_t v4;
  internalJSONNode **v5;

  v2 = *((unsigned int *)this + 2);
  if ((_DWORD)v2)
  {
    v3 = (internalJSONNode ***)*this;
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      this = JSONNode::deleteJSONNode(v5, a2);
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

uint64_t _GLOBAL__sub_I_JSONChildren_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_JSONDebug_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validate<(MLModelType)600>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreML *v4;
  _QWORD *v5;
  _BOOL8 v6;
  uint64_t *v7;
  int v8;
  _DWORD *v9;
  int v10;
  _BOOL8 v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  __int128 __p;
  uint64_t v21;

  if (*(_QWORD *)(a1 + 16))
    v4 = *(CoreML **)(a1 + 16);
  else
    v4 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::Result::Result((CoreML::Result *)&v19);
  CoreML::validateModelDescription(v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v16);
  v19 = v16;
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  __p = v17;
  v21 = v18;
  if (!CoreML::Result::good((CoreML::Result *)&v19))
    goto LABEL_27;
  v5 = operator new(8uLL);
  v13 = v5;
  *v5 = 0x300000001;
  v14 = v5 + 1;
  v15 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 16, 1, (int **)&v13, (uint64_t)&v16);
  v19 = v16;
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  __p = v17;
  v21 = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  v6 = CoreML::Result::good((CoreML::Result *)&v19);
  if (!v6)
    goto LABEL_27;
  if (*(_DWORD *)(a1 + 44) == 600)
    v7 = *(uint64_t **)(a1 + 32);
  else
    v7 = CoreML::Specification::OneHotEncoder::default_instance((CoreML::Specification::OneHotEncoder *)v6);
  v8 = *((unsigned __int8 *)v7 + 16);
  v9 = operator new(4uLL);
  if (v8)
    v10 = 6;
  else
    v10 = 5;
  v13 = v9;
  *v9 = v10;
  v14 = v9 + 1;
  v15 = v9 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 40, 1, (int **)&v13, (uint64_t)&v16);
  v19 = v16;
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  __p = v17;
  v21 = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  v11 = CoreML::Result::good((CoreML::Result *)&v19);
  if (v11
    && (*(_DWORD *)(a1 + 44) != 600
      ? (v12 = CoreML::Specification::OneHotEncoder::default_instance((CoreML::Specification::OneHotEncoder *)v11))
      : (v12 = *(uint64_t **)(a1 + 32)),
        !*((_DWORD *)v12 + 9)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "OneHotEncoder parameter incorrect type");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (SHIBYTE(v17) < 0)
      operator delete(v16);
    if (SHIBYTE(v21) < 0)
      operator delete((void *)__p);
  }
  else
  {
LABEL_27:
    *(_QWORD *)a2 = v19;
    *(_OWORD *)(a2 + 8) = __p;
    *(_QWORD *)(a2 + 24) = v21;
  }
}

void sub_2183811B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_OneHotEncoderValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_JSONIterators_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_JSONMemory_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

internalJSONNode **JSONNode::JSONNode(internalJSONNode **a1, const std::string *a2, int a3)
{
  internalJSONNode *v6;
  internalJSONNode *v7;

  internalJSONNode::newInternal(0);
  *a1 = v6;
  internalJSONNode::Set(v6, a3);
  v7 = *a1;
  std::string::operator=((std::string *)((char *)*a1 + 8), a2);
  *((_BYTE *)v7 + 32) = 1;
  return a1;
}

internalJSONNode **JSONNode::JSONNode(internalJSONNode **a1, const std::string *a2, unint64_t a3)
{
  internalJSONNode *v6;
  internalJSONNode *v7;

  internalJSONNode::newInternal(0);
  *a1 = v6;
  internalJSONNode::Set(v6, a3);
  v7 = *a1;
  std::string::operator=((std::string *)((char *)*a1 + 8), a2);
  *((_BYTE *)v7 + 32) = 1;
  return a1;
}

internalJSONNode **JSONNode::JSONNode(internalJSONNode **a1, const std::string *a2, float a3)
{
  internalJSONNode *v6;
  internalJSONNode *v7;

  internalJSONNode::newInternal(0);
  *a1 = v6;
  internalJSONNode::Set(v6, a3);
  v7 = *a1;
  std::string::operator=((std::string *)((char *)*a1 + 8), a2);
  *((_BYTE *)v7 + 32) = 1;
  return a1;
}

internalJSONNode **JSONNode::JSONNode(internalJSONNode **a1, const std::string *a2, double a3)
{
  internalJSONNode *v6;
  internalJSONNode *v7;

  internalJSONNode::newInternal(0);
  *a1 = v6;
  internalJSONNode::Set(v6, a3);
  v7 = *a1;
  std::string::operator=((std::string *)((char *)*a1 + 8), a2);
  *((_BYTE *)v7 + 32) = 1;
  return a1;
}

uint64_t *JSONNode::JSONNode(uint64_t *a1, const std::string *a2, const std::string *a3)
{
  uint64_t v6;
  uint64_t v7;

  internalJSONNode::newInternal(0);
  *a1 = v6;
  internalJSONNode::Set(v6, a3);
  v7 = *a1;
  std::string::operator=((std::string *)(*a1 + 8), a2);
  *(_BYTE *)(v7 + 32) = 1;
  return a1;
}

uint64_t *JSONNode::JSONNode(uint64_t *a1, const std::string *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;

  internalJSONNode::newInternal(0);
  v7 = v6;
  *a1 = v6;
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  internalJSONNode::Set(v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = *a1;
  std::string::operator=((std::string *)(*a1 + 8), a2);
  *(_BYTE *)(v8 + 32) = 1;
  return a1;
}

internalJSONNode *JSONNode::duplicate@<X0>(internalJSONNode **this@<X0>, const internalJSONNode *a2@<X1>, internalJSONNode **a3@<X8>)
{
  internalJSONNode *result;
  uint64_t v5;

  result = *this;
  v5 = *((_QWORD *)result + 10);
  *((_QWORD *)result + 10) = v5 + 1;
  *a3 = result;
  if ((unint64_t)(v5 + 1) >= 2)
  {
    *((_QWORD *)result + 10) = v5;
    result = (internalJSONNode *)internalJSONNode::newInternal(result, a2);
  }
  *a3 = result;
  return result;
}

internalJSONNode **JSONNode::deleteJSONNode(internalJSONNode **this, JSONNode *a2)
{
  internalJSONNode *v2;
  uint64_t v3;

  if (this)
  {
    v2 = *this;
    if (v2)
    {
      v3 = *((_QWORD *)v2 + 10) - 1;
      *((_QWORD *)v2 + 10) = v3;
      if (!v3)
        internalJSONNode::deleteInternal(v2, a2);
    }
    JUMPOUT(0x219A19A08);
  }
  return this;
}

_QWORD *JSONNode::newJSONNode(uint64_t *a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *a1;
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(*a1 + 80) + 1;
  *result = v3;
  return result;
}

_QWORD *JSONNode::newJSONNode(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = a1;
  return result;
}

uint64_t _GLOBAL__sub_I_JSONNode_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_JSONNode_Mutex_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_JSONPreparse_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/DictVectorizer.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_DictVectorizer_default_instance_ = (uint64_t)&off_24D93CF70;
  unk_254FFA5D8 = 0;
  qword_254FFA5E8 = 0;
  byte_254FFA5F0 = 1;
}

void CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(CoreML::Specification::protobuf_DictVectorizer_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_218381804(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::DictVectorizer *CoreML::Specification::DictVectorizer::DictVectorizer(CoreML::Specification::DictVectorizer *this)
{
  *(_QWORD *)this = &off_24D93CF70;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::DictVectorizer *)&CoreML::Specification::_DictVectorizer_default_instance_)
    CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_218381864(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DictVectorizer::~DictVectorizer(CoreML::Specification::DictVectorizer *this)
{
  *(_QWORD *)this = &off_24D93CF70;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::DictVectorizer::~DictVectorizer(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::DictVectorizer::default_instance(CoreML::Specification::DictVectorizer *this)
{
  CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(this);
  return &CoreML::Specification::_DictVectorizer_default_instance_;
}

CoreML::Specification::DictVectorizer *CoreML::Specification::DictVectorizer::New(CoreML::Specification::DictVectorizer *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::DictVectorizer *v3;

  v3 = (CoreML::Specification::DictVectorizer *)operator new();
  CoreML::Specification::DictVectorizer::DictVectorizer(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::DictVectorizer>(a2, v3);
  return v3;
}

void sub_218381958(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DictVectorizer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DictVectorizer>);
  return result;
}

uint64_t CoreML::Specification::DictVectorizer::MergePartialFromCodedStream(CoreML::Specification::DictVectorizer *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::StringVector *v10;
  CoreML::Specification::Int64Vector *v11;
  char *v13;
  int v14;
  char *v15;
  int VarintSizeAsIntFallback;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t result;
  unint64_t v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_18;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_18;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_18;
      if (*((_DWORD *)this + 7) == 2)
      {
        v11 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        v11 = (CoreML::Specification::Int64Vector *)operator new();
        CoreML::Specification::Int64Vector::Int64Vector(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v15 = *a2;
      if (*a2 >= a2[1] || *v15 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v15;
        *a2 = v15 + 1;
      }
      v21 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v21 & 0x8000000000000000) != 0)
        return 0;
      v19 = v21;
      result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v11, a2, v22);
      if (!(_DWORD)result)
        return result;
LABEL_39:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19))return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      if (*((_DWORD *)this + 7) == 1)
      {
        v10 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v10 = (CoreML::Specification::StringVector *)operator new();
        CoreML::Specification::StringVector::StringVector(v10);
        *((_QWORD *)this + 2) = v10;
      }
      v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        v14 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v14 < 0)
          return 0;
      }
      else
      {
        v14 = *v13;
        *a2 = v13 + 1;
      }
      v17 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v14);
      if ((v17 & 0x8000000000000000) != 0)
        return 0;
      v19 = v17;
      result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v10, a2, v18);
      if (!(_DWORD)result)
        return result;
      goto LABEL_39;
    }
LABEL_18:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_218381BB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DictVectorizer::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::DictVectorizer::ByteSizeLong(CoreML::Specification::DictVectorizer *this)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    v3 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 2));
  }
  else
  {
    if (v2 != 1)
    {
      result = 0;
      goto LABEL_7;
    }
    v3 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 2));
  }
  result = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_7:
  *((_DWORD *)this + 6) = result;
  return result;
}

std::string *CoreML::Specification::DictVectorizer::MergeFrom(std::string *this, const CoreML::Specification::DictVectorizer *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  CoreML::Specification::StringVector *v6;
  CoreML::Specification::Int64Vector *v7;
  CoreML::Specification::StringVector *v8;
  uint64_t *v9;
  CoreML::Specification::Int64Vector *v10;
  uint64_t *v11;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 == 2)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      v7 = *(CoreML::Specification::Int64Vector **)(v3 + 16);
    }
    else
    {
      CoreML::Specification::V5::Dimension::clear_dimension(v3);
      *(_DWORD *)(v3 + 28) = 2;
      v7 = (CoreML::Specification::Int64Vector *)operator new();
      v10 = (CoreML::Specification::Int64Vector *)CoreML::Specification::Int64Vector::Int64Vector(v7);
      *(_QWORD *)(v3 + 16) = v7;
      if (*((_DWORD *)a2 + 7) != 2)
      {
        v11 = CoreML::Specification::Int64Vector::default_instance(v10);
        return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v7, (const CoreML::Specification::GLMRegressor_DoubleArray *)v11);
      }
    }
    v11 = (uint64_t *)*((_QWORD *)a2 + 2);
    return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v7, (const CoreML::Specification::GLMRegressor_DoubleArray *)v11);
  }
  if (v5 == 1)
  {
    if (*(_DWORD *)(v3 + 28) == 1)
    {
      v6 = *(CoreML::Specification::StringVector **)(v3 + 16);
    }
    else
    {
      CoreML::Specification::V5::Dimension::clear_dimension(v3);
      *(_DWORD *)(v3 + 28) = 1;
      v6 = (CoreML::Specification::StringVector *)operator new();
      v8 = (CoreML::Specification::StringVector *)CoreML::Specification::StringVector::StringVector(v6);
      *(_QWORD *)(v3 + 16) = v6;
      if (*((_DWORD *)a2 + 7) != 1)
      {
        v9 = CoreML::Specification::StringVector::default_instance(v8);
        return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v6, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v9);
      }
    }
    v9 = (uint64_t *)*((_QWORD *)a2 + 2);
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v6, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v9);
  }
  return this;
}

void sub_218381E04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DictVectorizer::IsInitialized(CoreML::Specification::DictVectorizer *this)
{
  return 1;
}

_QWORD *CoreML::Specification::DictVectorizer::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DictVectorizer");
}

CoreML::Specification::DictVectorizer *CoreML::Specification::DictVectorizer::New(CoreML::Specification::DictVectorizer *this)
{
  return CoreML::Specification::DictVectorizer::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DictVectorizer>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_DictVectorizer_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_JSONStream_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_JSONValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t JSONWorker::UTF8(JSONWorker *this, const char **a2, const char *a3)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  char v8;
  char v9;
  char v10;

  v3 = *(_QWORD *)this;
  if ((uint64_t)a2 - *(_QWORD *)this < 5)
  {
    return 0;
  }
  else
  {
    *(_QWORD *)this = v3 + 4;
    v4 = *(_BYTE *)(v3 + 3);
    v5 = (v4 - 58);
    v6 = *(unsigned __int8 *)(v3 + 4);
    v7 = v6 - 48;
    v8 = v6 - 87;
    v9 = v6 - 55;
    if (v7 <= 9)
      v9 = v7;
    if (v7 > 0x30)
      v9 = v8;
    v10 = 16 * v4;
    if (v5 < 0xF6)
      v10 -= 112;
    return (v9 | v10);
  }
}

void JSONWorker::SpecialChar(std::string::value_type **this, const char **a2, std::string *a3)
{
  std::string::value_type *v3;
  int v6;
  std::string::value_type v7;
  char v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char v12;
  char v13;
  char v14;

  v3 = *this;
  if (*this != (std::string::value_type *)a2)
  {
    v6 = *v3;
    if (v6 > 91)
    {
      if (v6 > 109)
      {
        v7 = 9;
        switch(*v3)
        {
          case 'n':
            v7 = 10;
            break;
          case 'r':
            v7 = 13;
            break;
          case 't':
            goto LABEL_6;
          case 'u':
            v7 = JSONWorker::UTF8((JSONWorker *)this, a2, (const char *)a3);
            break;
          case 'v':
            v7 = 11;
            break;
          case 'x':
            if ((char *)a2 - v3 < 4)
              goto LABEL_33;
            *this = v3 + 2;
            v8 = v3[1];
            v9 = (v8 - 58);
            v10 = v3[2];
            v11 = v10 - 48;
            v12 = v10 - 87;
            v13 = v10 - 55;
            if (v11 <= 9)
              v13 = v11;
            if (v11 > 0x30)
              v13 = v12;
            v14 = 16 * v8;
            if (v9 < 0xF6)
              v14 -= 112;
            v7 = v13 | v14;
            break;
          default:
            goto LABEL_32;
        }
        goto LABEL_6;
      }
      switch(v6)
      {
        case '\\':
          v7 = 92;
          goto LABEL_6;
        case 'b':
          v7 = 8;
          goto LABEL_6;
        case 'f':
          v7 = 12;
LABEL_6:
          std::string::push_back(a3, v7);
          return;
      }
    }
    else
    {
      if ((v6 - 48) < 8)
      {
        if ((char *)a2 - v3 < 4)
        {
LABEL_33:
          v7 = 0;
        }
        else
        {
          *this = v3 + 2;
          v7 = (8 * v3[1]) ^ 0x80 | (*v3 << 6) | (v3[2] - 48);
        }
        goto LABEL_6;
      }
      if (v6 == 1)
      {
        v7 = 34;
        goto LABEL_6;
      }
      if (v6 == 47)
      {
        v7 = 47;
        goto LABEL_6;
      }
    }
LABEL_32:
    v7 = *v3;
    goto LABEL_6;
  }
}

void JSONWorker::FixString(uint64_t a1@<X0>, _BYTE *a2@<X1>, std::string *a3@<X8>)
{
  std::string::value_type *v4;
  std::string::size_type v6;
  uint64_t v7;
  std::string::value_type *v8;
  const char **v9;
  int v10;
  std::string::value_type *v11;

  v4 = (std::string::value_type *)a1;
  *a2 = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 23) >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  std::string::reserve(a3, v6);
  if (v4[23] < 0)
  {
    v8 = v4;
    v4 = *(std::string::value_type **)v4;
    v7 = *((_QWORD *)v8 + 1);
  }
  else
  {
    v7 = v4[23];
  }
  v9 = (const char **)&v4[v7];
  v11 = v4;
  if (v4 != &v4[v7])
  {
    do
    {
      v10 = *v4;
      if (v10 == 92)
      {
        *a2 = 1;
        v11 = v4 + 1;
        JSONWorker::SpecialChar(&v11, v9, a3);
        v4 = v11;
      }
      else
      {
        std::string::push_back(a3, v10);
      }
      v11 = ++v4;
    }
    while (v4 != (std::string::value_type *)v9);
  }
}

void sub_2183821F8(void *a1)
{
  std::string *v1;

  std::string::~string(v1);
  __cxa_call_unexpected(a1);
}

void JSONWorker::toUTF8(JSONWorker *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v2;
  std::string::value_type v4;
  std::string::value_type v5;

  v2 = this;
  std::string::basic_string[abi:ne180100]<0>(a2, "\\u");
  std::string::append(a2, "00");
  if (((v2 >> 4) | 0x30) <= 0x39)
    v4 = (v2 >> 4) | 0x30;
  else
    v4 = (v2 >> 4) + 55;
  std::string::push_back(a2, v4);
  if ((v2 & 0xF | 0x30) <= 0x39)
    v5 = v2 & 0xF | 0x30;
  else
    v5 = (v2 & 0xF) + 55;
  std::string::push_back(a2, v5);
}

void sub_21838228C(void *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_call_unexpected(a1);
}

void JSONWorker::UnfixString(uint64_t a1, char a2, std::string *this)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  const std::string::value_type *v10;
  std::string *p_p;
  std::string::size_type size;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string __p;

  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = (char)v4;
  if ((a2 & 1) != 0)
  {
    v6 = (_BYTE *)(a1 + v4);
    if (v5 >= 0)
      v7 = v6;
    else
      v7 = (_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
    if (v5 >= 0)
      v8 = (_BYTE *)a1;
    else
      v8 = *(_BYTE **)a1;
    while (v8 != v7)
    {
      v9 = (char)*v8;
      if (v9 <= 33)
      {
        switch(*v8)
        {
          case 8:
            v10 = "\\b";
            goto LABEL_22;
          case 9:
            v10 = "\\t";
            goto LABEL_22;
          case 0xA:
            v10 = "\\n";
            goto LABEL_22;
          case 0xC:
            v10 = "\\f";
            goto LABEL_22;
          case 0xD:
            v10 = "\\r";
            goto LABEL_22;
          default:
            goto LABEL_25;
        }
      }
      switch(v9)
      {
        case '\\':
          v10 = "\\\\";
          break;
        case '/':
          v10 = "\\/";
          break;
        case '"':
          v10 = "\\\"";
          break;
        default:
LABEL_25:
          if ((v9 - 127) <= 0xA0u)
          {
            JSONWorker::toUTF8((JSONWorker *)*v8, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            std::string::append(this, (const std::string::value_type *)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            std::string::push_back(this, v9);
          }
          goto LABEL_23;
      }
LABEL_22:
      std::string::append(this, v10);
LABEL_23:
      ++v8;
    }
  }
  else
  {
    if ((v4 & 0x80u) == 0)
      v13 = (const std::string::value_type *)a1;
    else
      v13 = *(const std::string::value_type **)a1;
    if ((v4 & 0x80u) == 0)
      v14 = *(unsigned __int8 *)(a1 + 23);
    else
      v14 = *(_QWORD *)(a1 + 8);
    std::string::append(this, v13, v14);
  }
}

void sub_218382470(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_call_unexpected(a1);
}

void JSONWorker::DoArray(internalJSONNode *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t Next;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  std::string __p;

  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)a2 == 91)
    {
      v4 = *(unsigned __int8 *)(a2 + 23);
      goto LABEL_6;
    }
LABEL_30:
    internalJSONNode::Nullify(this);
    return;
  }
  if (**(_BYTE **)a2 != 91)
    goto LABEL_30;
  v4 = *(_QWORD *)(a2 + 8);
LABEL_6:
  if (v4 < 3)
    return;
  memset(&__p, 0, sizeof(__p));
  v5 = 1;
  Next = JSONWorker::FindNextRelevant<(char)44>((uint64_t *)a2, 1);
  if (Next == -1)
  {
LABEL_18:
    v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = a2;
    else
      v11 = *(_QWORD *)a2;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 8);
    std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__p, (std::string::value_type *)(v11 + v5), (std::string::value_type *)(v11 + v10 - 1), v10 - 1 - v5);
    if (JSONWorker::FindNextRelevant<(char)58>((uint64_t *)&__p, 0) == -1)
    {
      if ((v12 & 1) == 0
      {
        jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
        qword_254FD3E88 = 0;
        __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_217E69000);
      }
      JSONWorker::NewNode((uint64_t)this, (uint64_t)&jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &__p, 1);
      goto LABEL_26;
    }
  }
  else
  {
    v7 = Next;
    v5 = 1;
    while (1)
    {
      v8 = *(char *)(a2 + 23) >= 0 ? a2 : *(_QWORD *)a2;
      std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__p, (std::string::value_type *)(v8 + v5), (std::string::value_type *)(v8 + v7), v7 - v5);
      if (JSONWorker::FindNextRelevant<(char)58>((uint64_t *)&__p, 0) != -1)
        break;
      if ((v9 & 1) == 0
      {
        jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
        qword_254FD3E88 = 0;
        __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_217E69000);
      }
      JSONWorker::NewNode((uint64_t)this, (uint64_t)&jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &__p, 1);
      v5 = v7 + 1;
      v7 = JSONWorker::FindNextRelevant<(char)44>((uint64_t *)a2, v7 + 1);
      if (v7 == -1)
        goto LABEL_18;
    }
  }
  internalJSONNode::Nullify(this);
LABEL_26:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2183826E0(void *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::string::~string((std::string *)&a10);
  __cxa_call_unexpected(a1);
}

uint64_t JSONWorker::FindNextRelevant<(char)44>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  char *v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = (char)v2;
  v4 = (char *)a1 + v2;
  v5 = v3 < 0;
  if (v3 >= 0)
    v6 = v4;
  else
    v6 = (char *)(*a1 + a1[1]);
  if (v5)
    v7 = *a1;
  else
    v7 = (uint64_t)a1;
  v8 = (char *)(v7 + a2);
  if ((char *)(v7 + a2) == v6)
    return -1;
  result = -1;
  while (1)
  {
    v10 = *v8;
    if (v10 == 44)
      return (uint64_t)&v8[-v7];
    if (v10 > 92)
    {
      if (v10 == 123)
      {
        v17 = 1;
        while (1)
        {
          v19 = *++v8;
          v18 = v19;
          if (v19 <= 122)
          {
            if (v18 == 34)
            {
              while (1)
              {
                v22 = *++v8;
                v21 = v22;
                if (v22 == 34)
                  break;
                if (!v21)
                  return -1;
              }
            }
            else if (!v18)
            {
              return -1;
            }
          }
          else
          {
            v20 = v17 - 1;
            if (v18 != 125)
              v20 = v17;
            if (v18 == 123)
              ++v17;
            else
              v17 = v20;
          }
          if (!v17)
            goto LABEL_49;
        }
      }
      if (v10 == 93 || v10 == 125)
        return result;
    }
    else if (v10 == 34)
    {
      while (1)
      {
        v24 = *++v8;
        v23 = v24;
        if (v24 == 34)
          break;
        if (!v23)
          return -1;
      }
    }
    else if (v10 == 91)
    {
      v11 = 1;
      do
      {
        v13 = *++v8;
        v12 = v13;
        if (v13 <= 90)
        {
          if (v12 == 34)
          {
            while (1)
            {
              v16 = *++v8;
              v15 = v16;
              if (v16 == 34)
                break;
              if (!v15)
                return -1;
            }
          }
          else if (!v12)
          {
            return -1;
          }
        }
        else
        {
          v14 = v11 - 1;
          if (v12 != 93)
            v14 = v11;
          if (v12 == 91)
            ++v11;
          else
            v11 = v14;
        }
      }
      while (v11);
    }
LABEL_49:
    if (++v8 == v6)
      return -1;
  }
}

uint64_t JSONWorker::FindNextRelevant<(char)58>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  char *v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = (char)v2;
  v4 = (char *)a1 + v2;
  v5 = v3 < 0;
  if (v3 >= 0)
    v6 = v4;
  else
    v6 = (char *)(*a1 + a1[1]);
  if (v5)
    v7 = *a1;
  else
    v7 = (uint64_t)a1;
  v8 = (char *)(v7 + a2);
  if ((char *)(v7 + a2) == v6)
    return -1;
  result = -1;
  while (1)
  {
    v10 = *v8;
    if (v10 == 58)
      return (uint64_t)&v8[-v7];
    if (v10 > 92)
    {
      if (v10 == 123)
      {
        v17 = 1;
        while (1)
        {
          v19 = *++v8;
          v18 = v19;
          if (v19 <= 122)
          {
            if (v18 == 34)
            {
              while (1)
              {
                v22 = *++v8;
                v21 = v22;
                if (v22 == 34)
                  break;
                if (!v21)
                  return -1;
              }
            }
            else if (!v18)
            {
              return -1;
            }
          }
          else
          {
            v20 = v17 - 1;
            if (v18 != 125)
              v20 = v17;
            if (v18 == 123)
              ++v17;
            else
              v17 = v20;
          }
          if (!v17)
            goto LABEL_49;
        }
      }
      if (v10 == 93 || v10 == 125)
        return result;
    }
    else if (v10 == 34)
    {
      while (1)
      {
        v24 = *++v8;
        v23 = v24;
        if (v24 == 34)
          break;
        if (!v23)
          return -1;
      }
    }
    else if (v10 == 91)
    {
      v11 = 1;
      do
      {
        v13 = *++v8;
        v12 = v13;
        if (v13 <= 90)
        {
          if (v12 == 34)
          {
            while (1)
            {
              v16 = *++v8;
              v15 = v16;
              if (v16 == 34)
                break;
              if (!v15)
                return -1;
            }
          }
          else if (!v12)
          {
            return -1;
          }
        }
        else
        {
          v14 = v11 - 1;
          if (v12 != 93)
            v14 = v11;
          if (v12 == 91)
            ++v11;
          else
            v11 = v14;
        }
      }
      while (v11);
    }
LABEL_49:
    if (++v8 == v6)
      return -1;
  }
}

void JSONWorker::NewNode(uint64_t a1, uint64_t a2, const std::string *a3, int a4)
{
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  std::string *v13;
  std::string::size_type v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  const internalJSONNode *v19;
  std::string **v20;
  std::string *v21;
  unint64_t size;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  std::string __p;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  if (a4)
    v8 = (char *)a3;
  else
    v8 = (char *)a2;
  if (v8[23] >= 0)
    v9 = v8;
  else
    v9 = *(char **)v8;
  if (*v9 == 35)
  {
    while (1)
    {
      v11 = 0;
      do
        v12 = v9[++v11];
      while (v12 != 35);
      if (v11 != 1)
      {
        std::string::basic_string[abi:ne180100](&__p, v9 + 1, v11 - 1);
        v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::string::append(&__str, (const std::string::value_type *)v13, v14);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v15 = &v9[v11];
      v16 = &v9[v11];
      v17 = v16[1];
      v9 = v16 + 1;
      if (v17 != 35)
        break;
      std::string::push_back(&__str, 10);
    }
    v9 = v15 + 1;
    if (a4)
      goto LABEL_9;
  }
  else if (a4)
  {
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(&__p, v9);
    v10 = internalJSONNode::newInternal(a2, &__p);
    goto LABEL_25;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v9 + 1);
  v10 = internalJSONNode::newInternal((uint64_t)&__p, a3);
LABEL_25:
  v18 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20 = (std::string **)JSONNode::newJSONNode(v18);
  v21 = *v20;
  size = (*v20)[3].__r_.__value_.__l.__size_;
  if (size >= 2)
  {
    v21[3].__r_.__value_.__l.__size_ = size - 1;
    internalJSONNode::newInternal((internalJSONNode *)v21, v19);
  }
  *v20 = v21;
  std::string::operator=(v21 + 4, &__str);
  v23 = *(_DWORD **)(a1 + 120);
  jsonChildren::inc(v23);
  v24 = *(_QWORD *)v23;
  v25 = v23[2];
  v23[2] = v25 + 1;
  *(_QWORD *)(v24 + 8 * v25) = v20;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_218382B24(void *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::string *a7, uint64_t a8, void *__pa, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::string::~string((std::string *)&a12);
  __cxa_call_unexpected(__p);
}

void JSONWorker::DoNode(internalJSONNode *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t Next;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string __p;
  std::string v17;

  if (*(char *)(a2 + 23) < 0)
  {
    if (**(_BYTE **)a2 != 123)
      goto LABEL_34;
    v4 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    if (*(_BYTE *)a2 != 123)
      goto LABEL_34;
    v4 = *(unsigned __int8 *)(a2 + 23);
  }
  if (v4 < 3)
    return;
  Next = JSONWorker::FindNextRelevant<(char)58>((uint64_t *)a2, 1);
  if (Next == -1)
  {
LABEL_34:
    internalJSONNode::Nullify(this);
    return;
  }
  v6 = Next;
  if (*(char *)(a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v17, (char *)(v7 + 1), (char *)(v7 + Next - 1), Next - 2);
  v8 = JSONWorker::FindNextRelevant<(char)44>((uint64_t *)a2, v6);
  if (v8 == -1)
  {
LABEL_23:
    v14 = *(unsigned __int8 *)(a2 + 23);
    if ((v14 & 0x80u) == 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a2 + 8);
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, (char *)(v15 + v6 + 1), (char *)(v15 + v14 - 1), v14 - 1 - (v6 + 1));
    JSONWorker::NewNode((uint64_t)this, (uint64_t)&v17, &__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = v8;
    while (1)
    {
      if (*(char *)(a2 + 23) >= 0)
        v10 = a2;
      else
        v10 = *(_QWORD *)a2;
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, (char *)(v10 + v6 + 1), (char *)(v10 + v9), v9 - (v6 + 1));
      JSONWorker::NewNode((uint64_t)this, (uint64_t)&v17, &__p, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 = v9 + 1;
      v12 = JSONWorker::FindNextRelevant<(char)58>((uint64_t *)a2, v11);
      if (v12 == -1)
        break;
      v6 = v12;
      if (*(char *)(a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = *(_QWORD *)a2;
      std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v17, (std::string::value_type *)(v13 + v11), (std::string::value_type *)(v13 + v12 - 1), v12 - 1 - v11);
      v9 = JSONWorker::FindNextRelevant<(char)44>((uint64_t *)a2, v6);
      if (v9 == -1)
        goto LABEL_23;
    }
    internalJSONNode::Nullify(this);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_218382D64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_call_unexpected(a1);
}

uint64_t _GLOBAL__sub_I_JSONWorker_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

std::string *internalJSONNode::WriteName(std::string *result, int a2, char a3, std::string *this)
{
  uint64_t v6;
  const std::string::value_type *v7;

  if ((a3 & 1) == 0)
  {
    v6 = (uint64_t)result;
    std::string::append(this, "\"");
    JSONWorker::UnfixString(v6 + 8, *(_BYTE *)(v6 + 32), this);
    if (a2)
      v7 = "\" : ";
    else
      v7 = "\":";
    return std::string::append(this, v7);
  }
  return result;
}

void internalJSONNode::WriteChildren(jsonSingletonNEW_LINE *a1, size_t a2, std::string *a3)
{
  uint64_t v3;
  uint64_t v4;
  size_t v6;
  void *Value;
  jsonSingletonNEW_LINE *v9;
  uint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string *p_p;
  std::string::size_type size;
  char *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string v23;
  std::string v24;
  std::string __p;

  v3 = *((_QWORD *)a1 + 15);
  v4 = *(unsigned int *)(v3 + 8);
  if (!(_DWORD)v4)
    return;
  v6 = a2;
  memset(&__p, 0, sizeof(__p));
  if ((_DWORD)a2 == -1)
  {
    v11 = *(_QWORD ***)v3;
    v12 = *(_QWORD *)v3 + 8 * v4;
  }
  else
  {
    Value = jsonSingletonNEW_LINE::getValue(a1);
    v6 = (v6 + 1);
    makeIndent(v6, &v23);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v23, (uint64_t)Value, &v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v24;
    *((_BYTE *)&v24.__r_.__value_.__s + 23) = 0;
    v24.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    v10 = *((_QWORD *)a1 + 15);
    v4 = *(unsigned int *)(v10 + 8);
    if (!(_DWORD)v4)
      goto LABEL_21;
    v11 = *(_QWORD ***)v10;
    v12 = *(_QWORD *)v10 + 8 * v4;
  }
  v13 = 0;
  v14 = (v4 - 1);
  do
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(a3, (const std::string::value_type *)p_p, size);
    v9 = (jsonSingletonNEW_LINE *)internalJSONNode::Write(**v11, v6, *(unsigned __int8 *)a1 == 4, a3);
    if (v13 < v14)
      std::string::push_back(a3, 44);
    ++v11;
    ++v13;
  }
  while (v11 != (_QWORD **)v12);
LABEL_21:
  if ((_DWORD)v6 != -1)
  {
    v17 = (char *)jsonSingletonNEW_LINE::getValue(v9);
    v18 = v17[23];
    if (v18 >= 0)
      v19 = v17;
    else
      v19 = *(const std::string::value_type **)v17;
    if (v18 >= 0)
      v20 = v17[23];
    else
      v20 = *((_QWORD *)v17 + 1);
    std::string::append(a3, v19, v20);
    makeIndent((v6 - 1), &v24);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v24;
    else
      v21 = (std::string *)v24.__r_.__value_.__r.__words[0];
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    else
      v22 = v24.__r_.__value_.__l.__size_;
    std::string::append(a3, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_218383010(void *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, std::string *a13, uint64_t a14, void *__pa, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0)
    operator delete(__pa);
  std::string::~string((std::string *)&a21);
  __cxa_call_unexpected(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void *jsonSingletonNEW_LINE::getValue(jsonSingletonNEW_LINE *this)
{
  unsigned __int8 v1;

  {
    jsonSingletonNEW_LINE::jsonSingletonNEW_LINE((jsonSingletonNEW_LINE *)&jsonSingletonNEW_LINE::getValue(void)::single);
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonNEW_LINE::getValue(void)::single, &dword_217E69000);
  }
  return &jsonSingletonNEW_LINE::getValue(void)::single;
}

void makeIndent(size_t __len@<X0>, std::string *a2@<X8>)
{
  unsigned int v3;
  unsigned __int8 v4;
  uint64_t *v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  char *v8;
  unsigned int v9;
  unsigned __int8 v10;

  if ((_DWORD)__len == -1)
  {
    v5 = (uint64_t *)&jsonSingletonEMPTY_JSON_STRING::getValue(void)::single;
    if ((v6 & 1) == 0
    {
      jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
      qword_254FD3E88 = 0;
      __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_217E69000);
    }
  }
  else
  {
    v3 = __len;
    if (__len > 7)
    {
      if (__len > 0xF)
      {
        if (__len > 0x17)
        {
          std::string::basic_string[abi:ne180100](a2, __len, 9);
          return;
        }
        {
          std::string::basic_string[abi:ne180100]<0>(makeIndent::cache, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[24], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[48], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[72], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[96], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[120], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[144], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[168], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_38, 0, &dword_217E69000);
        }
        v8 = makeIndent::cache;
        v9 = v3 - 16;
      }
      else
      {
        {
          std::string::basic_string[abi:ne180100]<0>(makeIndent::cache, "\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[24], "\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[48], "\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[72], "\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[96], "\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[120], "\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[144], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[168], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_29, 0, &dword_217E69000);
        }
        v8 = makeIndent::cache;
        v9 = v3 - 8;
      }
      v5 = (uint64_t *)&v8[24 * v9];
    }
    else
    {
      {
        makeIndent::cache[0] = 0;
        unk_254FD4840 = 0;
        qword_254FD4848 = 0;
        std::string::basic_string[abi:ne180100]<0>(qword_254FD4850, "\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_254FD4850[3], "\t\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_254FD4850[6], "\t\t\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_254FD4850[9], "\t\t\t\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_254FD4850[12], "\t\t\t\t\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_254FD4850[15], "\t\t\t\t\t\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_254FD4850[18], "\t\t\t\t\t\t\t");
        __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_2, 0, &dword_217E69000);
      }
      v5 = &makeIndent::cache[3 * v3];
    }
  }
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v5, v5[1]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    a2->__r_.__value_.__r.__words[2] = v5[2];
  }
}

void sub_2183834F0(void *a1)
{
  __cxa_call_unexpected(a1);
}

void internalJSONNode::Write(std::string *a1, size_t a2, char a3, std::string *a4)
{
  char *v8;
  std::string::pointer data;
  const std::string::value_type *v10;

  internalJSONNode::WriteComment((uint64_t)a1, a2, a4);
  if ((_DWORD)a2 == -1 && !a1[3].__r_.__value_.__s.__data_[16])
  {
    internalJSONNode::WriteName(a1, 0, a3, a4);
LABEL_14:
    internalJSONNode::DumpRawString((uint64_t)a1, a4);
  }
  else
  {
    internalJSONNode::WriteName(a1, a2 != -1, a3, a4);
    switch(a1->__r_.__value_.__s.__data_[0])
    {
      case 0:
      case 2:
      case 3:
        if (a1[2].__r_.__value_.__s.__data_[15] < 0)
        {
          v8 = (char *)a1[1].__r_.__value_.__r.__words[2];
          data = a1[2].__r_.__value_.__l.__data_;
        }
        else
        {
          v8 = &a1[1].__r_.__value_.__s.__data_[16];
          data = (std::string::pointer)a1[2].__r_.__value_.__s.__data_[15];
        }
        std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(a4, v8, &data[(_QWORD)v8]);
        return;
      case 4:
        internalJSONNode::Fetch((internalJSONNode *)a1);
        std::string::append(a4, "[");
        internalJSONNode::WriteChildren((jsonSingletonNEW_LINE *)a1, a2, a4);
        v10 = "]";
        goto LABEL_12;
      case 5:
        internalJSONNode::Fetch((internalJSONNode *)a1);
        std::string::append(a4, "{");
        internalJSONNode::WriteChildren((jsonSingletonNEW_LINE *)a1, a2, a4);
        v10 = "}";
        goto LABEL_12;
      default:
        if (!a1[3].__r_.__value_.__s.__data_[16])
          goto LABEL_14;
        std::string::append(a4, "\"");
        JSONWorker::UnfixString((uint64_t)&a1[1].__r_.__value_.__r.__words[2], a1[2].__r_.__value_.__s.__data_[16], a4);
        v10 = "\"";
LABEL_12:
        std::string::append(a4, v10);
        break;
    }
  }
}

void internalJSONNode::WriteComment(uint64_t a1, size_t a2, std::string *a3)
{
  char *v6;
  jsonSingletonNEW_LINE *v7;
  void *Value;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  char *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  uint64_t v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  void *v20;
  std::string *p_p;
  std::string::size_type v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  std::string v35;
  std::string __p;
  std::string v37;

  if ((_DWORD)a2 != -1)
  {
    if (*(char *)(a1 + 119) < 0)
    {
      if (!*(_QWORD *)(a1 + 104))
        return;
    }
    else if (!*(_BYTE *)(a1 + 119))
    {
      return;
    }
    v6 = (char *)(a1 + 96);
    v7 = (jsonSingletonNEW_LINE *)std::string::find((const std::string *)(a1 + 96), 10, 0);
    Value = jsonSingletonNEW_LINE::getValue(v7);
    makeIndent(a2, &__p);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (uint64_t)Value, &v37);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v37;
    else
      v9 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      size = v37.__r_.__value_.__l.__size_;
    if (v7 == (jsonSingletonNEW_LINE *)-1)
    {
      v11 = std::string::append(a3, (const std::string::value_type *)v9, size);
      v12 = (char *)jsonSingletonSINGLELINE_COMMENT::getValue((jsonSingletonSINGLELINE_COMMENT *)v11);
      v13 = v12[23];
      if (v13 >= 0)
        v14 = v12;
      else
        v14 = *(const std::string::value_type **)v12;
      if (v13 >= 0)
        v15 = v12[23];
      else
        v15 = *((_QWORD *)v12 + 1);
      std::string::append(a3, v14, v15);
      if (*(char *)(a1 + 119) < 0)
      {
        v6 = *(char **)(a1 + 96);
        v16 = *(_QWORD *)(a1 + 104);
      }
      else
      {
        v16 = *(unsigned __int8 *)(a1 + 119);
      }
      std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(a3, v6, &v6[v16]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v37;
      else
        v17 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      else
        v18 = v37.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)v17, v18);
    }
    else
    {
      v19 = std::string::append(a3, (const std::string::value_type *)v9, size);
      v20 = jsonSingletonNEW_LINE::getValue((jsonSingletonNEW_LINE *)v19);
      makeIndent((a2 + 1), &v35);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v35, (uint64_t)v20, &__p);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      std::string::append(a3, "/*");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v22 = __p.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)p_p, v22);
      v23 = 0;
      if (!v7)
        goto LABEL_48;
      while (v7 != (jsonSingletonNEW_LINE *)-1)
      {
        v24 = a1 + 96;
        if (*(char *)(a1 + 119) < 0)
          v24 = *(_QWORD *)v6;
        if (*((_BYTE *)v7 + v24 - 1) == 13)
          v7 = (jsonSingletonNEW_LINE *)((char *)v7 - 1);
        do
        {
LABEL_48:
          v25 = a1 + 96;
          if (*(char *)(a1 + 119) < 0)
            v25 = *(_QWORD *)v6;
          std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(a3, &v23[v25], (char *)v7 + v25);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &__p;
          else
            v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v27 = __p.__r_.__value_.__l.__size_;
          std::string::append(a3, (const std::string::value_type *)v26, v27);
          v28 = a1 + 96;
          if (*(char *)(a1 + 119) < 0)
            v28 = *(_QWORD *)v6;
          if (*((_BYTE *)v7 + v28) == 13)
            v29 = 2;
          else
            v29 = 1;
          v23 = (char *)v7 + v29;
          v7 = (jsonSingletonNEW_LINE *)std::string::find((const std::string *)(a1 + 96), 10, (std::string::size_type)v7 + v29);
        }
        while (!v7);
      }
      if (*(char *)(a1 + 119) < 0)
      {
        v6 = *(char **)(a1 + 96);
        v30 = *(_QWORD *)(a1 + 104);
      }
      else
      {
        v30 = *(unsigned __int8 *)(a1 + 119);
      }
      std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(a3, &v23[(_QWORD)v6], &v6[v30]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v37;
      else
        v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      else
        v32 = v37.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)v31, v32);
      std::string::append(a3, "*/");
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v37;
      else
        v33 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      else
        v34 = v37.__r_.__value_.__l.__size_;
      std::string::append(a3, (const std::string::value_type *)v33, v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_2183839DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  __cxa_call_unexpected(a1);
}

void *jsonSingletonSINGLELINE_COMMENT::getValue(jsonSingletonSINGLELINE_COMMENT *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    jsonSingletonSINGLELINE_COMMENT::jsonSingletonSINGLELINE_COMMENT((jsonSingletonSINGLELINE_COMMENT *)&jsonSingletonSINGLELINE_COMMENT::getValue(void)::single);
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonSINGLELINE_COMMENT::getValue(void)::single, &dword_217E69000);
  }
  return &jsonSingletonSINGLELINE_COMMENT::getValue(void)::single;
}

void internalJSONNode::DumpRawString(uint64_t a1, std::string *this)
{
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  std::string::size_type v7;
  unsigned __int8 v8;
  void **v9;
  std::string::size_type v10;
  _BYTE *p_p;
  std::string::size_type v12;
  void **v13;
  std::string::size_type v14;
  void *__p;
  std::string::size_type v16;
  unsigned __int8 v17;

  if (used_ascii_one)
  {
    if (*(char *)(a1 + 63) < 0)
    {
      v3 = *(char **)(a1 + 40);
      v4 = *(_QWORD *)(a1 + 48);
    }
    else
    {
      v3 = (char *)(a1 + 40);
      v4 = *(unsigned __int8 *)(a1 + 63);
    }
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, v3, &v3[v4], v4);
    v7 = v17;
    v8 = v17;
    v9 = (void **)__p;
    v10 = v16;
    if ((v17 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v17 & 0x80u) == 0)
      v12 = v17;
    else
      v12 = v16;
    if (v12)
    {
      do
      {
        if (*p_p == 1)
          *p_p = 34;
        ++p_p;
        --v12;
      }
      while (v12);
      v7 = v17;
      v9 = (void **)__p;
      v10 = v16;
      v8 = v17;
    }
    if ((v8 & 0x80u) == 0)
      v13 = &__p;
    else
      v13 = v9;
    if ((v8 & 0x80u) == 0)
      v14 = v7;
    else
      v14 = v10;
    std::string::append(this, (const std::string::value_type *)v13, v14);
    if ((char)v17 < 0)
      operator delete(__p);
  }
  else
  {
    if (*(char *)(a1 + 63) < 0)
    {
      v5 = *(char **)(a1 + 40);
      v6 = *(_QWORD *)(a1 + 48);
    }
    else
    {
      v5 = (char *)(a1 + 40);
      v6 = *(unsigned __int8 *)(a1 + 63);
    }
    std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(this, v5, &v5[v6]);
  }
}

void sub_218383BB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_call_unexpected(a1);
}

void jsonSingletonNEW_LINE::jsonSingletonNEW_LINE(jsonSingletonNEW_LINE *this)
{
  std::string::basic_string[abi:ne180100]<0>(this, "\n");
}

void jsonSingletonSINGLELINE_COMMENT::jsonSingletonSINGLELINE_COMMENT(jsonSingletonSINGLELINE_COMMENT *this)
{
  std::string::basic_string[abi:ne180100]<0>(this, "//");
}

void OUTLINED_FUNCTION_0_10()
{
  uint64_t v0;

  operator delete(*(void **)(v0 - 24));
}

void __cxx_global_array_dtor_2()
{
  uint64_t i;

  for (i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(makeIndent::cache[i + 23]) < 0)
      operator delete((void *)makeIndent::cache[i + 21]);
  }
}

void __cxx_global_array_dtor_29()
{
  uint64_t i;

  for (i = 0; i != -192; i -= 24)
  {
    if (makeIndent::cache[i + 191] < 0)
      operator delete(*(void **)&makeIndent::cache[i + 168]);
  }
}

void __cxx_global_array_dtor_38()
{
  uint64_t i;

  for (i = 0; i != -192; i -= 24)
  {
    if (makeIndent::cache[i + 191] < 0)
      operator delete(*(void **)&makeIndent::cache[i + 168]);
  }
}

uint64_t _GLOBAL__sub_I_JSONWriter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void internalJSONNode::internalJSONNode(internalJSONNode *this, const internalJSONNode *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  const internalJSONNode *v9;
  uint64_t v10;
  uint64_t v11;
  internalJSONNode ***v12;
  uint64_t v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  internalJSONNode *v18;
  uint64_t v19;
  internalJSONNode *v20;

  *(_BYTE *)this = *(_BYTE *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)this + 10) = 1;
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 6);
    *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)this + 6) = v6;
  }
  *((_QWORD *)this + 15) = 0;
  if ((*(_BYTE *)this & 0xFE) == 4)
  {
    v7 = operator new();
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *((_QWORD *)this + 15) = v7;
    v8 = *(unsigned int *)(*((_QWORD *)a2 + 15) + 8);
    if ((_DWORD)v8)
    {
      *(_DWORD *)(v7 + 12) = v8;
      *(_QWORD *)v7 = malloc_type_malloc(8 * v8, 0x2004093837F09uLL);
      v10 = *((_QWORD *)a2 + 15);
      v11 = *(unsigned int *)(v10 + 8);
      if ((_DWORD)v11)
      {
        v12 = *(internalJSONNode ****)v10;
        v13 = 8 * v11;
        do
        {
          v14 = (_DWORD *)*((_QWORD *)this + 15);
          JSONNode::duplicate(*v12, v9, &v20);
          v15 = JSONNode::newJSONNode((uint64_t *)&v20);
          jsonChildren::inc(v14);
          v16 = *(_QWORD *)v14;
          v17 = v14[2];
          v14[2] = v17 + 1;
          *(_QWORD *)(v16 + 8 * v17) = v15;
          v18 = v20;
          if (v20)
          {
            v19 = *((_QWORD *)v20 + 10) - 1;
            *((_QWORD *)v20 + 10) = v19;
            if (!v19)
            {
              internalJSONNode::~internalJSONNode(v18, v9);
              MEMORY[0x219A19A08]();
            }
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
    }
  }
}

void sub_218383F1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void **v11;
  void **v12;

  if (*(char *)(v10 + 63) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 31) < 0)
    operator delete(*v11);
  __cxa_call_unexpected(a1);
}

void JSONNode::~JSONNode(internalJSONNode **this, JSONNode *a2)
{
  internalJSONNode *v2;
  uint64_t v3;

  v2 = *this;
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 10) - 1;
    *((_QWORD *)v2 + 10) = v3;
    if (!v3)
    {
      internalJSONNode::~internalJSONNode(v2, a2);
      MEMORY[0x219A19A08]();
    }
  }
}

std::string *internalJSONNode::Nullify(internalJSONNode *this)
{
  unsigned __int8 v2;
  std::string *result;

  *(_BYTE *)this = 0;
  {
    jsonSingletonCONST_NULL::jsonSingletonCONST_NULL((jsonSingletonCONST_NULL *)&jsonSingletonCONST_NULL::getValue(void)::single);
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonCONST_NULL::getValue(void)::single, &dword_217E69000);
  }
  result = std::string::operator=((std::string *)((char *)this + 40), (const std::string *)&jsonSingletonCONST_NULL::getValue(void)::single);
  *((_BYTE *)this + 88) = 1;
  return result;
}

uint64_t internalJSONNode::internalJSONNode(uint64_t a1, uint64_t a2, const std::string *a3)
{
  unsigned __int8 v5;
  std::string::size_type size;
  int v7;
  BOOL v8;
  const std::string *v9;
  std::string::size_type v10;
  int v11;
  int v12;
  _QWORD *v13;
  unsigned __int8 v14;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned __int8 v19;
  uint64_t v20;
  std::string::size_type v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 v24;
  uint64_t v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;

  *(_BYTE *)a1 = 0;
  JSONWorker::FixString(a2, (_BYTE *)(a1 + 32), (std::string *)(a1 + 8));
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_2186CF1A0;
  *(_BYTE *)(a1 + 88) = 0;
  {
    jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
    qword_254FD3E88 = 0;
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_217E69000);
  }
  if (SHIBYTE(qword_254FD3E88) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), (const std::string::value_type *)jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, *((std::string::size_type *)&jsonSingletonEMPTY_JSON_STRING::getValue(void)::single + 1));
  }
  else
  {
    *(_OWORD *)(a1 + 96) = jsonSingletonEMPTY_JSON_STRING::getValue(void)::single;
    *(_QWORD *)(a1 + 112) = qword_254FD3E88;
  }
  *(_QWORD *)(a1 + 120) = 0;
  size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a3->__r_.__value_.__l.__size_;
  if (!size)
  {
LABEL_88:
    *(_BYTE *)a1 = 0;
    goto LABEL_89;
  }
  std::string::operator=((std::string *)(a1 + 40), a3);
  v7 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  v8 = v7 < 0;
  if (v7 >= 0)
    v9 = a3;
  else
    v9 = (const std::string *)a3->__r_.__value_.__r.__words[0];
  if (v8)
    v10 = a3->__r_.__value_.__l.__size_;
  else
    v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  v11 = v9->__r_.__value_.__s.__data_[0];
  v12 = v9->__r_.__value_.__s.__data_[v10 - 1];
  if (v11 <= 90)
  {
    if (v11 > 77)
    {
      if (v11 != 78)
      {
        if (v11 != 84)
          goto LABEL_79;
        goto LABEL_44;
      }
      goto LABEL_59;
    }
    if (v11 == 34)
    {
      if (v12 != 34)
        goto LABEL_91;
      v29 = 1;
LABEL_81:
      *(_BYTE *)a1 = v29;
      goto LABEL_82;
    }
    if (v11 != 70)
    {
LABEL_79:
      if (!NumberToString::isNumeric((uint64_t)a3))
        goto LABEL_91;
      v29 = 2;
      goto LABEL_81;
    }
LABEL_27:
    {
      jsonSingletonCONST_FALSE::jsonSingletonCONST_FALSE((jsonSingletonCONST_FALSE *)&jsonSingletonCONST_FALSE::getValue(void)::single);
      __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonCONST_FALSE::getValue(void)::single, &dword_217E69000);
    }
    v15 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v15 & 0x80u) == 0)
      v16 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    else
      v16 = a3->__r_.__value_.__l.__size_;
    v17 = byte_254FD4AE7;
    if (byte_254FD4AE7 < 0)
      v17 = qword_254FD4AD8;
    if (v16 != v17)
      goto LABEL_91;
    if (byte_254FD4AE7 >= 0)
      v18 = &jsonSingletonCONST_FALSE::getValue(void)::single;
    else
      v18 = (uint64_t *)jsonSingletonCONST_FALSE::getValue(void)::single;
    if ((v15 & 0x80) != 0)
    {
      if (memcmp(a3->__r_.__value_.__l.__data_, v18, a3->__r_.__value_.__l.__size_))
        goto LABEL_91;
    }
    else if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
    {
      while (a3->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v18)
      {
        a3 = (const std::string *)((char *)a3 + 1);
        v18 = (uint64_t *)((char *)v18 + 1);
        if (!--v15)
          goto LABEL_84;
      }
      goto LABEL_91;
    }
LABEL_84:
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)a1 = 3;
LABEL_89:
    *(_BYTE *)(a1 + 88) = 1;
    return a1;
  }
  if (v11 <= 109)
  {
    if (v11 == 91)
    {
      if (v12 == 93)
      {
        *(_BYTE *)a1 = 4;
        v13 = (_QWORD *)operator new();
        goto LABEL_78;
      }
LABEL_91:
      internalJSONNode::Nullify((internalJSONNode *)a1);
      return a1;
    }
    if (v11 != 102)
      goto LABEL_79;
    goto LABEL_27;
  }
  if (v11 == 110)
  {
LABEL_59:
    {
      jsonSingletonCONST_NULL::jsonSingletonCONST_NULL((jsonSingletonCONST_NULL *)&jsonSingletonCONST_NULL::getValue(void)::single);
      __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonCONST_NULL::getValue(void)::single, &dword_217E69000);
    }
    v25 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v25 & 0x80u) == 0)
      v26 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    else
      v26 = a3->__r_.__value_.__l.__size_;
    v27 = byte_254FD4B07;
    if (byte_254FD4B07 < 0)
      v27 = qword_254FD4AF8;
    if (v26 != v27)
      goto LABEL_91;
    if (byte_254FD4B07 >= 0)
      v28 = &jsonSingletonCONST_NULL::getValue(void)::single;
    else
      v28 = (uint64_t *)jsonSingletonCONST_NULL::getValue(void)::single;
    if ((v25 & 0x80) != 0)
    {
      if (memcmp(a3->__r_.__value_.__l.__data_, v28, a3->__r_.__value_.__l.__size_))
        goto LABEL_91;
    }
    else if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
    {
      while (a3->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v28)
      {
        a3 = (const std::string *)((char *)a3 + 1);
        v28 = (uint64_t *)((char *)v28 + 1);
        if (!--v25)
          goto LABEL_88;
      }
      goto LABEL_91;
    }
    goto LABEL_88;
  }
  if (v11 == 116)
  {
LABEL_44:
    {
      jsonSingletonCONST_TRUE::jsonSingletonCONST_TRUE((jsonSingletonCONST_TRUE *)&jsonSingletonCONST_TRUE::getValue(void)::single);
      __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonCONST_TRUE::getValue(void)::single, &dword_217E69000);
    }
    v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v20 & 0x80u) == 0)
      v21 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    else
      v21 = a3->__r_.__value_.__l.__size_;
    v22 = byte_254FD4AC7;
    if (byte_254FD4AC7 < 0)
      v22 = qword_254FD4AB8;
    if (v21 != v22)
      goto LABEL_91;
    if (byte_254FD4AC7 >= 0)
      v23 = &jsonSingletonCONST_TRUE::getValue(void)::single;
    else
      v23 = (uint64_t *)jsonSingletonCONST_TRUE::getValue(void)::single;
    if ((v20 & 0x80) != 0)
    {
      if (memcmp(a3->__r_.__value_.__l.__data_, v23, a3->__r_.__value_.__l.__size_))
        goto LABEL_91;
    }
    else if (*((_BYTE *)&a3->__r_.__value_.__s + 23))
    {
      while (a3->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v23)
      {
        a3 = (const std::string *)((char *)a3 + 1);
        v23 = (uint64_t *)((char *)v23 + 1);
        if (!--v20)
          goto LABEL_86;
      }
      goto LABEL_91;
    }
LABEL_86:
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)a1 = 3;
    goto LABEL_89;
  }
  if (v11 != 123)
    goto LABEL_79;
  if (v12 != 125)
    goto LABEL_91;
  *(_BYTE *)a1 = 5;
  v13 = (_QWORD *)operator new();
LABEL_78:
  *v13 = 0;
  v13[1] = 0;
  *(_QWORD *)(a1 + 120) = v13;
LABEL_82:
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

void sub_218384560(void *a1)
{
  uint64_t v1;
  std::string *v2;
  std::string *v3;
  void **v4;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v4);
  std::string::~string(v3);
  std::string::~string(v2);
  __cxa_call_unexpected(a1);
}

BOOL NumberToString::isNumeric(uint64_t a1)
{
  _BOOL8 result;
  unint64_t v3;
  _BYTE *v4;
  char v5;
  _BYTE *v6;
  char v7;
  int v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;

  result = 0;
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (_BYTE *)a1;
  else
    v4 = *(_BYTE **)a1;
  v5 = 0;
  switch(*v4)
  {
    case '+':
    case '-':
      v12 = (char)v4[1];
      if (v12 <= 47)
      {
        if (!v4[1])
          return 0;
        result = 0;
        v5 = 0;
        if (v12 != 46)
          goto LABEL_5;
      }
      else
      {
        if (v12 == 101)
          return 0;
        result = 0;
        if (v12 != 69)
        {
          LOBYTE(result) = 0;
          v5 = 0;
          if (v12 == 48)
            ++v4;
          goto LABEL_5;
        }
      }
      return result;
    case '.':
      v5 = 0;
      LOBYTE(result) = 1;
      goto LABEL_5;
    case '0':
      v14 = v4 + 1;
      v13 = (char)v4[1];
      if (v13 <= 68)
      {
        if ((v13 - 49) < 7)
        {
          v15 = *(_QWORD *)(a1 + 8);
          if ((v3 & 0x80u) == 0)
            v15 = v3;
          if (v15 >= 2)
          {
            v16 = 0;
            v17 = v15 - 1;
            while (memchr("01234567", (char)v14[v16], 8uLL))
            {
              ++v16;
              result = 1;
              if (v17 == v16)
                return result;
            }
            return v16 == -2;
          }
          return 1;
        }
        result = 1;
        if (!v4[1])
          return result;
        if (v13 == 46)
        {
          v5 = 0;
          ++v4;
          goto LABEL_5;
        }
        return 0;
      }
      if (v13 != 69)
      {
        if (v13 == 120)
          return std::string::find_first_not_of[abi:ne180100]((uint64_t *)a1, "0123456789ABCDEFabcdef", 2uLL) == -1;
        if (v13 != 101)
          return 0;
      }
      result = 0;
      v19 = (char)v4[2];
      v4 += 2;
      v18 = v19;
      v5 = 1;
      if ((v19 - 48) < 0xA || v18 == 43 || v18 == 45)
      {
LABEL_5:
        v6 = v4 + 1;
        v7 = v4[1];
        if (v7)
        {
          while (1)
          {
            if ((v7 - 48) >= 0xA)
            {
              if (v7 == 101 || v7 == 69)
              {
                if ((v5 & 1) != 0)
                  return 0;
                v6 = v4 + 2;
                v10 = (char)v4[2];
                if ((v10 - 48) >= 0xA)
                {
                  if (v10 != 45 && v10 != 43)
                    return 0;
                  v11 = (char)v4[3];
                  if (v11 < 0 || (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v11 + 60) & 0x400) == 0)
                    return 0;
                }
                v5 = 1;
              }
              else
              {
                if (v7 != 46)
                  return 0;
                v9 = result | v5;
                v5 = 0;
                if ((v9 & 1) != 0)
                  return 0;
                LOBYTE(result) = 1;
              }
            }
            v4 = v6;
            v8 = *++v6;
            v7 = v8;
            if (!v8)
              return 1;
          }
        }
        return 1;
      }
      return result;
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      goto LABEL_5;
    default:
      return result;
  }
}

void internalJSONNode::~internalJSONNode(internalJSONNode *this, JSONNode *a2)
{
  internalJSONNode **v3;

  v3 = (internalJSONNode **)*((_QWORD *)this + 15);
  if (v3)
  {
    jsonChildren::~jsonChildren(v3, a2);
    MEMORY[0x219A19A08]();
  }
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void internalJSONNode::FetchString(internalJSONNode *this)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *__p[2];
  char v9;
  std::string v10;

  v2 = (void **)((char *)this + 40);
  v3 = *((unsigned __int8 *)this + 63);
  if (*((char *)this + 63) < 0)
  {
    v4 = *((_QWORD *)this + 6);
    if (!v4 || *(_BYTE *)*v2 != 34)
      goto LABEL_17;
  }
  else
  {
    if (!*((_BYTE *)this + 63) || *(_BYTE *)v2 != 34)
      goto LABEL_17;
    v4 = *((unsigned __int8 *)this + 63);
  }
  v5 = v4 - 1;
  if ((v3 & 0x80) != 0)
  {
    v7 = (char *)*v2;
    if (*((_BYTE *)*v2 + v5) == 34)
    {
      v6 = v7 + 1;
      v3 = *((_QWORD *)this + 6);
      goto LABEL_12;
    }
LABEL_17:
    internalJSONNode::Nullify(this);
    return;
  }
  if (*((_BYTE *)v2 + v5) != 34)
    goto LABEL_17;
  v6 = (char *)this + 41;
  v7 = (char *)this + 40;
LABEL_12:
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, v6, &v7[v3 - 1], &v7[v3 - 1] - v6);
  JSONWorker::FixString((uint64_t)__p, (_BYTE *)this + 64, &v10);
  if (*((char *)this + 63) < 0)
    operator delete(*v2);
  *(std::string *)v2 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v9 < 0)
    operator delete(__p[0]);
}

void internalJSONNode::FetchNode(internalJSONNode *this)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = (char *)this + 40;
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 63) && *v2 == 123)
    {
      v3 = *((unsigned __int8 *)this + 63);
      goto LABEL_7;
    }
LABEL_13:
    internalJSONNode::Nullify(this);
    return;
  }
  v3 = *((_QWORD *)this + 6);
  if (!v3 || **(_BYTE **)v2 != 123)
    goto LABEL_13;
LABEL_7:
  v4 = v3 - 1;
  v5 = (char *)this + 40;
  if ((*((_BYTE *)this + 63) & 0x80) != 0)
    v5 = *(char **)v2;
  if (v5[v4] != 125)
    goto LABEL_13;
  JSONWorker::DoNode(this, (uint64_t)v2);
  if (*((char *)this + 63) < 0)
  {
    **((_BYTE **)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    *((_BYTE *)this + 40) = 0;
    *((_BYTE *)this + 63) = 0;
  }
}

void internalJSONNode::FetchArray(internalJSONNode *this)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = (char *)this + 40;
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 63) && *v2 == 91)
    {
      v3 = *((unsigned __int8 *)this + 63);
      goto LABEL_7;
    }
LABEL_13:
    internalJSONNode::Nullify(this);
    return;
  }
  v3 = *((_QWORD *)this + 6);
  if (!v3 || **(_BYTE **)v2 != 91)
    goto LABEL_13;
LABEL_7:
  v4 = v3 - 1;
  v5 = (char *)this + 40;
  if ((*((_BYTE *)this + 63) & 0x80) != 0)
    v5 = *(char **)v2;
  if (v5[v4] != 93)
    goto LABEL_13;
  JSONWorker::DoArray(this, (uint64_t)v2);
  if (*((char *)this + 63) < 0)
  {
    **((_BYTE **)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    *((_BYTE *)this + 40) = 0;
    *((_BYTE *)this + 63) = 0;
  }
}

void internalJSONNode::Fetch(internalJSONNode *this)
{
  const char *v2;

  if (!*((_BYTE *)this + 88))
  {
    switch(*(_BYTE *)this)
    {
      case 1:
        internalJSONNode::FetchString(this);
        break;
      case 2:
        v2 = (char *)this + 40;
        if (*((char *)this + 63) < 0)
          v2 = *(const char **)v2;
        *((double *)this + 9) = atof(v2);
        break;
      case 4:
        internalJSONNode::FetchArray(this);
        break;
      case 5:
        internalJSONNode::FetchNode(this);
        break;
      default:
        internalJSONNode::Nullify(this);
        break;
    }
    *((_BYTE *)this + 88) = 1;
  }
}

std::string *internalJSONNode::Set(uint64_t a1, const std::string *a2)
{
  std::string *result;

  *(_BYTE *)a1 = 1;
  result = std::string::operator=((std::string *)(a1 + 40), a2);
  *(_BYTE *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 88) = 1;
  return result;
}

double internalJSONNode::Set(internalJSONNode *this, int a2)
{
  void **v3;
  double result;
  __int128 v5;
  uint64_t v6;

  *(_BYTE *)this = 2;
  *((double *)this + 9) = (double)a2;
  NumberToString::_itoa<int>(a2, &v5);
  v3 = (void **)((char *)this + 40);
  if (*((char *)this + 63) < 0)
    operator delete(*v3);
  result = *(double *)&v5;
  *(_OWORD *)v3 = v5;
  *((_QWORD *)this + 7) = v6;
  *((_BYTE *)this + 88) = 1;
  return result;
}

_QWORD *NumberToString::_itoa<int>@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  unint64_t v5;
  BOOL v6;
  _BYTE v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8[1] = 0;
  v4 = v8;
  if (a1 >= 0)
    v5 = a1;
  else
    v5 = -a1;
  do
  {
    *v4-- = (v5 % 0xA) | 0x30;
    v6 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v6);
  if (a1 < 0)
    *v4 = 45;
  else
    ++v4;
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

void sub_218384CD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __cxa_call_unexpected(a1);
}

double internalJSONNode::Set(internalJSONNode *this, unint64_t a2)
{
  void **v3;
  double result;
  __int128 v5;
  uint64_t v6;

  *(_BYTE *)this = 2;
  *((double *)this + 9) = (double)a2;
  NumberToString::_uitoa<unsigned long>(a2, &v5);
  v3 = (void **)((char *)this + 40);
  if (*((char *)this + 63) < 0)
    operator delete(*v3);
  result = *(double *)&v5;
  *(_OWORD *)v3 = v5;
  *((_QWORD *)this + 7) = v6;
  *((_BYTE *)this + 88) = 1;
  return result;
}

_QWORD *NumberToString::_uitoa<unsigned long>@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  BOOL v4;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = &v6;
  v6 = 0;
  do
  {
    *--v3 = (a1 % 0xA) | 0x30;
    v4 = a1 > 9;
    a1 /= 0xAuLL;
  }
  while (v4);
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void sub_218384DD0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __cxa_call_unexpected(a1);
}

_QWORD *NumberToString::_itoa<long long>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  unint64_t v5;
  BOOL v6;
  _BYTE v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8[1] = 0;
  v4 = v8;
  if (a1 >= 0)
    v5 = a1;
  else
    v5 = -a1;
  do
  {
    *v4-- = (v5 % 0xA) | 0x30;
    v6 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v6);
  if (a1 < 0)
    *v4 = 45;
  else
    ++v4;
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

void sub_218384E80(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __cxa_call_unexpected(a1);
}

_QWORD *NumberToString::_ftoa@<X0>(double a1@<D0>, _QWORD *a2@<X8>)
{
  double v4;
  _BOOL4 v5;
  double v6;
  _BOOL4 v7;
  char *v8;
  char *v10;
  char *v11;
  int v12;
  int v13;
  char __str[64];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a1 >= 0.0)
  {
    v4 = (double)(unint64_t)a1;
    v5 = a1 - v4 < 0.00001;
    if (v4 >= a1)
      v5 = a1 - v4 > -0.00001;
    if (v5)
      return NumberToString::_uitoa<unsigned long>((unint64_t)a1, a2);
  }
  v6 = (double)(uint64_t)a1;
  v7 = a1 - v6 > -0.00001;
  if (v6 < a1)
    v7 = a1 - v6 < 0.00001;
  if (v7)
    return NumberToString::_itoa<long long>((uint64_t)a1, a2);
  v8 = __str;
  snprintf(__str, 0x3FuLL, "%Lf", a1);
  while (*v8)
  {
    if (*v8 == 46)
    {
      v10 = v8;
LABEL_14:
      v11 = v10 + 1;
      while (1)
      {
        v13 = *v11++;
        v12 = v13;
        if (!v13)
          break;
        if (v12 != 48)
        {
          v10 = v11 - 1;
          v8 = v11;
          goto LABEL_14;
        }
      }
      *v8 = 0;
      return std::string::basic_string[abi:ne180100]<0>(a2, __str);
    }
    ++v8;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void sub_21838501C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __cxa_call_unexpected(a1);
}

double internalJSONNode::Set(internalJSONNode *this, float a2)
{
  double v3;
  void **v4;
  double result;
  __int128 v6;
  uint64_t v7;

  *(_BYTE *)this = 2;
  v3 = a2;
  *((double *)this + 9) = v3;
  NumberToString::_ftoa(v3, &v6);
  v4 = (void **)((char *)this + 40);
  if (*((char *)this + 63) < 0)
    operator delete(*v4);
  result = *(double *)&v6;
  *(_OWORD *)v4 = v6;
  *((_QWORD *)this + 7) = v7;
  *((_BYTE *)this + 88) = 1;
  return result;
}

double internalJSONNode::Set(internalJSONNode *this, double a2)
{
  void **v3;
  double result;
  __int128 v5;
  uint64_t v6;

  *(_BYTE *)this = 2;
  *((double *)this + 9) = a2;
  NumberToString::_ftoa(a2, &v5);
  v3 = (void **)((char *)this + 40);
  if (*((char *)this + 63) < 0)
    operator delete(*v3);
  result = *(double *)&v5;
  *(_OWORD *)v3 = v5;
  *((_QWORD *)this + 7) = v6;
  *((_BYTE *)this + 88) = 1;
  return result;
}

_DWORD *internalJSONNode::push_back(_DWORD *result, uint64_t *a2)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)result & 0xFE) == 4)
  {
    v2 = (_DWORD *)*((_QWORD *)result + 15);
    v3 = JSONNode::newJSONNode(a2);
    result = jsonChildren::inc(v2);
    v4 = *(_QWORD *)v2;
    v5 = v2[2];
    v2[2] = v5 + 1;
    *(_QWORD *)(v4 + 8 * v5) = v3;
  }
  return result;
}

internalJSONNode *internalJSONNode::deleteInternal(internalJSONNode *this, internalJSONNode *a2)
{
  if (this)
  {
    internalJSONNode::~internalJSONNode(this, a2);
    JUMPOUT(0x219A19A08);
  }
  return this;
}

void internalJSONNode::newInternal(internalJSONNode *this)
{
  char v1;
  internalJSONNode *v2;

  v1 = (char)this;
  v2 = (internalJSONNode *)operator new();
  internalJSONNode::internalJSONNode(v2, v1);
}

uint64_t internalJSONNode::newInternal(uint64_t a1, const std::string *a2)
{
  uint64_t v4;

  v4 = operator new();
  return internalJSONNode::internalJSONNode(v4, a1, a2);
}

void internalJSONNode::newInternal(internalJSONNode *this, const internalJSONNode *a2)
{
  internalJSONNode *v3;

  v3 = (internalJSONNode *)operator new();
  internalJSONNode::internalJSONNode(v3, this);
}

void jsonSingletonCONST_TRUE::jsonSingletonCONST_TRUE(jsonSingletonCONST_TRUE *this)
{
  std::string::basic_string[abi:ne180100]<0>(this, "true");
}

void jsonSingletonCONST_FALSE::jsonSingletonCONST_FALSE(jsonSingletonCONST_FALSE *this)
{
  std::string::basic_string[abi:ne180100]<0>(this, "false");
}

void jsonSingletonCONST_NULL::jsonSingletonCONST_NULL(jsonSingletonCONST_NULL *this)
{
  std::string::basic_string[abi:ne180100]<0>(this, "null");
}

uint64_t std::string::find_first_not_of[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  BOOL v8;
  unint64_t v9;
  size_t v10;
  char *v11;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  v8 = v6 > a3;
  v9 = v6 - a3;
  if (!v8)
    return -1;
  v10 = v7;
  v11 = (char *)(v5 + a3);
  if (v7)
  {
    while (memchr(__s, *v11, v10))
    {
      ++v11;
      if (!--v9)
        return -1;
    }
  }
  return (uint64_t)&v11[-v5];
}

void jsonChildren::~jsonChildren(internalJSONNode **this, JSONNode *a2)
{
  if (*this)
  {
    jsonChildren::deleteAll(this, a2);
    free(*this);
    *this = 0;
  }
}

void internalJSONNode::internalJSONNode(internalJSONNode *this, char a2)
{
  unsigned __int8 v3;
  _QWORD *v4;

  *(_BYTE *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  *(_OWORD *)((char *)this + 72) = xmmword_2186CF1A0;
  *((_BYTE *)this + 88) = 1;
  {
    jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
    qword_254FD3E88 = 0;
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_217E69000);
  }
  if (SHIBYTE(qword_254FD3E88) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, (const std::string::value_type *)jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, *((std::string::size_type *)&jsonSingletonEMPTY_JSON_STRING::getValue(void)::single + 1));
  }
  else
  {
    *((_OWORD *)this + 6) = jsonSingletonEMPTY_JSON_STRING::getValue(void)::single;
    *((_QWORD *)this + 14) = qword_254FD3E88;
  }
  if ((*(_BYTE *)this & 0xFE) == 4)
  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    v4[1] = 0;
  }
  else
  {
    v4 = 0;
  }
  *((_QWORD *)this + 15) = v4;
}

void sub_218385488(void *a1)
{
  std::string *v1;
  std::string *v2;

  std::string::~string(v2);
  std::string::~string(v1);
  __cxa_call_unexpected(a1);
}

uint64_t _GLOBAL__sub_I_internalJSONNode_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_libjson_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *png_init_filter_functions_neon(_QWORD *result, int a2)
{
  void *v2;
  void *v3;
  void *v4;

  result[144] = png_read_filter_row_up_neon;
  if (a2 == 3)
  {
    v2 = png_read_filter_row_paeth3_neon;
    v3 = png_read_filter_row_avg3_neon;
    v4 = png_read_filter_row_sub3_neon;
  }
  else
  {
    if (a2 != 4)
      return result;
    v2 = png_read_filter_row_paeth4_neon;
    v3 = png_read_filter_row_avg4_neon;
    v4 = png_read_filter_row_sub4_neon;
  }
  result[143] = v4;
  result[145] = v3;
  result[146] = v2;
  return result;
}

int8x16_t png_read_filter_row_up_neon(uint64_t a1, int8x16_t *a2, int8x16_t *a3)
{
  uint64_t v3;
  int8x16_t *v4;
  int8x16_t v5;
  int8x16_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    v4 = (int8x16_t *)((char *)a2 + v3);
    do
    {
      v5 = *a3++;
      result = vaddq_s8(v5, *a2);
      *a2++ = result;
    }
    while (a2 < v4);
  }
  return result;
}

int8x16_t png_read_filter_row_sub3_neon(uint64_t a1, unint64_t a2, int8x16_t result)
{
  uint64_t v3;
  unint64_t v4;
  int8x8_t v5;
  int8x8_t v6;
  unint64_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x16_t v11;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    v4 = a2 + v3;
    result = *(int8x16_t *)a2;
    v5 = (int8x8_t)vextq_s8(result, result, 8uLL).u64[0];
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = vadd_s8(*(int8x8_t *)result.i8, v6);
      v9 = vadd_s8(vext_s8(*(int8x8_t *)result.i8, v5, 3uLL), v8);
      v10 = vadd_s8(v9, vext_s8(*(int8x8_t *)result.i8, v5, 6uLL));
      v11 = *(int8x16_t *)(v7 + 12);
      v7 += 12;
      result = v11;
      v6 = vadd_s8(v10, vext_s8(v5, v5, 1uLL));
      *(_DWORD *)a2 = v8.i32[0];
      *(_DWORD *)(a2 + 3) = v9.i32[0];
      v5 = (int8x8_t)vextq_s8(result, result, 8uLL).u64[0];
      *(_DWORD *)(a2 + 6) = v10.i32[0];
      *(_DWORD *)(a2 + 9) = v6.i32[0];
      a2 = v7;
    }
    while (v7 < v4);
  }
  return result;
}

int8x8_t png_read_filter_row_sub4_neon(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int8x8_t v4;
  int8x8_t result;
  int8x8_t v6;
  int8x8_t v7;
  float32x2x4_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 1)
  {
    v3 = a2 + v2;
    v4 = 0;
    do
    {
      v8 = vld4_f32((const float *)a2);
      result = vadd_s8(v4, (int8x8_t)v8.val[0]);
      v6 = vadd_s8(result, (int8x8_t)v8.val[1]);
      v7 = vadd_s8(v6, (int8x8_t)v8.val[2]);
      v4 = vadd_s8(v7, (int8x8_t)v8.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v6.i32[0];
      *(_DWORD *)(a2 + 8) = v7.i32[0];
      *(_DWORD *)(a2 + 12) = v4.i32[0];
      a2 += 16;
    }
    while (a2 < v3);
  }
  return result;
}

int8x8_t png_read_filter_row_avg3_neon(uint64_t a1, unint64_t a2, _OWORD *a3, int8x8_t result)
{
  uint64_t v4;
  unint64_t v5;
  int8x16_t v6;
  uint8x8_t v7;
  unint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint8x8_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  int8x8_t v14;
  int8x16_t v15;
  uint8x8_t v16;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= 1)
  {
    v5 = a2 + v4;
    v6 = *(int8x16_t *)a2;
    result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
    v7 = 0;
    v8 = a2;
    do
    {
      v9 = *(int8x16_t *)a3;
      a3 = (_OWORD *)((char *)a3 + 12);
      v10 = v9;
      v11 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v7, *(uint8x8_t *)v9.i8), *(int8x8_t *)v6.i8);
      v12 = vext_s8(*(int8x8_t *)v6.i8, result, 6uLL);
      v13 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v11, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 3uLL)), vext_s8(*(int8x8_t *)v6.i8, result, 3uLL));
      v14 = vext_s8(result, result, 1uLL);
      v15 = *(int8x16_t *)(v8 + 12);
      v8 += 12;
      v6 = v15;
      result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
      v16 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v13, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 6uLL)), v12);
      *(_DWORD *)a2 = v11.i32[0];
      *(_DWORD *)(a2 + 3) = v13.i32[0];
      v7 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v16, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, vextq_s8(v10, v10, 8uLL), 9uLL)), v14);
      *(_DWORD *)(a2 + 6) = v16.i32[0];
      *(_DWORD *)(a2 + 9) = v7.i32[0];
      a2 = v8;
    }
    while (v8 < v5);
  }
  return result;
}

uint8x8_t png_read_filter_row_avg4_neon(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint8x8_t result;
  uint8x8_t v7;
  uint8x8_t v8;
  float32x2x4_t v9;
  float32x2x4_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    v4 = a2 + v3;
    v5 = 0;
    do
    {
      v9 = vld4_f32((const float *)a2);
      v10 = vld4_f32(a3);
      result = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v5, (uint8x8_t)v10.val[0]), (int8x8_t)v9.val[0]);
      v7 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(result, (uint8x8_t)v10.val[1]), (int8x8_t)v9.val[1]);
      v8 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v7, (uint8x8_t)v10.val[2]), (int8x8_t)v9.val[2]);
      v5 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v8, (uint8x8_t)v10.val[3]), (int8x8_t)v9.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v7.i32[0];
      *(_DWORD *)(a2 + 8) = v8.i32[0];
      *(_DWORD *)(a2 + 12) = v5.i32[0];
      a2 += 16;
      a3 += 4;
    }
    while (a2 < v4);
  }
  return result;
}

int8x8_t png_read_filter_row_paeth3_neon(uint64_t a1, unint64_t a2, _OWORD *a3, int8x8_t result)
{
  uint64_t v4;
  unint64_t v5;
  int8x16_t v6;
  int8x8_t v7;
  int8x8_t v8;
  unint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint16x8_t v12;
  int8x8_t v13;
  uint16x8_t v14;
  int8x8_t v15;
  uint16x8_t v16;
  int8x8_t v17;
  int8x16_t v18;
  uint16x8_t v19;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= 1)
  {
    v5 = a2 + v4;
    v6 = *(int8x16_t *)a2;
    result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
    v7 = 0;
    v8 = 0;
    v9 = a2;
    do
    {
      v10 = *(int8x16_t *)a3;
      a3 = (_OWORD *)((char *)a3 + 12);
      v11 = v10;
      v12 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v8), vshll_n_u8((uint8x8_t)v7, 1uLL));
      v13 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v12, vabdl_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v7))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v8, (uint8x8_t)v7), vabd_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v7))), v8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v8, (uint8x8_t)v7), v12)), v7, *(int8x8_t *)v10.i8)), *(int8x8_t *)v6.i8);
      v12.i64[0] = vextq_s8(v11, v11, 3uLL).u64[0];
      v14 = vabdq_u16(vaddl_u8((uint8x8_t)v13, *(uint8x8_t *)v12.i8), vshll_n_u8(*(uint8x8_t *)v10.i8, 1uLL));
      *(int8x8_t *)v14.i8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v14, vabdl_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v10.i8))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v13, *(uint8x8_t *)v10.i8), vabd_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v10.i8))), v13, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v13, *(uint8x8_t *)v10.i8), v14)), *(int8x8_t *)v10.i8, *(int8x8_t *)v12.i8)), vext_s8(*(int8x8_t *)v6.i8, result, 3uLL));
      v15 = (int8x8_t)vextq_s8(v11, v11, 6uLL).u64[0];
      v16 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v14.i8, (uint8x8_t)v15), vshll_n_u8(*(uint8x8_t *)v12.i8, 1uLL));
      *(int8x8_t *)v12.i8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v16, vabdl_u8((uint8x8_t)v15, *(uint8x8_t *)v12.i8))), (int8x8_t)vcge_u8(vabd_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v12.i8), vabd_u8((uint8x8_t)v15, *(uint8x8_t *)v12.i8))), *(int8x8_t *)v14.i8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v12.i8), v16)), *(int8x8_t *)v12.i8, v15)), vext_s8(*(int8x8_t *)v6.i8, result, 6uLL));
      v17 = vext_s8(result, result, 1uLL);
      v18 = *(int8x16_t *)(v9 + 12);
      v9 += 12;
      v6 = v18;
      v7 = (int8x8_t)vextq_s8(v11, vextq_s8(v11, v11, 8uLL), 9uLL).u64[0];
      result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
      v19 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v7), vshll_n_u8((uint8x8_t)v15, 1uLL));
      *(_DWORD *)a2 = v13.i32[0];
      *(_DWORD *)(a2 + 3) = v14.i32[0];
      v8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v19, vabdl_u8((uint8x8_t)v7, (uint8x8_t)v15))), (int8x8_t)vcge_u8(vabd_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v15), vabd_u8((uint8x8_t)v7, (uint8x8_t)v15))), *(int8x8_t *)v12.i8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v15), v19)), v15, v7)), v17);
      *(_DWORD *)(a2 + 6) = v12.i32[0];
      *(_DWORD *)(a2 + 9) = v8.i32[0];
      a2 = v9;
    }
    while (v9 < v5);
  }
  return result;
}

int8x8_t png_read_filter_row_paeth4_neon(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v3;
  unint64_t v4;
  int8x8_t v5;
  int8x8_t v6;
  uint16x8_t v7;
  int8x8_t result;
  uint16x8_t v9;
  int8x8_t v10;
  uint16x8_t v11;
  int8x8_t v12;
  uint16x8_t v13;
  float32x2x4_t v14;
  float32x2x4_t v15;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    v4 = a2 + v3;
    v5 = 0;
    v6 = 0;
    do
    {
      v15 = vld4_f32((const float *)a2);
      v14 = vld4_f32(a3);
      v7 = vabdq_u16(vaddl_u8((uint8x8_t)v14.val[0], (uint8x8_t)v6), vshll_n_u8((uint8x8_t)v5, 1uLL));
      result = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v7, vabdl_u8((uint8x8_t)v14.val[0], (uint8x8_t)v5))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v6, (uint8x8_t)v5), vabd_u8((uint8x8_t)v14.val[0], (uint8x8_t)v5))), v6, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v6, (uint8x8_t)v5), v7)), v5, (int8x8_t)v14.val[0])), (int8x8_t)v15.val[0]);
      v9 = vabdq_u16(vaddl_u8((uint8x8_t)result, (uint8x8_t)v14.val[1]), vshll_n_u8((uint8x8_t)v14.val[0], 1uLL));
      v10 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v9, vabdl_u8((uint8x8_t)v14.val[1], (uint8x8_t)v14.val[0]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)result, (uint8x8_t)v14.val[0]), vabd_u8((uint8x8_t)v14.val[1], (uint8x8_t)v14.val[0]))), result, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)result, (uint8x8_t)v14.val[0]), v9)), (int8x8_t)v14.val[0], (int8x8_t)v14.val[1])), (int8x8_t)v15.val[1]);
      v11 = vabdq_u16(vaddl_u8((uint8x8_t)v10, (uint8x8_t)v14.val[2]), vshll_n_u8((uint8x8_t)v14.val[1], 1uLL));
      v12 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v11, vabdl_u8((uint8x8_t)v14.val[2], (uint8x8_t)v14.val[1]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v10, (uint8x8_t)v14.val[1]), vabd_u8((uint8x8_t)v14.val[2], (uint8x8_t)v14.val[1]))), v10, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v10, (uint8x8_t)v14.val[1]), v11)), (int8x8_t)v14.val[1], (int8x8_t)v14.val[2])), (int8x8_t)v15.val[2]);
      v13 = vabdq_u16(vaddl_u8((uint8x8_t)v12, (uint8x8_t)v14.val[3]), vshll_n_u8((uint8x8_t)v14.val[2], 1uLL));
      v6 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v13, vabdl_u8((uint8x8_t)v14.val[3], (uint8x8_t)v14.val[2]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v12, (uint8x8_t)v14.val[2]), vabd_u8((uint8x8_t)v14.val[3], (uint8x8_t)v14.val[2]))), v12, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v12, (uint8x8_t)v14.val[2]), v13)), (int8x8_t)v14.val[2], (int8x8_t)v14.val[3])), (int8x8_t)v15.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v10.i32[0];
      *(_DWORD *)(a2 + 8) = v12.i32[0];
      *(_DWORD *)(a2 + 12) = v6.i32[0];
      a2 += 16;
      a3 += 4;
      v5 = (int8x8_t)v14.val[3];
    }
    while (a2 < v4);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_od_scenenet_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t png_riffle_palette_neon(uint64_t result)
{
  const char *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  _BYTE *v8;
  char v9;
  int8x16x3_t v10;

  v1 = *(const char **)(result + 584);
  v2 = *(char **)(result + 976);
  v3 = *(char **)(result + 736);
  v4 = *(unsigned __int16 *)(result + 600);
  v5 = -16;
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  v7 = v2;
  do
  {
    v10 = vld3q_s8(v1);
    v1 += 48;
    vst4q_s8(v7, *(int8x16x4_t *)(&v6 - 3));
    v7 += 64;
    v5 += 16;
  }
  while (v5 < 0xF0);
  if ((_DWORD)v4)
  {
    v8 = v2 + 3;
    do
    {
      v9 = *v3++;
      *v8 = v9;
      v8 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t png_do_expand_palette_rgba8_neon(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  __int128 v12;

  v5 = *a2;
  if (v5 < 4)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = *(_QWORD *)(a1 + 976);
  *a5 -= 15;
  do
  {
    v11 = (unsigned __int8 *)(*a4 + v7);
    LODWORD(v12) = *(_DWORD *)(v10 + 4 * *(v11 - 3));
    DWORD1(v12) = *(_DWORD *)(v10 + 4 * *(v11 - 2));
    DWORD2(v12) = *(_DWORD *)(v10 + 4 * *(v11 - 1));
    HIDWORD(v12) = *(_DWORD *)(v10 + 4 * *v11);
    *(_OWORD *)(*a5 - v8) = v12;
    v9 += 4;
    v8 += 16;
    v7 -= 4;
  }
  while (v9 < v5);
  if ((_DWORD)v5 == (_DWORD)v9)
    result = v9;
  else
    result = (v9 - 4);
  *a4 -= result;
  *a5 -= 4 * (int)result;
  return result;
}

uint64_t png_do_expand_palette_rgb8_neon(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  unsigned int v5;
  uint64_t result;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  const char *v11;
  __int8 *v12;
  __int8 *v13;
  __int8 *v14;
  __int8 *v15;
  __int8 *v16;
  __int8 *v17;
  __int8 *v18;
  char *v19;
  int8x8x3_t v20;

  v5 = *a2;
  if (*a2 < 9)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(a1 + 584);
  *a5 -= 23;
  do
  {
    v10 = (unsigned __int8 *)(*a4 - (int)v8);
    v11 = (const char *)(v9 + 3 * *(v10 - 7));
    v20 = vld3_dup_s8(v11);
    v12 = (__int8 *)(v9 + 3 * *(v10 - 6));
    v20.val[0].i8[1] = *v12;
    v20.val[1].i8[1] = v12[1];
    v20.val[2].i8[1] = v12[2];
    v13 = (__int8 *)(v9 + 3 * *(v10 - 5));
    v20.val[0].i8[2] = *v13;
    v20.val[1].i8[2] = v13[1];
    v20.val[2].i8[2] = v13[2];
    v14 = (__int8 *)(v9 + 3 * *(v10 - 4));
    v20.val[0].i8[3] = *v14;
    v20.val[1].i8[3] = v14[1];
    v20.val[2].i8[3] = v14[2];
    v15 = (__int8 *)(v9 + 3 * *(v10 - 3));
    v20.val[0].i8[4] = *v15;
    v20.val[1].i8[4] = v15[1];
    v20.val[2].i8[4] = v15[2];
    v16 = (__int8 *)(v9 + 3 * *(v10 - 2));
    v20.val[0].i8[5] = *v16;
    v20.val[1].i8[5] = v16[1];
    v20.val[2].i8[5] = v16[2];
    v17 = (__int8 *)(v9 + 3 * *(v10 - 1));
    v20.val[0].i8[6] = *v17;
    v20.val[1].i8[6] = v17[1];
    v20.val[2].i8[6] = v17[2];
    v18 = (__int8 *)(v9 + 3 * *v10);
    v20.val[0].i8[7] = *v18;
    v20.val[1].i8[7] = v18[1];
    v20.val[2].i8[7] = v18[2];
    v19 = (char *)(*a5 - v7);
    vst3_s8(v19, v20);
    v8 += 8;
    v7 += 24;
  }
  while (v8 < v5);
  if (v5 == v8)
    result = v8;
  else
    result = v8 - 8;
  *a4 -= (int)result;
  *a5 -= 3 * (int)result;
  return result;
}

unint64_t turi::hash64_proportion_cutoff(turi *this, double a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = vcvtd_n_u64_f64(a2, 0x3FuLL);
  v3 = 0x8000000000000000;
  if (v2 < 0x8000000000000000)
    v3 = v2;
  if (v2 >= 0x7FFFFFFFFFFFFFFFLL)
    v2 = 0x7FFFFFFFFFFFFFFFLL;
  return v3 + v2;
}

uint64_t _GLOBAL__sub_I_cityhash_tc_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec@<X0>(CoreML::TreeEnsembles *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  _QWORD *v13;
  _QWORD **v14;
  _QWORD **v15;
  std::string::size_type v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  std::string::size_type v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  std::string::size_type v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD **v56;
  BOOL v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  __int128 *v108;
  __int128 *v109;
  __int128 *v110;
  __int128 *v111;
  __int128 *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::string::size_type size;
  std::string::size_type v123;
  void *v124;
  uint64_t v125;
  unint64_t v126;
  int64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  std::string::size_type v131;
  unint64_t v132;
  uint64_t v133;
  std::string::size_type v134;
  std::string::size_type v135;
  unint64_t v136;
  unint64_t v137;
  std::string::size_type v138;
  std::string::size_type v139;
  std::string::size_type v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  std::string::size_type *v150;
  unint64_t v151;
  void *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  std::__shared_weak_count *shared_owners;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  uint64_t shared_weak_owners;
  std::string::size_type get_deleter;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::string::size_type v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t *v176;
  unint64_t v177;
  std::string::size_type *v178;
  char *v179;
  char *v180;
  char *i;
  _QWORD *v182;
  unint64_t v183;
  _QWORD **v184;
  _QWORD *v185;
  _QWORD **v186;
  unint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  char *v192;
  uint64_t *v193;
  uint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  std::string *v207;
  int v208;
  uint64_t *v209;
  int v210;
  int v211;
  int v212;
  std::vector<std::string>::size_type v213;
  int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  std::logic_error *v225;
  std::logic_error *v226;
  std::string *v227;
  __int128 v228;
  std::logic_error *exception;
  uint64_t *v231;
  CoreML::TreeEnsembles *v232;
  std::string::size_type v233;
  uint64_t v234;
  _QWORD *v235;
  std::string::size_type v236;
  std::string::size_type v237;
  unint64_t v238;
  std::string v239;
  int v240;
  uint64_t v241;
  void *v242;
  _QWORD *v243;
  unint64_t v244;
  uint64_t v245;
  void *v246;
  std::__shared_weak_count *v247;
  char v248;
  std::__shared_weak_count_vtbl *v249;
  std::__shared_weak_count *v250;
  void *v251;
  std::__shared_weak_count *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  _QWORD *v260[2];
  _QWORD v261[11];
  char v262;
  uint64_t v263;
  uint64_t v264;
  std::string __p;
  std::__shared_weak_count *v266;
  void *v267;
  char v268;
  _QWORD v269[22];

  v269[19] = *MEMORY[0x24BDAC8D0];
  v264 = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v261);
  v260[0] = &v264;
  v260[1] = v261;
  v4 = *((_DWORD *)this + 11);
  if (v4 != 302 && v4 != 402)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Model is not a tree ensemble.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24D916A90, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (*(_QWORD *)(*((_QWORD *)this + 4) + 16))
    v5 = *(uint64_t **)(*((_QWORD *)this + 4) + 16);
  else
    v5 = &CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  v257 = 0;
  v258 = 0;
  v259 = 0;
  v6 = v5[8];
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Given output dimension equals 0.");
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v243 = 0;
  v244 = 0;
  v242 = &v243;
  v7 = v5[4];
  if (v7)
    v8 = v7 + 8;
  else
    v8 = 0;
  v9 = *((int *)v5 + 6);
  v238 = v6;
  v231 = v5;
  v232 = this;
  if (!(_DWORD)v9)
  {
    v254 = (char *)&v242;
    v255 = (char *)v260;
    goto LABEL_156;
  }
  v234 = v8 + 8 * v9;
  v237 = *MEMORY[0x24BEDB800];
  v236 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v233 = MEMORY[0x24BEDB848] + 16;
  do
  {
    v10 = *(_QWORD *)v8;
    v12 = *(_QWORD *)(*(_QWORD *)v8 + 40);
    v11 = *(_QWORD *)(*(_QWORD *)v8 + 48);
    v13 = v243;
    v14 = &v243;
    if (v243)
    {
      v15 = &v243;
      do
      {
        v16 = v13[4];
        if (v16 >= v12)
        {
          if (v12 >= v16)
          {
            if (v13[5] < v11)
              ++v13;
            else
              v15 = (_QWORD **)v13;
          }
          else
          {
            v15 = (_QWORD **)v13;
          }
        }
        else
        {
          ++v13;
        }
        v13 = (_QWORD *)*v13;
      }
      while (v13);
      v14 = &v243;
      if (v15 != &v243)
      {
        v17 = v15[6];
        if (v17[4] == v12)
        {
          v14 = v15;
          if (v17[5] == v11)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Tree Node with TreeID=", 22);
            v18 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"and NodeID=", 11);
            v19 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" duplicated in specification.", 29);
            std::stringbuf::str();
            CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v239, 0);
            if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v239.__r_.__value_.__l.__data_);
            __p.__r_.__value_.__r.__words[0] = v237;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v237 - 24)) = v236;
            __p.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
            if (v268 < 0)
              operator delete(v267);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x219A198F4](v269);
            goto LABEL_78;
          }
        }
        else
        {
          v14 = v15;
        }
      }
    }
    v20 = (char *)operator new(0xB0uLL);
    v21 = (uint64_t)v20;
    *((_QWORD *)v20 + 1) = 0;
    v22 = (unint64_t *)(v20 + 8);
    *((_QWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = &unk_24D93D020;
    *(_OWORD *)(v20 + 24) = 0u;
    v23 = (std::string::size_type)(v20 + 24);
    *(_OWORD *)(v20 + 40) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *(_OWORD *)(v20 + 120) = 0u;
    *(_OWORD *)(v20 + 136) = 0u;
    *(_OWORD *)(v20 + 152) = 0u;
    *((_QWORD *)v20 + 21) = 0;
    v254 = v20 + 24;
    v255 = v20;
    *(_OWORD *)(v20 + 56) = *(_OWORD *)(v10 + 40);
    v24 = *(_DWORD *)(v10 + 56);
    v20[24] = v24 == 6;
    *((_QWORD *)v20 + 12) = *(_QWORD *)(v10 + 96);
    v235 = v14;
    if (v24 == 6)
    {
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v20 + 104), *(int *)(v10 + 24));
      v25 = *(unsigned int *)(v10 + 24);
      v26 = *(unint64_t **)(v21 + 104);
      if ((int)v25 >= 1)
      {
        v27 = v26 + 1;
        v28 = (uint64_t *)(*(_QWORD *)(v10 + 32) + 8);
        do
        {
          v29 = *v28++;
          v30 = *(_QWORD *)(v29 + 24);
          *(v27 - 1) = *(_QWORD *)(v29 + 16);
          *v27 = v30;
          v27 += 2;
          --v25;
        }
        while (v25);
      }
      v31 = *(unint64_t **)(v21 + 112);
      v32 = (char *)v31 - (char *)v26;
      if (v31 == v26)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Leaf Node (TreeID=", 18);
        v38 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", NodeID=", 9);
        v39 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") has no evaluation value(s) specified.", 39);
        std::stringbuf::str();
        CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v239, 0);
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v239.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v237;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v237 - 24)) = v236;
        __p.__r_.__value_.__l.__size_ = v233;
        if (v268 < 0)
          operator delete(v267);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x219A198F4](v269);
      }
      else
      {
        if ((unint64_t)v32 >= 0x11)
        {
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(v26, *(uint64_t **)(v21 + 112), (uint64_t)&__p, 126 - 2 * __clz(v32 >> 4), 1);
          v26 = *(unint64_t **)(v21 + 104);
          v31 = *(unint64_t **)(v21 + 112);
        }
        if (v26 == v31)
        {
          v37 = v31;
        }
        else
        {
          do
          {
            if (*v26 >= v238)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Leaf Node (TreeID=", 18);
              v33 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", NodeID=", 9);
              v34 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") specifies evaluation value applied to dimension ", 50);
              v35 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"; which is out of range. Dimension must be less than ",
                53);
              v36 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
              std::stringbuf::str();
              CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v239, 0);
              if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v239.__r_.__value_.__l.__data_);
              __p.__r_.__value_.__r.__words[0] = v237;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v237 - 24)) = v236;
              __p.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
              if (v268 < 0)
                operator delete(v267);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x219A198F4](v269);
            }
            v26 += 2;
          }
          while (v26 != v31);
          v31 = *(unint64_t **)(v21 + 104);
          v37 = *(unint64_t **)(v21 + 112);
        }
        if ((char *)v37 - (char *)v31 != 16)
        {
          v40 = 0;
          v41 = 0;
          do
          {
            if (v31[v40] == v31[v40 + 2])
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Leaf Node (TreeID=", 18);
              v42 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", NodeID=", 9);
              v43 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") specifies multipule evaluation values applied to dimension ", 61);
              v44 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)".", 1);
              std::stringbuf::str();
              CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v239, 0);
              if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v239.__r_.__value_.__l.__data_);
              __p.__r_.__value_.__r.__words[0] = v237;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v237 - 24)) = v236;
              __p.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
              if (v268 < 0)
                operator delete(v267);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x219A198F4](v269);
              v31 = *(unint64_t **)(v21 + 104);
              v37 = *(unint64_t **)(v21 + 112);
            }
            ++v41;
            v40 += 2;
          }
          while (v41 < (((char *)v37 - (char *)v31) >> 4) - 1);
        }
      }
    }
    else
    {
      if (v24 >= 6)
      {
        v225 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v225, "Branch mode hit bad value -- this is confusing; error in validator?");
        __cxa_throw(v225, MEMORY[0x24BEDB720], (void (*)(void *))MEMORY[0x24BEDAAC0]);
      }
      *((_DWORD *)v20 + 7) = v24;
      *((_QWORD *)v20 + 4) = *(_QWORD *)(v10 + 64);
      *((_QWORD *)v20 + 5) = *(_QWORD *)(v10 + 72);
      *(_OWORD *)(v20 + 72) = *(_OWORD *)(v10 + 80);
      v20[88] = *(_BYTE *)(v10 + 60);
    }
    __p.__r_.__value_.__r.__words[0] = v12;
    __p.__r_.__value_.__l.__size_ = v11;
    __p.__r_.__value_.__r.__words[2] = v23;
    v266 = (std::__shared_weak_count *)v21;
    do
      v45 = __ldxr(v22);
    while (__stxr(v45 + 1, v22));
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>((uint64_t **)&v242, v235, (unint64_t *)&__p, (uint64_t)&__p);
    v46 = v266;
    if (v266)
    {
      p_shared_owners = (unint64_t *)&v266->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)v255;
    if (v255)
    {
      v50 = (unint64_t *)(v255 + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
LABEL_78:
    v8 += 8;
  }
  while (v8 != v234);
  v52 = v242;
  v254 = (char *)&v242;
  v255 = (char *)v260;
  if (v242 != &v243)
  {
    v53 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      v54 = v52[6];
      if (!*(_BYTE *)v54)
        break;
LABEL_82:
      v55 = (_QWORD *)v52[1];
      if (v55)
      {
        do
        {
          v56 = (_QWORD **)v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD **)v52[2];
          v57 = *v56 == v52;
          v52 = v56;
        }
        while (!v57);
      }
      v52 = v56;
      if (v56 == &v243)
        goto LABEL_156;
    }
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_2::operator()((uint64_t *)&v254, *(_QWORD *)(v54 + 32), *(_QWORD *)(v54 + 56), &v251);
    v58 = v251;
    if (v251 != (void *)v52[6])
    {
      v59 = (std::__shared_weak_count *)*((_QWORD *)v251 + 14);
      if (v59)
      {
        v60 = std::__shared_weak_count::lock(v59);
        if (v60)
        {
          v61 = v60;
          v62 = v58[13];
          v63 = (unint64_t *)&v60->__shared_owners_;
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (v64)
          {
            if (v62)
            {
LABEL_96:
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"In TreeID=", 10);
              v65 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)", false child of NodeID=", 24);
              v66 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" is already the child of node NodeID=", 37);
              v67 = v251;
              *(_OWORD *)&v239.__r_.__value_.__l.__data_ = 0uLL;
              v68 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v251 + 14));
              v239.__r_.__value_.__r.__words[0] = v67[13];
              v239.__r_.__value_.__l.__size_ = (std::string::size_type)v68;
              std::ostream::operator<<();
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
              std::stringbuf::str();
              CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v239, 0);
              if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v239.__r_.__value_.__l.__data_);
              __p.__r_.__value_.__r.__words[0] = v237;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v237 - 24)) = v236;
              __p.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
              goto LABEL_106;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v61);
            if (v62)
              goto LABEL_96;
          }
        }
      }
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v52[6] + 136), (uint64_t *)&v251);
      v76 = v251;
      v78 = v52[6];
      v77 = v52[7];
      if (v77)
      {
        v79 = (unint64_t *)(v77 + 16);
        do
          v80 = __ldxr(v79);
        while (__stxr(v80 + 1, v79));
      }
      v81 = (std::__shared_weak_count *)*((_QWORD *)v76 + 14);
      *((_QWORD *)v76 + 13) = v78;
      *((_QWORD *)v76 + 14) = v77;
      if (v81)
        std::__shared_weak_count::__release_weak(v81);
      v82 = v252;
      if (v252)
      {
        v83 = (unint64_t *)&v252->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_2::operator()((uint64_t *)&v254, *(_QWORD *)(v52[6] + 32), *(_QWORD *)(v52[6] + 48), &v251);
      v85 = v251;
      if (v251 == (void *)v52[6])
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"True child and parent have same ID (TreeID=", 43);
        v98 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)", NodeID=", 9);
        v99 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)")", 1);
        std::stringbuf::str();
        CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v239, 0);
        goto LABEL_136;
      }
      v86 = (std::__shared_weak_count *)*((_QWORD *)v251 + 14);
      if (v86)
      {
        v87 = std::__shared_weak_count::lock(v86);
        if (v87)
        {
          v88 = v87;
          v89 = v85[13];
          v90 = (unint64_t *)&v87->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (v91)
          {
            if (v89)
            {
LABEL_130:
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"In TreeID=", 10);
              v92 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)", true child of NodeID=", 23);
              v93 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)" is already the child of node NodeID=", 37);
              v94 = v251;
              *(_OWORD *)&v239.__r_.__value_.__l.__data_ = 0uLL;
              v95 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v251 + 14));
              v239.__r_.__value_.__r.__words[0] = v94[13];
              v239.__r_.__value_.__l.__size_ = (std::string::size_type)v95;
              std::ostream::operator<<();
              v96 = (unint64_t *)&v95->__shared_owners_;
              do
                v97 = __ldaxr(v96);
              while (__stlxr(v97 - 1, v96));
              if (!v97)
              {
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
              }
              std::stringbuf::str();
              CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v239, 0);
LABEL_136:
              if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v239.__r_.__value_.__l.__data_);
              __p.__r_.__value_.__r.__words[0] = v237;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v237 - 24)) = v236;
              __p.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
              if (v268 < 0)
                operator delete(v267);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x219A198F4](v269);
              v73 = v252;
              if (!v252)
                goto LABEL_82;
              v100 = (unint64_t *)&v252->__shared_owners_;
              do
                v75 = __ldaxr(v100);
              while (__stlxr(v75 - 1, v100));
LABEL_153:
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
              goto LABEL_82;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v88);
            if (v89)
              goto LABEL_130;
          }
        }
      }
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v52[6] + 120), (uint64_t *)&v251);
      v101 = v251;
      v103 = v52[6];
      v102 = v52[7];
      if (v102)
      {
        v104 = (unint64_t *)(v102 + 16);
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
      }
      v106 = (std::__shared_weak_count *)*((_QWORD *)v101 + 14);
      *((_QWORD *)v101 + 13) = v103;
      *((_QWORD *)v101 + 14) = v102;
      if (v106)
        std::__shared_weak_count::__release_weak(v106);
      v73 = v252;
      if (!v252)
        goto LABEL_82;
      v107 = (unint64_t *)&v252->__shared_owners_;
      do
        v75 = __ldaxr(v107);
      while (__stlxr(v75 - 1, v107));
      goto LABEL_153;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"False child and parent have same ID (TreeID=", 44);
    v71 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)", NodeID=", 9);
    v72 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)")", 1);
    std::stringbuf::str();
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v239, 0);
    if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v239.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v237;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v237 - 24)) = v236;
    __p.__r_.__value_.__l.__size_ = v53;
LABEL_106:
    if (v268 < 0)
      operator delete(v267);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x219A198F4](v269);
    v73 = v252;
    if (!v252)
      goto LABEL_82;
    v74 = (unint64_t *)&v252->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    goto LABEL_153;
  }
LABEL_156:
  std::vector<std::shared_ptr<turi::query_eval::node_info const>>::reserve(&v257, v244);
  v108 = (__int128 *)v242;
  if (v242 != &v243)
  {
    do
    {
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](&v257, v108 + 3);
      v109 = (__int128 *)*((_QWORD *)v108 + 1);
      if (v109)
      {
        do
        {
          v110 = v109;
          v109 = *(__int128 **)v109;
        }
        while (v109);
      }
      else
      {
        do
        {
          v110 = (__int128 *)*((_QWORD *)v108 + 2);
          v57 = *(_QWORD *)v110 == (_QWORD)v108;
          v108 = v110;
        }
        while (!v57);
      }
      v108 = v110;
    }
    while (v110 != (__int128 *)&v243);
  }
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy((uint64_t)&v242, v243);
  v254 = 0;
  v255 = 0;
  v256 = 0;
  memset(&v239, 0, sizeof(v239));
  v111 = (__int128 *)v257;
  v112 = (__int128 *)v258;
  if (v257 == v258)
    goto LABEL_213;
  while (2)
  {
    v113 = *(_QWORD *)v111;
    v114 = *(std::__shared_weak_count **)(*(_QWORD *)v111 + 112);
    if (v114 && (v115 = std::__shared_weak_count::lock(v114)) != 0)
    {
      v116 = v115;
      v117 = *(_QWORD *)(v113 + 104);
      v118 = (unint64_t *)&v115->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (v119)
      {
        if (!v117)
          goto LABEL_172;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v116);
        if (!v117)
          goto LABEL_172;
      }
    }
    else
    {
LABEL_172:
      v121 = *(_QWORD *)(*(_QWORD *)v111 + 32);
      v120 = *(_QWORD *)(*(_QWORD *)v111 + 40);
      size = v239.__r_.__value_.__l.__size_;
      if (v239.__r_.__value_.__l.__size_ >= v239.__r_.__value_.__r.__words[2])
      {
        v124 = (void *)v239.__r_.__value_.__r.__words[0];
        v125 = (uint64_t)(v239.__r_.__value_.__l.__size_ - v239.__r_.__value_.__r.__words[0]) >> 4;
        v126 = v125 + 1;
        if ((unint64_t)(v125 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v127 = v239.__r_.__value_.__r.__words[2] - v239.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v239.__r_.__value_.__r.__words[2] - v239.__r_.__value_.__r.__words[0]) >> 3 > v126)
          v126 = v127 >> 3;
        if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF0)
          v128 = 0xFFFFFFFFFFFFFFFLL;
        else
          v128 = v126;
        if (v128)
        {
          v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v239.__r_.__value_.__r.__words[2], v128);
          size = v239.__r_.__value_.__l.__size_;
          v124 = (void *)v239.__r_.__value_.__r.__words[0];
        }
        else
        {
          v129 = 0;
        }
        v130 = &v129[16 * v125];
        *(_QWORD *)v130 = v121;
        *((_QWORD *)v130 + 1) = v120;
        v131 = (std::string::size_type)v130;
        if ((void *)size != v124)
        {
          do
          {
            *(_OWORD *)(v131 - 16) = *(_OWORD *)(size - 16);
            v131 -= 16;
            size -= 16;
          }
          while ((void *)size != v124);
          v124 = (void *)v239.__r_.__value_.__r.__words[0];
        }
        v123 = (std::string::size_type)(v130 + 16);
        v239.__r_.__value_.__r.__words[0] = v131;
        v239.__r_.__value_.__l.__size_ = (std::string::size_type)(v130 + 16);
        v239.__r_.__value_.__r.__words[2] = (std::string::size_type)&v129[16 * v128];
        if (v124)
          operator delete(v124);
      }
      else
      {
        *(_QWORD *)v239.__r_.__value_.__l.__size_ = v121;
        *(_QWORD *)(size + 8) = v120;
        v123 = size + 16;
      }
      v239.__r_.__value_.__l.__size_ = v123;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](&v254, v111);
    }
    if (++v111 != v112)
      continue;
    break;
  }
  if (v255 != v254)
  {
    v132 = 126 - 2 * __clz((uint64_t)(v239.__r_.__value_.__l.__size_ - v239.__r_.__value_.__r.__words[0]) >> 4);
    v133 = v239.__r_.__value_.__l.__size_ == v239.__r_.__value_.__r.__words[0] ? 0 : v132;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>((uint64_t)v239.__r_.__value_.__l.__data_, (unint64_t *)v239.__r_.__value_.__l.__size_, (uint64_t)&v242, v133, 1);
    v135 = v239.__r_.__value_.__l.__size_;
    v134 = v239.__r_.__value_.__r.__words[0];
    if (v239.__r_.__value_.__l.__size_ - v239.__r_.__value_.__r.__words[0] != 16)
    {
      v136 = 0;
      v137 = (uint64_t)(v239.__r_.__value_.__l.__size_ - v239.__r_.__value_.__r.__words[0]) >> 4;
      v138 = *MEMORY[0x24BEDB800];
      v139 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v140 = MEMORY[0x24BEDB848] + 16;
      do
      {
        v141 = *(_QWORD *)(v134 + 16 * v136);
        v142 = v136 + 1;
        if (*(_QWORD *)(v134 + 16 * (v136 + 1)) == v141)
        {
          if (v142 < v137)
          {
            v143 = (uint64_t *)(v134 + 16 * v136 + 16);
            while (1)
            {
              v144 = *v143;
              v143 += 2;
              if (v144 != v141)
                break;
              if (v137 == ++v142)
              {
                v142 = v137;
                break;
              }
            }
          }
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Tree TreeID=", 12);
          v145 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)" has multiple root nodes: ", 26);
          v146 = v142 - v136;
          if (v142 > v136)
          {
            v147 = (16 * v136) | 8;
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"NodeID=", 7);
              std::ostream::operator<<();
              if (v146 != 1)
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)", ", 2);
              v147 += 16;
              --v146;
            }
            while (v146);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)".", 1);
          std::stringbuf::str();
          CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v242, 0);
          if (SHIBYTE(v244) < 0)
            operator delete(v242);
          __p.__r_.__value_.__r.__words[0] = v138;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v138 - 24)) = v139;
          __p.__r_.__value_.__l.__size_ = v140;
          if (v268 < 0)
            operator delete(v267);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x219A198F4](v269);
          v135 = v239.__r_.__value_.__l.__size_;
          v134 = v239.__r_.__value_.__r.__words[0];
        }
        v137 = (uint64_t)(v135 - v134) >> 4;
        v136 = v142;
      }
      while (v142 < v137 - 1);
    }
  }
LABEL_213:
  v243 = 0;
  v244 = 0;
  v242 = &v243;
  v251 = 0;
  v252 = 0;
  v253 = 0;
  v148 = v254;
  v149 = v255;
  v150 = (std::string::size_type *)MEMORY[0x24BEDB800];
  v151 = v238;
  if (v254 != v255)
  {
    while (2)
    {
      v152 = *(void **)v148;
      v153 = (std::__shared_weak_count *)*((_QWORD *)v148 + 1);
      v246 = *(void **)v148;
      v247 = v153;
      if (v153)
      {
        v154 = (unint64_t *)&v153->__shared_owners_;
        do
          v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v152;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v153;
        do
          v156 = __ldxr(v154);
        while (__stxr(v156 + 1, v154));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v152;
      }
      __p.__r_.__value_.__r.__words[2] = 0;
      std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*>((uint64_t)&v251, (uint64_t *)&__p, (uint64_t *)&v266, 1uLL);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      v157 = v252;
      if (v251 != v252)
      {
        while (1)
        {
          v158 = v157[-1].__vftable;
          v249 = v158;
          shared_owners = (std::__shared_weak_count *)v157[-1].__shared_owners_;
          v250 = shared_owners;
          if (shared_owners)
          {
            v160 = (unint64_t *)&shared_owners->__shared_owners_;
            do
              v161 = __ldxr(v160);
            while (__stxr(v161 + 1, v160));
          }
          if (!v158)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "Internal error: null child node; likely specification error.");
            CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&__p, 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (!LOBYTE(v158->~__shared_weak_count))
          {
            shared_weak_owners = v157[-1].__shared_weak_owners_;
            if (shared_weak_owners == 1)
            {
              v157[-1].__shared_weak_owners_ = 2;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v158[3].~__shared_weak_count;
              std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v242, (unint64_t *)&__p, (uint64_t *)&__p);
              v172 = (std::string::size_type)v158[3].~__shared_weak_count_0;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v158[3].~__shared_weak_count;
              __p.__r_.__value_.__l.__size_ = v172;
              if (v172)
              {
                v173 = (unint64_t *)(v172 + 8);
                do
                  v174 = __ldxr(v173);
                while (__stxr(v174 + 1, v173));
              }
              __p.__r_.__value_.__r.__words[2] = 0;
              std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::push_back[abi:ne180100](&v251, (uint64_t)&__p);
              v169 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_)
                goto LABEL_230;
              v175 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v171 = __ldaxr(v175);
              while (__stlxr(v171 - 1, v175));
LABEL_252:
              if (!v171)
              {
                ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                std::__shared_weak_count::__release_weak(v169);
              }
              goto LABEL_230;
            }
            if (!shared_weak_owners)
            {
              v157[-1].__shared_weak_owners_ = 1;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v158[3].__on_zero_shared;
              std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v242, (unint64_t *)&__p, (uint64_t *)&__p);
              get_deleter = (std::string::size_type)v158[3].__get_deleter;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v158[3].__on_zero_shared;
              __p.__r_.__value_.__l.__size_ = get_deleter;
              if (get_deleter)
              {
                v167 = (unint64_t *)(get_deleter + 8);
                do
                  v168 = __ldxr(v167);
                while (__stxr(v168 + 1, v167));
              }
              __p.__r_.__value_.__r.__words[2] = 0;
              std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::push_back[abi:ne180100](&v251, (uint64_t)&__p);
              v169 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_)
                goto LABEL_230;
              v170 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v171 = __ldaxr(v170);
              while (__stlxr(v171 - 1, v170));
              goto LABEL_252;
            }
          }
          v252 = (std::__shared_weak_count *)std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v252[-1]);
LABEL_230:
          v162 = v250;
          if (v250)
          {
            v163 = (unint64_t *)&v250->__shared_owners_;
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
          v157 = v252;
          if (v251 == v252)
          {
            v153 = v247;
            break;
          }
        }
      }
      if (v153)
      {
        v176 = (unint64_t *)&v153->__shared_owners_;
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      v148 += 16;
      if (v148 != v149)
        continue;
      break;
    }
    v178 = (std::string::size_type *)v254;
    v179 = v255;
    v150 = (std::string::size_type *)MEMORY[0x24BEDB800];
    v151 = v238;
    if (v254 != v255)
    {
      do
      {
        __p.__r_.__value_.__r.__words[0] = *v178;
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v242, (unint64_t *)&__p, (uint64_t *)&__p);
        v178 += 2;
      }
      while (v178 != (std::string::size_type *)v179);
    }
  }
  if (v244 != (v258 - v257) >> 4)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Node detected that are not connected to any single root node. Note: ", 68);
    v180 = v257;
    for (i = v258; v180 != i; v180 += 16)
    {
      v182 = v243;
      if (v243)
      {
        v183 = *(_QWORD *)v180;
        v184 = &v243;
        do
        {
          v185 = v182;
          v186 = v184;
          v187 = v182[4];
          v188 = v182 + 1;
          if (v187 >= v183)
          {
            v188 = v185;
            v184 = (_QWORD **)v185;
          }
          v182 = (_QWORD *)*v188;
        }
        while (v182);
        if (v184 != &v243)
        {
          if (v187 < v183)
            v185 = v186;
          if (v183 >= v185[4])
            continue;
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"(TreeID=", 8);
      v189 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)", NodeID=", 9);
      v190 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)") ", 2);
    }
    std::stringbuf::str();
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v246, 0);
    v191 = MEMORY[0x24BEDB848];
    if (v248 < 0)
      operator delete(v246);
    __p.__r_.__value_.__r.__words[0] = *v150;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = v150[3];
    __p.__r_.__value_.__l.__size_ = v191 + 16;
    if (v268 < 0)
      operator delete(v267);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x219A198F4](v269);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v251;
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v242, v243);
  if (v239.__r_.__value_.__r.__words[0])
  {
    v239.__r_.__value_.__l.__size_ = v239.__r_.__value_.__r.__words[0];
    operator delete(v239.__r_.__value_.__l.__data_);
  }
  v192 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v192 + 1) = 0;
  *((_QWORD *)v192 + 2) = 0;
  *(_QWORD *)v192 = &unk_24D93D070;
  *(_OWORD *)(v192 + 40) = 0u;
  *(_OWORD *)(v192 + 56) = 0u;
  *(_OWORD *)(v192 + 88) = 0u;
  *(_OWORD *)(v192 + 104) = 0u;
  *(_OWORD *)(v192 + 120) = 0u;
  *(_OWORD *)(v192 + 136) = 0u;
  *((_QWORD *)v192 + 19) = 0;
  *(_OWORD *)(v192 + 72) = 0u;
  *(_OWORD *)(v192 + 24) = 0u;
  v193 = (uint64_t *)v254;
  v194 = (uint64_t *)v255;
  v195 = (v255 - v254) >> 4;
  *a2 = v192 + 24;
  a2[1] = v192;
  std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)(v192 + 72), v193, v194, v195);
  v196 = (v255 - v254) >> 4;
  *((_QWORD *)v192 + 3) = (v258 - v257) >> 4;
  *((_QWORD *)v192 + 4) = v196;
  *((_QWORD *)v192 + 5) = v151;
  std::vector<double>::resize((uint64_t)(v192 + 48), v151);
  v197 = *((int *)v231 + 10);
  if ((_DWORD)v197)
  {
    if (v151 == v197)
    {
      if ((int)v197 >= 1)
      {
        v198 = (_QWORD *)*((_QWORD *)v192 + 6);
        v199 = *((unsigned int *)v231 + 10);
        v200 = (uint64_t *)(v231[6] + 8);
        do
        {
          v201 = *v200++;
          *v198++ = v201;
          --v199;
        }
        while (v199);
      }
    }
    else
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Dimension of default value array (", 34);
      v202 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)") does not match specified output dimension (", 45);
      v203 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)").", 2);
      std::stringbuf::str();
      v204 = MEMORY[0x24BEDB848];
      CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v239, 0);
      if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v239.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = *v150;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = v150[3];
      __p.__r_.__value_.__l.__size_ = v204 + 16;
      if (v268 < 0)
        operator delete(v267);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x219A198F4](v269);
    }
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    std::vector<double>::assign((char **)v192 + 6, v151, &__p);
  }
  v205 = *((_DWORD *)v232 + 11);
  if (v205 == 402)
  {
    v206 = *((_QWORD *)v232 + 4);
    CoreML::Specification::Int64Vector::Int64Vector((CoreML::Specification::Int64Vector *)&v242);
    v207 = (std::string *)CoreML::Specification::StringVector::StringVector((CoreML::Specification::StringVector *)&v239);
    v208 = *(_DWORD *)(v206 + 44);
    if (v208 == 100)
    {
      v207 = CoreML::Specification::StringVector::CopyFrom(&v239, *(std::string **)(v206 + 32));
    }
    else if (v208 == 101)
    {
      v207 = (std::string *)CoreML::Specification::Int64Vector::CopyFrom((uint64_t *)&v242, *(const CoreML::Specification::GLMRegressor_DoubleArray **)(v206 + 32));
    }
    if (*((_DWORD *)v232 + 11) == 402)
      v209 = (uint64_t *)*((_QWORD *)v232 + 4);
    else
      v209 = CoreML::Specification::TreeEnsembleClassifier::default_instance((CoreML::Specification::TreeEnsembleClassifier *)v207);
    *((_DWORD *)v192 + 38) = *((_DWORD *)v209 + 6);
    v210 = v244;
    v211 = v240;
    if ((int)v244 <= v240)
      v212 = v240;
    else
      v212 = v244;
    if (!v212)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v192 + 13);
      if (v151 == 1)
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_2186CF1A0;
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v192 + 128, (char *)&__p, (uint64_t)&__p.__r_.__value_.__r.__words[2], 2uLL);
        v215 = 1;
      }
      else
      {
        std::vector<unsigned long>::resize((uint64_t)(v192 + 128), v151);
        if (v151)
        {
          v220 = 0;
          v221 = *((_QWORD *)v192 + 16);
          do
          {
            *(_QWORD *)(v221 + 8 * v220) = v220;
            ++v220;
          }
          while (v151 != v220);
        }
        v215 = 2;
      }
      *((_DWORD *)v192 + 24) = v215;
      goto LABEL_336;
    }
    v213 = v212;
    if (v151 == 1 && v212 == 2)
    {
      v214 = 1;
    }
    else
    {
      if (v151 < 2 || v151 != v212)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Specified output dimension (", 28);
        v222 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)") does not match the given number of classes (", 46);
        v223 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)").", 2);
        std::stringbuf::str();
        CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v260, (uint64_t)&v251, 0);
        if (SHIBYTE(v253) < 0)
          operator delete(v251);
        __p.__r_.__value_.__r.__words[0] = *v150;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                  + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = v150[3];
        __p.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
        if (v268 < 0)
          operator delete(v267);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x219A198F4](v269);
        goto LABEL_336;
      }
      v214 = 2;
    }
    *((_DWORD *)v192 + 24) = v214;
    if (v210 <= v211)
      std::vector<std::string>::resize((std::vector<std::string> *)(v192 + 104), v213);
    else
      std::vector<unsigned long>::resize((uint64_t)(v192 + 128), v213);
    v216 = 0;
    v217 = 0;
    v218 = 0;
    if (v213 <= 1)
      v213 = 1;
    do
    {
      v219 = v216 >> 32;
      if (v210 <= v211)
        std::string::operator=((std::string *)(*((_QWORD *)v192 + 13) + v217), *(const std::string **)(v241 + 8 * v219 + 8));
      else
        *(_QWORD *)(*((_QWORD *)v192 + 16) + 8 * v218) = *(_QWORD *)(v245 + 8 * v219 + 8);
      ++v218;
      v217 += 24;
      v216 += 0x100000000;
    }
    while (v213 != v218);
LABEL_336:
    CoreML::Specification::StringVector::~StringVector((CoreML::Specification::StringVector *)&v239);
    CoreML::Specification::Int64Vector::~Int64Vector((CoreML::Specification::Int64Vector *)&v242);
    v150 = (std::string::size_type *)MEMORY[0x24BEDB800];
    goto LABEL_337;
  }
  if (v205 == 302)
  {
    *((_DWORD *)v192 + 24) = 0;
    *((_DWORD *)v192 + 38) = *(_DWORD *)(*((_QWORD *)v232 + 4) + 24);
  }
LABEL_337:
  if (v264)
  {
    v226 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    v227 = std::string::insert(&v239, 0, "Error(s) in tree structure: \n");
    v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v227->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v228;
    v227->__r_.__value_.__l.__size_ = 0;
    v227->__r_.__value_.__r.__words[2] = 0;
    v227->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v226, &__p);
    __cxa_throw(v226, MEMORY[0x24BEDB720], (void (*)(void *))MEMORY[0x24BEDAAC0]);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v254;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v261[0] = *v150;
  *(_QWORD *)((char *)v261 + *(_QWORD *)(v261[0] - 24)) = v150[3];
  v261[1] = MEMORY[0x24BEDB848] + 16;
  if (v262 < 0)
    operator delete((void *)v261[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v263);
}

void sub_2183878FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a43 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x250]);
  CoreML::Specification::StringVector::~StringVector((CoreML::Specification::StringVector *)&a22);
  CoreML::Specification::Int64Vector::~Int64Vector((CoreML::Specification::Int64Vector *)&a28);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a10);
  STACK[0x250] = (unint64_t)&a44;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  a22 = &a47;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a52);
  _Unwind_Resume(a1);
}

_QWORD *CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(_QWORD **a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *result;
  std::logic_error *exception;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;

  ++**a1;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[1], (uint64_t)"\n  ", 3);
  if (a3)
    v7 = "FATAL: ";
  else
    v7 = "";
  if (a3)
    v8 = 7;
  else
    v8 = 0;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = a2;
  else
    v11 = *(_QWORD *)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)";", 1);
  if (**a1 >= 0x32uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[1], (uint64_t)"\n  FATAL: maximum number of errors reached; aborting processing.",
      64);
LABEL_17:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    v16 = std::string::insert(&v18, 0, "Errors encountered during processing tree model:\n");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v19);
    __cxa_throw(exception, MEMORY[0x24BEDB720], (void (*)(void *))MEMORY[0x24BEDAAC0]);
  }
  if (a3)
    goto LABEL_17;
  return result;
}

void sub_218387E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

_QWORD *CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_2::operator()@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v12;
  void *__p;
  char v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  unint64_t v18[2];

  v18[0] = a2;
  v18[1] = a3;
  result = std::__tree<std::pair<unsigned long,unsigned long>>::find<std::pair<unsigned long,unsigned long>>(*a1, v18);
  if ((_QWORD *)(*a1 + 8) == result)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Tree Node with TreeID=", 22);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" and NodeID=", 12);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" referenced but not declared in specification.", 46);
    v12 = (_QWORD **)a1[1];
    std::stringbuf::str();
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v12, (uint64_t)&__p, 0);
    if (v14 < 0)
      operator delete(__p);
    v15[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    *a4 = 0;
    a4[1] = 0;
    v15[1] = MEMORY[0x24BEDB848] + 16;
    if (v16 < 0)
      operator delete((void *)v15[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x219A198F4](&v17);
  }
  else
  {
    v7 = result[7];
    *a4 = result[6];
    a4[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  return result;
}

void sub_218387FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::push_back[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    v16[2] = v14 + 24;
    std::vector<turi::query_eval::execution_node::input_node>::__swap_out_circular_buffer(a1, v16);
    v8 = a1[1];
    result = std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
    v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_218388118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<double>::assign(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 3;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 3;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_QWORD *)v16 = *a3;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[8 * a2];
    }
    else
    {
      v17 = &v13[8 * (a2 - v14)];
      v18 = 8 * a2 - 8 * v14;
      do
      {
        *(_QWORD *)v13 = *a3;
        v13 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[8 * a2];
    v12 = 8 * a2;
    do
    {
      *(_QWORD *)v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  char v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 16);
      v7 = *(_QWORD *)a1;
      if (v6 < *(_QWORD *)a1)
      {
        v8 = *(double *)(a1 + 8);
        v9 = *(double *)(a2 - 8);
LABEL_30:
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 16) = v7;
        *(double *)(a1 + 8) = v9;
        *(double *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(double *)(a2 - 8);
        v8 = *(double *)(a1 + 8);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16));
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(_QWORD *)v11;
  v15 = *(_QWORD *)v10;
  if (*(_QWORD *)v11 >= *(_QWORD *)v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *(double *)(v11 + 8);
    v17 = *(double *)(v10 + 8);
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = *(double *)(v11 + 8);
    v17 = *(double *)(v10 + 8);
  }
  *(_QWORD *)v11 = v15;
  *(double *)(v11 + 8) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(_QWORD *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(double *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = a1 + v19 + 32;
LABEL_20:
        *(_QWORD *)v18 = v14;
        *(double *)(v18 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(double *)(v20 + 24);
    }
    v10 -= 16;
    *(_QWORD *)(v20 + 32) = v21;
    *(double *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeComputationNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93D020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeComputationNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93D020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeComputationNode>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<CoreML::TreeEnsembles::_TreeComputationNode>::destroy[abi:ne180100]((uint64_t)&v1, (_QWORD *)(a1 + 24));
}

void std::allocator<CoreML::TreeEnsembles::_TreeComputationNode>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  void *v4;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 17));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 15));
  v3 = (std::__shared_weak_count *)a2[14];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (void *)a2[10];
  if (v4)
  {
    a2[11] = v4;
    operator delete(v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_equal<std::pair<unsigned long,unsigned long>>(a1, a2, &v14, &v13, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v11[1] = a1 + 1;
    v9 = *(_OWORD *)(a4 + 16);
    *((_OWORD *)v7 + 2) = *(_OWORD *)a4;
    *((_OWORD *)v7 + 3) = v9;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    v12 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v14, v8, v7);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  unint64_t v17;
  unint64_t *v18;
  char v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,unsigned long> *,std::__less<void,void> &>(v9, a2);
            v9 = (unint64_t *)result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,unsigned long> *,std::__less<void,void> &>(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v9, v18);
          v9 = v18 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,std::pair<unsigned long,unsigned long> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[2];
    v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6)
        goto LABEL_19;
      v8 = v5[3];
      if (v8 >= v5[1])
        goto LABEL_19;
    }
    else
    {
      v8 = v5[3];
    }
    v5[2] = v7;
    v4[1] = v5[1];
    v9 = result;
    if (v5 == result)
      goto LABEL_18;
    v10 = v3;
    while (1)
    {
      v11 = *(unint64_t *)((char *)result + v10 - 16);
      if (v6 >= v11)
        break;
      v12 = *(unint64_t *)((char *)result + v10 - 8);
LABEL_12:
      v5 -= 2;
      v13 = (unint64_t *)((char *)result + v10);
      *v13 = v11;
      v13[1] = v12;
      v10 -= 16;
      if (!v10)
      {
        v9 = result;
        goto LABEL_18;
      }
    }
    if (v11 >= v6)
    {
      v9 = (unint64_t *)((char *)result + v10);
      v12 = *(unint64_t *)((char *)result + v10 - 8);
      if (v8 >= v12)
        goto LABEL_18;
      goto LABEL_12;
    }
    v9 = v5;
LABEL_18:
    *v9 = v6;
    v9[1] = v8;
LABEL_19:
    v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v11 = (uint64_t *)(a2 + 1);
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = (uint64_t *)(a1 + 1);
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = (uint64_t *)(a1 + 1);
      *a3 = v4;
      v7 = (uint64_t *)(a3 + 1);
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = (uint64_t *)(a3 + 1);
      v8 = 2;
      v6 = (uint64_t *)(a2 + 1);
    }
    v11 = v7;
  }
  v17 = *v6;
  *v6 = *v11;
  *v11 = v17;
  return v8;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,unsigned long> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *i;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,unsigned long> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v3 < v9)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unint64_t *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unint64_t *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && v13[1] < v4);
      do
      {
        v17 = *(v14 - 2);
        v14 -= 2;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v10;
    v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13)
        goto LABEL_23;
      v15 = v10[1];
      if (v15 >= v9[1])
        goto LABEL_23;
    }
    else
    {
      v15 = v10[1];
    }
    *v10 = v14;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_22;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        v20 = *((_QWORD *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        v16 = v9;
        goto LABEL_22;
      }
      v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20)
        break;
LABEL_18:
      v9 -= 2;
      *((_QWORD *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        v16 = a1;
        goto LABEL_22;
      }
    }
    v16 = (unint64_t *)((char *)a1 + v17 + 32);
LABEL_22:
    *v16 = v13;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_23:
    v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *v14 = v16;
          *a1 = v15;
          v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v18 = (unint64_t)v8 >> 4;
      v19 = a2 - 2;
      do
      {
        v21 = *a1;
        v20 = a1[1];
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          v19[1] = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_QWORD *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          v13 = a4[1];
          if (v8[1] < v13)
            return result;
        }
        else
        {
          v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (unint64_t *)(result + 16 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_QWORD *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_23;
          }
        }
        v14 = v8;
LABEL_23:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_QWORD *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v9 = *(_QWORD *)(a2 - 8);
      if (*(_QWORD *)(result + 16 * v5 + 8) >= v9)
        return result;
    }
    else
    {
      v9 = *(_QWORD *)(a2 - 8);
    }
    *(_QWORD *)(a2 - 16) = v7;
    *(_QWORD *)(a2 - 8) = *(_QWORD *)(result + 16 * v5 + 8);
    if (v4 >= 2)
    {
      while (1)
      {
        v11 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v10 = (unint64_t *)(result + 16 * v5);
        v12 = *v10;
        if (*v10 >= v8)
        {
          if (v8 < v12)
            break;
          v13 = *(_QWORD *)(result + 16 * v5 + 8);
          if (v13 >= v9)
            break;
        }
        else
        {
          v13 = v10[1];
        }
        *v6 = v12;
        v6[1] = v13;
        v6 = (unint64_t *)(result + 16 * v5);
        if (v11 <= 1)
          goto LABEL_13;
      }
    }
    v10 = v6;
LABEL_13:
    *v10 = v8;
    v10[1] = v9;
  }
  return result;
}

uint64_t std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2;
  v8 = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    result = (uint64_t)std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v10);
    v12 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v13 = v6[1];
      *v12 = *v6;
      v12[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v12[2] = v6[2];
      v6 += 3;
      v12 += 3;
    }
LABEL_21:
    *(_QWORD *)(a1 + 8) = v12;
    return result;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3) < a4)
  {
    v16 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3];
    result = (uint64_t)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*,0>(a2, v16, v8);
    v12 = *(uint64_t **)(a1 + 8);
    while (v16 != a3)
    {
      v17 = v16[1];
      *v12 = *v16;
      v12[1] = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v12[2] = v16[2];
      v16 += 3;
      v12 += 3;
    }
    goto LABEL_21;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*,0>(a2, a3, v8);
  v21 = v20;
  result = *(_QWORD *)(a1 + 8);
  if (result != v20)
  {
    do
      result = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](result - 24);
    while (result != v21);
  }
  *(_QWORD *)(a1 + 8) = v21;
  return result;
}

void std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v3 - 24);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*,0>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a3, v4);
    a3[2] = v4[2];
    a3 += 3;
    v4 += 3;
  }
  while (v4 != v5);
  return v5;
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeEnsemble>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93D070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeEnsemble>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D93D070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeEnsemble>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<CoreML::TreeEnsembles::_TreeEnsemble>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<CoreML::TreeEnsembles::_TreeEnsemble>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  v3 = *(void **)(a2 + 104);
  if (v3)
  {
    *(_QWORD *)(a2 + 112) = v3;
    operator delete(v3);
  }
  v5 = (void **)(a2 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a2 + 48);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v4 = *(void **)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a2 + 32) = v4;
    operator delete(v4);
  }
}

uint64_t _GLOBAL__sub_I_TreeEnsembleCommon_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t png_sig_cmp(uint64_t a1, unint64_t a2, size_t a3)
{
  if (a3 <= 8)
  {
    if (!a3)
      return 0xFFFFFFFFLL;
  }
  else
  {
    a3 = 8;
  }
  if (a2 > 7)
    return 0xFFFFFFFFLL;
  if (a3 + a2 > 8)
    a3 = 8 - a2;
  return memcmp((const void *)(a1 + a2), (char *)&unk_2186FA188 + a2, a3);
}

_QWORD *png_zalloc(_QWORD *result, unsigned int a2, unsigned int a3)
{
  if (result)
    return png_malloc_warn(result, a3 * (unint64_t)a2);
  return result;
}

uLong png_reset_crc(uint64_t a1)
{
  uLong result;

  result = crc32(0, 0, 0);
  *(_DWORD *)(a1 + 580) = result;
  return result;
}

uint64_t png_calculate_crc(uint64_t result, Bytef *buf, uint64_t a3)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(result + 531) & 0x20) != 0)
    v3 = (~*(_DWORD *)(result + 296) & 0x300) != 0;
  else
    v3 = (*(_DWORD *)(result + 296) & 0x800) == 0;
  if (a3 && v3)
  {
    v4 = a3;
    v6 = result;
    result = *(unsigned int *)(result + 580);
    do
    {
      if ((_DWORD)v4)
        v7 = v4;
      else
        v7 = 0xFFFFFFFFLL;
      result = crc32(result, buf, v7);
      buf += v7;
      v4 -= v7;
    }
    while (v4);
    *(_DWORD *)(v6 + 580) = result;
  }
  return result;
}

uint64_t png_user_version_check(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = a2[v4];
      if (v6 != a1637[v4])
        *(_DWORD *)(a1 + 296) |= 0x20000u;
      if (v6 == 46)
        ++v5;
    }
    while (v5 <= 1 && v4++ != 6 && v6 != 0);
    if ((*(_BYTE *)(a1 + 298) & 2) == 0)
      return 1;
  }
  else
  {
    *(_DWORD *)(a1 + 296) |= 0x20000u;
  }
  v10 = png_safecat((uint64_t)v13, 0x80uLL, 0, "Application built with libpng-");
  v11 = png_safecat((uint64_t)v13, 0x80uLL, v10, a2);
  v12 = png_safecat((uint64_t)v13, 0x80uLL, v11, " but running with ");
  png_safecat((uint64_t)v13, 0x80uLL, v12, "1.6.37");
  png_warning(a1, v13);
  return 0;
}

_QWORD *png_create_png_struct(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *result;
  _QWORD *v15;
  _OWORD v16[12];
  _QWORD __src[158];

  __src[157] = *MEMORY[0x24BDAC8D0];
  memset(v16, 0, sizeof(v16));
  bzero(__src, 0x4E8uLL);
  HIDWORD(__src[131]) = 1000000;
  __src[132] = 0x3E8000F4240;
  __src[133] = 8000000;
  png_set_mem_fn(__src, a5, a6, a7);
  png_set_error_fn(__src, a2, a3, a4);
  if (setjmp((int *)v16))
    return 0;
  __src[26] = 0;
  __src[24] = MEMORY[0x24BDAEB00];
  __src[25] = v16;
  if (!png_user_version_check((uint64_t)__src, a1))
    return 0;
  result = png_malloc_warn(__src, 0x4E8uLL);
  if (result)
  {
    __src[47] = png_zalloc;
    __src[48] = png_zfree;
    v15 = result;
    __src[49] = result;
    memset(&__src[24], 0, 24);
    memcpy(result, __src, 0x4E8uLL);
    return v15;
  }
  return result;
}

double png_create_info_struct(uint64_t a1)
{
  _QWORD *v1;
  double result;

  if (a1)
  {
    v1 = png_malloc_base(a1, 0x168uLL);
    if (v1)
    {
      v1[44] = 0;
      result = 0.0;
      *((_OWORD *)v1 + 20) = 0u;
      *((_OWORD *)v1 + 21) = 0u;
      *((_OWORD *)v1 + 18) = 0u;
      *((_OWORD *)v1 + 19) = 0u;
      *((_OWORD *)v1 + 16) = 0u;
      *((_OWORD *)v1 + 17) = 0u;
      *((_OWORD *)v1 + 14) = 0u;
      *((_OWORD *)v1 + 15) = 0u;
      *((_OWORD *)v1 + 12) = 0u;
      *((_OWORD *)v1 + 13) = 0u;
      *((_OWORD *)v1 + 10) = 0u;
      *((_OWORD *)v1 + 11) = 0u;
      *((_OWORD *)v1 + 8) = 0u;
      *((_OWORD *)v1 + 9) = 0u;
      *((_OWORD *)v1 + 6) = 0u;
      *((_OWORD *)v1 + 7) = 0u;
      *((_OWORD *)v1 + 4) = 0u;
      *((_OWORD *)v1 + 5) = 0u;
      *((_OWORD *)v1 + 2) = 0u;
      *((_OWORD *)v1 + 3) = 0u;
      *(_OWORD *)v1 = 0u;
      *((_OWORD *)v1 + 1) = 0u;
    }
  }
  return result;
}

void png_destroy_info_struct(uint64_t a1, void **a2)
{
  _QWORD *v2;

  if (a1 && a2)
  {
    v2 = *a2;
    if (*a2)
    {
      *a2 = 0;
      png_free_data(a1, (uint64_t)v2, 0xFFFFu, -1);
      v2[44] = 0;
      *((_OWORD *)v2 + 20) = 0u;
      *((_OWORD *)v2 + 21) = 0u;
      *((_OWORD *)v2 + 18) = 0u;
      *((_OWORD *)v2 + 19) = 0u;
      *((_OWORD *)v2 + 16) = 0u;
      *((_OWORD *)v2 + 17) = 0u;
      *((_OWORD *)v2 + 14) = 0u;
      *((_OWORD *)v2 + 15) = 0u;
      *((_OWORD *)v2 + 12) = 0u;
      *((_OWORD *)v2 + 13) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 11) = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *((_OWORD *)v2 + 3) = 0u;
      *(_OWORD *)v2 = 0u;
      *((_OWORD *)v2 + 1) = 0u;
      png_free(a1, v2);
    }
  }
}

void png_free_data(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  unint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  unsigned int v26;

  if (a1 && a2)
  {
    v8 = *(void **)(a2 + 160);
    if (v8 && (a3 & *(_DWORD *)(a2 + 300) & 0x4000) != 0)
    {
      if (a4 == -1)
      {
        if (*(int *)(a2 + 148) >= 1)
        {
          v9 = 0;
          v10 = 8;
          do
          {
            png_free(a1, *(void **)(*(_QWORD *)(a2 + 160) + v10));
            ++v9;
            v10 += 56;
          }
          while (v9 < *(int *)(a2 + 148));
          v8 = *(void **)(a2 + 160);
        }
        png_free(a1, v8);
        *(_QWORD *)(a2 + 160) = 0;
        *(_DWORD *)(a2 + 148) = 0;
        *(_DWORD *)(a2 + 152) = 0;
      }
      else
      {
        png_free(a1, *((void **)v8 + 7 * a4 + 1));
        *(_QWORD *)(*(_QWORD *)(a2 + 160) + 56 * a4 + 8) = 0;
      }
    }
    v11 = *(_DWORD *)(a2 + 300);
    if ((a3 & v11 & 0x2000) != 0)
    {
      *(_DWORD *)(a2 + 8) &= ~0x10u;
      png_free(a1, *(void **)(a2 + 184));
      *(_QWORD *)(a2 + 184) = 0;
      *(_WORD *)(a2 + 34) = 0;
      v11 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v11 & 0x100) != 0)
    {
      png_free(a1, *(void **)(a2 + 336));
      png_free(a1, *(void **)(a2 + 344));
      *(_QWORD *)(a2 + 336) = 0;
      *(_QWORD *)(a2 + 344) = 0;
      *(_DWORD *)(a2 + 8) &= ~0x4000u;
      v11 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v11 & 0x80) != 0)
    {
      png_free(a1, *(void **)(a2 + 264));
      png_free(a1, *(void **)(a2 + 280));
      *(_QWORD *)(a2 + 264) = 0;
      *(_QWORD *)(a2 + 280) = 0;
      v12 = *(void **)(a2 + 288);
      if (v12)
      {
        if (*(_BYTE *)(a2 + 297))
        {
          v13 = 0;
          do
            png_free(a1, *(void **)(*(_QWORD *)(a2 + 288) + 8 * v13++));
          while (v13 < *(unsigned __int8 *)(a2 + 297));
          v12 = *(void **)(a2 + 288);
        }
        png_free(a1, v12);
        *(_QWORD *)(a2 + 288) = 0;
      }
      *(_DWORD *)(a2 + 8) &= ~0x400u;
      v11 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v11 & 0x10) != 0)
    {
      png_free(a1, *(void **)(a2 + 128));
      png_free(a1, *(void **)(a2 + 136));
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_DWORD *)(a2 + 8) &= ~0x1000u;
    }
    v14 = *(void **)(a2 + 320);
    if (v14 && (a3 & *(_DWORD *)(a2 + 300) & 0x20) != 0)
    {
      if (a4 == -1)
      {
        if (*(int *)(a2 + 328) >= 1)
        {
          v16 = 0;
          v17 = 0;
          do
          {
            png_free(a1, *(void **)(*(_QWORD *)(a2 + 320) + v16));
            png_free(a1, *(void **)(*(_QWORD *)(a2 + 320) + v16 + 16));
            ++v17;
            v16 += 32;
          }
          while (v17 < *(int *)(a2 + 328));
          v14 = *(void **)(a2 + 320);
        }
        png_free(a1, v14);
        *(_QWORD *)(a2 + 320) = 0;
        *(_DWORD *)(a2 + 328) = 0;
        *(_DWORD *)(a2 + 8) &= ~0x2000u;
      }
      else
      {
        png_free(a1, *((void **)v14 + 4 * a4));
        png_free(a1, *(void **)(*(_QWORD *)(a2 + 320) + 32 * a4 + 16));
        v15 = (_QWORD *)(*(_QWORD *)(a2 + 320) + 32 * a4);
        *v15 = 0;
        v15[2] = 0;
      }
    }
    v18 = *(void **)(a2 + 304);
    if (v18 && (a3 & *(_DWORD *)(a2 + 300) & 0x200) != 0)
    {
      if (a4 == -1)
      {
        if (*(int *)(a2 + 312) >= 1)
        {
          v19 = 0;
          v20 = 8;
          do
          {
            png_free(a1, *(void **)(*(_QWORD *)(a2 + 304) + v20));
            ++v19;
            v20 += 32;
          }
          while (v19 < *(int *)(a2 + 312));
          v18 = *(void **)(a2 + 304);
        }
        png_free(a1, v18);
        *(_QWORD *)(a2 + 304) = 0;
        *(_DWORD *)(a2 + 312) = 0;
      }
      else
      {
        png_free(a1, *((void **)v18 + 4 * a4 + 1));
        *(_QWORD *)(*(_QWORD *)(a2 + 304) + 32 * a4 + 8) = 0;
      }
    }
    v21 = *(_DWORD *)(a2 + 300);
    if ((a3 & v21 & 0x8000) != 0)
    {
      v22 = *(void **)(a2 + 248);
      if (v22)
      {
        png_free(a1, v22);
        *(_QWORD *)(a2 + 248) = 0;
      }
      v23 = *(void **)(a2 + 240);
      if (v23)
      {
        png_free(a1, v23);
        *(_QWORD *)(a2 + 240) = 0;
      }
      *(_DWORD *)(a2 + 8) &= ~0x10000u;
      v21 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v21 & 8) != 0)
    {
      png_free(a1, *(void **)(a2 + 256));
      *(_QWORD *)(a2 + 256) = 0;
      *(_DWORD *)(a2 + 8) &= ~0x40u;
      v21 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v21 & 0x1000) != 0)
    {
      png_free(a1, *(void **)(a2 + 24));
      *(_QWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 8) &= ~8u;
      *(_WORD *)(a2 + 32) = 0;
      v21 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v21 & 0x40) != 0)
    {
      v24 = *(void **)(a2 + 352);
      if (v24)
      {
        if (*(_DWORD *)(a2 + 4))
        {
          v25 = 0;
          do
            png_free(a1, *(void **)(*(_QWORD *)(a2 + 352) + 8 * v25++));
          while (v25 < *(unsigned int *)(a2 + 4));
          v24 = *(void **)(a2 + 352);
        }
        png_free(a1, v24);
        *(_QWORD *)(a2 + 352) = 0;
        v21 = *(_DWORD *)(a2 + 300);
      }
      *(_DWORD *)(a2 + 8) &= ~0x8000u;
    }
    v26 = a3 & 0xFFFFBDDF;
    if (a4 == -1)
      v26 = a3;
    *(_DWORD *)(a2 + 300) = v21 & ~v26;
  }
}

uint64_t png_get_io_ptr(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 256);
  return result;
}

uint64_t png_handle_as_unknown(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;

  result = 0;
  if (a1 && a2)
  {
    v4 = *(_DWORD *)(a1 + 956);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 960);
      v6 = v5 + (5 * v4);
      v7 = v6;
      while (1)
      {
        v8 = *(_DWORD *)(v7 - 5);
        v7 -= 5;
        if (*a2 == v8)
          break;
        v6 = v7;
        if (v7 <= v5)
          return 0;
      }
      return *(unsigned __int8 *)(v6 - 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t png_chunk_unknown_handling(uint64_t a1, int a2)
{
  int v3;
  char v4;

  LOBYTE(v3) = HIBYTE(a2);
  BYTE1(v3) = BYTE2(a2);
  BYTE2(v3) = BYTE1(a2);
  HIBYTE(v3) = a2;
  v4 = 0;
  return png_handle_as_unknown(a1, &v3);
}

uint64_t png_zstream_error(uint64_t result, int a2)
{
  const char *v2;

  if (!*(_QWORD *)(result + 360))
  {
    if ((a2 + 7) > 9)
      v2 = "unexpected zlib return code";
    else
      v2 = off_24D93D0B0[a2 + 7];
    *(_QWORD *)(result + 360) = v2;
  }
  return result;
}

uint64_t png_colorspace_set_gamma(uint64_t result, uint64_t a2, int a3)
{
  __int16 v4;
  char *v5;

  if ((a3 - 625000001) < 0xDABF41CF)
  {
    v4 = *(_WORD *)(a2 + 74);
    v5 = "gamma value out of range";
LABEL_6:
    *(_WORD *)(a2 + 74) = v4 | 0x8000;
    return png_chunk_report(result, v5, 1);
  }
  v4 = *(_WORD *)(a2 + 74);
  if ((*(_BYTE *)(result + 293) & 0x80) != 0 && (v4 & 8) != 0)
  {
    v5 = "duplicate";
    goto LABEL_6;
  }
  if ((*(_WORD *)(a2 + 74) & 0x8000) == 0)
  {
    result = png_colorspace_check_gamma(result, a2, a3, 1);
    if ((_DWORD)result)
    {
      *(_DWORD *)a2 = a3;
      *(_WORD *)(a2 + 74) = v4 | 9;
    }
  }
  return result;
}

uint64_t png_colorspace_check_gamma(uint64_t a1, uint64_t a2, int a3, int a4)
{
  __int16 v4;
  double v5;
  BOOL v6;
  BOOL v7;
  _BOOL8 v8;

  v4 = *(_WORD *)(a2 + 74);
  if ((v4 & 1) != 0)
  {
    if (!a3
      || !*(_DWORD *)a2
      || ((v5 = floor((double)*(int *)a2 * 100000.0 / (double)a3 + 0.5), v5 <= 2147483650.0)
        ? (v6 = v5 < -2147483650.0)
        : (v6 = 1),
          !v6 ? (v7 = ((int)v5 - 95000) >= 0x2711) : (v7 = 1),
          v7))
    {
      if (a4 == 2 || (v4 & 0x20) != 0)
      {
        v8 = a4 == 2;
        png_chunk_report(a1, "gamma value does not match sRGB", 2);
        return v8;
      }
      png_chunk_report(a1, "gamma value does not match libpng estimate", 0);
    }
  }
  return 1;
}

void png_colorspace_sync_info(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(_DWORD *)(a2 + 8);
  if (*(__int16 *)(a2 + 126) < 0)
  {
    *(_DWORD *)(a2 + 8) = v2 & 0xFFFFE7FA;
    png_free_data(a1, a2, 0x10u, -1);
  }
  else
  {
    v3 = *(unsigned __int16 *)(a2 + 126);
    v4 = v2 & 0xFFFFF7FB | (((v3 >> 7) & 1) << 11) | (4 * ((v3 >> 1) & 1));
    if ((v3 & 1) != 0)
      v5 = v4 | 1;
    else
      v5 = v4 & 0xFFFFFFFE;
    *(_DWORD *)(a2 + 8) = v5;
  }
}

void png_colorspace_sync(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  if (a2)
  {
    v2 = *(_OWORD *)(a1 + 1176);
    *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 1192);
    v3 = *(_OWORD *)(a1 + 1224);
    *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 1208);
    *(_OWORD *)(a2 + 100) = v3;
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 1236);
    *(_OWORD *)(a2 + 52) = v2;
    png_colorspace_sync_info(a1, a2);
  }
}

uint64_t png_colorspace_set_chromaticities(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v8;
  _OWORD v10[2];
  int v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v8 = png_colorspace_check_xy((int *)v10, a3);
  if (v8 == 1)
  {
    *(_WORD *)(a2 + 74) |= 0x8000u;
    png_benign_error(a1, "invalid chromaticities");
    return 0;
  }
  else
  {
    if (v8)
    {
      *(_WORD *)(a2 + 74) |= 0x8000u;
      png_error(a1, "internal error checking chromaticities");
    }
    return png_colorspace_set_xy_and_XYZ(a1, a2, (uint64_t)a3, (uint64_t)v10, a4);
  }
}

uint64_t png_colorspace_check_xy(int *a1, int *a2)
{
  int v2;
  uint64_t result;
  int v5;
  unsigned int v6;
  signed int v7;
  unsigned int v8;
  signed int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double v15;
  int v17;
  int v18;
  int v19;
  double v20;
  int v22;
  int v23;
  double v24;
  int v26;
  int v27;
  double v28;
  int v30;
  int v31;
  int v32;
  double v33;
  int v35;
  double v36;
  int v38;
  double v39;
  int v41;
  double v42;
  double v44;
  double v45;
  BOOL v46;
  unsigned int v47;
  double v48;
  double v49;
  double v50;
  BOOL v51;
  unsigned int v52;
  double v53;
  unsigned int v54;
  double v55;
  double v56;
  BOOL v57;
  unsigned int v58;
  int v59;
  double v60;
  int v62;
  double v63;
  int v65;
  double v66;
  int v68;
  double v69;
  int v71;
  double v72;
  int v74;
  double v75;
  int v77;
  double v78;
  int v80;
  double v81;
  int v83;
  double v84;
  _OWORD v87[2];

  v2 = *a2;
  if (*a2 > 0x186A0)
    return 1;
  v5 = a2[1];
  result = 1;
  if ((v5 & 0x80000000) == 0 && v5 <= 100000 - v2)
  {
    v6 = a2[2];
    if (v6 <= 0x186A0)
    {
      v7 = a2[3];
      if ((v7 & 0x80000000) == 0 && v7 <= (int)(100000 - v6))
      {
        v8 = a2[4];
        if (v8 <= 0x186A0)
        {
          v9 = a2[5];
          if ((v9 & 0x80000000) == 0 && v9 <= (int)(100000 - v8))
          {
            v10 = a2[6];
            if (v10 <= 0x186A0)
            {
              v11 = a2[7];
              if (v11 >= 5 && v11 <= (int)(100000 - v10))
              {
                v12 = 0;
                v13 = v5 - v9;
                v14 = v6 - v8;
                if (v6 != v8 && v5 != v9)
                {
                  v15 = floor((double)v14 * (double)v13 / 7.0 + 0.5);
                  if (v15 > 2147483650.0 || v15 < -2147483650.0)
                    return 2;
                  v12 = (int)v15;
                }
                v17 = 0;
                v18 = v7 - v9;
                v19 = v2 - v8;
                if (v2 != v8 && v7 != v9)
                {
                  v20 = floor((double)v19 * (double)v18 / 7.0 + 0.5);
                  if (v20 > 2147483650.0 || v20 < -2147483650.0)
                    return 2;
                  v17 = (int)v20;
                }
                v22 = 0;
                v23 = v11 - v9;
                if (v6 != v8 && v11 != v9)
                {
                  v24 = floor((double)v14 * (double)v23 / 7.0 + 0.5);
                  if (v24 > 2147483650.0 || v24 < -2147483650.0)
                    return 2;
                  v22 = (int)v24;
                }
                v26 = 0;
                v27 = v10 - v8;
                if (v7 != v9 && v10 != v8)
                {
                  v28 = floor((double)v18 * (double)v27 / 7.0 + 0.5);
                  if (v28 > 2147483650.0 || v28 < -2147483650.0)
                    return 2;
                  v26 = (int)v28;
                }
                v30 = v22 - v26;
                if (v22 == v26)
                  return 1;
                v31 = v12 - v17;
                if (v12 == v17)
                {
                  v32 = 0;
                }
                else
                {
                  v33 = floor((double)v11 * (double)v31 / (double)v30 + 0.5);
                  if (v33 > 2147483650.0 || v33 < -2147483650.0)
                    return 1;
                  v32 = (int)v33;
                }
                if (v32 <= v11)
                  return 1;
                v35 = 0;
                if (v5 != v9 && v10 != v8)
                {
                  v36 = floor((double)v13 * (double)v27 / 7.0 + 0.5);
                  if (v36 > 2147483650.0 || v36 < -2147483650.0)
                    return 2;
                  v35 = (int)v36;
                }
                v38 = 0;
                if (v2 == v8 || v11 == v9)
                {
LABEL_67:
                  if (v35 != v38)
                  {
                    if (v12 == v17)
                    {
                      v41 = 0;
                    }
                    else
                    {
                      v42 = floor((double)v11 * (double)v31 / (double)(v35 - v38) + 0.5);
                      if (v42 > 2147483650.0 || v42 < -2147483650.0)
                        return 1;
                      v41 = (int)v42;
                    }
                    if (v41 <= v11)
                      return 1;
                    v44 = 1.0e10 / (double)v11 + 0.5;
                    v45 = floor(v44);
                    v46 = v45 < -2147483650.0 || v45 > 2147483650.0;
                    v47 = vcvtmd_s64_f64(v44);
                    if (v46)
                      v47 = 0;
                    v48 = (double)v32;
                    v49 = 1.0e10 / (double)v32 + 0.5;
                    v50 = floor(v49);
                    v51 = v50 < -2147483650.0 || v50 > 2147483650.0;
                    v52 = vcvtmd_s64_f64(v49);
                    v53 = (double)v41;
                    if (v51)
                      v54 = 0;
                    else
                      v54 = v52;
                    v55 = 1.0e10 / v53 + 0.5;
                    v56 = floor(v55);
                    v57 = v56 < -2147483650.0 || v56 > 2147483650.0;
                    v58 = vcvtmd_s64_f64(v55);
                    if (v57)
                      v58 = 0;
                    v59 = v47 - (v54 + v58);
                    if (v59 < 1)
                      return 1;
                    if (v2)
                    {
                      v60 = floor((double)v2 * 100000.0 / v48 + 0.5);
                      if (v60 > 2147483650.0 || v60 < -2147483650.0)
                        return 1;
                      v2 = (int)v60;
                    }
                    *a1 = v2;
                    v62 = a2[1];
                    if (v62)
                    {
                      v63 = floor((double)v62 * 100000.0 / v48 + 0.5);
                      if (v63 > 2147483650.0 || v63 < -2147483650.0)
                        return 1;
                      v62 = (int)v63;
                    }
                    a1[1] = v62;
                    v65 = 100000 - (a2[1] + *a2);
                    if (v65)
                    {
                      v66 = floor((double)v65 * 100000.0 / v48 + 0.5);
                      if (v66 > 2147483650.0 || v66 < -2147483650.0)
                        return 1;
                      v65 = (int)v66;
                    }
                    a1[2] = v65;
                    v68 = a2[2];
                    if (v68)
                    {
                      v69 = floor((double)v68 * 100000.0 / v53 + 0.5);
                      if (v69 > 2147483650.0 || v69 < -2147483650.0)
                        return 1;
                      v68 = (int)v69;
                    }
                    a1[3] = v68;
                    v71 = a2[3];
                    if (v71)
                    {
                      v72 = floor((double)v71 * 100000.0 / v53 + 0.5);
                      if (v72 > 2147483650.0 || v72 < -2147483650.0)
                        return 1;
                      v71 = (int)v72;
                    }
                    a1[4] = v71;
                    v74 = 100000 - (a2[3] + a2[2]);
                    if (v74)
                    {
                      v75 = floor((double)v74 * 100000.0 / v53 + 0.5);
                      if (v75 > 2147483650.0 || v75 < -2147483650.0)
                        return 1;
                      v74 = (int)v75;
                    }
                    a1[5] = v74;
                    v77 = a2[4];
                    if (v77)
                    {
                      v78 = floor((double)v59 * (double)v77 / 100000.0 + 0.5);
                      if (v78 > 2147483650.0 || v78 < -2147483650.0)
                        return 1;
                      v77 = (int)v78;
                    }
                    a1[6] = v77;
                    v80 = a2[5];
                    if (v80)
                    {
                      v81 = floor((double)v59 * (double)v80 / 100000.0 + 0.5);
                      if (v81 > 2147483650.0 || v81 < -2147483650.0)
                        return 1;
                      v80 = (int)v81;
                    }
                    a1[7] = v80;
                    v83 = 100000 - (a2[5] + a2[4]);
                    if (v83)
                    {
                      v84 = floor((double)v59 * (double)v83 / 100000.0 + 0.5);
                      if (v84 > 2147483650.0 || v84 < -2147483650.0)
                        return 1;
                      v83 = (int)v84;
                    }
                    memset(v87, 0, sizeof(v87));
                    a1[8] = v83;
                    if (!png_xy_from_XYZ((int *)v87, a1))
                      return !png_colorspace_endpoints_match(a2, v87, 5);
                  }
                  return 1;
                }
                v39 = floor((double)v19 * (double)v23 / 7.0 + 0.5);
                if (v39 <= 2147483650.0 && v39 >= -2147483650.0)
                {
                  v38 = (int)v39;
                  goto LABEL_67;
                }
                return 2;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t png_colorspace_set_xy_and_XYZ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  __int128 v11;
  __int128 v12;
  _BOOL4 v13;
  __int16 v14;

  v5 = *(__int16 *)(a2 + 74);
  if (v5 < 0)
    return 0;
  if (a5 > 1 || (v5 & 2) == 0)
    goto LABEL_6;
  if (!png_colorspace_endpoints_match((int *)a3, (_DWORD *)(a2 + 4), 100))
  {
    *(_WORD *)(a2 + 74) = v5 | 0x8000;
    png_benign_error(a1, "inconsistent chromaticities");
    return 0;
  }
  if (!a5)
    return 1;
LABEL_6:
  v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 4) = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 20) = v11;
  v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)a4;
  *(_OWORD *)(a2 + 52) = v12;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a4 + 32);
  v13 = png_colorspace_endpoints_match((int *)a3, &sRGB_xy, 1000);
  v14 = v5 & 0xFFBD | 2;
  if (v13)
    v14 = v5 | 0x42;
  *(_WORD *)(a2 + 74) = v14;
  return 2;
}

uint64_t png_colorspace_set_sRGB(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3;
  __int16 v4;
  unint64_t v7;
  char *v8;
  __int16 v9;

  v3 = *(__int16 *)(a2 + 74);
  if (v3 < 0)
    return 0;
  v4 = a3;
  if (a3 >= 4)
  {
    v7 = (int)a3;
    v8 = "invalid sRGB rendering intent";
LABEL_13:
    png_icc_profile_error(a1, a2, "sRGB", v7, v8);
    return 0;
  }
  if ((v3 & 4) != 0 && *(unsigned __int16 *)(a2 + 72) != a3)
  {
    v7 = a3;
    v8 = "inconsistent rendering intents";
    goto LABEL_13;
  }
  if ((v3 & 0x20) != 0)
  {
    png_benign_error(a1, "duplicate sRGB information ignored");
    return 0;
  }
  if ((v3 & 2) != 0 && !png_colorspace_endpoints_match((int *)&sRGB_xy, (_DWORD *)(a2 + 4), 100))
    png_chunk_report(a1, "cHRM chunk does not match sRGB", 2);
  png_colorspace_check_gamma(a1, a2, 45455, 2);
  *(_OWORD *)(a2 + 4) = sRGB_xy;
  *(_OWORD *)(a2 + 20) = unk_2186FA1EC;
  *(_OWORD *)(a2 + 36) = png_colorspace_set_sRGB_sRGB_XYZ;
  *(_WORD *)(a2 + 72) = v4;
  v9 = *(_WORD *)(a2 + 74);
  *(_DWORD *)(a2 + 68) = 95053;
  *(_OWORD *)(a2 + 52) = unk_2186FA1C8;
  *(_DWORD *)a2 = 45455;
  *(_WORD *)(a2 + 74) = v9 | 0xE7;
  return 1;
}

uint64_t png_icc_profile_error(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t a4, _BYTE *a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char *v20;
  char v21;
  char v22;
  unsigned int v23;
  char v24;
  _BYTE v25[24];
  char v26[196];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (a2)
    *(_WORD *)(a2 + 74) |= 0x8000u;
  v10 = png_safecat((uint64_t)v26, 0xC4uLL, 0, "profile '");
  v11 = png_safecat((uint64_t)v26, v10 + 79, v10, a3);
  v12 = png_safecat((uint64_t)v26, 0xC4uLL, v11, "': ");
  v13 = v12;
  v14 = a4 >> 24;
  if ((a4 >> 24 == 32 || v14 - 48 < 0xA || (v14 & 0xFFFFFFFFFFFFFFDFLL) - 65 <= 0x19)
    && (((a4 >> 16) & 0xDF) - 65 < 0x1A || BYTE2(a4) == 32 || (unint64_t)BYTE2(a4) - 48 <= 9)
    && (((a4 >> 8) & 0xDF) - 65 < 0x1A || BYTE1(a4) == 32 || (unint64_t)BYTE1(a4) - 48 <= 9)
    && ((unint64_t)(a4 & 0xDF) - 65 < 0x1A
     || a4 == 32
     || (unint64_t)a4 - 48 <= 9))
  {
    v20 = &v26[v12];
    v26[v12] = 39;
    v21 = BYTE3(a4);
    if (BYTE3(a4) - 32 >= 0x5F)
      v21 = 63;
    v20[1] = v21;
    v22 = BYTE2(a4);
    if (BYTE2(a4) - 32 >= 0x5F)
      v22 = 63;
    v20[2] = v22;
    v23 = a4 >> 8;
    if (BYTE1(a4) - 32 >= 0x5F)
      LOBYTE(v23) = 63;
    v20[3] = v23;
    if (a4 - 32 >= 0x5F)
      v24 = 63;
    else
      v24 = a4;
    v20[4] = v24;
    *(_WORD *)(v20 + 5) = 14887;
    v17 = v12 + 8;
    v20[7] = 32;
  }
  else
  {
    v15 = (_BYTE *)png_format_number((unint64_t)v25, (uint64_t)v26, 3, a4);
    v16 = png_safecat((uint64_t)v26, 0xC4uLL, v13, v15);
    v17 = png_safecat((uint64_t)v26, 0xC4uLL, v16, "h: ");
  }
  png_safecat((uint64_t)v26, 0xC4uLL, v17, a5);
  if (a2)
    v18 = 2;
  else
    v18 = 1;
  return png_chunk_report(a1, v26, v18);
}

BOOL png_colorspace_endpoints_match(int *a1, _DWORD *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  int v17;
  int v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;

  v3 = a1[6];
  v4 = a2[6];
  v5 = v4 - a3;
  v6 = v4 + a3;
  if (v3 >= v5)
  {
    v9 = __OFSUB__(v3, v6);
    v7 = v3 == v6;
    v8 = v3 - v6 < 0;
  }
  else
  {
    v9 = 0;
    v7 = 0;
    v8 = 0;
  }
  if (!(v8 ^ v9 | v7))
    return 0;
  v10 = a1[7];
  v11 = a2[7];
  v12 = v11 - a3;
  v13 = v11 + a3;
  if (v10 >= v12)
  {
    v16 = __OFSUB__(v10, v13);
    v14 = v10 == v13;
    v15 = v10 - v13 < 0;
  }
  else
  {
    v16 = 0;
    v14 = 0;
    v15 = 0;
  }
  if (!(v15 ^ v16 | v14))
    return 0;
  v17 = *a1;
  v18 = *a2 + a3;
  if (*a1 >= *a2 - a3)
  {
    v21 = __OFSUB__(v17, v18);
    v19 = v17 == v18;
    v20 = v17 - v18 < 0;
  }
  else
  {
    v21 = 0;
    v19 = 0;
    v20 = 0;
  }
  if (!(v20 ^ v21 | v19))
    return 0;
  v22 = 0;
  v24 = a1[1];
  v25 = a2[1];
  if (v24 >= v25 - a3 && v24 <= v25 + a3)
  {
    v22 = 0;
    v26 = a1[2];
    v27 = a2[2];
    if (v26 >= v27 - a3 && v26 <= v27 + a3)
    {
      v22 = 0;
      v28 = a1[3];
      v29 = a2[3];
      if (v28 >= v29 - a3 && v28 <= v29 + a3)
      {
        v22 = 0;
        v30 = a1[4];
        v31 = a2[4];
        if (v30 >= v31 - a3 && v30 <= v31 + a3)
        {
          v32 = a1[5];
          v33 = a2[5];
          v34 = v33 - a3;
          v35 = v33 + a3;
          if (v32 >= v34)
          {
            v38 = __OFSUB__(v32, v35);
            v36 = v32 == v35;
            v37 = v32 - v35 < 0;
          }
          else
          {
            v38 = 0;
            v36 = 0;
            v37 = 0;
          }
          return (v37 ^ v38 | v36) != 0;
        }
      }
    }
  }
  return v22;
}

uint64_t png_icc_check_length(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  char *v4;
  unint64_t v5;

  if (a4 <= 0x83)
  {
    a4 = a4;
    v4 = "too short";
LABEL_6:
    png_icc_profile_error(a1, a2, a3, a4, v4);
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 1064);
  if (v5 && v5 < a4)
  {
    a4 = a4;
    v4 = "exceeds application limits";
    goto LABEL_6;
  }
  return 1;
}

uint64_t png_icc_check_header(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t a4, uint64_t a5, char a6)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  uint64_t result;
  unint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;

  v6 = a3;
  v7 = a2;
  v8 = a1;
  v9 = bswap32(*(_DWORD *)a5);
  if ((_DWORD)v9 != (_DWORD)a4)
  {
    v12 = "length does not match profile";
LABEL_13:
    a4 = v9;
    goto LABEL_14;
  }
  if ((a4 & 3) != 0 && *(unsigned __int8 *)(a5 + 8) >= 4u)
  {
    a4 = a4;
    v12 = "invalid length";
LABEL_5:
    a1 = v8;
    a2 = v7;
    a3 = v6;
LABEL_14:
    png_icc_profile_error(a1, a2, a3, a4, v12);
    return 0;
  }
  v9 = bswap32(*(_DWORD *)(a5 + 128));
  if (v9 > 0x1555554A || 12 * (int)v9 + 132 > a4)
  {
    v12 = "tag count too large";
    goto LABEL_13;
  }
  a4 = bswap32(*(_DWORD *)(a5 + 64));
  if (a4 >= 0xFFFF)
  {
    v12 = "invalid rendering intent";
    goto LABEL_5;
  }
  if (a4 >= 4)
    png_icc_profile_error(a1, 0, a3, a4, "intent outside defined range");
  a4 = bswap32(*(_DWORD *)(a5 + 36));
  if ((_DWORD)a4 != 1633907568)
  {
    v12 = "invalid signature";
    goto LABEL_5;
  }
  if (*(_QWORD *)(a5 + 68) != 0x100D6F60000 || *(_DWORD *)(a5 + 76) != 768802816)
    png_icc_profile_error(v8, 0, v6, 0, "PCS illuminant is not D50");
  a4 = bswap32(*(_DWORD *)(a5 + 16));
  if ((_DWORD)a4 == 1196573017)
  {
    if ((a6 & 2) != 0)
    {
      v12 = "Gray color space not permitted on RGB PNG";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1196573017;
      goto LABEL_14;
    }
  }
  else
  {
    if ((_DWORD)a4 != 1380401696)
    {
      v12 = "invalid ICC profile color space";
      goto LABEL_5;
    }
    if ((a6 & 2) == 0)
    {
      v12 = "RGB color space not permitted on grayscale PNG";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1380401696;
      goto LABEL_14;
    }
  }
  v16 = bswap32(*(_DWORD *)(a5 + 12));
  if ((int)v16 <= 1852662635)
  {
    if ((_DWORD)v16 == 1633842036)
    {
      v12 = "invalid embedded Abstract ICC profile";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1633842036;
      goto LABEL_14;
    }
    if ((_DWORD)v16 == 1818848875)
    {
      v12 = "unexpected DeviceLink ICC profile class";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1818848875;
      goto LABEL_14;
    }
    v17 = 1835955314;
  }
  else if ((int)v16 > 1935896177)
  {
    if ((_DWORD)v16 == 1935896178)
      goto LABEL_47;
    v17 = 1936744803;
  }
  else
  {
    if ((_DWORD)v16 == 1852662636)
    {
      v18 = "unexpected NamedColor ICC profile class";
      v19 = v8;
      v20 = v6;
      v16 = 1852662636;
      goto LABEL_46;
    }
    v17 = 1886549106;
  }
  if ((_DWORD)v16 != v17)
  {
    v18 = "unrecognized ICC profile class";
    v19 = v8;
    v20 = v6;
LABEL_46:
    png_icc_profile_error(v19, 0, v20, v16, v18);
  }
LABEL_47:
  a4 = bswap32(*(_DWORD *)(a5 + 20));
  result = 1;
  if ((_DWORD)a4 != 1281450528 && (_DWORD)a4 != 1482250784)
  {
    v12 = "unexpected ICC PCS encoding";
    goto LABEL_5;
  }
  return result;
}

uint64_t png_icc_check_tag_table(uint64_t a1, uint64_t a2, _BYTE *a3, unsigned int a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t i;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;

  v5 = bswap32(*(_DWORD *)(a5 + 128));
  if (!v5)
    return 1;
  for (i = a5 + 132; ; i += 12)
  {
    v11 = bswap32(*(_DWORD *)i);
    v12 = _byteswap_ulong(*(_DWORD *)(i + 4));
    v13 = a4 >= v12;
    v14 = a4 - v12;
    if (!v13 || bswap32(*(_DWORD *)(i + 8)) > v14)
      break;
    if ((*(_BYTE *)(i + 7) & 3) != 0)
      png_icc_profile_error(a1, 0, a3, v11, "ICC profile tag start not a multiple of 4");
    if (!--v5)
      return 1;
  }
  png_icc_profile_error(a1, a2, a3, v11, "ICC profile tag outside profile");
  return 0;
}

uint64_t png_icc_set_sRGB(uint64_t result, uint64_t a2, unsigned int *a3, uLong a4)
{
  uint64_t v6;
  uint64_t v7;
  uInt v8;
  unsigned int v9;
  unsigned int v10;
  int *i;
  uLong v12;
  uLong v13;
  char *v14;
  uint64_t v15;
  int v16;

  if ((~*(_DWORD *)(result + 896) & 0x30) != 0)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    v9 = bswap32(a3[21]);
    v10 = 0x10000;
    for (i = &dword_2186FA210; ; i += 8)
    {
      if (v9 == *(i - 1) && bswap32(a3[22]) == *i && bswap32(a3[23]) == i[1] && bswap32(a3[24]) == i[2])
      {
        if (!v8)
        {
          v8 = bswap32(*a3);
          v10 = bswap32(a3[16]);
        }
        if (v8 == *(i - 2) && v10 == *((unsigned __int16 *)i + 7))
          break;
      }
      if (++v7 == 7)
        return result;
    }
    if (!a4)
    {
      v12 = adler32(0, 0, 0);
      a4 = adler32(v12, (const Bytef *)a3, v8);
    }
    if (a4 != *(i - 4))
      return png_chunk_report(v6, "Not recognizing known sRGB profile that has been edited", 0);
    v13 = crc32(0, 0, 0);
    if (crc32(v13, (const Bytef *)a3, v8) != *(i - 3))
      return png_chunk_report(v6, "Not recognizing known sRGB profile that has been edited", 0);
    if (v7 >= 5)
    {
      v14 = "known incorrect sRGB profile";
      v15 = v6;
      v16 = 2;
    }
    else
    {
      if ((unint64_t)(v7 - 4) > 2)
        return png_colorspace_set_sRGB(v6, a2, bswap32(a3[16]));
      v14 = "out-of-date sRGB profile with no signature";
      v15 = v6;
      v16 = 0;
    }
    png_chunk_report(v15, v14, v16);
    return png_colorspace_set_sRGB(v6, a2, bswap32(a3[16]));
  }
  return result;
}

uint64_t png_colorspace_set_rgb_coefficients(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  int v4;
  double v5;
  double v6;
  BOOL v7;
  unsigned int v8;
  double v9;
  double v10;
  BOOL v11;
  unsigned int v12;
  double v13;
  double v14;
  unsigned int v16;
  unsigned int v17;
  int v18;

  if (*(_BYTE *)(result + 969) || (*(_WORD *)(result + 1250) & 2) == 0)
    return result;
  v1 = *(_DWORD *)(result + 1216);
  if (v1 < 0)
    goto LABEL_46;
  v2 = *(_DWORD *)(result + 1228);
  v3 = *(_DWORD *)(result + 1240);
  v4 = v2 + v1 + v3;
  if (v4 < 1)
    goto LABEL_46;
  if (v1)
  {
    v5 = (double)v1 * 32768.0 / (double)v4 + 0.5;
    v6 = floor(v5);
    v7 = v6 <= 2147483650.0 && v6 >= -2147483650.0;
    v8 = vcvtmd_s64_f64(v5);
    if (v7)
      v1 = v8;
    if (v2 < 0)
LABEL_46:
      png_error(result, "internal error handling cHRM->XYZ");
  }
  else
  {
    v7 = 1;
    if (v2 < 0)
      goto LABEL_46;
  }
  if (!v7 || v1 < 0 || v1 > 0x8000)
    goto LABEL_46;
  if (v2)
  {
    v9 = (double)v2 * 32768.0 / (double)v4 + 0.5;
    v10 = floor(v9);
    v11 = v10 <= 2147483650.0 && v10 >= -2147483650.0;
    v12 = vcvtmd_s64_f64(v9);
    if (v11)
      v2 = v12;
    if (v3 < 0)
      goto LABEL_46;
  }
  else
  {
    v11 = 1;
    if (v3 < 0)
      goto LABEL_46;
  }
  if (!v11 || v2 < 0 || v2 > 0x8000)
    goto LABEL_46;
  if (v3)
  {
    v13 = (double)v3 * 32768.0 / (double)v4 + 0.5;
    v14 = floor(v13);
    if (v14 > 2147483650.0 || v14 < -2147483650.0)
      goto LABEL_46;
    v16 = vcvtmd_s64_f64(v13);
    if (v16 > 0x8000)
      goto LABEL_46;
  }
  else
  {
    v16 = 0;
  }
  v17 = v2 + v1 + v16;
  if (v17 > 0x8001)
    goto LABEL_46;
  if (v17 == 32769)
  {
    v18 = -1;
LABEL_36:
    if (v2 < v1 || v2 < v16)
    {
      if (v1 < v2 || v1 < v16)
        v16 += v18;
      else
        v1 += v18;
    }
    else
    {
      v2 += v18;
    }
    goto LABEL_43;
  }
  if (!(v17 >> 15))
  {
    v18 = 1;
    goto LABEL_36;
  }
LABEL_43:
  if (v2 + v1 + v16 != 0x8000)
    png_error(result, "internal error handling cHRM coefficients");
  *(_WORD *)(result + 970) = v1;
  *(_WORD *)(result + 972) = v2;
  return result;
}

uint64_t png_muldiv(int *a1, int a2, int a3, int a4)
{
  int v4;
  double v5;

  if (!a4)
    return 0;
  v4 = 0;
  if (!a2 || !a3)
    goto LABEL_10;
  v5 = floor((double)a2 * (double)a3 / (double)a4 + 0.5);
  if (v5 > 2147483650.0 || v5 < -2147483650.0)
    return 0;
  v4 = (int)v5;
LABEL_10:
  *a1 = v4;
  return 1;
}

uint64_t png_check_IHDR(uint64_t result, unsigned int a2, unsigned int a3, int a4, unsigned int a5, int a6, int a7, int a8)
{
  uint64_t v15;
  int v16;
  char *v17;
  char *v18;
  unsigned int v19;
  BOOL v20;
  int v21;

  v15 = result;
  if (a2)
  {
    if ((a2 & 0x80000000) == 0)
    {
      v16 = 0;
      goto LABEL_7;
    }
    v17 = "Invalid image width in IHDR";
  }
  else
  {
    v17 = "Image width is zero in IHDR";
  }
  result = png_warning(result, v17);
  v16 = 1;
LABEL_7:
  if (*(_DWORD *)(v15 + 1052) < a2)
  {
    result = png_warning(v15, "Image width exceeds user limit in IHDR");
    v16 = 1;
  }
  if (a3)
  {
    if ((a3 & 0x80000000) == 0)
      goto LABEL_14;
    v18 = "Invalid image height in IHDR";
  }
  else
  {
    v18 = "Image height is zero in IHDR";
  }
  result = png_warning(v15, v18);
  v16 = 1;
LABEL_14:
  if (*(_DWORD *)(v15 + 1056) < a3)
  {
    result = png_warning(v15, "Image height exceeds user limit in IHDR");
    v16 = 1;
  }
  if (a4 > 0x10 || ((1 << a4) & 0x10116) == 0)
  {
    result = png_warning(v15, "Invalid bit depth in IHDR");
    v16 = 1;
  }
  v19 = a5 & 0xFFFFFFFB;
  if (a5 > 6 || v19 == 1)
  {
    result = png_warning(v15, "Invalid color type in IHDR");
    v16 = 1;
  }
  if (a4 > 8 && a5 == 3 || (a5 != 4 ? (v20 = v19 == 2) : (v20 = 1), !v20 ? (v21 = 0) : (v21 = 1), a4 < 8 && v21))
  {
    result = png_warning(v15, "Invalid color type/bit depth combination in IHDR");
    v16 = 1;
  }
  if (a6 >= 2)
  {
    result = png_warning(v15, "Unknown interlace method in IHDR");
    v16 = 1;
  }
  if (a7)
  {
    result = png_warning(v15, "Unknown compression method in IHDR");
    v16 = 1;
  }
  if ((*(_BYTE *)(v15 + 293) & 0x10) != 0 && *(_DWORD *)(v15 + 984))
    result = png_warning(v15, "MNG features are not allowed in a PNG datastream");
  if (a8 && (a8 != 64 || (*(_DWORD *)(v15 + 984) & 4) == 0 || v19 != 2 || (*(_DWORD *)(v15 + 292) & 0x1000) != 0))
  {
    png_warning(v15, "Unknown filter method in IHDR");
    if ((*(_BYTE *)(v15 + 293) & 0x10) != 0)
      png_warning(v15, "Invalid filter method in IHDR");
LABEL_49:
    png_error(v15, "Invalid IHDR data");
  }
  if (v16)
    goto LABEL_49;
  return result;
}

uint64_t png_check_fp_number(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v4 = *a3;
  v5 = *a4;
  if (*a4 < a2)
  {
    while (2)
    {
      v6 = 4;
      switch(*(_BYTE *)(a1 + v5))
      {
        case '+':
          goto LABEL_4;
        case '-':
          v6 = 132;
          goto LABEL_4;
        case '.':
          v6 = 16;
          goto LABEL_4;
        case '0':
          v6 = 8;
          goto LABEL_4;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          v6 = 264;
          goto LABEL_4;
        case 'E':
          v6 = 32;
LABEL_4:
          v7 = v6 & 0x3C | v4 & 3;
          switch(v7)
          {
            case 4:
              if ((v4 & 0x3C) == 0)
              {
                v4 |= v6;
                break;
              }
              goto LABEL_27;
            case 5:
            case 7:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
              goto LABEL_27;
            case 6:
              if ((v4 & 0x3C) == 0)
              {
                v4 |= 4u;
                break;
              }
              goto LABEL_27;
            case 8:
              if ((v4 & 0x10) != 0)
                v4 = v4 & 0x180 | 0x11;
              goto LABEL_15;
            case 9:
LABEL_15:
              v4 |= v6 | 0x40;
              break;
            case 10:
              v4 |= 0x48u;
              break;
            case 16:
              if ((v4 & 0x10) != 0)
                goto LABEL_27;
              v8 = v4 & 0x1C0 | v6 | 1;
              v9 = v6 | v4;
              if ((v4 & 8) != 0)
                v4 = v9;
              else
                v4 = v8;
              break;
            default:
              if (v7 != 32 && v7 != 33 || (v4 & 8) == 0)
                goto LABEL_27;
              v4 = v4 & 0x1C0 | 2;
              break;
          }
          if (a2 != ++v5)
            continue;
          v5 = a2;
          break;
        default:
          goto LABEL_27;
      }
      break;
    }
  }
LABEL_27:
  *a3 = v4;
  *a4 = v5;
  return (v4 >> 3) & 1;
}

uint64_t png_check_fp_string(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unsigned int v6;

  v6 = 0;
  v5 = 0;
  result = png_check_fp_number(a1, a2, &v6, &v5);
  if ((_DWORD)result)
  {
    if (v5 == a2 || !*(_BYTE *)(a1 + v5))
      return v6;
    else
      return 0;
  }
  return result;
}

uint64_t png_reciprocal(int a1)
{
  double v1;
  double v2;
  BOOL v3;
  unsigned int v4;

  v1 = 1.0e10 / (double)a1 + 0.5;
  v2 = floor(v1);
  v3 = v2 < -2147483650.0 || v2 > 2147483650.0;
  v4 = vcvtmd_s64_f64(v1);
  if (v3)
    return 0;
  else
    return v4;
}

BOOL png_gamma_significant(int a1)
{
  return (a1 - 105001) < 0xFFFFD8EF;
}

unsigned int png_reciprocal2(int a1, int a2)
{
  double v2;
  double v3;
  BOOL v4;

  if (a1
    && a2
    && ((v2 = 1.0e15 / (double)a1 / (double)a2 + 0.5, v3 = floor(v2), v3 <= 2147483650.0)
      ? (v4 = v3 < -2147483650.0)
      : (v4 = 1),
        !v4))
  {
    return vcvtmd_s64_f64(v2);
  }
  else
  {
    return 0;
  }
}

uint64_t png_gamma_8bit_correct(uint64_t result, int a2)
{
  if ((result - 1) <= 0xFD)
    LOBYTE(result) = vcvtmd_s64_f64(pow((double)(int)result / 255.0, (double)a2 * 0.00001) * 255.0 + 0.5);
  return result;
}

uint64_t png_gamma_correct(uint64_t a1, int a2, int a3)
{
  unsigned int v3;

  v3 = a2 - 1;
  if (*(_BYTE *)(a1 + 608) == 8)
  {
    if (v3 <= 0xFD)
      LOBYTE(a2) = vcvtmd_s64_f64(pow((double)a2 / 255.0, (double)a3 * 0.00001) * 255.0 + 0.5);
    LOWORD(a2) = a2;
  }
  else if (v3 <= 0xFFFD)
  {
    LOWORD(a2) = vcvtmd_s64_f64(pow((double)a2 / 65535.0, (double)a3 * 0.00001) * 65535.0 + 0.5);
  }
  return (unsigned __int16)a2;
}

void png_destroy_gamma_table(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  png_free(a1, *(void **)(a1 + 672));
  *(_QWORD *)(a1 + 672) = 0;
  v2 = *(void **)(a1 + 680);
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 664);
    if (v3 != -23)
    {
      v4 = 0;
      v5 = 1 << (8 - v3);
      if (v5 <= 1)
        v5 = 1;
      v6 = 8 * v5;
      do
      {
        png_free(a1, *(void **)(*(_QWORD *)(a1 + 680) + v4));
        v4 += 8;
      }
      while (v6 != v4);
      v2 = *(void **)(a1 + 680);
    }
    png_free(a1, v2);
    *(_QWORD *)(a1 + 680) = 0;
  }
  png_free(a1, *(void **)(a1 + 688));
  *(_QWORD *)(a1 + 688) = 0;
  png_free(a1, *(void **)(a1 + 696));
  *(_QWORD *)(a1 + 696) = 0;
  v7 = *(void **)(a1 + 704);
  if (v7)
  {
    v8 = *(_DWORD *)(a1 + 664);
    if (v8 != -23)
    {
      v9 = 0;
      v10 = 1 << (8 - v8);
      if (v10 <= 1)
        v10 = 1;
      v11 = 8 * v10;
      do
      {
        png_free(a1, *(void **)(*(_QWORD *)(a1 + 704) + v9));
        v9 += 8;
      }
      while (v11 != v9);
      v7 = *(void **)(a1 + 704);
    }
    png_free(a1, v7);
    *(_QWORD *)(a1 + 704) = 0;
  }
  v12 = *(void **)(a1 + 712);
  if (v12)
  {
    v13 = *(_DWORD *)(a1 + 664);
    if (v13 != -23)
    {
      v14 = 0;
      v15 = 1 << (8 - v13);
      if (v15 <= 1)
        v15 = 1;
      v16 = 8 * v15;
      do
      {
        png_free(a1, *(void **)(*(_QWORD *)(a1 + 712) + v14));
        v14 += 8;
      }
      while (v16 != v14);
      v12 = *(void **)(a1 + 712);
    }
    png_free(a1, v12);
    *(_QWORD *)(a1 + 712) = 0;
  }
}

void png_build_gamma_table(uint64_t a1, int a2)
{
  int v4;
  int v5;
  double v6;
  double v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  double v17;
  double v18;
  int v19;
  double v21;
  int v22;
  double v23;
  double v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  double v36;
  double v37;
  BOOL v38;
  unsigned int v39;
  int v40;
  int v41;
  double v42;
  double v43;
  BOOL v44;
  unsigned int v45;
  int v46;
  int v47;
  double v48;
  double v49;
  double v50;
  BOOL v51;
  unsigned int v52;
  int v53;
  int v54;
  double v55;
  double v56;
  BOOL v57;
  unsigned int v58;
  int v59;

  if (*(_QWORD *)(a1 + 672) || *(_QWORD *)(a1 + 680))
  {
    png_warning(a1, "gamma table being rebuilt");
    png_destroy_gamma_table(a1);
  }
  if (a2 > 8)
  {
    if ((*(_BYTE *)(a1 + 607) & 2) != 0)
    {
      v9 = *(unsigned __int8 *)(a1 + 720);
      if (*(unsigned __int8 *)(a1 + 721) > v9)
        v9 = *(unsigned __int8 *)(a1 + 721);
      if (*(unsigned __int8 *)(a1 + 722) > v9)
        v9 = *(unsigned __int8 *)(a1 + 722);
    }
    else
    {
      v9 = *(unsigned __int8 *)(a1 + 723);
    }
    v10 = v9 - 1;
    v11 = 16 - v9;
    if (v10 >= 0xF)
      v11 = 0;
    v12 = v11;
    if (v11 <= 5u)
      v12 = 5;
    v13 = *(_DWORD *)(a1 + 300) & 0x4000400;
    if (v13)
      v11 = v12;
    if ((v11 & 0xF8) != 0)
      v14 = 8;
    else
      v14 = v11;
    *(_DWORD *)(a1 + 664) = v14;
    v15 = *(_DWORD *)(a1 + 668);
    v16 = "EEE";
    if (v13)
    {
      if (v15 < 1)
      {
        v21 = 1.0;
      }
      else
      {
        v17 = (double)*(int *)(a1 + 1176) * 0.00001 * (double)v15 + 0.5;
        v18 = floor(v17);
        v19 = vcvtmd_s64_f64(v17);
        if (v18 < -2147483650.0 || v18 > 2147483650.0)
          v21 = 0.0;
        else
          v21 = (double)v19 * 0.00001;
      }
      v26 = 8 - v14;
      v27 = (1 << (8 - v14));
      v28 = png_calloc((_QWORD *)a1, 8 * v27);
      *(_QWORD *)(a1 + 680) = v28;
      v29 = v28;
      do
      {
        *v29++ = png_malloc((_QWORD *)a1, 0x200uLL);
        --v27;
      }
      while (v27);
      v30 = 0;
      v31 = 0;
      v32 = 0xFFu >> v14;
      do
      {
        v33 = vcvtmd_s64_f64(pow((double)((unsigned __int16)(257 * v31) + 128) / 65535.0, v21) * 65535.0 + 0.5);
        v34 = ((v33 << (16 - v14)) - v33 + 0x8000) / 0xFFFF;
        if (v30 <= v34)
        {
          do
          {
            *(_WORD *)(v28[v30 & v32] + 2 * (v30 >> v26)) = 257 * v31;
            ++v30;
          }
          while (v34 + 1 != v30);
          v30 = v34 + 1;
        }
        ++v31;
      }
      while (v31 != 255);
      v16 = "NSt3__110__function6__funcIZN4turi10query_evalL17scatter_partitionENS_10shared_ptrINS3_12planner_nodeEEEmRKN"
            "S_6vectorIbNS_9allocatorIbEEEERKNS7_INS2_13flexible_typeENS8_ISD_EEEERNS7_ImNS8_ImEEEERNS2_12dense_bitsetEE3"
            "$_0NS8_ISN_EEFbmRKNS4_INS2_11sframe_rowsEEEEEE"
          + 259;
      if (v30 < 256 << v26)
      {
        do
        {
          *(_WORD *)(v28[v30 & v32] + 2 * (v30 >> v26)) = -1;
          ++v30;
        }
        while (256 << v26 != v30);
      }
    }
    else
    {
      if (v15 < 1)
      {
        v47 = 100000;
      }
      else
      {
        v22 = *(_DWORD *)(a1 + 1176);
        if (!v22
          || ((v23 = 1.0e15 / (double)v22 / (double)v15 + 0.5, v24 = floor(v23), v24 <= 2147483650.0)
            ? (v25 = v24 < -2147483650.0)
            : (v25 = 1),
              v25))
        {
          v47 = 0;
        }
        else
        {
          v47 = vcvtmd_s64_f64(v23);
        }
      }
      png_build_16bit_table((_QWORD *)a1, (_QWORD *)(a1 + 680), v14, v47);
    }
    if ((*(_DWORD *)(a1 + 300) & 0x600080) != 0)
    {
      v48 = 1.0e10 / (double)*(int *)(a1 + 1176) + 0.5;
      v49 = floor(v48);
      v50 = *((double *)v16 + 27);
      v51 = v49 < -2147483650.0 || v49 > v50;
      v52 = vcvtmd_s64_f64(v48);
      if (v51)
        v53 = 0;
      else
        v53 = v52;
      png_build_16bit_table((_QWORD *)a1, (_QWORD *)(a1 + 712), v14, v53);
      v54 = *(_DWORD *)(a1 + 668);
      if (v54 < 1)
      {
        v59 = *(_DWORD *)(a1 + 1176);
      }
      else
      {
        v55 = 1.0e10 / (double)v54 + 0.5;
        v56 = floor(v55);
        v57 = v56 < -2147483650.0 || v56 > v50;
        v58 = vcvtmd_s64_f64(v55);
        if (v57)
          v59 = 0;
        else
          v59 = v58;
      }
      png_build_16bit_table((_QWORD *)a1, (_QWORD *)(a1 + 704), v14, v59);
    }
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 668);
    if (v4 < 1)
    {
      v35 = 100000;
    }
    else
    {
      v5 = *(_DWORD *)(a1 + 1176);
      if (!v5
        || ((v6 = 1.0e15 / (double)v5 / (double)v4 + 0.5, v7 = floor(v6), v7 <= 2147483650.0)
          ? (v8 = v7 < -2147483650.0)
          : (v8 = 1),
            v8))
      {
        v35 = 0;
      }
      else
      {
        v35 = vcvtmd_s64_f64(v6);
      }
    }
    png_build_8bit_table((_QWORD *)a1, (_QWORD *)(a1 + 672), v35);
    if ((*(_DWORD *)(a1 + 300) & 0x600080) != 0)
    {
      v36 = 1.0e10 / (double)*(int *)(a1 + 1176) + 0.5;
      v37 = floor(v36);
      v38 = v37 < -2147483650.0 || v37 > 2147483650.0;
      v39 = vcvtmd_s64_f64(v36);
      if (v38)
        v40 = 0;
      else
        v40 = v39;
      png_build_8bit_table((_QWORD *)a1, (_QWORD *)(a1 + 696), v40);
      v41 = *(_DWORD *)(a1 + 668);
      if (v41 < 1)
      {
        v46 = *(_DWORD *)(a1 + 1176);
      }
      else
      {
        v42 = 1.0e10 / (double)v41 + 0.5;
        v43 = floor(v42);
        v44 = v43 < -2147483650.0 || v43 > 2147483650.0;
        v45 = vcvtmd_s64_f64(v42);
        if (v44)
          v46 = 0;
        else
          v46 = v45;
      }
      png_build_8bit_table((_QWORD *)a1, (_QWORD *)(a1 + 688), v46);
    }
  }
}

void png_build_8bit_table(_QWORD *a1, _QWORD *a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t i;
  char v11;

  v5 = png_malloc(a1, 0x100uLL);
  v6 = v5;
  *a2 = v5;
  if ((a3 - 95000) > 0x2710)
  {
    for (i = 0; i != 256; ++i)
    {
      if ((i - 1) > 0xFD)
        v11 = i;
      else
        v11 = vcvtmd_s64_f64(pow((double)(int)i / 255.0, (double)a3 * 0.00001) * 255.0 + 0.5);
      *((_BYTE *)v6 + i) = v11;
    }
  }
  else
  {
    v7 = 0;
    v8 = (int8x16_t)xmmword_2186F9920;
    v9.i64[0] = 0x1010101010101010;
    v9.i64[1] = 0x1010101010101010;
    do
    {
      *(int8x16_t *)&v5[v7] = v8;
      v7 += 2;
      v8 = vaddq_s8(v8, v9);
    }
    while (v7 != 32);
  }
}

void png_build_16bit_table(_QWORD *a1, _QWORD *a2, int a3, int a4)
{
  unsigned int v7;
  int v8;
  int v9;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  double v14;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t i;
  unsigned int v23;
  uint64_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  uint64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  long double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  uint64_t v39;
  float64x2_t v40;
  float64x2_t v41;
  uint32x4_t v42;
  double v43;
  int32x4_t v44;
  long double v45;
  long double v46;
  long double v47;
  float64x2_t v48;
  long double v49;
  int32x4_t v50;
  int32x4_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  int8x16x4_t v55;

  v7 = 8 - a3;
  v8 = ~(-1 << (16 - a3));
  v43 = 1.0 / (double)v8;
  v9 = 1 << (15 - a3);
  v39 = (1 << (8 - a3));
  v11 = png_calloc(a1, 8 * v39);
  v12 = 0;
  *a2 = v11;
  v13 = a4 - 95000;
  v14 = (double)a4 * 0.00001;
  v42 = (uint32x4_t)vdupq_n_s32(v7);
  v41 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
  __asm { FMOV            V0.2D, #0.5 }
  v40 = _Q0;
  do
  {
    v20 = png_malloc(a1, 0x200uLL);
    v21 = v20;
    v11[v12] = v20;
    if (v13 > 0x2710)
    {
      v24 = 0;
      v44 = vdupq_n_s32(v12);
      v25 = (uint32x4_t)xmmword_2186CA030;
      v26 = (uint32x4_t)xmmword_2186FA2E0;
      do
      {
        v50 = (int32x4_t)v26;
        v51 = (int32x4_t)v25;
        v27 = vaddq_s32((int32x4_t)vshlq_u32(v26, v42), v44);
        v28 = vaddq_s32((int32x4_t)vshlq_u32(v25, v42), v44);
        v29.i64[0] = v28.u32[0];
        v29.i64[1] = v28.u32[1];
        v30 = vcvtq_f64_u64(v29);
        v29.i64[0] = v28.u32[2];
        v29.i64[1] = v28.u32[3];
        v31 = vcvtq_f64_u64(v29);
        v29.i64[0] = v27.u32[0];
        v29.i64[1] = v27.u32[1];
        v32 = vcvtq_f64_u64(v29);
        v29.i64[0] = v27.u32[2];
        v29.i64[1] = v27.u32[3];
        v53 = vmulq_n_f64(v32, v43);
        v54 = vmulq_n_f64(vcvtq_f64_u64(v29), v43);
        v52 = vmulq_n_f64(v31, v43);
        v48 = vmulq_n_f64(v30, v43);
        v49 = pow(v48.f64[0], v14);
        v47 = pow(v48.f64[1], v14);
        v48.f64[0] = pow(v52.f64[0], v14);
        v52.f64[0] = pow(v52.f64[1], v14);
        v46 = pow(v53.f64[0], v14);
        v45 = pow(v53.f64[1], v14);
        v53.f64[0] = pow(v54.f64[0], v14);
        v33 = pow(v54.f64[1], v14);
        *(long double *)v55.val[2].i64 = v46;
        *(long double *)&v55.val[2].i64[1] = v45;
        *(long double *)v55.val[1].i64 = v49;
        *(long double *)&v55.val[1].i64[1] = v47;
        v34.f64[0] = v53.f64[0];
        v34.f64[1] = v33;
        v35.f64[0] = v48.f64[0];
        v35.f64[1] = v52.f64[0];
        v55.val[0].i64[1] = *(_QWORD *)&v41.f64[1];
        v36 = vmlaq_f64(v40, v41, v35);
        v37 = vmlaq_f64(v40, v41, v34);
        v38 = vrndmq_f64(vmlaq_f64(v40, v41, (float64x2_t)v55.val[1]));
        *(int32x2_t *)v55.val[1].i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v36)));
        *(int32x2_t *)v55.val[3].i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v37)));
        *(int32x2_t *)v55.val[0].i8 = vmovn_s64(vcvtq_s64_f64(v38));
        *(int32x2_t *)v55.val[2].i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(v40, v41, (float64x2_t)v55.val[2]))));
        *(int8x16_t *)&v21[v24] = vqtbl4q_s8(v55, (int8x16_t)xmmword_2186FA2F0);
        *(_QWORD *)&v36.f64[0] = 0x800000008;
        *(_QWORD *)&v36.f64[1] = 0x800000008;
        v25 = (uint32x4_t)vaddq_s32(v51, (int32x4_t)v36);
        v26 = (uint32x4_t)vaddq_s32(v50, (int32x4_t)v36);
        v24 += 2;
      }
      while (v24 != 64);
    }
    else
    {
      for (i = 0; i != 256; ++i)
      {
        v23 = ((_DWORD)i << v7) + v12;
        if (a3)
          v23 = (v9 - v23 + (v23 << 16)) / v8;
        *((_WORD *)v20 + i) = v23;
      }
    }
    ++v12;
  }
  while (v12 != v39);
}

uint64_t png_set_option(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  v3 = 1;
  if (a1 && a2 <= 0xB && (a2 & 1) == 0)
  {
    v4 = 3 << a2;
    if (a3)
      v5 = 3;
    else
      v5 = 2;
    v6 = *(_DWORD *)(a1 + 896);
    *(_DWORD *)(a1 + 896) = v6 & ~v4 | (v5 << a2);
    return (v6 & v4) >> a2;
  }
  return v3;
}

uint64_t png_xy_from_XYZ(int *a1, int *a2)
{
  int v2;
  int v3;
  double v4;
  int v6;
  double v7;
  int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  int v15;
  double v16;
  int v18;
  int v19;
  int v20;
  int v21;
  double v22;
  int v24;
  double v25;
  int v27;
  int v28;
  int v29;
  int v30;
  double v31;
  int v33;
  double v34;
  uint64_t v36;
  int v38;

  v2 = *a2;
  v3 = a2[1] + *a2 + a2[2];
  if (v3)
  {
    if (v2)
    {
      v4 = floor((double)v2 * 100000.0 / (double)v3 + 0.5);
      if (v4 > 2147483650.0 || v4 < -2147483650.0)
        return 1;
      v2 = (int)v4;
    }
    *a1 = v2;
    v6 = a2[1];
    if (v6)
    {
      v7 = floor((double)v6 * 100000.0 / (double)v3 + 0.5);
      if (v7 > 2147483650.0 || v7 < -2147483650.0)
        return 1;
      v6 = (int)v7;
    }
    a1[1] = v6;
    v9 = a2[3];
    v10 = a2[4] + v9 + a2[5];
    if (v10)
    {
      v12 = *a2;
      v11 = a2[1];
      if (v9)
      {
        v13 = floor((double)v9 * 100000.0 / (double)v10 + 0.5);
        if (v13 > 2147483650.0 || v13 < -2147483650.0)
          return 1;
        v9 = (int)v13;
      }
      a1[2] = v9;
      v15 = a2[4];
      if (v15)
      {
        v16 = floor((double)v15 * 100000.0 / (double)v10 + 0.5);
        if (v16 > 2147483650.0 || v16 < -2147483650.0)
          return 1;
        v15 = (int)v16;
      }
      a1[3] = v15;
      v18 = a2[6];
      v19 = a2[7] + v18 + a2[8];
      if (v19)
      {
        v21 = a2[3];
        v20 = a2[4];
        if (v18)
        {
          v22 = floor((double)v18 * 100000.0 / (double)v19 + 0.5);
          if (v22 > 2147483650.0 || v22 < -2147483650.0)
            return 1;
          v18 = (int)v22;
        }
        a1[4] = v18;
        v24 = a2[7];
        if (v24)
        {
          v25 = floor((double)v24 * 100000.0 / (double)v19 + 0.5);
          if (v25 > 2147483650.0 || v25 < -2147483650.0)
            return 1;
          v24 = (int)v25;
        }
        a1[5] = v24;
        v27 = v10 + v3 + v19;
        if (v27)
        {
          v28 = v21 + v12;
          v29 = a2[7];
          v30 = v28 + a2[6];
          if (v30)
          {
            v31 = floor((double)v30 * 100000.0 / (double)v27 + 0.5);
            if (v31 > 2147483650.0 || v31 < -2147483650.0)
              return 1;
            v30 = (int)v31;
          }
          a1[6] = v30;
          v33 = v20 + v11 + v29;
          if (!v33)
          {
            v38 = 0;
            goto LABEL_56;
          }
          v34 = floor((double)v33 * 100000.0 / (double)v27 + 0.5);
          if (v34 <= 2147483650.0 && v34 >= -2147483650.0)
          {
            v38 = (int)v34;
LABEL_56:
            v36 = 0;
            a1[7] = v38;
            return v36;
          }
        }
      }
    }
  }
  return 1;
}

void png_error(uint64_t a1, const char *a2)
{
  void (*v4)(uint64_t, const char *);

  if (a1)
  {
    v4 = *(void (**)(uint64_t, const char *))(a1 + 216);
    if (v4)
      v4(a1, a2);
  }
  png_default_error(a1, a2);
}

void png_default_error(uint64_t a1, const char *a2)
{
  FILE **v3;
  const char *v4;

  v3 = (FILE **)MEMORY[0x24BDAC8D8];
  v4 = "undefined";
  if (a2)
    v4 = a2;
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "libpng error: %s", v4);
  fputc(10, *v3);
  png_longjmp(a1);
}

unint64_t png_safecat(uint64_t a1, unint64_t a2, unint64_t a3, _BYTE *a4)
{
  char v4;
  unsigned __int8 *v5;
  unint64_t v6;
  int v7;
  BOOL v8;

  if (a1 && a3 < a2)
  {
    if (a4 && (v4 = *a4) != 0 && a2 - 1 > a3)
    {
      v5 = a4 + 1;
      do
      {
        *(_BYTE *)(a1 + a3) = v4;
        v6 = a3 + 1;
        v7 = *v5++;
        v4 = v7;
        if (v7)
          v8 = v6 >= a2 - 1;
        else
          v8 = 1;
        ++a3;
      }
      while (!v8);
    }
    else
    {
      v6 = a3;
    }
    *(_BYTE *)(a1 + v6) = 0;
    return v6;
  }
  return a3;
}

unint64_t png_format_number(unint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;

  *(_BYTE *)(a2 - 1) = 0;
  v4 = a2 - 1;
  if (v4 > a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 1;
    while (2)
    {
      if (a4 || v6 < v7)
      {
        switch(a3)
        {
          case 1:
            goto LABEL_7;
          case 2:
            v7 = 2;
LABEL_7:
            v8 = a4 / 0xA;
            *(_BYTE *)--v4 = png_format_number_digits[a4 % 0xA];
            goto LABEL_11;
          case 3:
            goto LABEL_10;
          case 4:
            v7 = 2;
LABEL_10:
            *(_BYTE *)--v4 = png_format_number_digits[a4 & 0xF];
            v8 = a4 >> 4;
LABEL_11:
            ++v6;
            a4 = v8;
            goto LABEL_12;
          case 5:
            v9 = a4 % 0xA;
            if (v5 || v9)
            {
              *(_BYTE *)--v4 = png_format_number_digits[v9];
              v5 = 1;
            }
            else
            {
              v5 = 0;
            }
            v7 = 5;
            a4 /= 0xAuLL;
            goto LABEL_19;
          default:
            a4 = 0;
LABEL_19:
            ++v6;
            if (a3 == 5 && v6 == 5 && v4 > a1)
            {
              if (v5)
              {
                *(_BYTE *)--v4 = 46;
              }
              else
              {
                v5 = 0;
                if (!a4)
                  *(_BYTE *)--v4 = 48;
              }
              v6 = 5;
            }
LABEL_12:
            if (v4 <= a1)
              return v4;
            continue;
        }
      }
      break;
    }
  }
  return v4;
}

uint64_t png_warning(uint64_t a1, _BYTE *a2)
{
  uint64_t i;
  uint64_t (*v3)(void);
  FILE **v5;

  if (a1)
  {
    if (*a2 == 35)
    {
      for (i = 1; i != 15; ++i)
      {
        if (a2[i] == 32)
          break;
      }
    }
    else
    {
      LODWORD(i) = 0;
    }
    v3 = *(uint64_t (**)(void))(a1 + 224);
    if (v3)
      return v3();
  }
  else
  {
    LODWORD(i) = 0;
  }
  v5 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "libpng warning: %s", &a2[i]);
  return fputc(10, *v5);
}

uint64_t png_warning_parameter(uint64_t result, int a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;

  v3 = (a2 - 1);
  if (v3 <= 7 && result)
  {
    v4 = result + 32 * v3;
    if (a3 && (LOBYTE(v5) = *a3) != 0)
    {
      v6 = 0;
      do
      {
        v7 = v6 + 1;
        *(_BYTE *)(v4 + v6) = v5;
        if (v6 > 0x1D)
          break;
        v5 = a3[++v6];
      }
      while (v5);
    }
    else
    {
      v7 = 0;
    }
    *(_BYTE *)(v4 + v7) = 0;
  }
  return result;
}

_BYTE *png_warning_parameter_signed(uint64_t a1, int a2, int a3, unint64_t a4)
{
  int v4;
  _BYTE *result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE v13[24];
  uint64_t v14;

  v4 = a4;
  v14 = *MEMORY[0x24BDAC8D0];
  if ((a4 & 0x80000000) == 0)
    a4 = a4;
  else
    a4 = -(int)a4;
  result = (_BYTE *)png_format_number((unint64_t)v13, (uint64_t)&v14, a3, a4);
  if (v4 < 0 && result > v13)
    *--result = 45;
  v8 = (a2 - 1);
  if (v8 <= 7 && a1)
  {
    v9 = a1 + 32 * v8;
    LOBYTE(v10) = *result;
    if (*result)
    {
      v11 = 0;
      do
      {
        v12 = v11 + 1;
        *(_BYTE *)(v9 + v11) = v10;
        if (v11 > 0x1D)
          break;
        v10 = result[++v11];
      }
      while (v10);
    }
    else
    {
      v12 = 0;
    }
    *(_BYTE *)(v9 + v12) = 0;
  }
  return result;
}

uint64_t png_formatted_warning(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v12;
  _BYTE v14[192];
  uint64_t v15;

  v3 = 0;
  v15 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    v4 = *a3;
    if (!*a3)
      break;
    if (!a2 || v4 != 64)
      goto LABEL_19;
    v5 = a3 + 1;
    v4 = a3[1];
    if (!a3[1])
    {
      LOBYTE(v4) = 64;
LABEL_19:
      v5 = a3;
      goto LABEL_20;
    }
    v6 = 0;
    v7 = a2 - 32;
    do
    {
      v8 = v6 + 1;
      v7 += 32;
      if (v6 == 9)
        break;
      v9 = png_formatted_warning_valid_parameters[v6++];
    }
    while (v9 != v4);
    if (((v8 - 1) & 0xFFFFFFF8) == 0)
    {
      if (v3 <= 0xBE)
      {
        v10 = 0;
        while (*(_BYTE *)(v7 + v10) && v10 <= 0x1F)
        {
          v14[v3 + v10] = *(_BYTE *)(v7 + v10);
          ++v10;
          if (v3 + v10 == 191)
          {
            v3 = 191;
            goto LABEL_24;
          }
        }
        v3 += v10;
      }
LABEL_24:
      a3 += 2;
      v12 = v3;
      goto LABEL_21;
    }
LABEL_20:
    a3 = v5 + 1;
    v12 = v3 + 1;
    v14[v3++] = v4;
LABEL_21:
    if (v12 >= 0xBF)
      goto LABEL_26;
  }
  v12 = v3;
LABEL_26:
  v14[v12] = 0;
  return png_warning(a1, v14);
}

uint64_t png_benign_error(uint64_t a1, char *a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 292);
  if ((*(_BYTE *)(a1 + 298) & 0x10) == 0)
  {
    if ((v2 & 0x8000) == 0 || !*(_DWORD *)(a1 + 528))
      png_error(a1, a2);
    png_chunk_error(a1, a2);
  }
  if ((v2 & 0x8000) != 0 && *(_DWORD *)(a1 + 528))
    return png_chunk_warning(a1, a2);
  else
    return png_warning(a1, a2);
}

uint64_t png_chunk_warning(uint64_t a1, const char *a2)
{
  FILE **v4;
  _BYTE v5[214];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    png_format_buffer(a1, (uint64_t)v5, (uint64_t)a2);
    return png_warning(a1, v5);
  }
  else
  {
    v4 = (FILE **)MEMORY[0x24BDAC8D8];
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "libpng warning: %s", a2);
    return fputc(10, *v4);
  }
}

void png_chunk_error(uint64_t a1, const char *a2)
{
  char v3[214];

  if (!a1)
    png_error(0, a2);
  png_format_buffer(a1, (uint64_t)v3, (uint64_t)a2);
  png_error(a1, v3);
}

uint64_t png_app_warning(uint64_t a1, char *a2)
{
  if ((*(_BYTE *)(a1 + 298) & 0x20) == 0)
    png_error(a1, a2);
  return png_warning(a1, a2);
}

uint64_t png_app_error(uint64_t a1, char *a2)
{
  if ((*(_BYTE *)(a1 + 298) & 0x40) == 0)
    png_error(a1, a2);
  return png_warning(a1, a2);
}

uint64_t png_format_buffer(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int i;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  LODWORD(v3) = 0;
  v4 = *(_DWORD *)(result + 528);
  for (i = 24; i != -8; i -= 8)
  {
    v6 = v4 >> i;
    v7 = (v4 >> i);
    v8 = v7 - 123;
    v9 = v7 - 91;
    v10 = (int)v3;
    if (v8 >= 0xFFFFFFC6 && v9 > 5)
    {
      *(_BYTE *)(a2 + (int)v3) = v6;
    }
    else
    {
      v12 = (_BYTE *)(a2 + (int)v3);
      *v12 = 91;
      v12[1] = png_digit[v6 >> 4];
      LODWORD(v3) = v3 + 3;
      v12[2] = png_digit[v6 & 0xF];
      *(_BYTE *)(a2 + v10 + 3) = 93;
    }
    v13 = (int)v3;
    v3 = (int)v3 + 1;
  }
  if (a3)
  {
    v14 = 0;
    *(_BYTE *)(a2 + v3) = 58;
    v15 = v13 + 3;
    *(_BYTE *)(v13 + a2 + 2) = 32;
    LODWORD(v3) = v13 + 198;
    while (*(_BYTE *)(a3 + v14))
    {
      *(_BYTE *)(a2 + v15 + v14) = *(_BYTE *)(a3 + v14);
      if (++v14 == 195)
        goto LABEL_15;
    }
    LODWORD(v3) = v15 + v14;
  }
LABEL_15:
  *(_BYTE *)(a2 + (int)v3) = 0;
  return result;
}

uint64_t png_chunk_benign_error(uint64_t a1, const char *a2)
{
  if ((*(_BYTE *)(a1 + 298) & 0x10) == 0)
    png_chunk_error(a1, a2);
  return png_chunk_warning(a1, a2);
}

uint64_t png_chunk_report(uint64_t a1, char *a2, int a3)
{
  if ((*(_BYTE *)(a1 + 293) & 0x80) != 0)
  {
    if (a3 > 1)
      return png_chunk_benign_error(a1, a2);
    else
      return png_chunk_warning(a1, a2);
  }
  else if (a3 <= 0)
  {
    return png_app_warning(a1, a2);
  }
  else
  {
    return png_app_error(a1, a2);
  }
}

void png_free_jmpbuf(_QWORD *a1)
{
  _QWORD *v2;
  _OWORD v4[12];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v2 = (_QWORD *)a1[25];
    if (v2)
    {
      if (v2 != a1 && a1[26] != 0)
      {
        memset(v4, 0, sizeof(v4));
        if (!setjmp((int *)v4))
        {
          a1[26] = 0;
          a1[24] = MEMORY[0x24BDAEB00];
          a1[25] = v4;
          png_free((uint64_t)a1, v2);
        }
      }
    }
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
}

void png_longjmp(uint64_t a1)
{
  void (*v1)(void);

  if (a1)
  {
    v1 = *(void (**)(void))(a1 + 192);
    if (v1)
    {
      if (*(_QWORD *)(a1 + 200))
        v1();
    }
  }
  abort();
}

_QWORD *png_set_error_fn(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    result[28] = a4;
    result[29] = a2;
    result[27] = a3;
  }
  return result;
}

uint64_t png_get_IHDR(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, int *a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v9;
  int v10;

  v9 = 0;
  if (a1 && a2)
  {
    if (a3)
      *a3 = *(_DWORD *)a2;
    if (a4)
      *a4 = *(_DWORD *)(a2 + 4);
    if (a5)
      *a5 = *(unsigned __int8 *)(a2 + 36);
    if (a6)
      *a6 = *(unsigned __int8 *)(a2 + 37);
    if (a8)
      *a8 = *(unsigned __int8 *)(a2 + 38);
    if (a9)
      *a9 = *(unsigned __int8 *)(a2 + 39);
    v10 = *(unsigned __int8 *)(a2 + 40);
    if (a7)
      *a7 = v10;
    png_check_IHDR(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 36), *(unsigned __int8 *)(a2 + 37), v10, *(unsigned __int8 *)(a2 + 38), *(unsigned __int8 *)(a2 + 39));
    return 1;
  }
  return v9;
}

void png_destroy_png_struct(void *__src)
{
  _QWORD v2[158];

  v2[157] = *MEMORY[0x24BDAC8D0];
  if (__src)
  {
    memcpy(v2, __src, 0x4E8uLL);
    bzero(__src, 0x4E8uLL);
    if (v2[126])
      ((void (*)(_QWORD *, void *))v2[126])(v2, __src);
    else
      free(__src);
    png_free_jmpbuf(v2);
  }
}

void png_free(uint64_t a1, void *a2)
{
  void (*v2)(void);

  if (a1 && a2)
  {
    v2 = *(void (**)(void))(a1 + 1008);
    if (v2)
      v2();
    else
      free(a2);
  }
}

_QWORD *png_calloc(_QWORD *a1, size_t a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = png_malloc(a1, a2);
  v4 = v3;
  if (v3)
    bzero(v3, a2);
  return v4;
}

_QWORD *png_malloc(_QWORD *result, size_t __size)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);

  if (result)
  {
    v2 = (uint64_t)result;
    if (!__size)
      goto LABEL_7;
    v3 = (uint64_t (*)(_QWORD *))result[125];
    if (v3)
    {
      result = (_QWORD *)v3(result);
      if (result)
        return result;
LABEL_7:
      png_error(v2, "Out of memory");
    }
    result = malloc(__size);
    if (!result)
      goto LABEL_7;
  }
  return result;
}

void *png_malloc_base(uint64_t a1, size_t __size)
{
  uint64_t (*v2)(void);

  if (!__size)
    return 0;
  if (a1)
  {
    v2 = *(uint64_t (**)(void))(a1 + 1000);
    if (v2)
      return (void *)v2();
  }
  return malloc(__size);
}

void *png_malloc_array(uint64_t a1, int a2, unint64_t a3)
{
  if (a2 < 1 || !a3)
    png_error(a1, "internal error: array alloc");
  return png_malloc_array_checked(a1, a2, a3);
}

void *png_malloc_array_checked(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v3;
  size_t v4;
  uint64_t (*v5)(void);

  v3 = a2;
  if (!is_mul_ok(a3, a2))
    return 0;
  v4 = a2 * a3;
  if (!(v3 * a3))
    return 0;
  if (a1)
  {
    v5 = *(uint64_t (**)(void))(a1 + 1000);
    if (v5)
      return (void *)v5();
  }
  return malloc(v4);
}

char *png_realloc_array(uint64_t a1, const void *a2, unsigned int a3, unsigned int a4, unint64_t a5)
{
  char *v9;
  char *v10;
  size_t v11;

  if ((a3 & 0x80000000) != 0 || (int)a4 < 1 || !a5 || !a2 && a3)
    png_error(a1, "internal error: array realloc");
  if ((a3 ^ 0x7FFFFFFF) < a4)
    return 0;
  v10 = (char *)png_malloc_array_checked(a1, a4 + a3, a5);
  v9 = v10;
  if (v10)
  {
    if (a3)
    {
      v11 = a3 * a5;
      memcpy(v10, a2, v11);
    }
    else
    {
      v11 = 0;
    }
    bzero(&v9[v11], a4 * a5);
  }
  return v9;
}

_QWORD *png_malloc_warn(_QWORD *result, size_t __size)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);

  if (result)
  {
    v2 = (uint64_t)result;
    if (!__size)
      goto LABEL_5;
    v3 = (uint64_t (*)(_QWORD *))result[125];
    if (v3)
    {
      result = (_QWORD *)v3(result);
      if (result)
        return result;
      goto LABEL_5;
    }
    result = malloc(__size);
    if (!result)
    {
LABEL_5:
      png_warning(v2, "Out of memory");
      return 0;
    }
  }
  return result;
}

_QWORD *png_set_mem_fn(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    result[124] = a2;
    result[125] = a3;
    result[126] = a4;
  }
  return result;
}

void CoreML::validate<(MLModelType)300>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  _BOOL8 v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  void *v20;
  _DWORD *v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v24;

  if (*(_QWORD *)(a1 + 16))
    v4 = *(uint64_t **)(a1 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::validateRegressorInterface((CoreML *)v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&v22);
  v5 = CoreML::Result::good((CoreML::Result *)&v22);
  if (!v5)
  {
    *(_QWORD *)a2 = v22;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    v11 = v24;
LABEL_25:
    *(_QWORD *)(a2 + 24) = v11;
    return;
  }
  if (*((int *)v4 + 6) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = operator new(0xCuLL);
      v20 = v7 + 3;
      v21 = v7 + 3;
      *(_QWORD *)v7 = 0x500000002;
      v7[2] = 1;
      v19 = v7;
      CoreML::validateSchemaTypes((int **)&v19, *(_QWORD *)(v4[4] + 8 * v6 + 8), (CoreML::Result *)&v14);
      v22 = v14;
      if (SHIBYTE(v24) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v15;
      v24 = v16;
      HIBYTE(v16) = 0;
      LOBYTE(v15) = 0;
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v5 = CoreML::Result::good((CoreML::Result *)&v22);
      if (!v5)
        goto LABEL_24;
    }
    while (++v6 < *((int *)v4 + 6));
  }
  if (*((int *)v4 + 12) >= 1)
  {
    v8 = 0;
    while (1)
    {
      v9 = operator new(4uLL);
      v19 = v9;
      *v9 = 2;
      v20 = v9 + 1;
      v21 = v9 + 1;
      CoreML::validateSchemaTypes((int **)&v19, *(_QWORD *)(v4[7] + 8 * v8 + 8), (CoreML::Result *)&v14);
      v22 = v14;
      if (SHIBYTE(v24) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v15;
      v24 = v16;
      HIBYTE(v16) = 0;
      LOBYTE(v15) = 0;
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v5 = CoreML::Result::good((CoreML::Result *)&v22);
      if (!v5)
        break;
      if (++v8 >= *((int *)v4 + 12))
        goto LABEL_21;
    }
LABEL_24:
    *(_QWORD *)a2 = v22;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    v11 = v24;
    goto LABEL_25;
  }
LABEL_21:
  if (*(_DWORD *)(a1 + 44) == 300)
    v10 = *(uint64_t **)(a1 + 32);
  else
    v10 = CoreML::Specification::GLMRegressor::default_instance((CoreML::Specification::GLMRegressor *)v5);
  CoreML::Specification::GLMRegressor::GLMRegressor((CoreML::Specification::GLMRegressor *)&v14, (const CoreML::Specification::GLMRegressor *)v10);
  if ((_DWORD)v16 != v18)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "Weights and offsets must be the same size.");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_35:
    if (SHIBYTE(v21) < 0)
      operator delete(v19);
    goto LABEL_37;
  }
  if ((int)v16 >= 2)
  {
    v12 = v17 + 16;
    v13 = v16 - 1;
    while (*(_DWORD *)(*(_QWORD *)v12 + 16) == *(_DWORD *)(*(_QWORD *)(v17 + 8) + 16))
    {
      v12 += 8;
      if (!--v13)
        goto LABEL_33;
    }
    std::string::basic_string[abi:ne180100]<0>(&v19, "All weight coefficients must be the same size.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_35;
  }
LABEL_33:
  CoreML::Result::Result((CoreML::Result *)a2);
LABEL_37:
  CoreML::Specification::GLMRegressor::~GLMRegressor((CoreML::Specification::GLMRegressor *)&v14);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
}

void sub_21838E084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  CoreML::Specification::GLMRegressor::~GLMRegressor((CoreML::Specification::GLMRegressor *)&a9);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)400>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const CoreML::Specification::ModelDescription *v4;
  CoreML::Specification::GLMClassifier *v5;
  uint64_t *v6;
  _BOOL8 v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;

  if (*(_QWORD *)(a1 + 16))
    v4 = *(const CoreML::Specification::ModelDescription **)(a1 + 16);
  else
    v4 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  v5 = (CoreML::Specification::GLMClassifier *)CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v30, v4);
  if (*(_DWORD *)(a1 + 44) == 400)
    v6 = *(uint64_t **)(a1 + 32);
  else
    v6 = CoreML::Specification::GLMClassifier::default_instance(v5);
  CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::GLMClassifier>(a1, (uint64_t)v6, 0, 0, (uint64_t)&v27);
  if (!CoreML::Result::good((CoreML::Result *)&v27))
  {
    *(_QWORD *)a2 = v27;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    v9 = v29;
LABEL_15:
    *(_QWORD *)(a2 + 24) = v9;
    goto LABEL_16;
  }
  CoreML::validateDescriptionsAreAllVectorizableTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v31, (uint64_t)&v19);
  v27 = v19;
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v20;
  v29 = v21;
  v7 = CoreML::Result::good((CoreML::Result *)&v27);
  if (!v7)
  {
    *(_QWORD *)a2 = v27;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    v9 = v29;
    goto LABEL_15;
  }
  if (*(_DWORD *)(a1 + 44) == 400)
    v8 = *(uint64_t **)(a1 + 32);
  else
    v8 = CoreML::Specification::GLMClassifier::default_instance((CoreML::Specification::GLMClassifier *)v7);
  CoreML::Specification::GLMClassifier::GLMClassifier((CoreML::Specification::GLMClassifier *)&v19, (const CoreML::Specification::GLMClassifier *)v8);
  if (v23 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "Invalid post evaluation transform");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_30;
  }
  if (v24 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "Invalid class encoding");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_30;
  }
  if (!(_DWORD)v21)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "The number of DoubleArrays in weights must be greater than zero");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_30;
  }
  if ((_DWORD)v21 != v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "The number of DoubleArrays in weights must match number of offsets");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_30;
  }
  if (v26)
  {
    if (v26 == 100)
    {
      v10 = *(_DWORD *)(v25 + 24);
    }
    else if (v26 == 101)
    {
      v10 = *(_DWORD *)(v25 + 16);
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = -1;
  }
  if (!v24)
  {
    if (v10 != -1 && (_DWORD)v21 != v10 - 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "With ReferenceClass encoding the number of DoubleArrays in weights must be one less than number of classes");
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_30;
    }
    goto LABEL_46;
  }
  if (v10 == -1)
    goto LABEL_49;
  if (v10 != 2)
  {
    if ((_DWORD)v21 != v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "With OneVsRest encoding the number of DoubleArrays in weights must equal the number of classes");
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_30;
    }
LABEL_46:
    if (v10 < 3 || v23 != 1)
      goto LABEL_49;
    std::string::basic_string[abi:ne180100]<0>(&v16, "Probit post evaluation transform is only supported for binary classification");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_30:
    if (SHIBYTE(v18) < 0)
      operator delete(v16);
    goto LABEL_32;
  }
  if ((_DWORD)v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "When using OneVsRest encoding for only two classes, the number of DoubleArrays in weights must be one");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_30;
  }
LABEL_49:
  _tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::RepeatedPtrField((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v16, (uint64_t)&v20 + 8);
  v11 = *(_DWORD *)(*(_QWORD *)(v18 + 8) + 16);
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "Weight DoubleArrays must have nonzero length");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_58:
    if (v15 < 0)
      operator delete(v14[0]);
    goto LABEL_60;
  }
  if (v17 >= 2)
  {
    v12 = v18 + 16;
    v13 = v17 - 1;
    while (v11 == *(_DWORD *)(*(_QWORD *)v12 + 16))
    {
      v12 += 8;
      if (!--v13)
        goto LABEL_54;
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "Weight DoubleArrays must have the same length");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_58;
  }
LABEL_54:
  CoreML::Result::Result((CoreML::Result *)a2);
LABEL_60:
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(&v16);
LABEL_32:
  CoreML::Specification::GLMClassifier::~GLMClassifier((CoreML::Specification::GLMClassifier *)&v19);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
LABEL_16:
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)v30);
}

void sub_21838E4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a14 < 0)
    operator delete(__p);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(&a15);
  CoreML::Specification::GLMClassifier::~GLMClassifier((CoreML::Specification::GLMClassifier *)&a21);
  if (a38 < 0)
    operator delete(a33);
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)(v38 - 152));
  _Unwind_Resume(a1);
}

void CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::GLMClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  CoreML *v9;
  void *v10;
  void *__p;
  __int128 v12;
  uint64_t v13;

  v7 = *(_DWORD *)(a2 + 84);
  if (!v7)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier models must provide class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
LABEL_15:
    if (*(_QWORD *)(a1 + 16))
      v9 = *(CoreML **)(a1 + 16);
    else
      v9 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
    CoreML::validateFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&__p);
    if (!CoreML::Result::good((CoreML::Result *)&__p))
    {
      *(_QWORD *)a5 = __p;
      *(_OWORD *)(a5 + 8) = v12;
      *(_QWORD *)(a5 + 24) = v13;
      return;
    }
    CoreML::validateClassifierFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)a4, a5);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
    v10 = (void *)v12;
    goto LABEL_27;
  }
  if (v7 == 100)
  {
    if ((a3 & 1) == 0 && !*(_DWORD *)(*(_QWORD *)(a2 + 72) + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have String class labels must provide labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    if (*((_DWORD *)CoreML::Specification::Int64Vector::default_instance((CoreML::Specification::Int64Vector *)a1) + 4))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with String class labels must provide exclusively String class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  if (v7 != 101)
  {
LABEL_14:
    a4 = 0;
    goto LABEL_15;
  }
  if ((a3 & 1) == 0 && !*(_DWORD *)(*(_QWORD *)(a2 + 72) + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have Int64 class labels must provide labels.");
    CoreML::Result::Result((_DWORD *)a5, 13);
    goto LABEL_25;
  }
  if (!*((_DWORD *)CoreML::Specification::StringVector::default_instance((CoreML::Specification::StringVector *)a1) + 6))
  {
    a4 = 1;
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
  CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_25:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return;
  v10 = __p;
LABEL_27:
  operator delete(v10);
}

void sub_21838E778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateDescriptionsAreAllVectorizableTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreML::Result *result;
  uint64_t v5;
  void **v6;
  _DWORD *v7;
  void *__p;
  void *v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  result = CoreML::Result::Result((CoreML::Result *)a2);
  if (*(int *)(a1 + 8) >= 1)
  {
    v5 = 0;
    v6 = (void **)(a2 + 8);
    do
    {
      v7 = operator new(0xCuLL);
      v9 = v7 + 3;
      v10 = (char *)(v7 + 3);
      *(_QWORD *)v7 = 0x100000002;
      v7[2] = 5;
      __p = v7;
      CoreML::validateSchemaTypes((int **)&__p, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v5 + 8), (CoreML::Result *)&v11);
      *(_QWORD *)a2 = v11;
      if (*(char *)(a2 + 31) < 0)
        operator delete(*v6);
      *(_OWORD *)v6 = v12;
      *(_QWORD *)(a2 + 24) = v13;
      HIBYTE(v13) = 0;
      LOBYTE(v12) = 0;
      if (__p)
      {
        v9 = __p;
        operator delete(__p);
      }
      result = (CoreML::Result *)CoreML::Result::good((CoreML::Result *)a2);
      if ((result & 1) == 0)
        break;
      ++v5;
    }
    while (v5 < *(int *)(a1 + 8));
  }
  return result;
}

void sub_21838E8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void **v12;

  if (*(char *)(v11 + 31) < 0)
    operator delete(*v12);
  _Unwind_Resume(exception_object);
}

_tc_google::protobuf::internal::RepeatedPtrFieldBase *_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::RepeatedPtrField(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this, uint64_t a2)
{
  signed int v3;
  CoreML::Specification::GLMRegressor_DoubleArray **v4;
  unsigned int *v5;
  int v6;
  int *v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    v4 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*(_QWORD *)(a2 + 16) + 8);
    v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, *(_DWORD *)(a2 + 8));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((uint64_t *)this, (CoreML::Specification::GLMRegressor_DoubleArray **)v5, v4, v3, **((_DWORD **)this + 2) - *((_DWORD *)this + 2));
    v6 = *((_DWORD *)this + 2) + v3;
    *((_DWORD *)this + 2) = v6;
    v7 = (int *)*((_QWORD *)this + 2);
    if (*v7 < v6)
      *v7 = v6;
  }
  return this;
}

uint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>(uint64_t *result, CoreML::Specification::GLMRegressor_DoubleArray **a2, CoreML::Specification::GLMRegressor_DoubleArray **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::GLMRegressor_DoubleArray **v11;
  CoreML::Specification::GLMRegressor_DoubleArray **v12;
  CoreML::Specification::GLMRegressor_DoubleArray *v13;
  CoreML::Specification::GLMRegressor_DoubleArray *v14;
  CoreML::Specification::GLMRegressor_DoubleArray *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::GLMRegressor_DoubleArray **v18;
  CoreML::Specification::GLMClassifier_DoubleArray **v19;
  CoreML::Specification::GLMRegressor_DoubleArray *v20;
  CoreML::Specification::GLMClassifier_DoubleArray *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>);
      }
      else
      {
        Aligned = (CoreML::Specification::GLMClassifier_DoubleArray *)operator new();
        CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_21838EA84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_LinearModelValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *png_create_read_struct(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return png_create_read_struct_2(a1, a2, a3, a4, 0, 0, 0);
}

_QWORD *png_create_read_struct_2(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *png_struct;
  _QWORD *v8;

  png_struct = png_create_png_struct(a1, a2, a3, a4, a5, a6, a7);
  v8 = png_struct;
  if (png_struct)
  {
    *((_DWORD *)png_struct + 73) = 0x8000;
    *((_DWORD *)png_struct + 282) = 0x2000;
    *((_DWORD *)png_struct + 74) |= 0x300000u;
    png_set_read_fn(png_struct, 0, 0);
  }
  return v8;
}

void png_read_info(uint64_t a1, uint64_t a2)
{
  uint64_t chunk_header;
  int i;
  int v6;
  int v7;
  int v8;
  int v9;
  const char *v10;

  if (!a1 || !a2)
    return;
  png_read_sig(a1, a2);
  chunk_header = png_read_chunk_header(a1);
  for (i = *(_DWORD *)(a1 + 528); i != 1229209940; i = *(_DWORD *)(a1 + 528))
  {
    v8 = *(_DWORD *)(a1 + 292);
    if ((v8 & 4) != 0)
      *(_DWORD *)(a1 + 292) = v8 | 0x2008;
    if (i == 1229278788)
    {
      png_handle_IEND(a1, a2, chunk_header);
    }
    else if (i == 1229472850)
    {
      png_handle_IHDR(a1, a2, chunk_header);
    }
    else
    {
      v9 = png_chunk_unknown_handling(a1, i);
      if (v9)
      {
        png_handle_unknown(a1, a2, chunk_header, v9);
        if (i == 1347179589)
          *(_DWORD *)(a1 + 292) |= 2u;
        goto LABEL_22;
      }
      if (i <= 1883455819)
      {
        if (i <= 1732332864)
        {
          if (i > 1665684044)
          {
            if (i == 1665684045)
            {
              png_handle_cHRM(a1, a2, chunk_header);
            }
            else
            {
              if (i != 1700284774)
              {
LABEL_69:
                png_handle_unknown(a1, a2, chunk_header, 0);
                goto LABEL_22;
              }
              png_handle_eXIf(a1, a2, chunk_header);
            }
          }
          else if (i == 1347179589)
          {
            png_handle_PLTE(a1, a2, chunk_header);
          }
          else
          {
            if (i != 1649100612)
              goto LABEL_69;
            png_handle_bKGD(a1, a2, chunk_header);
          }
        }
        else if (i <= 1766015823)
        {
          if (i == 1732332865)
          {
            png_handle_gAMA(a1, a2, chunk_header);
          }
          else
          {
            if (i != 1749635924)
              goto LABEL_69;
            png_handle_hIST(a1, a2, chunk_header);
          }
        }
        else
        {
          switch(i)
          {
            case 1766015824:
              png_handle_iCCP(a1, a2, chunk_header);
              break;
            case 1767135348:
              png_handle_iTXt(a1, a2, chunk_header);
              break;
            case 1866876531:
              png_handle_oFFs(a1, a2, chunk_header);
              break;
            default:
              goto LABEL_69;
          }
        }
      }
      else if (i > 1934772033)
      {
        if (i <= 1950960964)
        {
          if (i == 1934772034)
          {
            png_handle_sRGB(a1, a2, chunk_header);
          }
          else
          {
            if (i != 1950701684)
              goto LABEL_69;
            png_handle_tEXt(a1, a2, chunk_header);
          }
        }
        else
        {
          switch(i)
          {
            case 1950960965:
              png_handle_tIME(a1, a2, chunk_header);
              break;
            case 1951551059:
              png_handle_tRNS(a1, a2, chunk_header);
              break;
            case 2052348020:
              png_handle_zTXt(a1, a2, chunk_header);
              break;
            default:
              goto LABEL_69;
          }
        }
      }
      else if (i <= 1933723987)
      {
        if (i == 1883455820)
        {
          png_handle_pCAL(a1, a2, chunk_header);
        }
        else
        {
          if (i != 1883789683)
            goto LABEL_69;
          png_handle_pHYs(a1, a2, chunk_header);
        }
      }
      else
      {
        switch(i)
        {
          case 1933723988:
            png_handle_sBIT(a1, a2, chunk_header);
            break;
          case 1933787468:
            png_handle_sCAL(a1, a2, chunk_header);
            break;
          case 1934642260:
            png_handle_sPLT(a1, a2, chunk_header);
            break;
          default:
            goto LABEL_69;
        }
      }
    }
LABEL_22:
    chunk_header = png_read_chunk_header(a1);
  }
  v6 = *(_DWORD *)(a1 + 292);
  if ((v6 & 1) == 0)
  {
    v10 = "Missing IHDR before IDAT";
    goto LABEL_72;
  }
  if ((v6 & 2) == 0 && *(_BYTE *)(a1 + 607) == 3)
  {
    v10 = "Missing PLTE before IDAT";
LABEL_72:
    png_chunk_error(a1, v10);
  }
  if ((v6 & 8) != 0)
  {
    png_chunk_benign_error(a1, "Too many IDATs found");
    v6 = *(_DWORD *)(a1 + 292);
  }
  *(_DWORD *)(a1 + 292) = v6 | 4;
  v7 = png_chunk_unknown_handling(a1, 1229209940);
  if (v7)
  {
    png_handle_unknown(a1, a2, chunk_header, v7);
    LODWORD(chunk_header) = 0;
  }
  *(_DWORD *)(a1 + 576) = chunk_header;
}

void png_read_row(uint64_t a1, char *a2, char *__dst)
{
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  size_t v9;
  _BYTE *v10;
  unsigned int v11;
  uint8x8_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  const char *v25;
  int v26;
  uint64_t v27;
  char *v28;
  int v29;
  unsigned int v30;
  void (*v31)(uint64_t, _QWORD, _QWORD);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 296) & 0x40) == 0)
      png_read_start_row(a1);
    v32 = 0;
    v33 = 0;
    LODWORD(v32) = *(_DWORD *)(a1 + 520);
    v6 = *(unsigned __int8 *)(a1 + 610);
    v7 = (v6 * v32 + 7) >> 3;
    if (v6 >= 8)
      v7 = (v6 >> 3) * (unint64_t)v32;
    v8 = *(_WORD *)(a1 + 607);
    v33 = v7;
    v34 = v8;
    BYTE2(v34) = *(_BYTE *)(a1 + 611);
    BYTE3(v34) = v6;
    if (!*(_BYTE *)(a1 + 604) || (*(_BYTE *)(a1 + 300) & 2) == 0)
    {
LABEL_8:
      if ((*(_BYTE *)(a1 + 292) & 4) == 0)
      {
        v25 = "Invalid attempt to read row data";
        goto LABEL_81;
      }
      **(_BYTE **)(a1 + 544) = -1;
      v9 = v33 + 1;
      png_read_IDAT_data(a1, *(_QWORD *)(a1 + 544), v33 + 1);
      v10 = *(_BYTE **)(a1 + 544);
      v11 = *v10;
      if (*v10)
      {
        if (v11 > 4)
        {
          v25 = "bad adaptive filter value";
          goto LABEL_81;
        }
        png_read_filter_row(a1, (uint64_t)&v32, (uint64_t)(v10 + 1), *(_QWORD *)(a1 + 536) + 1, v11);
        v10 = *(_BYTE **)(a1 + 544);
        v9 = v33 + 1;
      }
      memcpy(*(void **)(a1 + 536), v10, v9);
      if ((*(_BYTE *)(a1 + 984) & 4) != 0 && *(_BYTE *)(a1 + 988) == 64 && (v34 & 2) != 0)
      {
        v13 = *(_QWORD *)(a1 + 544);
        v14 = v32;
        if (BYTE1(v34) == 16)
        {
          if (v34 == 2)
          {
            v17 = 6;
          }
          else
          {
            if (v34 != 6)
              goto LABEL_56;
            v17 = 8;
          }
          if ((_DWORD)v32)
          {
            v20 = (unsigned __int16 *)(v13 + 3);
            do
            {
              v21 = *v20;
              v22 = __rev16(v21) + (bswap32(*(v20 - 1)) >> 16);
              v23 = __rev16(v20[1]) + (bswap32(v21) >> 16);
              *((_BYTE *)v20 - 2) = BYTE1(v22);
              *((_BYTE *)v20 - 1) = v22;
              *((_BYTE *)v20 + 2) = BYTE1(v23);
              *((_BYTE *)v20 + 3) = v23;
              v20 = (unsigned __int16 *)((char *)v20 + v17);
              --v14;
            }
            while (v14);
          }
          goto LABEL_56;
        }
        if (BYTE1(v34) == 8)
        {
          if (v34 == 2)
          {
            v15 = 3;
LABEL_48:
            if ((_DWORD)v32)
            {
              v18 = (_BYTE *)(v13 + 3);
              do
              {
                v19 = *(v18 - 1);
                *(v18 - 2) += v19;
                *v18 += v19;
                v18 += v15;
                --v14;
              }
              while (v14);
            }
            goto LABEL_56;
          }
          if (v34 == 6)
          {
            v15 = 4;
            goto LABEL_48;
          }
        }
      }
LABEL_56:
      if (*(_DWORD *)(a1 + 300))
        png_do_read_transformations(a1, (unsigned int *)&v32, v12);
      v24 = BYTE3(v34);
      if (*(_BYTE *)(a1 + 615))
      {
        if (*(unsigned __int8 *)(a1 + 615) != BYTE3(v34))
        {
          v25 = "internal sequential row size calculation error";
          goto LABEL_81;
        }
LABEL_62:
        if (*(_BYTE *)(a1 + 604) && (v26 = *(_DWORD *)(a1 + 300), (v26 & 2) != 0))
        {
          v30 = *(unsigned __int8 *)(a1 + 605);
          if (v30 <= 5)
            png_do_read_interlace((uint64_t)&v32, *(_QWORD *)(a1 + 544) + 1, v30, v26);
          if (__dst)
            png_combine_row(a1, __dst, 1);
          if (!a2)
            goto LABEL_75;
          v27 = a1;
          v28 = a2;
          v29 = 0;
        }
        else
        {
          if (a2)
            png_combine_row(a1, a2, -1);
          if (!__dst)
            goto LABEL_75;
          v27 = a1;
          v28 = __dst;
          v29 = -1;
        }
        png_combine_row(v27, v28, v29);
LABEL_75:
        png_read_finish_row(a1);
        v31 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 760);
        if (v31)
          v31(a1, *(unsigned int *)(a1 + 524), *(unsigned __int8 *)(a1 + 605));
        return;
      }
      *(_BYTE *)(a1 + 615) = BYTE3(v34);
      if (v24 <= *(unsigned __int8 *)(a1 + 614))
        goto LABEL_62;
      v25 = "sequential row overflow";
LABEL_81:
      png_error(a1, v25);
    }
    v16 = *(_DWORD *)(a1 + 524);
    switch(*(_BYTE *)(a1 + 605))
    {
      case 0:
        if ((v16 & 7) == 0)
          goto LABEL_8;
        goto LABEL_41;
      case 1:
        if ((v16 & 7) != 0 || *(_DWORD *)(a1 + 496) <= 4u)
          goto LABEL_41;
        goto LABEL_8;
      case 2:
        if ((*(_DWORD *)(a1 + 524) & 7) == 4)
          goto LABEL_8;
        if (!__dst || (v16 & 4) == 0)
          goto LABEL_43;
        goto LABEL_42;
      case 3:
        if ((v16 & 3) != 0 || *(_DWORD *)(a1 + 496) <= 2u)
          goto LABEL_41;
        goto LABEL_8;
      case 4:
        if ((*(_DWORD *)(a1 + 524) & 3) == 2)
          goto LABEL_8;
        if (!__dst || (v16 & 2) == 0)
          goto LABEL_43;
        goto LABEL_42;
      case 5:
        if ((v16 & 1) == 0 && *(_DWORD *)(a1 + 496) > 1u)
          goto LABEL_8;
LABEL_41:
        if (__dst)
LABEL_42:
          png_combine_row(a1, __dst, 1);
LABEL_43:
        png_read_finish_row(a1);
        break;
      default:
        if ((v16 & 1) == 0)
          goto LABEL_43;
        goto LABEL_8;
    }
  }
}

void png_read_end(uint64_t a1, uint64_t a2)
{
  uint64_t chunk_header;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  int v11;

  if (a1)
  {
    if (!png_chunk_unknown_handling(a1, 1229209940))
      png_read_finish_IDAT(a1);
    if (*(_BYTE *)(a1 + 607) == 3 && *(_DWORD *)(a1 + 596) > (int)*(unsigned __int16 *)(a1 + 592))
      png_benign_error(a1, "Read palette index exceeding num_palette");
    do
    {
      chunk_header = png_read_chunk_header(a1);
      v5 = *(_DWORD *)(a1 + 528);
      if (v5 == 1229209940)
        goto LABEL_11;
      *(_DWORD *)(a1 + 292) |= 0x2000u;
      if (v5 == 1229472850)
      {
        png_handle_IHDR(a1, a2, chunk_header);
        continue;
      }
      if (v5 != 1229278788)
      {
LABEL_11:
        if (!a2)
          goto LABEL_70;
        v6 = png_chunk_unknown_handling(a1, v5);
        if (v6)
        {
          v7 = v6;
          if (v5 != 1229209940)
          {
            png_handle_unknown(a1, a2, chunk_header, v6);
            if (v5 == 1347179589)
              *(_DWORD *)(a1 + 292) |= 2u;
            continue;
          }
          if ((_DWORD)chunk_header && (*(_BYTE *)(a1 + 296) & 8) == 0 || (*(_BYTE *)(a1 + 293) & 0x20) != 0)
            png_benign_error(a1, ".Too many IDATs found");
          v8 = a1;
          v9 = a2;
          v10 = chunk_header;
          v11 = v7;
        }
        else
        {
          if (v5 > 1883455819)
          {
            if (v5 > 1934772033)
            {
              if (v5 <= 1950960964)
              {
                if (v5 == 1934772034)
                {
                  png_handle_sRGB(a1, a2, chunk_header);
                  continue;
                }
                if (v5 == 1950701684)
                {
                  png_handle_tEXt(a1, a2, chunk_header);
                  continue;
                }
              }
              else
              {
                switch(v5)
                {
                  case 1950960965:
                    png_handle_tIME(a1, a2, chunk_header);
                    continue;
                  case 1951551059:
                    png_handle_tRNS(a1, a2, chunk_header);
                    continue;
                  case 2052348020:
                    png_handle_zTXt(a1, a2, chunk_header);
                    continue;
                }
              }
            }
            else if (v5 <= 1933723987)
            {
              if (v5 == 1883455820)
              {
                png_handle_pCAL(a1, a2, chunk_header);
                continue;
              }
              if (v5 == 1883789683)
              {
                png_handle_pHYs(a1, a2, chunk_header);
                continue;
              }
            }
            else
            {
              switch(v5)
              {
                case 1933723988:
                  png_handle_sBIT(a1, a2, chunk_header);
                  continue;
                case 1933787468:
                  png_handle_sCAL(a1, a2, chunk_header);
                  continue;
                case 1934642260:
                  png_handle_sPLT(a1, a2, chunk_header);
                  continue;
              }
            }
          }
          else if (v5 > 1732332864)
          {
            if (v5 <= 1766015823)
            {
              if (v5 == 1732332865)
              {
                png_handle_gAMA(a1, a2, chunk_header);
                continue;
              }
              if (v5 == 1749635924)
              {
                png_handle_hIST(a1, a2, chunk_header);
                continue;
              }
            }
            else
            {
              switch(v5)
              {
                case 1766015824:
                  png_handle_iCCP(a1, a2, chunk_header);
                  continue;
                case 1767135348:
                  png_handle_iTXt(a1, a2, chunk_header);
                  continue;
                case 1866876531:
                  png_handle_oFFs(a1, a2, chunk_header);
                  continue;
              }
            }
          }
          else if (v5 <= 1649100611)
          {
            if (v5 == 1229209940)
            {
              if ((_DWORD)chunk_header && (*(_BYTE *)(a1 + 296) & 8) == 0 || (*(_BYTE *)(a1 + 293) & 0x20) != 0)
                png_benign_error(a1, "..Too many IDATs found");
LABEL_70:
              png_crc_finish(a1, chunk_header);
              continue;
            }
            if (v5 == 1347179589)
            {
              png_handle_PLTE(a1, a2, chunk_header);
              continue;
            }
          }
          else
          {
            switch(v5)
            {
              case 1649100612:
                png_handle_bKGD(a1, a2, chunk_header);
                continue;
              case 1665684045:
                png_handle_cHRM(a1, a2, chunk_header);
                continue;
              case 1700284774:
                png_handle_eXIf(a1, a2, chunk_header);
                continue;
            }
          }
          v8 = a1;
          v9 = a2;
          v10 = chunk_header;
          v11 = 0;
        }
        png_handle_unknown(v8, v9, v10, v11);
      }
      else
      {
        png_handle_IEND(a1, a2, chunk_header);
      }
    }
    while ((*(_BYTE *)(a1 + 292) & 0x10) == 0);
  }
}

void png_destroy_read_struct(uint64_t *a1, void **a2, void **a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;

  if (a1)
  {
    v4 = *a1;
    if (*a1)
    {
      png_destroy_info_struct(*a1, a3);
      png_destroy_info_struct(v4, a2);
      *a1 = 0;
      png_destroy_gamma_table(v4);
      png_free(v4, *(void **)(v4 + 1016));
      *(_QWORD *)(v4 + 1016) = 0;
      png_free(v4, *(void **)(v4 + 1136));
      *(_QWORD *)(v4 + 1136) = 0;
      png_free(v4, *(void **)(v4 + 1112));
      *(_QWORD *)(v4 + 1112) = 0;
      png_free(v4, *(void **)(v4 + 880));
      *(_QWORD *)(v4 + 880) = 0;
      png_free(v4, *(void **)(v4 + 888));
      *(_QWORD *)(v4 + 888) = 0;
      v6 = *(_DWORD *)(v4 + 932);
      if ((v6 & 0x1000) != 0)
      {
        png_zfree(v4, *(_QWORD *)(v4 + 584));
        *(_QWORD *)(v4 + 584) = 0;
        v6 = *(_DWORD *)(v4 + 932);
      }
      v7 = v6 & 0xFFFFEFFF;
      *(_DWORD *)(v4 + 932) = v6 & 0xFFFFEFFF;
      if ((v6 & 0x2000) != 0)
      {
        png_free(v4, *(void **)(v4 + 736));
        *(_QWORD *)(v4 + 736) = 0;
        v7 = *(_DWORD *)(v4 + 932);
      }
      *(_DWORD *)(v4 + 932) = v7 & 0xFFFFDFFF;
      inflateEnd((z_streamp)(v4 + 312));
      png_free(v4, *(void **)(v4 + 808));
      *(_QWORD *)(v4 + 808) = 0;
      png_free(v4, *(void **)(v4 + 1080));
      *(_QWORD *)(v4 + 1080) = 0;
      png_free(v4, *(void **)(v4 + 960));
      *(_QWORD *)(v4 + 960) = 0;
      png_free(v4, *(void **)(v4 + 976));
      *(_QWORD *)(v4 + 976) = 0;
      png_destroy_png_struct((void *)v4);
    }
  }
}

uint64_t png_read_data(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(a1 + 248);
  if (!v1)
    png_error(a1, "Call to NULL read function");
  return v1();
}

size_t png_default_read_data(size_t result, void *__ptr, size_t a3)
{
  uint64_t v4;

  if (result)
  {
    v4 = result;
    result = fread(__ptr, 1uLL, a3, *(FILE **)(result + 256));
    if (result != a3)
      png_error(v4, "Read Error");
  }
  return result;
}

_QWORD *png_set_read_fn(_QWORD *result, uint64_t a2, size_t (*a3)(size_t result, void *__ptr, size_t a3))
{
  _QWORD *v3;
  size_t (*v4)(size_t, void *, size_t);

  if (result)
  {
    v3 = result;
    v4 = png_default_read_data;
    if (a3)
      v4 = a3;
    result[31] = v4;
    result[32] = a2;
    if (result[30])
    {
      result[30] = 0;
      result = (_QWORD *)png_warning((uint64_t)result, "Can't set both read_data_fn and write_data_fn in the same structure");
    }
    v3[81] = 0;
  }
  return result;
}

uint64_t png_set_scale_16(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return png_app_error(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x4000000u;
    }
  }
  return result;
}

uint64_t png_set_palette_to_rgb(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return png_app_error(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x2001000u;
    }
  }
  return result;
}

uint64_t png_set_expand_gray_1_2_4_to_8(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return png_app_error(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x1000u;
    }
  }
  return result;
}

void png_init_read_transformations(uint64_t a1)
{
  int v2;
  int v3;
  _BOOL4 v4;
  unsigned int v5;
  _BOOL4 v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  __int16 v18;
  __int16 v19;
  int v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  __int16 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  _BOOL4 v57;
  _BOOL4 v58;
  int v59;
  __int16 v60;
  _BOOL4 v61;
  _BOOL4 v62;
  unint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  __int16 v73;
  uint64_t v74;
  int v75;
  char v76;
  _BYTE *v77;
  uint64_t v78;
  int v79;
  char v81;
  _BYTE *v82;
  uint64_t v83;
  int v84;
  char v86;
  _BYTE *v87;
  int v88;

  v2 = *(_DWORD *)(a1 + 1176);
  v3 = *(_DWORD *)(a1 + 668);
  if (v2)
  {
    if (v3)
    {
      v88 = 0;
      if (png_muldiv(&v88, v2, v3, 100000))
      {
        v4 = png_gamma_significant(v88);
        *(_WORD *)(a1 + 1250) |= 1u;
        if (!v4)
          goto LABEL_13;
      }
      else
      {
        *(_WORD *)(a1 + 1250) |= 1u;
      }
      v5 = *(_DWORD *)(a1 + 300) | 0x2000;
      goto LABEL_14;
    }
    *(_DWORD *)(a1 + 668) = png_reciprocal(*(_DWORD *)(a1 + 1176));
  }
  else if (v3)
  {
    *(_DWORD *)(a1 + 1176) = png_reciprocal(*(_DWORD *)(a1 + 668));
  }
  else
  {
    *(_DWORD *)(a1 + 1176) = 100000;
    *(_DWORD *)(a1 + 668) = 100000;
  }
  *(_WORD *)(a1 + 1250) |= 1u;
LABEL_13:
  v5 = *(_DWORD *)(a1 + 300) & 0xFFFFDFFF;
LABEL_14:
  *(_DWORD *)(a1 + 300) = v5;
  if ((v5 & 0x40080) == 0x40000)
  {
    *(_DWORD *)(a1 + 300) = v5 & 0xFD7FFEFF;
    *(_DWORD *)(a1 + 296) &= ~0x2000u;
    *(_WORD *)(a1 + 600) = 0;
  }
  v6 = png_gamma_significant(*(_DWORD *)(a1 + 668));
  v7 = *(_DWORD *)(a1 + 300);
  if (!v6)
  {
    v7 &= ~0x800000u;
    *(_DWORD *)(a1 + 300) = v7;
    *(_DWORD *)(a1 + 296) &= ~0x2000u;
  }
  if ((v7 & 0x600000) != 0)
  {
    png_colorspace_set_rgb_coefficients(a1);
    v7 = *(_DWORD *)(a1 + 300);
  }
  if ((v7 & 0x100) != 0)
  {
    if ((*(_BYTE *)(a1 + 607) & 2) == 0)
      *(_DWORD *)(a1 + 292) |= 0x800u;
  }
  else if ((~v7 & 0x4080) == 0)
  {
    v8 = *(unsigned __int16 *)(a1 + 630);
    if (v8 == *(unsigned __int16 *)(a1 + 632) && v8 == *(unsigned __int16 *)(a1 + 634))
    {
      *(_DWORD *)(a1 + 292) |= 0x800u;
      *(_WORD *)(a1 + 636) = v8;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + 607);
  if (v9 == 3)
  {
    v10 = *(unsigned __int16 *)(a1 + 600);
    if (*(_WORD *)(a1 + 600))
    {
      v11 = 0;
      v12 = *(unsigned __int8 **)(a1 + 736);
      v13 = *(unsigned __int16 *)(a1 + 600);
      do
      {
        v15 = *v12++;
        v14 = v15;
        if (v15 != 255)
        {
          if (v14)
          {
            v16 = v7;
            goto LABEL_49;
          }
          v11 = 1;
        }
        --v13;
      }
      while (v13);
      v16 = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 296) &= ~0x2000u;
      if (v11)
        goto LABEL_49;
    }
    else
    {
      *(_DWORD *)(a1 + 296) &= ~0x2000u;
    }
    v16 = v7 & 0xFF7FFE7F;
    *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFE7F;
LABEL_49:
    if ((~v16 & 0x1100) == 0)
    {
      v21 = (unsigned __int8 *)(*(_QWORD *)(a1 + 584) + 3 * *(unsigned __int8 *)(a1 + 628));
      *(_WORD *)(a1 + 630) = *v21;
      *(_WORD *)(a1 + 632) = v21[1];
      *(_WORD *)(a1 + 634) = v21[2];
      if ((_DWORD)v10)
      {
        if ((v16 & 0x2080000) == 0x80000)
        {
          v22 = *(_BYTE **)(a1 + 736);
          do
          {
            *v22 = ~*v22;
            ++v22;
            --v10;
          }
          while (v10);
          v16 = *(_DWORD *)(a1 + 300);
        }
      }
    }
  }
  else
  {
    if ((v9 & 4) != 0)
    {
      v16 = v7;
    }
    else
    {
      v17 = *(unsigned __int16 *)(a1 + 600);
      v16 = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 296) &= ~0x2000u;
      if (!v17)
      {
        v16 = v7 & 0xFF7FFE7F;
        *(_DWORD *)(a1 + 300) = v7 & 0xFF7FFE7F;
      }
    }
    if ((v9 & 2) == 0 && (v16 & 0x1100) == 0x1100)
    {
      v18 = *(_WORD *)(a1 + 636);
      v19 = *(_WORD *)(a1 + 752);
      v20 = *(unsigned __int8 *)(a1 + 608);
      switch(v20)
      {
        case 4:
          v18 *= 17;
          v19 *= 17;
          break;
        case 2:
          v18 *= 85;
          v19 *= 85;
          break;
        case 1:
          v18 *= 255;
          v19 *= 255;
          break;
      }
      *(_WORD *)(a1 + 634) = v18;
      *(_WORD *)(a1 + 632) = v18;
      *(_WORD *)(a1 + 630) = v18;
      if ((v16 & 0x2000000) == 0)
      {
        *(_WORD *)(a1 + 750) = v19;
        *(_WORD *)(a1 + 748) = v19;
        *(_WORD *)(a1 + 746) = v19;
      }
    }
  }
  if ((v16 & 0x380) == 0x280 && *(_BYTE *)(a1 + 608) != 16)
    *(int16x4_t *)(a1 + 630) = vaddhn_s32((int32x4_t)vmull_u16(*(uint16x4_t *)(a1 + 630), (uint16x4_t)0xFF00FF00FF00FFLL), vdupq_n_s32(0x807Fu));
  if ((v16 & 0x4000400) != 0 && (v16 & 0x180) == 0x80 && *(_BYTE *)(a1 + 608) == 16)
    *(int16x4_t *)(a1 + 630) = vmul_s16(*(int16x4_t *)(a1 + 630), (int16x4_t)0x101010101010101);
  *(_WORD *)(a1 + 646) = *(_WORD *)(a1 + 636);
  *(_QWORD *)(a1 + 638) = *(_QWORD *)(a1 + 628);
  if ((v16 & 0x2000) != 0)
    goto LABEL_88;
  if ((v16 & 0x600000) != 0)
  {
    if (png_gamma_significant(*(_DWORD *)(a1 + 1176)) || png_gamma_significant(*(_DWORD *)(a1 + 668)))
      goto LABEL_88;
    v16 = *(_DWORD *)(a1 + 300);
  }
  if ((v16 & 0x80) != 0
    && (png_gamma_significant(*(_DWORD *)(a1 + 1176))
     || png_gamma_significant(*(_DWORD *)(a1 + 668))
     || *(_BYTE *)(a1 + 620) == 3 && png_gamma_significant(*(_DWORD *)(a1 + 624))))
  {
    goto LABEL_88;
  }
  v23 = *(_DWORD *)(a1 + 300);
  if ((v23 & 0x800000) != 0)
  {
    if (!png_gamma_significant(*(_DWORD *)(a1 + 668)))
    {
      v23 = *(_DWORD *)(a1 + 300);
      goto LABEL_75;
    }
LABEL_88:
    png_build_gamma_table(a1, *(unsigned __int8 *)(a1 + 608));
    v23 = *(_DWORD *)(a1 + 300);
    if ((v23 & 0x80) == 0)
    {
      if (*(_BYTE *)(a1 + 607) == 3 && ((v23 & 0x1000) == 0 || (v23 & 0x600000) == 0))
      {
        v34 = *(unsigned __int16 *)(a1 + 592);
        if (*(_WORD *)(a1 + 592))
        {
          v35 = *(_QWORD *)(a1 + 672);
          v36 = (_BYTE *)(*(_QWORD *)(a1 + 584) + 2);
          do
          {
            *(v36 - 2) = *(_BYTE *)(v35 + *(v36 - 2));
            *(v36 - 1) = *(_BYTE *)(v35 + *(v36 - 1));
            *v36 = *(_BYTE *)(v35 + *v36);
            v36 += 3;
            --v34;
          }
          while (v34);
        }
        v23 &= ~0x2000u;
        goto LABEL_144;
      }
      goto LABEL_145;
    }
    if ((v23 & 0x600000) != 0)
      png_warning(a1, "libpng does not support gamma+background+rgb_to_gray");
    if (*(_BYTE *)(a1 + 607) == 3)
    {
      v37 = 100000;
      v38 = *(_QWORD *)(a1 + 584);
      v39 = *(unsigned __int16 *)(a1 + 592);
      v40 = *(unsigned __int8 *)(a1 + 620);
      if (v40 == 1)
      {
        v41 = *(_DWORD *)(a1 + 668);
      }
      else if (v40 == 3)
      {
        v41 = png_reciprocal(*(_DWORD *)(a1 + 624));
        v37 = png_reciprocal2(*(_DWORD *)(a1 + 624), *(_DWORD *)(a1 + 668));
      }
      else
      {
        v41 = 100000;
        if (v40 == 2)
        {
          v42 = *(_QWORD *)(a1 + 672);
          v43 = *(unsigned __int16 *)(a1 + 630);
          LOBYTE(v44) = *(_BYTE *)(v42 + v43);
          v45 = *(unsigned __int16 *)(a1 + 632);
          v46 = *(_BYTE *)(v42 + v45);
          v47 = *(unsigned __int16 *)(a1 + 634);
          v48 = *(_BYTE *)(v42 + v47);
          v49 = *(_QWORD *)(a1 + 696);
          LOBYTE(v50) = *(_BYTE *)(v49 + v43);
          v51 = *(_BYTE *)(v49 + v45);
          v52 = *(_BYTE *)(v49 + v47);
          if (!*(_WORD *)(a1 + 592))
            goto LABEL_143;
LABEL_133:
          v63 = 0;
          v64 = (_BYTE *)(v38 + 2);
          while (v63 < *(unsigned __int16 *)(a1 + 600))
          {
            v65 = *(_QWORD *)(a1 + 736);
            v66 = *(unsigned __int8 *)(v65 + v63);
            if (v66 == 255)
              break;
            if (*(_BYTE *)(v65 + v63))
            {
              v69 = *(_QWORD *)(a1 + 696);
              v70 = *(unsigned __int8 *)(v69 + *(v64 - 2)) * (_WORD)v66
                  + (v66 ^ 0xFF) * v50
                  + 128;
              v71 = *(_QWORD *)(a1 + 688);
              *(v64 - 2) = *(_BYTE *)(v71 + ((unsigned __int16)(v70 + HIBYTE(v70)) >> 8));
              v72 = *(unsigned __int8 *)(v65 + v63) * *(unsigned __int8 *)(v69 + *(v64 - 1))
                  + (*(unsigned __int8 *)(v65 + v63) ^ 0xFF) * v51
                  + 128;
              *(v64 - 1) = *(_BYTE *)(v71 + ((unsigned __int16)(v72 + HIBYTE(v72)) >> 8));
              v73 = *(unsigned __int8 *)(v65 + v63) * *(unsigned __int8 *)(v69 + *v64)
                  + (*(unsigned __int8 *)(v65 + v63) ^ 0xFF) * v52
                  + 128;
              v68 = *(_BYTE *)(v71 + ((unsigned __int16)(v73 + HIBYTE(v73)) >> 8));
              goto LABEL_139;
            }
            *(v64 - 2) = v44;
            *(v64 - 1) = v46;
            *v64 = v48;
LABEL_140:
            ++v63;
            v64 += 3;
            if (v39 == v63)
              goto LABEL_143;
          }
          v67 = *(_QWORD *)(a1 + 672);
          *(v64 - 2) = *(_BYTE *)(v67 + *(v64 - 2));
          *(v64 - 1) = *(_BYTE *)(v67 + *(v64 - 1));
          v68 = *(_BYTE *)(v67 + *v64);
LABEL_139:
          *v64 = v68;
          goto LABEL_140;
        }
      }
      v61 = png_gamma_significant(v37);
      v44 = *(_WORD *)(a1 + 630);
      if (v61)
      {
        LOBYTE(v44) = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 630), v37);
        v46 = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 632), v37);
        v48 = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 634), v37);
      }
      else
      {
        v46 = *(_BYTE *)(a1 + 632);
        v48 = *(_BYTE *)(a1 + 634);
      }
      v62 = png_gamma_significant(v41);
      v50 = *(_WORD *)(a1 + 630);
      if (v62)
      {
        LOBYTE(v50) = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 630), v41);
        v51 = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 632), v41);
        v52 = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 634), v41);
        if (!(_DWORD)v39)
          goto LABEL_143;
      }
      else
      {
        v51 = *(_BYTE *)(a1 + 632);
        v52 = *(_BYTE *)(a1 + 634);
        if (!(_DWORD)v39)
        {
LABEL_143:
          v23 = *(_DWORD *)(a1 + 300) & 0xFFFFDF7F;
LABEL_144:
          *(_DWORD *)(a1 + 300) = v23;
          goto LABEL_145;
        }
      }
      goto LABEL_133;
    }
    v53 = *(unsigned __int8 *)(a1 + 620);
    switch(v53)
    {
      case 3:
        v55 = png_reciprocal(*(_DWORD *)(a1 + 624));
        v56 = *(_DWORD *)(a1 + 624);
        break;
      case 2:
        v55 = png_reciprocal(*(_DWORD *)(a1 + 1176));
        v56 = *(_DWORD *)(a1 + 1176);
        break;
      case 1:
        v54 = 100000;
        v55 = *(_DWORD *)(a1 + 668);
        goto LABEL_111;
      default:
        png_error(a1, "invalid background gamma type");
    }
    v54 = png_reciprocal2(v56, *(_DWORD *)(a1 + 668));
LABEL_111:
    v57 = png_gamma_significant(v55);
    v58 = png_gamma_significant(v54);
    if (v57)
      *(_WORD *)(a1 + 646) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 636), v55);
    if (v58)
      *(_WORD *)(a1 + 636) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 636), v54);
    v59 = *(unsigned __int16 *)(a1 + 630);
    if (v59 == *(unsigned __int16 *)(a1 + 632)
      && v59 == *(unsigned __int16 *)(a1 + 634)
      && v59 == *(unsigned __int16 *)(a1 + 636))
    {
      v60 = *(_WORD *)(a1 + 646);
      *(_WORD *)(a1 + 644) = v60;
      *(_WORD *)(a1 + 642) = v60;
      *(_WORD *)(a1 + 640) = v60;
      *(_WORD *)(a1 + 634) = v59;
      *(_WORD *)(a1 + 632) = v59;
      *(_WORD *)(a1 + 630) = v59;
    }
    else
    {
      if (v57)
      {
        *(_WORD *)(a1 + 640) = png_gamma_correct(a1, v59, v55);
        *(_WORD *)(a1 + 642) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 632), v55);
        *(_WORD *)(a1 + 644) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 634), v55);
      }
      if (v58)
      {
        *(_WORD *)(a1 + 630) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 630), v54);
        *(_WORD *)(a1 + 632) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 632), v54);
        *(_WORD *)(a1 + 634) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 634), v54);
      }
    }
    *(_BYTE *)(a1 + 620) = 1;
    v23 = *(_DWORD *)(a1 + 300);
    goto LABEL_145;
  }
LABEL_75:
  if ((v23 & 0x80) != 0 && *(_BYTE *)(a1 + 607) == 3)
  {
    v24 = *(unsigned __int16 *)(a1 + 600);
    if (*(_WORD *)(a1 + 600))
    {
      v25 = 0;
      v26 = *(unsigned __int8 *)(a1 + 630);
      v27 = *(unsigned __int8 *)(a1 + 632);
      v28 = *(unsigned __int8 *)(a1 + 634);
      v29 = (_BYTE *)(*(_QWORD *)(a1 + 584) + 2);
      do
      {
        v30 = *(_QWORD *)(a1 + 736);
        v31 = *(unsigned __int8 *)(v30 + v25);
        if (v31 != 255)
        {
          if (*(_BYTE *)(v30 + v25))
          {
            v32 = *(v29 - 2) * (_WORD)v31 + v26 * (v31 ^ 0xFF) + 128;
            *(v29 - 2) = (unsigned __int16)(v32 + ((unsigned __int16)(v32 & 0xFF00) >> 8)) >> 8;
            *(v29 - 1) = (unsigned __int16)(*(unsigned __int8 *)(v30 + v25) * *(v29 - 1)
                                          + v27 * (*(unsigned __int8 *)(v30 + v25) ^ 0xFF)
                                          + 128
                                          + ((unsigned __int16)((*(unsigned __int8 *)(v30 + v25)
                                                               * *(v29 - 1)
                                                               + v27 * (*(unsigned __int8 *)(v30 + v25) ^ 0xFF)
                                                               + 128) & 0xFF00) >> 8)) >> 8;
            v33 = *(unsigned __int8 *)(v30 + v25) * *v29
                + v28 * (*(unsigned __int8 *)(v30 + v25) ^ 0xFF)
                + 128;
            *v29 = (unsigned __int16)(v33 + ((unsigned __int16)(v33 & 0xFF00) >> 8)) >> 8;
          }
          else
          {
            *(v29 - 2) = v26;
            *(v29 - 1) = v27;
            *v29 = v28;
          }
        }
        ++v25;
        v29 += 3;
      }
      while (v24 != v25);
      v23 = *(_DWORD *)(a1 + 300);
    }
    v23 &= ~0x80u;
    goto LABEL_144;
  }
LABEL_145:
  if ((v23 & 0x1008) == 8 && *(_BYTE *)(a1 + 607) == 3)
  {
    v74 = *(unsigned __int16 *)(a1 + 592);
    v75 = *(unsigned __int8 *)(a1 + 720);
    *(_DWORD *)(a1 + 300) = v23 & 0xFFFFFFF7;
    if ((v75 - 1) <= 6 && (_DWORD)v74)
    {
      v76 = 8 - v75;
      v77 = *(_BYTE **)(a1 + 584);
      v78 = v74;
      do
      {
        *v77 = *v77 >> v76;
        v77 += 3;
        --v78;
      }
      while (v78);
    }
    v79 = *(unsigned __int8 *)(a1 + 721);
    if ((v79 - 1) <= 6 && (_DWORD)v74 != 0)
    {
      v81 = 8 - v79;
      v82 = (_BYTE *)(*(_QWORD *)(a1 + 584) + 1);
      v83 = v74;
      do
      {
        *v82 = *v82 >> v81;
        v82 += 3;
        --v83;
      }
      while (v83);
    }
    v84 = *(unsigned __int8 *)(a1 + 722);
    if ((v84 - 1) <= 6 && (_DWORD)v74 != 0)
    {
      v86 = 8 - v84;
      v87 = (_BYTE *)(*(_QWORD *)(a1 + 584) + 2);
      do
      {
        *v87 = *v87 >> v86;
        v87 += 3;
        --v74;
      }
      while (v74);
    }
  }
}

uint64_t png_do_read_transformations(uint64_t result, unsigned int *a2, uint8x8_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned __int16 *v18;
  unsigned int *v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  char v31;
  _BYTE *v32;
  _BYTE *v33;
  char v34;
  _BYTE *v35;
  char v36;
  char v37;
  char v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  char v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  char v46;
  _BYTE *v47;
  char v48;
  _BYTE *v49;
  char v50;
  int v51;
  char v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  char v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned __int8 v81;
  unsigned __int8 *v82;
  int v83;
  int v84;
  int v85;
  unsigned __int8 v87;
  unsigned __int16 *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v94;
  unsigned __int8 v95;
  char v96;
  unsigned __int8 v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  int v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned __int8 *v108;
  unsigned int v109;
  unsigned __int8 *v110;
  unsigned int v111;
  unint64_t v112;
  int v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned int v127;
  BOOL v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  unsigned int v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  int v142;
  unsigned int v143;
  unsigned __int16 v144;
  unsigned __int8 *v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  int v153;
  int v154;
  unsigned __int8 *v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unsigned __int16 *v161;
  unsigned __int8 *v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int8 *v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  unsigned __int8 *v187;
  int v188;
  uint64_t v189;
  unsigned __int8 *v190;
  unsigned __int8 *v191;
  unsigned __int8 *v192;
  int v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  char v198;
  int v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  unsigned __int8 *v206;
  unsigned __int8 *v207;
  unsigned int v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  char v215;
  BOOL v216;
  uint64_t v217;
  unsigned int v218;
  int v219;
  _BYTE *v220;
  _BYTE *v221;
  _BYTE *v222;
  _BYTE *v223;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  int v228;
  int v229;
  int v230;
  _BYTE *v231;
  uint64_t v232;
  int v233;
  int v234;
  _BOOL4 v235;
  unint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  uint64_t v239;
  _BYTE *v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  int v244;
  _BYTE *v245;
  int v246;
  uint64_t v247;
  int v248;
  _BYTE *v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  unsigned __int8 *v256;
  _BYTE *v257;
  unsigned int v258;
  uint64_t v259;
  int v260;
  unsigned __int8 *v261;
  _BYTE *v262;
  unsigned int v263;
  int v264;
  _BOOL4 v265;
  uint64_t v266;
  int v267;
  unsigned __int8 *v268;
  _BYTE *v269;
  unsigned int v270;
  uint64_t v271;
  int v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  int v277;
  uint64_t v278;
  int v279;
  _BYTE *v280;
  char *v281;
  unsigned int v282;
  char v283;
  int v284;
  _BYTE *v285;
  _BYTE *v286;
  unsigned int v287;
  _BYTE *v288;
  _BYTE *v289;
  unsigned int v290;
  _BYTE *v291;
  _BYTE *v292;
  unsigned int v293;
  uint64_t v294;
  char *v295;
  int v296;
  char v297;
  char v298;
  char v299;
  char v300;
  uint64_t v301;
  int v302;
  _BYTE *v303;
  uint64_t v304;
  __int16 v305;
  int v306;
  _BYTE *v307;
  uint64_t v308;
  int v309;
  _BYTE *v310;
  __int16 v311;
  uint64_t v312;
  unsigned int v313;
  int v314;
  __int32 *v315;
  int16x8_t v316;
  char *v317;
  char v318;
  int8x8_t *v319;
  __int32 *v320;
  int16x8_t v321;
  int v322;
  uint64_t (*v323)(uint64_t, unsigned int *, uint64_t);
  char v324;
  unsigned __int8 v325;
  BOOL v326;
  unint64_t v327;
  unint64_t v328;
  int v329;
  uint64_t v330;
  unsigned int v331;
  unsigned __int16 *v332;
  int v333;
  unsigned int v334;
  unsigned __int16 v335;
  unsigned __int8 *v336;
  int v337;
  unsigned int v338;
  __int16 v339;
  __int16 v340;
  int v341;
  uint64_t v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  int v356;
  _BYTE *v357;
  int v358;
  unsigned __int16 *v359;
  int v360;
  int v361;
  unsigned int v362;
  unsigned int v363;
  int v364;
  BOOL v365;
  int v366;
  int v367;
  unsigned int v368;
  uint64_t v369;
  unsigned int v370;
  int v371;
  BOOL v372;
  int v373;
  uint64_t v374;
  unsigned __int8 v375;
  unsigned __int8 *v376;
  unsigned __int8 *v377;
  unsigned __int8 *v378;
  int v379;
  int v380;
  unsigned int v381;
  BOOL v382;
  int v383;
  int v384;
  unsigned int v385;
  BOOL v386;
  int v387;
  unsigned int i;
  int v389;
  uint64_t v390;
  const char *v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  uint64_t v395;

  v3 = result;
  v395 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(result + 544);
  if (!v4)
  {
    v391 = "NULL row buffer";
    goto LABEL_674;
  }
  if ((*(_DWORD *)(result + 296) & 0x4040) == 0x4000)
  {
    v391 = "Uninitialized row";
    goto LABEL_674;
  }
  v6 = *(_DWORD *)(result + 300);
  if ((v6 & 0x1000) != 0)
  {
    v7 = *(unsigned __int16 *)(result + 600);
    if (*((_BYTE *)a2 + 16) != 3)
    {
      if ((v6 & 0x2000000) != 0 && *(_WORD *)(result + 600))
      {
        v18 = (unsigned __int16 *)(result + 744);
        v19 = a2;
      }
      else
      {
        v19 = a2;
        v18 = 0;
      }
      result = (uint64_t)png_do_expand(v19, v4 + 1, v18);
      goto LABEL_60;
    }
    if (*(_WORD *)(result + 600) && *(_BYTE *)(result + 608) == 8 && !*(_QWORD *)(result + 976))
    {
      *(_QWORD *)(result + 976) = png_malloc((_QWORD *)result, 0x400uLL);
      result = png_riffle_palette_neon(v3);
      if (*((_BYTE *)a2 + 16) != 3)
        goto LABEL_60;
      v4 = *(_QWORD *)(v3 + 544);
      v7 = *(unsigned __int16 *)(v3 + 600);
    }
    v8 = *(_QWORD *)(v3 + 584);
    v9 = *(_QWORD *)(v3 + 736);
    v10 = v4 + 1;
    v11 = *a2;
    v12 = *((unsigned __int8 *)a2 + 17);
    if (v12 > 7)
    {
      if (v12 != 8)
        goto LABEL_60;
      goto LABEL_44;
    }
    if (v12 == 1)
    {
      v20 = (unsigned __int8 *)(v10 + ((v11 - 1) >> 3));
      v392 = v4 + v11;
      v393 = (uint64_t)v20;
      if ((_DWORD)v11)
      {
        v21 = -(int)v11 & 7;
        v22 = v11 + v4 - 1;
        v23 = v11;
        do
        {
          *(_BYTE *)(v22 + 1) = (*v20 >> v21) & 1;
          if (v21 == 7)
          {
            v21 = 0;
            v393 = (uint64_t)--v20;
          }
          else
          {
            ++v21;
          }
          v392 = v22--;
          --v23;
        }
        while (v23);
        goto LABEL_41;
      }
    }
    else if (v12 == 2)
    {
      v24 = (unsigned __int8 *)(v10 + ((v11 - 1) >> 2));
      v392 = v4 + v11;
      v393 = (uint64_t)v24;
      if ((_DWORD)v11)
      {
        v25 = ~(2 * v11 + 6) & 6;
        v26 = v11 + v4 - 1;
        v27 = v11;
        do
        {
          *(_BYTE *)(v26 + 1) = (*v24 >> v25) & 3;
          if (v25 == 6)
          {
            v25 = 0;
            v393 = (uint64_t)--v24;
          }
          else
          {
            v25 += 2;
          }
          v392 = v26--;
          --v27;
        }
        while (v27);
        goto LABEL_41;
      }
    }
    else
    {
      v13 = *a2;
      if (v12 != 4)
      {
LABEL_43:
        *((_BYTE *)a2 + 17) = 8;
        *((_BYTE *)a2 + 19) = 8;
        *((_QWORD *)a2 + 1) = v13;
LABEL_44:
        v393 = v10 + v11 - 1;
        if (v7)
        {
          v392 = v10 + 4 * v11 - 1;
          if (*(_QWORD *)(v3 + 976))
            result = png_do_expand_palette_rgba8_neon(v3, a2, v10, &v393, &v392);
          else
            result = 0;
          v39 = v11 - result;
          if (v11 > result)
          {
            v40 = (unsigned __int8 *)v393;
            do
            {
              v41 = *v40;
              if (v7 <= v41)
              {
                v44 = (_BYTE *)v392--;
                *v44 = -1;
              }
              else
              {
                v42 = *(_BYTE *)(v9 + v41);
                v43 = (_BYTE *)v392--;
                *v43 = v42;
              }
              v45 = (_BYTE *)v392;
              v46 = *(_BYTE *)(v8 + 3 * *(unsigned __int8 *)v393 + 2);
              --v392;
              *v45 = v46;
              v47 = (_BYTE *)v392;
              v48 = *(_BYTE *)(v8 + 3 * *(unsigned __int8 *)v393 + 1);
              --v392;
              *v47 = v48;
              v49 = (_BYTE *)v392;
              v50 = *(_BYTE *)(v8 + 3 * *(unsigned __int8 *)v393);
              --v392;
              *v49 = v50;
              v40 = (unsigned __int8 *)--v393;
              --v39;
            }
            while (v39);
          }
          *((_BYTE *)a2 + 17) = 8;
          *((_BYTE *)a2 + 19) = 32;
          v28 = (4 * v11);
          v37 = 4;
          v38 = 6;
        }
        else
        {
          v28 = (3 * v11);
          v392 = v10 + v28 - 1;
          result = png_do_expand_palette_rgb8_neon(v3, a2, v10, &v393, &v392);
          v29 = v11 - result;
          if (v11 > result)
          {
            v30 = (unsigned __int8 *)v393;
            do
            {
              v31 = *(_BYTE *)(v8 + 3 * *v30 + 2);
              v32 = (_BYTE *)v392--;
              *v32 = v31;
              v33 = (_BYTE *)v392;
              v34 = *(_BYTE *)(v8 + 3 * *(unsigned __int8 *)v393 + 1);
              --v392;
              *v33 = v34;
              v35 = (_BYTE *)v392;
              v36 = *(_BYTE *)(v8 + 3 * *(unsigned __int8 *)v393);
              --v392;
              *v35 = v36;
              v30 = (unsigned __int8 *)--v393;
              --v29;
            }
            while (v29);
          }
          *((_BYTE *)a2 + 17) = 8;
          *((_BYTE *)a2 + 19) = 24;
          v37 = 3;
          v38 = 2;
        }
        *((_QWORD *)a2 + 1) = v28;
        *((_BYTE *)a2 + 16) = v38;
        *((_BYTE *)a2 + 18) = v37;
        goto LABEL_60;
      }
      v14 = (unsigned __int8 *)(v10 + ((v11 - 1) >> 1));
      v392 = v4 + v11;
      v393 = (uint64_t)v14;
      if ((_DWORD)v11)
      {
        v15 = 4 * (v11 & 1);
        v16 = v11 + v4 - 1;
        v17 = v11;
        do
        {
          *(_BYTE *)(v16 + 1) = (*v14 >> v15) & 0xF;
          if (v15 == 4)
          {
            v15 = 0;
            v393 = (uint64_t)--v14;
          }
          else
          {
            v15 += 4;
          }
          v392 = v16--;
          --v17;
        }
        while (v17);
LABEL_41:
        v13 = v11;
        goto LABEL_43;
      }
    }
    v13 = 0;
    goto LABEL_43;
  }
LABEL_60:
  v51 = *(_DWORD *)(v3 + 300);
  if ((v51 & 0x40080) == 0x40000 && (*((unsigned __int8 *)a2 + 16) | 2) == 6)
  {
    result = png_do_strip_channel((uint64_t)a2, (_BYTE *)(*(_QWORD *)(v3 + 544) + 1), 0);
    v51 = *(_DWORD *)(v3 + 300);
  }
  if ((v51 & 0x600000) == 0)
    goto LABEL_130;
  v52 = *((_BYTE *)a2 + 16);
  if ((v52 & 3) != 2)
    goto LABEL_130;
  v53 = (unsigned __int8 *)(*(_QWORD *)(v3 + 544) + 1);
  v54 = *(unsigned __int16 *)(v3 + 970);
  v55 = *(unsigned __int16 *)(v3 + 972);
  v56 = 0x8000 - (v54 + v55);
  v57 = *a2;
  v58 = *a2;
  if (*((_BYTE *)a2 + 17) == 8)
  {
    v59 = *(_QWORD *)(v3 + 688);
    if (v59)
    {
      v60 = *(_QWORD *)(v3 + 696);
      if (v60)
      {
        if (v58)
        {
          v61 = 0;
          result = *(_QWORD *)(v3 + 544) + 1;
          while (1)
          {
            v62 = (_BYTE *)*v53;
            v63 = v53[1];
            v64 = v53[2];
            v65 = (_DWORD)v62 == (_DWORD)v63 && (_DWORD)v62 == (_DWORD)v64;
            if (!v65)
              break;
            v66 = *(_QWORD *)(v3 + 672);
            if (v66)
            {
              v62 += v66;
              goto LABEL_77;
            }
LABEL_78:
            *(_BYTE *)result = (_BYTE)v62;
            if ((v52 & 4) != 0)
            {
              v67 = v53[3];
              v53 += 4;
              *(_BYTE *)(result + 1) = v67;
              result += 2;
            }
            else
            {
              v53 += 3;
              ++result;
            }
            if (!--v58)
              goto LABEL_124;
          }
          v62 = (_BYTE *)(v59
                        + ((*(unsigned __int8 *)(v60 + v63) * v55
                          + v62[v60] * v54
                          + v56 * *(unsigned __int8 *)(v60 + v64)
                          + 0x4000) >> 15));
          v61 = 1;
LABEL_77:
          LOBYTE(v62) = *v62;
          goto LABEL_78;
        }
        goto LABEL_123;
      }
    }
    if (v58)
    {
      v61 = 0;
      v82 = (unsigned __int8 *)(*(_QWORD *)(v3 + 544) + 1);
      do
      {
        v83 = *v82;
        v84 = v82[1];
        v85 = v82[2];
        if (v83 != v84 || v83 != v85)
        {
          LOBYTE(v83) = (v83 * v54 + v84 * v55 + v56 * v85) >> 15;
          v61 = 1;
        }
        *v53 = v83;
        result = (uint64_t)(v53 + 1);
        if ((v52 & 4) != 0)
        {
          v87 = v82[3];
          v82 += 4;
          v53[1] = v87;
          v53 += 2;
        }
        else
        {
          v82 += 3;
          ++v53;
        }
        --v58;
      }
      while (v58);
      goto LABEL_124;
    }
LABEL_123:
    v61 = 0;
    goto LABEL_124;
  }
  v68 = *(_QWORD *)(v3 + 712);
  if (v68 && (v69 = *(_QWORD *)(v3 + 704)) != 0)
  {
    if (!v58)
      goto LABEL_123;
    v61 = 0;
    result = *(_QWORD *)(v3 + 544) + 1;
    do
    {
      v70 = *(unsigned __int8 *)result;
      v71 = *(unsigned __int8 *)(result + 1);
      v72 = v71 | (v70 << 8);
      v73 = *(unsigned __int8 *)(result + 2);
      v74 = *(unsigned __int8 *)(result + 3);
      v75 = __rev16(*(unsigned __int16 *)(result + 4));
      if ((v74 | ((_DWORD)v73 << 8)) == v72 && v72 == v75)
      {
        v80 = *(_QWORD *)(v3 + 680);
        if (v80)
        {
          LOBYTE(v71) = *(_WORD *)(*(_QWORD *)(v80 + 8 * (v74 >> *(_DWORD *)(v3 + 664))) + 2 * v73);
          v70 = HIBYTE(*(unsigned __int16 *)(*(_QWORD *)(v80 + 8 * (v74 >> *(_DWORD *)(v3 + 664))) + 2 * v73));
        }
      }
      else
      {
        v77 = *(_DWORD *)(v3 + 664);
        v78 = *(unsigned __int16 *)(*(_QWORD *)(v68 + 8 * (v74 >> v77)) + 2 * v73) * v55
            + *(unsigned __int16 *)(*(_QWORD *)(v68 + 8 * (v72 >> v77)) + 2 * (v72 >> 8)) * v54
            + v56 * *(unsigned __int16 *)(*(_QWORD *)(v68 + 8 * (v75 >> v77)) + 2 * (v75 >> 8))
            + 0x4000;
        v79 = *(unsigned __int16 *)(*(_QWORD *)(v69 + 8 * ((v78 >> 15) >> v77))
                                  + 2 * (v78 >> 23));
        LOBYTE(v71) = v79;
        v70 = v79 >> 8;
        v61 = 1;
      }
      *v53 = v70;
      v53[1] = v71;
      if ((v52 & 4) != 0)
      {
        v53[2] = *(_BYTE *)(result + 6);
        v81 = *(_BYTE *)(result + 7);
        result += 8;
        v53[3] = v81;
        v53 += 4;
      }
      else
      {
        result += 6;
        v53 += 2;
      }
      --v58;
    }
    while (v58);
  }
  else
  {
    if (!v58)
      goto LABEL_123;
    v61 = 0;
    v88 = (unsigned __int16 *)(*(_QWORD *)(v3 + 544) + 1);
    do
    {
      v89 = __rev16(*v88);
      v90 = __rev16(v88[1]);
      v91 = v88[2];
      v92 = __rev16(v91);
      if (v89 != bswap32(v91) >> 16 || v89 != v90)
        v61 = 1;
      v94 = v90 * v55 + v89 * v54 + v92 * v56 + 0x4000;
      result = v94 >> 15;
      *v53 = v94 >> 23;
      v53[1] = result;
      if ((v52 & 4) != 0)
      {
        v53[2] = *((_BYTE *)v88 + 6);
        v95 = *((_BYTE *)v88 + 7);
        v88 += 4;
        v53[3] = v95;
        v53 += 4;
      }
      else
      {
        v88 += 3;
        v53 += 2;
      }
      --v58;
    }
    while (v58);
  }
LABEL_124:
  v96 = *((_BYTE *)a2 + 18) - 2;
  *((_BYTE *)a2 + 18) = v96;
  *((_BYTE *)a2 + 16) &= ~2u;
  v97 = *((_BYTE *)a2 + 17) * v96;
  *((_BYTE *)a2 + 19) = v97;
  v98 = (v97 * (unint64_t)v57 + 7) >> 3;
  v99 = v57 * (unint64_t)(v97 >> 3);
  if (v97 < 8u)
    v99 = v98;
  *((_QWORD *)a2 + 1) = v99;
  v51 = *(_DWORD *)(v3 + 300);
  if (v61)
  {
    *(_BYTE *)(v3 + 968) = 1;
    if ((v51 & 0x600000) == 0x400000)
    {
      result = png_warning(v3, "png_do_rgb_to_gray found nongray pixel");
      v51 = *(_DWORD *)(v3 + 300);
    }
    if ((v51 & 0x600000) == 0x200000)
    {
      v391 = "png_do_rgb_to_gray found nongray pixel";
      goto LABEL_674;
    }
  }
LABEL_130:
  if ((v51 & 0x4000) != 0 && (*(_BYTE *)(v3 + 293) & 8) == 0)
  {
    result = (uint64_t)png_do_gray_to_rgb(a2, *(_QWORD *)(v3 + 544) + 1);
    v51 = *(_DWORD *)(v3 + 300);
  }
  if ((v51 & 0x80) != 0)
  {
    result = *(_QWORD *)(v3 + 544);
    v115 = (unsigned __int8 *)(result + 1);
    v116 = *(_QWORD *)(v3 + 672);
    v117 = *(_QWORD *)(v3 + 688);
    v118 = *(_QWORD *)(v3 + 696);
    v119 = *(_QWORD *)(v3 + 680);
    v120 = *(_QWORD *)(v3 + 704);
    v121 = *(_QWORD *)(v3 + 712);
    v122 = *(_DWORD *)(v3 + 664);
    v123 = *(_DWORD *)(v3 + 296);
    v124 = *a2;
    switch(*((_BYTE *)a2 + 16))
    {
      case 0:
        switch(*((_BYTE *)a2 + 17))
        {
          case 1:
            if (v124)
            {
              v125 = *(unsigned __int16 *)(v3 + 752);
              v126 = 7;
              do
              {
                v127 = *v115;
                if (((v127 >> v126) & 1) == v125)
                  *v115 = (*(unsigned __int16 *)(v3 + 636) << v126) | (0x7F7Fu >> (7 - v126)) & v127;
                v128 = v126 == 0;
                if (v126)
                  --v126;
                else
                  v126 = 7;
                if (v128)
                  ++v115;
                --v124;
              }
              while (v124);
            }
            break;
          case 2:
            if (v116)
            {
              if (v124)
              {
                v360 = *(unsigned __int16 *)(v3 + 752);
                v361 = 6;
                do
                {
                  v362 = *v115;
                  v363 = (v362 >> v361) & 3;
                  if (v363 == v360)
                  {
                    v362 &= 0x3F3Fu >> (6 - v361);
                    LOBYTE(v364) = *(unsigned __int16 *)(v3 + 636) << v361;
                  }
                  else
                  {
                    result = 0x3F3Fu >> (6 - v361);
                    LOBYTE(v362) = result & v362;
                    v364 = *(unsigned __int8 *)(v116 + 85 * v363) >> 6 << v361;
                  }
                  *v115 = v364 | v362;
                  v365 = v361 == 0;
                  if (v361)
                    v361 -= 2;
                  else
                    v361 = 6;
                  if (v365)
                    ++v115;
                  --v124;
                }
                while (v124);
              }
            }
            else if (v124)
            {
              v379 = *(unsigned __int16 *)(v3 + 752);
              v380 = 6;
              do
              {
                v381 = *v115;
                if (((v381 >> v380) & 3) == v379)
                  *v115 = (*(unsigned __int16 *)(v3 + 636) << v380) | (0x3F3Fu >> (6 - v380)) & v381;
                v382 = v380 == 0;
                if (v380)
                  v380 -= 2;
                else
                  v380 = 6;
                if (v382)
                  ++v115;
                --v124;
              }
              while (v124);
            }
            break;
          case 3:
          case 5:
          case 6:
          case 7:
            goto LABEL_134;
          case 4:
            if (v116)
            {
              if (v124)
              {
                v366 = *(unsigned __int16 *)(v3 + 752);
                v367 = 4;
                do
                {
                  v368 = *v115;
                  v369 = (v368 >> v367) & 0xF;
                  v370 = (0xF0Fu >> (4 - v367)) & v368;
                  if ((_DWORD)v369 == v366)
                    LOBYTE(v371) = *(unsigned __int16 *)(v3 + 636) << v367;
                  else
                    v371 = *(unsigned __int8 *)(v116 + (v369 | (16 * v369))) >> 4 << v367;
                  *v115 = v371 | v370;
                  v372 = v367 == 0;
                  if (v367)
                    v367 -= 4;
                  else
                    v367 = 4;
                  if (v372)
                    ++v115;
                  --v124;
                }
                while (v124);
              }
            }
            else if (v124)
            {
              v383 = *(unsigned __int16 *)(v3 + 752);
              v384 = 4;
              do
              {
                v385 = *v115;
                if (((v385 >> v384) & 0xF) == v383)
                  *v115 = (*(unsigned __int16 *)(v3 + 636) << v384) | (0xF0Fu >> (4 - v384)) & v385;
                v386 = v384 == 0;
                if (v384)
                  v384 -= 4;
                else
                  v384 = 4;
                if (v386)
                  ++v115;
                --v124;
              }
              while (v124);
            }
            break;
          case 8:
            if (v116)
            {
              if (v124)
              {
                v373 = *(unsigned __int16 *)(v3 + 752);
                do
                {
                  v374 = *v115;
                  if (v373 == (_DWORD)v374)
                    v375 = *(_BYTE *)(v3 + 636);
                  else
                    v375 = *(_BYTE *)(v116 + v374);
                  *v115++ = v375;
                  --v124;
                }
                while (v124);
              }
            }
            else if (v124)
            {
              v387 = *(unsigned __int16 *)(v3 + 752);
              do
              {
                if (v387 == *v115)
                  *v115 = *(_BYTE *)(v3 + 636);
                ++v115;
                --v124;
              }
              while (v124);
            }
            break;
          default:
            if (*((_BYTE *)a2 + 17) == 16)
            {
              if (v119)
              {
                if (v124)
                {
                  v329 = *(unsigned __int16 *)(v3 + 752);
                  do
                  {
                    v330 = *v115;
                    v331 = v115[1];
                    v332 = (unsigned __int16 *)(v3 + 636);
                    if ((v331 | ((_DWORD)v330 << 8)) != v329)
                      v332 = (unsigned __int16 *)(*(_QWORD *)(v119 + 8 * (v331 >> v122)) + 2 * v330);
                    *(_WORD *)v115 = bswap32(*v332) >> 16;
                    v115 += 2;
                    --v124;
                  }
                  while (v124);
                }
              }
              else if (v124)
              {
                v389 = *(unsigned __int16 *)(v3 + 752);
                v390 = result + 2;
                do
                {
                  if (v389 == bswap32(*(unsigned __int16 *)(v390 - 1)) >> 16)
                    *(_WORD *)(v390 - 1) = bswap32(*(unsigned __int16 *)(v3 + 636)) >> 16;
                  v390 += 2;
                  --v124;
                }
                while (v124);
              }
            }
            break;
        }
        goto LABEL_134;
      case 2:
        if (*((_BYTE *)a2 + 17) == 8)
        {
          if (v116)
          {
            if (v124)
            {
              v137 = *(unsigned __int16 *)(v3 + 746);
              v138 = (_BYTE *)(result + 3);
              do
              {
                v139 = *(v138 - 2);
                v140 = *(v138 - 1);
                if (__PAIR64__(*(unsigned __int16 *)(v3 + 748), v137) == __PAIR64__(v140, v139)
                  && *(_WORD *)(v3 + 750) == *v138)
                {
                  *(v138 - 2) = *(_BYTE *)(v3 + 630);
                  *(v138 - 1) = *(_BYTE *)(v3 + 632);
                  v141 = *(_BYTE *)(v3 + 634);
                }
                else
                {
                  *(v138 - 2) = *(_BYTE *)(v116 + v139);
                  *(v138 - 1) = *(_BYTE *)(v116 + v140);
                  v141 = *(_BYTE *)(v116 + *v138);
                }
                *v138 = v141;
                v138 += 3;
                --v124;
              }
              while (v124);
            }
          }
          else if (v124)
          {
            v356 = *(unsigned __int16 *)(v3 + 746);
            v357 = (_BYTE *)(result + 3);
            do
            {
              if (v356 == *(v357 - 2)
                && *(_WORD *)(v3 + 748) == *(v357 - 1)
                && *(_WORD *)(v3 + 750) == *v357)
              {
                *(v357 - 2) = *(_BYTE *)(v3 + 630);
                *(v357 - 1) = *(_BYTE *)(v3 + 632);
                *v357 = *(_BYTE *)(v3 + 634);
              }
              v357 += 3;
              --v124;
            }
            while (v124);
          }
        }
        else if (v119)
        {
          if (v124)
          {
            v154 = *(unsigned __int16 *)(v3 + 746);
            v155 = (unsigned __int8 *)(result + 3);
            do
            {
              v156 = *(v155 - 2);
              v157 = *(v155 - 1);
              v158 = v155[2];
              v159 = v155[3];
              result = v155[1];
              v160 = *v155;
              if ((v157 | ((_DWORD)v156 << 8)) == v154
                && (result | (v160 << 8)) == *(unsigned __int16 *)(v3 + 748)
                && (v159 | ((_DWORD)v158 << 8)) == *(unsigned __int16 *)(v3 + 750))
              {
                *((_WORD *)v155 - 1) = bswap32(*(unsigned __int16 *)(v3 + 630)) >> 16;
                *(_WORD *)v155 = bswap32(*(unsigned __int16 *)(v3 + 632)) >> 16;
                v161 = (unsigned __int16 *)(v3 + 634);
              }
              else
              {
                *((_WORD *)v155 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v119 + 8 * (v157 >> v122)) + 2 * v156)) >> 16;
                *(_WORD *)v155 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v119 + 8 * (result >> v122))
                                                             + 2 * v160)) >> 16;
                v161 = (unsigned __int16 *)(*(_QWORD *)(v119 + 8 * (v159 >> v122)) + 2 * v158);
              }
              *((_WORD *)v155 + 1) = bswap32(*v161) >> 16;
              v155 += 6;
              --v124;
            }
            while (v124);
          }
        }
        else if (v124)
        {
          v358 = *(unsigned __int16 *)(v3 + 746);
          v359 = (unsigned __int16 *)(result + 3);
          do
          {
            if (v358 == bswap32(*(v359 - 1)) >> 16
              && *(unsigned __int16 *)(v3 + 748) == bswap32(*v359) >> 16
              && __rev16(v359[1]) == *(unsigned __int16 *)(v3 + 750))
            {
              *(v359 - 1) = bswap32(*(unsigned __int16 *)(v3 + 630)) >> 16;
              *v359 = bswap32(*(unsigned __int16 *)(v3 + 632)) >> 16;
              v359[1] = bswap32(*(unsigned __int16 *)(v3 + 634)) >> 16;
            }
            v359 += 3;
            --v124;
          }
          while (v124);
        }
        goto LABEL_134;
      case 4:
        if (*((_BYTE *)a2 + 17) == 8)
        {
          if (v118 && v117 && v116)
          {
            for (; v124; --v124)
            {
              v142 = v115[1];
              if (v115[1])
              {
                if (v142 == 255)
                {
                  LOBYTE(v143) = *(_BYTE *)(v116 + *v115);
                }
                else
                {
                  v144 = *(unsigned __int8 *)(v118 + *v115) * (_WORD)v142 + *(_WORD *)(v3 + 646) * (v142 ^ 0xFF) + 128;
                  v143 = HIBYTE(v144) + v144;
                  if ((v123 & 0x2000) != 0)
                    v143 >>= 8;
                  else
                    LOBYTE(v143) = *(_BYTE *)(v117 + BYTE1(v143));
                }
              }
              else
              {
                LOBYTE(v143) = *(_BYTE *)(v3 + 636);
              }
              *v115 = v143;
              v115 += 2;
            }
          }
          else
          {
            for (; v124; --v124)
            {
              v333 = v115[1];
              if (v333 != 255)
              {
                if (v115[1])
                {
                  v335 = *v115 * (_WORD)v333 + *(_WORD *)(v3 + 636) * (v333 ^ 0xFF) + 128;
                  v334 = (HIBYTE(v335) + v335) >> 8;
                }
                else
                {
                  LOBYTE(v334) = *(_BYTE *)(v3 + 636);
                }
                *v115 = v334;
              }
              v115 += 2;
            }
          }
          goto LABEL_134;
        }
        if (!v119 || !v120 || !v121)
        {
          if (v124)
          {
            v342 = result + 2;
            do
            {
              v343 = __rev16(*(unsigned __int16 *)(v342 + 1));
              if (v343 != 0xFFFF)
              {
                if (v343)
                {
                  v344 = __rev16(*(unsigned __int16 *)(v342 - 1)) * v343
                       + (v343 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 636)
                       + 0x8000;
                  v345 = v344 + HIWORD(v344);
                  *(_BYTE *)(v342 - 1) = HIBYTE(v345);
                  *(_BYTE *)v342 = BYTE2(v345);
                }
                else
                {
                  *(_WORD *)(v342 - 1) = bswap32(*(unsigned __int16 *)(v3 + 636)) >> 16;
                }
              }
              v342 += 4;
              --v124;
            }
            while (v124);
          }
          goto LABEL_134;
        }
        if (!v124)
          goto LABEL_134;
        v162 = (unsigned __int8 *)(result + 2);
        while (1)
        {
          v163 = __rev16(*(unsigned __int16 *)(v162 + 1));
          if (v163)
          {
            if (v163 != 0xFFFF)
            {
              result = (v163 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 646);
              v165 = result
                   + v163 * *(unsigned __int16 *)(*(_QWORD *)(v121 + 8 * (*v162 >> v122)) + 2 * *(v162 - 1))
                   + 0x8000;
              v166 = v165 + HIWORD(v165);
              if ((v123 & 0x2000) != 0)
              {
                v167 = HIWORD(v166);
                v168 = HIBYTE(v166);
              }
              else
              {
                v167 = *(unsigned __int16 *)(*(_QWORD *)(v120 + 8 * (BYTE2(v166) >> v122)) + 2 * HIBYTE(v166));
                v168 = v167 >> 8;
              }
              *(v162 - 1) = v168;
              *v162 = v167;
              goto LABEL_254;
            }
            v164 = *(unsigned __int16 *)(*(_QWORD *)(v119 + 8 * (*v162 >> v122)) + 2 * *(v162 - 1));
          }
          else
          {
            v164 = *(unsigned __int16 *)(v3 + 636);
          }
          *(_WORD *)(v162 - 1) = bswap32(v164) >> 16;
LABEL_254:
          v162 += 4;
          if (!--v124)
            goto LABEL_134;
        }
      case 6:
        if (*((_BYTE *)a2 + 17) == 8)
        {
          if (v118 && v117 && v116)
          {
            if (v124)
            {
              v145 = (unsigned __int8 *)(result + 2);
              do
              {
                v146 = v145[2];
                if (v145[2])
                {
                  if (v146 == 255)
                  {
                    *(v145 - 1) = *(_BYTE *)(v116 + *(v145 - 1));
                    *v145 = *(_BYTE *)(v116 + *v145);
                    LOBYTE(v147) = *(_BYTE *)(v116 + v145[1]);
                  }
                  else
                  {
                    v148 = v146 ^ 0xFF;
                    v149 = *(unsigned __int16 *)(v3 + 640) * (v146 ^ 0xFF)
                         + *(unsigned __int8 *)(v118 + *(v145 - 1)) * v146
                         + 128;
                    v150 = v149 + BYTE1(v149);
                    if ((v123 & 0x2000) != 0)
                      v150 >>= 8;
                    else
                      LOBYTE(v150) = *(_BYTE *)(v117 + BYTE1(v150));
                    *(v145 - 1) = v150;
                    v151 = *(unsigned __int16 *)(v3 + 642) * v148 + *(unsigned __int8 *)(v118 + *v145) * v146 + 128;
                    v152 = v151 + BYTE1(v151);
                    if ((v123 & 0x2000) != 0)
                      v152 >>= 8;
                    else
                      LOBYTE(v152) = *(_BYTE *)(v117 + BYTE1(v152));
                    *v145 = v152;
                    v153 = *(unsigned __int16 *)(v3 + 644) * v148 + *(unsigned __int8 *)(v118 + v145[1]) * v146 + 128;
                    v147 = v153 + BYTE1(v153);
                    if ((v123 & 0x2000) != 0)
                      v147 >>= 8;
                    else
                      LOBYTE(v147) = *(_BYTE *)(v117 + BYTE1(v147));
                  }
                }
                else
                {
                  *(v145 - 1) = *(_BYTE *)(v3 + 630);
                  *v145 = *(_BYTE *)(v3 + 632);
                  LOBYTE(v147) = *(_BYTE *)(v3 + 634);
                }
                v145[1] = v147;
                v145 += 4;
                --v124;
              }
              while (v124);
            }
          }
          else if (v124)
          {
            v336 = (unsigned __int8 *)(result + 2);
            do
            {
              v337 = v336[2];
              if (v337 != 255)
              {
                if (v336[2])
                {
                  v339 = *(_WORD *)(v3 + 630) * (v337 ^ 0xFF) + *(v336 - 1) * (_WORD)v337 + 128;
                  *(v336 - 1) = (unsigned __int16)(v339 + HIBYTE(v339)) >> 8;
                  v340 = *(_WORD *)(v3 + 632) * (v337 ^ 0xFF) + *v336 * (_WORD)v337 + 128;
                  *v336 = (unsigned __int16)(v340 + HIBYTE(v340)) >> 8;
                  v341 = *(unsigned __int16 *)(v3 + 634) * (v337 ^ 0xFF) + v336[1] * v337 + 128;
                  v338 = (v341 + BYTE1(v341)) >> 8;
                }
                else
                {
                  *(v336 - 1) = *(_BYTE *)(v3 + 630);
                  *v336 = *(_BYTE *)(v3 + 632);
                  LOBYTE(v338) = *(_BYTE *)(v3 + 634);
                }
                v336[1] = v338;
              }
              v336 += 4;
              --v124;
            }
            while (v124);
          }
          goto LABEL_134;
        }
        if (!v119 || !v120 || !v121)
        {
          if (v124)
          {
            v346 = result + 4;
            do
            {
              v347 = __rev16(*(unsigned __int16 *)(v346 + 3));
              if (v347 != 0xFFFF)
              {
                if (v347)
                {
                  v348 = __rev16(*(unsigned __int16 *)(v346 - 1));
                  v349 = __rev16(*(unsigned __int16 *)(v346 + 1));
                  v350 = (v347 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 630)
                       + __rev16(*(unsigned __int16 *)(v346 - 3)) * v347
                       + 0x8000;
                  v351 = v350 + HIWORD(v350);
                  *(_BYTE *)(v346 - 3) = HIBYTE(v351);
                  *(_BYTE *)(v346 - 2) = BYTE2(v351);
                  v352 = (v347 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 632) + v348 * v347 + 0x8000;
                  v353 = v352 + HIWORD(v352);
                  *(_BYTE *)(v346 - 1) = HIBYTE(v353);
                  *(_BYTE *)v346 = BYTE2(v353);
                  v354 = (v347 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 634) + v349 * v347 + 0x8000;
                  v355 = v354 + HIWORD(v354);
                  *(_BYTE *)(v346 + 1) = HIBYTE(v355);
                  *(_BYTE *)(v346 + 2) = BYTE2(v355);
                }
                else
                {
                  *(_WORD *)(v346 - 3) = bswap32(*(unsigned __int16 *)(v3 + 630)) >> 16;
                  *(_WORD *)(v346 - 1) = bswap32(*(unsigned __int16 *)(v3 + 632)) >> 16;
                  *(_WORD *)(v346 + 1) = bswap32(*(unsigned __int16 *)(v3 + 634)) >> 16;
                }
              }
              v346 += 8;
              --v124;
            }
            while (v124);
          }
          goto LABEL_134;
        }
        if (!v124)
          goto LABEL_134;
        v169 = (unsigned __int8 *)(result + 4);
        break;
      default:
        goto LABEL_134;
    }
    do
    {
      v170 = __rev16(*(unsigned __int16 *)(v169 + 3));
      if (v170)
      {
        if (v170 != 0xFFFF)
        {
          v172 = v170 ^ 0xFFFF;
          v173 = (v170 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 640)
               + v170 * *(unsigned __int16 *)(*(_QWORD *)(v121 + 8 * (*(v169 - 2) >> v122)) + 2 * *(v169 - 3))
               + 0x8000;
          v174 = v173 + HIWORD(v173);
          v175 = HIBYTE(v174);
          if ((v123 & 0x2000) != 0)
          {
            v176 = HIWORD(v174);
          }
          else
          {
            v176 = *(unsigned __int16 *)(*(_QWORD *)(v120 + 8 * (BYTE2(v174) >> v122)) + 2 * v175);
            v175 = v176 >> 8;
          }
          *(v169 - 3) = v175;
          *(v169 - 2) = v176;
          v177 = v172 * *(unsigned __int16 *)(v3 + 642)
               + v170 * *(unsigned __int16 *)(*(_QWORD *)(v121 + 8 * (*v169 >> v122)) + 2 * *(v169 - 1))
               + 0x8000;
          v178 = v177 + HIWORD(v177);
          v179 = HIBYTE(v178);
          if ((v123 & 0x2000) != 0)
          {
            v180 = HIWORD(v178);
          }
          else
          {
            v180 = *(unsigned __int16 *)(*(_QWORD *)(v120 + 8 * (BYTE2(v178) >> v122)) + 2 * v179);
            v179 = v180 >> 8;
          }
          *(v169 - 1) = v179;
          *v169 = v180;
          result = *(unsigned __int16 *)(*(_QWORD *)(v121 + 8 * (v169[2] >> v122)) + 2 * v169[1]);
          v181 = v172 * *(unsigned __int16 *)(v3 + 644)
               + v170 * result
               + 0x8000
               + ((v172 * *(unsigned __int16 *)(v3 + 644) + v170 * result + 0x8000) >> 16);
          v182 = HIBYTE(v181);
          if ((v123 & 0x2000) != 0)
          {
            v183 = HIWORD(v181);
          }
          else
          {
            v183 = *(unsigned __int16 *)(*(_QWORD *)(v120 + 8 * (BYTE2(v181) >> v122)) + 2 * v182);
            v182 = v183 >> 8;
          }
          v169[1] = v182;
          v169[2] = v183;
          goto LABEL_276;
        }
        *(_WORD *)(v169 - 3) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v119 + 8 * (*(v169 - 2) >> v122))
                                                           + 2 * *(v169 - 3))) >> 16;
        *(_WORD *)(v169 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v119 + 8 * (*v169 >> v122))
                                                           + 2 * *(v169 - 1))) >> 16;
        v171 = *(unsigned __int16 *)(*(_QWORD *)(v119 + 8 * (v169[2] >> v122)) + 2 * v169[1]);
      }
      else
      {
        *(_WORD *)(v169 - 3) = bswap32(*(unsigned __int16 *)(v3 + 630)) >> 16;
        *(_WORD *)(v169 - 1) = bswap32(*(unsigned __int16 *)(v3 + 632)) >> 16;
        v171 = *(unsigned __int16 *)(v3 + 634);
      }
      *(_WORD *)(v169 + 1) = bswap32(v171) >> 16;
LABEL_276:
      v169 += 8;
      --v124;
    }
    while (v124);
  }
LABEL_134:
  v100 = *(_DWORD *)(v3 + 300);
  if ((v100 & 0x602000) != 0x2000)
    goto LABEL_170;
  if ((v100 & 0x80) != 0)
  {
    if (*(_WORD *)(v3 + 600))
      goto LABEL_170;
    v101 = *(unsigned __int8 *)(v3 + 607);
    if ((v101 & 4) != 0)
      goto LABEL_170;
  }
  else
  {
    v101 = *(unsigned __int8 *)(v3 + 607);
  }
  if (v101 != 3)
  {
    if ((v102 = *(unsigned __int8 **)(v3 + 544),
          v103 = *(_QWORD *)(v3 + 672),
          v104 = *(_QWORD *)(v3 + 680),
          v105 = *(_DWORD *)(v3 + 664),
          v106 = *a2,
          v107 = *((unsigned __int8 *)a2 + 17),
          v107 <= 8)
      && v103
      || v107 == 16 && v104)
    {
      v108 = v102 + 1;
      switch(*((_BYTE *)a2 + 16))
      {
        case 0:
          if (v107 == 2 && v106)
          {
            v109 = 0;
            v110 = v102 + 1;
            do
            {
              v111 = *v110;
              v112 = v111 & 0xC;
              v113 = (v111 & 0xC) >> 2;
              result = (*(unsigned __int8 *)(v103
                                           + ((4 * (_DWORD)v112) & 0xFFFFFF3F | ((v113 & 3) << 6) | (v112 >> 2) | v112)) >> 4) & 0xC;
              *v110++ = (*(_BYTE *)(v103
                                  + (((v111 & 0x30) >> 2) & 0xFFFFFF3F | ((((v111 & 0x30) >> 4) & 3) << 6) | ((v111 & 0x30) >> 4) | (unint64_t)(v111 & 0x30))) >> 2) & 0x30 | *(_BYTE *)(v103 + ((v111 >> 6) | ((v111 & 0xC0) >> 4) | ((v111 & 0xC0) >> 2) | (unint64_t)(v111 & 0xC0))) & 0xC0 | (*(_BYTE *)(v103 + ((4 * (_DWORD)v112) & 0xFFFFFF3F | ((v113 & 3) << 6) | (v112 >> 2) | v112)) >> 4) & 0xC | (*(_BYTE *)(v103 + 85 * (v111 & 3)) >> 6);
              v109 += 4;
            }
            while (v109 < v106);
            v107 = *((unsigned __int8 *)a2 + 17);
          }
          if (v107 == 4)
          {
            if (v106)
            {
              for (i = 0; i < v106; i += 2)
              {
                *v108 = *(_BYTE *)(v103 + (*v108 & 0xF0 | ((unint64_t)*v108 >> 4))) & 0xF0 | (*(_BYTE *)(v103 + (*v108 & 0xF | (16 * (*v108 & 0xF)))) >> 4);
                ++v108;
              }
            }
          }
          else if (v107 == 8)
          {
            for (; v106; --v106)
            {
              *v108 = *(_BYTE *)(v103 + *v108);
              ++v108;
            }
          }
          else if (v107 == 16 && v106)
          {
            v114 = v102 + 2;
            do
            {
              *(_WORD *)(v114 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v104 + 8 * (*v114 >> v105))
                                                                 + 2 * *(v114 - 1))) >> 16;
              v114 += 2;
              --v106;
            }
            while (v106);
          }
          break;
        case 2:
          if (v107 == 8)
          {
            for (; v106; --v106)
            {
              *v108 = *(_BYTE *)(v103 + *v108);
              v108[1] = *(_BYTE *)(v103 + v108[1]);
              v108[2] = *(_BYTE *)(v103 + v108[2]);
              v108 += 3;
            }
          }
          else if (v106)
          {
            v376 = v102 + 3;
            do
            {
              *((_WORD *)v376 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v104 + 8 * (*(v376 - 1) >> v105))
                                                                 + 2 * *(v376 - 2))) >> 16;
              *(_WORD *)v376 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v104 + 8 * (v376[1] >> v105)) + 2 * *v376)) >> 16;
              *((_WORD *)v376 + 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v104 + 8 * (v376[3] >> v105))
                                                                 + 2 * v376[2])) >> 16;
              v376 += 6;
              --v106;
            }
            while (v106);
          }
          break;
        case 4:
          if (v107 == 8)
          {
            for (; v106; --v106)
            {
              *v108 = *(_BYTE *)(v103 + *v108);
              v108 += 2;
            }
          }
          else if (v106)
          {
            v377 = v102 + 2;
            do
            {
              *(_WORD *)(v377 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v104 + 8 * (*v377 >> v105))
                                                                 + 2 * *(v377 - 1))) >> 16;
              v377 += 4;
              --v106;
            }
            while (v106);
          }
          break;
        case 6:
          if (v107 == 8)
          {
            for (; v106; --v106)
            {
              *v108 = *(_BYTE *)(v103 + *v108);
              v108[1] = *(_BYTE *)(v103 + v108[1]);
              v108[2] = *(_BYTE *)(v103 + v108[2]);
              v108 += 4;
            }
          }
          else if (v106)
          {
            v378 = v102 + 3;
            do
            {
              *((_WORD *)v378 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v104 + 8 * (*(v378 - 1) >> v105))
                                                                 + 2 * *(v378 - 2))) >> 16;
              *(_WORD *)v378 = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v104 + 8 * (v378[1] >> v105)) + 2 * *v378)) >> 16;
              *((_WORD *)v378 + 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v104 + 8 * (v378[3] >> v105))
                                                                 + 2 * v378[2])) >> 16;
              v378 += 8;
              --v106;
            }
            while (v106);
          }
          break;
        default:
          break;
      }
    }
  }
LABEL_170:
  v129 = *(_DWORD *)(v3 + 300);
  if ((~v129 & 0x40080) == 0 && (*((unsigned __int8 *)a2 + 16) | 2) == 6)
  {
    result = png_do_strip_channel((uint64_t)a2, (_BYTE *)(*(_QWORD *)(v3 + 544) + 1), 0);
    v129 = *(_DWORD *)(v3 + 300);
  }
  if ((v129 & 0x800000) != 0 && (a2[4] & 4) != 0)
  {
    v130 = *(_QWORD *)(v3 + 544);
    v131 = *a2;
    v132 = *((unsigned __int8 *)a2 + 17);
    if (v132 != 16)
    {
      if (v132 == 8)
      {
        v133 = *(_QWORD *)(v3 + 688);
        if (v133)
        {
          if (v131)
          {
            v134 = v130 + 1;
            if ((a2[4] & 2) != 0)
              v135 = 4;
            else
              v135 = 2;
            v136 = (_BYTE *)(v134 + (v135 - 1));
            do
            {
              *v136 = *(_BYTE *)(v133 + *v136);
              v136 += v135;
              --v131;
            }
            while (v131);
          }
          goto LABEL_287;
        }
      }
LABEL_286:
      result = png_warning(v3, "png_do_encode_alpha: unexpected call");
      goto LABEL_287;
    }
    v184 = *(_QWORD *)(v3 + 704);
    if (!v184)
      goto LABEL_286;
    if (v131)
    {
      v185 = *(_DWORD *)(v3 + 664);
      if ((a2[4] & 2) != 0)
        v186 = 8;
      else
        v186 = 4;
      v187 = (unsigned __int8 *)((v186 - 4) + v130 + 4);
      do
      {
        *(_WORD *)(v187 - 1) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(v184 + 8 * (*v187 >> v185))
                                                           + 2 * *(v187 - 1))) >> 16;
        v187 += v186;
        --v131;
      }
      while (v131);
    }
  }
LABEL_287:
  v188 = *(_DWORD *)(v3 + 300);
  if ((v188 & 0x4000000) != 0 && *((_BYTE *)a2 + 17) == 16)
  {
    v189 = *((_QWORD *)a2 + 1);
    if (v189 >= 1)
    {
      v190 = (unsigned __int8 *)(*(_QWORD *)(v3 + 544) + 1);
      v191 = &v190[v189];
      v192 = v190;
      do
      {
        *v192++ = *v190 + ((0xFFFF * (v190[1] - *v190) + 8388480) >> 24);
        v190 += 2;
      }
      while (v190 < v191);
      v188 = *(_DWORD *)(v3 + 300);
    }
    *((_BYTE *)a2 + 17) = 8;
    v193 = *((unsigned __int8 *)a2 + 18);
    *((_BYTE *)a2 + 19) = 8 * v193;
    *((_QWORD *)a2 + 1) = *a2 * v193;
  }
  if ((v188 & 0x400) != 0 && *((_BYTE *)a2 + 17) == 16)
  {
    v194 = *((_QWORD *)a2 + 1);
    if (v194 >= 1)
    {
      v195 = (char *)(*(_QWORD *)(v3 + 544) + 1);
      v196 = &v195[v194];
      v197 = v195;
      do
      {
        v198 = *v197;
        v197 += 2;
        *v195++ = v198;
      }
      while (v197 < v196);
      v188 = *(_DWORD *)(v3 + 300);
    }
    *((_BYTE *)a2 + 17) = 8;
    v199 = *((unsigned __int8 *)a2 + 18);
    *((_BYTE *)a2 + 19) = 8 * v199;
    *((_QWORD *)a2 + 1) = *a2 * v199;
  }
  if ((v188 & 0x40) != 0)
  {
    if (*((_BYTE *)a2 + 17) != 8)
    {
LABEL_319:
      if (*((_QWORD *)a2 + 1))
      {
        v188 = *(_DWORD *)(v3 + 300);
        goto LABEL_321;
      }
      v391 = "png_do_quantize returned rowbytes=0";
LABEL_674:
      png_error(v3, v391);
    }
    v200 = (_BYTE *)(*(_QWORD *)(v3 + 544) + 1);
    v201 = *(_QWORD *)(v3 + 880);
    v202 = *(_QWORD *)(v3 + 888);
    v203 = *a2;
    v204 = *a2;
    v205 = *((unsigned __int8 *)a2 + 16);
    if (v201 && v205 == 2)
    {
      if (v204)
      {
        v206 = (unsigned __int8 *)(*(_QWORD *)(v3 + 544) + 1);
        do
        {
          *v200++ = *(_BYTE *)(v201
                             + ((*v206 << 7) & 0x7C00 | (32 * (((unint64_t)v206[1] >> 3) & 0x1F)) | ((unint64_t)v206[2] >> 3)));
          v206 += 3;
          --v204;
        }
        while (v204);
        goto LABEL_314;
      }
    }
    else
    {
      if (!v201 || v205 != 6)
      {
        if (v202 && v205 == 3 && v204)
        {
          do
          {
            *v200 = *(_BYTE *)(v202 + *v200);
            ++v200;
            --v204;
          }
          while (v204);
        }
        goto LABEL_319;
      }
      if (v204)
      {
        v207 = (unsigned __int8 *)(*(_QWORD *)(v3 + 544) + 1);
        do
        {
          *v200++ = *(_BYTE *)(v201
                             + ((*v207 << 7) & 0x7C00 | (32 * (((unint64_t)v207[1] >> 3) & 0x1F)) | ((unint64_t)v207[2] >> 3)));
          v207 += 4;
          --v204;
        }
        while (v204);
LABEL_314:
        v208 = *((unsigned __int8 *)a2 + 17);
        *((_BYTE *)a2 + 16) = 3;
        *((_BYTE *)a2 + 18) = 1;
        *((_BYTE *)a2 + 19) = v208;
        if (v208 < 8)
        {
          v209 = (v208 * (unint64_t)v203 + 7) >> 3;
LABEL_318:
          *((_QWORD *)a2 + 1) = v209;
          goto LABEL_319;
        }
LABEL_317:
        v209 = v203 * (unint64_t)(v208 >> 3);
        goto LABEL_318;
      }
    }
    *((_BYTE *)a2 + 16) = 3;
    *((_WORD *)a2 + 9) = 2049;
    v208 = 8;
    goto LABEL_317;
  }
LABEL_321:
  if ((v188 & 0x200) != 0 && *((_BYTE *)a2 + 17) == 8 && *((_BYTE *)a2 + 16) != 3)
  {
    v210 = *((_QWORD *)a2 + 1);
    if (v210 >= 1)
    {
      v211 = *(_QWORD *)(v3 + 544);
      v212 = v211 + 1 + v210 + v210;
      v213 = (char *)(v211 + v210);
      v214 = v213;
      do
      {
        v215 = *v214--;
        *(_BYTE *)(v212 - 2) = v215;
        v212 -= 2;
        *(_BYTE *)(v212 + 1) = v215;
        v216 = v212 > (unint64_t)v213;
        v213 = v214;
      }
      while (v216);
      v210 = *((_QWORD *)a2 + 1);
      v188 = *(_DWORD *)(v3 + 300);
    }
    *((_QWORD *)a2 + 1) = 2 * v210;
    *((_BYTE *)a2 + 17) = 16;
    *((_BYTE *)a2 + 19) = 16 * *((_BYTE *)a2 + 18);
  }
  if ((v188 & 0x4000) != 0 && (*(_BYTE *)(v3 + 293) & 8) != 0)
  {
    result = (uint64_t)png_do_gray_to_rgb(a2, *(_QWORD *)(v3 + 544) + 1);
    v188 = *(_DWORD *)(v3 + 300);
  }
  if ((v188 & 0x20) != 0)
  {
    result = png_do_invert((uint64_t)a2, (_BYTE *)(*(_QWORD *)(v3 + 544) + 1));
    v188 = *(_DWORD *)(v3 + 300);
  }
  if ((v188 & 0x80000) != 0)
  {
    v217 = *(_QWORD *)(v3 + 544);
    v218 = *a2;
    v219 = *((unsigned __int8 *)a2 + 16);
    if (v219 == 4)
    {
      if (*((_BYTE *)a2 + 17) == 8)
      {
        if (v218)
        {
          v221 = (_BYTE *)(v217 + *((_QWORD *)a2 + 1));
          do
          {
            *v221 = ~*v221;
            v221 -= 2;
            --v218;
          }
          while (v218);
        }
      }
      else if (v218)
      {
        v223 = (_BYTE *)(v217 + *((_QWORD *)a2 + 1));
        do
        {
          *v223 = ~*v223;
          *(v223 - 1) = ~*(v223 - 1);
          v223 -= 4;
          --v218;
        }
        while (v218);
      }
    }
    else if (v219 == 6)
    {
      if (*((_BYTE *)a2 + 17) == 8)
      {
        if (v218)
        {
          v220 = (_BYTE *)(v217 + *((_QWORD *)a2 + 1));
          do
          {
            *v220 = ~*v220;
            v220 -= 4;
            --v218;
          }
          while (v218);
        }
      }
      else if (v218)
      {
        v222 = (_BYTE *)(v217 + *((_QWORD *)a2 + 1));
        do
        {
          *v222 = ~*v222;
          *(v222 - 1) = ~*(v222 - 1);
          v222 -= 8;
          --v218;
        }
        while (v218);
      }
    }
  }
  v224 = *(_DWORD *)(v3 + 300);
  if ((v224 & 8) != 0)
  {
    v225 = *((unsigned __int8 *)a2 + 16);
    if (v225 != 3)
    {
      v226 = *(_QWORD *)(v3 + 544);
      v227 = *((unsigned __int8 *)a2 + 17);
      if ((v225 & 2) != 0)
      {
        v228 = *(unsigned __int8 *)(v3 + 725);
        v230 = v227 - *(unsigned __int8 *)(v3 + 727);
        HIDWORD(v393) = v227 - *(unsigned __int8 *)(v3 + 726);
        v394 = v230;
        v229 = 3;
      }
      else
      {
        v228 = *(unsigned __int8 *)(v3 + 728);
        v229 = 1;
      }
      v231 = (_BYTE *)(v226 + 1);
      LODWORD(v393) = v227 - v228;
      if ((v225 & 4) != 0)
        *((_DWORD *)&v393 + v229++) = v227 - *(unsigned __int8 *)(v3 + 729);
      v232 = 0;
      v233 = 0;
      do
      {
        v234 = *(_DWORD *)((char *)&v393 + v232);
        v235 = v234 > 0;
        result = v234 < v227;
        if ((v235 & result) == 0)
          v234 = 0;
        *(_DWORD *)((char *)&v393 + v232) = v234;
        if ((v235 & result) != 0)
          v233 = 1;
        v232 += 4;
      }
      while (4 * v229 != v232);
      if (v233)
      {
        HIDWORD(v236) = v227;
        LODWORD(v236) = v227 - 2;
        switch((v236 >> 1))
        {
          case 0u:
            v237 = *((_QWORD *)a2 + 1);
            if (v237 >= 1)
            {
              v238 = &v231[v237];
              do
              {
                *v231 = (*v231 >> 1) & 0x55;
                ++v231;
              }
              while (v231 < v238);
            }
            break;
          case 1u:
            v239 = *((_QWORD *)a2 + 1);
            if (v239 >= 1)
            {
              v240 = &v231[v239];
              v241 = v393;
              v242 = (0xFu >> v393) | (16 * (0xFu >> v393));
              do
              {
                *v231 = (*v231 >> v241) & v242;
                ++v231;
              }
              while (v231 < v240);
            }
            break;
          case 3u:
            v243 = *((_QWORD *)a2 + 1);
            if (v243 >= 1)
            {
              v244 = 0;
              v245 = &v231[v243];
              do
              {
                v246 = *v231 >> *((_DWORD *)&v393 + v244);
                if (v244 + 1 < v229)
                  ++v244;
                else
                  v244 = 0;
                *v231++ = v246;
              }
              while (v231 < v245);
            }
            break;
          case 7u:
            v247 = *((_QWORD *)a2 + 1);
            if (v247 >= 1)
            {
              v248 = 0;
              v249 = &v231[v247];
              do
              {
                v250 = __rev16(*(unsigned __int16 *)v231) >> *((_DWORD *)&v393 + v248);
                if (v248 + 1 < v229)
                  ++v248;
                else
                  v248 = 0;
                *(_WORD *)v231 = __rev16(v250);
                v231 += 2;
              }
              while (v231 < v249);
            }
            break;
          default:
            break;
        }
        v224 = *(_DWORD *)(v3 + 300);
      }
    }
  }
  if ((v224 & 4) != 0)
  {
    v251 = *((unsigned __int8 *)a2 + 17);
    if (v251 <= 7)
    {
      v252 = *(_QWORD *)(v3 + 544);
      v253 = v252 + 1;
      v254 = *a2;
      if (v251 == 4)
      {
        if ((_DWORD)v254)
        {
          v260 = 4 * (*a2 & 1);
          v261 = (unsigned __int8 *)(v253 + ((v254 - 1) >> 1));
          v262 = (_BYTE *)(v252 + v254);
          v263 = *a2;
          do
          {
            v264 = *v261 >> v260;
            v65 = v260 == 0;
            v265 = v260 == 0;
            *v262-- = v264 & 0xF;
            v266 = !v65;
            v261 -= v266;
            v260 = 4 * v265;
            --v263;
          }
          while (v263);
        }
      }
      else if (v251 == 2)
      {
        if ((_DWORD)v254)
        {
          v267 = ~(2 * v254 + 6) & 6;
          v268 = (unsigned __int8 *)(v253 + ((v254 - 1) >> 2));
          v269 = (_BYTE *)(v252 + v254);
          v270 = *a2;
          do
          {
            *v269-- = (*v268 >> v267) & 3;
            v65 = v267 == 6;
            v271 = v267 == 6;
            v267 += 2;
            if (v65)
              v267 = 0;
            v268 -= v271;
            --v270;
          }
          while (v270);
        }
      }
      else if (v251 == 1 && (_DWORD)v254)
      {
        v255 = -(int)v254 & 7;
        v256 = (unsigned __int8 *)(v253 + ((v254 - 1) >> 3));
        v257 = (_BYTE *)(v252 + v254);
        v258 = *a2;
        do
        {
          *v257-- = (*v256 >> v255) & 1;
          v259 = v255 == 7;
          if (v255 == 7)
            v255 = 0;
          else
            ++v255;
          v256 -= v259;
          --v258;
        }
        while (v258);
      }
      *((_BYTE *)a2 + 17) = 8;
      v272 = *((unsigned __int8 *)a2 + 18);
      *((_BYTE *)a2 + 19) = 8 * v272;
      *((_QWORD *)a2 + 1) = (v254 * v272);
    }
  }
  if (*((_BYTE *)a2 + 16) == 3 && (*(_DWORD *)(v3 + 596) & 0x80000000) == 0)
    result = png_do_check_palette_indexes(v3, (uint64_t)a2);
  v273 = *(_DWORD *)(v3 + 300);
  if ((v273 & 1) != 0)
  {
    result = (uint64_t)png_do_bgr((int *)a2, (__int16 *)(*(_QWORD *)(v3 + 544) + 1));
    v273 = *(_DWORD *)(v3 + 300);
    if ((v273 & 0x10000) == 0)
    {
LABEL_426:
      if ((v273 & 0x8000) == 0)
        goto LABEL_478;
      goto LABEL_430;
    }
  }
  else if ((v273 & 0x10000) == 0)
  {
    goto LABEL_426;
  }
  result = png_do_packswap((uint64_t)a2, (_BYTE *)(*(_QWORD *)(v3 + 544) + 1));
  v273 = *(_DWORD *)(v3 + 300);
  if ((v273 & 0x8000) == 0)
    goto LABEL_478;
LABEL_430:
  v274 = *(_QWORD *)(v3 + 544);
  v275 = v274 + 1;
  v276 = *(unsigned __int16 *)(v3 + 618);
  v277 = *(_DWORD *)(v3 + 296);
  v278 = *a2;
  if (*((_BYTE *)a2 + 16) == 2)
  {
    v284 = *((unsigned __int8 *)a2 + 17);
    if (v284 == 16)
    {
      if ((v277 & 0x80) != 0)
      {
        v308 = v275 + 6 * v278 + 2 * v278;
        if (v278 >= 2)
        {
          v309 = v278 - 1;
          v310 = (_BYTE *)(6 * v278 + v274 - 2);
          v311 = __rev16(v276);
          do
          {
            *(_WORD *)(v308 - 2) = v311;
            *(_BYTE *)(v308 - 3) = v310[2];
            *(_BYTE *)(v308 - 4) = v310[1];
            *(_BYTE *)(v308 - 5) = *v310;
            *(_BYTE *)(v308 - 6) = *(v310 - 1);
            *(_BYTE *)(v308 - 7) = *(v310 - 2);
            *(_BYTE *)(v308 - 8) = *(v310 - 3);
            v308 -= 8;
            v310 -= 6;
            --v309;
          }
          while (v309);
        }
        *(_WORD *)(v308 - 2) = __rev16(v276);
      }
      else if ((_DWORD)v278)
      {
        v291 = (_BYTE *)(v274 + 6 * v278 - 2);
        v292 = (_BYTE *)(v274 + 8 * v278 - 3);
        v293 = *a2;
        do
        {
          v292[3] = v291[2];
          v292[2] = v291[1];
          v292[1] = *v291;
          *v292 = *(v291 - 1);
          *(v292 - 1) = *(v291 - 2);
          *(v292 - 2) = *(v291 - 3);
          *(v292 - 3) = v276;
          *(v292 - 4) = BYTE1(v276);
          v291 -= 6;
          v292 -= 8;
          --v293;
        }
        while (v293);
      }
      v298 = 3;
      v299 = 64;
    }
    else
    {
      if (v284 != 8)
        goto LABEL_478;
      if ((v277 & 0x80) != 0)
      {
        v301 = v275 + v278 + 3 * v278;
        if (v278 >= 2)
        {
          v302 = v278 - 1;
          v303 = (_BYTE *)(v274 + 3 * v278);
          do
          {
            *(_BYTE *)(v301 - 1) = v276;
            *(_BYTE *)(v301 - 2) = *v303;
            *(_BYTE *)(v301 - 3) = *(v303 - 1);
            *(_BYTE *)(v301 - 4) = *(v303 - 2);
            v301 -= 4;
            v303 -= 3;
            --v302;
          }
          while (v302);
        }
        *(_BYTE *)(v301 - 1) = v276;
      }
      else if ((_DWORD)v278)
      {
        v285 = (_BYTE *)(v274 + 3 * v278);
        v286 = (_BYTE *)(v274 + 4 * v278 - 1);
        v287 = *a2;
        do
        {
          v286[1] = *v285;
          *v286 = *(v285 - 1);
          *(v286 - 1) = *(v285 - 2);
          *(v286 - 2) = v276;
          v285 -= 3;
          v286 -= 4;
          --v287;
        }
        while (v287);
      }
      v298 = 2;
      v299 = 32;
    }
    v300 = 4;
  }
  else
  {
    if (*((_BYTE *)a2 + 16))
      goto LABEL_478;
    v279 = *((unsigned __int8 *)a2 + 17);
    if (v279 == 16)
    {
      if ((v277 & 0x80) != 0)
      {
        v304 = v275 + 2 * v278 + 2 * v278;
        v305 = __rev16(v276);
        if (v278 >= 2)
        {
          v306 = v278 - 1;
          v307 = (_BYTE *)(v274 + 2 * v278);
          do
          {
            *(_WORD *)(v304 - 2) = v305;
            *(_BYTE *)(v304 - 3) = *v307;
            *(_BYTE *)(v304 - 4) = *(v307 - 1);
            v304 -= 4;
            v307 -= 2;
            --v306;
          }
          while (v306);
        }
        *(_WORD *)(v304 - 2) = v305;
      }
      else if ((_DWORD)v278)
      {
        v288 = (_BYTE *)(v274 + 2 * v278);
        v289 = (_BYTE *)(v274 + 4 * v278 - 1);
        v290 = *a2;
        do
        {
          v289[1] = *v288;
          *v289 = *(v288 - 1);
          *(v289 - 1) = v276;
          *(v289 - 2) = BYTE1(v276);
          v288 -= 2;
          v289 -= 4;
          --v290;
        }
        while (v290);
      }
      v300 = 2;
      v299 = 32;
      v298 = 2;
    }
    else
    {
      if (v279 != 8)
        goto LABEL_478;
      if ((v277 & 0x80) != 0)
      {
        v294 = v275 + v278 + v278;
        if (v278 >= 2)
        {
          v295 = (char *)(v274 + v278);
          v296 = v278 - 1;
          do
          {
            *(_BYTE *)(v294 - 1) = v276;
            v297 = *v295--;
            *(_BYTE *)(v294 - 2) = v297;
            v294 -= 2;
            --v296;
          }
          while (v296);
        }
        *(_BYTE *)(v294 - 1) = v276;
      }
      else if ((_DWORD)v278)
      {
        v280 = (_BYTE *)(v274 + 2 * v278);
        v281 = (char *)(v274 + v278);
        v282 = *a2;
        do
        {
          v283 = *v281--;
          *v280 = v283;
          *(v280 - 1) = v276;
          v280 -= 2;
          --v282;
        }
        while (v282);
      }
      v298 = 1;
      v299 = 16;
      v300 = 2;
    }
  }
  *((_BYTE *)a2 + 18) = v300;
  *((_BYTE *)a2 + 19) = v299;
  *((_QWORD *)a2 + 1) = ((_DWORD)v278 << v298);
  v273 = *(_DWORD *)(v3 + 300);
LABEL_478:
  if ((v273 & 0x20000) != 0)
  {
    v312 = *(_QWORD *)(v3 + 544);
    v313 = *a2;
    v314 = *((unsigned __int8 *)a2 + 16);
    if (v314 == 4)
    {
      if (*((_BYTE *)a2 + 17) == 8)
      {
        if (v313)
        {
          v317 = (char *)(v312 + *((_QWORD *)a2 + 1));
          do
          {
            v318 = *v317;
            *v317 = *(v317 - 1);
            *(v317 - 1) = v318;
            v317 -= 2;
            --v313;
          }
          while (v313);
        }
      }
      else if (v313)
      {
        v320 = (__int32 *)(*((_QWORD *)a2 + 1) + v312 - 3);
        do
        {
          a3.i32[0] = *v320;
          v321 = (int16x8_t)vmovl_u8(a3);
          *(int8x8_t *)v321.i8 = vext_s8(*(int8x8_t *)v321.i8, *(int8x8_t *)v321.i8, 4uLL);
          a3 = (uint8x8_t)vmovn_s16(v321);
          *v320-- = a3.i32[0];
          --v313;
        }
        while (v313);
      }
    }
    else if (v314 == 6)
    {
      if (*((_BYTE *)a2 + 17) == 8)
      {
        if (v313)
        {
          v315 = (__int32 *)(*((_QWORD *)a2 + 1) + v312 - 3);
          do
          {
            a3.i32[0] = *v315;
            v316 = (int16x8_t)vmovl_u8(a3);
            *(int8x8_t *)v316.i8 = vext_s8(*(int8x8_t *)v316.i8, *(int8x8_t *)v316.i8, 6uLL);
            a3 = (uint8x8_t)vmovn_s16(v316);
            *v315-- = a3.i32[0];
            --v313;
          }
          while (v313);
        }
      }
      else if (v313)
      {
        v319 = (int8x8_t *)(*((_QWORD *)a2 + 1) + v312 - 7);
        do
        {
          *v319 = vext_s8(*v319, *v319, 6uLL);
          --v319;
          --v313;
        }
        while (v313);
      }
    }
  }
  v322 = *(_DWORD *)(v3 + 300);
  if ((v322 & 0x10) != 0)
  {
    result = png_do_swap((uint64_t)a2, (char *)(*(_QWORD *)(v3 + 544) + 1));
    v322 = *(_DWORD *)(v3 + 300);
  }
  if ((v322 & 0x100000) != 0)
  {
    v323 = *(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(v3 + 264);
    if (v323)
      result = v323(v3, a2, *(_QWORD *)(v3 + 544) + 1);
    if (*(_BYTE *)(v3 + 288))
      *((_BYTE *)a2 + 17) = *(_BYTE *)(v3 + 288);
    v324 = *(_BYTE *)(v3 + 289);
    if (v324)
      *((_BYTE *)a2 + 18) = v324;
    else
      v324 = *((_BYTE *)a2 + 18);
    v325 = v324 * *((_BYTE *)a2 + 17);
    *((_BYTE *)a2 + 19) = v325;
    v326 = v325 >= 8u;
    v327 = (*a2 * (unint64_t)v325 + 7) >> 3;
    v328 = *a2 * (unint64_t)(v325 >> 3);
    if (!v326)
      v328 = v327;
    *((_QWORD *)a2 + 1) = v328;
  }
  return result;
}

unsigned int *png_do_expand(unsigned int *result, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;
  int v4;
  char *v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  int v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  char *v27;
  int v28;
  char v29;
  unsigned __int8 v30;
  unsigned int v31;
  int v32;
  unsigned __int8 *v33;
  char *v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  char v47;
  char v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int v52;
  char v53;
  char v54;
  BOOL v55;
  unint64_t v56;
  unint64_t v57;

  v3 = *result;
  if (!*((_BYTE *)result + 16))
  {
    if (a3)
      v13 = a3[4];
    else
      v13 = 0;
    v14 = *((unsigned __int8 *)result + 17);
    if (v14 > 7)
      goto LABEL_59;
    switch(v14)
    {
      case 1u:
        v13 = ((int)(v13 << 31) >> 31);
        if ((_DWORD)v3)
        {
          v32 = -(int)v3 & 7;
          v33 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 3));
          v34 = (char *)(v3 + a2 - 1);
          v35 = *result;
          do
          {
            if (((*v33 >> v32) & 1) != 0)
              v36 = -1;
            else
              v36 = 0;
            *v34-- = v36;
            v37 = v32 == 7;
            if (v32 == 7)
              v32 = 0;
            else
              ++v32;
            v33 -= v37;
            --v35;
          }
          while (v35);
          goto LABEL_56;
        }
        break;
      case 2u:
        v13 = 85 * (v13 & 3);
        if ((_DWORD)v3)
        {
          v38 = ~(2 * v3 + 6) & 6;
          v39 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 2));
          v40 = (_BYTE *)(v3 + a2 - 1);
          v41 = *result;
          do
          {
            *v40-- = 85 * ((*v39 >> v38) & 3);
            v20 = v38 == 6;
            v42 = v38 == 6;
            v38 += 2;
            if (v20)
              v38 = 0;
            v39 -= v42;
            --v41;
          }
          while (v41);
          goto LABEL_56;
        }
        break;
      case 4u:
        v13 = v13 & 0xF | (16 * (v13 & 0xF));
        if ((_DWORD)v3)
        {
          v15 = 4 * (*result & 1);
          v16 = (unsigned __int8 *)(a2 + ((v3 - 1) >> 1));
          v17 = (_BYTE *)(v3 + a2 - 1);
          v18 = *result;
          do
          {
            v19 = *v16 >> v15;
            v20 = v15 == 0;
            v21 = v15 == 0;
            *v17-- = v19 & 0xF | (16 * v19);
            v22 = !v20;
            v15 = 4 * v21;
            v16 -= v22;
            --v18;
          }
          while (v18);
          goto LABEL_56;
        }
        break;
      default:
LABEL_56:
        v43 = v3;
LABEL_58:
        v14 = 8;
        *((_BYTE *)result + 17) = 8;
        *((_BYTE *)result + 19) = 8;
        *((_QWORD *)result + 1) = v43;
LABEL_59:
        if (!a3)
          return result;
        if (v14 == 16)
        {
          if ((_DWORD)v3)
          {
            v49 = *((_QWORD *)result + 1);
            v50 = (char *)(a2 + 2 * v49 - 1);
            v51 = (char *)(a2 + v49 - 1);
            v52 = v3;
            do
            {
              if (*(v51 - 1) == v13 >> 8 && *v51 == v13)
                v53 = 0;
              else
                v53 = -1;
              *v50 = v53;
              *(v50 - 1) = v53;
              *(v50 - 2) = *v51;
              v54 = *(v51 - 1);
              v51 -= 2;
              *(v50 - 3) = v54;
              v50 -= 4;
              --v52;
            }
            while (v52);
          }
        }
        else if (v14 == 8 && (_DWORD)v3)
        {
          v44 = (char *)(a2 + 2 * v3 - 1);
          v45 = (char *)(v3 + a2 - 1);
          v46 = v3;
          do
          {
            if (*v45 == v13)
              v47 = 0;
            else
              v47 = -1;
            *v44 = v47;
            v48 = *v45--;
            *(v44 - 1) = v48;
            v44 -= 2;
            --v46;
          }
          while (v46);
        }
        *((_BYTE *)result + 16) = 4;
        *((_BYTE *)result + 18) = 2;
        v30 = 2 * *((_BYTE *)result + 17);
        v31 = v30;
        goto LABEL_77;
    }
    v43 = 0;
    goto LABEL_58;
  }
  if (!a3 || *((_BYTE *)result + 16) != 2)
    return result;
  v4 = *((unsigned __int8 *)result + 17);
  if (v4 == 16)
  {
    if ((_DWORD)v3)
    {
      v23 = a3[1];
      v24 = a3[2];
      v25 = a3[3];
      v26 = (char *)(a2 + 8 * v3 - 1);
      v27 = (char *)(*((_QWORD *)result + 1) + a2 - 3);
      v28 = *result;
      do
      {
        if (v23 >> 8 == *(v27 - 3)
          && *(v27 - 2) == v23
          && v24 >> 8 == *(v27 - 1)
          && *v27 == v24
          && v25 >> 8 == v27[1]
          && v27[2] == v25)
        {
          v29 = 0;
        }
        else
        {
          v29 = -1;
        }
        *v26 = v29;
        *(v26 - 1) = v29;
        *(v26 - 2) = v27[2];
        *(v26 - 3) = v27[1];
        *(v26 - 4) = *v27;
        *(v26 - 5) = *(v27 - 1);
        *(v26 - 6) = *(v27 - 2);
        *(v26 - 7) = *(v27 - 3);
        v26 -= 8;
        v27 -= 6;
        --v28;
      }
      while (v28);
    }
  }
  else if (v4 == 8 && (_DWORD)v3)
  {
    v5 = (char *)(a2 + 4 * v3 - 1);
    v6 = (char *)(a2 + *((_QWORD *)result + 1) - 1);
    v7 = *((unsigned __int8 *)a3 + 6);
    v8 = *((unsigned __int8 *)a3 + 4);
    v9 = *((unsigned __int8 *)a3 + 2);
    v10 = *result;
    do
    {
      if (*(v6 - 2) == v9 && *(v6 - 1) == v8 && *v6 == v7)
        v11 = 0;
      else
        v11 = -1;
      *v5 = v11;
      *(v5 - 1) = *v6;
      *(v5 - 2) = *(v6 - 1);
      v12 = *(v6 - 2);
      v6 -= 3;
      *(v5 - 3) = v12;
      v5 -= 4;
      --v10;
    }
    while (v10);
  }
  *((_BYTE *)result + 16) = 6;
  *((_BYTE *)result + 18) = 4;
  v30 = 4 * *((_BYTE *)result + 17);
  v31 = v30;
LABEL_77:
  *((_BYTE *)result + 19) = v30;
  v55 = v31 >= 8;
  v56 = (v30 * (unint64_t)v3 + 7) >> 3;
  v57 = v3 * (unint64_t)(v30 >> 3);
  if (!v55)
    v57 = v56;
  *((_QWORD *)result + 1) = v57;
  return result;
}

unsigned int *png_do_gray_to_rgb(unsigned int *result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  char v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  char v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;

  v2 = *((unsigned __int8 *)result + 17);
  if (v2 >= 8)
  {
    v3 = *((unsigned __int8 *)result + 16);
    if ((v3 & 2) == 0)
    {
      v4 = *result;
      v5 = *result;
      if (v3 == 4)
      {
        if (v2 == 8)
        {
          if (v5)
          {
            v9 = (_BYTE *)(a2 + 2 * v4 - 1);
            v10 = &v9[2 * v4];
            do
            {
              *v10 = *v9;
              *(v10 - 1) = *(v9 - 1);
              *(v10 - 2) = *(v9 - 1);
              *(v10 - 3) = *(v9 - 1);
              v10 -= 4;
              v9 -= 2;
              --v5;
            }
            while (v5);
          }
        }
        else if (v5)
        {
          v13 = (_BYTE *)(a2 + 4 * v4 - 1);
          v14 = &v13[4 * v4];
          do
          {
            *v14 = *v13;
            *(v14 - 1) = *(v13 - 1);
            *(v14 - 2) = *(v13 - 2);
            *(v14 - 3) = *(v13 - 3);
            *(v14 - 4) = *(v13 - 2);
            *(v14 - 5) = *(v13 - 3);
            *(v14 - 6) = *(v13 - 2);
            *(v14 - 7) = *(v13 - 3);
            v14 -= 8;
            v13 -= 4;
            --v5;
          }
          while (v5);
        }
      }
      else if (!*((_BYTE *)result + 16))
      {
        if (v2 == 8)
        {
          if (v5)
          {
            v6 = (char *)(a2 + v4 - 1);
            v7 = &v6[2 * v4];
            do
            {
              *v7 = *v6;
              *(v7 - 1) = *v6;
              v8 = *v6--;
              *(v7 - 2) = v8;
              v7 -= 3;
              --v5;
            }
            while (v5);
          }
        }
        else if (v5)
        {
          v11 = (_BYTE *)(a2 + 2 * v4 - 1);
          v12 = &v11[4 * v4];
          do
          {
            *v12 = *v11;
            *(v12 - 1) = *(v11 - 1);
            *(v12 - 2) = *v11;
            *(v12 - 3) = *(v11 - 1);
            *(v12 - 4) = *v11;
            *(v12 - 5) = *(v11 - 1);
            v12 -= 6;
            v11 -= 2;
            --v5;
          }
          while (v5);
        }
      }
      v15 = *((_BYTE *)result + 18) + 2;
      *((_BYTE *)result + 18) = v15;
      *((_BYTE *)result + 16) |= 2u;
      v16 = *((_BYTE *)result + 17) * v15;
      *((_BYTE *)result + 19) = v16;
      v17 = (v16 * (unint64_t)v4 + 7) >> 3;
      v18 = v4 * (unint64_t)(v16 >> 3);
      if (v16 < 8u)
        v18 = v17;
      *((_QWORD *)result + 1) = v18;
    }
  }
  return result;
}

uint64_t png_read_sig(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = *(unsigned __int8 *)(result + 613);
  if (v2 <= 7)
  {
    v3 = result;
    *(_DWORD *)(result + 1132) = 17;
    v4 = a2 + 44;
    png_read_data(result);
    *(_BYTE *)(v3 + 613) = 8;
    result = png_sig_cmp(v4, v2, 8 - v2);
    if ((_DWORD)result)
    {
      if (v2 <= 3 && png_sig_cmp(v4, v2, 4 - v2))
        v5 = "Not a PNG file";
      else
        v5 = "PNG file corrupted by ASCII conversion";
      png_error(v3, v5);
    }
    if (v2 <= 2)
      *(_DWORD *)(v3 + 292) |= 0x1000u;
  }
  return result;
}

uint64_t png_read_chunk_header(uint64_t a1)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 1132) = 33;
  png_read_data(a1);
  v2 = bswap32(v4);
  if ((v2 & 0x80000000) != 0)
    png_error(a1, "PNG unsigned integer out of range");
  *(_DWORD *)(a1 + 528) = bswap32(v5);
  png_reset_crc(a1);
  png_calculate_crc(a1, (Bytef *)&v5, 4);
  png_check_chunk_name(a1, *(_DWORD *)(a1 + 528));
  png_check_chunk_length(a1, v2);
  *(_DWORD *)(a1 + 1132) = 65;
  return v2;
}

uint64_t png_check_chunk_name(uint64_t result, unsigned int a2)
{
  int v2;

  v2 = 4;
  do
  {
    if (a2 - 123 < 0xFFFFFFC6 || a2 - 91 <= 5)
      png_chunk_error(result, "invalid chunk type");
    a2 >>= 8;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t png_check_chunk_length(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD *)(result + 1064);
  if (v2 - 1 >= 0x7FFFFFFE)
    v2 = 0x7FFFFFFFLL;
  if (*(_DWORD *)(result + 528) == 1229209940)
  {
    v3 = 6;
    if (!*(_BYTE *)(result + 604))
      v3 = 0;
    v4 = ((*(unsigned __int8 *)(result + 611) * (unint64_t)*(unsigned int *)(result + 496)) << (*(unsigned __int8 *)(result + 608) > 8u))
       + v3;
    v5 = *(unsigned int *)(result + 500);
    if (0xFFFFFFFF / (v4 + 1) >= v5)
      v6 = (v4 + 1) * v5;
    else
      v6 = 0x7FFFFFFFLL;
    if (v4 + 1 < 0x7F36)
      v7 = v4 + 1;
    else
      v7 = 32566;
    v8 = 5 * (v6 / v7) + v6 + 11;
    if (v8 >= 0x7FFFFFFF)
      v8 = 0x7FFFFFFFLL;
    if (v2 <= v8)
      v2 = v8;
  }
  if (v2 < a2)
    png_chunk_error(result, "chunk data is too large");
  return result;
}

uint64_t png_crc_read(uint64_t result, Bytef *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v4 = result;
    v5 = a3;
    png_read_data(result);
    return png_calculate_crc(v4, a2, v5);
  }
  return result;
}

BOOL png_crc_finish(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v4;
  _BOOL8 result;
  int v6;
  Bytef v7[1024];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = a2;
    do
    {
      if (v3 >= 0x400)
        v4 = 1024;
      else
        v4 = v3;
      v3 -= v4;
      png_crc_read(a1, v7, v4);
    }
    while (v3);
  }
  result = png_crc_error((_DWORD *)a1);
  if (result)
  {
    v6 = *(_DWORD *)(a1 + 296);
    if ((*(_BYTE *)(a1 + 531) & 0x20) != 0)
    {
      if ((v6 & 0x200) == 0)
        goto LABEL_10;
    }
    else if ((v6 & 0x400) != 0)
    {
LABEL_10:
      png_chunk_warning(a1, "CRC error");
      return 1;
    }
    png_chunk_error(a1, "CRC error");
  }
  return result;
}

BOOL png_crc_error(_DWORD *a1)
{
  int v2;
  int v3;
  unsigned int v5;

  v2 = a1[132];
  v3 = a1[74];
  a1[283] = 129;
  png_read_data((uint64_t)a1);
  if ((v2 & 0x20000000) != 0)
  {
    if ((~v3 & 0x300) == 0)
      return 0;
  }
  else if ((v3 & 0x800) != 0)
  {
    return 0;
  }
  return bswap32(v5) != a1[145];
}

uint64_t png_zlib_inflate(uint64_t a1, int a2)
{
  if (!*(_BYTE *)(a1 + 616) || !*(_DWORD *)(a1 + 320))
    return inflate((z_streamp)(a1 + 312), a2);
  if ((**(char **)(a1 + 312) & 0x80000000) == 0)
  {
    *(_BYTE *)(a1 + 616) = 0;
    return inflate((z_streamp)(a1 + 312), a2);
  }
  *(_QWORD *)(a1 + 360) = "invalid window size (libpng)";
  return 4294967293;
}

uint64_t png_handle_IHDR(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  const char *v19;
  unsigned int v20[2];
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) != 0)
  {
    v19 = "out of place";
    goto LABEL_13;
  }
  if (a3 != 13)
  {
    v19 = "invalid";
LABEL_13:
    png_chunk_error(a1, v19);
  }
  *(_DWORD *)(a1 + 292) = v4 | 1;
  png_crc_read(a1, (Bytef *)v20, 0xDu);
  png_crc_finish(a1, 0);
  v6 = bswap32(v20[0]);
  if ((v6 & 0x80000000) != 0 || (v7 = bswap32(v20[1]), (v7 & 0x80000000) != 0))
    png_error(a1, "PNG unsigned integer out of range");
  v8 = v21;
  v9 = v22;
  v10 = v23;
  v11 = v24;
  v12 = v25;
  *(_DWORD *)(a1 + 496) = v6;
  *(_DWORD *)(a1 + 500) = v7;
  *(_BYTE *)(a1 + 608) = v8;
  *(_BYTE *)(a1 + 604) = v12;
  *(_BYTE *)(a1 + 607) = v9;
  *(_BYTE *)(a1 + 988) = v11;
  *(_BYTE *)(a1 + 1048) = v10;
  v13 = 0x4010201030101uLL >> (8 * v9);
  if (v9 >= 7)
    LOBYTE(v13) = 1;
  *(_BYTE *)(a1 + 611) = v13;
  v14 = v13 * v8;
  *(_BYTE *)(a1 + 610) = v14;
  v15 = v14 >= 8u;
  v16 = (v14 * (unint64_t)v6 + 7) >> 3;
  v17 = v6 * (unint64_t)(v14 >> 3);
  if (!v15)
    v17 = v16;
  *(_QWORD *)(a1 + 512) = v17;
  return png_set_IHDR(a1, a2, v6, v7, v8, v9, v12, v10, v11);
}

uint64_t png_handle_PLTE(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  int v6;
  const char *v7;
  uint64_t result;
  int v10;
  int v11;
  _BYTE *v12;
  int v13;
  const char *v14;
  int v15;
  const char *v16;
  Bytef v17;
  __int16 v18;
  _BYTE v19[768];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
  {
    v16 = "missing IHDR";
    goto LABEL_36;
  }
  if ((v4 & 2) != 0)
  {
    v16 = "duplicate";
    goto LABEL_36;
  }
  if ((v4 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    v7 = "out of place";
    return png_chunk_benign_error(a1, v7);
  }
  *(_DWORD *)(a1 + 292) = v4 | 2;
  v6 = *(unsigned __int8 *)(a1 + 607);
  if ((v6 & 2) == 0)
  {
    png_crc_finish(a1, a3);
    v7 = "ignored in grayscale PNG";
    return png_chunk_benign_error(a1, v7);
  }
  if (a3 > 0x300 || a3 % 3)
  {
    png_crc_finish(a1, a3);
    if (*(_BYTE *)(a1 + 607) != 3)
    {
      v7 = "invalid";
      return png_chunk_benign_error(a1, v7);
    }
    v16 = "invalid";
LABEL_36:
    png_chunk_error(a1, v16);
  }
  if (v6 == 3)
    v10 = 1 << *(_BYTE *)(a1 + 608);
  else
    v10 = 256;
  if (v10 >= (int)((unsigned __int16)a3 / 3u))
    v11 = (unsigned __int16)a3 / 3u;
  else
    v11 = v10;
  if (v11 >= 1)
  {
    v12 = v19;
    v13 = v11;
    do
    {
      png_crc_read(a1, &v17, 3u);
      *v12 = v17;
      *(_WORD *)(v12 + 1) = v18;
      v12 += 3;
      --v13;
    }
    while (v13);
  }
  png_crc_finish(a1, -3 * v11 + a3);
  result = (uint64_t)png_set_PLTE((_BYTE *)a1, a2, v19, v11);
  if (*(_WORD *)(a1 + 600))
  {
    *(_WORD *)(a1 + 600) = 0;
    if (!a2)
    {
      v14 = "tRNS must be after";
      return png_chunk_benign_error(a1, v14);
    }
    goto LABEL_27;
  }
  if (!a2)
    return result;
  v15 = *(_DWORD *)(a2 + 8);
  if ((v15 & 0x10) != 0)
  {
    *(_WORD *)(a1 + 600) = 0;
LABEL_27:
    *(_WORD *)(a2 + 34) = 0;
    result = png_chunk_benign_error(a1, "tRNS must be after");
    v15 = *(_DWORD *)(a2 + 8);
  }
  if ((v15 & 0x40) != 0)
    result = png_chunk_benign_error(a1, "hIST must be after");
  if ((*(_BYTE *)(a2 + 8) & 0x20) != 0)
  {
    v14 = "bKGD must be after";
    return png_chunk_benign_error(a1, v14);
  }
  return result;
}

uint64_t png_handle_IEND(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 292);
  if ((~v4 & 5) != 0)
    png_chunk_error(a1, "out of place");
  *(_DWORD *)(a1 + 292) = v4 | 0x18;
  result = png_crc_finish(a1, a3);
  if (a3)
    return png_chunk_benign_error(a1, "invalid");
  return result;
}

void png_handle_gAMA(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  const char *v5;
  int v7;
  int v8;
  unsigned int v9;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v4 & 6) != 0)
  {
    png_crc_finish(a1, a3);
    v5 = "out of place";
LABEL_12:
    png_chunk_benign_error(a1, v5);
    return;
  }
  if (a3 != 4)
  {
    png_crc_finish(a1, a3);
    v5 = "invalid";
    goto LABEL_12;
  }
  png_crc_read(a1, (Bytef *)&v9, 4u);
  if (!png_crc_finish(a1, 0))
  {
    v7 = bswap32(v9);
    if (v7 < 0)
      v8 = -1;
    else
      v8 = v7;
    png_colorspace_set_gamma(a1, a1 + 1176, v8);
    png_colorspace_sync(a1, a2);
  }
}

uint64_t png_handle_sBIT(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  const char *v6;
  uint64_t result;
  int v9;
  unsigned __int8 v10;
  uint64_t v11;
  int *v12;
  char v13;
  char v14;
  char *v15;
  char v16;
  char v17;
  char v18;
  int v19;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v4 & 6) != 0)
  {
    png_crc_finish(a1, a3);
    v6 = "out of place";
    return png_chunk_benign_error(a1, v6);
  }
  if (a2 && (*(_BYTE *)(a2 + 8) & 2) != 0)
  {
    png_crc_finish(a1, a3);
    v6 = "duplicate";
    return png_chunk_benign_error(a1, v6);
  }
  v9 = *(unsigned __int8 *)(a1 + 607);
  if (v9 == 3)
  {
    v10 = 8;
  }
  else
  {
    v9 = *(unsigned __int8 *)(a1 + 611);
    v10 = *(_BYTE *)(a1 + 608);
  }
  if (a3 <= 4 && v9 == a3)
  {
    v19 = 16843009 * v10;
    png_crc_read(a1, (Bytef *)&v19, a3);
    result = png_crc_finish(a1, 0);
    if (!(_DWORD)result)
    {
      if (a3)
      {
        v11 = a3;
        v12 = &v19;
        while (1)
        {
          v13 = *(_BYTE *)v12;
          v12 = (int *)((char *)v12 + 1);
          if ((v13 - 1) >= v10)
            return png_chunk_benign_error(a1, "invalid");
          if (!--v11)
            goto LABEL_17;
        }
      }
      else
      {
LABEL_17:
        v14 = v19;
        if ((*(_BYTE *)(a1 + 607) & 2) != 0)
        {
          v15 = (char *)&v19 + 3;
          v16 = BYTE1(v19);
          v17 = BYTE2(v19);
        }
        else
        {
          v15 = (char *)&v19 + 1;
          *(_BYTE *)(a1 + 723) = v19;
          v16 = v14;
          v17 = v14;
        }
        v18 = *v15;
        *(_BYTE *)(a1 + 720) = v14;
        *(_BYTE *)(a1 + 721) = v16;
        *(_BYTE *)(a1 + 722) = v17;
        *(_BYTE *)(a1 + 724) = v18;
        return png_set_sBIT(a1, a2, a1 + 720);
      }
    }
  }
  else
  {
    png_chunk_benign_error(a1, "invalid");
    return png_crc_finish(a1, a3);
  }
  return result;
}

void png_handle_cHRM(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  const char *v5;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  int v25[8];
  unsigned int v26[8];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v4 & 6) != 0)
  {
    png_crc_finish(a1, a3);
    v5 = "out of place";
LABEL_42:
    png_chunk_benign_error(a1, v5);
    return;
  }
  if (a3 != 32)
  {
    png_crc_finish(a1, a3);
    v5 = "invalid";
    goto LABEL_42;
  }
  png_crc_read(a1, (Bytef *)v26, 0x20u);
  if (!png_crc_finish(a1, 0))
  {
    v7 = bswap32(v26[0]);
    if (v7 < 0)
      v8 = -1;
    else
      v8 = v7;
    v9 = bswap32(v26[1]);
    if (v9 < 0)
      v10 = -1;
    else
      v10 = v9;
    v25[6] = v8;
    v25[7] = v10;
    v11 = bswap32(v26[2]);
    if (v11 < 0)
      v12 = -1;
    else
      v12 = v11;
    v13 = bswap32(v26[3]);
    if (v13 < 0)
      v14 = -1;
    else
      v14 = v13;
    v25[0] = v12;
    v25[1] = v14;
    v15 = bswap32(v26[4]);
    if (v15 < 0)
      v16 = -1;
    else
      v16 = v15;
    v17 = bswap32(v26[5]);
    if (v17 < 0)
      v18 = -1;
    else
      v18 = v17;
    v25[2] = v16;
    v25[3] = v18;
    v19 = bswap32(v26[6]);
    if (v19 < 0)
      v20 = -1;
    else
      v20 = v19;
    v21 = bswap32(v26[7]);
    if (v21 < 0)
      v22 = -1;
    else
      v22 = v21;
    v25[4] = v20;
    v25[5] = v22;
    if (v7 < 0 || v9 < 0 || v11 < 0 || v13 < 0 || v15 < 0 || v17 < 0 || v19 < 0 || v21 < 0)
    {
      v24 = "invalid values";
    }
    else
    {
      v23 = *(__int16 *)(a1 + 1250);
      if (v23 < 0)
        return;
      if ((v23 & 0x10) == 0)
      {
        *(_WORD *)(a1 + 1250) = v23 | 0x10;
        png_colorspace_set_chromaticities(a1, a1 + 1176, v25, 1);
        png_colorspace_sync(a1, a2);
        return;
      }
      *(_WORD *)(a1 + 1250) = v23 | 0x8000;
      png_colorspace_sync(a1, a2);
      v24 = "duplicate";
    }
    png_chunk_benign_error(a1, v24);
  }
}

void png_handle_sRGB(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  const char *v5;
  int v7;
  Bytef v8;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v4 & 6) != 0)
  {
    png_crc_finish(a1, a3);
    v5 = "out of place";
LABEL_8:
    png_chunk_benign_error(a1, v5);
    return;
  }
  if (a3 != 1)
  {
    png_crc_finish(a1, a3);
    v5 = "invalid";
    goto LABEL_8;
  }
  v8 = 0;
  png_crc_read(a1, &v8, 1u);
  if (!png_crc_finish(a1, 0))
  {
    v7 = *(__int16 *)(a1 + 1250);
    if ((v7 & 0x80000000) == 0)
    {
      if ((v7 & 4) != 0)
      {
        *(_WORD *)(a1 + 1250) = v7 | 0x8000;
        png_colorspace_sync(a1, a2);
        png_chunk_benign_error(a1, "too many profiles");
      }
      else
      {
        png_colorspace_set_sRGB(a1, a1 + 1176, v8);
        png_colorspace_sync(a1, a2);
      }
    }
  }
}

void png_handle_iCCP(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  const char *v6;
  int v7;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _OWORD *buffer;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  void *v32;
  unsigned int *v33;
  unint64_t v34;
  unsigned int v35;
  Bytef v36[1024];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  Bytef __src[81];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v35 = a3;
  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v4 & 6) != 0)
  {
    png_crc_finish(a1, a3);
    v6 = "out of place";
LABEL_6:
    png_chunk_benign_error(a1, v6);
    return;
  }
  if (a3 <= 0xD)
  {
    png_crc_finish(a1, a3);
    v6 = "too short";
    goto LABEL_6;
  }
  v7 = *(__int16 *)(a1 + 1250);
  if (v7 < 0)
  {
    png_crc_finish(a1, a3);
    return;
  }
  if ((v7 & 4) == 0)
  {
    if (a3 >= 0x51)
      v9 = 81;
    else
      v9 = a3;
    png_crc_read(a1, __src, v9);
    v35 = a3 - v9;
    if (a3 - v9 < 0xB)
    {
      png_crc_finish(a1, a3 - v9);
      v10 = "too short";
      v11 = a1;
      goto LABEL_31;
    }
    v13 = 0;
    if (a3 >= 0x50)
      v14 = 80;
    else
      v14 = a3;
    while (__src[v13])
    {
      if (v14 == ++v13)
        goto LABEL_23;
    }
    LODWORD(v14) = v13;
LABEL_23:
    if ((v14 - 1) > 0x4E)
    {
      v12 = "bad keyword";
      goto LABEL_28;
    }
    v15 = v14 + 1;
    if (v15 >= v9 || __src[v15])
    {
      v12 = "bad compression method";
      goto LABEL_28;
    }
    if (png_inflate_claim(a1, 1766015824))
    {
      v12 = *(const char **)(a1 + 360);
      goto LABEL_28;
    }
    v16 = (v14 + 2);
    v45 = 0;
    v44 = 0u;
    v43 = 0u;
    v42 = 0u;
    v41 = 0u;
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v34 = 132;
    *(_QWORD *)(a1 + 312) = &__src[v16];
    *(_DWORD *)(a1 + 320) = v9 - v16;
    png_inflate_read(a1, v36, &v35, (uint64_t)&v37, (uint64_t *)&v34, 0);
    if (v34)
      goto LABEL_36;
    v17 = bswap32(v37);
    if (!png_icc_check_length(a1, a1 + 1176, __src, v17)
      || !png_icc_check_header(a1, a1 + 1176, __src, v17, (uint64_t)&v37, *(_BYTE *)(a1 + 607)))
    {
      goto LABEL_45;
    }
    v18 = v45;
    v19 = BYTE1(v45);
    v20 = BYTE2(v45);
    v21 = HIBYTE(v45);
    buffer = png_read_buffer(a1, v17, 2);
    if (!buffer)
    {
      v12 = "out of memory";
      goto LABEL_46;
    }
    *buffer = v37;
    v23 = v38;
    v24 = v39;
    v25 = v41;
    buffer[3] = v40;
    buffer[4] = v25;
    buffer[1] = v23;
    buffer[2] = v24;
    v26 = v42;
    v27 = v43;
    v28 = v44;
    *((_DWORD *)buffer + 32) = v45;
    buffer[6] = v27;
    buffer[7] = v28;
    buffer[5] = v26;
    v29 = 12 * ((v18 << 24) | (v19 << 16) | (v20 << 8) | v21);
    v33 = (unsigned int *)buffer;
    v34 = v29;
    v30 = (char *)buffer + 132;
    png_inflate_read(a1, v36, &v35, (uint64_t)buffer + 132, (uint64_t *)&v34, 0);
    if (v34)
      goto LABEL_36;
    if (!png_icc_check_tag_table(a1, a1 + 1176, __src, v17, (uint64_t)v33))
    {
LABEL_45:
      v12 = 0;
      goto LABEL_46;
    }
    v34 = v17 - v29 - 132;
    png_inflate_read(a1, v36, &v35, (uint64_t)&v30[v29], (uint64_t *)&v34, 1);
    v31 = v35;
    if (v35)
    {
      if ((*(_BYTE *)(a1 + 298) & 0x10) == 0)
      {
        v12 = "extra compressed data";
        goto LABEL_46;
      }
      if (!v34)
      {
        png_chunk_warning(a1, "extra compressed data");
        goto LABEL_52;
      }
    }
    else if (!v34)
    {
LABEL_52:
      png_crc_finish(a1, v31);
      png_icc_set_sRGB(a1, a1 + 1176, v33, *(_QWORD *)(a1 + 408));
      if (a2)
      {
        png_free_data(a1, a2, 0x10u, 0);
        v32 = png_malloc_base(a1, v15);
        *(_QWORD *)(a2 + 128) = v32;
        if (!v32)
        {
          *(_WORD *)(a1 + 1250) |= 0x8000u;
          png_colorspace_sync(a1, a2);
          *(_DWORD *)(a1 + 304) = 0;
          v12 = "out of memory";
          goto LABEL_29;
        }
        memcpy(v32, __src, v15);
        *(_DWORD *)(a2 + 144) = v17;
        *(_QWORD *)(a2 + 136) = v33;
        *(_QWORD *)(a1 + 1112) = 0;
        *(_DWORD *)(a2 + 300) |= 0x10u;
        *(_DWORD *)(a2 + 8) |= 0x1000u;
        png_colorspace_sync(a1, a2);
      }
      *(_DWORD *)(a1 + 304) = 0;
      return;
    }
LABEL_36:
    v12 = *(const char **)(a1 + 360);
LABEL_46:
    *(_DWORD *)(a1 + 304) = 0;
    goto LABEL_28;
  }
  v12 = "too many profiles";
LABEL_28:
  png_crc_finish(a1, v35);
LABEL_29:
  *(_WORD *)(a1 + 1250) |= 0x8000u;
  png_colorspace_sync(a1, a2);
  if (!v12)
    return;
  v11 = a1;
  v10 = v12;
LABEL_31:
  png_chunk_benign_error(v11, v10);
}

uint64_t png_inflate_claim(uint64_t a1, int a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  char v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 304);
  if (v4)
  {
    *(_DWORD *)v8 = bswap32(v4);
    png_safecat((uint64_t)v8, 0x40uLL, 4uLL, " using zstream");
    png_chunk_warning(a1, v8);
    *(_DWORD *)(a1 + 304) = 0;
  }
  if ((*(_DWORD *)(a1 + 896) & 0xC) == 0xC)
    v5 = 15;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 616) = (*(_DWORD *)(a1 + 896) & 0xC) != 12;
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  if ((*(_BYTE *)(a1 + 296) & 2) != 0)
  {
    v6 = inflateReset2((z_streamp)(a1 + 312), v5);
  }
  else
  {
    v6 = inflateInit2_((z_streamp)(a1 + 312), v5, "1.2.12", 112);
    if (!(_DWORD)v6)
      *(_DWORD *)(a1 + 296) |= 2u;
  }
  if ((~*(_DWORD *)(a1 + 896) & 0x300) == 0)
    v6 = inflateValidate((z_streamp)(a1 + 312), 0);
  if ((_DWORD)v6)
    png_zstream_error(a1, v6);
  else
    *(_DWORD *)(a1 + 304) = a2;
  return v6;
}

uint64_t png_inflate_read(uint64_t result, Bytef *a2, unsigned int *a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v6;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v6 = result;
  if (*(_DWORD *)(result + 304) == *(_DWORD *)(result + 528))
  {
    *(_QWORD *)(result + 336) = a4;
    *(_DWORD *)(result + 344) = 0;
    if (a6)
      v10 = 4;
    else
      v10 = 2;
    v11 = 1024;
    while (1)
    {
      if (!*(_DWORD *)(v6 + 320))
      {
        if (v11 >= *a3)
          v11 = *a3;
        *a3 -= v11;
        if (v11)
          png_crc_read(v6, a2, v11);
        *(_QWORD *)(v6 + 312) = a2;
        *(_DWORD *)(v6 + 320) = v11;
      }
      if (!*(_DWORD *)(v6 + 344))
      {
        if ((unint64_t)*a5 >= 0xFFFFFFFF)
          v12 = 0xFFFFFFFFLL;
        else
          v12 = *a5;
        *a5 -= v12;
        *(_DWORD *)(v6 + 344) = v12;
      }
      v13 = *a3 ? 0 : v10;
      v14 = png_zlib_inflate(v6, v13);
      if (v14)
        break;
      if (!*a5 && !*(_DWORD *)(v6 + 344))
      {
        v15 = 0;
        goto LABEL_26;
      }
    }
    v15 = *a5 + *(unsigned int *)(v6 + 344);
LABEL_26:
    *a5 = v15;
    *(_DWORD *)(v6 + 344) = 0;
    return png_zstream_error(v6, v14);
  }
  else
  {
    *(_QWORD *)(result + 360) = "zstream unclaimed";
  }
  return result;
}

void *png_read_buffer(uint64_t a1, size_t __size, int a3)
{
  void *v6;
  void *v7;

  v6 = *(void **)(a1 + 1112);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 1120) >= __size)
      return v6;
    *(_QWORD *)(a1 + 1112) = 0;
    *(_QWORD *)(a1 + 1120) = 0;
    png_free(a1, v6);
  }
  v7 = png_malloc_base(a1, __size);
  if (v7)
  {
    v6 = v7;
    bzero(v7, __size);
    *(_QWORD *)(a1 + 1112) = v6;
    *(_QWORD *)(a1 + 1120) = __size;
  }
  else
  {
    if (a3 <= 1)
    {
      if (!a3)
        png_chunk_error(a1, "insufficient memory to read chunk");
      png_chunk_warning(a1, "insufficient memory to read chunk");
    }
    return 0;
  }
  return v6;
}

void png_handle_sPLT(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  Bytef *buffer;
  Bytef *v10;
  const char *v11;
  uint64_t v12;
  int v14;
  Bytef *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _WORD *v21;
  unsigned int v22;
  unsigned __int16 *v23;
  unsigned int v24;
  __int128 v25;
  void *v26[2];

  v6 = *(_DWORD *)(a1 + 1060);
  if (v6)
  {
    v7 = v6 - 1;
    if (!v7)
    {
LABEL_5:
      png_crc_finish(a1, a3);
      return;
    }
    *(_DWORD *)(a1 + 1060) = v7;
    if (v7 == 1)
    {
      png_warning(a1, "No space in chunk cache for sPLT");
      goto LABEL_5;
    }
  }
  v8 = *(_DWORD *)(a1 + 292);
  if ((v8 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v8 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    v11 = "out of place";
LABEL_13:
    png_chunk_benign_error(a1, v11);
    return;
  }
  buffer = (Bytef *)png_read_buffer(a1, a3 + 1, 2);
  if (!buffer)
  {
    png_crc_finish(a1, a3);
    v11 = "out of memory";
    goto LABEL_13;
  }
  v10 = buffer;
  png_crc_read(a1, buffer, a3);
  if (png_crc_finish(a1, 0))
    return;
  v12 = 0;
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v10[a3] = 0;
  while (v10[v12++])
    ;
  if (a3 < 2 || &v10[v12] > &v10[a3 - 2])
  {
    v19 = "malformed sPLT chunk";
    goto LABEL_24;
  }
  v15 = &v10[v12 + 1];
  BYTE8(v25) = v10[v12];
  v14 = BYTE8(v25);
  if (BYTE8(v25) == 8)
    v16 = 6;
  else
    v16 = 10;
  v17 = a3 - 1 - v12;
  v18 = v17 / v16;
  if (v17 % v16)
  {
    v19 = "sPLT chunk has bad length";
LABEL_24:
    png_warning(a1, v19);
    return;
  }
  LODWORD(v26[1]) = v17 / v16;
  v20 = png_malloc_warn((_QWORD *)a1, 10 * (v17 / v16));
  v26[0] = v20;
  if (!v20)
  {
    v19 = "sPLT chunk requires too much memory";
    goto LABEL_24;
  }
  if (v16 <= v17)
  {
    v21 = (_WORD *)v20 + 2;
    do
    {
      if (v14 == 8)
      {
        *(v21 - 2) = *v15;
        *(v21 - 1) = v15[1];
        *v21 = v15[2];
        LOWORD(v22) = v15[3];
        v23 = (unsigned __int16 *)(v15 + 4);
      }
      else
      {
        *(v21 - 2) = bswap32(*(unsigned __int16 *)v15) >> 16;
        *(v21 - 1) = bswap32(*((unsigned __int16 *)v15 + 1)) >> 16;
        *v21 = bswap32(*((unsigned __int16 *)v15 + 2)) >> 16;
        v22 = bswap32(*((unsigned __int16 *)v15 + 3)) >> 16;
        v23 = (unsigned __int16 *)(v15 + 8);
      }
      v21[1] = v22;
      v24 = *v23;
      v15 = (Bytef *)(v23 + 1);
      v21[2] = bswap32(v24) >> 16;
      v21 += 5;
      --v18;
    }
    while (v18);
  }
  *(_QWORD *)&v25 = v10;
  png_set_sPLT(a1, a2, (uint64_t)&v25, 1);
  png_free(a1, v26[0]);
}

void png_handle_tRNS(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  __int16 v5;
  int v7;
  const char *v8;
  _WORD v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  v5 = a3;
  if ((v4 & 4) != 0)
    goto LABEL_12;
  if (a2 && (*(_BYTE *)(a2 + 8) & 0x10) != 0)
  {
    png_crc_finish(a1, a3);
    v8 = "duplicate";
    goto LABEL_13;
  }
  v7 = *(unsigned __int8 *)(a1 + 607);
  if (v7 == 3)
  {
    if ((v4 & 2) != 0)
    {
      if (a3 > 0x100 || a3 - 1 >= *(unsigned __int16 *)(a1 + 592))
      {
        png_crc_finish(a1, a3);
        v8 = "invalid";
        goto LABEL_13;
      }
      png_crc_read(a1, (Bytef *)v9, a3);
      *(_WORD *)(a1 + 600) = v5;
      goto LABEL_21;
    }
LABEL_12:
    png_crc_finish(a1, a3);
    v8 = "out of place";
    goto LABEL_13;
  }
  if (v7 != 2)
  {
    if (!*(_BYTE *)(a1 + 607))
    {
      if (a3 == 2)
      {
        png_crc_read(a1, (Bytef *)v9, 2u);
        *(_WORD *)(a1 + 600) = 1;
        *(_WORD *)(a1 + 752) = bswap32(v9[0]) >> 16;
        goto LABEL_21;
      }
LABEL_17:
      png_crc_finish(a1, a3);
      png_chunk_benign_error(a1, "invalid");
      return;
    }
    png_crc_finish(a1, a3);
    v8 = "invalid with alpha channel";
LABEL_13:
    png_chunk_benign_error(a1, v8);
    return;
  }
  if (a3 != 6)
    goto LABEL_17;
  png_crc_read(a1, (Bytef *)v9, 6u);
  *(_WORD *)(a1 + 600) = 1;
  *(_WORD *)(a1 + 746) = bswap32(v9[0]) >> 16;
  *(_WORD *)(a1 + 748) = bswap32(v9[1]) >> 16;
  *(_WORD *)(a1 + 750) = bswap32(v9[2]) >> 16;
LABEL_21:
  if (png_crc_finish(a1, 0))
    *(_WORD *)(a1 + 600) = 0;
  else
    png_set_tRNS((_QWORD *)a1, a2, v9, *(unsigned __int16 *)(a1 + 600), a1 + 744);
}

uint64_t png_handle_bKGD(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  int v6;
  const char *v7;
  uint64_t result;
  int v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  unsigned __int16 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v4 & 4) != 0 || (v6 = *(unsigned __int8 *)(a1 + 607), (v4 & 2) == 0) && v6 == 3)
  {
    png_crc_finish(a1, a3);
    v7 = "out of place";
    return png_chunk_benign_error(a1, v7);
  }
  if (a2 && (*(_BYTE *)(a2 + 8) & 0x20) != 0)
  {
    png_crc_finish(a1, a3);
    v7 = "duplicate";
    return png_chunk_benign_error(a1, v7);
  }
  if ((v6 & 2) != 0)
    v9 = 6;
  else
    v9 = 2;
  if (v6 == 3)
    v10 = 1;
  else
    v10 = v9;
  if (v10 != a3)
  {
    png_crc_finish(a1, a3);
    v7 = "invalid";
    return png_chunk_benign_error(a1, v7);
  }
  v20 = 0;
  v19 = 0;
  png_crc_read(a1, (Bytef *)&v21, a3);
  result = png_crc_finish(a1, 0);
  if (!(_DWORD)result)
  {
    v11 = *(unsigned __int8 *)(a1 + 607);
    if (v11 == 3)
    {
      LOBYTE(v19) = v21;
      if (!a2 || !*(_WORD *)(a2 + 32))
      {
        HIWORD(v19) = 0;
        *(_DWORD *)((char *)&v19 + 2) = 0;
LABEL_40:
        v20 = 0;
        return png_set_bKGD(a1, a2, (uint64_t)&v19);
      }
      if (*(unsigned __int16 *)(a2 + 32) > v21)
      {
        v12 = (unsigned __int8 *)(*(_QWORD *)(a1 + 584) + 3 * v21);
        WORD1(v19) = *v12;
        WORD2(v19) = v12[1];
        v13 = v12[2];
LABEL_39:
        HIWORD(v19) = v13;
        goto LABEL_40;
      }
      v16 = "invalid index";
      return png_chunk_benign_error(a1, v16);
    }
    v14 = *(unsigned __int8 *)(a1 + 608);
    if ((v11 & 2) == 0)
    {
      if (v14 >= 9)
      {
        v15 = HIBYTE(v21);
      }
      else if ((_BYTE)v21 || (v15 = HIBYTE(v21), HIBYTE(v21) >> v14))
      {
        v16 = "invalid gray level";
        return png_chunk_benign_error(a1, v16);
      }
      LOBYTE(v19) = 0;
      v20 = v15 | (v21 << 8);
      HIWORD(v19) = v20;
      WORD2(v19) = v20;
      WORD1(v19) = v20;
      return png_set_bKGD(a1, a2, (uint64_t)&v19);
    }
    if (v14 >= 9)
    {
      v18 = v22;
      v17 = v24;
    }
    else
    {
      if ((_BYTE)v21 || v22 || (v17 = v24) != 0)
      {
        v16 = "invalid color";
        return png_chunk_benign_error(a1, v16);
      }
      v18 = 0;
    }
    LOBYTE(v19) = 0;
    WORD1(v19) = _byteswap_ushort(v21);
    WORD2(v19) = v23 | (unsigned __int16)(v18 << 8);
    v13 = v25 | (unsigned __int16)(v17 << 8);
    goto LABEL_39;
  }
  return result;
}

void png_handle_eXIf(uint64_t a1, uint64_t a2, size_t __size)
{
  unsigned int v4;
  const char *v5;
  _QWORD *v7;
  uint64_t v8;
  Bytef v9;

  if ((*(_BYTE *)(a1 + 292) & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  v4 = __size;
  if (__size <= 1)
  {
    png_crc_finish(a1, __size);
    v5 = "too short";
LABEL_15:
    png_chunk_benign_error(a1, v5);
    return;
  }
  if (!a2 || (*(_BYTE *)(a2 + 10) & 1) != 0)
  {
    png_crc_finish(a1, __size);
    v5 = "duplicate";
    goto LABEL_15;
  }
  *(_DWORD *)(a2 + 300) |= 0x8000u;
  v7 = png_malloc_warn((_QWORD *)a1, __size);
  *(_QWORD *)(a2 + 248) = v7;
  if (!v7)
  {
    png_crc_finish(a1, v4);
    v5 = "out of memory";
    goto LABEL_15;
  }
  v8 = 0;
  do
  {
    png_crc_read(a1, &v9, 1u);
    *(_BYTE *)(*(_QWORD *)(a2 + 248) + v8) = v9;
    if (v8 == 1 && (v9 | 4) != 0x4D && **(unsigned __int8 **)(a2 + 248) != v9)
    {
      png_crc_finish(a1, v4);
      png_chunk_benign_error(a1, "incorrect byte-order specifier");
      goto LABEL_18;
    }
    ++v8;
  }
  while (v4 != v8);
  if (png_crc_finish(a1, 0))
    return;
  png_set_eXIf_1((_QWORD *)a1, a2, v4, *(_QWORD *)(a2 + 248));
LABEL_18:
  png_free(a1, *(void **)(a2 + 248));
  *(_QWORD *)(a2 + 248) = 0;
}

uint64_t png_handle_hIST(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t result;
  const char *v9;
  unsigned __int16 v10;
  _BYTE v11[512];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a1 + 292) & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((*(_DWORD *)(a1 + 292) & 6) != 2)
  {
    png_crc_finish(a1, a3);
    v9 = "out of place";
    return png_chunk_benign_error(a1, v9);
  }
  if (a2 && (*(_BYTE *)(a2 + 8) & 0x40) != 0)
  {
    png_crc_finish(a1, a3);
    v9 = "duplicate";
    return png_chunk_benign_error(a1, v9);
  }
  if (a3 > 0x201 || (v5 = a3 >> 1, a3 >> 1 != *(unsigned __int16 *)(a1 + 592)))
  {
    png_crc_finish(a1, a3);
    v9 = "invalid";
    return png_chunk_benign_error(a1, v9);
  }
  if (a3 >= 2)
  {
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v5;
    v7 = v11;
    do
    {
      png_crc_read(a1, (Bytef *)&v10, 2u);
      *v7++ = bswap32(v10) >> 16;
      --v6;
    }
    while (v6);
  }
  result = png_crc_finish(a1, 0);
  if (!(_DWORD)result)
    return (uint64_t)png_set_hIST((_QWORD *)a1, a2, v11);
  return result;
}

uint64_t png_handle_pHYs(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t result;
  const char *v7;
  unsigned int v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v4 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    v7 = "out of place";
    return png_chunk_benign_error(a1, v7);
  }
  if (a2 && (*(_BYTE *)(a2 + 8) & 0x80) != 0)
  {
    png_crc_finish(a1, a3);
    v7 = "duplicate";
    return png_chunk_benign_error(a1, v7);
  }
  if (a3 != 9)
  {
    png_crc_finish(a1, a3);
    v7 = "invalid";
    return png_chunk_benign_error(a1, v7);
  }
  png_crc_read(a1, (Bytef *)v8, 9u);
  result = png_crc_finish(a1, 0);
  if (!(_DWORD)result)
    return png_set_pHYs(a1, a2, bswap32(v8[0]), bswap32(v8[1]), v9);
  return result;
}

uint64_t png_handle_oFFs(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t result;
  int v7;
  const char *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v4 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    v8 = "out of place";
    return png_chunk_benign_error(a1, v8);
  }
  if (a2 && (*(_BYTE *)(a2 + 9) & 1) != 0)
  {
    png_crc_finish(a1, a3);
    v8 = "duplicate";
    return png_chunk_benign_error(a1, v8);
  }
  if (a3 != 9)
  {
    png_crc_finish(a1, a3);
    v8 = "invalid";
    return png_chunk_benign_error(a1, v8);
  }
  png_crc_read(a1, (Bytef *)&v10, 9u);
  result = png_crc_finish(a1, 0);
  if (!(_DWORD)result)
  {
    if ((char)v10 < 0)
      v7 = -((2147418112 * BYTE1(v10) - ((v10 << 24) | (BYTE2(v10) << 8) | HIBYTE(v10))) & 0x7FFFFFFF);
    else
      v7 = _byteswap_ulong(v10);
    if ((char)v11 < 0)
      v9 = -((2147418112 * BYTE1(v11) - ((v11 << 24) | (BYTE2(v11) << 8) | HIBYTE(v11))) & 0x7FFFFFFF);
    else
      v9 = _byteswap_ulong(v11);
    return png_set_oFFs(a1, a2, v7, v9, v12);
  }
  return result;
}

void png_handle_pCAL(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  Bytef *buffer;
  char *v8;
  const char *v9;
  uint64_t v10;
  char *v11;
  char *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  const char *v26;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v4 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    v9 = "out of place";
LABEL_29:
    png_chunk_benign_error(a1, v9);
    return;
  }
  if (a2 && (*(_BYTE *)(a2 + 9) & 4) != 0)
  {
    png_crc_finish(a1, a3);
    v9 = "duplicate";
    goto LABEL_29;
  }
  buffer = (Bytef *)png_read_buffer(a1, a3 + 1, 2);
  if (!buffer)
  {
    png_crc_finish(a1, a3);
LABEL_11:
    v9 = "out of memory";
    goto LABEL_29;
  }
  v8 = (char *)buffer;
  png_crc_read(a1, buffer, a3);
  if (png_crc_finish(a1, 0))
    return;
  v10 = 0;
  v11 = &v8[a3];
  *v11 = 0;
  while (v8[v10++])
    ;
  if (a3 - v10 + 1 <= 12)
  {
    v9 = "invalid";
    goto LABEL_29;
  }
  v13 = &v8[v10];
  if (v8[v10] < 0)
    v14 = -((2147418112 * v8[v10 + 1]
           - ((v8[v10] << 24) | (v8[v10 + 2] << 8) | v8[v10 + 3])) & 0x7FFFFFFF);
  else
    v14 = _byteswap_ulong(*(_DWORD *)&v8[v10]);
  v15 = (unsigned __int8 *)&v8[v10];
  v16 = v8[v10 + 4];
  if (v8[v10 + 4] < 0)
    v17 = -((2147418112 * v15[5] - ((v16 << 24) | (v15[6] << 8) | v15[7])) & 0x7FFFFFFF);
  else
    v17 = (v16 << 24) | (v15[5] << 16) | (v15[6] << 8) | v15[7];
  v18 = &v8[v10];
  v19 = v18[8];
  v20 = v18[9];
  if (!v18[8] && (_DWORD)v20 != 2 || v19 - 1 <= 1 && (_DWORD)v20 != 3 || v19 == 3 && (_DWORD)v20 != 4)
  {
    v9 = "invalid parameter count";
    goto LABEL_29;
  }
  v21 = v13 + 9;
  v26 = v18 + 10;
  if (v19 >= 4)
    png_chunk_benign_error(a1, "unrecognized equation type");
  while (*++v21)
    ;
  v23 = png_malloc_warn((_QWORD *)a1, 8 * v20);
  if (!v23)
    goto LABEL_11;
  v24 = v23;
  if ((_DWORD)v20)
  {
    v25 = 0;
    while (2)
    {
      v23[v25] = ++v21;
      while (1)
      {
        if (v21 > v11)
        {
          png_free(a1, v23);
          v9 = "invalid data";
          goto LABEL_29;
        }
        if (!*v21)
          break;
        ++v21;
      }
      if (++v25 != v20)
        continue;
      break;
    }
  }
  png_set_pCAL((_QWORD *)a1, a2, v8, v14, v17, v19, v20, v26, (const char **)v23);
  png_free(a1, v24);
}

uint64_t png_handle_sCAL(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  const char *v7;
  Bytef *buffer;
  char *v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  unsigned int v14;
  unint64_t v15;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v4 & 4) != 0)
  {
    png_crc_finish(a1, a3);
    v7 = "out of place";
    return png_chunk_benign_error(a1, v7);
  }
  if (a2 && (*(_BYTE *)(a2 + 9) & 0x40) != 0)
  {
    png_crc_finish(a1, a3);
    v7 = "duplicate";
    return png_chunk_benign_error(a1, v7);
  }
  if (a3 <= 3)
  {
    png_crc_finish(a1, a3);
    v7 = "invalid";
    return png_chunk_benign_error(a1, v7);
  }
  buffer = (Bytef *)png_read_buffer(a1, a3 + 1, 2);
  if (!buffer)
  {
    png_chunk_benign_error(a1, "out of memory");
    return png_crc_finish(a1, a3);
  }
  v9 = (char *)buffer;
  png_crc_read(a1, buffer, a3);
  v9[a3] = 0;
  result = png_crc_finish(a1, 0);
  if (!(_DWORD)result)
  {
    if (*v9 - 1 >= 2)
    {
      v7 = "invalid unit";
      return png_chunk_benign_error(a1, v7);
    }
    v15 = 1;
    v14 = 0;
    if (png_check_fp_number((uint64_t)v9, a3, &v14, &v15)
      && (v11 = v15, v15 < a3)
      && (v12 = v15 + 1, ++v15, !v9[v11]))
    {
      if ((v14 & 0x188) == 0x108)
      {
        v14 = 0;
        if (png_check_fp_number((uint64_t)v9, a3, &v14, &v15) && v15 == a3)
        {
          if ((v14 & 0x188) == 0x108)
            return (uint64_t)png_set_sCAL_s((_QWORD *)a1, a2, *v9, v9 + 1, &v9[v12]);
          v13 = "non-positive height";
        }
        else
        {
          v13 = "bad height format";
        }
      }
      else
      {
        v13 = "non-positive width";
      }
    }
    else
    {
      v13 = "bad width format";
    }
    return png_chunk_benign_error(a1, v13);
  }
  return result;
}

uint64_t png_handle_tIME(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  uint64_t result;
  const char *v7;
  uint64_t v8;
  unsigned __int16 v9;
  int v10;
  char v11;

  v4 = *(_DWORD *)(a1 + 292);
  if ((v4 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if (a2 && (*(_BYTE *)(a2 + 9) & 2) != 0)
  {
    png_crc_finish(a1, a3);
    v7 = "duplicate";
    return png_chunk_benign_error(a1, v7);
  }
  if ((v4 & 4) != 0)
    *(_DWORD *)(a1 + 292) = v4 | 8;
  if (a3 != 7)
  {
    png_crc_finish(a1, a3);
    v7 = "invalid";
    return png_chunk_benign_error(a1, v7);
  }
  v8 = 0;
  png_crc_read(a1, (Bytef *)&v9, 7u);
  result = png_crc_finish(a1, 0);
  if (!(_DWORD)result)
  {
    BYTE6(v8) = v11;
    *(_DWORD *)((char *)&v8 + 2) = v10;
    LOWORD(v8) = bswap32(v9) >> 16;
    return png_set_tIME(a1, a2, (uint64_t)&v8);
  }
  return result;
}

uint64_t png_handle_tEXt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  uint64_t result;
  const char *v9;
  int v10;
  Bytef *buffer;
  Bytef *v12;
  uint64_t v13;
  Bytef *v15;
  _QWORD v16[2];
  const char *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 1060);
  if (v6)
  {
    v7 = v6 - 1;
    if (!v7)
      return png_crc_finish(a1, a3);
    *(_DWORD *)(a1 + 1060) = v7;
    if (v7 == 1)
    {
      png_crc_finish(a1, a3);
      v9 = "no space in chunk cache";
      return png_chunk_benign_error(a1, v9);
    }
  }
  v10 = *(_DWORD *)(a1 + 292);
  if ((v10 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v10 & 4) != 0)
    *(_DWORD *)(a1 + 292) = v10 | 8;
  buffer = (Bytef *)png_read_buffer(a1, a3 + 1, 1);
  if (!buffer)
  {
    v9 = "out of memory";
    return png_chunk_benign_error(a1, v9);
  }
  v12 = buffer;
  png_crc_read(a1, buffer, a3);
  result = png_crc_finish(a1, 0);
  if (!(_DWORD)result)
  {
    v13 = 0;
    v16[0] = 0;
    v12[a3] = 0;
    while (v12[v13++])
      ;
    if (a3 + 1 == v13)
      v15 = v12;
    else
      v15 = v12 + 1;
    LODWORD(v16[0]) = -1;
    v20 = 0;
    v21 = 0;
    v19 = 0;
    v16[1] = v12;
    v17 = (const char *)&v15[v13 - 1];
    v18 = strlen(v17);
    result = png_set_text_2(a1, a2, (uint64_t)v16, 1);
    if ((_DWORD)result)
      return png_warning(a1, "Insufficient memory to process text chunk");
  }
  return result;
}

uint64_t png_handle_zTXt(uint64_t a1, uint64_t a2, size_t __size)
{
  unsigned int v3;
  int v6;
  int v7;
  uint64_t result;
  const char *v9;
  int v10;
  Bytef *buffer;
  Bytef *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[7];
  uint64_t v18;

  v3 = __size;
  v6 = *(_DWORD *)(a1 + 1060);
  if (v6)
  {
    v7 = v6 - 1;
    if (!v7)
      return png_crc_finish(a1, __size);
    *(_DWORD *)(a1 + 1060) = v7;
    if (v7 == 1)
    {
      png_crc_finish(a1, __size);
      v9 = "no space in chunk cache";
      return png_chunk_benign_error(a1, v9);
    }
  }
  v10 = *(_DWORD *)(a1 + 292);
  if ((v10 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v10 & 4) != 0)
    *(_DWORD *)(a1 + 292) = v10 | 8;
  buffer = (Bytef *)png_read_buffer(a1, __size, 2);
  if (!buffer)
  {
    png_crc_finish(a1, v3);
    v9 = "out of memory";
    return png_chunk_benign_error(a1, v9);
  }
  v12 = buffer;
  png_crc_read(a1, buffer, v3);
  result = png_crc_finish(a1, 0);
  if (!(_DWORD)result)
  {
    if (!v3)
      goto LABEL_17;
    v13 = 0;
    while (v12[v13])
    {
      if (v3 == ++v13)
      {
        LODWORD(v13) = v3;
        break;
      }
    }
    if ((v13 - 80) < 0xFFFFFFB1)
    {
LABEL_17:
      v14 = "bad keyword";
      return png_chunk_benign_error(a1, v14);
    }
    if ((int)v13 + 3 > v3)
    {
      v14 = "truncated";
      return png_chunk_benign_error(a1, v14);
    }
    if (v12[v13 + 1])
    {
      v14 = "unknown compression type";
      return png_chunk_benign_error(a1, v14);
    }
    v18 = -1;
    result = png_decompress_chunk(a1, v3, (int)v13 + 2, &v18);
    if ((_DWORD)result == 1)
    {
      v17[0] = 0;
      v15 = *(_QWORD *)(a1 + 1112);
      if (v15)
      {
        v16 = v18;
        *(_BYTE *)(v15 + v18 + (v13 + 2)) = 0;
        v17[1] = v15;
        v17[2] = v15 + v13 + 2;
        v17[3] = v16;
        memset(&v17[4], 0, 24);
        result = png_set_text_2(a1, a2, (uint64_t)v17, 1);
        if ((_DWORD)result)
          v14 = "insufficient memory";
        else
          v14 = 0;
      }
      else
      {
        v14 = "Read failure in png_handle_zTXt";
      }
    }
    else
    {
      v14 = *(const char **)(a1 + 360);
    }
    if (v14)
      return png_chunk_benign_error(a1, v14);
  }
  return result;
}

uint64_t png_decompress_chunk(uint64_t a1, int a2, unsigned int a3, uint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  size_t v15;
  _BYTE *v16;
  _BYTE *v17;
  void *v18;
  int v20;

  v8 = *(_QWORD *)(a1 + 1064);
  if (v8 + 1 > 1)
  {
    v9 = a3 + 1;
    if (v8 < v9)
    {
      v12 = 4294967292;
      png_zstream_error(a1, -4);
      return v12;
    }
  }
  else
  {
    v9 = a3 + 1;
    v8 = -1;
  }
  v10 = v8 - v9;
  if (v10 < *a4)
    *a4 = v10;
  v11 = png_inflate_claim(a1, *(_DWORD *)(a1 + 528));
  if (!v11)
  {
    v13 = a2 - a3;
    v20 = a2 - a3;
    v12 = png_inflate(a1, *(_DWORD *)(a1 + 528), *(_QWORD *)(a1 + 1112) + a3, &v20, 0, a4);
    if ((_DWORD)v12 == 1)
    {
      if (inflateReset((z_streamp)(a1 + 312)))
      {
        png_zstream_error(a1, 1);
        v12 = 4294967289;
      }
      else
      {
        v14 = *a4;
        v15 = a3 + *a4 + 1;
        v16 = png_malloc_base(a1, v15);
        if (v16)
        {
          v17 = v16;
          bzero(v16, v15);
          v12 = png_inflate(a1, *(_DWORD *)(a1 + 528), *(_QWORD *)(a1 + 1112) + a3, &v20, (uint64_t)&v17[a3], a4);
          if ((_DWORD)v12 == 1)
          {
            if (v14 == *a4)
            {
              v17[v14 + a3] = 0;
              v18 = *(void **)(a1 + 1112);
              if (a3)
                memcpy(v17, *(const void **)(a1 + 1112), a3);
              *(_QWORD *)(a1 + 1112) = v17;
              *(_QWORD *)(a1 + 1120) = v15;
              png_free(a1, v18);
              if (v13 != v20)
                png_chunk_benign_error(a1, "extra compressed data");
              v12 = 1;
              goto LABEL_25;
            }
            v12 = 4294967289;
          }
          png_free(a1, v17);
        }
        else
        {
          v12 = 4294967292;
          png_zstream_error(a1, -4);
        }
      }
    }
LABEL_25:
    *(_DWORD *)(a1 + 304) = 0;
    return v12;
  }
  if (v11 == 1)
    return 4294967289;
  else
    return v11;
}

uint64_t png_handle_iTXt(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  uint64_t result;
  const char *v9;
  int v10;
  Bytef *buffer;
  Bytef *v12;
  uint64_t v13;
  const char *v14;
  Bytef *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  Bytef *v20;
  unsigned int v21;
  unsigned int v23;
  uint64_t v24;
  int v25;
  _QWORD v26[7];
  uint64_t v27;

  v6 = *(_DWORD *)(a1 + 1060);
  if (v6)
  {
    v7 = v6 - 1;
    if (!v7)
      return png_crc_finish(a1, a3);
    *(_DWORD *)(a1 + 1060) = v7;
    if (v7 == 1)
    {
      png_crc_finish(a1, a3);
      v9 = "no space in chunk cache";
      return png_chunk_benign_error(a1, v9);
    }
  }
  v10 = *(_DWORD *)(a1 + 292);
  if ((v10 & 1) == 0)
    png_chunk_error(a1, "missing IHDR");
  if ((v10 & 4) != 0)
    *(_DWORD *)(a1 + 292) = v10 | 8;
  buffer = (Bytef *)png_read_buffer(a1, a3 + 1, 1);
  if (!buffer)
  {
    png_crc_finish(a1, a3);
    v9 = "out of memory";
    return png_chunk_benign_error(a1, v9);
  }
  v12 = buffer;
  png_crc_read(a1, buffer, a3);
  result = png_crc_finish(a1, 0);
  if (!(_DWORD)result)
  {
    if (!a3)
      goto LABEL_17;
    v13 = 0;
    while (v12[v13])
    {
      if (a3 == ++v13)
      {
        LODWORD(v13) = a3;
        break;
      }
    }
    if ((v13 - 80) < 0xFFFFFFB1)
    {
LABEL_17:
      v14 = "bad keyword";
      return png_chunk_benign_error(a1, v14);
    }
    if ((int)v13 + 5 > a3)
    {
      v14 = "truncated";
      return png_chunk_benign_error(a1, v14);
    }
    v15 = &v12[v13];
    v16 = v15[1];
    if (v15[1] && (v16 != 1 || v15[2]))
    {
      v14 = "bad compression info";
      return png_chunk_benign_error(a1, v14);
    }
    v17 = (v13 + 3);
    v18 = v17;
    while (v12[v18])
    {
      if (a3 == (_DWORD)++v18)
      {
        LODWORD(v18) = a3;
        break;
      }
    }
    v19 = v18 + 1;
    if ((int)v18 + 1 >= a3)
    {
      v21 = v18 + 1;
    }
    else
    {
      v20 = &v12[v19];
      v21 = v18 + 1;
      while (*v20++)
      {
        if (a3 == ++v21)
        {
          v21 = a3;
          break;
        }
      }
    }
    v23 = v21 + 1;
    if (v16 || a3 < v23)
    {
      v14 = "truncated";
      if (!v16 || a3 <= v23)
        return png_chunk_benign_error(a1, v14);
      v27 = -1;
      if (png_decompress_chunk(a1, a3, v21 + 1, &v27) == 1)
      {
        v12 = *(Bytef **)(a1 + 1112);
      }
      else
      {
        v14 = *(const char **)(a1 + 360);
        if (v14)
          return png_chunk_benign_error(a1, v14);
      }
    }
    else
    {
      v27 = a3 - v23;
    }
    v26[0] = 0;
    v24 = v27;
    v12[v27 + v23] = 0;
    if (v16)
      v25 = 2;
    else
      v25 = 1;
    LODWORD(v26[0]) = v25;
    v26[5] = &v12[v17];
    v26[6] = &v12[v19];
    v26[1] = v12;
    v26[2] = &v12[v23];
    v26[3] = 0;
    v26[4] = v24;
    result = png_set_text_2(a1, a2, (uint64_t)v26, 1);
    if ((_DWORD)result)
    {
      v14 = "insufficient memory";
      return png_chunk_benign_error(a1, v14);
    }
  }
  return result;
}

void png_handle_unknown(uint64_t a1, uint64_t a2, size_t __size, int a4)
{
  int v4;
  int v7;
  int v8;
  int v9;
  void *v10;
  const char *v11;

  v4 = a4;
  if (*(_QWORD *)(a1 + 944))
  {
    if (!png_cache_unknown_chunk(a1, __size))
      goto LABEL_22;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 944))(a1, a1 + 1072);
    if (v7 < 0)
    {
      v11 = "error in user chunk";
LABEL_33:
      png_chunk_error(a1, v11);
    }
    if (v7)
      goto LABEL_25;
    if (v4 <= 1)
    {
      if (*(int *)(a1 + 952) <= 1)
      {
        png_chunk_warning(a1, "Saving unknown chunk:");
        png_app_warning(a1, "forcing save of an unhandled chunk; please call png_set_keep_unknown_chunks");
      }
      goto LABEL_17;
    }
  }
  else
  {
    if (!a4)
      v4 = *(_DWORD *)(a1 + 952);
    if (v4 == 3 || v4 == 2 && (*(_BYTE *)(a1 + 531) & 0x20) != 0)
    {
      if (!png_cache_unknown_chunk(a1, __size))
        goto LABEL_22;
    }
    else
    {
      png_crc_finish(a1, __size);
    }
  }
  if (v4 == 3)
    goto LABEL_18;
  if (v4 != 2)
    goto LABEL_22;
LABEL_17:
  if ((*(_BYTE *)(a1 + 531) & 0x20) == 0)
    goto LABEL_22;
LABEL_18:
  v8 = *(_DWORD *)(a1 + 1060);
  if (v8)
  {
    if (v8 != 1)
    {
      if (v8 == 2)
      {
        v9 = 1;
        *(_DWORD *)(a1 + 1060) = 1;
        png_chunk_benign_error(a1, "no space in chunk cache");
        goto LABEL_26;
      }
      *(_DWORD *)(a1 + 1060) = v8 - 1;
      goto LABEL_24;
    }
LABEL_22:
    v9 = 1;
    goto LABEL_26;
  }
LABEL_24:
  png_set_unknown_chunks(a1, a2, a1 + 1072, 1);
LABEL_25:
  v9 = 0;
LABEL_26:
  v10 = *(void **)(a1 + 1080);
  if (v10)
    png_free(a1, v10);
  *(_QWORD *)(a1 + 1080) = 0;
  if (v9 && (*(_BYTE *)(a1 + 531) & 0x20) == 0)
  {
    v11 = "unhandled critical chunk";
    goto LABEL_33;
  }
}

uint64_t png_cache_unknown_chunk(uint64_t a1, size_t __size)
{
  unsigned int v2;
  void *v4;
  unint64_t v5;
  Bytef *v6;
  int v7;

  v2 = __size;
  v4 = *(void **)(a1 + 1080);
  if (v4)
  {
    png_free(a1, v4);
    *(_QWORD *)(a1 + 1080) = 0;
  }
  v5 = *(_QWORD *)(a1 + 1064);
  if (v5 + 1 > 1 && v5 < v2)
  {
    v6 = 0;
    if (!v2)
    {
LABEL_11:
      if (v2)
        png_crc_read(a1, v6, v2);
      goto LABEL_14;
    }
LABEL_9:
    if (!v6)
    {
      png_crc_finish(a1, v2);
      png_chunk_benign_error(a1, "unknown chunk exceeds memory limits");
      return 0;
    }
    goto LABEL_11;
  }
  v7 = *(_DWORD *)(a1 + 528);
  *(_BYTE *)(a1 + 1072) = HIBYTE(v7);
  *(_BYTE *)(a1 + 1073) = BYTE2(v7);
  *(_BYTE *)(a1 + 1074) = BYTE1(v7);
  *(_BYTE *)(a1 + 1075) = v7;
  *(_BYTE *)(a1 + 1076) = 0;
  *(_QWORD *)(a1 + 1088) = v2;
  *(_BYTE *)(a1 + 1096) = *(_DWORD *)(a1 + 292);
  if (v2)
  {
    v6 = (Bytef *)png_malloc_warn((_QWORD *)a1, v2);
    *(_QWORD *)(a1 + 1080) = v6;
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 1080) = 0;
LABEL_14:
  png_crc_finish(a1, 0);
  return 1;
}

uint64_t png_combine_row(uint64_t result, char *__dst, int a3)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char *v15;
  char v16;
  unsigned int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  size_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  char v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int16 *v35;
  unint64_t v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  __int16 *v48;
  size_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  int *v59;
  size_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;

  v3 = *(unsigned __int8 *)(result + 615);
  if (!*(_BYTE *)(result + 615))
    png_error(result, "internal row logic error");
  v4 = __dst;
  v5 = *(_QWORD *)(result + 544);
  v6 = *(unsigned int *)(result + 496);
  v7 = *(unsigned __int8 *)(result + 605);
  v8 = *(_QWORD *)(result + 568);
  if (v8)
  {
    v9 = (v6 * (unint64_t)*(unsigned __int8 *)(result + 615) + 7) >> 3;
    if (v3 >= 8)
      v9 = v6 * (unint64_t)(v3 >> 3);
    if (v8 != v9)
      png_error(result, "internal row size calculation error");
  }
  if (!(_DWORD)v6)
    png_error(result, "internal row width error");
  v10 = (char *)(v5 + 1);
  v11 = v6 * (unint64_t)*(unsigned __int8 *)(result + 615);
  v12 = v3 >> 3;
  v13 = v11 & 7;
  if ((v11 & 7) != 0)
  {
    v14 = v12 * (unint64_t)v6;
    if (v3 <= 7)
      v14 = (v11 + 7) >> 3;
    v15 = &__dst[v14 - 1];
    v16 = *v15;
    v17 = 0xFFu >> v13;
    v18 = 255 << v13;
    if ((*(_BYTE *)(result + 302) & 1) != 0)
      v19 = v18;
    else
      v19 = v17;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v19 = 0;
  }
  if (!*(_BYTE *)(result + 604))
    goto LABEL_21;
  v20 = *(_DWORD *)(result + 300);
  if ((v20 & 2) == 0 || v7 > 5)
    goto LABEL_21;
  if (a3 != 1)
  {
    if (!a3)
    {
      v21 = v7 & 1;
      goto LABEL_29;
    }
LABEL_21:
    if (v3 <= 7)
      v22 = (v11 + 7) >> 3;
    else
      v22 = v12 * (unint64_t)v6;
    result = (uint64_t)memcpy(__dst, v10, v22);
LABEL_25:
    if (v15)
      *v15 = *v15 & ~v19 | v19 & v16;
    return result;
  }
  if ((v7 & 1) == 0)
    goto LABEL_21;
  v21 = 1;
LABEL_29:
  v23 = (v21 << (3 - ((v7 + 1) >> 1))) & 7;
  if (v6 <= v23)
    return result;
  if (v3 <= 7)
  {
    v24 = 8 / v3;
    v25 = 1;
    if ((_DWORD)v3 != 2)
      v25 = 2;
    if ((_DWORD)v3 == 1)
      v26 = 0;
    else
      v26 = v25;
    v27 = (char *)&png_combine_row_row_mask + 24 * v26 + 4 * v7 + 72;
    if (a3)
      v27 = (char *)&png_combine_row_display_mask + 12 * v26 + ((2 * (int)v7) & 0x1FCLL) + 36;
    v28 = (char *)&png_combine_row_display_mask + 12 * v26 + ((2 * (int)v7) & 0x1FCLL);
    if (!a3)
      v28 = (char *)&png_combine_row_row_mask + 24 * v26 + 4 * *(unsigned __int8 *)(result + 605);
    if ((v20 & 0x10000) == 0)
      v28 = v27;
    v29 = *(_DWORD *)v28;
    while (1)
    {
      if ((_BYTE)v29)
      {
        if (v29 == 255)
          v30 = *v10;
        else
          v30 = v29 & *v10 | *v4 & ~(_BYTE)v29;
        *v4 = v30;
      }
      v31 = v6 > v24;
      v6 -= v24;
      if (!v31)
        break;
      HIDWORD(v32) = v29;
      LODWORD(v32) = v29;
      v29 = v32 >> 8;
      ++v4;
      ++v10;
    }
    goto LABEL_25;
  }
  if ((v3 & 7) != 0)
    png_error(result, "invalid user transform pixel depth");
  v33 = v23 * v12;
  v34 = v6 * (unint64_t)v12 - v33;
  result = (uint64_t)&__dst[v33];
  v35 = (__int16 *)&v10[v33];
  v36 = ((_DWORD)v12 << ((6 - v7) >> 1));
  if (v34 < v36)
    LODWORD(v36) = v6 * v12 - v33;
  if (a3)
    v37 = v36;
  else
    v37 = v12;
  v38 = ((_DWORD)v12 << ((7 - v7) >> 1));
  switch((_DWORD)v37)
  {
    case 1:
      *(_BYTE *)result = *(_BYTE *)v35;
      if (v34 > v38)
      {
        v43 = v38 + v33;
        do
        {
          v34 -= v38;
          v4[v43] = v10[v43];
          v43 += v38;
        }
        while (v34 > v38);
      }
      break;
    case 2:
      while (1)
      {
        v42 = &v4[v33];
        *v42 = *(_BYTE *)(v5 + v33 + 1);
        v42[1] = *(_BYTE *)(v5 + v33 + 2);
        v31 = v34 > v38;
        v34 -= v38;
        if (!v31)
          break;
        v33 += v38;
        if (v34 <= 1)
        {
          v4[v33] = *(_BYTE *)(v5 + v33 + 1);
          return result;
        }
      }
      break;
    case 3:
      *(_BYTE *)result = *(_BYTE *)v35;
      *(_BYTE *)(result + 1) = *((_BYTE *)v35 + 1);
      *(_BYTE *)(result + 2) = *((_BYTE *)v35 + 2);
      if (v34 > v38)
      {
        v39 = v5 + 3;
        v40 = v38 + v33;
        do
        {
          v41 = &v4[v40];
          v34 -= v38;
          *v41 = *(_BYTE *)(v39 + v40 - 2);
          v41[1] = *(_BYTE *)(v39 + v40 - 1);
          v41[2] = *(_BYTE *)(v39 + v40);
          v40 += v38;
        }
        while (v34 > v38);
      }
      break;
    default:
      if (v37 > 0xF
        || (result & 1) != 0
        || (v35 & 1) != 0
        || (v37 & 1) != 0
        || (v38 & 1) != 0)
      {
        result = (uint64_t)memcpy((void *)result, v35, v37);
        if (v34 > v38)
        {
          v53 = v38 + v33;
          v54 = v6 * v12 - v33 - v38;
          do
          {
            v55 = v34 - v38;
            if (v34 - v38 >= v37)
              v37 = v37;
            else
              v37 = v54;
            result = (uint64_t)memcpy(&v4[v53], &v10[v53], v37);
            v53 += v38;
            v54 -= v38;
            v34 -= v38;
          }
          while (v55 > v38);
        }
      }
      else
      {
        v44 = v38 - v37;
        if ((((v35 | v38) | (result | v37)) & 3) != 0)
        {
          v45 = v44 >> 1;
          v46 = v45;
          while (1)
          {
            v47 = (_WORD *)result;
            v48 = v35;
            v49 = v37;
            do
            {
              v50 = *v48++;
              *v47++ = v50;
              v49 -= 2;
            }
            while (v49);
            v31 = v34 > v38;
            v34 -= v38;
            if (!v31)
              break;
            v35 = &v48[v46];
            result = (uint64_t)&v47[v46];
            if (v34 < v37)
            {
              v51 = 0;
              v52 = v45;
              do
              {
                *((_BYTE *)&v47[v52] + v51) = *((_BYTE *)&v48[v52] + v51);
                ++v51;
              }
              while (v34 != v51);
              return result;
            }
          }
        }
        else
        {
          v56 = v44 >> 2;
          v57 = v56;
          while (1)
          {
            v58 = (_DWORD *)result;
            v59 = (int *)v35;
            v60 = v37;
            do
            {
              v61 = *v59++;
              *v58++ = v61;
              v60 -= 4;
            }
            while (v60);
            v31 = v34 > v38;
            v34 -= v38;
            if (!v31)
              break;
            v35 = (__int16 *)&v59[v57];
            result = (uint64_t)&v58[v57];
            if (v34 < v37)
            {
              v62 = 0;
              v63 = v56;
              do
              {
                *((_BYTE *)&v58[v63] + v62) = *((_BYTE *)&v59[v63] + v62);
                ++v62;
              }
              while (v34 != v62);
              return result;
            }
          }
        }
      }
      break;
  }
  return result;
}

uint64_t png_do_read_interlace(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned __int8 *v30;
  _BYTE *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned __int8 *v42;
  _BYTE *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  size_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  int v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD v57[2];

  v57[1] = *MEMORY[0x24BDAC8D0];
  if (!result || !a2)
    return result;
  v4 = result;
  v5 = *(_DWORD *)result;
  v6 = png_do_read_interlace_png_pass_inc[a3];
  v7 = v6 * *(_DWORD *)result;
  v8 = *(unsigned __int8 *)(result + 19);
  switch((_DWORD)v8)
  {
    case 4:
      v36 = (4 * (*(_DWORD *)result & 1)) ^ 4;
      v37 = ~(4 * v7) & 4;
      if ((a4 & 0x10000) != 0)
      {
        v38 = 4;
      }
      else
      {
        v36 = 4 * (*(_DWORD *)result & 1);
        v37 = 4 * (v7 & 1);
        v38 = 0;
      }
      if ((a4 & 0x10000) != 0)
        v39 = 0;
      else
        v39 = 4;
      if ((a4 & 0x10000) != 0)
        v40 = -4;
      else
        v40 = 4;
      if (v5)
      {
        v41 = 0;
        v42 = (unsigned __int8 *)(a2 + ((v5 - 1) >> 1));
        v43 = (_BYTE *)(a2 + ((v7 - 1) >> 1));
        if (v6 <= 1)
          v6 = 1;
        result = 3855;
        do
        {
          v44 = (*v42 >> v36) & 0xF;
          v45 = v6;
          do
          {
            *v43 = (0xF0Fu >> (4 - v37)) & *v43 | (v44 << v37);
            v20 = v37 == v39;
            v46 = v37 == v39;
            v37 += v40;
            if (v20)
              v37 = v38;
            v43 -= v46;
            --v45;
          }
          while (v45);
          v20 = v36 == v39;
          v47 = v36 == v39;
          v36 += v40;
          if (v20)
            v36 = v38;
          v42 -= v47;
          ++v41;
        }
        while (v41 < *(_DWORD *)v4);
      }
      goto LABEL_79;
    case 2:
      v23 = (2 * (_BYTE)v5 + 6) & 6 ^ 6;
      v24 = 2 * v7 + 6;
      v25 = ~v24 & 6;
      if ((a4 & 0x10000) != 0)
      {
        v23 = (2 * (_BYTE)v5 + 6) & 6;
        v25 = v24 & 6;
        v26 = 6;
      }
      else
      {
        v26 = 0;
      }
      if ((a4 & 0x10000) != 0)
        v27 = 0;
      else
        v27 = 6;
      if ((a4 & 0x10000) != 0)
        v28 = -2;
      else
        v28 = 2;
      if (v5)
      {
        v29 = 0;
        v30 = (unsigned __int8 *)(a2 + ((v5 - 1) >> 2));
        v31 = (_BYTE *)(a2 + ((v7 - 1) >> 2));
        if (v6 <= 1)
          v6 = 1;
        result = 16191;
        do
        {
          v32 = (*v30 >> v23) & 3;
          v33 = v6;
          do
          {
            *v31 = (0x3F3Fu >> (6 - v25)) & *v31 | (v32 << v25);
            v20 = v25 == v27;
            v34 = v25 == v27;
            v25 += v28;
            if (v20)
              v25 = v26;
            v31 -= v34;
            --v33;
          }
          while (v33);
          v20 = v23 == v27;
          v35 = v23 == v27;
          v23 += v28;
          if (v20)
            v23 = v26;
          v30 -= v35;
          ++v29;
        }
        while (v29 < *(_DWORD *)v4);
      }
      goto LABEL_79;
    case 1:
      v9 = v5 - 1;
      v10 = (v5 - 1) & 7;
      v11 = -v7 & 7;
      result = (v7 - 1) & 7;
      if ((a4 & 0x10000) != 0)
        v11 = (v7 - 1) & 7;
      else
        v10 ^= 7u;
      if ((a4 & 0x10000) != 0)
        v12 = 7;
      else
        v12 = 0;
      if ((a4 & 0x10000) != 0)
        v13 = 0;
      else
        v13 = 7;
      if ((a4 & 0x10000) != 0)
        v14 = -1;
      else
        v14 = 1;
      if (v5)
      {
        v15 = 0;
        v16 = (unsigned __int8 *)(a2 + (v9 >> 3));
        v17 = (_BYTE *)(a2 + ((v7 - 1) >> 3));
        if (v6 <= 1)
          v6 = 1;
        result = 32639;
        do
        {
          v18 = (*v16 >> v10) & 1;
          v19 = v6;
          do
          {
            *v17 = (0x7F7Fu >> (7 - v11)) & *v17 | (v18 << v11);
            v20 = v11 == v13;
            v21 = v11 == v13;
            v11 += v14;
            if (v20)
              v11 = v12;
            v17 -= v21;
            --v19;
          }
          while (v19);
          v20 = v10 == v13;
          v22 = v10 == v13;
          v10 += v14;
          if (v20)
            v10 = v12;
          v16 -= v22;
          ++v15;
        }
        while (v15 < *(_DWORD *)v4);
      }
      goto LABEL_79;
  }
  if (v5)
  {
    v48 = 0;
    v49 = v8 >> 3;
    v50 = (char *)(a2 + (v8 >> 3) * (unint64_t)(v7 - 1));
    v51 = a2 + (v8 >> 3) * (unint64_t)(v5 - 1);
    if (v6 <= 1)
      v52 = 1;
    else
      v52 = png_do_read_interlace_png_pass_inc[a3];
    do
    {
      __memcpy_chk();
      v53 = v52;
      do
      {
        result = (uint64_t)memcpy(v50, v57, v49);
        v50 -= v49;
        --v53;
      }
      while (v53);
      v51 -= v49;
      ++v48;
    }
    while (v48 < *(_DWORD *)v4);
LABEL_79:
    LODWORD(v8) = *(unsigned __int8 *)(v4 + 19);
  }
  *(_DWORD *)v4 = v7;
  v54 = v8 >= 8;
  v55 = (v7 * (unint64_t)v8 + 7) >> 3;
  v56 = v7 * (unint64_t)(v8 >> 3);
  if (v54)
    v55 = v56;
  *(_QWORD *)(v4 + 8) = v55;
  return result;
}

uint64_t png_read_filter_row(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  uint64_t v9;
  unsigned int v10;
  void *v11;

  v5 = a5 - 1;
  if ((a5 - 1) <= 3)
  {
    v9 = result;
    if (!*(_QWORD *)(result + 1144))
    {
      v10 = (*(unsigned __int8 *)(result + 610) + 7) >> 3;
      *(_QWORD *)(result + 1144) = png_read_filter_row_sub;
      *(_QWORD *)(result + 1152) = png_read_filter_row_up;
      *(_QWORD *)(result + 1160) = png_read_filter_row_avg;
      v11 = png_read_filter_row_paeth_1byte_pixel;
      if (v10 != 1)
        v11 = png_read_filter_row_paeth_multibyte_pixel;
      *(_QWORD *)(result + 1168) = v11;
      png_init_filter_functions_neon((_QWORD *)result, v10);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8 * v5 + 1144))(a2, a3, a4);
  }
  return result;
}

uint64_t png_read_IDAT_data(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int v9;
  unsigned int chunk_header;
  unsigned int v11;
  size_t v12;
  Bytef *buffer;
  const char *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v5 = a3;
  else
    v5 = 0;
  *(_QWORD *)(a1 + 336) = a2;
  *(_DWORD *)(a1 + 344) = 0;
  while (1)
  {
    if (*(_DWORD *)(a1 + 320))
    {
      if (!a2)
        goto LABEL_19;
    }
    else
    {
      chunk_header = *(_DWORD *)(a1 + 576);
      while (!chunk_header)
      {
        png_crc_finish(a1, 0);
        chunk_header = png_read_chunk_header(a1);
        *(_DWORD *)(a1 + 576) = chunk_header;
        if (*(_DWORD *)(a1 + 528) != 1229209940)
          goto LABEL_33;
      }
      v11 = *(_DWORD *)(a1 + 1128);
      if (v11 >= chunk_header)
        v12 = chunk_header;
      else
        v12 = v11;
      buffer = (Bytef *)png_read_buffer(a1, v12, 0);
      png_crc_read(a1, buffer, v12);
      *(_DWORD *)(a1 + 576) -= v12;
      *(_QWORD *)(a1 + 312) = buffer;
      *(_DWORD *)(a1 + 320) = v12;
      if (!a2)
      {
LABEL_19:
        *(_QWORD *)(a1 + 336) = &v15;
        *(_DWORD *)(a1 + 344) = 1024;
        result = png_zlib_inflate(a1, 0);
        v9 = result;
        v5 = v5 - *(unsigned int *)(a1 + 344) + 1024;
        goto LABEL_20;
      }
    }
    v6 = v5 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : v5;
    v7 = v5 - v6;
    *(_DWORD *)(a1 + 344) = v6;
    result = png_zlib_inflate(a1, 0);
    v9 = result;
    v5 = v7 + *(unsigned int *)(a1 + 344);
LABEL_20:
    *(_DWORD *)(a1 + 344) = 0;
    if (v9)
      break;
    if (!v5)
      return result;
  }
  if (v9 != 1)
  {
    png_zstream_error(a1, v9);
    v14 = *(const char **)(a1 + 360);
    if (a2)
      png_chunk_error(a1, v14);
    return png_chunk_benign_error(a1, v14);
  }
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 292) |= 0x800000008uLL;
  if (*(_DWORD *)(a1 + 320) || *(_DWORD *)(a1 + 576))
    result = png_chunk_benign_error(a1, "Extra compressed data");
  if (v5)
  {
    if (a2)
LABEL_33:
      png_error(a1, "Not enough image data");
    v14 = "Too much image data";
    return png_chunk_benign_error(a1, v14);
  }
  return result;
}

uint64_t png_read_finish_IDAT(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  if ((*(_BYTE *)(result + 296) & 8) == 0)
  {
    result = png_read_IDAT_data(result, 0, 0);
    *(_QWORD *)(v1 + 336) = 0;
    v2 = *(_DWORD *)(v1 + 296);
    if ((v2 & 8) == 0)
    {
      *(_DWORD *)(v1 + 292) |= 8u;
      *(_DWORD *)(v1 + 296) = v2 | 8;
    }
  }
  if (*(_DWORD *)(v1 + 304) == 1229209940)
  {
    *(_QWORD *)(v1 + 312) = 0;
    *(_DWORD *)(v1 + 320) = 0;
    *(_DWORD *)(v1 + 304) = 0;
    return png_crc_finish(v1, *(_DWORD *)(v1 + 576));
  }
  return result;
}

void png_read_finish_row(uint64_t a1)
{
  unsigned int v1;
  unsigned __int8 v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *(_DWORD *)(a1 + 524) + 1;
  *(_DWORD *)(a1 + 524) = v1;
  if (v1 >= *(_DWORD *)(a1 + 504))
  {
    if (*(_BYTE *)(a1 + 604))
    {
      *(_DWORD *)(a1 + 524) = 0;
      bzero(*(void **)(a1 + 536), *(_QWORD *)(a1 + 512) + 1);
      v3 = *(_BYTE *)(a1 + 605);
      while (++v3 <= 6u)
      {
        v4 = png_read_start_row_png_pass_inc[v3];
        v5 = *(_DWORD *)(a1 + 496) + v4 + ~png_read_start_row_png_pass_start[v3];
        *(_DWORD *)(a1 + 520) = v5 / v4;
        if ((*(_BYTE *)(a1 + 300) & 2) == 0)
        {
          v6 = png_read_finish_row_png_pass_yinc[v3];
          v7 = *(_DWORD *)(a1 + 500) + v6 + ~png_read_finish_row_png_pass_ystart[v3];
          *(_DWORD *)(a1 + 504) = v7 / v6;
          if (v7 < v6 || v5 < v4)
            continue;
        }
        *(_BYTE *)(a1 + 605) = v3;
        return;
      }
      *(_BYTE *)(a1 + 605) = v3;
    }
    png_read_finish_IDAT(a1);
  }
}

uint64_t png_read_start_row(uint64_t a1)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  BOOL v20;
  int v21;
  int v22;
  const char *v23;

  png_init_read_transformations(a1);
  if (*(_BYTE *)(a1 + 604))
  {
    v2 = *(_DWORD *)(a1 + 300);
    v3 = *(_DWORD *)(a1 + 500);
    if ((v2 & 2) == 0)
      v3 = (v3 + 7) >> 3;
    *(_DWORD *)(a1 + 504) = v3;
    v4 = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(a1 + 520) = (v4
                           + png_read_start_row_png_pass_inc[*(unsigned __int8 *)(a1 + 605)]
                           + ~png_read_start_row_png_pass_start[*(unsigned __int8 *)(a1 + 605)])
                          / png_read_start_row_png_pass_inc[*(unsigned __int8 *)(a1 + 605)];
  }
  else
  {
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a1 + 500);
    v4 = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(a1 + 520) = v4;
    v2 = *(_DWORD *)(a1 + 300);
  }
  v5 = *(unsigned __int8 *)(a1 + 610);
  if ((v2 & 4) != 0 && *(unsigned __int8 *)(a1 + 608) < 8u)
    v5 = 8;
  if ((v2 & 0x1000) == 0)
  {
    if ((v2 & 0x200) != 0)
      *(_DWORD *)(a1 + 300) = v2 & 0xFFFFFDFF;
    goto LABEL_25;
  }
  v6 = *(unsigned __int8 *)(a1 + 607);
  if (!*(_BYTE *)(a1 + 607))
  {
    if (v5 <= 8)
      v5 = 8;
    v5 <<= *(_WORD *)(a1 + 600) != 0;
    goto LABEL_23;
  }
  if (v6 != 2)
  {
    if (v6 == 3)
    {
      if (*(_WORD *)(a1 + 600))
        v5 = 32;
      else
        v5 = 24;
      if ((v2 & 0x200) == 0)
        goto LABEL_25;
LABEL_24:
      v5 <<= *(unsigned __int8 *)(a1 + 608) < 0x10u;
      goto LABEL_25;
    }
LABEL_23:
    if ((v2 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (*(_WORD *)(a1 + 600))
    v5 = (87384 * v5) >> 16;
  if ((v2 & 0x200) != 0)
    goto LABEL_24;
LABEL_25:
  v7 = *(_DWORD *)(a1 + 300);
  if ((v7 & 0x8000) == 0)
  {
    if ((v7 & 0x4000) != 0)
      goto LABEL_37;
LABEL_46:
    if ((v7 & 0x100000) == 0)
      goto LABEL_49;
    goto LABEL_47;
  }
  if (v5 <= 0x20)
    v8 = 32;
  else
    v8 = 64;
  if (v5 >= 9)
    v9 = 32;
  else
    v9 = 16;
  if (!*(_BYTE *)(a1 + 607))
    v5 = v9;
  if (*(unsigned __int8 *)(a1 + 607) - 2 < 2)
    v5 = v8;
  if ((v7 & 0x4000) == 0)
    goto LABEL_46;
LABEL_37:
  if ((v7 & 0x8000) != 0
    || ((*(_WORD *)(a1 + 600) != 0) & (v7 >> 12)) != 0
    || (v10 = *(unsigned __int8 *)(a1 + 607), v10 == 4))
  {
    if (v5 >= 0x11)
      v5 = 64;
    else
      v5 = 32;
    if ((v7 & 0x100000) == 0)
      goto LABEL_49;
  }
  else
  {
    v20 = v10 == 6;
    if (v10 == 6)
      v21 = 64;
    else
      v21 = 48;
    if (v20)
      v22 = 32;
    else
      v22 = 24;
    if (v5 <= 8)
      v5 = v22;
    else
      v5 = v21;
    if ((v7 & 0x100000) == 0)
      goto LABEL_49;
  }
LABEL_47:
  if (*(unsigned __int8 *)(a1 + 289) * *(unsigned __int8 *)(a1 + 288) > v5)
    v5 = *(unsigned __int8 *)(a1 + 289) * *(unsigned __int8 *)(a1 + 288);
LABEL_49:
  *(_BYTE *)(a1 + 614) = v5;
  *(_BYTE *)(a1 + 615) = 0;
  v11 = (v4 + 7) & 0xFFFFFFF8;
  v12 = v11 * (unint64_t)(v5 >> 3);
  v13 = (v11 * (unint64_t)v5) >> 3;
  if (v5 > 7)
    v13 = v12;
  v14 = v13 + ((v5 + 7) >> 3) + 49;
  if (v14 > *(_QWORD *)(a1 + 1104))
  {
    png_free(a1, *(void **)(a1 + 1016));
    png_free(a1, *(void **)(a1 + 1136));
    if (*(_BYTE *)(a1 + 604))
      v15 = png_calloc((_QWORD *)a1, v14);
    else
      v15 = png_malloc((_QWORD *)a1, v14);
    *(_QWORD *)(a1 + 1016) = v15;
    v16 = png_malloc((_QWORD *)a1, v14);
    *(_QWORD *)(a1 + 1136) = v16;
    *(_QWORD *)(a1 + 544) = ((*(_QWORD *)(a1 + 1016) + 32) & 0xFFFFFFFFFFFFFFF0) - 1;
    *(_QWORD *)(a1 + 536) = ((unint64_t)(v16 + 4) & 0xFFFFFFFFFFFFFFF0) - 1;
    *(_QWORD *)(a1 + 1104) = v14;
  }
  v17 = *(_QWORD *)(a1 + 512);
  if (v17 == -1)
  {
    v23 = "Row has too many bytes to allocate in memory";
    goto LABEL_78;
  }
  bzero(*(void **)(a1 + 536), v17 + 1);
  v18 = *(void **)(a1 + 1112);
  if (v18)
  {
    *(_QWORD *)(a1 + 1112) = 0;
    *(_QWORD *)(a1 + 1120) = 0;
    png_free(a1, v18);
  }
  result = png_inflate_claim(a1, 1229209940);
  if ((_DWORD)result)
  {
    v23 = *(const char **)(a1 + 360);
LABEL_78:
    png_error(a1, v23);
  }
  *(_DWORD *)(a1 + 296) |= 0x40u;
  return result;
}

uint64_t png_inflate(uint64_t a1, int a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 304) == a2)
  {
    v10 = *a6;
    v11 = *a4;
    *(_QWORD *)(a1 + 312) = a3;
    *(_DWORD *)(a1 + 320) = 0;
    *(_DWORD *)(a1 + 344) = 0;
    if (a5)
      *(_QWORD *)(a1 + 336) = a5;
    do
    {
      *(_DWORD *)(a1 + 320) += v11;
      if (a5)
      {
        LODWORD(v12) = -1;
      }
      else
      {
        *(_QWORD *)(a1 + 336) = &v19;
        LODWORD(v12) = 1024;
      }
      v13 = v10 + *(unsigned int *)(a1 + 344);
      if (v13 >= v12)
        v12 = v12;
      else
        v12 = v13;
      *(_DWORD *)(a1 + 344) = v12;
      v10 = v13 - v12;
      v14 = png_zlib_inflate(a1, 4 * (v13 == v12));
      v11 = 0;
    }
    while (!(_DWORD)v14);
    v15 = v14;
    if (!a5)
      *(_QWORD *)(a1 + 336) = 0;
    v16 = *(_DWORD *)(a1 + 320);
    v17 = v10 + *(unsigned int *)(a1 + 344);
    if (v17)
      *a6 -= v17;
    if (v16)
      *a4 -= v16;
    png_zstream_error(a1, v14);
  }
  else
  {
    *(_QWORD *)(a1 + 360) = "zstream unclaimed";
    return 4294967294;
  }
  return v15;
}

uint64_t png_read_filter_row_sub(uint64_t result, _BYTE *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 8);
  v3 = ((unint64_t)*(unsigned __int8 *)(result + 19) + 7) >> 3;
  if (v3 < v2)
  {
    do
    {
      a2[v3] += *a2;
      ++a2;
      --v2;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t png_read_filter_row_up(uint64_t result, _BYTE *a2, char *a3)
{
  uint64_t i;
  char v4;

  for (i = *(_QWORD *)(result + 8); i; --i)
  {
    v4 = *a3++;
    *a2++ += v4;
  }
  return result;
}

uint64_t png_read_filter_row_avg(uint64_t result, _BYTE *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = *(unsigned __int8 *)(result + 19);
  v4 = (unint64_t)(v3 + 7) >> 3;
  v5 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(result + 19))
  {
    if (v4 <= 1)
      v6 = 1;
    else
      v6 = (unint64_t)(v3 + 7) >> 3;
    do
    {
      v7 = *a3++;
      *a2++ += v7 >> 1;
      --v6;
    }
    while (v6);
  }
  if (v5 != v4)
  {
    v8 = -(uint64_t)v4;
    v9 = -v5;
    do
    {
      v10 = *a3++;
      *a2 += (a2[v8] + v10) >> 1;
      ++a2;
      ++v9;
    }
    while (v8 != v9);
  }
  return result;
}

uint64_t png_read_filter_row_paeth_1byte_pixel(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  int v4;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v3 = *(_QWORD *)(result + 8);
  v4 = *a3;
  v5 = *a2 + v4;
  *a2 = v5;
  if (v3 >= 2)
  {
    v6 = &a2[v3];
    v7 = a2 + 1;
    v8 = a3 + 1;
    do
    {
      v10 = *v8++;
      v9 = v10;
      v11 = v10 - v4;
      v12 = v5 - v4;
      if (v10 - v4 >= 0)
        v13 = v11;
      else
        v13 = -v11;
      if (v12 >= 0)
        v14 = v5 - v4;
      else
        v14 = v4 - v5;
      v15 = v11 + v12;
      if (v15 < 0)
        v15 = -v15;
      if (v14 >= v13)
      {
        v16 = v13;
      }
      else
      {
        v5 = v9;
        v16 = v14;
      }
      if (v15 >= v16)
        LOBYTE(v4) = v5;
      v5 = v4 + *v7;
      *v7++ = v5;
      v4 = v9;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t png_read_filter_row_paeth_multibyte_pixel(uint64_t result, _BYTE *a2, char *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  int v13;
  char v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;

  v3 = *(unsigned __int8 *)(result + 19);
  v4 = (unint64_t)(v3 + 7) >> 3;
  if (*(_BYTE *)(result + 19))
  {
    v5 = (unint64_t)&a2[(unint64_t)(v3 + 7) >> 3];
    if (&a2[v4] <= a2 + 1)
      v6 = a2 + 1;
    else
      v6 = &a2[v4];
    v7 = a2;
    do
    {
      v8 = *a3++;
      *v7++ += v8;
    }
    while ((unint64_t)v7 < v5);
  }
  else
  {
    v6 = a2;
    v7 = a2;
  }
  v9 = *(_QWORD *)(result + 8);
  if (v7 < &a2[v9])
  {
    v10 = -(uint64_t)v4;
    v11 = (_BYTE *)(&a2[v9] - v6);
    do
    {
      v12 = a3[v10];
      v13 = v7[v10];
      v15 = *a3++;
      v14 = v15;
      v16 = v15 - v12;
      v17 = v13 - v12;
      if (v15 - v12 >= 0)
        v18 = v16;
      else
        v18 = -v16;
      if (v17 >= 0)
        v19 = v13 - v12;
      else
        v19 = v12 - v13;
      v20 = v16 + v17;
      if (v20 < 0)
        v20 = -v20;
      if (v19 >= v18)
      {
        v21 = v18;
      }
      else
      {
        LOBYTE(v13) = v14;
        v21 = v19;
      }
      if (v20 >= v21)
        LOBYTE(v12) = v13;
      *v7++ += v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t png_set_bKGD(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2)
  {
    if (a3)
    {
      *(_QWORD *)(a2 + 202) = *(_QWORD *)a3;
      *(_WORD *)(a2 + 210) = *(_WORD *)(a3 + 8);
      *(_DWORD *)(a2 + 8) |= 0x20u;
    }
  }
  return result;
}

_QWORD *png_set_eXIf_1(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v7;
  void *v8;
  uint64_t v9;

  if (result && a2)
  {
    v7 = result;
    v8 = *(void **)(a2 + 240);
    if (v8)
    {
      png_free((uint64_t)result, v8);
      *(_QWORD *)(a2 + 240) = 0;
    }
    *(_DWORD *)(a2 + 236) = a3;
    result = png_malloc_warn(v7, a3);
    *(_QWORD *)(a2 + 240) = result;
    if (result)
    {
      *(_DWORD *)(a2 + 300) |= 0x8000u;
      if (*(int *)(a2 + 236) >= 1)
      {
        v9 = 0;
        do
        {
          *(_BYTE *)(*(_QWORD *)(a2 + 240) + v9) = *(_BYTE *)(a4 + v9);
          ++v9;
        }
        while (v9 < *(int *)(a2 + 236));
      }
      *(_DWORD *)(a2 + 8) |= 0x10000u;
    }
    else
    {
      return (_QWORD *)png_warning((uint64_t)v7, "Insufficient memory for eXIf chunk data");
    }
  }
  return result;
}

_QWORD *png_set_hIST(_QWORD *result, uint64_t a2, const void *a3)
{
  _QWORD *v4;
  char *v5;

  if (result && a2)
  {
    v4 = result;
    if (*(unsigned __int16 *)(a2 + 32) - 257 <= 0xFFFFFEFF)
    {
      v5 = "Invalid palette size, hIST allocation skipped";
      return (_QWORD *)png_warning((uint64_t)v4, v5);
    }
    png_free_data((uint64_t)result, a2, 8u, 0);
    result = png_malloc_warn(v4, 0x200uLL);
    *(_QWORD *)(a2 + 256) = result;
    if (!result)
    {
      v5 = "Insufficient memory for hIST chunk data";
      return (_QWORD *)png_warning((uint64_t)v4, v5);
    }
    *(_DWORD *)(a2 + 300) |= 8u;
    if (*(_WORD *)(a2 + 32))
      result = memcpy(result, a3, 2 * *(unsigned __int16 *)(a2 + 32));
    *(_DWORD *)(a2 + 8) |= 0x40u;
  }
  return result;
}

uint64_t png_set_IHDR(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, unsigned __int8 a9)
{
  int v11;
  char v12;
  unsigned __int8 v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;

  if (!result || !a2)
    return result;
  *(_DWORD *)a2 = a3;
  *(_DWORD *)(a2 + 4) = a4;
  *(_BYTE *)(a2 + 36) = a5;
  *(_BYTE *)(a2 + 37) = a6;
  *(_BYTE *)(a2 + 38) = a8;
  *(_BYTE *)(a2 + 39) = a9;
  *(_BYTE *)(a2 + 40) = a7;
  result = png_check_IHDR(result, a3, a4, a5, a6, a7, a8, a9);
  v11 = *(unsigned __int8 *)(a2 + 37);
  if (v11 == 3)
  {
    v12 = 1;
LABEL_7:
    *(_BYTE *)(a2 + 41) = v12;
    goto LABEL_8;
  }
  v12 = v11 & 2 | 1;
  *(_BYTE *)(a2 + 41) = v12;
  if ((v11 & 4) != 0)
  {
    v12 = (v11 & 2) + 2;
    goto LABEL_7;
  }
LABEL_8:
  v13 = *(_BYTE *)(a2 + 36) * v12;
  *(_BYTE *)(a2 + 42) = v13;
  v14 = v13 >= 8u;
  v15 = (v13 * (unint64_t)a3 + 7) >> 3;
  v16 = a3 * (unint64_t)(v13 >> 3);
  if (!v14)
    v16 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

uint64_t png_set_oFFs(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  if (result)
  {
    if (a2)
    {
      *(_DWORD *)(a2 + 212) = a3;
      *(_DWORD *)(a2 + 216) = a4;
      *(_BYTE *)(a2 + 220) = a5;
      *(_DWORD *)(a2 + 8) |= 0x100u;
    }
  }
  return result;
}

void png_set_pCAL(_QWORD *a1, uint64_t a2, char *__s, int a4, int a5, unsigned int a6, int a7, const char *a8, const char **a9)
{
  const char **v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  size_t v21;
  _QWORD *v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  void *v29;
  char *v30;
  int v31;
  size_t v32;

  if (!a1)
    return;
  if (!a2)
    return;
  if (!__s)
    return;
  if (!a8)
    return;
  v17 = a9;
  if (a7 >= 1 && !a9)
    return;
  v18 = strlen(__s);
  if (a6 >= 4)
  {
    v19 = "Invalid pCAL equation type";
LABEL_27:
    png_chunk_report((uint64_t)a1, v19, 1);
    return;
  }
  if (a7 > 0xFF)
  {
    v19 = "Invalid pCAL parameter count";
    goto LABEL_27;
  }
  v32 = v18;
  v31 = a5;
  if (a7)
  {
    v20 = a7;
    while (*v17)
    {
      v21 = strlen(*v17);
      if (!png_check_fp_string((uint64_t)*v17, v21))
        break;
      ++v17;
      if (!--v20)
        goto LABEL_17;
    }
    v19 = "Invalid format for pCAL parameter";
    goto LABEL_27;
  }
LABEL_17:
  v22 = png_malloc_warn(a1, v32 + 1);
  *(_QWORD *)(a2 + 264) = v22;
  if (!v22)
  {
    v19 = "Insufficient memory for pCAL purpose";
    goto LABEL_27;
  }
  memcpy(v22, __s, v32 + 1);
  *(_DWORD *)(a2 + 272) = a4;
  *(_DWORD *)(a2 + 276) = v31;
  *(_BYTE *)(a2 + 296) = a6;
  *(_BYTE *)(a2 + 297) = a7;
  v23 = strlen(a8) + 1;
  v24 = png_malloc_warn(a1, v23);
  *(_QWORD *)(a2 + 280) = v24;
  if (v24)
  {
    memcpy(v24, a8, v23);
    v25 = png_malloc_warn(a1, 8 * (a7 + 1));
    *(_QWORD *)(a2 + 288) = v25;
    if (v25)
    {
      bzero(v25, 8 * (a7 + 1));
      if (a7 < 1)
      {
LABEL_24:
        *(_DWORD *)(a2 + 8) |= 0x400u;
        *(_DWORD *)(a2 + 300) |= 0x80u;
        return;
      }
      v26 = 0;
      v27 = 8 * a7;
      while (1)
      {
        v28 = strlen(a9[v26 / 8]) + 1;
        *(_QWORD *)(*(_QWORD *)(a2 + 288) + v26) = png_malloc_warn(a1, v28);
        v29 = *(void **)(*(_QWORD *)(a2 + 288) + v26);
        if (!v29)
          break;
        memcpy(v29, a9[v26 / 8], v28);
        v26 += 8;
        if (v27 == v26)
          goto LABEL_24;
      }
      v30 = "Insufficient memory for pCAL parameter";
    }
    else
    {
      v30 = "Insufficient memory for pCAL params";
    }
  }
  else
  {
    v30 = "Insufficient memory for pCAL units";
  }
  png_warning((uint64_t)a1, v30);
}

_QWORD *png_set_sCAL_s(_QWORD *result, uint64_t a2, int a3, char *__s, const char *a5)
{
  char v6;
  _QWORD *v7;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;

  if (result && a2)
  {
    v6 = a3;
    v7 = result;
    if ((a3 - 3) <= 0xFFFFFFFD)
    {
      v16 = "Invalid sCAL unit";
    }
    else if (__s
           && (v10 = strlen(__s)) != 0
           && *__s != 45
           && (v11 = v10, png_check_fp_string((uint64_t)__s, v10)))
    {
      if (a5)
      {
        v12 = strlen(a5);
        if (v12)
        {
          if (*a5 != 45)
          {
            v13 = v12;
            if (png_check_fp_string((uint64_t)a5, v12))
            {
              *(_BYTE *)(a2 + 332) = v6;
              v14 = png_malloc_warn(v7, v11 + 1);
              *(_QWORD *)(a2 + 336) = v14;
              if (v14)
              {
                memcpy(v14, __s, v11 + 1);
                v15 = png_malloc_warn(v7, v13 + 1);
                *(_QWORD *)(a2 + 344) = v15;
                if (v15)
                {
                  result = memcpy(v15, a5, v13 + 1);
                  *(_DWORD *)(a2 + 8) |= 0x4000u;
                  *(_DWORD *)(a2 + 300) |= 0x100u;
                  return result;
                }
                png_free((uint64_t)v7, *(void **)(a2 + 336));
                *(_QWORD *)(a2 + 336) = 0;
              }
              return (_QWORD *)png_warning((uint64_t)v7, "Memory allocation failed while processing sCAL");
            }
          }
        }
      }
      v16 = "Invalid sCAL height";
    }
    else
    {
      v16 = "Invalid sCAL width";
    }
    png_error((uint64_t)v7, v16);
  }
  return result;
}

uint64_t png_set_pHYs(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  if (result)
  {
    if (a2)
    {
      *(_DWORD *)(a2 + 224) = a3;
      *(_DWORD *)(a2 + 228) = a4;
      *(_BYTE *)(a2 + 232) = a5;
      *(_DWORD *)(a2 + 8) |= 0x80u;
    }
  }
  return result;
}

_BYTE *png_set_PLTE(_BYTE *result, uint64_t a2, const void *a3, unsigned int a4)
{
  _BYTE *v7;
  const char *v8;
  _BYTE *v9;

  if (result && a2)
  {
    v7 = result;
    if (*(_BYTE *)(a2 + 37) == 3)
    {
      if ((a4 & 0x80000000) != 0 || 1 << *(_BYTE *)(a2 + 36) < (int)a4)
      {
        v8 = "Invalid palette length";
        goto LABEL_18;
      }
    }
    else if (a4 > 0x100)
    {
      return (_BYTE *)png_warning((uint64_t)result, "Invalid palette length");
    }
    if (!a3 && a4 || !a4 && (result[984] & 1) == 0)
    {
      v8 = "Invalid palette";
LABEL_18:
      png_error((uint64_t)result, v8);
    }
    png_free_data((uint64_t)result, a2, 0x1000u, 0);
    result = png_calloc(v7, 0x300uLL);
    v9 = result;
    *((_QWORD *)v7 + 73) = result;
    if (a4)
      result = memcpy(result, a3, 3 * a4);
    *(_QWORD *)(a2 + 24) = v9;
    *((_WORD *)v7 + 296) = a4;
    *(_WORD *)(a2 + 32) = a4;
    *(_DWORD *)(a2 + 300) |= 0x1000u;
    *(_DWORD *)(a2 + 8) |= 8u;
  }
  return result;
}

uint64_t png_set_sBIT(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2)
  {
    if (a3)
    {
      *(_DWORD *)(a2 + 176) = *(_DWORD *)a3;
      *(_BYTE *)(a2 + 180) = *(_BYTE *)(a3 + 4);
      *(_DWORD *)(a2 + 8) |= 2u;
    }
  }
  return result;
}

uint64_t png_set_text_2(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  const char **v14;
  const char *v15;
  int v16;
  uint64_t v17;
  int v18;
  size_t v19;
  const char *v20;
  size_t v21;
  size_t v22;
  const char *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void **v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  size_t __n;

  v4 = 0;
  if (!a3)
    return v4;
  v5 = a1;
  if (!a1)
    return v4;
  v6 = a2;
  if (!a2 || a4 < 1)
    return v4;
  v9 = *(_DWORD *)(a2 + 148);
  if ((int)(*(_DWORD *)(a2 + 152) - v9) < a4)
  {
    if ((v9 ^ 0x7FFFFFFF) < a4
      || ((int)(v9 + a4) >= 2147483639 ? (v10 = 0x7FFFFFFF) : (v10 = ((v9 + a4) & 0xFFFFFFF8) + 8),
          (v11 = png_realloc_array(a1, *(const void **)(a2 + 160), v9, v10 - v9, 0x38uLL)) == 0))
    {
      v41 = "too many text chunks";
      v4 = 1;
      v42 = v5;
      goto LABEL_46;
    }
    v12 = v11;
    png_free(v5, *(void **)(v6 + 160));
    *(_QWORD *)(v6 + 160) = v12;
    *(_DWORD *)(v6 + 300) |= 0x4000u;
    *(_DWORD *)(v6 + 152) = v10;
  }
  v13 = a4;
  v14 = (const char **)(a3 + 48);
  v46 = v5;
  v44 = v6;
  while (1)
  {
    v15 = *(v14 - 5);
    if (v15)
      break;
LABEL_42:
    v14 += 7;
    if (!--v13)
      return 0;
  }
  v16 = *((_DWORD *)v14 - 12);
  if ((v16 - 3) <= 0xFFFFFFFB)
  {
    png_chunk_report(v5, "text compression mode is out of range", 1);
    goto LABEL_42;
  }
  v17 = *(_QWORD *)(v6 + 160);
  v18 = *(_DWORD *)(v6 + 148);
  v19 = strlen(v15);
  if (v16 < 1)
  {
    v21 = 0;
LABEL_23:
    v22 = 0;
    goto LABEL_24;
  }
  v20 = *(v14 - 1);
  if (v20)
    v21 = strlen(v20);
  else
    v21 = 0;
  if (!*v14)
    goto LABEL_23;
  v22 = strlen(*v14);
LABEL_24:
  v23 = *(v14 - 4);
  if (v23 && *v23)
  {
    v24 = v22;
    v25 = strlen(v23);
    v22 = v24;
  }
  else
  {
    v25 = 0;
    if (v16 < 1)
      v16 = -1;
    else
      v16 = 1;
  }
  v45 = v17 + 56 * v18;
  *(_DWORD *)v45 = v16;
  v26 = v22;
  __n = v25;
  v27 = png_malloc_base(v46, v19 + v21 + v22 + v25 + 4);
  *(_QWORD *)(v45 + 8) = v27;
  v28 = (_QWORD *)(v45 + 8);
  if (v27)
  {
    v29 = v17;
    memcpy(v27, *(v14 - 5), v19);
    *(_BYTE *)(*v28 + v19) = 0;
    if (*((int *)v14 - 12) < 1)
    {
      v31 = v18;
      v34 = v29 + 56 * v18;
      *(_QWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      v26 = v19;
    }
    else
    {
      v30 = (void *)(*v28 + v19 + 1);
      v31 = v18;
      v32 = v29 + 56 * v18;
      *(_QWORD *)(v32 + 40) = v30;
      memcpy(v30, *(v14 - 1), v21);
      *(_BYTE *)(*(_QWORD *)(v32 + 40) + v21) = 0;
      v33 = (void *)(*(_QWORD *)(v32 + 40) + v21 + 1);
      *(_QWORD *)(v32 + 48) = v33;
      v28 = (_QWORD *)(v32 + 48);
      memcpy(v33, *v14, v26);
      *(_BYTE *)(*v28 + v26) = 0;
    }
    v6 = v44;
    v35 = (void *)(*v28 + v26 + 1);
    v36 = v29 + 56 * v31;
    *(_QWORD *)(v36 + 16) = v35;
    v37 = (void **)(v36 + 16);
    v38 = __n;
    if (__n)
    {
      memcpy(v35, *(v14 - 4), __n);
      v38 = __n;
      v35 = *v37;
    }
    v5 = v46;
    *((_BYTE *)v35 + v38) = 0;
    if (*(int *)v45 <= 0)
      v39 = v38;
    else
      v39 = 0;
    if (*(int *)v45 <= 0)
      v38 = 0;
    v40 = v29 + 56 * v31;
    *(_QWORD *)(v40 + 24) = v39;
    *(_QWORD *)(v40 + 32) = v38;
    ++*(_DWORD *)(v44 + 148);
    goto LABEL_42;
  }
  v41 = "text chunk: out of memory";
  v4 = 1;
  v42 = v46;
LABEL_46:
  png_chunk_report(v42, v41, 1);
  return v4;
}

uint64_t png_set_tIME(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && a2 && a3 && (*(_BYTE *)(result + 293) & 2) == 0)
  {
    if (*(unsigned __int8 *)(a3 + 2) - 13 >= 0xFFFFFFF4
      && *(unsigned __int8 *)(a3 + 3) - 32 >= 0xFFFFFFE1
      && *(unsigned __int8 *)(a3 + 4) <= 0x17u
      && *(unsigned __int8 *)(a3 + 5) <= 0x3Bu
      && *(unsigned __int8 *)(a3 + 6) < 0x3Du)
    {
      *(_QWORD *)(a2 + 168) = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) |= 0x200u;
    }
    else
    {
      return png_warning(result, "Ignoring invalid time value");
    }
  }
  return result;
}

void png_set_tRNS(_QWORD *a1, uint64_t a2, const void *a3, unsigned int a4, uint64_t a5)
{
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __int16 v14;

  if (a1 && a2)
  {
    if (a3)
    {
      png_free_data((uint64_t)a1, a2, 0x2000u, 0);
      if (a4 - 1 >= 0x100)
      {
        v10 = *(_QWORD **)(a2 + 184);
      }
      else
      {
        v10 = png_malloc(a1, 0x100uLL);
        *(_QWORD *)(a2 + 184) = v10;
        memcpy(v10, a3, a4);
      }
      a1[92] = v10;
    }
    if (a5)
    {
      v11 = *(unsigned __int8 *)(a2 + 36);
      if (v11 <= 0xF)
      {
        v12 = ~(-1 << v11);
        if (*(_BYTE *)(a2 + 37) == 2)
        {
          if (*(unsigned __int16 *)(a5 + 2) > v12 || *(unsigned __int16 *)(a5 + 4) > v12)
            goto LABEL_19;
          v13 = *(unsigned __int16 *)(a5 + 6);
        }
        else
        {
          if (*(_BYTE *)(a2 + 37))
            goto LABEL_20;
          v13 = *(unsigned __int16 *)(a5 + 8);
        }
        if (v13 > v12)
LABEL_19:
          png_warning((uint64_t)a1, "tRNS chunk has out-of-range samples for bit_depth");
      }
LABEL_20:
      *(_QWORD *)(a2 + 192) = *(_QWORD *)a5;
      *(_WORD *)(a2 + 200) = *(_WORD *)(a5 + 8);
      if (a4 <= 1)
        v14 = 1;
      else
        v14 = a4;
      *(_WORD *)(a2 + 34) = v14;
      goto LABEL_24;
    }
    *(_WORD *)(a2 + 34) = a4;
    if (a4)
    {
LABEL_24:
      *(_DWORD *)(a2 + 8) |= 0x10u;
      *(_DWORD *)(a2 + 300) |= 0x2000u;
    }
  }
}

void png_set_sPLT(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4)
{
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  const char *v11;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char *v16;

  if (!a3)
    return;
  if (!a1)
    return;
  if (!a2)
    return;
  v6 = a4;
  if (a4 < 1)
    return;
  v7 = a3;
  v8 = png_realloc_array(a1, *(const void **)(a2 + 320), *(_DWORD *)(a2 + 328), a4, 0x20uLL);
  if (!v8)
  {
    v16 = "too many sPLT chunks";
    goto LABEL_19;
  }
  v9 = v8;
  png_free(a1, *(void **)(a2 + 320));
  *(_QWORD *)(a2 + 320) = v9;
  *(_DWORD *)(a2 + 300) |= 0x20u;
  v10 = &v9[32 * *(int *)(a2 + 328)];
  while (1)
  {
    v11 = *(const char **)v7;
    if (!*(_QWORD *)v7 || !*(_QWORD *)(v7 + 16))
    {
      png_app_error(a1, "png_set_sPLT: invalid sPLT");
      goto LABEL_13;
    }
    v10[8] = *(_BYTE *)(v7 + 8);
    v12 = strlen(v11) + 1;
    v13 = png_malloc_base(a1, v12);
    *(_QWORD *)v10 = v13;
    if (!v13)
      goto LABEL_17;
    memcpy(v13, *(const void **)v7, v12);
    v14 = png_malloc_array(a1, *(_DWORD *)(v7 + 24), 0xAuLL);
    *((_QWORD *)v10 + 2) = v14;
    if (!v14)
      break;
    v15 = *(unsigned int *)(v7 + 24);
    *((_DWORD *)v10 + 6) = v15;
    memcpy(v14, *(const void **)(v7 + 16), 10 * v15);
    *(_DWORD *)(a2 + 8) |= 0x2000u;
    ++*(_DWORD *)(a2 + 328);
    v10 += 32;
    v7 += 32;
LABEL_13:
    if (!--v6)
      return;
  }
  png_free(a1, *(void **)v10);
  *(_QWORD *)v10 = 0;
LABEL_17:
  if (v6 >= 1)
  {
    v16 = "sPLT out of memory";
LABEL_19:
    png_chunk_report(a1, v16, 1);
  }
}

uint64_t png_set_unknown_chunks(uint64_t result, uint64_t a2, uint64_t a3, signed int a4)
{
  uint64_t v4;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  uint64_t i;
  void *v13;
  size_t v14;

  if (a3)
  {
    v4 = result;
    if (result)
    {
      if (a2 && a4 >= 1)
      {
        v8 = png_realloc_array(result, *(const void **)(a2 + 304), *(_DWORD *)(a2 + 312), a4, 0x20uLL);
        if (v8)
        {
          v9 = v8;
          png_free(v4, *(void **)(a2 + 304));
          *(_QWORD *)(a2 + 304) = v9;
          *(_DWORD *)(a2 + 300) |= 0x200u;
          v10 = &v9[32 * *(int *)(a2 + 312)];
          v11 = a4 + 1;
          for (i = a3 + 16; ; i += 32)
          {
            *(_DWORD *)v10 = *(_DWORD *)(i - 16);
            v10[4] = 0;
            result = check_location(v4, *(_BYTE *)(i + 8));
            v10[24] = result;
            if (*(_QWORD *)i)
            {
              v13 = png_malloc_base(v4, *(_QWORD *)i);
              *((_QWORD *)v10 + 1) = v13;
              if (!v13)
              {
                result = png_chunk_report(v4, "unknown chunk: out of memory", 1);
                goto LABEL_13;
              }
              v14 = *(_QWORD *)i;
              result = (uint64_t)memcpy(v13, *(const void **)(i - 8), *(_QWORD *)i);
              *((_QWORD *)v10 + 2) = v14;
            }
            else
            {
              *((_QWORD *)v10 + 1) = 0;
              *((_QWORD *)v10 + 2) = 0;
            }
            v10 += 32;
            ++*(_DWORD *)(a2 + 312);
LABEL_13:
            if (--v11 <= 1)
              return result;
          }
        }
        return png_chunk_report(v4, "too many unknown chunks", 1);
      }
    }
  }
  return result;
}

uint64_t check_location(uint64_t a1, char a2)
{
  int v2;
  int v4;
  int v5;

  v2 = a2 & 0xB;
  if ((a2 & 0xB) == 0)
  {
    if ((*(_BYTE *)(a1 + 293) & 0x80) != 0
      || (png_app_warning(a1, "png_set_unknown_chunks now expects a valid location"),
          (v2 = *(_DWORD *)(a1 + 292) & 0xB) == 0))
    {
      png_error(a1, "invalid location in png_set_unknown_chunks");
    }
  }
  do
  {
    v4 = v2;
    v5 = v2 & -v2;
    v2 ^= v5;
  }
  while (v4 != v5);
  return v4;
}

void png_set_rows(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;

  if (a1 && a2)
  {
    v5 = *(_QWORD *)(a2 + 352);
    if (v5)
      v6 = v5 == a3;
    else
      v6 = 1;
    if (!v6)
      png_free_data(a1, a2, 0x40u, 0);
    *(_QWORD *)(a2 + 352) = a3;
    if (a3)
      *(_DWORD *)(a2 + 8) |= 0x8000u;
  }
}

uint64_t png_check_keyword(uint64_t a1, unsigned __int8 *a2, _BYTE *a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD v15[16];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = 0;
      v6 = 0;
      v7 = 1;
      v8 = a2;
      do
      {
        if (v4 > 0xA0 || v4 - 33 <= 0x5D)
        {
          v7 = 0;
          *a3++ = v4;
          ++v6;
        }
        else
        {
          if (v7)
          {
            if (!v5)
              v5 = v4;
          }
          else
          {
            *a3++ = 32;
            ++v6;
            if (v4 != 32)
              v5 = v4;
          }
          v7 = 1;
        }
        v9 = *++v8;
        v4 = v9;
      }
      while (v9 && v6 < 0x4F);
    }
    else
    {
      v6 = 0;
      v5 = 0;
      v7 = 1;
      v8 = a2;
    }
    if (v6)
      v11 = v7 == 0;
    else
      v11 = 1;
    v12 = !v11;
    if ((v12 & (v5 == 0)) != 0)
      v13 = 32;
    else
      v13 = v5;
    a3[-v12] = 0;
    v10 = v6 - v12;
    if ((_DWORD)v10)
    {
      if (*v8)
      {
        png_warning(a1, "keyword truncated");
      }
      else if ((_DWORD)v13)
      {
        memset(v15, 0, sizeof(v15));
        png_warning_parameter((uint64_t)v15, 1, a2);
        png_warning_parameter_signed((uint64_t)v15, 2, 4, v13);
        png_formatted_warning(a1, (uint64_t)v15, "keyword \"@1\": bad character '0x@2'");
      }
    }
  }
  else
  {
    v10 = 0;
    *a3 = 0;
  }
  return v10;
}

uint64_t png_set_bgr(uint64_t result)
{
  if (result)
    *(_DWORD *)(result + 300) |= 1u;
  return result;
}

uint64_t png_set_swap(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 608) == 16)
      *(_DWORD *)(result + 300) |= 0x10u;
  }
  return result;
}

uint64_t png_set_packing(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 608) <= 7u)
    {
      *(_DWORD *)(result + 300) |= 4u;
      *(_BYTE *)(result + 609) = 8;
    }
  }
  return result;
}

uint64_t png_set_packswap(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 608) <= 7u)
      *(_DWORD *)(result + 300) |= 0x10000u;
  }
  return result;
}

uint64_t png_set_shift(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(_DWORD *)(result + 300) |= 8u;
    *(_DWORD *)(result + 725) = *(_DWORD *)a2;
    *(_BYTE *)(result + 729) = *(_BYTE *)(a2 + 4);
  }
  return result;
}

uint64_t png_set_interlace_handling(uint64_t a1)
{
  if (!a1 || !*(_BYTE *)(a1 + 604))
    return 1;
  *(_DWORD *)(a1 + 300) |= 2u;
  return 7;
}

uint64_t png_set_filler(uint64_t result, __int16 a2, int a3)
{
  char v3;
  int v4;
  unsigned int v5;
  char *v6;

  if (!result)
    return result;
  if ((*(_BYTE *)(result + 293) & 0x80) == 0)
  {
    if (*(_BYTE *)(result + 607))
    {
      if (*(_BYTE *)(result + 607) == 2)
      {
        v3 = 4;
LABEL_9:
        *(_BYTE *)(result + 612) = v3;
        goto LABEL_10;
      }
      v6 = "png_set_filler: inappropriate color type";
    }
    else
    {
      if (*(unsigned __int8 *)(result + 608) >= 8u)
      {
        v3 = 2;
        goto LABEL_9;
      }
      v6 = "png_set_filler is invalid for low bit depth gray output";
    }
    return png_app_error(result, v6);
  }
  *(_WORD *)(result + 618) = a2;
LABEL_10:
  *(_DWORD *)(result + 300) |= 0x8000u;
  v4 = *(_DWORD *)(result + 296);
  if (a3 == 1)
    v5 = v4 | 0x80;
  else
    v5 = v4 & 0xFFFFFF7F;
  *(_DWORD *)(result + 296) = v5;
  return result;
}

uint64_t png_set_swap_alpha(uint64_t result)
{
  if (result)
    *(_DWORD *)(result + 300) |= 0x20000u;
  return result;
}

uint64_t png_set_invert_alpha(uint64_t result)
{
  if (result)
    *(_DWORD *)(result + 300) |= 0x80000u;
  return result;
}

uint64_t png_set_invert_mono(uint64_t result)
{
  if (result)
    *(_DWORD *)(result + 300) |= 0x20u;
  return result;
}

uint64_t png_do_invert(uint64_t result, _BYTE *a2)
{
  uint64_t k;
  int v3;
  unint64_t v4;
  unint64_t j;
  unint64_t v6;
  unint64_t i;
  _BYTE *v8;

  if (*(_BYTE *)(result + 16) == 4)
  {
    v3 = *(unsigned __int8 *)(result + 17);
    if (v3 == 16)
    {
      v6 = *(_QWORD *)(result + 8);
      if (v6)
      {
        for (i = 0; i < v6; i += 4)
        {
          v8 = &a2[i];
          *v8 = ~a2[i];
          v8[1] = ~a2[i + 1];
        }
      }
    }
    else if (v3 == 8)
    {
      v4 = *(_QWORD *)(result + 8);
      if (v4)
      {
        for (j = 0; j < v4; j += 2)
          a2[j] = ~a2[j];
      }
    }
  }
  else if (!*(_BYTE *)(result + 16))
  {
    for (k = *(_QWORD *)(result + 8); k; --k)
    {
      *a2 = ~*a2;
      ++a2;
    }
  }
  return result;
}

uint64_t png_do_swap(uint64_t result, char *a2)
{
  int i;
  char v3;

  if (*(_BYTE *)(result + 17) == 16)
  {
    for (i = *(_DWORD *)result * *(unsigned __int8 *)(result + 18); i; --i)
    {
      v3 = *a2;
      *a2 = a2[1];
      a2[1] = v3;
      a2 += 2;
    }
  }
  return result;
}

uint64_t png_do_packswap(uint64_t result, _BYTE *a2)
{
  unsigned int v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;

  v2 = *(unsigned __int8 *)(result + 17);
  if (v2 <= 7)
  {
    v3 = *(_QWORD *)(result + 8);
    switch(v2)
    {
      case 1u:
        v4 = &onebppswaptable;
        break;
      case 4u:
        v4 = &fourbppswaptable;
        break;
      case 2u:
        v4 = &twobppswaptable;
        break;
      default:
        return result;
    }
    if (v3 >= 1)
    {
      v5 = &a2[v3];
      do
      {
        *a2 = v4[*a2];
        ++a2;
      }
      while (a2 < v5);
    }
  }
  return result;
}

uint64_t png_do_strip_channel(uint64_t result, _BYTE *a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  char *v7;
  _BYTE *v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;

  v3 = *(_QWORD *)(result + 8);
  v4 = (unint64_t)&a2[v3];
  v5 = *(unsigned __int8 *)(result + 18);
  if (v5 == 4)
  {
    v10 = *(unsigned __int8 *)(result + 17);
    if (v10 == 16)
    {
      v17 = 8;
      if (a3)
        v17 = 2;
      v18 = 6;
      if (a3)
        v18 = 0;
      v8 = &a2[v18];
      if (v17 < v3)
      {
        v19 = &a2[v17];
        do
        {
          *v8 = *v19;
          v8[1] = v19[1];
          v8[2] = v19[2];
          v8[3] = v19[3];
          v8[4] = v19[4];
          v8[5] = v19[5];
          v8 += 6;
          v19 += 8;
        }
        while ((unint64_t)v19 < v4);
      }
      v14 = 48;
    }
    else
    {
      if (v10 != 8)
        return result;
      if (a3)
        v11 = 1;
      else
        v11 = 4;
      v12 = 3;
      if (a3)
        v12 = 0;
      v8 = &a2[v12];
      if (v11 < v3)
      {
        v13 = &a2[v11];
        do
        {
          *v8 = *v13;
          v8[1] = v13[1];
          v8[2] = v13[2];
          v8 += 3;
          v13 += 4;
        }
        while ((unint64_t)v13 < v4);
      }
      v14 = 24;
    }
    *(_BYTE *)(result + 19) = v14;
    *(_BYTE *)(result + 18) = 3;
    if (*(_BYTE *)(result + 16) == 6)
      *(_BYTE *)(result + 16) = 2;
  }
  else
  {
    if (v5 != 2)
      return result;
    v6 = *(unsigned __int8 *)(result + 17);
    if (v6 == 16)
    {
      v15 = a2 + 4;
      if (a3)
      {
        v15 = a2 + 2;
        v16 = a2;
      }
      else
      {
        v16 = a2 + 2;
      }
      if ((unint64_t)v15 >= v4)
      {
        v8 = v16;
      }
      else
      {
        do
        {
          *v16 = *v15;
          v8 = v16 + 2;
          v16[1] = v15[1];
          v15 += 4;
          v16 += 2;
        }
        while ((unint64_t)v15 < v4);
      }
    }
    else
    {
      if (v6 != 8)
        return result;
      if (a3)
        v7 = a2 + 1;
      else
        v7 = a2 + 2;
      if (a3)
        v8 = a2;
      else
        v8 = a2 + 1;
      while ((unint64_t)v7 < v4)
      {
        v9 = *v7;
        v7 += 2;
        *v8++ = v9;
      }
    }
    *(_BYTE *)(result + 19) = v6;
    *(_BYTE *)(result + 18) = 1;
    if (*(_BYTE *)(result + 16) == 4)
      *(_BYTE *)(result + 16) = 0;
  }
  *(_QWORD *)(result + 8) = v8 - a2;
  return result;
}

int *png_do_bgr(int *result, __int16 *a2)
{
  int v2;
  int v3;
  int v4;
  char v5;
  __int16 v7;
  char v8;
  __int16 v9;

  v2 = *((unsigned __int8 *)result + 16);
  if ((v2 & 2) != 0)
  {
    v3 = *result;
    v4 = *((unsigned __int8 *)result + 17);
    if (v4 == 16)
    {
      if (v2 == 2)
      {
        for (; v3; --v3)
        {
          v9 = *a2;
          *a2 = a2[2];
          a2[2] = v9;
          a2 += 3;
        }
      }
      else if (v2 == 6 && v3 != 0)
      {
        do
        {
          v7 = *a2;
          *a2 = a2[2];
          a2[2] = v7;
          a2 += 4;
          --v3;
        }
        while (v3);
      }
    }
    else if (v4 == 8)
    {
      if (v2 == 2)
      {
        for (; v3; --v3)
        {
          v8 = *(_BYTE *)a2;
          *(_BYTE *)a2 = *((_BYTE *)a2 + 2);
          *((_BYTE *)a2 + 2) = v8;
          a2 = (__int16 *)((char *)a2 + 3);
        }
      }
      else if (v2 == 6 && v3)
      {
        do
        {
          v5 = *(_BYTE *)a2;
          *(_BYTE *)a2 = *((_BYTE *)a2 + 2);
          *((_BYTE *)a2 + 2) = v5;
          a2 += 2;
          --v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t png_do_check_palette_indexes(uint64_t result, uint64_t a2)
{
  int v2;
  BOOL v3;
  int v4;
  int v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v28;
  int v29;

  v2 = *(unsigned __int8 *)(a2 + 17);
  if (*(_WORD *)(result + 592))
    v3 = 1 << v2 <= *(unsigned __int16 *)(result + 592);
  else
    v3 = 1;
  if (!v3)
  {
    v4 = v2 - 1;
    v5 = -(*(_DWORD *)a2 * *(unsigned __int8 *)(a2 + 19)) & 7;
    v6 = *(_QWORD *)(result + 544);
    v7 = (unsigned __int8 *)(v6 + *(_QWORD *)(a2 + 8) - 1);
    switch(v4)
    {
      case 0:
        for (; (unint64_t)v7 > v6; --v7)
        {
          if (*v7 >> v5)
            *(_DWORD *)(result + 596) = 1;
          LOBYTE(v5) = 0;
        }
        break;
      case 1:
        if ((unint64_t)v7 > v6)
        {
          v8 = *(_DWORD *)(result + 596);
          do
          {
            v9 = v8;
            v10 = *v7 >> v5;
            v11 = v10 & 3;
            if (v11 <= v8)
              v12 = v8;
            else
              v12 = v10 & 3;
            v13 = (v10 >> 2) & 3;
            if (v13 <= v12)
              v14 = v12;
            else
              v14 = (v10 >> 2) & 3;
            v15 = (v10 >> 4) & 3;
            if (v15 <= v14)
              v16 = v14;
            else
              v16 = (v10 >> 4) & 3;
            v17 = v10 >> 6;
            if (v17 <= v16)
              v8 = v16;
            else
              v8 = v17;
            if (v11 > v9 || v13 > v12 || v15 > v14 || v17 > v16)
              *(_DWORD *)(result + 596) = v8;
            LOBYTE(v5) = 0;
            --v7;
          }
          while ((unint64_t)v7 > v6);
        }
        break;
      case 3:
        if ((unint64_t)v7 > v6)
        {
          v21 = *(_DWORD *)(result + 596);
          do
          {
            v22 = v21;
            v23 = *v7 >> v5;
            v24 = v23 & 0xF;
            if (v24 <= v21)
              v25 = v21;
            else
              v25 = v23 & 0xF;
            v26 = v23 >> 4;
            if (v26 <= v25)
              v21 = v25;
            else
              v21 = v26;
            if (v24 > v22 || v26 > v25)
              *(_DWORD *)(result + 596) = v21;
            LOBYTE(v5) = 0;
            --v7;
          }
          while ((unint64_t)v7 > v6);
        }
        break;
      case 7:
        if ((unint64_t)v7 > v6)
        {
          v28 = *(_DWORD *)(result + 596);
          do
          {
            v29 = *v7;
            if (v28 < v29)
            {
              *(_DWORD *)(result + 596) = v29;
              v28 = v29;
            }
            --v7;
          }
          while ((unint64_t)v7 > v6);
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t png_write_data(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(a1 + 240);
  if (!v1)
    png_error(a1, "Call to NULL write function");
  return v1();
}

size_t png_default_write_data(size_t result, void *__ptr, size_t a3)
{
  uint64_t v4;

  if (result)
  {
    v4 = result;
    result = fwrite(__ptr, 1uLL, a3, *(FILE **)(result + 256));
    if (result != a3)
      png_error(v4, "Write Error");
  }
  return result;
}

uint64_t png_flush(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(result + 648);
  if (v1)
    return v1();
  return result;
}

uint64_t png_default_flush(uint64_t result)
{
  if (result)
    return fflush(*(FILE **)(result + 256));
  return result;
}

_QWORD *png_set_write_fn(_QWORD *result, uint64_t a2, size_t (*a3)(size_t result, void *__ptr, size_t a3), uint64_t (*a4)(uint64_t result))
{
  size_t (*v4)(size_t, void *, size_t);
  uint64_t (*v5)(uint64_t);

  if (result)
  {
    result[32] = a2;
    v4 = png_default_write_data;
    if (a3)
      v4 = a3;
    result[30] = v4;
    v5 = png_default_flush;
    if (a4)
      v5 = a4;
    result[81] = v5;
    if (result[31])
    {
      result[31] = 0;
      return (_QWORD *)png_warning((uint64_t)result, "Can't set both read_data_fn and write_data_fn in the same structure");
    }
  }
  return result;
}

uint64_t png_write_info_before_PLTE(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  __int16 v4;
  int v5;

  if (!result)
    return result;
  if (!a2)
    return result;
  v3 = result;
  if ((*(_BYTE *)(result + 293) & 4) != 0)
    return result;
  png_write_sig(result);
  if ((*(_BYTE *)(v3 + 293) & 0x10) != 0 && *(_DWORD *)(v3 + 984))
  {
    png_warning(v3, "MNG features are not allowed in a PNG datastream");
    *(_DWORD *)(v3 + 984) = 0;
  }
  png_write_IHDR(v3, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 36), *(unsigned __int8 *)(a2 + 37), *(unsigned __int8 *)(a2 + 38), *(unsigned __int8 *)(a2 + 39), *(unsigned __int8 *)(a2 + 40));
  v4 = *(_WORD *)(a2 + 126);
  if ((v4 & 0x8008) == 8)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      goto LABEL_11;
    png_write_gAMA_fixed(v3, *(_DWORD *)(a2 + 52));
    v4 = *(_WORD *)(a2 + 126);
  }
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    v5 = *(_DWORD *)(a2 + 8);
    if ((v5 & 0x1000) != 0)
    {
      if ((v5 & 0x800) != 0)
        png_app_warning(v3, "profile matches sRGB but writing iCCP instead");
      png_write_iCCP(v3, *(unsigned __int8 **)(a2 + 128), *(_QWORD *)(a2 + 136));
    }
    else if ((v5 & 0x800) != 0)
    {
      png_write_sRGB(v3, *(unsigned __int16 *)(a2 + 124));
    }
  }
  if ((*(_BYTE *)(a2 + 8) & 2) != 0)
    png_write_sBIT(v3, (Bytef *)(a2 + 176), *(unsigned __int8 *)(a2 + 37));
  if ((*(_WORD *)(a2 + 126) & 0x8010) == 0x10 && (*(_BYTE *)(a2 + 8) & 4) != 0)
    png_write_cHRM_fixed(v3, (unsigned int *)(a2 + 56));
  result = write_unknown_chunks(v3, a2, 1u);
  *(_DWORD *)(v3 + 292) |= 0x400u;
  return result;
}

uint64_t write_unknown_chunks(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(int *)(a2 + 312);
  if ((int)v3 > 0)
  {
    v5 = result;
    v6 = *(_QWORD *)(a2 + 304);
    v7 = v6 + 32 * v3;
    do
    {
      if ((*(_BYTE *)(v6 + 24) & a3) != 0)
      {
        result = png_handle_as_unknown(v5, (_DWORD *)v6);
        if ((_DWORD)result != 1
          && ((_DWORD)result == 3 || (*(_BYTE *)(v6 + 3) & 0x20) != 0 || !(_DWORD)result && *(_DWORD *)(v5 + 952) == 3))
        {
          v8 = *(_QWORD *)(v6 + 16);
          if (!v8)
          {
            png_warning(v5, "Writing zero-length unknown chunk");
            v8 = *(_QWORD *)(v6 + 16);
          }
          result = png_write_chunk(v5, (unsigned int *)v6, *(Bytef **)(v6 + 8), v8);
        }
      }
      v6 += 32;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t png_write_info(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!result || !a2)
    return result;
  v3 = result;
  png_write_info_before_PLTE(result, a2);
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 8) != 0)
  {
    png_write_PLTE(v3, *(_QWORD *)(a2 + 24), *(unsigned __int16 *)(a2 + 32));
    v4 = *(_DWORD *)(a2 + 8);
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
  }
  else
  {
    if (*(_BYTE *)(a2 + 37) == 3)
      png_error(v3, "Valid palette required for paletted images");
    if ((v4 & 0x10) == 0)
    {
LABEL_6:
      if ((v4 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_27;
    }
  }
  if ((*(_BYTE *)(v3 + 302) & 8) != 0 && *(_BYTE *)(a2 + 37) == 3)
  {
    v5 = *(unsigned __int16 *)(a2 + 34) >= 0x100u ? 256 : *(unsigned __int16 *)(a2 + 34);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
        *(_BYTE *)(*(_QWORD *)(a2 + 184) + i) = ~*(_BYTE *)(*(_QWORD *)(a2 + 184) + i);
    }
  }
  png_write_tRNS(v3, *(Bytef **)(a2 + 184), (unsigned __int16 *)(a2 + 192), *(unsigned __int16 *)(a2 + 34), *(unsigned __int8 *)(a2 + 37));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  png_write_bKGD(v3, (unsigned __int8 *)(a2 + 202), *(unsigned __int8 *)(a2 + 37));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  png_write_eXIf(v3, *(Bytef **)(a2 + 240), *(_DWORD *)(a2 + 236));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  png_write_hIST(v3, *(unsigned __int16 **)(a2 + 256), *(unsigned __int16 *)(a2 + 32));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  png_write_oFFs(v3, *(unsigned int *)(a2 + 212), *(unsigned int *)(a2 + 216), *(unsigned __int8 *)(a2 + 220));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  png_write_pCAL((_QWORD *)v3, *(unsigned __int8 **)(a2 + 264), *(_DWORD *)(a2 + 272), *(_DWORD *)(a2 + 276), *(unsigned __int8 *)(a2 + 296), *(unsigned __int8 *)(a2 + 297), *(const char **)(a2 + 280), *(const char ***)(a2 + 288));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  png_write_sCAL_s(v3, *(_BYTE *)(a2 + 332), *(char **)(a2 + 336), *(const char **)(a2 + 344));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  png_write_pHYs(v3, *(_DWORD *)(a2 + 224), *(_DWORD *)(a2 + 228), *(unsigned __int8 *)(a2 + 232));
  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_38;
LABEL_35:
    if (*(int *)(a2 + 328) >= 1)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        png_write_sPLT(v3, *(_QWORD *)(a2 + 320) + v7);
        ++v8;
        v7 += 32;
      }
      while (v8 < *(int *)(a2 + 328));
    }
    goto LABEL_38;
  }
LABEL_34:
  png_write_tIME(v3, (unsigned __int16 *)(a2 + 168));
  *(_DWORD *)(v3 + 292) |= 0x200u;
  if ((*(_DWORD *)(a2 + 8) & 0x2000) != 0)
    goto LABEL_35;
LABEL_38:
  if (*(int *)(a2 + 148) >= 1)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(a2 + 160);
    while (1)
    {
      v12 = *(_DWORD *)(v11 + v9);
      if (v12 >= 1)
        break;
      if (v12 == -1)
      {
        png_write_tEXt(v3, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 16));
        v11 = *(_QWORD *)(a2 + 160);
LABEL_48:
        *(_DWORD *)(v11 + v9) = -3;
        goto LABEL_49;
      }
      if (!v12)
      {
        png_write_zTXt(v3, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 16), 0);
        v11 = *(_QWORD *)(a2 + 160);
LABEL_46:
        *(_DWORD *)(v11 + v9) = -2;
      }
LABEL_49:
      ++v10;
      v9 += 56;
      if (v10 >= *(int *)(a2 + 148))
        return write_unknown_chunks(v3, a2, 2u);
    }
    png_write_iTXt(v3, v12, *(unsigned __int8 **)(v11 + v9 + 8), *(char **)(v11 + v9 + 40), *(char **)(v11 + v9 + 48), *(char **)(v11 + v9 + 16));
    v11 = *(_QWORD *)(a2 + 160);
    if (*(_DWORD *)(v11 + v9) == -1)
      goto LABEL_48;
    goto LABEL_46;
  }
  return write_unknown_chunks(v3, a2, 2u);
}

uint64_t png_write_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v2 = result;
    if ((*(_BYTE *)(result + 292) & 4) == 0)
      png_error(result, "No IDATs written into file");
    if (*(_DWORD *)(result + 596) > (int)*(unsigned __int16 *)(result + 592))
      png_benign_error(result, "Wrote palette index exceeding num_palette");
    if (a2)
    {
      if ((*(_BYTE *)(a2 + 9) & 2) != 0 && (*(_BYTE *)(v2 + 293) & 2) == 0)
        png_write_tIME(v2, (unsigned __int16 *)(a2 + 168));
      if (*(int *)(a2 + 148) >= 1)
      {
        v4 = 0;
        v5 = 0;
        v6 = *(_QWORD *)(a2 + 160);
        do
        {
          v7 = *(_DWORD *)(v6 + v4);
          if (v7 < 1)
          {
            if ((v7 & 0x80000000) == 0)
            {
              png_write_zTXt(v2, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 16), 0);
              v6 = *(_QWORD *)(a2 + 160);
LABEL_16:
              *(_DWORD *)(v6 + v4) = -2;
              goto LABEL_17;
            }
            if (v7 != -1)
              goto LABEL_17;
            png_write_tEXt(v2, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 16));
            v6 = *(_QWORD *)(a2 + 160);
          }
          else
          {
            png_write_iTXt(v2, v7, *(unsigned __int8 **)(v6 + v4 + 8), *(char **)(v6 + v4 + 40), *(char **)(v6 + v4 + 48), *(char **)(v6 + v4 + 16));
            v6 = *(_QWORD *)(a2 + 160);
            if (*(_DWORD *)(v6 + v4) != -1)
              goto LABEL_16;
          }
          *(_DWORD *)(v6 + v4) = -3;
LABEL_17:
          ++v5;
          v4 += 56;
        }
        while (v5 < *(int *)(a2 + 148));
      }
      if ((*(_BYTE *)(a2 + 10) & 1) != 0)
        png_write_eXIf(v2, *(Bytef **)(a2 + 240), *(_DWORD *)(a2 + 236));
      write_unknown_chunks(v2, a2, 8u);
    }
    *(_DWORD *)(v2 + 292) |= 8u;
    return png_write_IEND(v2);
  }
  return result;
}

_QWORD *png_create_write_struct(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return png_create_write_struct_2(a1, a2, a3, a4, 0, 0, 0);
}

_QWORD *png_create_write_struct_2(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *png_struct;
  _QWORD *v8;

  png_struct = png_create_png_struct(a1, a2, a3, a4, a5, a6, a7);
  v8 = png_struct;
  if (png_struct)
  {
    *((_DWORD *)png_struct + 118) = 0;
    png_struct[58] = 0x80000000FLL;
    *((_OWORD *)png_struct + 27) = xmmword_2186FA780;
    *((_OWORD *)png_struct + 28) = xmmword_2186FA790;
    *((_DWORD *)png_struct + 74) |= 0x200000u;
    png_set_write_fn(png_struct, 0, 0, 0);
  }
  return v8;
}

void png_write_row(uint64_t a1, void *__src)
{
  unsigned int v4;
  char v5;
  char v6;
  size_t v7;
  unsigned __int8 v8;
  uint8x8_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  void (*v22)(uint64_t, _QWORD, _QWORD);
  const char *v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;

  if (!a1)
    return;
  if (!*(_DWORD *)(a1 + 524) && !*(_BYTE *)(a1 + 605))
  {
    if ((*(_BYTE *)(a1 + 293) & 4) == 0)
    {
      v23 = "png_write_info was never called before png_write_row";
      goto LABEL_66;
    }
    png_write_start_row(a1);
  }
  if (!*(_BYTE *)(a1 + 604) || (*(_BYTE *)(a1 + 300) & 2) == 0)
  {
LABEL_8:
    v24 = 0;
    v25 = 0;
    v4 = *(_DWORD *)(a1 + 508);
    v5 = *(_BYTE *)(a1 + 612);
    v6 = *(_BYTE *)(a1 + 609);
    if ((v6 * v5) >= 8u)
      v7 = v4 * (unint64_t)((v6 * v5) >> 3);
    else
      v7 = ((v6 * v5) * (unint64_t)v4 + 7) >> 3;
    v8 = *(_BYTE *)(a1 + 607);
    v25 = v7;
    v26 = v8;
    LODWORD(v24) = v4;
    BYTE2(v26) = v5;
    BYTE1(v26) = v6;
    *(_DWORD *)((char *)&v26 + 3) = (v6 * v5);
    memcpy((void *)(*(_QWORD *)(a1 + 544) + 1), __src, v7);
    if (*(_BYTE *)(a1 + 604))
    {
      v10 = *(unsigned __int8 *)(a1 + 605);
      if (v10 <= 5 && (*(_BYTE *)(a1 + 300) & 2) != 0)
      {
        png_do_write_interlace((uint64_t)&v24, (unsigned __int8 *)(*(_QWORD *)(a1 + 544) + 1), v10);
        if (!(_DWORD)v24)
        {
          png_write_finish_row(a1);
          return;
        }
      }
    }
    if (*(_DWORD *)(a1 + 300))
      png_do_write_transformations(a1, (int *)&v24, v9);
    if (BYTE3(v26) == *(unsigned __int8 *)(a1 + 610) && BYTE3(v26) == *(unsigned __int8 *)(a1 + 615))
    {
      if ((*(_BYTE *)(a1 + 984) & 4) == 0 || *(_BYTE *)(a1 + 988) != 64)
        goto LABEL_58;
      v11 = v26;
      if ((v26 & 2) == 0)
        goto LABEL_59;
      v12 = *(_QWORD *)(a1 + 544);
      v13 = v24;
      if (BYTE1(v26) != 16)
      {
        if (BYTE1(v26) == 8)
        {
          if (v26 == 2)
          {
            v14 = 3;
LABEL_50:
            if ((_DWORD)v24)
            {
              v16 = (_BYTE *)(v12 + 3);
              do
              {
                v17 = *(v16 - 1);
                *(v16 - 2) -= v17;
                *v16 -= v17;
                v16 += v14;
                --v13;
              }
              while (v13);
            }
            goto LABEL_58;
          }
          if (v26 == 6)
          {
            v14 = 4;
            goto LABEL_50;
          }
        }
LABEL_58:
        v11 = v26;
LABEL_59:
        if (v11 == 3 && (*(_DWORD *)(a1 + 596) & 0x80000000) == 0)
          png_do_check_palette_indexes(a1, (uint64_t)&v24);
        png_write_find_filter(a1, (uint64_t)&v24);
        v22 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 768);
        if (v22)
          v22(a1, *(unsigned int *)(a1 + 524), *(unsigned __int8 *)(a1 + 605));
        return;
      }
      if (v26 == 2)
      {
        v15 = 6;
      }
      else
      {
        if (v26 != 6)
          goto LABEL_58;
        v15 = 8;
      }
      if ((_DWORD)v24)
      {
        v18 = (unsigned __int16 *)(v12 + 3);
        do
        {
          v19 = bswap32(*v18);
          v20 = __rev16(*(v18 - 1)) - HIWORD(v19);
          v21 = __rev16(v18[1]) - HIWORD(v19);
          *((_BYTE *)v18 - 2) = BYTE1(v20);
          *((_BYTE *)v18 - 1) = v20;
          *((_BYTE *)v18 + 2) = BYTE1(v21);
          *((_BYTE *)v18 + 3) = v21;
          v18 = (unsigned __int16 *)((char *)v18 + v15);
          --v13;
        }
        while (v13);
      }
      goto LABEL_58;
    }
    v23 = "internal write transform logic error";
LABEL_66:
    png_error(a1, v23);
  }
  switch(*(_BYTE *)(a1 + 605))
  {
    case 0:
      if ((*(_BYTE *)(a1 + 524) & 7) == 0)
        goto LABEL_8;
      goto LABEL_45;
    case 1:
      if ((*(_BYTE *)(a1 + 524) & 7) != 0 || *(_DWORD *)(a1 + 496) <= 4u)
        goto LABEL_45;
      goto LABEL_8;
    case 2:
      if ((*(_DWORD *)(a1 + 524) & 7) != 4)
        goto LABEL_45;
      goto LABEL_8;
    case 3:
      if ((*(_BYTE *)(a1 + 524) & 3) != 0 || *(_DWORD *)(a1 + 496) <= 2u)
        goto LABEL_45;
      goto LABEL_8;
    case 4:
      if ((*(_DWORD *)(a1 + 524) & 3) != 2)
        goto LABEL_45;
      goto LABEL_8;
    case 5:
      if ((*(_BYTE *)(a1 + 524) & 1) != 0 || *(_DWORD *)(a1 + 496) <= 1u)
        goto LABEL_45;
      goto LABEL_8;
    case 6:
      if ((*(_BYTE *)(a1 + 524) & 1) != 0)
        goto LABEL_8;
LABEL_45:
      png_write_finish_row(a1);
      break;
    default:
      goto LABEL_8;
  }
}

void png_write_image(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  if (a1)
  {
    v4 = png_set_interlace_handling(a1);
    if (v4 >= 1)
    {
      v5 = v4;
      v6 = 0;
      v7 = *(_DWORD *)(a1 + 500);
      do
      {
        if (v7)
        {
          v8 = 0;
          do
          {
            png_write_row(a1, *(void **)(a2 + 8 * v8));
            v7 = *(_DWORD *)(a1 + 500);
            ++v8;
          }
          while (v8 < v7);
        }
        ++v6;
      }
      while (v6 != v5);
    }
  }
}

uint64_t png_write_flush(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(_DWORD *)(result + 524) < *(_DWORD *)(result + 504))
    {
      png_compress_IDAT(result, 0, 0, 2);
      *(_DWORD *)(v1 + 660) = 0;
      return png_flush(v1);
    }
  }
  return result;
}

void png_destroy_write_struct(uint64_t *a1, void **a2)
{
  uint64_t v3;

  if (a1)
  {
    v3 = *a1;
    if (*a1)
    {
      png_destroy_info_struct(*a1, a2);
      *a1 = 0;
      if ((*(_BYTE *)(v3 + 296) & 2) != 0)
        deflateEnd((z_streamp)(v3 + 312));
      png_free_buffer_list(v3, (_QWORD **)(v3 + 424));
      png_free(v3, *(void **)(v3 + 544));
      *(_QWORD *)(v3 + 544) = 0;
      png_free(v3, *(void **)(v3 + 536));
      png_free(v3, *(void **)(v3 + 552));
      png_free(v3, *(void **)(v3 + 560));
      *(_QWORD *)(v3 + 536) = 0;
      *(_OWORD *)(v3 + 552) = 0u;
      png_free(v3, *(void **)(v3 + 960));
      *(_QWORD *)(v3 + 960) = 0;
      png_destroy_png_struct((void *)v3);
    }
  }
}

uint64_t png_write_png(uint64_t result, uint64_t a2, __int16 a3)
{
  uint64_t v4;
  int v6;

  if (result && a2)
  {
    v4 = result;
    if ((*(_BYTE *)(a2 + 9) & 0x80) == 0)
      return png_app_error(result, "no rows for png_write_image to write");
    png_write_info(result, a2);
    if ((a3 & 0x20) != 0)
      png_set_invert_mono(v4);
    if ((a3 & 0x40) != 0 && (*(_BYTE *)(a2 + 8) & 2) != 0)
      png_set_shift(v4, a2 + 176);
    if ((a3 & 4) != 0)
      png_set_packing(v4);
    if ((a3 & 0x100) != 0)
      png_set_swap_alpha(v4);
    if ((a3 & 0x1800) != 0)
    {
      if ((a3 & 0x1000) != 0)
      {
        if ((a3 & 0x800) != 0)
          png_app_error(v4, "PNG_TRANSFORM_STRIP_FILLER: BEFORE+AFTER not supported");
        v6 = 1;
      }
      else
      {
        if ((a3 & 0x800) == 0)
          goto LABEL_23;
        v6 = 0;
      }
      png_set_filler(v4, 0, v6);
    }
LABEL_23:
    if ((a3 & 0x80) != 0)
    {
      png_set_bgr(v4);
      if ((a3 & 0x200) == 0)
      {
LABEL_25:
        if ((a3 & 8) == 0)
          goto LABEL_26;
        goto LABEL_31;
      }
    }
    else if ((a3 & 0x200) == 0)
    {
      goto LABEL_25;
    }
    png_set_swap(v4);
    if ((a3 & 8) == 0)
    {
LABEL_26:
      if ((a3 & 0x400) == 0)
      {
LABEL_28:
        png_write_image(v4, *(_QWORD *)(a2 + 352));
        return png_write_end(v4, a2);
      }
LABEL_27:
      png_set_invert_alpha(v4);
      goto LABEL_28;
    }
LABEL_31:
    png_set_packswap(v4);
    if ((a3 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  return result;
}

uint64_t png_do_write_transformations(uint64_t result, int *a2, uint8x8_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t (*v6)(uint64_t, int *, uint64_t);
  _BYTE *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  _BYTE *v24;
  unsigned __int8 v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  int v39;
  int v41;
  int v43;
  uint64_t k;
  unsigned __int8 v45;
  unsigned int v46;
  char v47;
  int v48;
  int v49;
  unsigned int i;
  unsigned __int8 v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  BOOL v57;
  int v58;
  unsigned int j;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  BOOL v66;
  unsigned int v67;
  int8x8_t *v68;
  int v69;
  int v70;
  int16x8_t v71;
  int v72;
  __int8 v73;
  int16x8_t v74;
  _BYTE *v75;
  int v76;
  int v77;
  _BYTE *v78;
  int v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  int v83;
  _DWORD v84[4];
  _DWORD v85[4];
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  if (!result)
    return result;
  v4 = result;
  v5 = *(_DWORD *)(result + 300);
  if ((v5 & 0x100000) != 0)
  {
    v6 = *(uint64_t (**)(uint64_t, int *, uint64_t))(result + 272);
    if (v6)
    {
      result = v6(result, a2, *(_QWORD *)(result + 544) + 1);
      v5 = *(_DWORD *)(v4 + 300);
    }
  }
  if ((v5 & 0x8000) != 0)
  {
    result = png_do_strip_channel((uint64_t)a2, (_BYTE *)(*(_QWORD *)(v4 + 544) + 1), ((*(_DWORD *)(v4 + 296) >> 7) & 1) == 0);
    v5 = *(_DWORD *)(v4 + 300);
    if ((v5 & 0x10000) == 0)
    {
LABEL_7:
      if ((v5 & 4) == 0)
        goto LABEL_47;
LABEL_11:
      if (*((_BYTE *)a2 + 17) == 8 && *((_BYTE *)a2 + 18) == 1)
      {
        v7 = (_BYTE *)(*(_QWORD *)(v4 + 544) + 1);
        v8 = *(unsigned __int8 *)(v4 + 608);
        switch(v8)
        {
          case 4:
            v23 = *a2;
            if (*a2)
            {
              v24 = (_BYTE *)(*(_QWORD *)(v4 + 544) + 1);
              while (v23 != 1)
              {
                *v7++ = v24[1] & 0xF | (16 * *v24);
                v24 += 2;
                v23 -= 2;
                if (!v23)
                  goto LABEL_44;
              }
              LOBYTE(v14) = 16 * *v24;
LABEL_43:
              *v7 = v14;
            }
            break;
          case 2:
            if (*a2)
            {
              v17 = 0;
              v18 = -*a2;
              v19 = *(_QWORD *)(v4 + 544) + 1;
LABEL_29:
              v20 = 0;
              v14 = 0;
              v21 = 6;
              do
              {
                v14 |= (*(_BYTE *)(v19 + v20) & 3) << v21;
                if (!v21)
                {
                  *v7++ = v14;
                  v19 += v20 + 1;
                  v22 = v17 + v20;
                  v17 += v20 + 1;
                  if (v22 + v18 != -1)
                    goto LABEL_29;
                  goto LABEL_44;
                }
                v21 -= 2;
                ++v20;
              }
              while (v18 + v17 + (_DWORD)v20);
              if (v21 != 6)
                goto LABEL_43;
            }
            break;
          case 1:
            v9 = *a2;
            if (*a2)
            {
              v10 = 0;
              v11 = *a2;
              v12 = (_BYTE *)(*(_QWORD *)(v4 + 544) + 1);
              do
              {
                v13 = 0;
                LOBYTE(v14) = 0;
                v15 = 128;
                while (1)
                {
                  v16 = v7[v13] ? v15 : 0;
                  LOBYTE(v14) = v16 | v14;
                  if ((_DWORD)v13 == 7)
                    break;
                  v15 >>= 1;
                  if (v11 == (_DWORD)++v13)
                  {
                    v7 = v12;
                    goto LABEL_43;
                  }
                }
                *v12++ = v14;
                v10 += 8;
                v7 += v13 + 1;
                v11 -= 8;
              }
              while (v10 != v9);
            }
            break;
        }
LABEL_44:
        *((_BYTE *)a2 + 17) = v8;
        v25 = *((_BYTE *)a2 + 18) * v8;
        *((_BYTE *)a2 + 19) = v25;
        v26 = v25 >= 8u;
        v27 = (*a2 * (unint64_t)v25 + 7) >> 3;
        v28 = *a2 * (unint64_t)(v25 >> 3);
        if (!v26)
          v28 = v27;
        *((_QWORD *)a2 + 1) = v28;
        v5 = *(_DWORD *)(v4 + 300);
      }
      goto LABEL_47;
    }
  }
  else if ((v5 & 0x10000) == 0)
  {
    goto LABEL_7;
  }
  result = png_do_packswap((uint64_t)a2, (_BYTE *)(*(_QWORD *)(v4 + 544) + 1));
  v5 = *(_DWORD *)(v4 + 300);
  if ((v5 & 4) != 0)
    goto LABEL_11;
LABEL_47:
  if ((v5 & 0x10) != 0)
  {
    result = png_do_swap((uint64_t)a2, (char *)(*(_QWORD *)(v4 + 544) + 1));
    v5 = *(_DWORD *)(v4 + 300);
  }
  if ((v5 & 8) != 0)
  {
    v29 = *((unsigned __int8 *)a2 + 16);
    if (v29 != 3)
    {
      v30 = *(_QWORD *)(v4 + 544);
      v31 = *((unsigned __int8 *)a2 + 17);
      if ((v29 & 2) != 0)
      {
        v32 = *(unsigned __int8 *)(v4 + 725);
        v34 = *(unsigned __int8 *)(v4 + 726);
        v35 = *(unsigned __int8 *)(v4 + 727);
        v85[1] = v31 - v34;
        v85[2] = v31 - v35;
        v84[1] = v34;
        v84[2] = v35;
        v33 = 3;
      }
      else
      {
        v32 = *(unsigned __int8 *)(v4 + 728);
        v33 = 1;
      }
      v36 = (unsigned __int8 *)(v30 + 1);
      v85[0] = v31 - v32;
      v84[0] = v32;
      if ((v29 & 4) != 0)
      {
        v37 = *(unsigned __int8 *)(v4 + 729);
        v85[v33] = v31 - v37;
        v84[v33++] = v37;
      }
      if (v31 > 7)
      {
        v49 = *a2 * v33;
        if (v31 == 8)
        {
          if (v49)
          {
            for (i = 0; i != v49; ++i)
            {
              v51 = 0;
              v52 = v85[i % v33];
              v53 = v84[i % v33];
              if (v52 > -v53)
              {
                v51 = 0;
                v54 = *v36;
                LODWORD(result) = -v52;
                do
                {
                  v55 = v54 >> result;
                  v56 = v52 - v53;
                  result = (result + v53);
                  v57 = v52 <= 0;
                  if (v52 <= 0)
                    LOBYTE(v58) = v55;
                  else
                    v58 = v54 << v52;
                  v51 |= v58;
                  v52 = v56;
                }
                while (!v57);
              }
              *v36++ = v51;
            }
          }
        }
        else if (v49)
        {
          for (j = 0; j != v49; ++j)
          {
            v60 = 0;
            v61 = v85[j % v33];
            v62 = v84[j % v33];
            if (v61 > -v62)
            {
              v60 = 0;
              v63 = __rev16(*(unsigned __int16 *)v36);
              LODWORD(result) = -v61;
              do
              {
                v64 = v63 >> result;
                v65 = v61 - v62;
                result = (result + v62);
                v66 = v61 <= 0;
                if (v61 <= 0)
                  v67 = v64;
                else
                  v67 = v63 << v61;
                v60 |= v67;
                v61 = v65;
              }
              while (!v66);
            }
            *(_WORD *)v36 = bswap32(v60) >> 16;
            v36 += 2;
          }
        }
      }
      else
      {
        v38 = *((_QWORD *)a2 + 1);
        v39 = *(unsigned __int8 *)(v4 + 728);
        if (v39 == 3 && v31 == 4)
          v41 = 17;
        else
          v41 = 255;
        if (v39 == 1 && v31 == 2)
          v43 = 85;
        else
          v43 = v41;
        if (v38)
        {
          for (k = 0; k != v38; ++k)
          {
            v45 = 0;
            if (v31)
            {
              v46 = *v36;
              LODWORD(result) = v31;
              v47 = v32 - v31;
              do
              {
                if ((int)result - v32 <= 0)
                  v48 = (v46 >> v47) & v43;
                else
                  v48 = v46 << (result - v32);
                v45 |= v48;
                v47 += v32;
                result = (result - v32);
              }
              while ((int)result > 0);
            }
            *v36++ = v45;
          }
        }
      }
      v5 = *(_DWORD *)(v4 + 300);
    }
  }
  if ((v5 & 0x20000) != 0)
  {
    v68 = (int8x8_t *)(*(_QWORD *)(v4 + 544) + 1);
    v69 = *((unsigned __int8 *)a2 + 16);
    if (v69 == 4)
    {
      v72 = *a2;
      if (*((_BYTE *)a2 + 17) == 8)
      {
        for (; v72; --v72)
        {
          v73 = v68->i8[0];
          v68->i8[0] = v68->i8[1];
          v68->i8[1] = v73;
          v68 = (int8x8_t *)((char *)v68 + 2);
        }
      }
      else
      {
        for (; v72; --v72)
        {
          a3.i32[0] = v68->i32[0];
          v74 = (int16x8_t)vmovl_u8(a3);
          *(int8x8_t *)v74.i8 = vext_s8(*(int8x8_t *)v74.i8, *(int8x8_t *)v74.i8, 4uLL);
          a3 = (uint8x8_t)vmovn_s16(v74);
          v68->i32[0] = a3.i32[0];
          v68 = (int8x8_t *)((char *)v68 + 4);
        }
      }
    }
    else if (v69 == 6)
    {
      v70 = *a2;
      if (*((_BYTE *)a2 + 17) == 8)
      {
        for (; v70; --v70)
        {
          a3.i32[0] = v68->i32[0];
          v71 = (int16x8_t)vmovl_u8(a3);
          *(int8x8_t *)v71.i8 = vext_s8(*(int8x8_t *)v71.i8, *(int8x8_t *)v71.i8, 2uLL);
          a3 = (uint8x8_t)vmovn_s16(v71);
          v68->i32[0] = a3.i32[0];
          v68 = (int8x8_t *)((char *)v68 + 4);
        }
      }
      else
      {
        for (; v70; --v70)
        {
          *v68 = vext_s8(*v68, *v68, 2uLL);
          ++v68;
        }
      }
    }
  }
  if ((*(_BYTE *)(v4 + 302) & 8) != 0)
  {
    v75 = *(_BYTE **)(v4 + 544);
    v76 = *((unsigned __int8 *)a2 + 16);
    if (v76 == 4)
    {
      v79 = *a2;
      if (*((_BYTE *)a2 + 17) == 8)
      {
        if (v79)
        {
          v80 = v75 + 2;
          do
          {
            *v80 = ~*v80;
            v80 += 2;
            --v79;
          }
          while (v79);
        }
      }
      else if (v79)
      {
        v82 = v75 + 4;
        do
        {
          *(v82 - 1) = ~*(v82 - 1);
          *v82 = ~*v82;
          v82 += 4;
          --v79;
        }
        while (v79);
      }
    }
    else if (v76 == 6)
    {
      v77 = *a2;
      if (*((_BYTE *)a2 + 17) == 8)
      {
        if (v77)
        {
          v78 = v75 + 4;
          do
          {
            *v78 = ~*v78;
            v78 += 4;
            --v77;
          }
          while (v77);
        }
      }
      else if (v77)
      {
        v81 = v75 + 8;
        do
        {
          *(v81 - 1) = ~*(v81 - 1);
          *v81 = ~*v81;
          v81 += 8;
          --v77;
        }
        while (v77);
      }
    }
  }
  v83 = *(_DWORD *)(v4 + 300);
  if ((v83 & 1) != 0)
  {
    result = (uint64_t)png_do_bgr(a2, (__int16 *)(*(_QWORD *)(v4 + 544) + 1));
    v83 = *(_DWORD *)(v4 + 300);
  }
  if ((v83 & 0x20) != 0)
    return png_do_invert((uint64_t)a2, (_BYTE *)(*(_QWORD *)(v4 + 544) + 1));
  return result;
}

_DWORD *png_save_uint_32(_DWORD *result, unsigned int a2)
{
  *result = bswap32(a2);
  return result;
}

uint64_t png_write_sig(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(a1 + 1132) = 18;
  result = png_write_data(a1);
  if (*(unsigned __int8 *)(a1 + 613) <= 2u)
    *(_DWORD *)(a1 + 292) |= 0x1000u;
  return result;
}

uint64_t png_write_chunk_header(uint64_t result, int a2)
{
  uint64_t v3;
  Bytef v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v3 = result;
    *(_DWORD *)(result + 1132) = 34;
    v4[0] = HIBYTE(a2);
    v4[1] = BYTE2(a2);
    v4[2] = BYTE1(a2);
    v4[3] = a2;
    png_write_data(result);
    *(_DWORD *)(v3 + 528) = a2;
    png_reset_crc(v3);
    result = png_calculate_crc(v3, v4, 4);
    *(_DWORD *)(v3 + 1132) = 66;
  }
  return result;
}

uint64_t png_write_chunk_data(uint64_t result, Bytef *a2, uint64_t a3)
{
  uint64_t v5;

  if (result && a2)
  {
    if (a3)
    {
      v5 = result;
      png_write_data(result);
      return png_calculate_crc(v5, a2, a3);
    }
  }
  return result;
}

uint64_t png_write_chunk_end(uint64_t result)
{
  if (result)
  {
    *(_DWORD *)(result + 1132) = 130;
    return png_write_data(result);
  }
  return result;
}

uint64_t png_write_chunk(uint64_t a1, unsigned int *a2, Bytef *a3, unint64_t a4)
{
  return png_write_complete_chunk(a1, bswap32(*a2), a3, a4);
}

uint64_t png_write_complete_chunk(uint64_t result, int a2, Bytef *a3, unint64_t a4)
{
  uint64_t v5;

  if (result)
  {
    v5 = result;
    if (a4 >> 31)
      png_error(result, "length exceeds PNG maximum");
    png_write_chunk_header(result, a2);
    png_write_chunk_data(v5, a3, a4);
    *(_DWORD *)(v5 + 1132) = 130;
    return png_write_data(v5);
  }
  return result;
}

void png_free_buffer_list(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  _QWORD *v5;

  v3 = *a2;
  if (v3)
  {
    *a2 = 0;
    do
    {
      v5 = (_QWORD *)*v3;
      png_free(a1, v3);
      v3 = v5;
    }
    while (v5);
  }
}

uint64_t png_write_IHDR(uint64_t a1, unsigned int a2, int a3, unsigned int a4, int a5, int a6, int a7, unsigned int a8)
{
  Bytef v12;
  char v15;
  const char *v16;
  BOOL v18;
  char v19;
  unint64_t v20;
  uint64_t result;
  char v22;
  Bytef v23[13];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v12 = a4;
  switch(a5)
  {
    case 0:
      if (a4 <= 0x10)
      {
        v15 = 1;
        if (((1 << a4) & 0x10116) != 0)
          goto LABEL_16;
      }
      v16 = "Invalid bit depth for grayscale image";
      goto LABEL_45;
    case 2:
      v15 = 3;
      if (a4 == 8 || a4 == 16)
        goto LABEL_16;
      v16 = "Invalid bit depth for RGB image";
      goto LABEL_45;
    case 3:
      if (a4 - 1 >= 8 || ((0x8Bu >> (a4 - 1)) & 1) == 0)
      {
        v16 = "Invalid bit depth for paletted image";
LABEL_45:
        png_error(a1, v16);
      }
      v15 = 1;
LABEL_16:
      *(_BYTE *)(a1 + 611) = v15;
      if (a6)
        png_warning(a1, "Invalid compression type specified");
      if ((*(_BYTE *)(a1 + 984) & 4) == 0 || (*(_BYTE *)(a1 + 293) & 0x10) != 0)
      {
        if (!a7)
          goto LABEL_31;
        goto LABEL_30;
      }
      v18 = (a5 & 0xFFFFFFFB) != 2 || a7 != 64;
      if (a7 && v18)
      {
LABEL_30:
        png_warning(a1, "Invalid filter type specified");
        LOBYTE(a7) = 0;
      }
LABEL_31:
      if (a8 >= 2)
      {
        png_warning(a1, "Invalid interlace type specified");
        LOBYTE(a8) = 1;
      }
      *(_BYTE *)(a1 + 608) = v12;
      *(_BYTE *)(a1 + 607) = a5;
      *(_BYTE *)(a1 + 604) = a8;
      *(_BYTE *)(a1 + 988) = a7;
      *(_BYTE *)(a1 + 1048) = 0;
      *(_DWORD *)(a1 + 496) = a2;
      *(_DWORD *)(a1 + 500) = a3;
      v19 = *(_BYTE *)(a1 + 611);
      *(_BYTE *)(a1 + 610) = v19 * v12;
      v20 = a2 * (unint64_t)((v19 * v12) >> 3);
      if ((v19 * v12) < 8u)
        v20 = ((v19 * v12) * (unint64_t)a2 + 7) >> 3;
      *(_QWORD *)(a1 + 512) = v20;
      *(_DWORD *)(a1 + 508) = a2;
      *(_BYTE *)(a1 + 609) = v12;
      *(_BYTE *)(a1 + 612) = v19;
      v23[0] = HIBYTE(a2);
      v23[1] = BYTE2(a2);
      v23[2] = BYTE1(a2);
      v23[3] = a2;
      v23[4] = HIBYTE(a3);
      v23[5] = BYTE2(a3);
      v23[6] = BYTE1(a3);
      v23[7] = a3;
      v23[8] = v12;
      v23[9] = a5;
      v23[10] = 0;
      v23[11] = a7;
      v23[12] = a8;
      result = png_write_complete_chunk(a1, 1229472850, v23, 0xDuLL);
      if (!*(_BYTE *)(a1 + 606))
      {
        v22 = 8;
        if (*(_BYTE *)(a1 + 607) != 3)
        {
          if (*(unsigned __int8 *)(a1 + 608) < 8u)
            v22 = 8;
          else
            v22 = -8;
        }
        *(_BYTE *)(a1 + 606) = v22;
      }
      *(_DWORD *)(a1 + 292) = 1;
      return result;
    case 4:
      v15 = 2;
      if (a4 == 8 || a4 == 16)
        goto LABEL_16;
      v16 = "Invalid bit depth for grayscale+alpha image";
      goto LABEL_45;
    case 6:
      v15 = 4;
      if (a4 == 8 || a4 == 16)
        goto LABEL_16;
      v16 = "Invalid bit depth for RGBA image";
      goto LABEL_45;
    default:
      v16 = "Invalid image color type specified";
      goto LABEL_45;
  }
}

uint64_t png_write_PLTE(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  int v6;
  BOOL v7;
  char *v8;
  uint64_t result;
  Bytef v10;
  __int16 v11;

  v3 = a3;
  v6 = *(unsigned __int8 *)(a1 + 607);
  if (v6 == 3)
  {
    if (*(_DWORD *)(a1 + 984) & 1 | a3)
      v7 = 1 << *(_BYTE *)(a1 + 608) >= a3;
    else
      v7 = 0;
    if (!v7)
      png_error(a1, "Invalid number of colors in palette");
    goto LABEL_11;
  }
  if (a3 > 0x100 || !(*(_DWORD *)(a1 + 984) & 1 | a3))
  {
    v8 = "Invalid number of colors in palette";
    return png_warning(a1, v8);
  }
  if ((v6 & 2) == 0)
  {
    v8 = "Ignoring request to write a PLTE chunk in grayscale PNG";
    return png_warning(a1, v8);
  }
LABEL_11:
  *(_WORD *)(a1 + 592) = a3;
  png_write_chunk_header(a1, 1347179589);
  for (; v3; --v3)
  {
    v10 = *(_BYTE *)a2;
    v11 = *(_WORD *)(a2 + 1);
    png_write_chunk_data(a1, &v10, 3);
    a2 += 3;
  }
  result = png_write_chunk_end(a1);
  *(_DWORD *)(a1 + 292) |= 2u;
  return result;
}

uint64_t png_compress_IDAT(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t result;
  int v17;
  Bytef *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  unint64_t v22;
  const char *v23;

  if (*(_DWORD *)(a1 + 304) != 1229209940)
  {
    v8 = *(_QWORD ***)(a1 + 424);
    if (v8)
    {
      v9 = *v8;
      if (*v8)
      {
        *v8 = 0;
        do
        {
          v10 = (_QWORD *)*v9;
          png_free(a1, v9);
          v9 = v10;
        }
        while (v10);
      }
    }
    else
    {
      v11 = png_malloc((_QWORD *)a1, *(unsigned int *)(a1 + 432) + 8);
      *(_QWORD *)(a1 + 424) = v11;
      *v11 = 0;
    }
    v12 = png_image_size(a1);
    if (png_deflate_claim(a1, 1229209940, v12))
      goto LABEL_41;
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a1 + 424) + 8;
    *(_DWORD *)(a1 + 344) = *(_DWORD *)(a1 + 432);
  }
  *(_QWORD *)(a1 + 312) = a2;
  while (1)
  {
    do
    {
      v13 = a3 >= 0xFFFFFFFF ? 0xFFFFFFFFLL : a3;
      *(_DWORD *)(a1 + 320) = v13;
      v14 = a3 - v13;
      v15 = HIDWORD(a3) ? 0 : a4;
      result = deflate((z_streamp)(a1 + 312), v15);
      v17 = result;
      a3 = v14 + *(unsigned int *)(a1 + 320);
      *(_DWORD *)(a1 + 320) = 0;
      LODWORD(v14) = *(_DWORD *)(a1 + 344);
      if ((_DWORD)v14)
        break;
      v18 = (Bytef *)(*(_QWORD *)(a1 + 424) + 8);
      v14 = *(unsigned int *)(a1 + 432);
      if ((*(_BYTE *)(a1 + 292) & 4) != 0 || *(_BYTE *)(a1 + 1048))
      {
        if (!(_DWORD)v14)
          goto LABEL_25;
LABEL_24:
        result = png_write_complete_chunk(a1, 1229209940, v18, v14);
        goto LABEL_25;
      }
      v19 = png_image_size(a1);
      result = (uint64_t)optimize_cmf(v18, v19);
      if ((_DWORD)v14)
        goto LABEL_24;
LABEL_25:
      *(_DWORD *)(a1 + 292) |= 4u;
      *(_QWORD *)(a1 + 336) = v18;
      *(_DWORD *)(a1 + 344) = v14;
    }
    while (a4 && !v17);
    if (v17)
      break;
    if (!a3)
    {
      if (a4 != 4)
        return result;
      v23 = "Z_OK on Z_FINISH with output space";
LABEL_43:
      png_error(a1, v23);
    }
  }
  if (a4 != 4 || v17 != 1)
  {
    png_zstream_error(a1, v17);
LABEL_41:
    v23 = *(const char **)(a1 + 360);
    goto LABEL_43;
  }
  v20 = (unsigned __int8 *)(*(_QWORD *)(a1 + 424) + 8);
  v21 = *(_DWORD *)(a1 + 432);
  if ((*(_BYTE *)(a1 + 292) & 4) == 0 && !*(_BYTE *)(a1 + 1048))
  {
    v22 = png_image_size(a1);
    result = (uint64_t)optimize_cmf(v20, v22);
  }
  if (v21 != (_DWORD)v14)
    result = png_write_complete_chunk(a1, 1229209940, v20, (v21 - v14));
  *(_DWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 292) |= 0xCu;
  *(_DWORD *)(a1 + 304) = 0;
  return result;
}

uint64_t png_deflate_claim(uint64_t a1, int a2, unint64_t a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  z_stream *v15;
  _BYTE v17[4];
  __int16 v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a1 + 304);
  if (!v6)
    goto LABEL_5;
  v17[0] = HIBYTE(a2);
  v17[1] = BYTE2(a2);
  v17[2] = BYTE1(a2);
  v17[3] = a2;
  v18 = 8250;
  v19 = HIBYTE(v6);
  v20 = BYTE2(v6);
  v21 = BYTE1(v6);
  v22 = v6;
  png_safecat((uint64_t)v17, 0x40uLL, 0xAuLL, " using zstream");
  png_warning(a1, v17);
  if (*(_DWORD *)(a1 + 304) != 1229209940)
  {
    *(_DWORD *)(a1 + 304) = 0;
LABEL_5:
    if (a2 == 1229209940)
    {
      v8 = *(_DWORD *)(a1 + 436);
      v9 = *(_DWORD *)(a1 + 440);
      v10 = *(_DWORD *)(a1 + 444);
      v11 = *(_DWORD *)(a1 + 448);
      if ((*(_BYTE *)(a1 + 296) & 1) != 0)
        v12 = *(_DWORD *)(a1 + 452);
      else
        v12 = *(unsigned __int8 *)(a1 + 606) != 8;
    }
    else
    {
      v8 = *(_DWORD *)(a1 + 456);
      v9 = *(_DWORD *)(a1 + 460);
      v10 = *(_DWORD *)(a1 + 464);
      v11 = *(_DWORD *)(a1 + 468);
      v12 = *(_DWORD *)(a1 + 472);
    }
    if (a3 <= 0x4000)
    {
      v13 = (1 << (v10 - 1));
      if (a3 + 262 <= v13)
      {
        do
        {
          LODWORD(v13) = v13 >> 1;
          --v10;
        }
        while (v13 >= (int)a3 + 262);
      }
    }
    v14 = *(_DWORD *)(a1 + 296);
    if ((v14 & 2) != 0
      && (*(_DWORD *)(a1 + 476) != v8
       || *(_DWORD *)(a1 + 480) != v9
       || *(_DWORD *)(a1 + 484) != v10
       || *(_DWORD *)(a1 + 488) != v11
       || *(_DWORD *)(a1 + 492) != v12))
    {
      if (deflateEnd((z_streamp)(a1 + 312)))
        png_warning(a1, "deflateEnd failed (ignored)");
      v14 = *(_DWORD *)(a1 + 296) & 0xFFFFFFFD;
      *(_DWORD *)(a1 + 296) = v14;
    }
    v15 = (z_stream *)(a1 + 312);
    *(_QWORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 344) = 0;
    if ((v14 & 2) != 0)
    {
      v7 = deflateReset(v15);
      if (!(_DWORD)v7)
        goto LABEL_27;
    }
    else
    {
      v7 = deflateInit2_(v15, v8, v9, v10, v11, v12, "1.2.12", 112);
      if (!(_DWORD)v7)
      {
        *(_DWORD *)(a1 + 296) |= 2u;
LABEL_27:
        v7 = 0;
        *(_DWORD *)(a1 + 304) = a2;
        return v7;
      }
    }
    png_zstream_error(a1, v7);
    return v7;
  }
  *(_QWORD *)(a1 + 360) = "in use by IDAT";
  return 4294967294;
}

uint64_t png_image_size(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;
  uint64_t result;
  unint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v1 = *(unsigned int *)(a1 + 500);
  v2 = *(_QWORD *)(a1 + 512);
  if (v2 >> 15)
    v3 = 0;
  else
    v3 = v1 >> 15 == 0;
  if (!v3)
    return 0xFFFFFFFFLL;
  if (!*(_BYTE *)(a1 + 604))
    return v1 + v1 * v2;
  result = 0;
  v6 = *(unsigned __int8 *)(a1 + 610);
  v7 = *(_DWORD *)(a1 + 496);
  v8 = 7;
  v9 = 1;
  do
  {
    v10 = v9 - 1;
    if (v9 - 1 <= 1)
      v11 = 3;
    else
      v11 = v8 >> 1;
    v12 = (v7 + ~(-1 << v11) - (((v10 & 1) << (3 - (v9 >> 1))) & 7)) >> v11;
    if (v12)
    {
      v13 = (v6 >> 3) * (unint64_t)v12;
      v14 = (v6 * (unint64_t)v12 + 7) >> 3;
      if (v6 > 7)
        v14 = v13;
      v15 = (v8 + 1) >> 1;
      if (v10 < 3)
        LOBYTE(v15) = 3;
      v16 = (v1 - ((!(v10 & 1) << (3 - (v10 >> 1))) & 7) + ~(-1 << v15)) >> v15;
      result += v16 + v16 * v14;
    }
    ++v9;
    --v8;
  }
  while (v8);
  return result;
}

unsigned __int8 *optimize_cmf(unsigned __int8 *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unsigned __int8 v7;
  int v8;

  if (a2 <= 0x4000)
  {
    v2 = *result;
    if ((v2 & 0xF) == 8)
    {
      v3 = v2 >> 4;
      v4 = 128 << (*result >> 4);
      v5 = (v2 & 0xF0) <= 0x70 && v4 >= a2;
      if (v5)
      {
        v6 = ((v3 & 0xF) << 12) | 0x800;
        v7 = (v2 & 0xF0) + 8;
        v8 = v3 - 1;
        do
        {
          v6 -= 4096;
          v7 -= 16;
          v5 = v8-- != 0;
          if (!v5)
            break;
          v4 = v4 >> 1;
        }
        while (v4 >= a2);
        *result = v7;
        result[1] = (result[1] & 0xE0 | ((result[1] & 0xE0) - 31 * (((result[1] & 0xE0u) + v6) / 0x1F))) ^ 0x1F;
      }
    }
  }
  return result;
}

uint64_t png_write_IEND(uint64_t a1)
{
  uint64_t result;

  result = png_write_complete_chunk(a1, 1229278788, 0, 0);
  *(_DWORD *)(a1 + 292) |= 0x10u;
  return result;
}

uint64_t png_write_gAMA_fixed(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  v3 = bswap32(a2);
  return png_write_complete_chunk(a1, 1732332865, (Bytef *)&v3, 4uLL);
}

uint64_t png_write_sRGB(uint64_t a1, int a2)
{
  Bytef v2;
  Bytef v5;

  v2 = a2;
  if (a2 >= 4)
    png_warning(a1, "Invalid sRGB rendering intent specified");
  v5 = v2;
  return png_write_complete_chunk(a1, 1934772034, &v5, 1uLL);
}

uint64_t png_write_iCCP(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  int v7;
  uint64_t v8;
  const char *v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  Bytef v43[81];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v10 = "No profile for iCCP chunk";
    goto LABEL_15;
  }
  v5 = _byteswap_ulong(*(_DWORD *)a3);
  if (v5 <= 0x83)
  {
    v10 = "ICC profile too short";
    goto LABEL_15;
  }
  if ((*(_BYTE *)(a3 + 3) & 3) != 0 && *(unsigned __int8 *)(a3 + 8) >= 4u)
  {
    v10 = "ICC profile length invalid (not a multiple of 4)";
    goto LABEL_15;
  }
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  v7 = png_check_keyword(a1, a2, v43);
  if (!v7)
  {
    v10 = "iCCP: invalid keyword";
    goto LABEL_15;
  }
  v43[v7 + 1] = 0;
  v8 = (v7 + 2);
  v11[0] = a3;
  v11[1] = v5;
  LODWORD(v12) = 0;
  if (png_text_compress(a1, 1766015824, (uint64_t)v11, v8))
  {
    v10 = *(const char **)(a1 + 360);
LABEL_15:
    png_error(a1, v10);
  }
  png_write_chunk_header(a1, 1766015824);
  png_write_chunk_data(a1, v43, v8);
  png_write_compressed_data_out(a1, (uint64_t)v11);
  return png_write_chunk_end(a1);
}

uint64_t png_text_compress(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  _QWORD **v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  int v15;

  v7 = png_deflate_claim(a1, a2, *(_QWORD *)(a3 + 8));
  if ((_DWORD)v7)
    return v7;
  v8 = (_QWORD **)(a1 + 424);
  v9 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 336) = a3 + 20;
  v10 = 1024;
  *(_DWORD *)(a1 + 344) = 1024;
  while (1)
  {
    if (v9 >= 0xFFFFFFFF)
      v11 = 0xFFFFFFFFLL;
    else
      v11 = v9;
    v9 -= v11;
    *(_DWORD *)(a1 + 320) = v11;
    if (*(_DWORD *)(a1 + 344))
      goto LABEL_12;
    if (v10 + a4 < 0)
      goto LABEL_14;
    v12 = *v8;
    if (!*v8)
      break;
LABEL_11:
    *(_QWORD *)(a1 + 336) = v12 + 1;
    v13 = *(_DWORD *)(a1 + 432);
    *(_DWORD *)(a1 + 344) = v13;
    v10 += v13;
    v8 = (_QWORD **)v12;
LABEL_12:
    v14 = deflate((z_streamp)(a1 + 312), 4 * (v9 == 0));
    v9 += *(unsigned int *)(a1 + 320);
    *(_DWORD *)(a1 + 320) = 0;
    if ((_DWORD)v14)
    {
      v7 = v14;
      goto LABEL_15;
    }
  }
  v12 = png_malloc_base(a1, *(unsigned int *)(a1 + 432) + 8);
  if (v12)
  {
    *v12 = 0;
    *v8 = v12;
    goto LABEL_11;
  }
LABEL_14:
  v7 = 4294967292;
LABEL_15:
  v15 = v10 - *(_DWORD *)(a1 + 344);
  *(_DWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a3 + 16) = v15;
  if ((v15 + a4) < 0x7FFFFFFF)
  {
    png_zstream_error(a1, v7);
    *(_DWORD *)(a1 + 304) = 0;
    if ((_DWORD)v7 == 1 && !v9)
    {
      optimize_cmf((unsigned __int8 *)(a3 + 20), *(_QWORD *)(a3 + 8));
      return 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 360) = "compressed data too long";
    *(_DWORD *)(a1 + 304) = 0;
    return 4294967292;
  }
  return v7;
}

uint64_t png_write_compressed_data_out(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  Bytef *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  unsigned int v11;
  Bytef *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = (Bytef *)(a2 + 20);
  v5 = *(_QWORD **)(a1 + 424);
  if (v3 >= 0x400)
    v6 = 1024;
  else
    v6 = v3;
  result = png_write_chunk_data(a1, v4, v6);
  v8 = v3 - v6;
  v9 = v8 == 0;
  if (v8)
    v10 = v5 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v11 = *(_DWORD *)(a1 + 432);
      v14 = (_QWORD *)*v5;
      v12 = (Bytef *)(v5 + 1);
      v13 = v14;
      if (v11 >= v8)
        v15 = v8;
      else
        v15 = v11;
      result = png_write_chunk_data(a1, v12, v15);
      v8 -= v15;
      v9 = v8 == 0;
      if (v8)
        v16 = v13 == 0;
      else
        v16 = 1;
      v5 = v13;
    }
    while (!v16);
  }
  if (!v9)
    png_error(a1, "error writing ancillary chunked compressed data");
  return result;
}

uint64_t png_write_sPLT(uint64_t a1, uint64_t a2)
{
  Bytef *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 v10;
  __int16 *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned __int16 v14;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  char v19;
  _BYTE v20[3];
  Bytef v21[80];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (Bytef *)(a2 + 8);
  if (*(_BYTE *)(a2 + 8) == 8)
    v5 = 6;
  else
    v5 = 10;
  v6 = png_check_keyword(a1, *(unsigned __int8 **)a2, v21);
  if (!v6)
    png_error(a1, "sPLT: invalid keyword");
  v7 = v6;
  png_write_chunk_header(a1, 1934642260);
  png_write_chunk_data(a1, v21, (v7 + 1));
  png_write_chunk_data(a1, v4, 1);
  if (*(int *)(a2 + 24) >= 1)
  {
    v8 = (unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 4);
    do
    {
      v9 = v8 - 2;
      if (*v4 == 8)
      {
        LOBYTE(v16) = *(v8 - 2);
        HIBYTE(v16) = *((_BYTE *)v8 - 2);
        LOBYTE(v17) = *(_BYTE *)v8;
        v10 = v8[1];
        v11 = &v18;
        v12 = (char *)&v17 + 1;
        v13 = (char *)&v18 + 1;
      }
      else
      {
        v16 = __rev16(*(v8 - 2));
        v17 = bswap32(*(v8 - 1)) >> 16;
        v18 = bswap32(*v8) >> 16;
        v10 = v8[1];
        v19 = HIBYTE(v10);
        v12 = v20;
        v11 = (__int16 *)&v20[1];
        v13 = &v20[2];
      }
      *v12 = v10;
      v14 = v8[2];
      *(_BYTE *)v11 = HIBYTE(v14);
      *v13 = v14;
      png_write_chunk_data(a1, (Bytef *)&v16, v5);
      v8 += 5;
    }
    while ((unint64_t)(v9 + 5) < *(_QWORD *)(a2 + 16) + 10 * *(int *)(a2 + 24));
  }
  return png_write_chunk_end(a1);
}

uint64_t png_write_sBIT(uint64_t a1, Bytef *a2, int a3)
{
  unint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  Bytef v10[4];

  if ((a3 & 2) != 0)
  {
    if (a3 == 3)
      v4 = 8;
    else
      v4 = *(unsigned __int8 *)(a1 + 609);
    if (*a2)
      v5 = v4 >= *a2;
    else
      v5 = 0;
    if (!v5)
      return png_warning(a1, "Invalid sBIT depth specified");
    v6 = a2[1];
    if (!a2[1])
      return png_warning(a1, "Invalid sBIT depth specified");
    if (v4 < v6)
      return png_warning(a1, "Invalid sBIT depth specified");
    v7 = a2[2];
    if (!a2[2] || v4 < v7)
      return png_warning(a1, "Invalid sBIT depth specified");
    v10[0] = *a2;
    v10[1] = v6;
    v3 = 3;
    v10[2] = v7;
    if ((a3 & 4) == 0)
      return png_write_complete_chunk(a1, 1933723988, v10, v3);
  }
  else
  {
    if (!a2[3] || a2[3] > *(unsigned __int8 *)(a1 + 609))
      return png_warning(a1, "Invalid sBIT depth specified");
    v10[0] = a2[3];
    v3 = 1;
    if ((a3 & 4) == 0)
      return png_write_complete_chunk(a1, 1933723988, v10, v3);
  }
  v8 = a2[4];
  if (!a2[4] || v8 > *(unsigned __int8 *)(a1 + 609))
    return png_warning(a1, "Invalid sBIT depth specified");
  v10[v3++] = v8;
  return png_write_complete_chunk(a1, 1933723988, v10, v3);
}

uint64_t png_write_cHRM_fixed(uint64_t a1, unsigned int *a2)
{
  Bytef v5[4];
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *((_QWORD *)&v9 + 1) = *MEMORY[0x24BDAC8D0];
  png_save_int_32(v5, a2[6]);
  png_save_int_32(&v6, a2[7]);
  png_save_int_32(&v7, *a2);
  png_save_int_32((char *)&v7 + 4, a2[1]);
  png_save_int_32(&v8, a2[2]);
  png_save_int_32((char *)&v8 + 4, a2[3]);
  png_save_int_32(&v9, a2[4]);
  png_save_int_32((char *)&v9 + 4, a2[5]);
  return png_write_complete_chunk(a1, 1665684045, v5, 0x20uLL);
}

uint64_t png_write_tRNS(uint64_t a1, Bytef *a2, unsigned __int16 *a3, int a4, int a5)
{
  char *v5;
  signed int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  _WORD v16[3];

  switch(a5)
  {
    case 0:
      v6 = a3[4];
      if (1 << *(_BYTE *)(a1 + 608) <= v6)
      {
        v5 = "Ignoring attempt to write tRNS chunk out-of-range for bit_depth";
        return png_app_warning(a1, v5);
      }
      v16[0] = __rev16(v6);
      v7 = 2;
      return png_write_complete_chunk(a1, 1951551059, (Bytef *)v16, v7);
    case 2:
      v8 = a3[1];
      v9 = v8 >> 8;
      v16[0] = __rev16(v8);
      v10 = a3[2];
      v11 = v10 >> 8;
      v16[1] = __rev16(v10);
      v12 = a3[3];
      v16[2] = __rev16(v12);
      v13 = v11 | (v12 >> 8) | v9;
      if (*(_BYTE *)(a1 + 608) == 8 && v13 != 0)
      {
        v5 = "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8";
        return png_app_warning(a1, v5);
      }
      v7 = 6;
      return png_write_complete_chunk(a1, 1951551059, (Bytef *)v16, v7);
    case 3:
      if (a4 >= 1 && *(unsigned __int16 *)(a1 + 592) >= a4)
        return png_write_complete_chunk(a1, 1951551059, a2, a4);
      v5 = "Invalid number of transparent colors specified";
      break;
    default:
      v5 = "Can't write tRNS with an alpha channel";
      break;
  }
  return png_app_warning(a1, v5);
}

uint64_t png_write_bKGD(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned int v3;
  char *v4;
  signed int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _WORD v15[3];

  if (a3 != 3)
  {
    if ((a3 & 2) != 0)
    {
      v7 = *((unsigned __int16 *)a2 + 1);
      v8 = v7 >> 8;
      v15[0] = __rev16(v7);
      v9 = *((unsigned __int16 *)a2 + 2);
      v10 = v9 >> 8;
      v15[1] = __rev16(v9);
      v11 = *((unsigned __int16 *)a2 + 3);
      v15[2] = __rev16(v11);
      v12 = v10 | (v11 >> 8) | v8;
      if (*(_BYTE *)(a1 + 608) == 8 && v12 != 0)
      {
        v4 = "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8";
        return png_warning(a1, v4);
      }
      v6 = 6;
    }
    else
    {
      v5 = *((unsigned __int16 *)a2 + 4);
      if (1 << *(_BYTE *)(a1 + 608) <= v5)
      {
        v4 = "Ignoring attempt to write bKGD chunk out-of-range for bit_depth";
        return png_warning(a1, v4);
      }
      v15[0] = __rev16(v5);
      v6 = 2;
    }
    return png_write_complete_chunk(a1, 1649100612, (Bytef *)v15, v6);
  }
  if (!*(_WORD *)(a1 + 592) && (*(_BYTE *)(a1 + 984) & 1) != 0)
  {
    LOBYTE(v3) = *a2;
    goto LABEL_17;
  }
  v3 = *a2;
  if (*(unsigned __int16 *)(a1 + 592) > v3)
  {
LABEL_17:
    LOBYTE(v15[0]) = v3;
    v6 = 1;
    return png_write_complete_chunk(a1, 1649100612, (Bytef *)v15, v6);
  }
  v4 = "Invalid background palette index";
  return png_warning(a1, v4);
}

uint64_t png_write_eXIf(uint64_t a1, Bytef *a2, int a3)
{
  uint64_t v3;
  Bytef v6;
  Bytef v8;

  LODWORD(v3) = a3;
  png_write_chunk_header(a1, 1700284774);
  if ((int)v3 >= 1)
  {
    v3 = v3;
    do
    {
      v6 = *a2++;
      v8 = v6;
      png_write_chunk_data(a1, &v8, 1);
      --v3;
    }
    while (v3);
  }
  return png_write_chunk_end(a1);
}

uint64_t png_write_hIST(uint64_t a1, unsigned __int16 *a2, int a3)
{
  uint64_t v5;
  unsigned int v7;
  Bytef v8[3];

  if (*(unsigned __int16 *)(a1 + 592) < a3)
    return png_warning(a1, "Invalid number of histogram entries specified");
  LODWORD(v5) = a3;
  png_write_chunk_header(a1, 1749635924);
  if ((int)v5 >= 1)
  {
    v5 = v5;
    do
    {
      v7 = *a2++;
      *(_WORD *)v8 = bswap32(v7) >> 16;
      png_write_chunk_data(a1, v8, 2);
      --v5;
    }
    while (v5);
  }
  return png_write_chunk_end(a1);
}

uint64_t png_write_tEXt(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  int v5;
  int v6;
  size_t v7;
  const char *v8;
  Bytef v10[80];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = png_check_keyword(a1, a2, v10);
  if (!v5)
  {
    v8 = "tEXt: invalid keyword";
LABEL_11:
    png_error(a1, v8);
  }
  v6 = v5;
  if (a3 && *a3)
  {
    v7 = strlen(a3);
    if (v7 > (2147483646 - v6))
    {
      v8 = "tEXt: text too long";
      goto LABEL_11;
    }
  }
  else
  {
    v7 = 0;
  }
  png_write_chunk_header(a1, 1950701684);
  png_write_chunk_data(a1, v10, (v6 + 1));
  if (v7)
    png_write_chunk_data(a1, (Bytef *)a3, v7);
  return png_write_chunk_end(a1);
}

uint64_t png_write_zTXt(uint64_t a1, unsigned __int8 *a2, char *a3, int a4)
{
  int v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  Bytef v43[81];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    if (a4 == -1)
      return png_write_tEXt(a1, a2, a3);
    v10 = "zTXt: invalid compression type";
LABEL_13:
    png_error(a1, v10);
  }
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v7 = png_check_keyword(a1, a2, v43);
  if (!v7)
  {
    v10 = "zTXt: invalid keyword";
    goto LABEL_13;
  }
  v43[v7 + 1] = 0;
  v8 = (v7 + 2);
  if (a3)
    v9 = strlen(a3);
  else
    v9 = 0;
  v11[0] = a3;
  v11[1] = v9;
  LODWORD(v12) = 0;
  if (png_text_compress(a1, 2052348020, (uint64_t)v11, v8))
  {
    v10 = *(const char **)(a1 + 360);
    goto LABEL_13;
  }
  png_write_chunk_header(a1, 2052348020);
  png_write_chunk_data(a1, v43, v8);
  png_write_compressed_data_out(a1, (uint64_t)v11);
  return png_write_chunk_end(a1);
}

uint64_t png_write_iTXt(uint64_t a1, int a2, unsigned __int8 *a3, char *a4, char *a5, char *a6)
{
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  size_t v21;
  const char *v23;
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  Bytef v56[82];
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  v11 = png_check_keyword(a1, a3, v56);
  if (!v11)
  {
    v23 = "iTXt: invalid keyword";
    goto LABEL_26;
  }
  v12 = a2 + 1;
  if ((a2 + 1) >= 4)
  {
    v23 = "iTXt: invalid compression";
    goto LABEL_26;
  }
  v13 = v11;
  v56[v11 + 1] = 0x1000100u >> (8 * v12);
  v56[v11 + 2] = 0;
  v14 = (v11 + 3);
  if (!a4)
    a4 = "";
  v15 = strlen(a4) + 1;
  if (!a5)
    a5 = "";
  v16 = strlen(a5) + 1;
  if (!a6)
    a6 = "";
  v17 = v14 + v15;
  if (v15 > (2147483644 - v13))
    v17 = 0x7FFFFFFF;
  v18 = v17 ^ 0x7FFFFFFFu;
  v19 = v17 + v16;
  if (v16 <= v18)
    v20 = v19;
  else
    v20 = 0x7FFFFFFF;
  v21 = strlen(a6);
  v24[0] = a6;
  v24[1] = v21;
  LODWORD(v25) = 0;
  if ((v12 & 1) == 0)
  {
    if (v21 <= (v20 ^ 0x7FFFFFFFu))
    {
      LODWORD(v25) = v21;
      goto LABEL_18;
    }
    v23 = "iTXt: uncompressed text too long";
LABEL_26:
    png_error(a1, v23);
  }
  if (png_text_compress(a1, 1767135348, (uint64_t)v24, v20))
  {
    v23 = *(const char **)(a1 + 360);
    goto LABEL_26;
  }
LABEL_18:
  png_write_chunk_header(a1, 1767135348);
  png_write_chunk_data(a1, v56, v14);
  png_write_chunk_data(a1, (Bytef *)a4, v15);
  png_write_chunk_data(a1, (Bytef *)a5, v16);
  if ((v12 & 1) != 0)
    png_write_compressed_data_out(a1, (uint64_t)v24);
  else
    png_write_chunk_data(a1, (Bytef *)a6, v25);
  return png_write_chunk_end(a1);
}

uint64_t png_write_oFFs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4;
  Bytef v9[4];
  _BYTE v10[5];
  uint64_t v11;

  v4 = a4;
  v11 = *MEMORY[0x24BDAC8D0];
  if (a4 >= 2)
    png_warning(a1, "Unrecognized unit type for oFFs chunk");
  png_save_int_32(v9, a2);
  png_save_int_32(v10, a3);
  v10[4] = v4;
  return png_write_complete_chunk(a1, 1866876531, v9, 9uLL);
}

uint64_t png_write_pCAL(_QWORD *a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5, int a6, const char *a7, const char **a8)
{
  char v12;
  int v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char **v24;
  size_t *v25;
  const char *v26;
  size_t v27;
  BOOL v28;
  size_t v29;
  uint64_t *v30;
  Bytef *v31;
  Bytef *v32;
  uint64_t v33;
  const char *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  uint64_t *v40;
  Bytef *v41;
  Bytef v42[80];
  Bytef v43[4];
  _BYTE v44[6];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a5 >= 4)
  {
    v35 = "Unrecognized equation type for pCAL chunk";
    goto LABEL_18;
  }
  v12 = a5;
  v15 = png_check_keyword((uint64_t)a1, a2, v42);
  if (!v15)
  {
    v35 = "pCAL: invalid keyword";
LABEL_18:
    png_error((uint64_t)a1, v35);
  }
  v37 = a3;
  v38 = a4;
  v39 = v12;
  v16 = (v15 + 1);
  v41 = (Bytef *)a7;
  v17 = strlen(a7);
  if (a6)
    v18 = v17 + 1;
  else
    v18 = v17;
  v36 = v18;
  v19 = v16 + v18 + 10;
  v20 = png_malloc(a1, 8 * a6);
  v21 = a6;
  v22 = (a6 - 1);
  v40 = v20;
  if (a6 >= 1)
  {
    v23 = a6;
    v24 = a8;
    v25 = (size_t *)v20;
    do
    {
      v26 = *v24++;
      v27 = strlen(v26);
      v28 = v22-- != 0;
      if (v28)
        v29 = v27 + 1;
      else
        v29 = v27;
      *v25++ = v29;
      v19 += v27 + v28;
      --v23;
    }
    while (v23);
  }
  png_write_chunk_header((uint64_t)a1, 1883455820);
  png_write_chunk_data((uint64_t)a1, v42, v16);
  png_save_int_32(v43, v37);
  png_save_int_32(v44, v38);
  v44[4] = v39;
  v44[5] = a6;
  png_write_chunk_data((uint64_t)a1, v43, 10);
  png_write_chunk_data((uint64_t)a1, v41, v36);
  if (a6 >= 1)
  {
    v30 = v40;
    do
    {
      v32 = (Bytef *)*a8++;
      v31 = v32;
      v33 = *v30++;
      png_write_chunk_data((uint64_t)a1, v31, v33);
      --v21;
    }
    while (v21);
  }
  png_free((uint64_t)a1, v40);
  return png_write_chunk_end((uint64_t)a1);
}

uint64_t png_write_sCAL_s(uint64_t a1, Bytef a2, char *__s, const char *a4)
{
  size_t v7;
  size_t v8;
  unint64_t v9;
  size_t v11;
  Bytef v12[64];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v7 = strlen(__s);
  v8 = strlen(a4);
  v9 = v7 + v8 + 2;
  if (v9 >= 0x41)
    return png_warning(a1, "Can't write sCAL (buffer too small)");
  v11 = v8;
  v12[0] = a2;
  __memcpy_chk();
  memcpy(&v12[v7 + 2], a4, v11);
  return png_write_complete_chunk(a1, 1933787468, v12, v9);
}

uint64_t png_write_pHYs(uint64_t a1, int a2, int a3, int a4)
{
  Bytef v4;
  Bytef v9[9];
  uint64_t v10;

  v4 = a4;
  v10 = *MEMORY[0x24BDAC8D0];
  if (a4 >= 2)
    png_warning(a1, "Unrecognized unit type for pHYs chunk");
  v9[0] = HIBYTE(a2);
  v9[1] = BYTE2(a2);
  v9[2] = BYTE1(a2);
  v9[3] = a2;
  v9[4] = HIBYTE(a3);
  v9[5] = BYTE2(a3);
  v9[6] = BYTE1(a3);
  v9[7] = a3;
  v9[8] = v4;
  return png_write_complete_chunk(a1, 1883789683, v9, 9uLL);
}

uint64_t png_write_tIME(uint64_t a1, unsigned __int16 *a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 v7;
  Bytef v8[7];

  v2 = *((unsigned __int8 *)a2 + 2);
  if ((v2 - 13) < 0xFFFFFFF4)
    return png_warning(a1, "Invalid time specified for tIME chunk");
  v3 = *((unsigned __int8 *)a2 + 3);
  if ((v3 - 32) < 0xFFFFFFE1)
    return png_warning(a1, "Invalid time specified for tIME chunk");
  v4 = *((unsigned __int8 *)a2 + 4);
  if (v4 > 0x17)
    return png_warning(a1, "Invalid time specified for tIME chunk");
  v5 = *((unsigned __int8 *)a2 + 6);
  if (v5 >= 0x3D)
    return png_warning(a1, "Invalid time specified for tIME chunk");
  v7 = *a2;
  v8[0] = HIBYTE(*a2);
  v8[1] = v7;
  v8[2] = v2;
  v8[3] = v3;
  v8[4] = v4;
  v8[5] = *((_BYTE *)a2 + 5);
  v8[6] = v5;
  return png_write_complete_chunk(a1, 1950960965, v8, 7uLL);
}

_QWORD *png_write_start_row(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  _QWORD *result;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v2 = *(unsigned __int8 *)(a1 + 609) * *(unsigned __int8 *)(a1 + 612);
  v3 = *(_DWORD *)(a1 + 496);
  v4 = (v3 * (unint64_t)v2 + 7) >> 3;
  v5 = v3 * (unint64_t)(v2 >> 3);
  if (v2 < 8)
    v5 = v4;
  v6 = v5 + 1;
  *(_BYTE *)(a1 + 615) = *(_BYTE *)(a1 + 610);
  *(_BYTE *)(a1 + 614) = v2;
  result = png_malloc((_QWORD *)a1, v5 + 1);
  *(_QWORD *)(a1 + 544) = result;
  *(_BYTE *)result = 0;
  v8 = *(unsigned __int8 *)(a1 + 606);
  if (*(_DWORD *)(a1 + 500) == 1)
    v8 &= 0x1Fu;
  if (*(_DWORD *)(a1 + 496) == 1)
    v8 &= 0x2Fu;
  if ((_BYTE)v8)
    v9 = v8;
  else
    v9 = 8;
  *(_BYTE *)(a1 + 606) = v9;
  if (v9 >= 0x10)
  {
    if (!*(_QWORD *)(a1 + 552))
    {
      result = png_malloc((_QWORD *)a1, v6);
      *(_QWORD *)(a1 + 552) = result;
      if (((v9 >> 5) & 1) + (v9 >> 7) + ((v9 >> 4) & 1) + ((v9 >> 6) & 1) >= 2)
      {
        result = png_malloc((_QWORD *)a1, v6);
        *(_QWORD *)(a1 + 560) = result;
      }
    }
    if (v9 >= 0x20)
    {
      result = png_calloc((_QWORD *)a1, v6);
      *(_QWORD *)(a1 + 536) = result;
    }
  }
  if (!*(_BYTE *)(a1 + 604))
  {
    v10 = *(_DWORD *)(a1 + 500);
    goto LABEL_20;
  }
  v10 = *(_DWORD *)(a1 + 500);
  if ((*(_BYTE *)(a1 + 300) & 2) != 0)
  {
LABEL_20:
    *(_DWORD *)(a1 + 504) = v10;
    v11 = *(_DWORD *)(a1 + 496);
    goto LABEL_21;
  }
  *(_DWORD *)(a1 + 504) = (v10 + 7) >> 3;
  v11 = (*(_DWORD *)(a1 + 496) + 7) >> 3;
LABEL_21:
  *(_DWORD *)(a1 + 508) = v11;
  return result;
}

void png_write_finish_row(uint64_t a1)
{
  unsigned int v1;
  unsigned __int8 v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;

  v1 = *(_DWORD *)(a1 + 524) + 1;
  *(_DWORD *)(a1 + 524) = v1;
  if (v1 >= *(_DWORD *)(a1 + 504))
  {
    if (!*(_BYTE *)(a1 + 604))
      goto LABEL_15;
    *(_DWORD *)(a1 + 524) = 0;
    v2 = *(_BYTE *)(a1 + 605);
    if ((*(_BYTE *)(a1 + 300) & 2) != 0)
    {
      ++v2;
    }
    else
    {
      while (++v2 <= 6u)
      {
        v3 = png_do_write_interlace_png_pass_inc[v2];
        v4 = *(_DWORD *)(a1 + 496) + v3 + ~png_do_write_interlace_png_pass_start[v2];
        *(_DWORD *)(a1 + 508) = v4 / v3;
        v5 = png_write_finish_row_png_pass_yinc[v2];
        v6 = *(_DWORD *)(a1 + 500) + v5 + ~png_write_finish_row_png_pass_ystart[v2];
        *(_DWORD *)(a1 + 504) = v6 / v5;
        if (v4 >= v3 && v6 >= v5)
          break;
      }
    }
    *(_BYTE *)(a1 + 605) = v2;
    if (v2 <= 6u)
    {
      if (*(_QWORD *)(a1 + 536))
      {
        v7 = *(unsigned __int8 *)(a1 + 609) * *(unsigned __int8 *)(a1 + 612);
        v8 = *(_DWORD *)(a1 + 496);
        v9 = v7 >= 8;
        v10 = (v8 * (unint64_t)v7 + 7) >> 3;
        v11 = v8 * (unint64_t)(v7 >> 3);
        if (!v9)
          v11 = v10;
        bzero(*(void **)(a1 + 536), v11 + 1);
      }
    }
    else
    {
LABEL_15:
      png_compress_IDAT(a1, 0, 0, 4);
    }
  }
}

uint64_t png_do_write_interlace(uint64_t result, unsigned __int8 *__dst, int a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  size_t v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  if (a3 > 5)
    return result;
  v4 = result;
  v5 = *(unsigned __int8 *)(result + 19);
  if ((_DWORD)v5 == 4)
  {
    v14 = *(_DWORD *)result;
    v7 = a3;
    v8 = png_do_write_interlace_png_pass_start[a3];
    if (*(_DWORD *)result <= v8)
      goto LABEL_34;
    v9 = 0;
    v15 = png_do_write_interlace_png_pass_inc[a3];
    v16 = 4 * v8;
    v17 = png_do_write_interlace_png_pass_start[a3];
    v18 = 4;
    v13 = __dst;
    do
    {
      result = ~v16 & 4;
      v9 |= ((__dst[(unint64_t)v17 >> 1] >> (~(_BYTE)v16 & 4)) & 0xF) << v18;
      if (v18)
      {
        v18 -= 4;
      }
      else
      {
        *v13++ = v9;
        v18 = 4;
        v9 = 0;
      }
      v17 += v15;
      v16 += 4 * v15;
    }
    while (v17 < v14);
    if (v18 == 4)
      goto LABEL_34;
    goto LABEL_28;
  }
  if ((_DWORD)v5 == 2)
  {
    v19 = *(_DWORD *)result;
    v7 = a3;
    v8 = png_do_write_interlace_png_pass_start[a3];
    if (*(_DWORD *)result <= v8)
      goto LABEL_34;
    v9 = 0;
    v20 = png_do_write_interlace_png_pass_inc[a3];
    v21 = 2 * v8;
    v22 = png_do_write_interlace_png_pass_start[a3];
    v23 = 6;
    v13 = __dst;
    do
    {
      result = ~v21 & 6;
      v9 |= ((__dst[(unint64_t)v22 >> 2] >> (~(_BYTE)v21 & 6)) & 3) << v23;
      if (v23)
      {
        v23 -= 2;
      }
      else
      {
        *v13++ = v9;
        v23 = 6;
        v9 = 0;
      }
      v22 += v20;
      v21 += 2 * v20;
    }
    while (v22 < v19);
    if (v23 == 6)
      goto LABEL_34;
    goto LABEL_28;
  }
  if ((_DWORD)v5 != 1)
  {
    v24 = *(_DWORD *)result;
    v7 = a3;
    v8 = png_do_write_interlace_png_pass_start[a3];
    if (*(_DWORD *)result > v8)
    {
      v25 = v5 >> 3;
      v26 = png_do_write_interlace_png_pass_inc[a3];
      v27 = png_do_write_interlace_png_pass_start[a3];
      v28 = __dst;
      do
      {
        v29 = &__dst[v25 * (unint64_t)v27];
        if (v28 != v29)
          result = (uint64_t)memcpy(v28, v29, v25);
        v28 += v25;
        v27 += v26;
      }
      while (v27 < v24);
    }
    goto LABEL_34;
  }
  v6 = *(_DWORD *)result;
  v7 = a3;
  v8 = png_do_write_interlace_png_pass_start[a3];
  if (*(_DWORD *)result > v8)
  {
    v9 = 0;
    v10 = png_do_write_interlace_png_pass_inc[a3];
    v11 = png_do_write_interlace_png_pass_start[a3];
    v12 = 7;
    v13 = __dst;
    do
    {
      v9 |= ((__dst[(unint64_t)v11 >> 3] >> (~(_BYTE)v11 & 7)) & 1) << v12;
      if (v12)
      {
        --v12;
      }
      else
      {
        *v13++ = v9;
        v12 = 7;
        v9 = 0;
      }
      v11 += v10;
    }
    while (v11 < v6);
    if (v12 != 7)
LABEL_28:
      *v13 = v9;
  }
LABEL_34:
  v30 = (*(_DWORD *)v4 + ~v8 + png_do_write_interlace_png_pass_inc[v7]) / png_do_write_interlace_png_pass_inc[v7];
  *(_DWORD *)v4 = v30;
  v31 = *(unsigned __int8 *)(v4 + 19);
  v32 = (v31 * v30 + 7) >> 3;
  v33 = (v31 >> 3) * (unint64_t)v30;
  if (v31 < 8)
    v33 = v32;
  *(_QWORD *)(v4 + 8) = v33;
  return result;
}

void png_write_find_filter(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  char v30;
  char v31;
  char v32;
  unint64_t v33;
  char v34;
  char v35;
  char v36;
  unsigned __int8 v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unsigned __int8 *v49;
  unint64_t v50;
  char v51;
  char v52;
  char v53;
  unsigned __int8 v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v59;
  _BYTE *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unint64_t v63;
  char *v64;
  char v65;
  char v66;
  unsigned int v67;
  _BYTE *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char v75;
  char v76;
  unsigned int v77;
  unsigned __int8 v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  char v83;
  char v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  char v89;
  char v90;
  int v91;
  int v92;
  int v93;
  unsigned __int8 v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  BOOL v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  unint64_t v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  _BYTE *v109;
  unsigned __int8 *v110;
  uint64_t v111;
  unint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  unint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  char v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  char v135;
  unint64_t v136;
  int v137;
  int v138;
  int v139;
  int v140;
  char v141;
  int v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  char v148;
  unsigned __int8 v149;
  int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;

  v3 = *(unsigned __int8 *)(a1 + 606);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 19);
  v6 = (unint64_t)(v5 + 7) >> 3;
  v7 = *(_QWORD *)(a1 + 544);
  if (v4 < 0x1FFFFFFFFFFFFFFLL)
  {
    v8 = -257;
    if ((v3 & 8) != 0 && v3 != 8)
    {
      v8 = 0;
      if (v4)
      {
        v9 = (unsigned __int8 *)(v7 + 1);
        v10 = *(_QWORD *)(a2 + 8);
        do
        {
          v12 = *v9++;
          LODWORD(v11) = v12;
          v13 = 256 - v12;
          if ((v12 & 0x80u) == 0)
            v11 = v11;
          else
            v11 = v13;
          v8 += v11;
          --v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v3 &= -v3;
    v8 = -257;
  }
  if (v3 == 16)
  {
    v14 = *(_BYTE **)(a1 + 552);
    *v14 = 1;
    v15 = v14 + 1;
    v16 = (char *)(v7 + 1);
    if ((_DWORD)v5)
    {
      v17 = (unint64_t)(v5 + 7) >> 3;
      v18 = (char *)(v7 + 1);
      do
      {
        v19 = *v18++;
        *v15++ = v19;
        --v17;
      }
      while (v17);
    }
    else
    {
      v18 = (char *)(v7 + 1);
    }
    v29 = v4 - v6;
    if (v4 > v6)
    {
      do
      {
        v31 = *v18++;
        v30 = v31;
        v32 = *v16++;
        *v15++ = v30 - v32;
        --v29;
      }
      while (v29);
    }
  }
  else
  {
    v14 = *(_BYTE **)(a1 + 544);
    if ((v3 & 0x10) != 0)
    {
      v20 = *(_BYTE **)(a1 + 552);
      *v20 = 1;
      v21 = v20 + 1;
      v22 = (char *)(v7 + 1);
      v23 = 0;
      if ((_DWORD)v5)
      {
        v24 = v6;
        v25 = (char *)(v7 + 1);
        do
        {
          v27 = *v25++;
          LODWORD(v26) = v27;
          *v21++ = v27;
          v28 = 256 - v27;
          if ((v27 & 0x80u) == 0)
            v26 = v26;
          else
            v26 = v28;
          v23 += v26;
          --v24;
        }
        while (v24);
      }
      else
      {
        v25 = (char *)(v7 + 1);
      }
      if (v4 > v6)
      {
        v33 = v6 + 1;
        do
        {
          v35 = *v25++;
          v34 = v35;
          v36 = *v22++;
          v37 = v34 - v36;
          v38 = (char)v37;
          *v21++ = v37;
          v39 = v37;
          LODWORD(v40) = 256 - v37;
          if (v38 >= 0)
            v40 = v39;
          else
            v40 = v40;
          v23 += v40;
        }
        while (v23 <= v8 && v33++ < v4);
      }
      if (v23 < v8)
      {
        v42 = *(_QWORD *)(a1 + 560);
        if (v42)
        {
          *(_QWORD *)(a1 + 552) = v42;
          *(_QWORD *)(a1 + 560) = v20;
        }
        v8 = v23;
        v14 = v20;
      }
    }
  }
  if (v3 == 32)
  {
    v14 = *(_BYTE **)(a1 + 552);
    *v14 = 2;
    if (!v4)
      goto LABEL_158;
    v43 = 0;
    v44 = *(_QWORD *)(a1 + 536) + 1;
    do
    {
      v14[v43 + 1] = *(_BYTE *)(v7 + 1 + v43) - *(_BYTE *)(v44 + v43);
      ++v43;
    }
    while (v4 != v43);
  }
  else if ((v3 & 0x20) != 0)
  {
    v45 = *(_BYTE **)(a1 + 552);
    *v45 = 2;
    v46 = 0;
    if (v4)
    {
      v47 = (char *)(v7 + 1);
      v48 = (char *)(*(_QWORD *)(a1 + 536) + 1);
      v49 = v45 + 1;
      v50 = v4 - 1;
      do
      {
        v52 = *v47++;
        v51 = v52;
        v53 = *v48++;
        v54 = v51 - v53;
        v55 = (char)v54;
        *v49++ = v54;
        v56 = v54;
        LODWORD(v57) = 256 - v54;
        if (v55 >= 0)
          v57 = v56;
        else
          v57 = v57;
        v46 += v57;
      }
      while (v46 <= v8 && v50-- != 0);
    }
    if (v46 < v8)
    {
      v59 = *(_QWORD *)(a1 + 560);
      if (v59)
      {
        *(_QWORD *)(a1 + 552) = v59;
        *(_QWORD *)(a1 + 560) = v45;
      }
      v8 = v46;
      v14 = v45;
    }
  }
  if (v3 == 64)
  {
    v14 = *(_BYTE **)(a1 + 552);
    *v14 = 3;
    v60 = v14 + 1;
    v61 = (unsigned __int8 *)(*(_QWORD *)(a1 + 536) + 1);
    v62 = (unsigned __int8 *)(v7 + 1);
    if ((_DWORD)v5)
    {
      v63 = (unint64_t)(v5 + 7) >> 3;
      v64 = (char *)(v7 + 1);
      do
      {
        v66 = *v64++;
        v65 = v66;
        v67 = *v61++;
        *v60++ = v65 - (v67 >> 1);
        LODWORD(v63) = v63 - 1;
      }
      while ((_DWORD)v63);
    }
    else
    {
      v64 = (char *)(v7 + 1);
    }
    if (v4 > v6)
    {
      v82 = v6 + 1;
      do
      {
        v84 = *v64++;
        v83 = v84;
        v86 = *v61++;
        v85 = v86;
        v87 = *v62++;
        *v60++ = v83 - ((v87 + v85) >> 1);
        v99 = v4 > v82++;
      }
      while (v99);
    }
  }
  else if ((v3 & 0x40) != 0)
  {
    v68 = *(_BYTE **)(a1 + 552);
    *v68 = 3;
    v69 = v68 + 1;
    v70 = (unsigned __int8 *)(*(_QWORD *)(a1 + 536) + 1);
    v71 = (unsigned __int8 *)(v7 + 1);
    v72 = 0;
    if ((_DWORD)v5)
    {
      v73 = (unint64_t)(v5 + 7) >> 3;
      v74 = (char *)(v7 + 1);
      do
      {
        v76 = *v74++;
        v75 = v76;
        v77 = *v70++;
        v78 = v75 - (v77 >> 1);
        v79 = (char)v78;
        *v69++ = v78;
        v80 = v78;
        LODWORD(v81) = 256 - v78;
        if (v79 >= 0)
          v81 = v80;
        else
          v81 = v81;
        v72 += v81;
        LODWORD(v73) = v73 - 1;
      }
      while ((_DWORD)v73);
    }
    else
    {
      v74 = (char *)(v7 + 1);
    }
    if (v4 > v6)
    {
      v88 = v6 + 1;
      do
      {
        v90 = *v74++;
        v89 = v90;
        v92 = *v70++;
        v91 = v92;
        v93 = *v71++;
        v94 = v89 - ((v93 + v91) >> 1);
        v95 = (char)v94;
        *v69++ = v94;
        v96 = v94;
        LODWORD(v97) = 256 - v94;
        if (v95 >= 0)
          v97 = v96;
        else
          v97 = v97;
        v72 += v97;
        v98 = v88++;
        v99 = v72 <= v8 && v4 > v98;
      }
      while (v99);
    }
    if (v72 < v8)
    {
      v100 = *(_QWORD *)(a1 + 560);
      if (v100)
      {
        *(_QWORD *)(a1 + 552) = v100;
        *(_QWORD *)(a1 + 560) = v68;
      }
      v8 = v72;
      v14 = v68;
    }
  }
  if (v3 == 128)
  {
    v14 = *(_BYTE **)(a1 + 552);
    *v14 = 4;
    v101 = v14 + 1;
    v102 = *(_QWORD *)(a1 + 536);
    v103 = v6;
    v104 = (unsigned __int8 *)(v102 + 1);
    v105 = (unsigned __int8 *)(v7 + 1);
    if ((_DWORD)v5)
    {
      v106 = 0;
      do
      {
        v101[v106] = v105[v106] - v104[v106];
        ++v106;
      }
      while (v103 != v106);
      v107 = &v105[v106];
      v108 = &v104[v106];
      v101 += v106;
    }
    else
    {
      v108 = (unsigned __int8 *)(v102 + 1);
      v107 = v105;
    }
    v99 = v4 > v103;
    v123 = v4 - v103;
    if (v99)
    {
      do
      {
        v125 = *v108++;
        v124 = v125;
        v127 = *v104++;
        v126 = v127;
        v129 = *v105++;
        v128 = v129;
        v130 = v129 - v126;
        if (v124 - v126 >= 0)
          v131 = v124 - v126;
        else
          v131 = v126 - v124;
        if (v130 >= 0)
          v132 = v130;
        else
          v132 = -v130;
        v133 = v130 + v124 - v126;
        if (v133 < 0)
          v133 = -v133;
        if (v132 > v133)
          LOBYTE(v124) = v126;
        if (v131 <= v133 && v131 <= v132)
          LOBYTE(v124) = v128;
        v135 = *v107++;
        *v101++ = v135 - v124;
        --v123;
      }
      while (v123);
    }
  }
  else if ((v3 & 0x80) != 0)
  {
    v109 = *(_BYTE **)(a1 + 552);
    *v109 = 4;
    v110 = v109 + 1;
    v111 = *(_QWORD *)(a1 + 536);
    v112 = v6;
    v113 = (unsigned __int8 *)(v111 + 1);
    v114 = (unsigned __int8 *)(v7 + 1);
    if ((_DWORD)v5)
    {
      v115 = 0;
      v116 = 0;
      do
      {
        v117 = v114[v116] - v113[v116];
        v118 = (char)v117;
        v110[v116] = v117;
        v119 = v117;
        LODWORD(v120) = 256 - v117;
        if (v118 >= 0)
          v120 = v119;
        else
          v120 = v120;
        v115 += v120;
        ++v116;
      }
      while (v112 != v116);
      v121 = &v114[v116];
      v122 = &v113[v116];
      v110 += v116;
    }
    else
    {
      v115 = 0;
      v122 = (unsigned __int8 *)(v111 + 1);
      v121 = v114;
    }
    if (v4 > v112)
    {
      v136 = v112 + 1;
      do
      {
        v138 = *v122++;
        v137 = v138;
        v140 = *v113++;
        v139 = v140;
        v142 = *v114++;
        v141 = v142;
        v143 = v142 - v139;
        if (v137 - v139 >= 0)
          v144 = v137 - v139;
        else
          v144 = v139 - v137;
        if (v143 >= 0)
          v145 = v143;
        else
          v145 = -v143;
        v146 = v143 + v137 - v139;
        if (v146 < 0)
          v146 = -v146;
        if (v145 > v146)
          LOBYTE(v137) = v139;
        if (v144 <= v146 && v144 <= v145)
          LOBYTE(v137) = v141;
        v148 = *v121++;
        v149 = v148 - v137;
        v150 = (char)v149;
        *v110++ = v149;
        v151 = v149;
        LODWORD(v152) = 256 - v149;
        if (v150 >= 0)
          v152 = v151;
        else
          v152 = v152;
        v115 += v152;
      }
      while (v115 <= v8 && v136++ < v4);
    }
    if (v115 < v8)
    {
      v154 = *(_QWORD *)(a1 + 560);
      if (v154)
      {
        *(_QWORD *)(a1 + 552) = v154;
        *(_QWORD *)(a1 + 560) = v109;
      }
      v14 = v109;
    }
  }
LABEL_158:
  png_compress_IDAT(a1, (uint64_t)v14, *(_QWORD *)(a2 + 8) + 1, 0);
  v155 = *(_QWORD *)(a1 + 536);
  if (v155)
  {
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 544);
    *(_QWORD *)(a1 + 544) = v155;
  }
  png_write_finish_row(a1);
  v156 = *(_DWORD *)(a1 + 660) + 1;
  *(_DWORD *)(a1 + 660) = v156;
  if (*(_DWORD *)(a1 + 656) - 1 < v156)
    png_write_flush(a1);
}

uint64_t jinit_arith_decoder(uint64_t a1)
{
  uint64_t result;
  int v3;
  __int128 v4;

  result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_QWORD *)(a1 + 624) = result;
  *(_QWORD *)result = start_pass_0;
  *(_QWORD *)(result + 16) = finish_pass;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_OWORD *)(result + 272) = 0u;
  *(_OWORD *)(result + 288) = 0u;
  *(_OWORD *)(result + 240) = 0u;
  *(_OWORD *)(result + 256) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_BYTE *)(result + 336) = 113;
  if (*(_DWORD *)(a1 + 316))
  {
    result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, (uint64_t)*(int *)(a1 + 56) << 8);
    *(_QWORD *)(a1 + 192) = result;
    if (*(int *)(a1 + 56) >= 1)
    {
      v3 = 0;
      *(_QWORD *)&v4 = -1;
      *((_QWORD *)&v4 + 1) = -1;
      do
      {
        *(_OWORD *)(result + 224) = v4;
        *(_OWORD *)(result + 240) = v4;
        *(_OWORD *)(result + 192) = v4;
        *(_OWORD *)(result + 208) = v4;
        *(_OWORD *)(result + 160) = v4;
        *(_OWORD *)(result + 176) = v4;
        *(_OWORD *)(result + 128) = v4;
        *(_OWORD *)(result + 144) = v4;
        *(_OWORD *)(result + 96) = v4;
        *(_OWORD *)(result + 112) = v4;
        *(_OWORD *)(result + 64) = v4;
        *(_OWORD *)(result + 80) = v4;
        *(_OWORD *)(result + 32) = v4;
        *(_OWORD *)(result + 48) = v4;
        *(_OWORD *)result = v4;
        *(_OWORD *)(result + 16) = v4;
        result += 256;
        ++v3;
      }
      while (v3 < *(_DWORD *)(a1 + 56));
    }
  }
  return result;
}

uint64_t start_pass_0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  void *v19;
  uint64_t i;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;

  v1 = result;
  v2 = *(_QWORD *)(result + 624);
  v3 = *(_DWORD *)(result + 540);
  if (*(_DWORD *)(result + 316))
  {
    v4 = *(_DWORD *)(result + 544);
    if (v3)
    {
      if (v4 < v3 || v4 > *(_DWORD *)(result + 568) || *(_DWORD *)(result + 448) != 1)
        goto LABEL_18;
    }
    else if (v4)
    {
      goto LABEL_18;
    }
    v7 = *(_DWORD *)(result + 548);
    if (v7)
    {
      v8 = v7 - 1;
      if (v8 != *(_DWORD *)(result + 552))
        goto LABEL_18;
    }
    else
    {
      v8 = *(_DWORD *)(result + 552);
    }
    if (v8 < 14)
    {
LABEL_19:
      LODWORD(v6) = *(_DWORD *)(v1 + 448);
      if ((int)v6 >= 1)
      {
        v10 = 0;
        do
        {
          v11 = *(int *)(*(_QWORD *)(v1 + 8 * v10 + 456) + 4);
          v12 = (_DWORD *)(*(_QWORD *)(v1 + 192) + (v11 << 8));
          v13 = *(_DWORD *)(v1 + 540);
          if (v13 && (*v12 & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)v1;
            *(_DWORD *)(v14 + 40) = 118;
            *(_DWORD *)(v14 + 44) = v11;
            *(_DWORD *)(*(_QWORD *)v1 + 48) = 0;
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 8))(v1, 0xFFFFFFFFLL);
            v13 = *(_DWORD *)(v1 + 540);
          }
          if (v13 <= *(_DWORD *)(v1 + 544))
          {
            v15 = v13;
            do
            {
              if (*(_DWORD *)(v1 + 548) != (v12[v15] & ~((int)v12[v15] >> 31)))
              {
                v16 = *(_QWORD *)v1;
                *(_DWORD *)(v16 + 40) = 118;
                *(_DWORD *)(v16 + 44) = v11;
                *(_DWORD *)(*(_QWORD *)v1 + 48) = v15;
                result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 8))(v1, 0xFFFFFFFFLL);
              }
              v12[v15] = *(_DWORD *)(v1 + 552);
            }
            while (v15++ < *(int *)(v1 + 544));
          }
          ++v10;
          v6 = *(int *)(v1 + 448);
        }
        while (v10 < v6);
      }
      v18 = *(_DWORD *)(v1 + 540);
      if (*(_DWORD *)(v1 + 548))
      {
        if (v18)
          v19 = decode_mcu_AC_refine_0;
        else
          v19 = decode_mcu_DC_refine_0;
      }
      else if (v18)
      {
        v19 = decode_mcu_AC_first_0;
      }
      else
      {
        v19 = decode_mcu_DC_first_0;
      }
      *(_QWORD *)(v2 + 8) = v19;
      goto LABEL_38;
    }
LABEL_18:
    v9 = *(_QWORD *)result;
    *(_DWORD *)(v9 + 40) = 17;
    *(_DWORD *)(v9 + 44) = v3;
    *(_DWORD *)(*(_QWORD *)result + 48) = *(_DWORD *)(result + 544);
    *(_DWORD *)(*(_QWORD *)result + 52) = *(_DWORD *)(result + 548);
    *(_DWORD *)(*(_QWORD *)result + 56) = *(_DWORD *)(result + 552);
    result = (**(uint64_t (***)(uint64_t))result)(result);
    goto LABEL_19;
  }
  if (v3
    || *(_DWORD *)(result + 548)
    || *(_DWORD *)(result + 552)
    || (v33 = *(_DWORD *)(result + 544), v33 <= 63) && v33 != *(_DWORD *)(result + 568))
  {
    v5 = *(_QWORD *)result;
    *(_DWORD *)(v5 + 40) = 125;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(result, 0xFFFFFFFFLL);
  }
  *(_QWORD *)(v2 + 8) = decode_mcu_0;
  LODWORD(v6) = *(_DWORD *)(v1 + 448);
LABEL_38:
  if ((int)v6 >= 1)
  {
    for (i = 0; i < *(int *)(v1 + 448); ++i)
    {
      v21 = *(_QWORD *)(v1 + 8 * i + 456);
      if (!*(_DWORD *)(v1 + 316))
        goto LABEL_43;
      if (*(_DWORD *)(v1 + 540))
        goto LABEL_51;
      if (!*(_DWORD *)(v1 + 548))
      {
LABEL_43:
        v22 = *(_DWORD *)(v21 + 20);
        if (v22 >= 0x10)
        {
          v23 = *(_QWORD *)v1;
          *(_DWORD *)(v23 + 40) = 50;
          *(_DWORD *)(v23 + 44) = v22;
          (**(void (***)(uint64_t))v1)(v1);
        }
        v24 = v2 + 8 * (int)v22;
        v26 = *(_QWORD *)(v24 + 80);
        v25 = (uint64_t *)(v24 + 80);
        result = v26;
        if (!v26)
        {
          result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 64);
          *v25 = result;
        }
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)(result + 48) = 0u;
        *(_OWORD *)result = 0u;
        *(_OWORD *)(result + 16) = 0u;
        v27 = v2 + 4 * i;
        *(_DWORD *)(v27 + 44) = 0;
        *(_DWORD *)(v27 + 60) = 0;
        if (*(_DWORD *)(v1 + 316))
        {
          if (*(_DWORD *)(v1 + 540))
            goto LABEL_51;
        }
        else if (*(_DWORD *)(v1 + 568))
        {
LABEL_51:
          v28 = *(_DWORD *)(v21 + 24);
          if (v28 >= 0x10)
          {
            v29 = *(_QWORD *)v1;
            *(_DWORD *)(v29 + 40) = 50;
            *(_DWORD *)(v29 + 44) = v28;
            (**(void (***)(uint64_t))v1)(v1);
          }
          v30 = v2 + 8 * (int)v28;
          v32 = *(_QWORD *)(v30 + 208);
          v31 = (uint64_t *)(v30 + 208);
          result = v32;
          if (!v32)
          {
            result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 256);
            *v31 = result;
          }
          *(_OWORD *)(result + 224) = 0u;
          *(_OWORD *)(result + 240) = 0u;
          *(_OWORD *)(result + 192) = 0u;
          *(_OWORD *)(result + 208) = 0u;
          *(_OWORD *)(result + 160) = 0u;
          *(_OWORD *)(result + 176) = 0u;
          *(_OWORD *)(result + 128) = 0u;
          *(_OWORD *)(result + 144) = 0u;
          *(_OWORD *)(result + 96) = 0u;
          *(_OWORD *)(result + 112) = 0u;
          *(_OWORD *)(result + 64) = 0u;
          *(_OWORD *)(result + 80) = 0u;
          *(_OWORD *)(result + 32) = 0u;
          *(_OWORD *)(result + 48) = 0u;
          *(_OWORD *)result = 0u;
          *(_OWORD *)(result + 16) = 0u;
        }
      }
    }
  }
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = -16;
  *(_DWORD *)(v2 + 76) = *(_DWORD *)(v1 + 372);
  return result;
}

uint64_t decode_mcu_DC_first_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _BYTE *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _BYTE *v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    v4 = *(_DWORD *)(v3 + 76);
    if (!v4)
    {
      process_restart_0((uint64_t *)a1);
      v4 = *(_DWORD *)(v3 + 76);
    }
    *(_DWORD *)(v3 + 76) = v4 - 1;
  }
  if (*(_DWORD *)(v3 + 40) == -1 || *(int *)(a1 + 496) < 1)
    return 1;
  v5 = 0;
  while (1)
  {
    v6 = *(_WORD **)(a2 + 8 * v5);
    v7 = *(int *)(a1 + 4 * v5 + 500);
    v8 = *(int *)(*(_QWORD *)(a1 + 8 * v7 + 456) + 20);
    v9 = v3 + 8 * v8;
    v12 = *(_QWORD *)(v9 + 80);
    v11 = (_QWORD *)(v9 + 80);
    v10 = v12;
    v13 = v3 + 4 * v7;
    v15 = *(int *)(v13 + 60);
    v14 = (int *)(v13 + 60);
    v16 = v10 + v15;
    if (arith_decode(a1, (_BYTE *)(v10 + v15)))
      break;
    *v14 = 0;
    v20 = *(_DWORD *)(v3 + 4 * v7 + 44);
LABEL_30:
    *v6 = v20 << *(_DWORD *)(a1 + 552);
    if (++v5 >= *(int *)(a1 + 496))
      return 1;
  }
  v17 = arith_decode(a1, (_BYTE *)(v16 + 1));
  v18 = (_BYTE *)(v16 + v17 + 2);
  if (!arith_decode(a1, v18))
  {
    v19 = 0;
    goto LABEL_16;
  }
  v18 = (_BYTE *)(*v11 + 20);
  v19 = 1;
  if (!arith_decode(a1, v18))
  {
LABEL_16:
    if (v19 >= (int)((unint64_t)(1 << *(_BYTE *)(a1 + v8 + 324)) >> 1))
    {
      v21 = 4 * v17 + 4;
      if (v19 > (int)((unint64_t)(1 << *(_BYTE *)(a1 + v8 + 340)) >> 1))
        v21 = 4 * v17 + 12;
    }
    else
    {
      v21 = 0;
    }
    *v14 = v21;
    if (v19 >= 2)
    {
      v23 = v18 + 14;
      v22 = v19;
      do
      {
        if (arith_decode(a1, v23))
          v24 = v19 >> 1;
        else
          v24 = 0;
        v22 |= v24;
        v25 = v19 > 3;
        v19 >>= 1;
      }
      while (v25);
    }
    else
    {
      v22 = v19;
    }
    v26 = ~v22;
    if (!v17)
      v26 = v22 + 1;
    v27 = v3 + 4 * v7;
    v20 = *(_DWORD *)(v27 + 44) + v26;
    *(_DWORD *)(v27 + 44) = v20;
    goto LABEL_30;
  }
  while (1)
  {
    v19 *= 2;
    if (v19 == 0x8000)
      break;
    if (!arith_decode(a1, ++v18))
      goto LABEL_16;
  }
  v28 = *(_QWORD *)a1;
  *(_DWORD *)(v28 + 40) = 117;
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a1, 0xFFFFFFFFLL);
  *(_DWORD *)(v3 + 40) = -1;
  return 1;
}

uint64_t decode_mcu_AC_first_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  _BYTE *v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      process_restart_0((uint64_t *)a1);
      v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) != -1)
  {
    v6 = *(_QWORD *)(a1 + 560);
    v7 = *(int *)(*(_QWORD *)(a1 + 456) + 24);
    v8 = *(_DWORD *)(a1 + 540) - 1;
    v9 = (uint64_t *)(v4 + 8 * v7 + 208);
    v28 = *a2;
    v26 = (unsigned __int8 *)(a1 + v7 + 356);
    v27 = v6;
    do
    {
      v10 = *v9;
      if (arith_decode(a1, (_BYTE *)(*v9 + 3 * v8)))
        break;
      v11 = (_BYTE *)(v10 + 3 * v8 + 2);
      v12 = (int *)(v6 + 4 * (v8 + 1));
      while (1)
      {
        v13 = v8 + 1;
        if (arith_decode(a1, v11 - 1))
          break;
        v11 += 3;
        ++v12;
        ++v8;
        if (v13 >= *(_DWORD *)(a1 + 544))
          goto LABEL_32;
      }
      v14 = arith_decode(a1, (_BYTE *)(v4 + 336));
      if (arith_decode(a1, v11))
      {
        if (arith_decode(a1, v11))
        {
          v15 = *v9;
          v16 = 217;
          if (v8 < *v26)
            v16 = 189;
          v17 = (_BYTE *)(v15 + v16 + 14);
          v18 = 2;
          if (arith_decode(a1, (_BYTE *)(v15 + v16)))
          {
            while (1)
            {
              v18 *= 2;
              if (v18 == 0x8000)
                break;
              v19 = arith_decode(a1, v17 - 13);
              ++v17;
              if (!v19)
              {
                if (!v18)
                  goto LABEL_28;
                goto LABEL_20;
              }
            }
LABEL_32:
            v24 = *(_QWORD *)a1;
            *(_DWORD *)(v24 + 40) = 117;
            (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, 0xFFFFFFFFLL);
            *(_DWORD *)(v4 + 40) = -1;
            return 1;
          }
LABEL_20:
          v20 = v18;
          do
          {
            if (arith_decode(a1, v17))
              v21 = v20 >> 1;
            else
              v21 = 0;
            v18 |= v21;
            v22 = v20 > 3;
            v20 >>= 1;
          }
          while (v22);
        }
        else
        {
          v18 = 1;
        }
      }
      else
      {
        v18 = 0;
      }
LABEL_28:
      v23 = ~v18;
      if (!v14)
        v23 = v18 + 1;
      v6 = v27;
      *(_WORD *)(v28 + 2 * *v12) = v23 << *(_DWORD *)(a1 + 552);
      v8 = v13;
    }
    while (v13 < *(_DWORD *)(a1 + 544));
  }
  return 1;
}

uint64_t decode_mcu_DC_refine_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;

  v4 = *(_QWORD *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      process_restart_0((uint64_t *)a1);
      v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(int *)(a1 + 496) >= 1)
  {
    v6 = 0;
    v7 = (_BYTE *)(v4 + 336);
    v8 = 1 << *(_DWORD *)(a1 + 552);
    do
    {
      if (arith_decode(a1, v7))
        **(_WORD **)(a2 + 8 * v6) |= v8;
      ++v6;
    }
    while (v6 < *(int *)(a1 + 496));
  }
  return 1;
}

uint64_t decode_mcu_AC_refine_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *i;
  uint64_t v17;
  __int16 *v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  int v24;

  v4 = *(_QWORD *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      process_restart_0((uint64_t *)a1);
      v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) != -1)
  {
    v6 = *(_QWORD *)(a1 + 560);
    v7 = *a2;
    v24 = 1 << *(_DWORD *)(a1 + 552);
    v8 = *(int *)(a1 + 544);
    do
    {
      if (*(_WORD *)(v7 + 2 * *(int *)(v6 + 4 * v8)))
        break;
      --v8;
    }
    while ((_DWORD)v8);
    v9 = *(_DWORD *)(a1 + 540) - 1;
    v10 = (uint64_t *)(v4 + 8 * *(int *)(*(_QWORD *)(a1 + 456) + 24) + 208);
    v11 = v6 + 4;
    do
    {
      v12 = *v10;
      v13 = 3 * v9;
      if (v9 >= (int)v8 && arith_decode(a1, (_BYTE *)(v12 + v13)))
        break;
      v14 = v13;
      v15 = v9++;
      for (i = (_BYTE *)(v12 + v14 + 2); ; i += 3)
      {
        v17 = *(int *)(v11 + 4 * v15);
        if (*(_WORD *)(v7 + 2 * v17))
          break;
        if (arith_decode(a1, i - 1))
        {
          v18 = (__int16 *)(v7 + 2 * v17);
          v21 = arith_decode(a1, (_BYTE *)(v4 + 336));
          v20 = v24;
          if (v21)
            v20 = -(__int16)v24;
          goto LABEL_23;
        }
        ++v15;
        ++v9;
        if (v15 >= *(int *)(a1 + 544))
        {
          v22 = *(_QWORD *)a1;
          *(_DWORD *)(v22 + 40) = 117;
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, 0xFFFFFFFFLL);
          *(_DWORD *)(v4 + 40) = -1;
          return 1;
        }
      }
      if (!arith_decode(a1, i))
        continue;
      v18 = (__int16 *)(v7 + 2 * v17);
      v19 = *v18;
      v20 = v19 < 0 ? v19 - v24 : v19 + v24;
LABEL_23:
      *v18 = v20;
    }
    while (*(_DWORD *)(a1 + 544) > v9);
  }
  return 1;
}

uint64_t decode_mcu_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _BYTE *v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _BYTE *v33;
  int *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;

  v4 = *(_QWORD *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    v5 = *(_DWORD *)(v4 + 76);
    if (!v5)
    {
      process_restart_0((uint64_t *)a1);
      v5 = *(_DWORD *)(v4 + 76);
    }
    *(_DWORD *)(v4 + 76) = v5 - 1;
  }
  if (*(_DWORD *)(v4 + 40) == -1 || *(int *)(a1 + 496) < 1)
    return 1;
  v6 = 0;
  v49 = *(_QWORD *)(a1 + 560);
  v48 = a2;
  while (1)
  {
    v50 = *(_WORD **)(a2 + 8 * v6);
    v7 = *(int *)(a1 + 4 * v6 + 500);
    v8 = *(_QWORD *)(a1 + 8 * v7 + 456);
    v9 = *(int *)(v8 + 20);
    v10 = v4 + 8 * v9;
    v13 = *(_QWORD *)(v10 + 80);
    v12 = (_QWORD *)(v10 + 80);
    v11 = v13;
    v14 = v4 + 4 * v7;
    v16 = *(int *)(v14 + 60);
    v15 = (int *)(v14 + 60);
    v17 = v11 + v16;
    if (arith_decode(a1, (_BYTE *)(v11 + v16)))
      break;
    *v15 = 0;
    v21 = *(_DWORD *)(v4 + 4 * v7 + 44);
LABEL_30:
    *v50 = v21;
    if (*(_DWORD *)(a1 + 568))
    {
      v29 = 0;
      v30 = *(int *)(v8 + 24);
      v31 = (uint64_t *)(v4 + 8 * v30 + 208);
      v46 = (unsigned __int8 *)(a1 + v30 + 356);
      do
      {
        v32 = *v31;
        if (arith_decode(a1, (_BYTE *)(*v31 + 3 * v29)))
          break;
        v33 = (_BYTE *)(v32 + 3 * v29 + 2);
        v34 = (int *)(v49 + 4 * (v29 + 1));
        while (1)
        {
          v35 = v29 + 1;
          if (arith_decode(a1, v33 - 1))
            break;
          v33 += 3;
          ++v34;
          ++v29;
          if (v35 >= *(_DWORD *)(a1 + 568))
            goto LABEL_58;
        }
        v47 = arith_decode(a1, (_BYTE *)(v4 + 336));
        if (arith_decode(a1, v33))
        {
          if (arith_decode(a1, v33))
          {
            v36 = *v31;
            v37 = 217;
            if (v29 < *v46)
              v37 = 189;
            v38 = (_BYTE *)(v36 + v37 + 14);
            v39 = 2;
            if (arith_decode(a1, (_BYTE *)(v36 + v37)))
            {
              while (1)
              {
                v39 *= 2;
                if (v39 == 0x8000)
                  goto LABEL_58;
                v40 = arith_decode(a1, v38 - 13);
                ++v38;
                if (!v40)
                {
                  if (!v39)
                    goto LABEL_53;
                  break;
                }
              }
            }
            v41 = v39;
            do
            {
              if (arith_decode(a1, v38))
                v42 = v41 >> 1;
              else
                LOWORD(v42) = 0;
              LOWORD(v39) = v42 | v39;
              v26 = v41 > 3;
              v41 >>= 1;
            }
            while (v26);
          }
          else
          {
            LOWORD(v39) = 1;
          }
        }
        else
        {
          LOWORD(v39) = 0;
        }
LABEL_53:
        v43 = ~(_WORD)v39;
        if (!v47)
          v43 = v39 + 1;
        v50[*v34] = v43;
        v29 = v35;
      }
      while (v35 < *(_DWORD *)(a1 + 568));
    }
    ++v6;
    a2 = v48;
    if (v6 >= *(int *)(a1 + 496))
      return 1;
  }
  v18 = arith_decode(a1, (_BYTE *)(v17 + 1));
  v19 = (_BYTE *)(v17 + v18 + 2);
  if (!arith_decode(a1, v19))
  {
    v20 = 0;
    goto LABEL_16;
  }
  v19 = (_BYTE *)(*v12 + 20);
  v20 = 1;
  if (!arith_decode(a1, v19))
  {
LABEL_16:
    if (v20 >= (int)((unint64_t)(1 << *(_BYTE *)(a1 + v9 + 324)) >> 1))
    {
      v22 = 4 * v18 + 4;
      if (v20 > (int)((unint64_t)(1 << *(_BYTE *)(a1 + v9 + 340)) >> 1))
        v22 = 4 * v18 + 12;
    }
    else
    {
      v22 = 0;
    }
    *v15 = v22;
    if (v20 >= 2)
    {
      v24 = v19 + 14;
      v23 = v20;
      do
      {
        if (arith_decode(a1, v24))
          v25 = v20 >> 1;
        else
          v25 = 0;
        v23 |= v25;
        v26 = v20 > 3;
        v20 >>= 1;
      }
      while (v26);
    }
    else
    {
      v23 = v20;
    }
    v27 = ~v23;
    if (!v18)
      v27 = v23 + 1;
    v28 = v4 + 4 * v7;
    v21 = *(_DWORD *)(v28 + 44) + v27;
    *(_DWORD *)(v28 + 44) = v21;
    goto LABEL_30;
  }
  while (1)
  {
    v20 *= 2;
    if (v20 == 0x8000)
      break;
    if (!arith_decode(a1, ++v19))
      goto LABEL_16;
  }
LABEL_58:
  v44 = *(_QWORD *)a1;
  *(_DWORD *)(v44 + 40) = 117;
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(a1, 0xFFFFFFFFLL);
  *(_DWORD *)(v4 + 40) = -1;
  return 1;
}

uint64_t process_restart_0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;

  v2 = a1[78];
  result = (*(uint64_t (**)(void))(a1[77] + 16))();
  if (!(_DWORD)result)
  {
    v4 = *a1;
    *(_DWORD *)(v4 + 40) = 25;
    result = (*(uint64_t (**)(uint64_t *))v4)(a1);
  }
  if (*((int *)a1 + 112) >= 1)
  {
    for (i = 0; i < *((int *)a1 + 112); ++i)
    {
      v6 = a1[i + 57];
      if (!*((_DWORD *)a1 + 79))
        goto LABEL_8;
      if (*((_DWORD *)a1 + 135))
        goto LABEL_10;
      if (!*((_DWORD *)a1 + 137))
      {
LABEL_8:
        v7 = *(_OWORD **)(v2 + 8 * *(int *)(v6 + 20) + 80);
        v7[2] = 0uLL;
        v7[3] = 0uLL;
        *v7 = 0uLL;
        v7[1] = 0uLL;
        v8 = v2 + 4 * i;
        *(_DWORD *)(v8 + 44) = 0;
        *(_DWORD *)(v8 + 60) = 0;
        if (!*((_DWORD *)a1 + 79))
        {
          if (!*((_DWORD *)a1 + 142))
            continue;
LABEL_10:
          v9 = *(_OWORD **)(v2 + 8 * *(int *)(v6 + 24) + 208);
          v9[14] = 0uLL;
          v9[15] = 0uLL;
          v9[12] = 0uLL;
          v9[13] = 0uLL;
          v9[10] = 0uLL;
          v9[11] = 0uLL;
          v9[8] = 0uLL;
          v9[9] = 0uLL;
          v9[6] = 0uLL;
          v9[7] = 0uLL;
          v9[4] = 0uLL;
          v9[5] = 0uLL;
          v9[2] = 0uLL;
          v9[3] = 0uLL;
          *v9 = 0uLL;
          v9[1] = 0uLL;
          continue;
        }
        if (*((_DWORD *)a1 + 135))
          goto LABEL_10;
      }
    }
  }
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 40) = -16;
  *(_DWORD *)(v2 + 76) = *((_DWORD *)a1 + 93);
  return result;
}

uint64_t arith_decode(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  unsigned int byte;
  int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v22;

  v3 = *(_QWORD *)(a1 + 624);
  v4 = *(_QWORD *)(v3 + 32);
  if (v4 >= 0x8000)
  {
    v6 = *(_DWORD *)(v3 + 40);
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 40);
    do
    {
      v7 = v6--;
      *(_DWORD *)(v3 + 40) = v6;
      if (v7 <= 0)
      {
        if (*(_DWORD *)(a1 + 572))
        {
          byte = 0;
        }
        else
        {
          byte = get_byte((uint64_t *)a1);
          if (byte == 255)
          {
            do
              v9 = get_byte((uint64_t *)a1);
            while (v9 == 255);
            if ((_BYTE)v9)
            {
              v10 = v9;
              byte = 0;
              *(_DWORD *)(a1 + 572) = v10;
            }
            else
            {
              byte = 255;
            }
          }
          v6 = *(_DWORD *)(v3 + 40);
        }
        *(_QWORD *)(v3 + 24) = byte | (*(_QWORD *)(v3 + 24) << 8);
        *(_DWORD *)(v3 + 40) = v6 + 8;
        v13 = v6 + 9;
        v11 = v6 == -9;
        v12 = v6 <= -9;
        v6 += 8;
        if (v12)
        {
          *(_DWORD *)(v3 + 40) = v13;
          v6 = v13;
          if (v11)
          {
            v6 = 0;
            *(_QWORD *)(v3 + 32) = 0x8000;
          }
        }
      }
      v4 = 2 * *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 32) = v4;
    }
    while (v4 < 0x8000);
  }
  v14 = *a2;
  v15 = jpeg_aritab[v14 & 0x7F];
  v16 = v15 >> 16;
  v17 = v4 - (v15 >> 16);
  *(_QWORD *)(v3 + 32) = v17;
  v18 = v17 << v6;
  v19 = *(_QWORD *)(v3 + 24);
  v20 = __OFSUB__(v19, v18);
  v21 = v19 - v18;
  if (v21 < 0 == v20)
  {
    *(_QWORD *)(v3 + 24) = v21;
    *(_QWORD *)(v3 + 32) = v16;
    v22 = v14 & 0x80;
    if (v17 >= v16)
      goto LABEL_26;
LABEL_24:
    *a2 = v22 ^ BYTE1(v15);
    return v14 >> 7;
  }
  if (v17 < 0x8000)
  {
    v22 = v14 & 0x80;
    if (v17 < v16)
    {
LABEL_26:
      *a2 = v22 ^ v15;
      v14 ^= 0x80u;
      return v14 >> 7;
    }
    goto LABEL_24;
  }
  return v14 >> 7;
}

uint64_t get_byte(uint64_t *a1)
{
  unsigned __int8 **v1;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;

  v1 = (unsigned __int8 **)a1[5];
  if (!v1[1] && !((unsigned int (*)(void))v1[3])())
  {
    v3 = *a1;
    *(_DWORD *)(v3 + 40) = 25;
    (*(void (**)(uint64_t *))v3)(a1);
  }
  v4 = *v1;
  v5 = (uint64_t)(v1[1] - 1);
  ++*v1;
  v1[1] = (unsigned __int8 *)v5;
  return *v4;
}

uint64_t LZ4_compressBound(unsigned int a1)
{
  if (a1 <= 0x7E000000)
    return a1 + a1 / 0xFF + 16;
  else
    return 0;
}

uint64_t LZ4_compress()
{
  uint64_t v0;
  int v1;
  int v2;
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v29;
  _QWORD *v30;
  int v31;
  unsigned int v32;
  char v33;
  _DWORD *v34;
  _WORD *v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  _DWORD *v39;
  unint64_t v40;
  char v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  size_t v48;
  int v49;
  _BYTE *v50;
  int v51;
  unint64_t v52;
  unint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  _DWORD *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v76;
  _QWORD *v77;
  int v78;
  unsigned int v79;
  char v80;
  _DWORD *v81;
  _WORD *v82;
  uint64_t v83;
  _BYTE *v84;
  int v85;
  _DWORD *v86;
  unint64_t v87;
  char v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  _BYTE *v94;
  int v95;
  unint64_t v96;
  void *v97;
  char v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  _WORD v112[8192];
  uint64_t v113;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v113 = *MEMORY[0x24BDAC8D0];
  bzero(v112, 0x4000uLL);
  if (v2 > 65546)
  {
    if (v2 <= 0x7E000000)
    {
      v109 = v2;
      v54 = v5 + v2;
      v55 = v4;
      v56 = v54 - 12;
      v57 = (_DWORD *)(v5 + 2);
      v103 = v54 - 8;
      v105 = v54 - 5;
      v107 = v54;
      v101 = v54 - 6;
      v111 = (int)v55;
      v7 = v5;
LABEL_65:
      v58 = v7 + 1;
      v59 = *(_DWORD *)(v7 + 1);
      v60 = 68;
      while (1)
      {
        v61 = v57;
        v62 = (-1640531535 * v59) >> 20;
        v59 = *v57;
        v63 = *(unsigned int *)&v112[2 * v62];
        *(_DWORD *)&v112[2 * v62] = v58 - v5;
        if (v5 + v63 + 0xFFFF >= v58 && *(_DWORD *)(v5 + v63) == *(_DWORD *)v58)
          break;
        v64 = v60++ >> 6;
        v57 = (_DWORD *)((char *)v57 + v64);
        v58 = (unint64_t)v61;
        if ((unint64_t)v57 > v56)
          goto LABEL_115;
      }
      v65 = 0;
      v66 = v58 - v7;
      v67 = v58 - v7 - 14;
      v68 = (v58 << 32) - (v7 << 32);
      v69 = v58 - v7 - 15;
      do
      {
        v70 = v69;
        v71 = v65;
        v72 = v68;
        v73 = v58 + v65;
        v74 = v5 + v63 + v65;
        if (v73 <= v7 || v74 <= v5)
          break;
        v76 = *(unsigned __int8 *)(v74 - 1);
        --v69;
        v65 = v71 - 1;
        v68 -= 0x100000000;
      }
      while (*(unsigned __int8 *)(v73 - 1) == v76);
      v77 = v55 + 1;
      if (v66 + (int)v71 < 15)
      {
        *v55 = 16 * (v73 - v7);
      }
      else
      {
        *v55 = -16;
        if ((v66 + v71) <= 0x10D)
        {
          v80 = v71 + v58 - v7 - 15;
        }
        else
        {
          if (v70 >= 509)
            v78 = 509;
          else
            v78 = v70;
          v79 = v66 - v78 + v71 + 239;
          v99 = v67;
          memset(v77, 255, v79 / 0xFF + 1);
          v77 = &v55[v79 / 0xFFuLL + 2];
          v80 = v79 / 0xFF + v99 + v71;
        }
        *(_BYTE *)v77 = v80;
        v77 = (_QWORD *)((char *)v77 + 1);
      }
      v81 = (_DWORD *)(v5 + v63 + v71);
      v82 = (_WORD *)((char *)v77 + (v72 >> 32));
      do
      {
        v83 = *(_QWORD *)v7;
        v7 += 8;
        *v77++ = v83;
      }
      while (v77 < (_QWORD *)v82);
      while (1)
      {
        v84 = v55;
        *v82 = v73 - (_WORD)v81;
        v55 = v82 + 1;
        v85 = v73 + 4;
        v86 = v81 + 1;
        v7 = v73 + 4;
        if (v73 + 4 >= v56)
        {
LABEL_93:
          if (v7 < v103 && *v86 == *(_DWORD *)v7)
          {
            v7 += 4;
            ++v86;
          }
          if (v7 < v101 && *(unsigned __int16 *)v86 == *(unsigned __int16 *)v7)
          {
            v7 += 2;
            v86 = (_DWORD *)((char *)v86 + 2);
          }
          if (v7 < v105 && *(unsigned __int8 *)v86 == *(unsigned __int8 *)v7)
            ++v7;
        }
        else
        {
          while (1)
          {
            v87 = *(_QWORD *)v7 ^ *(_QWORD *)v86;
            if (v87)
              break;
            v7 += 8;
            v86 += 2;
            if (v7 >= v56)
              goto LABEL_93;
          }
          v7 += __clz(__rbit64(v87)) >> 3;
        }
        v88 = v7 - v85;
        v42 = __OFSUB__(v7 - v85, 15);
        v89 = v7 - v85 - 15;
        if (((v89 & 0x80000000) != 0) != v42)
        {
          *v84 += v88;
        }
        else
        {
          *v84 += 15;
          if (v89 >= 0x1FE)
          {
            v90 = v7 - v73 - 529;
            v91 = v90 / 0x1FE;
            memset(v82 + 1, 255, v91 * 2 + 2);
            v89 = v90 % 0x1FE;
            v55 = &v82[v91 + 2];
          }
          if (v89 >= 0xFF)
          {
            *v55++ = -1;
            LOBYTE(v89) = v89 + 1;
          }
          *v55++ = v89;
        }
        if (v7 > v56)
          break;
        *(_DWORD *)&v112[2 * ((-1640531535 * *(_DWORD *)(v7 - 2)) >> 20)] = v7 - 2 - v5;
        v92 = (-1640531535 * *(_DWORD *)v7) >> 20;
        v81 = (_DWORD *)(v5 + *(unsigned int *)&v112[2 * v92]);
        *(_DWORD *)&v112[2 * v92] = v7 - v5;
        if ((unint64_t)v81 + 0xFFFF < v7 || *v81 != *(_DWORD *)v7)
        {
          v57 = (_DWORD *)(v7 + 2);
          if (v7 + 2 <= v56)
            goto LABEL_65;
          break;
        }
        *v55 = 0;
        v82 = v55 + 1;
        v73 = v7;
      }
LABEL_115:
      v48 = v107 - v7;
      v93 = v107 - v7 - 15;
      LODWORD(v4) = v111;
      if ((int)v107 - (int)v7 < 15)
      {
        *v55 = 16 * v48;
      }
      else
      {
        *v55 = -16;
        v94 = v55 + 1;
        if (v48 >= 0x10E)
        {
          v95 = v5 + v109;
          if (v93 >= 509)
            v93 = 509;
          v96 = (v95 - (v93 + v7) + 239) / 0xFFuLL;
          memset(v94, 255, v96 + 1);
          LOBYTE(v93) = v95 - v7 + v96 - 14;
          v94 = &v55[v96 + 2];
        }
        *v94 = v93;
        v55 = v94;
      }
      v97 = v55 + 1;
      goto LABEL_125;
    }
    return 0;
  }
  if (v2 > 0x7E000000)
    return 0;
  v6 = v5 + v2;
  v7 = v5;
  v8 = v4;
  if (v2 >= 0xE)
  {
    v108 = v2;
    v8 = v4;
    v9 = v6 - 12;
    v10 = (_DWORD *)(v5 + 2);
    v102 = v6 - 8;
    v104 = v6 - 5;
    v106 = v5 + v2;
    v100 = v6 - 6;
    v110 = (int)v8;
    v7 = v5;
LABEL_5:
    v11 = v7 + 1;
    v12 = *(_DWORD *)(v7 + 1);
    v13 = 68;
    while (1)
    {
      v14 = v10;
      v15 = (-1640531535 * v12) >> 19;
      v12 = *v10;
      v16 = (unsigned __int16)v112[v15];
      v112[v15] = v11 - v5;
      if (v5 + v16 + 0xFFFF >= v11 && *(_DWORD *)(v5 + v16) == *(_DWORD *)v11)
        break;
      v17 = v13++ >> 6;
      v10 = (_DWORD *)((char *)v10 + v17);
      v11 = (unint64_t)v14;
      if ((unint64_t)v10 > v9)
        goto LABEL_55;
    }
    v18 = 0;
    v19 = v11 - v7;
    v20 = v11 - v7 - 14;
    v21 = (v11 << 32) - (v7 << 32);
    v22 = v11 - v7 - 15;
    do
    {
      v23 = v22;
      v24 = v18;
      v25 = v21;
      v26 = v11 + v18;
      v27 = v5 + v16 + v18;
      if (v26 <= v7 || v27 <= v5)
        break;
      v29 = *(unsigned __int8 *)(v27 - 1);
      --v22;
      v18 = v24 - 1;
      v21 -= 0x100000000;
    }
    while (*(unsigned __int8 *)(v26 - 1) == v29);
    v30 = v8 + 1;
    if (v19 + (int)v24 < 15)
    {
      *v8 = 16 * (v26 - v7);
    }
    else
    {
      *v8 = -16;
      if ((v19 + v24) <= 0x10D)
      {
        v33 = v24 + v11 - v7 - 15;
      }
      else
      {
        if (v23 >= 509)
          v31 = 509;
        else
          v31 = v23;
        v32 = v19 - v31 + v24 + 239;
        v98 = v20;
        memset(v30, 255, v32 / 0xFF + 1);
        v30 = &v8[v32 / 0xFFuLL + 2];
        v33 = v32 / 0xFF + v98 + v24;
      }
      *(_BYTE *)v30 = v33;
      v30 = (_QWORD *)((char *)v30 + 1);
    }
    v34 = (_DWORD *)(v5 + v16 + v24);
    v35 = (_WORD *)((char *)v30 + (v25 >> 32));
    do
    {
      v36 = *(_QWORD *)v7;
      v7 += 8;
      *v30++ = v36;
    }
    while (v30 < (_QWORD *)v35);
    while (1)
    {
      v37 = v8;
      *v35 = v26 - (_WORD)v34;
      v8 = v35 + 1;
      v38 = v26 + 4;
      v39 = v34 + 1;
      v7 = v26 + 4;
      if (v26 + 4 >= v9)
      {
LABEL_33:
        if (v7 < v102 && *v39 == *(_DWORD *)v7)
        {
          v7 += 4;
          ++v39;
        }
        if (v7 < v100 && *(unsigned __int16 *)v39 == *(unsigned __int16 *)v7)
        {
          v7 += 2;
          v39 = (_DWORD *)((char *)v39 + 2);
        }
        if (v7 < v104 && *(unsigned __int8 *)v39 == *(unsigned __int8 *)v7)
          ++v7;
      }
      else
      {
        while (1)
        {
          v40 = *(_QWORD *)v7 ^ *(_QWORD *)v39;
          if (v40)
            break;
          v7 += 8;
          v39 += 2;
          if (v7 >= v9)
            goto LABEL_33;
        }
        v7 += __clz(__rbit64(v40)) >> 3;
      }
      v41 = v7 - v38;
      v42 = __OFSUB__(v7 - v38, 15);
      v43 = v7 - v38 - 15;
      if (((v43 & 0x80000000) != 0) != v42)
      {
        *v37 += v41;
      }
      else
      {
        *v37 += 15;
        if (v43 >= 0x1FE)
        {
          v44 = v7 - v26 - 529;
          v45 = v44 / 0x1FE;
          memset(v35 + 1, 255, v45 * 2 + 2);
          v43 = v44 % 0x1FE;
          v8 = &v35[v45 + 2];
        }
        if (v43 >= 0xFF)
        {
          *v8++ = -1;
          LOBYTE(v43) = v43 + 1;
        }
        *v8++ = v43;
      }
      if (v7 > v9)
        break;
      v112[(-1640531535 * *(_DWORD *)(v7 - 2)) >> 19] = v7 - 2 - v5;
      v46 = *(_DWORD *)v7;
      v47 = (-1640531535 * *(_DWORD *)v7) >> 19;
      v34 = (_DWORD *)(v5 + (unsigned __int16)v112[v47]);
      v112[v47] = v7 - v5;
      if ((unint64_t)v34 + 0xFFFF < v7 || *v34 != v46)
      {
        v10 = (_DWORD *)(v7 + 2);
        if (v7 + 2 <= v9)
          goto LABEL_5;
        break;
      }
      *v8 = 0;
      v35 = v8 + 1;
      v26 = v7;
    }
LABEL_55:
    LODWORD(v4) = v110;
    v2 = v108;
    v6 = v106;
  }
  v48 = v6 - v7;
  v42 = __OFSUB__(v6 - v7, 15);
  v49 = v6 - v7 - 15;
  if (v49 < 0 != v42)
  {
    *v8 = 16 * v48;
  }
  else
  {
    *v8 = -16;
    v50 = v8 + 1;
    if (v48 >= 0x10E)
    {
      v51 = v5 + v2;
      if (v49 >= 509)
        v49 = 509;
      v52 = (v51 - (v49 + v7) + 239) / 0xFFuLL;
      memset(v50, 255, v52 + 1);
      LOBYTE(v49) = v51 - v7 + v52 - 14;
      v50 = &v8[v52 + 2];
    }
    *v50 = v49;
    v8 = v50;
  }
  v97 = v8 + 1;
LABEL_125:
  memcpy(v97, (const void *)v7, v48);
  return ((_DWORD)v97 + v48 - (_DWORD)v4);
}

uint64_t LZ4_decompress_safe(unsigned __int8 *a1, char *__dst, int a3, int a4)
{
  unsigned __int8 *v5;
  char *v6;
  char *v7;
  char *v8;
  unsigned __int8 *v9;
  char v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  unint64_t v16;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;

  if (a4)
  {
    v5 = &a1[a3];
    v6 = &__dst[a4];
    v7 = v6 - 12;
    v8 = __dst;
    v9 = a1;
    while (1)
    {
      v11 = *v9++;
      v10 = v11;
      v12 = (unint64_t)v11 >> 4;
      if ((_DWORD)v12 == 15)
      {
        v12 = 15;
        if (v9 < v5)
        {
          do
          {
            v14 = *v9++;
            v13 = v14;
            v12 += v14;
          }
          while (v9 < v5 && v13 == 255);
        }
      }
      v15 = &v8[v12];
      v16 = (unint64_t)&v9[v12];
      if (&v8[v12] > v7 || v16 > (unint64_t)(v5 - 8))
        break;
      do
      {
        v18 = *(_QWORD *)v9;
        v9 += 8;
        *(_QWORD *)v8 = v18;
        v8 += 8;
        v12 -= 8;
      }
      while (v8 < v15);
      v19 = &v9[v12];
      v20 = *(unsigned __int16 *)v19;
      v9 = v19 + 2;
      v21 = &v15[-v20];
      if (v21 < __dst)
        return (~(_DWORD)v9 + (_DWORD)a1);
      v22 = v10 & 0xF;
      if ((v10 & 0xF) == 0xF)
      {
        v22 = 15;
        do
        {
          if (v9 >= v5 - 6)
            break;
          v23 = *v9++;
          v22 += v23;
        }
        while (v23 == 255);
      }
      v24 = v15 - v21;
      if (v15 - v21 <= 7)
      {
        v29 = LZ4_decompress_generic_dec64table[v24];
        *v15 = *v21;
        v15[1] = v21[1];
        v15[2] = v21[2];
        v15[3] = v21[3];
        v30 = &v21[qword_2186FA7D8[v24]];
        *((_DWORD *)v15 + 1) = *(_DWORD *)v30;
        v25 = &v30[-v29];
      }
      else
      {
        v26 = *(_QWORD *)v21;
        v25 = v21 + 8;
        *(_QWORD *)v15 = v26;
      }
      v27 = v15 + 8;
      v8 = &v15[v22 + 4];
      if (v8 > v7)
      {
        if (v8 > v6 - 5)
          return (~(_DWORD)v9 + (_DWORD)a1);
        while (v27 < (_QWORD *)v6 - 1)
        {
          v31 = *(_QWORD *)v25;
          v25 += 8;
          *v27++ = v31;
        }
        while (v27 < (_QWORD *)v8)
        {
          v32 = *v25++;
          *(_BYTE *)v27 = v32;
          v27 = (_QWORD *)((char *)v27 + 1);
        }
      }
      else
      {
        do
        {
          v28 = *(_QWORD *)v25;
          v25 += 8;
          *v27++ = v28;
        }
        while (v27 < (_QWORD *)v8);
      }
    }
    if ((unsigned __int8 *)v16 == v5 && v15 <= v6)
    {
      memcpy(v8, v9, v12);
      return ((_DWORD)v15 - (_DWORD)__dst);
    }
    return (~(_DWORD)v9 + (_DWORD)a1);
  }
  else if (a3 == 1)
  {
    if (*a1)
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

void CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/NonMaximumSuppression.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_NonMaximumSuppression_PickTop_default_instance_ = (uint64_t)&off_24D93D110;
  qword_254FFA618 = 0;
  byte_254FFA620 = 0;
  dword_254FFA624 = 0;
  byte_254FFA628 = 1;
  CoreML::Specification::_NonMaximumSuppression_default_instance_ = (uint64_t)&off_24D93D1A8;
  *(_QWORD *)algn_254FFA638 = 0;
  qword_254FFA640 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFA648 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFA650 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFA658 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFA660 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FFA668 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FFA670 = 0;
  unk_254FFA678 = 0;
  dword_254FFA698 = 0;
  qword_254FFA690 = 0;
  byte_254FFA6A0 = 1;
}

void CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_21839F544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::NonMaximumSuppression_PickTop *CoreML::Specification::NonMaximumSuppression_PickTop::NonMaximumSuppression_PickTop(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  *(_QWORD *)this = &off_24D93D110;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::NonMaximumSuppression_PickTop *)&CoreML::Specification::_NonMaximumSuppression_PickTop_default_instance_)
    CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(this);
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  return this;
}

void sub_21839F5A8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NonMaximumSuppression_PickTop::~NonMaximumSuppression_PickTop(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  *(_QWORD *)this = &off_24D93D110;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D93D110;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::NonMaximumSuppression_PickTop *CoreML::Specification::NonMaximumSuppression_PickTop::New(CoreML::Specification::NonMaximumSuppression_PickTop *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::NonMaximumSuppression_PickTop *v3;

  v3 = (CoreML::Specification::NonMaximumSuppression_PickTop *)operator new();
  CoreML::Specification::NonMaximumSuppression_PickTop::NonMaximumSuppression_PickTop(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::NonMaximumSuppression_PickTop>(a2, v3);
  return v3;
}

void sub_21839F67C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NonMaximumSuppression_PickTop>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppression_PickTop>);
  return result;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::Clear(uint64_t this)
{
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::MergePartialFromCodedStream(CoreML::Specification::NonMaximumSuppression_PickTop *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  unint64_t Varint64Fallback;
  char v13;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v13 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((_BYTE *)this + 16) = Varint64Fallback != 0;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_BYTE *)(this + 16))
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(1, 1u, a2, a4);
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::ByteSizeLong(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  uint64_t v1;

  v1 = 2 * *((unsigned __int8 *)this + 16);
  *((_DWORD *)this + 5) = v1;
  return v1;
}

std::string *CoreML::Specification::NonMaximumSuppression_PickTop::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    v3->__r_.__value_.__s.__data_[16] = 1;
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression_PickTop::IsInitialized(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  return 1;
}

_QWORD *CoreML::Specification::NonMaximumSuppression_PickTop::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NonMaximumSuppression.PickTop");
}

CoreML::Specification::NonMaximumSuppression *CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(CoreML::Specification::NonMaximumSuppression *this)
{
  *(_QWORD *)this = &off_24D93D1A8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::NonMaximumSuppression *)&CoreML::Specification::_NonMaximumSuppression_default_instance_)
    CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 12) = 0;
  return this;
}

void sub_21839F8A4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NonMaximumSuppression::~NonMaximumSuppression(CoreML::Specification::NonMaximumSuppression *this)
{
  *(_QWORD *)this = &off_24D93D1A8;
  CoreML::Specification::NonMaximumSuppression::SharedDtor(this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::NonMaximumSuppression::~NonMaximumSuppression(this);
  JUMPOUT(0x219A19A08);
}

_QWORD *CoreML::Specification::NonMaximumSuppression::SharedDtor(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v1 = (uint64_t)this;
  v2 = this[2];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  v4 = *(_QWORD *)(v1 + 24);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    this = (_QWORD *)MEMORY[0x219A19A08](v4, 0x1012C40EC159624);
  }
  v6 = *(_QWORD *)(v1 + 32);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    this = (_QWORD *)MEMORY[0x219A19A08](v6, 0x1012C40EC159624);
  }
  v8 = *(_QWORD *)(v1 + 40);
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    this = (_QWORD *)MEMORY[0x219A19A08](v8, 0x1012C40EC159624);
  }
  v10 = *(_QWORD *)(v1 + 48);
  if ((uint64_t *)v10 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    this = (_QWORD *)MEMORY[0x219A19A08](v10, 0x1012C40EC159624);
  }
  v11 = *(_QWORD *)(v1 + 56);
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    this = (_QWORD *)MEMORY[0x219A19A08](v11, 0x1012C40EC159624);
  }
  v12 = *(_DWORD *)(v1 + 100);
  if (v12)
  {
    if (v12 == 1)
    {
      this = *(_QWORD **)(v1 + 80);
      if (this)
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
    }
    *(_DWORD *)(v1 + 100) = 0;
  }
  if (*(_DWORD *)(v1 + 104))
    return (_QWORD *)CoreML::Specification::NonMaximumSuppression::clear_ClassLabels(v1);
  return this;
}

uint64_t CoreML::Specification::NonMaximumSuppression::clear_ClassLabels(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 104);
  if (v2 == 101 || v2 == 100)
  {
    this = *(_QWORD *)(this + 88);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 104) = 0;
  return this;
}

uint64_t *CoreML::Specification::NonMaximumSuppression::default_instance(CoreML::Specification::NonMaximumSuppression *this)
{
  CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(this);
  return &CoreML::Specification::_NonMaximumSuppression_default_instance_;
}

CoreML::Specification::NonMaximumSuppression *CoreML::Specification::NonMaximumSuppression::New(CoreML::Specification::NonMaximumSuppression *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::NonMaximumSuppression *v3;

  v3 = (CoreML::Specification::NonMaximumSuppression *)operator new();
  CoreML::Specification::NonMaximumSuppression::NonMaximumSuppression(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::NonMaximumSuppression>(a2, v3);
  return v3;
}

void sub_21839FB94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40D18C2FB1);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NonMaximumSuppression>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppression>);
  return result;
}

uint64_t CoreML::Specification::NonMaximumSuppression::Clear(CoreML::Specification::NonMaximumSuppression *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v5 = *((_QWORD *)this + 5);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
  v6 = *((_QWORD *)this + 6);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v7 = *((_QWORD *)this + 7);
  if ((uint64_t *)v7 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  if (*((_DWORD *)this + 25) == 1)
  {
    v8 = *((_QWORD *)this + 10);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  *((_DWORD *)this + 25) = 0;
  return CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
}

uint64_t CoreML::Specification::NonMaximumSuppression::MergePartialFromCodedStream(CoreML::Specification::NonMaximumSuppression *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unsigned int TagFallback;
  unsigned int v17;
  std::string *v18;
  uint64_t result;
  std::string *v20;
  const char *size;
  CoreML::Specification::Int64Vector *v22;
  unint64_t *v23;
  unint64_t v24;
  CoreML::Specification::NonMaximumSuppression_PickTop *v25;
  CoreML::Specification::StringVector *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  int v35;
  char *v36;
  int VarintSizeAsIntFallback;
  char *v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  const char *v47;
  std::string **v48;
  std::string **v49;
  unint64_t v50;

  v48 = (std::string **)((char *)this + 48);
  v49 = (std::string **)((char *)this + 56);
  v5 = (std::string **)((char *)this + 40);
  v6 = (std::string **)((char *)this + 32);
  v7 = (std::string **)((char *)this + 24);
  v8 = (std::string **)((char *)this + 16);
  while (1)
  {
LABEL_2:
    v9 = *(unsigned __int8 **)a2;
    v10 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v10)
    {
      v12 = 0;
    }
    else
    {
      v11 = v9 + 1;
      v12 = *v9;
      if ((char)*v9 >= 1)
      {
        *(_QWORD *)a2 = v11;
        v13 = v12 | 0x100000000;
        if ((v13 & 0x100000000) == 0)
          goto LABEL_9;
        goto LABEL_17;
      }
      if ((unint64_t)v11 < v10)
      {
        v14 = *v11;
        if ((v12 & ~v14) >= 0x80)
        {
          *(_QWORD *)a2 = v9 + 2;
          v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
    v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v13 & 0x100000000) == 0)
      goto LABEL_9;
LABEL_17:
    v17 = v13 >> 3;
    if (v13 >> 3 > 0x6D)
      break;
    if (v17 == 1)
    {
      if (v13 != 10)
        goto LABEL_9;
      if (*((_DWORD *)this + 25) == 1)
      {
        v25 = (CoreML::Specification::NonMaximumSuppression_PickTop *)*((_QWORD *)this + 10);
      }
      else
      {
        *((_DWORD *)this + 25) = 1;
        v25 = (CoreML::Specification::NonMaximumSuppression_PickTop *)operator new();
        CoreML::Specification::NonMaximumSuppression_PickTop::NonMaximumSuppression_PickTop(v25);
        *((_QWORD *)this + 10) = v25;
      }
      v36 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v36 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v36;
        *(_QWORD *)a2 = v36 + 1;
      }
      v43 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v43 & 0x8000000000000000) != 0)
        return 0;
      v42 = v43;
      result = CoreML::Specification::NonMaximumSuppression_PickTop::MergePartialFromCodedStream(v25, (char **)a2, v44);
      if (!(_DWORD)result)
        return result;
    }
    else if (v17 == 100)
    {
      if (v13 != 34)
        goto LABEL_9;
      if (*((_DWORD *)this + 26) == 100)
      {
        v26 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 11);
      }
      else
      {
        CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
        *((_DWORD *)this + 26) = 100;
        v26 = (CoreML::Specification::StringVector *)operator new();
        CoreML::Specification::StringVector::StringVector(v26);
        *((_QWORD *)this + 11) = v26;
      }
      v38 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v38 < 0)
      {
        v39 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v39 < 0)
          return 0;
      }
      else
      {
        v39 = *v38;
        *(_QWORD *)a2 = v38 + 1;
      }
      v45 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v39);
      if ((v45 & 0x8000000000000000) != 0)
        return 0;
      v42 = v45;
      result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v26, (char **)a2, v46);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (v17 != 101 || v13 != 42)
        goto LABEL_9;
      if (*((_DWORD *)this + 26) == 101)
      {
        v22 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 11);
      }
      else
      {
        CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
        *((_DWORD *)this + 26) = 101;
        v22 = (CoreML::Specification::Int64Vector *)operator new();
        CoreML::Specification::Int64Vector::Int64Vector(v22);
        *((_QWORD *)this + 11) = v22;
      }
      v34 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v34 < 0)
      {
        v35 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v35 < 0)
          return 0;
      }
      else
      {
        v35 = *v34;
        *(_QWORD *)a2 = v34 + 1;
      }
      v40 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v35);
      if ((v40 & 0x8000000000000000) != 0)
        return 0;
      v42 = v40;
      result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v22, (char **)a2, v41);
      if (!(_DWORD)result)
        return result;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v42))
      return 0;
  }
  switch(v17)
  {
    case 0xC8u:
      if (v13 != 66)
        goto LABEL_9;
      v18 = *v8;
      if (*v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v18 = *v8;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v18);
      if (!(_DWORD)result)
        return result;
      v20 = *v8;
      if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v8)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
      }
      v47 = "CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName";
      goto LABEL_114;
    case 0xC9u:
      if (v13 != 74)
        goto LABEL_9;
      v27 = *v7;
      if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v27 = *v7;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v27);
      if (!(_DWORD)result)
        return result;
      v20 = *v7;
      if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v7)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
      }
      v47 = "CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName";
      goto LABEL_114;
    case 0xCAu:
      if (v13 != 82)
        goto LABEL_9;
      v28 = *v6;
      if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v28 = *v6;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v28);
      if (!(_DWORD)result)
        return result;
      v20 = *v6;
      if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v6)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
      }
      v47 = "CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName";
      goto LABEL_114;
    case 0xCBu:
      if (v13 != 90)
        goto LABEL_9;
      v29 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v29 = *v5;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v29);
      if (!(_DWORD)result)
        return result;
      v20 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      v47 = "CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName";
      goto LABEL_114;
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
      goto LABEL_9;
    case 0xD2u:
      if (v13 != 146)
        goto LABEL_9;
      v30 = *v48;
      if (*v48 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v48, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v30 = *v48;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v30);
      if (!(_DWORD)result)
        return result;
      v20 = *v48;
      if (SHIBYTE((*v48)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v48)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v48)->__r_.__value_.__r.__words[2]);
      }
      v47 = "CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName";
      goto LABEL_114;
    case 0xD3u:
      if (v13 != 154)
        goto LABEL_9;
      v31 = *v49;
      if (*v49 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v49, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v31 = *v49;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v31);
      if (!(_DWORD)result)
        return result;
      v20 = *v49;
      if (SHIBYTE((*v49)->__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
        size = (const char *)(*v49)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v49)->__r_.__value_.__r.__words[2]);
      }
      v47 = "CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName";
LABEL_114:
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v20, size, 0, (uint64_t)v47))return 0;
      goto LABEL_2;
    default:
      if (v17 != 110)
      {
        if (v17 != 111 || v13 != 121)
          goto LABEL_9;
        v50 = 0;
        v23 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
        {
          result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v50);
          if (!(_DWORD)result)
            return result;
          v24 = v50;
        }
        else
        {
          v24 = *v23;
          *(_QWORD *)a2 = v23 + 1;
        }
        *((_QWORD *)this + 9) = v24;
        goto LABEL_2;
      }
      if (v13 == 113)
      {
        v50 = 0;
        v32 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
        {
          result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v50);
          if (!(_DWORD)result)
            return result;
          v33 = v50;
        }
        else
        {
          v33 = *v32;
          *(_QWORD *)a2 = v32 + 1;
        }
        *((_QWORD *)this + 8) = v33;
        goto LABEL_2;
      }
LABEL_9:
      if ((_DWORD)v13)
        v15 = (v13 & 7) == 4;
      else
        v15 = 1;
      if (!v15)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v13, a3) & 1) == 0)return 0;
        goto LABEL_2;
      }
      return 1;
  }
}

void sub_2183A0388(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NonMaximumSuppression::SerializeWithCachedSizes(CoreML::Specification::NonMaximumSuppression *this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  double v7;
  double v8;
  _tc_google::protobuf::internal *v9;
  const char *v10;
  _tc_google::protobuf::internal *v11;
  const char *v12;
  _tc_google::protobuf::internal *v13;
  const char *v14;
  _tc_google::protobuf::internal *v15;
  const char *v16;
  _tc_google::protobuf::internal *v17;
  const char *v18;
  uint64_t result;
  const char *v20;

  if (*((_DWORD *)this + 25) == 1)
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *((_QWORD *)this + 10), a2, a4);
  v6 = *((_DWORD *)this + 26);
  if (v6 == 100)
  {
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, *((_QWORD *)this + 11), a2, a4);
    v6 = *((_DWORD *)this + 26);
  }
  if (v6 == 101)
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, *((_QWORD *)this + 11), a2, a4);
  v7 = *((double *)this + 8);
  if (v7 != 0.0)
    _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0x6E, a2, v7, a3);
  v8 = *((double *)this + 9);
  if (v8 != 0.0)
    _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0x6F, a2, v8, a3);
  v9 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v9 + 23) < 0)
  {
    v10 = (const char *)*((_QWORD *)v9 + 1);
    if (!v10)
      goto LABEL_17;
    v9 = *(_tc_google::protobuf::internal **)v9;
    goto LABEL_16;
  }
  v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((_BYTE *)v9 + 23))
  {
LABEL_16:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.confidenceInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(200, *((_QWORD *)this + 2), a2);
  }
LABEL_17:
  v11 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v11 + 23) < 0)
  {
    v12 = (const char *)*((_QWORD *)v11 + 1);
    if (!v12)
      goto LABEL_23;
    v11 = *(_tc_google::protobuf::internal **)v11;
    goto LABEL_22;
  }
  v12 = (const char *)*((unsigned __int8 *)v11 + 23);
  if (*((_BYTE *)v11 + 23))
  {
LABEL_22:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.coordinatesInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(201, *((_QWORD *)this + 3), a2);
  }
LABEL_23:
  v13 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 4);
  if (*((char *)v13 + 23) < 0)
  {
    v14 = (const char *)*((_QWORD *)v13 + 1);
    if (!v14)
      goto LABEL_29;
    v13 = *(_tc_google::protobuf::internal **)v13;
    goto LABEL_28;
  }
  v14 = (const char *)*((unsigned __int8 *)v13 + 23);
  if (*((_BYTE *)v13 + 23))
  {
LABEL_28:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, v14, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.iouThresholdInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(202, *((_QWORD *)this + 4), a2);
  }
LABEL_29:
  v15 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v15 + 23) < 0)
  {
    v16 = (const char *)*((_QWORD *)v15 + 1);
    if (!v16)
      goto LABEL_35;
    v15 = *(_tc_google::protobuf::internal **)v15;
    goto LABEL_34;
  }
  v16 = (const char *)*((unsigned __int8 *)v15 + 23);
  if (*((_BYTE *)v15 + 23))
  {
LABEL_34:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v15, v16, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.confidenceThresholdInputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(203, *((_QWORD *)this + 5), a2);
  }
LABEL_35:
  v17 = (_tc_google::protobuf::internal *)*((_QWORD *)this + 6);
  if (*((char *)v17 + 23) < 0)
  {
    v18 = (const char *)*((_QWORD *)v17 + 1);
    if (!v18)
      goto LABEL_41;
    v17 = *(_tc_google::protobuf::internal **)v17;
    goto LABEL_40;
  }
  v18 = (const char *)*((unsigned __int8 *)v17 + 23);
  if (*((_BYTE *)v17 + 23))
  {
LABEL_40:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v17, v18, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.confidenceOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(210, *((_QWORD *)this + 6), a2);
  }
LABEL_41:
  result = *((_QWORD *)this + 7);
  if (*(char *)(result + 23) < 0)
  {
    v20 = *(const char **)(result + 8);
    if (!v20)
      return result;
    result = *(_QWORD *)result;
    goto LABEL_46;
  }
  v20 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_46:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v20, 1, (uint64_t)"CoreML.Specification.NonMaximumSuppression.coordinatesOutputFeatureName");
    return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(211, *((_QWORD *)this + 7), a2);
  }
  return result;
}

uint64_t CoreML::Specification::NonMaximumSuppression::ByteSizeLong(CoreML::Specification::NonMaximumSuppression *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v9 = *((_QWORD *)this + 4);
  v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  v5 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_18:
  v12 = *((_QWORD *)this + 5);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  v5 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_23:
  v15 = *((_QWORD *)this + 6);
  v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_28;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_28;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if ((v16 & 0x80u) == 0)
    v17 = v16;
  v5 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_28:
  v18 = *((_QWORD *)this + 7);
  v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(_QWORD *)(v18 + 8))
      goto LABEL_33;
  }
  else if (!*(_BYTE *)(v18 + 23))
  {
    goto LABEL_33;
  }
  v20 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v20 = v19;
  v5 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_33:
  if (*((double *)this + 8) != 0.0)
    v5 += 10;
  if (*((double *)this + 9) == 0.0)
    v21 = v5;
  else
    v21 = v5 + 10;
  if (*((_DWORD *)this + 25) == 1)
  {
    v22 = *((_QWORD *)this + 10);
    v23 = *(unsigned __int8 *)(v22 + 16);
    *(_DWORD *)(v22 + 20) = 2 * v23;
    v21 += 2 * v23 + 2;
  }
  v24 = *((_DWORD *)this + 26);
  if (v24 == 101)
  {
    v25 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 11));
    goto LABEL_54;
  }
  if (v24 == 100)
  {
    v25 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 11));
LABEL_54:
    v21 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 24) = v21;
  return v21;
}

void CoreML::Specification::NonMaximumSuppression::MergeFrom(CoreML::Specification::NonMaximumSuppression *this, const CoreML::Specification::NonMaximumSuppression *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  double v17;
  double v18;
  uint64_t v19;
  CoreML::Specification::protobuf_NonMaximumSuppression_2eproto *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  CoreML::Specification::StringVector *v24;
  CoreML::Specification::Int64Vector *v25;
  CoreML::Specification::StringVector *v26;
  uint64_t *v27;
  CoreML::Specification::Int64Vector *v28;
  uint64_t *v29;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 3);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_QWORD *)a2 + 4);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_27;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_27;
  }
  v10 = (uint64_t *)*((_QWORD *)this + 4);
  if (v10 != (uint64_t *)v9)
  {
    if (v10 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, v9);
    else
      std::string::operator=(*((std::string **)this + 4), (const std::string *)v9);
  }
LABEL_27:
  v11 = *((_QWORD *)a2 + 5);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_35;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_35;
  }
  v12 = (uint64_t *)*((_QWORD *)this + 5);
  if (v12 != (uint64_t *)v11)
  {
    if (v12 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v11);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v11);
  }
LABEL_35:
  v13 = *((_QWORD *)a2 + 6);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(_QWORD *)(v13 + 8))
      goto LABEL_43;
  }
  else if (!*(_BYTE *)(v13 + 23))
  {
    goto LABEL_43;
  }
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  if (v14 != (uint64_t *)v13)
  {
    if (v14 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v13);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v13);
  }
LABEL_43:
  v15 = *((_QWORD *)a2 + 7);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_51;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_51;
  }
  v16 = (uint64_t *)*((_QWORD *)this + 7);
  if (v16 != (uint64_t *)v15)
  {
    if (v16 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v15);
    else
      std::string::operator=(*((std::string **)this + 7), (const std::string *)v15);
  }
LABEL_51:
  v17 = *((double *)a2 + 8);
  if (v17 != 0.0)
    *((double *)this + 8) = v17;
  v18 = *((double *)a2 + 9);
  if (v18 != 0.0)
    *((double *)this + 9) = v18;
  if (*((_DWORD *)a2 + 25) == 1)
  {
    if (*((_DWORD *)this + 25) == 1)
    {
      v19 = *((_QWORD *)this + 10);
    }
    else
    {
      *((_DWORD *)this + 25) = 1;
      v19 = operator new();
      v20 = CoreML::Specification::NonMaximumSuppression_PickTop::NonMaximumSuppression_PickTop((CoreML::Specification::NonMaximumSuppression_PickTop *)v19);
      *((_QWORD *)this + 10) = v19;
      if (*((_DWORD *)a2 + 25) != 1)
      {
        CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(v20);
        v21 = &CoreML::Specification::_NonMaximumSuppression_PickTop_default_instance_;
        goto LABEL_61;
      }
    }
    v21 = (uint64_t *)*((_QWORD *)a2 + 10);
LABEL_61:
    v22 = v21[1];
    if ((v22 & 1) != 0)
      _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v19 + 8), v22 & 0xFFFFFFFFFFFFFFFELL);
    if (*((_BYTE *)v21 + 16))
      *(_BYTE *)(v19 + 16) = 1;
  }
  v23 = *((_DWORD *)a2 + 26);
  if (v23 == 101)
  {
    if (*((_DWORD *)this + 26) == 101)
    {
      v25 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 11);
    }
    else
    {
      CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 26) = 101;
      v25 = (CoreML::Specification::Int64Vector *)operator new();
      v28 = (CoreML::Specification::Int64Vector *)CoreML::Specification::Int64Vector::Int64Vector(v25);
      *((_QWORD *)this + 11) = v25;
      if (*((_DWORD *)a2 + 26) != 101)
      {
        v29 = CoreML::Specification::Int64Vector::default_instance(v28);
        goto LABEL_79;
      }
    }
    v29 = (uint64_t *)*((_QWORD *)a2 + 11);
LABEL_79:
    CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v25, (const CoreML::Specification::GLMRegressor_DoubleArray *)v29);
    return;
  }
  if (v23 == 100)
  {
    if (*((_DWORD *)this + 26) == 100)
    {
      v24 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 11);
    }
    else
    {
      CoreML::Specification::NonMaximumSuppression::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 26) = 100;
      v24 = (CoreML::Specification::StringVector *)operator new();
      v26 = (CoreML::Specification::StringVector *)CoreML::Specification::StringVector::StringVector(v24);
      *((_QWORD *)this + 11) = v24;
      if (*((_DWORD *)a2 + 26) != 100)
      {
        v27 = CoreML::Specification::StringVector::default_instance(v26);
        goto LABEL_77;
      }
    }
    v27 = (uint64_t *)*((_QWORD *)a2 + 11);
LABEL_77:
    CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v24, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v27);
  }
}

void sub_2183A0CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NonMaximumSuppression::IsInitialized(CoreML::Specification::NonMaximumSuppression *this)
{
  return 1;
}

_QWORD *CoreML::Specification::NonMaximumSuppression::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NonMaximumSuppression");
}

CoreML::Specification::NonMaximumSuppression_PickTop *CoreML::Specification::NonMaximumSuppression_PickTop::New(CoreML::Specification::NonMaximumSuppression_PickTop *this)
{
  return CoreML::Specification::NonMaximumSuppression_PickTop::New(this, 0);
}

CoreML::Specification::NonMaximumSuppression *CoreML::Specification::NonMaximumSuppression::New(CoreML::Specification::NonMaximumSuppression *this)
{
  return CoreML::Specification::NonMaximumSuppression::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppression_PickTop>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NonMaximumSuppression>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_NonMaximumSuppression_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_STGCNCheckpoint_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_2183A1030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, turi::neural_net::model_spec *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25)
{
  void *v25;
  uint64_t v26;

  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a19, 0);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v26, a25);

  _Unwind_Resume(a1);
}

void sub_2183A1234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_39()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_TCActivityClassifierTrainer_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

CoreML::Result *CoreML::validate<(MLModelType)304>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreML::Result *result;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  result = CoreML::Result::Result((CoreML::Result *)a2);
  if (*(_QWORD *)(a1 + 16))
    v5 = *(uint64_t **)(a1 + 16);
  else
    v5 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*((int *)v5 + 6) >= 1)
  {
    v6 = 0;
    v7 = (void **)(a2 + 8);
    do
    {
      CoreML::validateSchemaTypesIsMultiArray(*(_QWORD *)(v5[4] + 8 * v6 + 8), 131104, 1, 2, (CoreML::Result *)&v8);
      *(_QWORD *)a2 = v8;
      if (*(char *)(a2 + 31) < 0)
        operator delete(*v7);
      *(_OWORD *)v7 = v9;
      *(_QWORD *)(a2 + 24) = v10;
      result = (CoreML::Result *)CoreML::Result::good((CoreML::Result *)a2);
      if ((result & 1) == 0)
        break;
      ++v6;
    }
    while (v6 < *((int *)v5 + 6));
  }
  return result;
}

void sub_2183A1494(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateSchemaTypesIsMultiArray@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, CoreML::Result *a5@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  const char *v21;
  CoreML::Specification::ArrayFeatureType *v22;
  CoreML::Specification::ArrayFeatureType *v23;
  uint64_t *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  const void **v28;
  size_t v29;
  char *locale;
  const void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  const char *v38;
  const char *v40;
  int v41;
  const char *v42;
  size_t v43;
  _QWORD *v44;
  _QWORD *v45;
  const void **v46;
  size_t v47;
  char *v48;
  const void *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  const char *v54;
  size_t v55;
  _QWORD *v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  size_t v59;
  _QWORD *v60;
  _QWORD *v61;
  const std::locale::facet *v62;
  uint64_t v63;
  std::locale v64;
  uint64_t v65;
  unsigned __int8 v66;
  _QWORD v67[2];
  _QWORD v68[11];
  char v69;
  uint64_t v70;
  std::locale v71;

  if (*(_QWORD *)(a1 + 32))
    v8 = *(uint64_t **)(a1 + 32);
  else
    v8 = &CoreML::Specification::_FeatureType_default_instance_;
  if (*((_DWORD *)v8 + 9) != 5)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Unsupported type \"", 18);
    v19 = *(uint64_t **)(a1 + 32);
    if (!v19)
      v19 = &CoreML::Specification::_FeatureType_default_instance_;
    v20 = *((int *)v19 + 9);
    if (v20 > 7)
      v21 = "INVALID";
    else
      v21 = off_24D93D260[v20];
    v25 = strlen(v21);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v21, v25);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\" for feature \"", 15);
    v28 = *(const void ***)(a1 + 16);
    if (*((char *)v28 + 23) >= 0)
      v29 = *((unsigned __int8 *)v28 + 23);
    else
      v29 = (size_t)v28[1];
    locale = (char *)&v64;
    std::string::basic_string[abi:ne180100]((uint64_t)&v64, v29 + 3);
    if ((v66 & 0x80u) != 0)
      locale = (char *)v64.__locale_;
    if (v29)
    {
      if (*((char *)v28 + 23) >= 0)
        v31 = v28;
      else
        v31 = *v28;
      memmove(locale, v31, v29);
    }
    *(_DWORD *)&locale[v29] = 2108962;
    if ((v66 & 0x80u) == 0)
      v32 = &v64;
    else
      v32 = v64.__locale_;
    if ((v66 & 0x80u) == 0)
      v33 = v66;
    else
      v33 = v65;
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v32, v33);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Should be of: ", 14);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"MLFeatureTypeType_multiArrayType", 32);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" with data type of: ", 20);
    switch(a2)
    {
      case 131104:
        v38 = "MLArrayDataTypeINT32";
        break;
      case 65600:
        v38 = "MLArrayDataTypeDOUBLE";
        break;
      case 65568:
        v38 = "MLArrayDataTypeFLOAT32";
        break;
      default:
        v38 = "INVALID";
        break;
    }
    v55 = strlen(v38);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v55);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(*v57 - 24)));
    v58 = std::locale::use_facet(&v71, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
    std::locale::~locale(&v71);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v66 < 0)
      operator delete(v64.__locale_);
    goto LABEL_78;
  }
  v9 = v8[3];
  if (*(_DWORD *)(v9 + 36) != a2)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
    v22 = (CoreML::Specification::ArrayFeatureType *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Unsupported array type \"", 24);
    v23 = v22;
    if (*((_DWORD *)v8 + 9) == 5)
      v24 = (uint64_t *)v8[3];
    else
      v24 = CoreML::Specification::ArrayFeatureType::default_instance(v22);
    v40 = "INVALID";
    v41 = *((_DWORD *)v24 + 9);
    if (v41 == 65568)
      v40 = "MLArrayDataTypeFLOAT32";
    if (v41 == 65600)
      v40 = "MLArrayDataTypeDOUBLE";
    if (v41 == 131104)
      v42 = "MLArrayDataTypeINT32";
    else
      v42 = v40;
    v43 = strlen(v42);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v42, v43);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\" for feature \"", 15);
    v46 = *(const void ***)(a1 + 16);
    if (*((char *)v46 + 23) >= 0)
      v47 = *((unsigned __int8 *)v46 + 23);
    else
      v47 = (size_t)v46[1];
    v48 = (char *)&v64;
    std::string::basic_string[abi:ne180100]((uint64_t)&v64, v47 + 3);
    if ((v66 & 0x80u) != 0)
      v48 = (char *)v64.__locale_;
    if (v47)
    {
      if (*((char *)v46 + 23) >= 0)
        v49 = v46;
      else
        v49 = *v46;
      memmove(v48, v49, v47);
    }
    *(_DWORD *)&v48[v47] = 2108962;
    if ((v66 & 0x80u) == 0)
      v50 = &v64;
    else
      v50 = v64.__locale_;
    if ((v66 & 0x80u) == 0)
      v51 = v66;
    else
      v51 = v65;
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v50, v51);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Should be of: ", 14);
    switch(a2)
    {
      case 131104:
        v54 = "MLArrayDataTypeINT32";
        break;
      case 65600:
        v54 = "MLArrayDataTypeDOUBLE";
        break;
      case 65568:
        v54 = "MLArrayDataTypeFLOAT32";
        break;
      default:
        v54 = "INVALID";
        break;
    }
    v59 = strlen(v54);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v59);
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)".", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(*v61 - 24)));
    v62 = std::locale::use_facet(&v71, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
    std::locale::~locale(&v71);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v66 < 0)
      operator delete(v64.__locale_);
LABEL_78:
    std::stringbuf::str();
    CoreML::Result::Result(a5, 8);
    goto LABEL_79;
  }
  v10 = *(_DWORD *)(v9 + 16);
  if (v10 >= a3 && v10 <= a4)
    return CoreML::Result::Result(a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Unsupported array rank ", 23);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" should be in range [", 21);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)".", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v64, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v64);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  CoreML::Result::Result(a5, 8);
LABEL_79:
  if ((char)v66 < 0)
    operator delete(v64.__locale_);
  v67[0] = *MEMORY[0x24BEDB7F0];
  v63 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v67 + *(_QWORD *)(v67[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v68[0] = v63;
  v68[1] = MEMORY[0x24BEDB848] + 16;
  if (v69 < 0)
    operator delete((void *)v68[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (CoreML::Result *)MEMORY[0x219A198F4](&v70);
}

void sub_2183A1B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_BayesianProbitRegressionValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

id turi::neural_net::convert_hwc_array_to_chw_data(uint64_t *a1)
{
  size_t v2;
  void *v3;
  void *v4;

  v2 = 4 * (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
  v3 = malloc_type_malloc(v2, 0x66E1F5CCuLL);
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytesNoCopy:length:freeWhenDone:", v3, v2, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t *))(*a1 + 24))(a1);
  turi::neural_net::convert_hwc_to_chw(a1, (uint64_t)v3);
  return v4;
}

void sub_2183A1CBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void turi::neural_net::convert_chw_data_to_hwc_array(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  char *v6;
  int v7;
  int v8;
  unint64_t v9;
  id v10;
  const float *v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _BYTE v18[16];
  unint64_t v19;
  unint64_t *v20;
  char *v21;
  uint64_t v22;

  v5 = a1;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v20, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(v21 - 24, v21 - 8, v21);
  v6 = (char *)v20;
  if (v20 == (unint64_t *)v21)
  {
    v9 = 1;
  }
  else
  {
    v7 = 1;
    do
    {
      v8 = *(_DWORD *)v6;
      v6 += 8;
      v7 *= v8;
    }
    while (v6 != v21);
    v9 = v7;
  }
  v10 = objc_retainAutorelease(v5);
  v11 = (const float *)objc_msgSend(v10, "bytes");
  turi::neural_net::external_float_array::external_float_array((turi::neural_net::external_float_array *)v18, v11, v9, v20, (v21 - (char *)v20) >> 3);
  std::vector<float>::vector(v16, v19);
  turi::neural_net::convert_chw_to_hwc((uint64_t)v18, (char *)v16[0]);
  *(_OWORD *)v14 = *(_OWORD *)v16;
  v15 = v17;
  v16[1] = 0;
  v17 = 0;
  v16[0] = 0;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  turi::neural_net::shared_float_array::wrap((uint64_t)v14, (uint64_t)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v20)
  {
    v21 = (char *)v20;
    operator delete(v20);
  }

}

void sub_2183A1E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  void *v18;
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a17)
    operator delete(a17);
  v21 = *(void **)(v19 - 72);
  if (v21)
  {
    *(_QWORD *)(v19 - 64) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>(char *__src, char *a2, char *a3)
{
  char *v4;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      v6 = *(_QWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_QWORD *)v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      v8 = *((_QWORD *)a3 - 1);
      v4 = __src + 8;
      v9 = a3 - 8 - __src;
      if (a3 - 8 != __src)
        memmove(__src + 8, __src, v9);
      *(_QWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(__src, a2, a3);
    }
  }
  return v4;
}

_QWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

void _GLOBAL__sub_I_mlc_utils_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

turi::neural_net::model_spec *turi::neural_net::model_spec::model_spec(turi::neural_net::model_spec *this)
{
  CoreML::Specification::NeuralNetwork *v2;

  v2 = (CoreML::Specification::NeuralNetwork *)operator new();
  CoreML::Specification::NeuralNetwork::NeuralNetwork(v2);
  *(_QWORD *)this = v2;
  return this;
}

void sub_2183A20C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40280AC348);
  _Unwind_Resume(a1);
}

uint64_t *turi::neural_net::model_spec::model_spec(uint64_t *a1, uint64_t a2)
{
  CoreML::Specification::NeuralNetwork *v4;
  _QWORD *v5;
  uint64_t v6;
  CoreML::Specification::NeuralNetwork *v7;
  std::vector<char> __p;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::vector<char>::size_type __n;
  _QWORD v20[2];
  uint64_t v21;
  CoreML::Specification::NeuralNetwork *v22;
  int v23;
  _QWORD v24[20];

  v24[19] = *MEMORY[0x24BDAC8D0];
  v4 = (CoreML::Specification::NeuralNetwork *)operator new();
  CoreML::Specification::NeuralNetwork::NeuralNetwork(v4);
  *a1 = (uint64_t)v4;
  std::ifstream::basic_ifstream(v20);
  if ((*((_BYTE *)&v22 + *(_QWORD *)(v20[0] - 24)) & 5) != 0)
  {
    *(_QWORD *)&v11 = a2;
  }
  std::istream::tellg();
  std::vector<char>::vector(&__p, __n);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  __n = 0;
  std::istream::seekg();
  v5 = (_QWORD *)std::istream::read();
  if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
  {
    v10 = a2;
  }
  v20[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x219A1948C](&v21);
  std::istream::~istream();
  MEMORY[0x219A198F4](v24);
  CoreML::Specification::Model::Model((CoreML::Specification::Model *)v20);
  if (!_tc_google::protobuf::MessageLite::ParseFromArray((_tc_google::protobuf::MessageLite *)v20, __p.__begin_, LODWORD(__p.__end_) - LODWORD(__p.__begin_)))
  {
    *(_QWORD *)&v11 = a2;
    turi::neural_net::model_spec::model_spec(std::string const&)::$_0::operator()();
  }
  v6 = *a1;
  if (v23 == 500)
  {
    v7 = v22;
  }
  else
  {
    CoreML::Specification::Model::clear_Type((uint64_t)v20);
    v23 = 500;
    v7 = (CoreML::Specification::NeuralNetwork *)operator new();
    CoreML::Specification::NeuralNetwork::NeuralNetwork(v7);
    v22 = v7;
  }
  CoreML::Specification::NeuralNetwork::Swap(v6, v7);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)v20);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  return a1;
}

void sub_2183A230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t *v30;
  uint64_t v31;
  uint64_t v33;

  MEMORY[0x219A19A08](v31, 0x10A1C40280AC348);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a30);
  if (__p)
    operator delete(__p);
  v33 = *v30;
  *v30 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  _Unwind_Resume(a1);
}

_QWORD *turi::neural_net::model_spec::model_spec(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void turi::neural_net::model_spec::~model_spec(turi::neural_net::model_spec *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void turi::neural_net::model_spec::export_params_view(turi::neural_net::model_spec *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = *(_QWORD *)(*(_QWORD *)this + 32);
  if (v3)
    v4 = (uint64_t *)(v3 + 8);
  else
    v4 = 0;
  v5 = *(int *)(*(_QWORD *)this + 24);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v6 -= 8;
    }
    while (v6);
  }
}

void sub_2183A2480(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::update_params(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (v3)
    v4 = (uint64_t *)(v3 + 8);
  else
    v4 = 0;
  v5 = *(int *)(*(_QWORD *)a1 + 24);
  if ((_DWORD)v5)
  {
    v8 = 8 * v5;
    do
    {
      v9 = *v4++;
      v8 -= 8;
    }
    while (v8);
  }
}

std::string *turi::neural_net::model_spec::add_relu(_QWORD *a1, std::string *a2, std::string *a3)
{
  CoreML::Specification::NeuralNetworkLayer *v5;
  std::string *v6;
  std::string *result;
  uint64_t v8;
  CoreML::Specification::ActivationReLU *v9;

  v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v6 = (std::string *)*((_QWORD *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v5 + 14, (uint64_t)a2);
  else
    std::string::operator=(v6, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, a3);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) == 130)
  {
    v8 = *((_QWORD *)v5 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 130;
    v8 = operator new();
    result = (std::string *)CoreML::Specification::ActivationParams::ActivationParams((CoreML::Specification::ActivationParams *)v8);
    *((_QWORD *)v5 + 16) = v8;
  }
  if (*(_DWORD *)(v8 + 28) != 10)
  {
    CoreML::Specification::ActivationParams::clear_NonlinearityType(v8);
    *(_DWORD *)(v8 + 28) = 10;
    v9 = (CoreML::Specification::ActivationReLU *)operator new();
    result = (std::string *)CoreML::Specification::ActivationReLU::ActivationReLU(v9);
    *(_QWORD *)(v8 + 16) = v9;
  }
  return result;
}

void sub_2183A2600(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::NeuralNetworkLayer::add_input(uint64_t a1, std::string *__str)
{
  _tc_google::protobuf::Arena **v4;
  int *v5;
  uint64_t v6;
  int v7;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_tc_google::protobuf::Arena **)(a1 + 16);
  v5 = *(int **)(a1 + 32);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 28);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 16), v7 + 1);
    v5 = *(int **)(a1 + 32);
    v7 = *v5;
    goto LABEL_7;
  }
  v6 = *(int *)(a1 + 24);
  v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 24) = v6 + 1;
    Aligned = *(std::string **)&v5[2 * v6 + 2];
    return std::string::operator=(Aligned, __str);
  }
  if (v7 == *(_DWORD *)(a1 + 28))
    goto LABEL_6;
LABEL_7:
  *v5 = v7 + 1;
  v9 = *v4;
  if (*v4)
  {
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    _tc_google::protobuf::Arena::AddListNode(v9, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    Aligned = (std::string *)operator new();
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return std::string::operator=(Aligned, __str);
}

std::string *CoreML::Specification::NeuralNetworkLayer::add_output(uint64_t a1, std::string *__str)
{
  _tc_google::protobuf::Arena **v4;
  int *v5;
  uint64_t v6;
  int v7;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_tc_google::protobuf::Arena **)(a1 + 40);
  v5 = *(int **)(a1 + 56);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 52);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 40), v7 + 1);
    v5 = *(int **)(a1 + 56);
    v7 = *v5;
    goto LABEL_7;
  }
  v6 = *(int *)(a1 + 48);
  v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 48) = v6 + 1;
    Aligned = *(std::string **)&v5[2 * v6 + 2];
    return std::string::operator=(Aligned, __str);
  }
  if (v7 == *(_DWORD *)(a1 + 52))
    goto LABEL_6;
LABEL_7:
  *v5 = v7 + 1;
  v9 = *v4;
  if (*v4)
  {
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    _tc_google::protobuf::Arena::AddListNode(v9, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    Aligned = (std::string *)operator new();
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(int *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = Aligned;
  return std::string::operator=(Aligned, __str);
}

std::string *turi::neural_net::model_spec::add_sigmoid(_QWORD *a1, std::string *a2, std::string *a3)
{
  CoreML::Specification::NeuralNetworkLayer *v5;
  std::string *v6;
  std::string *result;
  uint64_t v8;
  CoreML::Specification::ActivationSigmoid *v9;

  v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v6 = (std::string *)*((_QWORD *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v5 + 14, (uint64_t)a2);
  else
    std::string::operator=(v6, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, a3);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) == 130)
  {
    v8 = *((_QWORD *)v5 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 130;
    v8 = operator new();
    result = (std::string *)CoreML::Specification::ActivationParams::ActivationParams((CoreML::Specification::ActivationParams *)v8);
    *((_QWORD *)v5 + 16) = v8;
  }
  if (*(_DWORD *)(v8 + 28) != 40)
  {
    CoreML::Specification::ActivationParams::clear_NonlinearityType(v8);
    *(_DWORD *)(v8 + 28) = 40;
    v9 = (CoreML::Specification::ActivationSigmoid *)operator new();
    result = (std::string *)CoreML::Specification::ActivationSigmoid::ActivationSigmoid(v9);
    *(_QWORD *)(v8 + 16) = v9;
  }
  return result;
}

void sub_2183A2960(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_pooling(_QWORD *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, unsigned int a10)
{
  CoreML::Specification::NeuralNetworkLayer *v17;
  std::string *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  CoreML::Specification::ValidPadding *v28;
  CoreML::Specification::SamePadding *v29;
  CoreML::Specification::BorderAmounts *v30;
  CoreML::Specification::ValidPadding *v31;
  CoreML::Specification::BorderAmounts *v32;

  v17 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v18 = (std::string *)*((_QWORD *)v17 + 14);
  if (v18 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v17 + 14, (uint64_t)a2);
  else
    std::string::operator=(v18, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v17, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v17, a2);
  if (*((_DWORD *)v17 + 35) == 120)
  {
    v19 = *((_QWORD *)v17 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v17);
    *((_DWORD *)v17 + 35) = 120;
    v19 = operator new();
    CoreML::Specification::PoolingLayerParams::PoolingLayerParams((CoreML::Specification::PoolingLayerParams *)v19);
    *((_QWORD *)v17 + 16) = v19;
  }
  v20 = *(_DWORD *)(v19 + 16);
  v21 = *(_DWORD *)(v19 + 20);
  if (v20 == v21)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 16), v20 + 1);
    v20 = *(_DWORD *)(v19 + 16);
    v21 = *(_DWORD *)(v19 + 20);
  }
  v22 = *(_QWORD *)(v19 + 24);
  v23 = v20 + 1;
  *(_DWORD *)(v19 + 16) = v20 + 1;
  *(_QWORD *)(v22 + 8 * v20 + 8) = a4;
  if (v20 + 1 == v21)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 16), v20 + 2);
    v23 = *(_DWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
  }
  v24 = *(_DWORD *)(v19 + 40);
  *(_DWORD *)(v19 + 16) = v23 + 1;
  *(_QWORD *)(v22 + 8 * v23 + 8) = a5;
  v25 = *(_DWORD *)(v19 + 44);
  if (v24 == v25)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 40), v24 + 1);
    v24 = *(_DWORD *)(v19 + 40);
    v25 = *(_DWORD *)(v19 + 44);
  }
  v26 = *(_QWORD *)(v19 + 48);
  v27 = v24 + 1;
  *(_DWORD *)(v19 + 40) = v24 + 1;
  *(_QWORD *)(v26 + 8 * v24 + 8) = a6;
  if (v24 + 1 == v25)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 40), v24 + 2);
    v27 = *(_DWORD *)(v19 + 40);
    v26 = *(_QWORD *)(v19 + 48);
  }
  *(_DWORD *)(v19 + 40) = v27 + 1;
  *(_QWORD *)(v26 + 8 * v27 + 8) = a7;
  if (a8 == 1)
  {
    if (*(_DWORD *)(v19 + 84) != 31)
    {
      CoreML::Specification::PoolingLayerParams::clear_PoolingPaddingType(v19);
      *(_DWORD *)(v19 + 84) = 31;
      v29 = (CoreML::Specification::SamePadding *)operator new();
      CoreML::Specification::SamePadding::SamePadding(v29);
      *(_QWORD *)(v19 + 72) = v29;
    }
  }
  else if (!a8)
  {
    if (*(_DWORD *)(v19 + 84) == 30)
    {
      v28 = *(CoreML::Specification::ValidPadding **)(v19 + 72);
    }
    else
    {
      CoreML::Specification::PoolingLayerParams::clear_PoolingPaddingType(v19);
      *(_DWORD *)(v19 + 84) = 30;
      v28 = (CoreML::Specification::ValidPadding *)operator new();
      CoreML::Specification::ValidPadding::ValidPadding(v28);
      *(_QWORD *)(v19 + 72) = v28;
    }
    v30 = (CoreML::Specification::BorderAmounts *)*((_QWORD *)v28 + 2);
    if (!v30)
    {
      v30 = (CoreML::Specification::BorderAmounts *)operator new();
      CoreML::Specification::BorderAmounts::BorderAmounts(v30);
      *((_QWORD *)v28 + 2) = v30;
    }
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>((uint64_t)v30 + 16);
    if (*(_DWORD *)(v19 + 84) == 30)
    {
      v31 = *(CoreML::Specification::ValidPadding **)(v19 + 72);
    }
    else
    {
      CoreML::Specification::PoolingLayerParams::clear_PoolingPaddingType(v19);
      *(_DWORD *)(v19 + 84) = 30;
      v31 = (CoreML::Specification::ValidPadding *)operator new();
      CoreML::Specification::ValidPadding::ValidPadding(v31);
      *(_QWORD *)(v19 + 72) = v31;
    }
    v32 = (CoreML::Specification::BorderAmounts *)*((_QWORD *)v31 + 2);
    if (!v32)
    {
      v32 = (CoreML::Specification::BorderAmounts *)operator new();
      CoreML::Specification::BorderAmounts::BorderAmounts(v32);
      *((_QWORD *)v31 + 2) = v32;
    }
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>((uint64_t)v32 + 16);
  }
  if (a9)
    *(_BYTE *)(v19 + 64) = 1;
  if (a10 <= 2)
    *(_DWORD *)(v19 + 60) = a10;
}

void sub_2183A2CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::model_spec::add_convolution(_QWORD *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  CoreML::Specification::NeuralNetworkLayer *v19;
  std::string *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  CoreML::Specification::ValidPadding *v34;
  CoreML::Specification::SamePadding *v35;
  CoreML::Specification::BorderAmounts *v36;
  CoreML::Specification::ValidPadding *v37;
  CoreML::Specification::BorderAmounts *v38;
  CoreML::Specification::WeightParams *v39;
  uint64_t result;
  CoreML::Specification::WeightParams *v41;

  v19 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v20 = (std::string *)*((_QWORD *)v19 + 14);
  if (v20 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v19 + 14, (uint64_t)a2);
  else
    std::string::operator=(v20, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v19, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v19, a2);
  if (*((_DWORD *)v19 + 35) == 100)
  {
    v21 = *((_QWORD *)v19 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v19);
    *((_DWORD *)v19 + 35) = 100;
    v21 = operator new();
    CoreML::Specification::ConvolutionLayerParams::ConvolutionLayerParams((CoreML::Specification::ConvolutionLayerParams *)v21);
    *((_QWORD *)v19 + 16) = v21;
  }
  v22 = *(_DWORD *)(v21 + 16);
  *(_QWORD *)(v21 + 128) = a4;
  *(_QWORD *)(v21 + 136) = a5;
  *(_QWORD *)(v21 + 144) = 1;
  v23 = *(_DWORD *)(v21 + 20);
  if (v22 == v23)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 16), v22 + 1);
    v22 = *(_DWORD *)(v21 + 16);
    v23 = *(_DWORD *)(v21 + 20);
  }
  v24 = *(_QWORD *)(v21 + 24);
  v25 = v22 + 1;
  *(_DWORD *)(v21 + 16) = v22 + 1;
  *(_QWORD *)(v24 + 8 * v22 + 8) = a6;
  if (v22 + 1 == v23)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 16), v22 + 2);
    v25 = *(_DWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 24);
  }
  v26 = *(_DWORD *)(v21 + 40);
  *(_DWORD *)(v21 + 16) = v25 + 1;
  *(_QWORD *)(v24 + 8 * v25 + 8) = a7;
  v27 = *(_DWORD *)(v21 + 44);
  if (v26 == v27)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 40), v26 + 1);
    v26 = *(_DWORD *)(v21 + 40);
    v27 = *(_DWORD *)(v21 + 44);
  }
  v28 = *(_QWORD *)(v21 + 48);
  v29 = v26 + 1;
  *(_DWORD *)(v21 + 40) = v26 + 1;
  *(_QWORD *)(v28 + 8 * v26 + 8) = a8;
  if (v26 + 1 == v27)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 40), v26 + 2);
    v29 = *(_DWORD *)(v21 + 40);
    v28 = *(_QWORD *)(v21 + 48);
  }
  v30 = *(_DWORD *)(v21 + 64);
  *(_DWORD *)(v21 + 40) = v29 + 1;
  *(_QWORD *)(v28 + 8 * v29 + 8) = a9;
  v31 = *(_DWORD *)(v21 + 68);
  if (v30 == v31)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 64), v30 + 1);
    v30 = *(_DWORD *)(v21 + 64);
    v31 = *(_DWORD *)(v21 + 68);
  }
  v32 = *(_QWORD *)(v21 + 72);
  v33 = v30 + 1;
  *(_DWORD *)(v21 + 64) = v30 + 1;
  *(_QWORD *)(v32 + 8 * v30 + 8) = 1;
  if (v30 + 1 == v31)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v21 + 64), v30 + 2);
    v33 = *(_DWORD *)(v21 + 64);
    v32 = *(_QWORD *)(v21 + 72);
  }
  *(_DWORD *)(v21 + 64) = v33 + 1;
  *(_QWORD *)(v32 + 8 * v33 + 8) = 1;
  if (a10 == 1)
  {
    if (*(_DWORD *)(v21 + 172) == 51)
    {
      v35 = *(CoreML::Specification::SamePadding **)(v21 + 160);
    }
    else
    {
      CoreML::Specification::ConvolutionLayerParams::clear_ConvolutionPaddingType(v21);
      *(_DWORD *)(v21 + 172) = 51;
      v35 = (CoreML::Specification::SamePadding *)operator new();
      CoreML::Specification::SamePadding::SamePadding(v35);
      *(_QWORD *)(v21 + 160) = v35;
    }
    *((_DWORD *)v35 + 4) = 1;
  }
  else if (!a10)
  {
    if (*(_DWORD *)(v21 + 172) == 50)
    {
      v34 = *(CoreML::Specification::ValidPadding **)(v21 + 160);
    }
    else
    {
      CoreML::Specification::ConvolutionLayerParams::clear_ConvolutionPaddingType(v21);
      *(_DWORD *)(v21 + 172) = 50;
      v34 = (CoreML::Specification::ValidPadding *)operator new();
      CoreML::Specification::ValidPadding::ValidPadding(v34);
      *(_QWORD *)(v21 + 160) = v34;
    }
    v36 = (CoreML::Specification::BorderAmounts *)*((_QWORD *)v34 + 2);
    if (!v36)
    {
      v36 = (CoreML::Specification::BorderAmounts *)operator new();
      CoreML::Specification::BorderAmounts::BorderAmounts(v36);
      *((_QWORD *)v34 + 2) = v36;
    }
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>((uint64_t)v36 + 16);
    if (*(_DWORD *)(v21 + 172) == 50)
    {
      v37 = *(CoreML::Specification::ValidPadding **)(v21 + 160);
    }
    else
    {
      CoreML::Specification::ConvolutionLayerParams::clear_ConvolutionPaddingType(v21);
      *(_DWORD *)(v21 + 172) = 50;
      v37 = (CoreML::Specification::ValidPadding *)operator new();
      CoreML::Specification::ValidPadding::ValidPadding(v37);
      *(_QWORD *)(v21 + 160) = v37;
    }
    v38 = (CoreML::Specification::BorderAmounts *)*((_QWORD *)v37 + 2);
    if (!v38)
    {
      v38 = (CoreML::Specification::BorderAmounts *)operator new();
      CoreML::Specification::BorderAmounts::BorderAmounts(v38);
      *((_QWORD *)v37 + 2) = v38;
    }
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>((uint64_t)v38 + 16);
  }
  v39 = *(CoreML::Specification::WeightParams **)(v21 + 112);
  if (!v39)
  {
    v39 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v39);
    *(_QWORD *)(v21 + 112) = v39;
  }
  if (*(_QWORD *)(a12 + 24))
  {
    *(_BYTE *)(v21 + 153) = 1;
    v41 = *(CoreML::Specification::WeightParams **)(v21 + 120);
    if (!v41)
    {
      v41 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v41);
      *(_QWORD *)(v21 + 120) = v41;
    }
  }
  return result;
}

void sub_2183A3194(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::`anonymous namespace'::init_weight_params(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16) >= (int)a2)
  {
    v7 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(a1 + 16), a2);
    v7 = *(_QWORD *)(a1 + 24);
    v8 = 4 * (int)a2 - 4 * *(int *)(a1 + 16);
    if (v8 >= 1)
      bzero((void *)(v7 + 8 + 4 * *(int *)(a1 + 16)), 4 * (((unint64_t)v8 >> 2) - ((unint64_t)v8 > 3)) + 4);
  }
  *v6 = a2;
  if (v7)
    v9 = v7 + 8;
  else
    v9 = 0;
  return std::function<void ()(unsigned long,unsigned long)>::operator()(a3, v9, v9 + 4 * a2);
}

CoreML::Specification::BorderAmounts_EdgeSizes *turi::neural_net::model_spec::add_padding(_QWORD *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  CoreML::Specification::NeuralNetworkLayer *v15;
  std::string *v16;
  uint64_t v17;
  CoreML::Specification::BorderAmounts *v18;
  CoreML::Specification::BorderAmounts_EdgeSizes *v19;
  CoreML::Specification::BorderAmounts *v20;
  CoreML::Specification::BorderAmounts_EdgeSizes *result;
  CoreML::Specification::PaddingLayerParams_PaddingReplication *v22;
  CoreML::Specification::PaddingLayerParams_PaddingConstant *v23;

  v15 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v16 = (std::string *)*((_QWORD *)v15 + 14);
  if (v16 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v15 + 14, (uint64_t)a2);
  else
    std::string::operator=(v16, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v15, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v15, a2);
  if (*((_DWORD *)v15 + 35) == 200)
  {
    v17 = *((_QWORD *)v15 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v15);
    *((_DWORD *)v15 + 35) = 200;
    v17 = operator new();
    CoreML::Specification::PaddingLayerParams::PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v17);
    *((_QWORD *)v15 + 16) = v17;
  }
  v18 = *(CoreML::Specification::BorderAmounts **)(v17 + 16);
  if (!v18)
  {
    v18 = (CoreML::Specification::BorderAmounts *)operator new();
    CoreML::Specification::BorderAmounts::BorderAmounts(v18);
    *(_QWORD *)(v17 + 16) = v18;
  }
  v19 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>((uint64_t)v18 + 16);
  v20 = *(CoreML::Specification::BorderAmounts **)(v17 + 16);
  if (!v20)
  {
    v20 = (CoreML::Specification::BorderAmounts *)operator new();
    CoreML::Specification::BorderAmounts::BorderAmounts(v20);
    *(_QWORD *)(v17 + 16) = v20;
  }
  result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::BorderAmounts_EdgeSizes>::TypeHandler>((uint64_t)v20 + 16);
  *((_QWORD *)v19 + 2) = a4;
  *((_QWORD *)v19 + 3) = a5;
  *((_QWORD *)result + 2) = a6;
  *((_QWORD *)result + 3) = a7;
  if (a8 == 2)
  {
    if (*(_DWORD *)(v17 + 36) == 1)
    {
      v23 = *(CoreML::Specification::PaddingLayerParams_PaddingConstant **)(v17 + 24);
    }
    else
    {
      CoreML::Specification::PaddingLayerParams::clear_PaddingType(v17);
      *(_DWORD *)(v17 + 36) = 1;
      v23 = (CoreML::Specification::PaddingLayerParams_PaddingConstant *)operator new();
      result = (CoreML::Specification::BorderAmounts_EdgeSizes *)CoreML::Specification::PaddingLayerParams_PaddingConstant::PaddingLayerParams_PaddingConstant(v23);
      *(_QWORD *)(v17 + 24) = v23;
    }
    *((_DWORD *)v23 + 4) = 0;
  }
  else
  {
    if (a8 == 1)
    {
      if (*(_DWORD *)(v17 + 36) == 3)
        return result;
      CoreML::Specification::PaddingLayerParams::clear_PaddingType(v17);
      *(_DWORD *)(v17 + 36) = 3;
      v22 = (CoreML::Specification::PaddingLayerParams_PaddingReplication *)operator new();
      result = (CoreML::Specification::BorderAmounts_EdgeSizes *)CoreML::Specification::PaddingLayerParams_PaddingReplication::PaddingLayerParams_PaddingReplication(v22);
      goto LABEL_20;
    }
    if (!a8 && *(_DWORD *)(v17 + 36) != 2)
    {
      CoreML::Specification::PaddingLayerParams::clear_PaddingType(v17);
      *(_DWORD *)(v17 + 36) = 2;
      v22 = (CoreML::Specification::PaddingLayerParams_PaddingReplication *)operator new();
      result = (CoreML::Specification::BorderAmounts_EdgeSizes *)CoreML::Specification::PaddingLayerParams_PaddingReflection::PaddingLayerParams_PaddingReflection(v22);
LABEL_20:
      *(_QWORD *)(v17 + 24) = v22;
    }
  }
  return result;
}

void sub_2183A3520(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_upsampling(_QWORD *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5)
{
  CoreML::Specification::NeuralNetworkLayer *v9;
  std::string *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;

  v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v10 = (std::string *)*((_QWORD *)v9 + 14);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 14, (uint64_t)a2);
  else
    std::string::operator=(v10, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v9, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v9, a2);
  if (*((_DWORD *)v9 + 35) == 210)
  {
    v11 = *((_QWORD *)v9 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v9);
    *((_DWORD *)v9 + 35) = 210;
    v11 = operator new();
    CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)v11);
    *((_QWORD *)v9 + 16) = v11;
  }
  v12 = *(_DWORD *)(v11 + 16);
  v13 = *(_DWORD *)(v11 + 20);
  if (v12 == v13)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v11 + 16), v12 + 1);
    v12 = *(_DWORD *)(v11 + 16);
    v13 = *(_DWORD *)(v11 + 20);
  }
  v14 = *(_QWORD *)(v11 + 24);
  v15 = v12 + 1;
  *(_DWORD *)(v11 + 16) = v12 + 1;
  *(_QWORD *)(v14 + 8 * v12 + 8) = a4;
  if (v12 + 1 == v13)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v11 + 16), v12 + 2);
    v15 = *(_DWORD *)(v11 + 16);
    v14 = *(_QWORD *)(v11 + 24);
  }
  *(_DWORD *)(v11 + 16) = v15 + 1;
  *(_QWORD *)(v14 + 8 * v15 + 8) = a5;
}

void sub_2183A36D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40BDAE892FLL);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::model_spec::add_inner_product(_QWORD *a1, std::string *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CoreML::Specification::NeuralNetworkLayer *v13;
  std::string *v14;
  uint64_t v15;
  CoreML::Specification::WeightParams *v16;
  uint64_t result;
  CoreML::Specification::WeightParams *v18;

  v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v14 = (std::string *)*((_QWORD *)v13 + 14);
  if (v14 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v13 + 14, (uint64_t)a2);
  else
    std::string::operator=(v14, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v13, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v13, a2);
  if (*((_DWORD *)v13 + 35) == 140)
  {
    v15 = *((_QWORD *)v13 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v13);
    *((_DWORD *)v13 + 35) = 140;
    v15 = operator new();
    CoreML::Specification::InnerProductLayerParams::InnerProductLayerParams((CoreML::Specification::InnerProductLayerParams *)v15);
    *((_QWORD *)v13 + 16) = v15;
  }
  *(_QWORD *)(v15 + 32) = a5;
  *(_QWORD *)(v15 + 40) = a4;
  v16 = *(CoreML::Specification::WeightParams **)(v15 + 16);
  if (!v16)
  {
    v16 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v16);
    *(_QWORD *)(v15 + 16) = v16;
  }
  if (*(_QWORD *)(a7 + 24))
  {
    *(_BYTE *)(v15 + 48) = 1;
    v18 = *(CoreML::Specification::WeightParams **)(v15 + 24);
    if (!v18)
    {
      v18 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v18);
      *(_QWORD *)(v15 + 24) = v18;
    }
  }
  return result;
}

void sub_2183A387C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_batchnorm(_QWORD *a1, std::string *a2, std::string *a3, uint64_t a4, float a5)
{
  CoreML::Specification::NeuralNetworkLayer *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v10 = (std::string *)*((_QWORD *)v9 + 14);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 14, (uint64_t)a2);
  else
    std::string::operator=(v10, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v9, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v9, a2);
  if (*((_DWORD *)v9 + 35) == 160)
  {
    v11 = *((_QWORD *)v9 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v9);
    *((_DWORD *)v9 + 35) = 160;
    v11 = operator new();
    CoreML::Specification::BatchnormLayerParams::BatchnormLayerParams((CoreML::Specification::BatchnormLayerParams *)v11);
    *((_QWORD *)v9 + 16) = v11;
  }
  *(_QWORD *)(v11 + 48) = a4;
  *(float *)(v11 + 60) = a5;
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    v12 = operator new();
    CoreML::Specification::WeightParams::WeightParams((CoreML::Specification::WeightParams *)v12);
    *(_QWORD *)(v11 + 16) = v12;
  }
  if (*(_DWORD *)(v12 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v12 + 16), a4);
    v13 = 4 * (int)a4 - 4 * *(int *)(v12 + 16);
    if (v13 >= 1)
      memset_pattern16((void *)(*(_QWORD *)(v12 + 24) + 8 + 4 * *(int *)(v12 + 16)), &unk_2186C1810, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
  *(_DWORD *)(v12 + 16) = a4;
  v14 = *(_QWORD *)(v11 + 24);
  if (!v14)
  {
    v14 = operator new();
    CoreML::Specification::WeightParams::WeightParams((CoreML::Specification::WeightParams *)v14);
    *(_QWORD *)(v11 + 24) = v14;
  }
  if (*(_DWORD *)(v14 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v14 + 16), a4);
    v15 = 4 * (int)a4 - 4 * *(int *)(v14 + 16);
    if (v15 >= 1)
      bzero((void *)(*(_QWORD *)(v14 + 24) + 8 + 4 * *(int *)(v14 + 16)), 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  }
  *(_DWORD *)(v14 + 16) = a4;
  v16 = *(_QWORD *)(v11 + 32);
  if (!v16)
  {
    v16 = operator new();
    CoreML::Specification::WeightParams::WeightParams((CoreML::Specification::WeightParams *)v16);
    *(_QWORD *)(v11 + 32) = v16;
  }
  if (*(_DWORD *)(v16 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v16 + 16), a4);
    v17 = 4 * (int)a4 - 4 * *(int *)(v16 + 16);
    if (v17 >= 1)
      bzero((void *)(*(_QWORD *)(v16 + 24) + 8 + 4 * *(int *)(v16 + 16)), 4 * (((unint64_t)v17 >> 2) - ((unint64_t)v17 > 3)) + 4);
  }
  *(_DWORD *)(v16 + 16) = a4;
  v18 = *(_QWORD *)(v11 + 40);
  if (!v18)
  {
    v18 = operator new();
    CoreML::Specification::WeightParams::WeightParams((CoreML::Specification::WeightParams *)v18);
    *(_QWORD *)(v11 + 40) = v18;
  }
  if (*(_DWORD *)(v18 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v18 + 16), a4);
    v19 = 4 * (int)a4 - 4 * *(int *)(v18 + 16);
    if (v19 >= 1)
      memset_pattern16((void *)(*(_QWORD *)(v18 + 24) + 8 + 4 * *(int *)(v18 + 16)), &unk_2186C1810, 4 * (((unint64_t)v19 >> 2) - ((unint64_t)v19 > 3)) + 4);
  }
  *(_DWORD *)(v18 + 16) = a4;
}

void sub_2183A3BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_instancenorm(_QWORD *a1, std::string *a2, std::string *a3, uint64_t a4, float a5)
{
  CoreML::Specification::NeuralNetworkLayer *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v10 = (std::string *)*((_QWORD *)v9 + 14);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 14, (uint64_t)a2);
  else
    std::string::operator=(v10, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v9, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v9, a2);
  if (*((_DWORD *)v9 + 35) == 160)
  {
    v11 = *((_QWORD *)v9 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v9);
    *((_DWORD *)v9 + 35) = 160;
    v11 = operator new();
    CoreML::Specification::BatchnormLayerParams::BatchnormLayerParams((CoreML::Specification::BatchnormLayerParams *)v11);
    *((_QWORD *)v9 + 16) = v11;
  }
  *(_QWORD *)(v11 + 48) = a4;
  *(float *)(v11 + 60) = a5;
  *(_WORD *)(v11 + 56) = 257;
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    v12 = operator new();
    CoreML::Specification::WeightParams::WeightParams((CoreML::Specification::WeightParams *)v12);
    *(_QWORD *)(v11 + 16) = v12;
  }
  if (*(_DWORD *)(v12 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v12 + 16), a4);
    v13 = 4 * (int)a4 - 4 * *(int *)(v12 + 16);
    if (v13 >= 1)
      memset_pattern16((void *)(*(_QWORD *)(v12 + 24) + 8 + 4 * *(int *)(v12 + 16)), &unk_2186C1810, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
  *(_DWORD *)(v12 + 16) = a4;
  v14 = *(_QWORD *)(v11 + 24);
  if (!v14)
  {
    v14 = operator new();
    CoreML::Specification::WeightParams::WeightParams((CoreML::Specification::WeightParams *)v14);
    *(_QWORD *)(v11 + 24) = v14;
  }
  if (*(_DWORD *)(v14 + 16) < (int)a4)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v14 + 16), a4);
    v15 = 4 * (int)a4 - 4 * *(int *)(v14 + 16);
    if (v15 >= 1)
      bzero((void *)(*(_QWORD *)(v14 + 24) + 8 + 4 * *(int *)(v14 + 16)), 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  }
  *(_DWORD *)(v14 + 16) = a4;
}

void sub_2183A3E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_channel_concat(_QWORD *a1, std::string *a2, std::string **a3)
{
  CoreML::Specification::NeuralNetworkLayer *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *result;
  CoreML::Specification::ConcatLayerParams *v10;

  v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v6 = (std::string *)*((_QWORD *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v5 + 14, (uint64_t)a2);
  else
    std::string::operator=(v6, a2);
  v8 = *a3;
  v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 320)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 320;
    v10 = (CoreML::Specification::ConcatLayerParams *)operator new();
    result = (std::string *)CoreML::Specification::ConcatLayerParams::ConcatLayerParams(v10);
    *((_QWORD *)v5 + 16) = v10;
  }
  return result;
}

void sub_2183A3F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_softmax(_QWORD *a1, std::string *a2, std::string *a3)
{
  CoreML::Specification::NeuralNetworkLayer *v5;
  std::string *v6;
  std::string *result;
  CoreML::Specification::SoftmaxLayerParams *v8;

  v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v6 = (std::string *)*((_QWORD *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v5 + 14, (uint64_t)a2);
  else
    std::string::operator=(v6, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, a3);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 175)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 175;
    v8 = (CoreML::Specification::SoftmaxLayerParams *)operator new();
    result = (std::string *)CoreML::Specification::SoftmaxLayerParams::SoftmaxLayerParams(v8);
    *((_QWORD *)v5 + 16) = v8;
  }
  return result;
}

void sub_2183A402C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_addition(_QWORD *a1, std::string *a2, std::string **a3)
{
  CoreML::Specification::NeuralNetworkLayer *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *result;
  CoreML::Specification::AddLayerParams *v10;

  v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v6 = (std::string *)*((_QWORD *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v5 + 14, (uint64_t)a2);
  else
    std::string::operator=(v6, a2);
  v8 = *a3;
  v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 230)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 230;
    v10 = (CoreML::Specification::AddLayerParams *)operator new();
    result = (std::string *)CoreML::Specification::AddLayerParams::AddLayerParams(v10);
    *((_QWORD *)v5 + 16) = v10;
  }
  return result;
}

void sub_2183A4120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_multiplication(_QWORD *a1, std::string *a2, std::string **a3)
{
  CoreML::Specification::NeuralNetworkLayer *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *result;
  CoreML::Specification::MultiplyLayerParams *v10;

  v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v6 = (std::string *)*((_QWORD *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v5 + 14, (uint64_t)a2);
  else
    std::string::operator=(v6, a2);
  v8 = *a3;
  v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 231)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 231;
    v10 = (CoreML::Specification::MultiplyLayerParams *)operator new();
    result = (std::string *)CoreML::Specification::MultiplyLayerParams::MultiplyLayerParams(v10);
    *((_QWORD *)v5 + 16) = v10;
  }
  return result;
}

void sub_2183A4214(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::model_spec::add_scale(_QWORD *a1, std::string *a2, std::string *a3, uint64_t *a4, uint64_t a5)
{
  CoreML::Specification::NeuralNetworkLayer *v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CoreML::Specification::WeightParams *v20;

  v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v10 = (std::string *)*((_QWORD *)v9 + 14);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 14, (uint64_t)a2);
  else
    std::string::operator=(v10, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v9, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v9, a2);
  if (*((_DWORD *)v9 + 35) == 245)
  {
    v11 = *((_QWORD *)v9 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v9);
    *((_DWORD *)v9 + 35) = 245;
    v11 = operator new();
    CoreML::Specification::ScaleLayerParams::ScaleLayerParams((CoreML::Specification::ScaleLayerParams *)v11);
    *((_QWORD *)v9 + 16) = v11;
  }
  v12 = *a4;
  v13 = a4[1];
  if (v13 == *a4)
  {
    v16 = 1;
  }
  else
  {
    v14 = 0;
    v15 = *(_DWORD *)(v11 + 16);
    v16 = 1;
    do
    {
      v17 = *(_QWORD *)(v12 + 8 * v14);
      if (v15 == *(_DWORD *)(v11 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v11 + 16), v15 + 1);
        v15 = *(_DWORD *)(v11 + 16);
        v12 = *a4;
        v13 = a4[1];
        v18 = *(_QWORD *)(*a4 + 8 * v14);
      }
      else
      {
        v18 = *(_QWORD *)(v12 + 8 * v14);
      }
      v19 = *(_QWORD *)(v11 + 24) + 8 * v15++;
      *(_DWORD *)(v11 + 16) = v15;
      *(_QWORD *)(v19 + 8) = v17;
      v16 *= v18;
      ++v14;
    }
    while (v14 < (v13 - v12) >> 3);
  }
  v20 = *(CoreML::Specification::WeightParams **)(v11 + 64);
  if (!v20)
  {
    v20 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v20);
    *(_QWORD *)(v11 + 64) = v20;
  }
}

void sub_2183A43CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_reshape(_QWORD *a1, std::string *a2, std::string *a3, uint64_t a4)
{
  CoreML::Specification::NeuralNetworkLayer *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v8 = (std::string *)*((_QWORD *)v7 + 14);
  if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v7 + 14, (uint64_t)a2);
  else
    std::string::operator=(v8, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v7, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v7, a2);
  if (*((_DWORD *)v7 + 35) == 300)
  {
    v9 = *((_QWORD *)v7 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v7);
    *((_DWORD *)v7 + 35) = 300;
    v9 = operator new();
    CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v9);
    *((_QWORD *)v7 + 16) = v9;
  }
  v10 = 0;
  v11 = *(_DWORD *)(v9 + 16);
  do
  {
    v12 = *(_QWORD *)(a4 + v10);
    if (v11 == *(_DWORD *)(v9 + 20))
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v9 + 16), v11 + 1);
      v11 = *(_DWORD *)(v9 + 16);
    }
    v13 = *(_QWORD *)(v9 + 24) + 8 * v11++;
    *(_DWORD *)(v9 + 16) = v11;
    *(_QWORD *)(v13 + 8) = v12;
    v10 += 8;
  }
  while (v10 != 32);
}

void sub_2183A4524(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40EA59D502);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_channel_slice(_QWORD *a1, std::string *a2, std::string *a3, int a4, int a5, uint64_t a6)
{
  CoreML::Specification::NeuralNetworkLayer *v11;
  std::string *v12;
  std::string *result;
  uint64_t v14;

  v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v12 = (std::string *)*((_QWORD *)v11 + 14);
  if (v12 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v11 + 14, (uint64_t)a2);
  else
    std::string::operator=(v12, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v11, a3);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v11, a2);
  if (*((_DWORD *)v11 + 35) == 350)
  {
    v14 = *((_QWORD *)v11 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v11);
    *((_DWORD *)v11 + 35) = 350;
    v14 = operator new();
    result = (std::string *)CoreML::Specification::SliceLayerParams::SliceLayerParams((CoreML::Specification::SliceLayerParams *)v14);
    *((_QWORD *)v11 + 16) = v14;
  }
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  *(_QWORD *)(v14 + 32) = a6;
  *(_DWORD *)(v14 + 40) = 0;
  return result;
}

void sub_2183A4638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40DAA165ECLL);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::model_spec::add_lstm(_QWORD *a1, std::string *a2, std::string *a3, std::string *a4, std::string *a5, std::string *a6, std::string *a7, uint64_t a8, float a9, uint64_t a10, _QWORD *a11)
{
  BOOL v19;
  CoreML::Specification::NeuralNetworkLayer *v21;
  std::string *v22;
  CoreML::Specification::UniDirectionalLSTMLayerParams *v23;
  CoreML::Specification::ActivationParams *v24;
  CoreML::Specification::ActivationParams *v25;
  CoreML::Specification::ActivationSigmoid *v26;
  CoreML::Specification::ActivationParams *v27;
  CoreML::Specification::ActivationParams *v28;
  CoreML::Specification::ActivationTanh *v29;
  CoreML::Specification::ActivationParams *v30;
  CoreML::Specification::ActivationParams *v31;
  CoreML::Specification::ActivationTanh *v32;
  uint64_t v33;
  CoreML::Specification::LSTMWeightParams *v34;
  CoreML::Specification::WeightParams *v35;
  uint64_t v36;
  CoreML::Specification::WeightParams *v37;
  CoreML::Specification::WeightParams *v38;
  CoreML::Specification::WeightParams *v39;
  CoreML::Specification::WeightParams *v40;
  CoreML::Specification::WeightParams *v41;
  CoreML::Specification::WeightParams *v42;
  CoreML::Specification::WeightParams *v43;
  CoreML::Specification::WeightParams *v44;
  CoreML::Specification::WeightParams *v45;
  CoreML::Specification::WeightParams *v46;
  CoreML::Specification::WeightParams *v47;
  BOOL v49;

  if (a11[35])
    v19 = a11[39] == 0;
  else
    v19 = 1;
  v49 = !v19 && a11[43] != 0 && a11[47] != 0;
  v21 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v22 = (std::string *)*((_QWORD *)v21 + 14);
  if (v22 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v21 + 14, (uint64_t)a2);
  else
    std::string::operator=(v22, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v21, a3);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v21, a4);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v21, a5);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v21, a2);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v21, a6);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v21, a7);
  if (*((_DWORD *)v21 + 35) == 420)
  {
    v23 = (CoreML::Specification::UniDirectionalLSTMLayerParams *)*((_QWORD *)v21 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v21);
    *((_DWORD *)v21 + 35) = 420;
    v23 = (CoreML::Specification::UniDirectionalLSTMLayerParams *)operator new();
    CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams(v23);
    *((_QWORD *)v21 + 16) = v23;
  }
  *((_QWORD *)v23 + 7) = a8;
  *((_QWORD *)v23 + 8) = a10;
  v24 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>((uint64_t)v23 + 16);
  if (*((_DWORD *)v24 + 7) != 40)
  {
    v25 = v24;
    CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)v24);
    *((_DWORD *)v25 + 7) = 40;
    v26 = (CoreML::Specification::ActivationSigmoid *)operator new();
    CoreML::Specification::ActivationSigmoid::ActivationSigmoid(v26);
    *((_QWORD *)v25 + 2) = v26;
  }
  v27 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>((uint64_t)v23 + 16);
  if (*((_DWORD *)v27 + 7) != 30)
  {
    v28 = v27;
    CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)v27);
    *((_DWORD *)v28 + 7) = 30;
    v29 = (CoreML::Specification::ActivationTanh *)operator new();
    CoreML::Specification::ActivationTanh::ActivationTanh(v29);
    *((_QWORD *)v28 + 2) = v29;
  }
  v30 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>((uint64_t)v23 + 16);
  if (*((_DWORD *)v30 + 7) != 30)
  {
    v31 = v30;
    CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)v30);
    *((_DWORD *)v31 + 7) = 30;
    v32 = (CoreML::Specification::ActivationTanh *)operator new();
    CoreML::Specification::ActivationTanh::ActivationTanh(v32);
    *((_QWORD *)v31 + 2) = v32;
  }
  v33 = *((_QWORD *)v23 + 5);
  if (!v33)
  {
    v33 = operator new();
    CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)v33);
    *((_QWORD *)v23 + 5) = v33;
  }
  *(_BYTE *)(v33 + 21) = v49;
  *(float *)(v33 + 16) = a9;
  v34 = (CoreML::Specification::LSTMWeightParams *)*((_QWORD *)v23 + 6);
  if (!v34)
  {
    v34 = (CoreML::Specification::LSTMWeightParams *)operator new();
    CoreML::Specification::LSTMWeightParams::LSTMWeightParams(v34);
    *((_QWORD *)v23 + 6) = v34;
  }
  v35 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 2);
  if (!v35)
  {
    v35 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v35);
    *((_QWORD *)v34 + 2) = v35;
  }
  v36 = a10 * a8;
  v37 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 3);
  if (!v37)
  {
    v37 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v37);
    *((_QWORD *)v34 + 3) = v37;
  }
  v38 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 4);
  if (!v38)
  {
    v38 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v38);
    *((_QWORD *)v34 + 4) = v38;
  }
  v39 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 5);
  if (!v39)
  {
    v39 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v39);
    *((_QWORD *)v34 + 5) = v39;
  }
  v40 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 6);
  if (!v40)
  {
    v40 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v40);
    *((_QWORD *)v34 + 6) = v40;
  }
  v41 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 7);
  if (!v41)
  {
    v41 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v41);
    *((_QWORD *)v34 + 7) = v41;
  }
  v42 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 8);
  if (!v42)
  {
    v42 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v42);
    *((_QWORD *)v34 + 8) = v42;
  }
  v43 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 9);
  if (!v43)
  {
    v43 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v43);
    *((_QWORD *)v34 + 9) = v43;
  }
  v44 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 10);
  if (!v44)
  {
    v44 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v44);
    *((_QWORD *)v34 + 10) = v44;
  }
  v45 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 11);
  if (!v45)
  {
    v45 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v45);
    *((_QWORD *)v34 + 11) = v45;
  }
  v46 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 12);
  if (!v46)
  {
    v46 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v46);
    *((_QWORD *)v34 + 12) = v46;
  }
  v47 = (CoreML::Specification::WeightParams *)*((_QWORD *)v34 + 13);
  if (!v47)
  {
    v47 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v47);
    *((_QWORD *)v34 + 13) = v47;
  }
}

void sub_2183A4BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

void sub_2183A4CA0()
{
  JUMPOUT(0x2183A4C38);
}

void turi::neural_net::model_spec::add_transpose(_QWORD *a1, std::string *a2, std::string *a3, uint64_t **a4)
{
  CoreML::Specification::NeuralNetworkLayer *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v8 = (std::string *)*((_QWORD *)v7 + 14);
  if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v7 + 14, (uint64_t)a2);
  else
    std::string::operator=(v8, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v7, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v7, a2);
  if (*((_DWORD *)v7 + 35) == 985)
  {
    v9 = *((_QWORD *)v7 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v7);
    *((_DWORD *)v7 + 35) = 985;
    v9 = operator new();
    CoreML::Specification::TransposeLayerParams::TransposeLayerParams((CoreML::Specification::TransposeLayerParams *)v9);
    *((_QWORD *)v7 + 16) = v9;
  }
  v10 = *a4;
  v11 = a4[1];
  if (*a4 != v11)
  {
    v12 = *(_DWORD *)(v9 + 16);
    do
    {
      v13 = *v10;
      if (v12 == *(_DWORD *)(v9 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v9 + 16), v12 + 1);
        v12 = *(_DWORD *)(v9 + 16);
      }
      v14 = *(_QWORD *)(v9 + 24) + 8 * v12++;
      *(_DWORD *)(v9 + 16) = v12;
      *(_QWORD *)(v14 + 8) = v13;
      ++v10;
    }
    while (v10 != v11);
  }
}

void sub_2183A4DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_split_nd(_QWORD *a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  CoreML::Specification::NeuralNetworkLayer *v9;
  std::string *v10;
  unint64_t v11;
  size_t v12;
  std::string *v13;
  const void *v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  std::string v27;
  std::string v28;
  void *__p[2];
  std::string::size_type v30;

  v9 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v10 = (std::string *)*((_QWORD *)v9 + 14);
  if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v9 + 14, a2);
  else
    std::string::operator=(v10, (const std::string *)a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v9, a3);
  if (a5)
  {
    v11 = 0;
    do
    {
      if (*(char *)(a2 + 23) >= 0)
        v12 = *(unsigned __int8 *)(a2 + 23);
      else
        v12 = *(_QWORD *)(a2 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v28, v12 + 1);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v28;
      else
        v13 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if (v12)
      {
        if (*(char *)(a2 + 23) >= 0)
          v14 = (const void *)a2;
        else
          v14 = *(const void **)a2;
        memmove(v13, v14, v12);
      }
      *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 95;
      std::to_string(&v27, v11);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v27;
      else
        v15 = (std::string *)v27.__r_.__value_.__r.__words[0];
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      else
        size = v27.__r_.__value_.__l.__size_;
      v17 = std::string::append(&v28, (const std::string::value_type *)v15, size);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v30 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v9 + 40, (__int128 *)__p);
      if (SHIBYTE(v30) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      ++v11;
    }
    while (a5 != v11);
  }
  if (*((_DWORD *)v9 + 35) == 975)
  {
    v19 = *((_QWORD *)v9 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v9);
    *((_DWORD *)v9 + 35) = 975;
    v19 = operator new();
    CoreML::Specification::SplitNDLayerParams::SplitNDLayerParams((CoreML::Specification::SplitNDLayerParams *)v19);
    *((_QWORD *)v9 + 16) = v19;
  }
  *(_QWORD *)(v19 + 40) = a4;
  *(_QWORD *)(v19 + 48) = a5;
  v20 = *a6;
  v21 = a6[1];
  if (*a6 != v21)
  {
    v22 = *(_DWORD *)(v19 + 16);
    do
    {
      v23 = *v20;
      if (v22 == *(_DWORD *)(v19 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v19 + 16), v22 + 1);
        v22 = *(_DWORD *)(v19 + 16);
      }
      v24 = *(_QWORD *)(v19 + 24) + 8 * v22++;
      *(_DWORD *)(v19 + 16) = v22;
      *(_QWORD *)(v24 + 8) = v23;
      ++v20;
    }
    while (v20 != v21);
  }
}

void sub_2183A5040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  MEMORY[0x219A19A08](v28, 0x10A1C40C7CBD27BLL);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_concat_nd(_QWORD *a1, std::string *a2, std::string **a3, uint64_t a4)
{
  CoreML::Specification::NeuralNetworkLayer *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *result;
  CoreML::Specification::ConcatNDLayerParams *v12;

  v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v8 = (std::string *)*((_QWORD *)v7 + 14);
  if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v7 + 14, (uint64_t)a2);
  else
    std::string::operator=(v8, a2);
  v10 = *a3;
  v9 = a3[1];
  while (v10 != v9)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v7, v10++);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v7, a2);
  if (*((_DWORD *)v7 + 35) == 980)
  {
    v12 = (CoreML::Specification::ConcatNDLayerParams *)*((_QWORD *)v7 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v7);
    *((_DWORD *)v7 + 35) = 980;
    v12 = (CoreML::Specification::ConcatNDLayerParams *)operator new();
    result = (std::string *)CoreML::Specification::ConcatNDLayerParams::ConcatNDLayerParams(v12);
    *((_QWORD *)v7 + 16) = v12;
  }
  *((_QWORD *)v12 + 2) = a4;
  return result;
}

void sub_2183A5194(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E45386B4);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_reshape_static(_QWORD *a1, std::string *a2, std::string *a3, uint64_t *a4)
{
  CoreML::Specification::NeuralNetworkLayer *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v8 = (std::string *)*((_QWORD *)v7 + 14);
  if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v7 + 14, (uint64_t)a2);
  else
    std::string::operator=(v8, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v7, a3);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v7, a2);
  if (*((_DWORD *)v7 + 35) == 1140)
  {
    v9 = *((_QWORD *)v7 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v7);
    *((_DWORD *)v7 + 35) = 1140;
    v9 = operator new();
    CoreML::Specification::ReshapeStaticLayerParams::ReshapeStaticLayerParams((CoreML::Specification::ReshapeStaticLayerParams *)v9);
    *((_QWORD *)v7 + 16) = v9;
  }
  v11 = *a4;
  v10 = a4[1];
  if (v10 != *a4)
  {
    v12 = 0;
    v13 = *(_DWORD *)(v9 + 16);
    do
    {
      v14 = *(_QWORD *)(v11 + 8 * v12);
      if (v13 == *(_DWORD *)(v9 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v9 + 16), v13 + 1);
        v13 = *(_DWORD *)(v9 + 16);
        v11 = *a4;
        v10 = a4[1];
      }
      v15 = *(_QWORD *)(v9 + 24) + 8 * v13++;
      *(_DWORD *)(v9 + 16) = v13;
      *(_QWORD *)(v15 + 8) = v14;
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
}

void sub_2183A52EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_reshape_dynamic(_QWORD *a1, std::string *a2, std::string **a3)
{
  CoreML::Specification::NeuralNetworkLayer *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *result;
  CoreML::Specification::ReshapeDynamicLayerParams *v10;

  v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v6 = (std::string *)*((_QWORD *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v5 + 14, (uint64_t)a2);
  else
    std::string::operator=(v6, a2);
  v8 = *a3;
  v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 1145)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 1145;
    v10 = (CoreML::Specification::ReshapeDynamicLayerParams *)operator new();
    result = (std::string *)CoreML::Specification::ReshapeDynamicLayerParams::ReshapeDynamicLayerParams(v10);
    *((_QWORD *)v5 + 16) = v10;
  }
  return result;
}

void sub_2183A53E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_expand_dims(_QWORD *a1, std::string *a2, std::string *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  CoreML::Specification::NeuralNetworkLayer *v11;
  std::string *v12;
  CoreML::Specification::Tensor *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  CoreML::Specification::Tensor *v17;
  unint64_t v18;
  signed int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  CoreML::Specification::Tensor *v23;
  uint64_t v24;
  uint64_t v25;
  CoreML::Specification::Tensor *v26;
  unint64_t v27;
  signed int v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v12 = (std::string *)*((_QWORD *)v11 + 14);
  if (v12 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v11 + 14, (uint64_t)a2);
  else
    std::string::operator=(v12, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v11, a3);
  v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>((uint64_t)v11 + 64);
  v15 = *a5;
  v14 = a5[1];
  v16 = v14 == *a5;
  *((_DWORD *)v13 + 9) = (unint64_t)(v14 - *a5) >> 3;
  if (!v16)
  {
    v17 = v13;
    v18 = 0;
    v20 = (unsigned int *)((char *)v13 + 16);
    v19 = *((_DWORD *)v13 + 4);
    do
    {
      v21 = *(_QWORD *)(v15 + 8 * v18);
      if (v19 == *((_DWORD *)v17 + 5))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve(v20, v19 + 1);
        v19 = *v20;
        v15 = *a5;
        v14 = a5[1];
      }
      v22 = *((_QWORD *)v17 + 3) + 8 * v19++;
      *((_DWORD *)v17 + 4) = v19;
      *(_QWORD *)(v22 + 8) = v21;
      ++v18;
    }
    while (v18 < (v14 - v15) >> 3);
  }
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v11, a2);
  v23 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>((uint64_t)v11 + 88);
  v25 = *a6;
  v24 = a6[1];
  v16 = v24 == *a6;
  *((_DWORD *)v23 + 9) = (unint64_t)(v24 - *a6) >> 3;
  if (!v16)
  {
    v26 = v23;
    v27 = 0;
    v29 = (unsigned int *)((char *)v23 + 16);
    v28 = *((_DWORD *)v23 + 4);
    do
    {
      v30 = *(_QWORD *)(v25 + 8 * v27);
      if (v28 == *((_DWORD *)v26 + 5))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve(v29, v28 + 1);
        v28 = *v29;
        v25 = *a6;
        v24 = a6[1];
      }
      v31 = *((_QWORD *)v26 + 3) + 8 * v28++;
      *((_DWORD *)v26 + 4) = v28;
      *(_QWORD *)(v31 + 8) = v30;
      ++v27;
    }
    while (v27 < (v24 - v25) >> 3);
  }
  if (*((_DWORD *)v11 + 35) == 1125)
  {
    v32 = *((_QWORD *)v11 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v11);
    *((_DWORD *)v11 + 35) = 1125;
    v32 = operator new();
    CoreML::Specification::ExpandDimsLayerParams::ExpandDimsLayerParams((CoreML::Specification::ExpandDimsLayerParams *)v32);
    *((_QWORD *)v11 + 16) = v32;
  }
  v34 = *a4;
  v33 = a4[1];
  if (v33 != *a4)
  {
    v35 = 0;
    v36 = *(_DWORD *)(v32 + 16);
    do
    {
      v37 = *(_QWORD *)(v34 + 8 * v35);
      if (v36 == *(_DWORD *)(v32 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v32 + 16), v36 + 1);
        v36 = *(_DWORD *)(v32 + 16);
        v34 = *a4;
        v33 = a4[1];
      }
      v38 = *(_QWORD *)(v32 + 24) + 8 * v36++;
      *(_DWORD *)(v32 + 16) = v36;
      *(_QWORD *)(v38 + 8) = v37;
      ++v35;
    }
    while (v35 < (v33 - v34) >> 3);
  }
}

void sub_2183A5640(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

void turi::neural_net::model_spec::add_squeeze(_QWORD *a1, std::string *a2, std::string *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  CoreML::Specification::NeuralNetworkLayer *v11;
  std::string *v12;
  CoreML::Specification::Tensor *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  CoreML::Specification::Tensor *v17;
  unint64_t v18;
  signed int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  CoreML::Specification::Tensor *v23;
  uint64_t v24;
  uint64_t v25;
  CoreML::Specification::Tensor *v26;
  unint64_t v27;
  signed int v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v12 = (std::string *)*((_QWORD *)v11 + 14);
  if (v12 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v11 + 14, (uint64_t)a2);
  else
    std::string::operator=(v12, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v11, a3);
  v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>((uint64_t)v11 + 64);
  v15 = *a5;
  v14 = a5[1];
  v16 = v14 == *a5;
  *((_DWORD *)v13 + 9) = (unint64_t)(v14 - *a5) >> 3;
  if (!v16)
  {
    v17 = v13;
    v18 = 0;
    v20 = (unsigned int *)((char *)v13 + 16);
    v19 = *((_DWORD *)v13 + 4);
    do
    {
      v21 = *(_QWORD *)(v15 + 8 * v18);
      if (v19 == *((_DWORD *)v17 + 5))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve(v20, v19 + 1);
        v19 = *v20;
        v15 = *a5;
        v14 = a5[1];
      }
      v22 = *((_QWORD *)v17 + 3) + 8 * v19++;
      *((_DWORD *)v17 + 4) = v19;
      *(_QWORD *)(v22 + 8) = v21;
      ++v18;
    }
    while (v18 < (v14 - v15) >> 3);
  }
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v11, a2);
  v23 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>((uint64_t)v11 + 88);
  v25 = *a6;
  v24 = a6[1];
  v16 = v24 == *a6;
  *((_DWORD *)v23 + 9) = (unint64_t)(v24 - *a6) >> 3;
  if (!v16)
  {
    v26 = v23;
    v27 = 0;
    v29 = (unsigned int *)((char *)v23 + 16);
    v28 = *((_DWORD *)v23 + 4);
    do
    {
      v30 = *(_QWORD *)(v25 + 8 * v27);
      if (v28 == *((_DWORD *)v26 + 5))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve(v29, v28 + 1);
        v28 = *v29;
        v25 = *a6;
        v24 = a6[1];
      }
      v31 = *((_QWORD *)v26 + 3) + 8 * v28++;
      *((_DWORD *)v26 + 4) = v28;
      *(_QWORD *)(v31 + 8) = v30;
      ++v27;
    }
    while (v27 < (v24 - v25) >> 3);
  }
  if (*((_DWORD *)v11 + 35) == 1120)
  {
    v32 = *((_QWORD *)v11 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v11);
    *((_DWORD *)v11 + 35) = 1120;
    v32 = operator new();
    CoreML::Specification::SqueezeLayerParams::SqueezeLayerParams((CoreML::Specification::SqueezeLayerParams *)v32);
    *((_QWORD *)v11 + 16) = v32;
  }
  v34 = *a4;
  v33 = a4[1];
  if (v33 != *a4)
  {
    v35 = 0;
    v36 = *(_DWORD *)(v32 + 16);
    do
    {
      v37 = *(_QWORD *)(v34 + 8 * v35);
      if (v36 == *(_DWORD *)(v32 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v32 + 16), v36 + 1);
        v36 = *(_DWORD *)(v32 + 16);
        v34 = *a4;
        v33 = a4[1];
      }
      v38 = *(_QWORD *)(v32 + 24) + 8 * v36++;
      *(_DWORD *)(v32 + 16) = v36;
      *(_QWORD *)(v38 + 8) = v37;
      ++v35;
    }
    while (v35 < (v33 - v34) >> 3);
  }
}

void sub_2183A58A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4095A926F0);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_add_broadcastable(_QWORD *a1, std::string *a2, std::string **a3)
{
  CoreML::Specification::NeuralNetworkLayer *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *result;
  CoreML::Specification::AddBroadcastableLayerParams *v10;

  v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v6 = (std::string *)*((_QWORD *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v5 + 14, (uint64_t)a2);
  else
    std::string::operator=(v6, a2);
  v8 = *a3;
  v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 880)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 880;
    v10 = (CoreML::Specification::AddBroadcastableLayerParams *)operator new();
    result = (std::string *)CoreML::Specification::AddBroadcastableLayerParams::AddBroadcastableLayerParams(v10);
    *((_QWORD *)v5 + 16) = v10;
  }
  return result;
}

void sub_2183A5994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_gather(_QWORD *a1, std::string *a2, std::string **a3)
{
  CoreML::Specification::NeuralNetworkLayer *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *result;
  CoreML::Specification::GatherLayerParams *v10;

  v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v6 = (std::string *)*((_QWORD *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v5 + 14, (uint64_t)a2);
  else
    std::string::operator=(v6, a2);
  v8 = *a3;
  v7 = a3[1];
  while (v8 != v7)
    CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, v8++);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 930)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 930;
    v10 = (CoreML::Specification::GatherLayerParams *)operator new();
    result = (std::string *)CoreML::Specification::GatherLayerParams::GatherLayerParams(v10);
    *((_QWORD *)v5 + 16) = v10;
  }
  return result;
}

void sub_2183A5A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::model_spec::add_constant_nd(_QWORD *a1, std::string *a2, uint64_t *a3, uint64_t a4)
{
  CoreML::Specification::NeuralNetworkLayer *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CoreML::Specification::WeightParams *v18;

  v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v8 = (std::string *)*((_QWORD *)v7 + 14);
  if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v7 + 14, (uint64_t)a2);
  else
    std::string::operator=(v8, a2);
  CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v7, a2);
  if (*((_DWORD *)v7 + 35) == 1070)
  {
    v9 = *((_QWORD *)v7 + 16);
  }
  else
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v7);
    *((_DWORD *)v7 + 35) = 1070;
    v9 = operator new();
    CoreML::Specification::LoadConstantNDLayerParams::LoadConstantNDLayerParams((CoreML::Specification::LoadConstantNDLayerParams *)v9);
    *((_QWORD *)v7 + 16) = v9;
  }
  v10 = *a3;
  v11 = a3[1];
  if (v11 == *a3)
  {
    v14 = 1;
  }
  else
  {
    v12 = 0;
    v13 = *(_DWORD *)(v9 + 16);
    v14 = 1;
    do
    {
      v15 = *(_QWORD *)(v10 + 8 * v12);
      if (v13 == *(_DWORD *)(v9 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v9 + 16), v13 + 1);
        v13 = *(_DWORD *)(v9 + 16);
        v10 = *a3;
        v11 = a3[1];
        v16 = *(_QWORD *)(*a3 + 8 * v12);
      }
      else
      {
        v16 = *(_QWORD *)(v10 + 8 * v12);
      }
      v17 = *(_QWORD *)(v9 + 24) + 8 * v13++;
      *(_DWORD *)(v9 + 16) = v13;
      *(_QWORD *)(v17 + 8) = v15;
      v14 *= v16;
      ++v12;
    }
    while (v12 < (v11 - v10) >> 3);
  }
  v18 = *(CoreML::Specification::WeightParams **)(v9 + 40);
  if (!v18)
  {
    v18 = (CoreML::Specification::WeightParams *)operator new();
    CoreML::Specification::WeightParams::WeightParams(v18);
    *(_QWORD *)(v9 + 40) = v18;
  }
}

void sub_2183A5C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

std::string *turi::neural_net::model_spec::add_get_shape(_QWORD *a1, std::string *a2, std::string *a3)
{
  CoreML::Specification::NeuralNetworkLayer *v5;
  std::string *v6;
  std::string *result;
  CoreML::Specification::GetShapeLayerParams *v8;

  v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>(*a1 + 16);
  v6 = (std::string *)*((_QWORD *)v5 + 14);
  if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v5 + 14, (uint64_t)a2);
  else
    std::string::operator=(v6, a2);
  CoreML::Specification::NeuralNetworkLayer::add_input((uint64_t)v5, a3);
  result = CoreML::Specification::NeuralNetworkLayer::add_output((uint64_t)v5, a2);
  if (*((_DWORD *)v5 + 35) != 1065)
  {
    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)v5);
    *((_DWORD *)v5 + 35) = 1065;
    v8 = (CoreML::Specification::GetShapeLayerParams *)operator new();
    result = (std::string *)CoreML::Specification::GetShapeLayerParams::GetShapeLayerParams(v8);
    *((_QWORD *)v5 + 16) = v8;
  }
  return result;
}

void sub_2183A5D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

void turi::neural_net::`anonymous namespace'::wrap_network_params(uint64_t a1, uint64_t **a2)
{
  int v3;
  const void **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  uint64_t *v9;
  size_t v10;
  const void **v11;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;
  const void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  size_t v32;
  const void **v33;
  const void *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  size_t v39;
  void *v40;
  const void *v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  size_t v46;
  void *v47;
  const void *v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  size_t v53;
  void *v54;
  const void *v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  size_t v60;
  void *v61;
  const void *v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  size_t v67;
  void *v68;
  const void *v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  size_t v74;
  void *v75;
  const void *v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  size_t v81;
  void **v82;
  const void *v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  size_t v88;
  void **v89;
  const void *v90;
  _QWORD *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  size_t v95;
  void **v96;
  const void *v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  size_t v102;
  void **v103;
  const void *v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  size_t v109;
  void **v110;
  const void *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  const void **v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t *v154;
  size_t v155;
  const void **v156;
  const void *v157;
  uint64_t v158;
  _QWORD *v159;
  size_t v160;
  void *v161;
  const void *v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  const void **v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t *v171;
  size_t v172;
  const void **v173;
  const void *v174;
  _QWORD *v175;
  uint64_t *v176;
  size_t v177;
  void *p_p;
  const void *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  _QWORD *v184;
  uint64_t *v185;
  size_t v186;
  void *v187;
  const void *v188;
  _QWORD *v189;
  uint64_t *v190;
  size_t v191;
  void **v192;
  const void *v193;
  std::__shared_weak_count *v194;
  unint64_t *p_shared_owners;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  void *v200[2];
  char v201;
  void *v202;
  void *v203;
  _QWORD *v204;
  void *v205[2];
  std::__shared_weak_count *v206;
  void *v207;
  void *v208;
  _QWORD *v209;
  void *v210[2];
  std::__shared_weak_count *v211;
  void *v212;
  void *v213;
  _QWORD *v214;
  void *v215[2];
  std::__shared_weak_count *v216;
  void *v217;
  void *v218;
  _QWORD *v219;
  void *v220[2];
  std::__shared_weak_count *v221;
  void *v222;
  void *v223;
  _QWORD *v224;
  void *v225;
  void *v226;
  std::__shared_weak_count *v227;
  void *v228;
  void *v229;
  _QWORD *v230;
  void *v231;
  void *v232;
  std::__shared_weak_count *v233;
  void *v234;
  void *v235;
  _QWORD *v236;
  void *v237;
  void *v238;
  std::__shared_weak_count *v239;
  void *v240;
  void *v241;
  _QWORD *v242;
  void *v243;
  void *v244;
  std::__shared_weak_count *v245;
  void *v246;
  void *v247;
  _QWORD *v248;
  void *v249;
  void *v250;
  std::__shared_weak_count *v251;
  void *v252;
  void *v253;
  _QWORD *v254;
  void *__p;
  int64x2_t *v256;
  std::__shared_weak_count *v257;
  void *v258;
  void *v259;
  _QWORD *v260;
  const void *v261[2];
  std::__shared_weak_count *v262;
  void *v263;
  void *v264;
  _QWORD *v265;
  _QWORD v266[2];
  std::__shared_weak_count *v267;

  v3 = *(_DWORD *)(a1 + 140);
  if (v3 > 159)
  {
    if (v3 == 160)
    {
      v167 = *(const void ***)(a1 + 112);
      v168 = *(_QWORD *)(a1 + 128);
      v169 = *(_QWORD *)(v168 + 48);
      v170 = operator new(8uLL);
      v243 = v170;
      *v170 = v169;
      v245 = (std::__shared_weak_count *)(v170 + 1);
      v244 = v170 + 1;
      if (*(_QWORD *)(v168 + 16))
        v171 = *(uint64_t **)(v168 + 16);
      else
        v171 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v243)
      {
        v244 = v243;
        operator delete(v243);
      }
      if (*((char *)v167 + 23) >= 0)
        v172 = *((unsigned __int8 *)v167 + 23);
      else
        v172 = (size_t)v167[1];
      v173 = v261;
      std::string::basic_string[abi:ne180100]((uint64_t)v261, v172 + 6);
      if (SHIBYTE(v262) < 0)
        v173 = (const void **)v261[0];
      if (v172)
      {
        if (*((char *)v167 + 23) >= 0)
          v174 = v167;
        else
          v174 = *v167;
        memmove(v173, v174, v172);
      }
      strcpy((char *)v173 + v172, "_gamma");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, v261, (uint64_t)v261, (uint64_t)v266);
      if (SHIBYTE(v262) < 0)
        operator delete((void *)v261[0]);
      v175 = operator new(8uLL);
      v237 = v175;
      *v175 = v169;
      v239 = (std::__shared_weak_count *)(v175 + 1);
      v238 = v175 + 1;
      if (*(_QWORD *)(v168 + 24))
        v176 = *(uint64_t **)(v168 + 24);
      else
        v176 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v237)
      {
        v238 = v237;
        operator delete(v237);
      }
      if (*((char *)v167 + 23) >= 0)
        v177 = *((unsigned __int8 *)v167 + 23);
      else
        v177 = (size_t)v167[1];
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v177 + 5);
      if (SHIBYTE(v257) < 0)
        p_p = __p;
      if (v177)
      {
        if (*((char *)v167 + 23) >= 0)
          v179 = v167;
        else
          v179 = *v167;
        memmove(p_p, v179, v177);
      }
      strcpy((char *)p_p + v177, "_beta");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)&__p, (uint64_t)&__p, (uint64_t)v261);
      if (SHIBYTE(v257) < 0)
        operator delete(__p);
      if (!*(_BYTE *)(v168 + 57))
      {
        v184 = operator new(8uLL);
        v231 = v184;
        *v184 = v169;
        v232 = v184 + 1;
        v233 = (std::__shared_weak_count *)(v184 + 1);
        if (*(_QWORD *)(v168 + 32))
          v185 = *(uint64_t **)(v168 + 32);
        else
          v185 = &CoreML::Specification::_WeightParams_default_instance_;
        if (v231)
        {
          v232 = v231;
          operator delete(v231);
        }
        if (*((char *)v167 + 23) >= 0)
          v186 = *((unsigned __int8 *)v167 + 23);
        else
          v186 = (size_t)v167[1];
        v187 = &v249;
        std::string::basic_string[abi:ne180100]((uint64_t)&v249, v186 + 13);
        if (SHIBYTE(v251) < 0)
          v187 = v249;
        if (v186)
        {
          if (*((char *)v167 + 23) >= 0)
            v188 = v167;
          else
            v188 = *v167;
          memmove(v187, v188, v186);
        }
        strcpy((char *)v187 + v186, "_running_mean");
        std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)&v249, (uint64_t)&v249, (uint64_t)&__p);
        if (SHIBYTE(v251) < 0)
          operator delete(v249);
        v189 = operator new(8uLL);
        v225 = v189;
        *v189 = v169;
        v226 = v189 + 1;
        v227 = (std::__shared_weak_count *)(v189 + 1);
        if (*(_QWORD *)(v168 + 40))
          v190 = *(uint64_t **)(v168 + 40);
        else
          v190 = &CoreML::Specification::_WeightParams_default_instance_;
        if (v225)
        {
          v226 = v225;
          operator delete(v225);
        }
        if (*((char *)v167 + 23) >= 0)
          v191 = *((unsigned __int8 *)v167 + 23);
        else
          v191 = (size_t)v167[1];
        v192 = v220;
        std::string::basic_string[abi:ne180100]((uint64_t)v220, v191 + 12);
        if (SHIBYTE(v221) < 0)
          v192 = (void **)v220[0];
        if (v191)
        {
          if (*((char *)v167 + 23) >= 0)
            v193 = v167;
          else
            v193 = *v167;
          memmove(v192, v193, v191);
        }
        strcpy((char *)v192 + v191, "_running_var");
        std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)v220, (uint64_t)v220, (uint64_t)&v249);
        if (SHIBYTE(v221) < 0)
          operator delete(v220[0]);
        v249 = &unk_24D9175B8;
        v194 = v251;
        if (v251)
        {
          p_shared_owners = (unint64_t *)&v251->__shared_owners_;
          do
            v196 = __ldaxr(p_shared_owners);
          while (__stlxr(v196 - 1, p_shared_owners));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        __p = &unk_24D9175B8;
        v197 = v257;
        if (v257)
        {
          v198 = (unint64_t *)&v257->__shared_owners_;
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
      }
      v261[0] = &unk_24D9175B8;
      v180 = v262;
      if (v262)
      {
        v181 = (unint64_t *)&v262->__shared_owners_;
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
      v266[0] = &unk_24D9175B8;
      v21 = v267;
      if (v267)
      {
        v183 = (unint64_t *)&v267->__shared_owners_;
        do
          v23 = __ldaxr(v183);
        while (__stlxr(v23 - 1, v183));
        goto LABEL_421;
      }
    }
    else if (v3 == 420)
    {
      v24 = *(const void ***)(a1 + 112);
      v25 = *(_QWORD **)(a1 + 128);
      v27 = v25[7];
      v26 = v25[8];
      v28 = operator new(0x10uLL);
      v264 = v28 + 2;
      v265 = v28 + 2;
      *v28 = v26;
      v28[1] = v27;
      v263 = v28;
      v29 = (uint64_t *)v25[6];
      if (!v29)
        v29 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v30 = (uint64_t *)v29[2];
      if (v30)
        v31 = v30;
      else
        v31 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v263)
      {
        v264 = v263;
        operator delete(v263);
      }
      if (*((char *)v24 + 23) >= 0)
        v32 = *((unsigned __int8 *)v24 + 23);
      else
        v32 = (size_t)v24[1];
      v33 = v261;
      std::string::basic_string[abi:ne180100]((uint64_t)v261, v32 + 13);
      if (SHIBYTE(v262) < 0)
        v33 = (const void **)v261[0];
      if (v32)
      {
        if (*((char *)v24 + 23) >= 0)
          v34 = v24;
        else
          v34 = *v24;
        memmove(v33, v34, v32);
      }
      strcpy((char *)v33 + v32, "_i2h_i_weight");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, v261, (uint64_t)v261, (uint64_t)v266);
      if (SHIBYTE(v262) < 0)
        operator delete((void *)v261[0]);
      v35 = operator new(0x10uLL);
      v259 = v35 + 2;
      v260 = v35 + 2;
      *v35 = v26;
      v35[1] = v27;
      v258 = v35;
      v36 = (uint64_t *)v25[6];
      if (!v36)
        v36 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v37 = (uint64_t *)v36[3];
      if (v37)
        v38 = v37;
      else
        v38 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v258)
      {
        v259 = v258;
        operator delete(v258);
      }
      if (*((char *)v24 + 23) >= 0)
        v39 = *((unsigned __int8 *)v24 + 23);
      else
        v39 = (size_t)v24[1];
      v40 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v39 + 13);
      if (SHIBYTE(v257) < 0)
        v40 = __p;
      if (v39)
      {
        if (*((char *)v24 + 23) >= 0)
          v41 = v24;
        else
          v41 = *v24;
        memmove(v40, v41, v39);
      }
      strcpy((char *)v40 + v39, "_i2h_f_weight");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)&__p, (uint64_t)&__p, (uint64_t)v261);
      if (SHIBYTE(v257) < 0)
        operator delete(__p);
      v42 = operator new(0x10uLL);
      v254 = v42 + 2;
      *v42 = v26;
      v42[1] = v27;
      v252 = v42;
      v253 = v42 + 2;
      v43 = (uint64_t *)v25[6];
      if (!v43)
        v43 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v44 = (uint64_t *)v43[4];
      if (v44)
        v45 = v44;
      else
        v45 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v252)
      {
        v253 = v252;
        operator delete(v252);
      }
      if (*((char *)v24 + 23) >= 0)
        v46 = *((unsigned __int8 *)v24 + 23);
      else
        v46 = (size_t)v24[1];
      v47 = &v249;
      std::string::basic_string[abi:ne180100]((uint64_t)&v249, v46 + 13);
      if (SHIBYTE(v251) < 0)
        v47 = v249;
      if (v46)
      {
        if (*((char *)v24 + 23) >= 0)
          v48 = v24;
        else
          v48 = *v24;
        memmove(v47, v48, v46);
      }
      strcpy((char *)v47 + v46, "_i2h_c_weight");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)&v249, (uint64_t)&v249, (uint64_t)&__p);
      if (SHIBYTE(v251) < 0)
        operator delete(v249);
      v49 = operator new(0x10uLL);
      v248 = v49 + 2;
      *v49 = v26;
      v49[1] = v27;
      v246 = v49;
      v247 = v49 + 2;
      v50 = (uint64_t *)v25[6];
      if (!v50)
        v50 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v51 = (uint64_t *)v50[5];
      if (v51)
        v52 = v51;
      else
        v52 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v246)
      {
        v247 = v246;
        operator delete(v246);
      }
      if (*((char *)v24 + 23) >= 0)
        v53 = *((unsigned __int8 *)v24 + 23);
      else
        v53 = (size_t)v24[1];
      v54 = &v243;
      std::string::basic_string[abi:ne180100]((uint64_t)&v243, v53 + 13);
      if (SHIBYTE(v245) < 0)
        v54 = v243;
      if (v53)
      {
        if (*((char *)v24 + 23) >= 0)
          v55 = v24;
        else
          v55 = *v24;
        memmove(v54, v55, v53);
      }
      strcpy((char *)v54 + v53, "_i2h_o_weight");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)&v243, (uint64_t)&v243, (uint64_t)&v249);
      if (SHIBYTE(v245) < 0)
        operator delete(v243);
      v56 = operator new(0x10uLL);
      v242 = v56 + 2;
      *v56 = v26;
      v56[1] = v26;
      v240 = v56;
      v241 = v56 + 2;
      v57 = (uint64_t *)v25[6];
      if (!v57)
        v57 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v58 = (uint64_t *)v57[6];
      if (v58)
        v59 = v58;
      else
        v59 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v240)
      {
        v241 = v240;
        operator delete(v240);
      }
      if (*((char *)v24 + 23) >= 0)
        v60 = *((unsigned __int8 *)v24 + 23);
      else
        v60 = (size_t)v24[1];
      v61 = &v237;
      std::string::basic_string[abi:ne180100]((uint64_t)&v237, v60 + 13);
      if (SHIBYTE(v239) < 0)
        v61 = v237;
      if (v60)
      {
        if (*((char *)v24 + 23) >= 0)
          v62 = v24;
        else
          v62 = *v24;
        memmove(v61, v62, v60);
      }
      strcpy((char *)v61 + v60, "_h2h_i_weight");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)&v237, (uint64_t)&v237, (uint64_t)&v243);
      if (SHIBYTE(v239) < 0)
        operator delete(v237);
      v63 = operator new(0x10uLL);
      v236 = v63 + 2;
      *v63 = v26;
      v63[1] = v26;
      v234 = v63;
      v235 = v63 + 2;
      v64 = (uint64_t *)v25[6];
      if (!v64)
        v64 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v65 = (uint64_t *)v64[7];
      if (v65)
        v66 = v65;
      else
        v66 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v234)
      {
        v235 = v234;
        operator delete(v234);
      }
      if (*((char *)v24 + 23) >= 0)
        v67 = *((unsigned __int8 *)v24 + 23);
      else
        v67 = (size_t)v24[1];
      v68 = &v231;
      std::string::basic_string[abi:ne180100]((uint64_t)&v231, v67 + 13);
      if (SHIBYTE(v233) < 0)
        v68 = v231;
      if (v67)
      {
        if (*((char *)v24 + 23) >= 0)
          v69 = v24;
        else
          v69 = *v24;
        memmove(v68, v69, v67);
      }
      strcpy((char *)v68 + v67, "_h2h_f_weight");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)&v231, (uint64_t)&v231, (uint64_t)&v237);
      if (SHIBYTE(v233) < 0)
        operator delete(v231);
      v70 = operator new(0x10uLL);
      v229 = v70 + 2;
      v230 = v70 + 2;
      *v70 = v26;
      v70[1] = v26;
      v228 = v70;
      v71 = (uint64_t *)v25[6];
      if (!v71)
        v71 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v72 = (uint64_t *)v71[8];
      if (v72)
        v73 = v72;
      else
        v73 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v228)
      {
        v229 = v228;
        operator delete(v228);
      }
      if (*((char *)v24 + 23) >= 0)
        v74 = *((unsigned __int8 *)v24 + 23);
      else
        v74 = (size_t)v24[1];
      v75 = &v225;
      std::string::basic_string[abi:ne180100]((uint64_t)&v225, v74 + 13);
      if (SHIBYTE(v227) < 0)
        v75 = v225;
      if (v74)
      {
        if (*((char *)v24 + 23) >= 0)
          v76 = v24;
        else
          v76 = *v24;
        memmove(v75, v76, v74);
      }
      strcpy((char *)v75 + v74, "_h2h_c_weight");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)&v225, (uint64_t)&v225, (uint64_t)&v231);
      if (SHIBYTE(v227) < 0)
        operator delete(v225);
      v77 = operator new(0x10uLL);
      v223 = v77 + 2;
      v224 = v77 + 2;
      *v77 = v26;
      v77[1] = v26;
      v222 = v77;
      v78 = (uint64_t *)v25[6];
      if (!v78)
        v78 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v79 = (uint64_t *)v78[9];
      if (v79)
        v80 = v79;
      else
        v80 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v222)
      {
        v223 = v222;
        operator delete(v222);
      }
      if (*((char *)v24 + 23) >= 0)
        v81 = *((unsigned __int8 *)v24 + 23);
      else
        v81 = (size_t)v24[1];
      v82 = v220;
      std::string::basic_string[abi:ne180100]((uint64_t)v220, v81 + 13);
      if (SHIBYTE(v221) < 0)
        v82 = (void **)v220[0];
      if (v81)
      {
        if (*((char *)v24 + 23) >= 0)
          v83 = v24;
        else
          v83 = *v24;
        memmove(v82, v83, v81);
      }
      strcpy((char *)v82 + v81, "_h2h_o_weight");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)v220, (uint64_t)v220, (uint64_t)&v225);
      if (SHIBYTE(v221) < 0)
        operator delete(v220[0]);
      v84 = operator new(8uLL);
      v217 = v84;
      *v84 = v26;
      v218 = v84 + 1;
      v219 = v84 + 1;
      v85 = (uint64_t *)v25[6];
      if (!v85)
        v85 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v86 = (uint64_t *)v85[10];
      if (v86)
        v87 = v86;
      else
        v87 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v217)
      {
        v218 = v217;
        operator delete(v217);
      }
      if (*((char *)v24 + 23) >= 0)
        v88 = *((unsigned __int8 *)v24 + 23);
      else
        v88 = (size_t)v24[1];
      v89 = v215;
      std::string::basic_string[abi:ne180100]((uint64_t)v215, v88 + 11);
      if (SHIBYTE(v216) < 0)
        v89 = (void **)v215[0];
      if (v88)
      {
        if (*((char *)v24 + 23) >= 0)
          v90 = v24;
        else
          v90 = *v24;
        memmove(v89, v90, v88);
      }
      strcpy((char *)v89 + v88, "_h2h_i_bias");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)v215, (uint64_t)v215, (uint64_t)v220);
      if (SHIBYTE(v216) < 0)
        operator delete(v215[0]);
      v91 = operator new(8uLL);
      v212 = v91;
      *v91 = v26;
      v213 = v91 + 1;
      v214 = v91 + 1;
      v92 = (uint64_t *)v25[6];
      if (!v92)
        v92 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v93 = (uint64_t *)v92[11];
      if (v93)
        v94 = v93;
      else
        v94 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v212)
      {
        v213 = v212;
        operator delete(v212);
      }
      if (*((char *)v24 + 23) >= 0)
        v95 = *((unsigned __int8 *)v24 + 23);
      else
        v95 = (size_t)v24[1];
      v96 = v210;
      std::string::basic_string[abi:ne180100]((uint64_t)v210, v95 + 11);
      if (SHIBYTE(v211) < 0)
        v96 = (void **)v210[0];
      if (v95)
      {
        if (*((char *)v24 + 23) >= 0)
          v97 = v24;
        else
          v97 = *v24;
        memmove(v96, v97, v95);
      }
      strcpy((char *)v96 + v95, "_h2h_f_bias");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)v210, (uint64_t)v210, (uint64_t)v215);
      if (SHIBYTE(v211) < 0)
        operator delete(v210[0]);
      v98 = operator new(8uLL);
      v207 = v98;
      *v98 = v26;
      v208 = v98 + 1;
      v209 = v98 + 1;
      v99 = (uint64_t *)v25[6];
      if (!v99)
        v99 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v100 = (uint64_t *)v99[12];
      if (v100)
        v101 = v100;
      else
        v101 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v207)
      {
        v208 = v207;
        operator delete(v207);
      }
      if (*((char *)v24 + 23) >= 0)
        v102 = *((unsigned __int8 *)v24 + 23);
      else
        v102 = (size_t)v24[1];
      v103 = v205;
      std::string::basic_string[abi:ne180100]((uint64_t)v205, v102 + 11);
      if (SHIBYTE(v206) < 0)
        v103 = (void **)v205[0];
      if (v102)
      {
        if (*((char *)v24 + 23) >= 0)
          v104 = v24;
        else
          v104 = *v24;
        memmove(v103, v104, v102);
      }
      strcpy((char *)v103 + v102, "_h2h_c_bias");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)v205, (uint64_t)v205, (uint64_t)v210);
      if (SHIBYTE(v206) < 0)
        operator delete(v205[0]);
      v105 = operator new(8uLL);
      v202 = v105;
      *v105 = v26;
      v203 = v105 + 1;
      v204 = v105 + 1;
      v106 = (uint64_t *)v25[6];
      if (!v106)
        v106 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      v107 = (uint64_t *)v106[13];
      if (v107)
        v108 = v107;
      else
        v108 = &CoreML::Specification::_WeightParams_default_instance_;
      if (v202)
      {
        v203 = v202;
        operator delete(v202);
      }
      if (*((char *)v24 + 23) >= 0)
        v109 = *((unsigned __int8 *)v24 + 23);
      else
        v109 = (size_t)v24[1];
      v110 = v200;
      std::string::basic_string[abi:ne180100]((uint64_t)v200, v109 + 11);
      if (v201 < 0)
        v110 = (void **)v200[0];
      if (v109)
      {
        if (*((char *)v24 + 23) >= 0)
          v111 = v24;
        else
          v111 = *v24;
        memmove(v110, v111, v109);
      }
      strcpy((char *)v110 + v109, "_h2h_o_bias");
      std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)v200, (uint64_t)v200, (uint64_t)v205);
      if (v201 < 0)
        operator delete(v200[0]);
      v205[0] = &unk_24D9175B8;
      v112 = v206;
      if (v206)
      {
        v113 = (unint64_t *)&v206->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      v210[0] = &unk_24D9175B8;
      v115 = v211;
      if (v211)
      {
        v116 = (unint64_t *)&v211->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      v215[0] = &unk_24D9175B8;
      v118 = v216;
      if (v216)
      {
        v119 = (unint64_t *)&v216->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      v220[0] = &unk_24D9175B8;
      v121 = v221;
      if (v221)
      {
        v122 = (unint64_t *)&v221->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v225 = &unk_24D9175B8;
      v124 = v227;
      if (v227)
      {
        v125 = (unint64_t *)&v227->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      v231 = &unk_24D9175B8;
      v127 = v233;
      if (v233)
      {
        v128 = (unint64_t *)&v233->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      v237 = &unk_24D9175B8;
      v130 = v239;
      if (v239)
      {
        v131 = (unint64_t *)&v239->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
          std::__shared_weak_count::__release_weak(v130);
        }
      }
      v243 = &unk_24D9175B8;
      v133 = v245;
      if (v245)
      {
        v134 = (unint64_t *)&v245->__shared_owners_;
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
      v249 = &unk_24D9175B8;
      v136 = v251;
      if (v251)
      {
        v137 = (unint64_t *)&v251->__shared_owners_;
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      __p = &unk_24D9175B8;
      v139 = v257;
      if (v257)
      {
        v140 = (unint64_t *)&v257->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v261[0] = &unk_24D9175B8;
      v142 = v262;
      if (v262)
      {
        v143 = (unint64_t *)&v262->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      v266[0] = &unk_24D9175B8;
      v21 = v267;
      if (v267)
      {
        v145 = (unint64_t *)&v267->__shared_owners_;
        do
          v23 = __ldaxr(v145);
        while (__stlxr(v23 - 1, v145));
        goto LABEL_421;
      }
    }
  }
  else if (v3 == 100)
  {
    v146 = *(const void ***)(a1 + 112);
    v147 = *(_QWORD *)(a1 + 128);
    LODWORD(v261[0]) = *(_DWORD *)(v147 + 16);
    if (LODWORD(v261[0]) != 2)
    {
      v266[0] = v261;
    }
    v149 = *(_QWORD *)(v147 + 128);
    v148 = *(_QWORD *)(v147 + 136);
    v150 = *(_QWORD *)(v147 + 24);
    v151 = *(_QWORD *)(v150 + 8);
    v152 = *(_QWORD *)(v150 + 16);
    v153 = operator new(0x20uLL);
    v257 = (std::__shared_weak_count *)(v153 + 4);
    *v153 = v149;
    v153[1] = v148;
    v153[2] = v151;
    v153[3] = v152;
    __p = v153;
    v256 = (int64x2_t *)(v153 + 4);
    if (*(_QWORD *)(v147 + 112))
      v154 = *(uint64_t **)(v147 + 112);
    else
      v154 = &CoreML::Specification::_WeightParams_default_instance_;
    if (__p)
    {
      v256 = (int64x2_t *)__p;
      operator delete(__p);
    }
    if (*((char *)v146 + 23) >= 0)
      v155 = *((unsigned __int8 *)v146 + 23);
    else
      v155 = (size_t)v146[1];
    v156 = v261;
    std::string::basic_string[abi:ne180100]((uint64_t)v261, v155 + 7);
    if (SHIBYTE(v262) < 0)
      v156 = (const void **)v261[0];
    if (v155)
    {
      if (*((char *)v146 + 23) >= 0)
        v157 = v146;
      else
        v157 = *v146;
      memmove(v156, v157, v155);
    }
    strcpy((char *)v156 + v155, "_weight");
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, v261, (uint64_t)v261, (uint64_t)v266);
    if (SHIBYTE(v262) < 0)
      operator delete((void *)v261[0]);
    if ((uint64_t *)v147 != &CoreML::Specification::_ConvolutionLayerParams_default_instance_)
    {
      v158 = *(_QWORD *)(v147 + 120);
      if (v158)
      {
        v159 = operator new(8uLL);
        v249 = v159;
        *v159 = v149;
        v251 = (std::__shared_weak_count *)(v159 + 1);
        v250 = v159 + 1;
        if (v249)
        {
          v250 = v249;
          operator delete(v249);
        }
        if (*((char *)v146 + 23) >= 0)
          v160 = *((unsigned __int8 *)v146 + 23);
        else
          v160 = (size_t)v146[1];
        v161 = &v243;
        std::string::basic_string[abi:ne180100]((uint64_t)&v243, v160 + 5);
        if (SHIBYTE(v245) < 0)
          v161 = v243;
        if (v160)
        {
          if (*((char *)v146 + 23) >= 0)
            v162 = v146;
          else
            v162 = *v146;
          memmove(v161, v162, v160);
        }
        strcpy((char *)v161 + v160, "_bias");
        std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)&v243, (uint64_t)&v243, (uint64_t)v261);
        if (SHIBYTE(v245) < 0)
          operator delete(v243);
        v261[0] = &unk_24D9175B8;
        v163 = v262;
        if (v262)
        {
          v164 = (unint64_t *)&v262->__shared_owners_;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
      }
    }
    v266[0] = &unk_24D9175B8;
    v21 = v267;
    if (v267)
    {
      v166 = (unint64_t *)&v267->__shared_owners_;
      do
        v23 = __ldaxr(v166);
      while (__stlxr(v23 - 1, v166));
      goto LABEL_421;
    }
  }
  else if (v3 == 140)
  {
    v4 = *(const void ***)(a1 + 112);
    v5 = *(uint64_t **)(a1 + 128);
    v6 = v5[4];
    v7 = v5[5];
    v8 = (int64x2_t *)operator new(0x20uLL);
    v257 = (std::__shared_weak_count *)&v8[2];
    v8->i64[0] = v7;
    v8->i64[1] = v6;
    v8[1] = vdupq_n_s64(1uLL);
    __p = v8;
    v256 = v8 + 2;
    if (v5[2])
      v9 = (uint64_t *)v5[2];
    else
      v9 = &CoreML::Specification::_WeightParams_default_instance_;
    if (__p)
    {
      v256 = (int64x2_t *)__p;
      operator delete(__p);
    }
    if (*((char *)v4 + 23) >= 0)
      v10 = *((unsigned __int8 *)v4 + 23);
    else
      v10 = (size_t)v4[1];
    v11 = v261;
    std::string::basic_string[abi:ne180100]((uint64_t)v261, v10 + 7);
    if (SHIBYTE(v262) < 0)
      v11 = (const void **)v261[0];
    if (v10)
    {
      if (*((char *)v4 + 23) >= 0)
        v12 = v4;
      else
        v12 = *v4;
      memmove(v11, v12, v10);
    }
    strcpy((char *)v11 + v10, "_weight");
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, v261, (uint64_t)v261, (uint64_t)v266);
    if (SHIBYTE(v262) < 0)
      operator delete((void *)v261[0]);
    if (v5 != &CoreML::Specification::_InnerProductLayerParams_default_instance_)
    {
      v13 = v5[3];
      if (v13)
      {
        v14 = operator new(8uLL);
        v249 = v14;
        *v14 = v7;
        v251 = (std::__shared_weak_count *)(v14 + 1);
        v250 = v14 + 1;
        if (v249)
        {
          v250 = v249;
          operator delete(v249);
        }
        if (*((char *)v4 + 23) >= 0)
          v15 = *((unsigned __int8 *)v4 + 23);
        else
          v15 = (size_t)v4[1];
        v16 = &v243;
        std::string::basic_string[abi:ne180100]((uint64_t)&v243, v15 + 5);
        if (SHIBYTE(v245) < 0)
          v16 = v243;
        if (v15)
        {
          if (*((char *)v4 + 23) >= 0)
            v17 = v4;
          else
            v17 = *v4;
          memmove(v16, v17, v15);
        }
        strcpy((char *)v16 + v15, "_bias");
        std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(a2, (const void **)&v243, (uint64_t)&v243, (uint64_t)v261);
        if (SHIBYTE(v245) < 0)
          operator delete(v243);
        v261[0] = &unk_24D9175B8;
        v18 = v262;
        if (v262)
        {
          v19 = (unint64_t *)&v262->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
    }
    v266[0] = &unk_24D9175B8;
    v21 = v267;
    if (v267)
    {
      v22 = (unint64_t *)&v267->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
LABEL_421:
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_2183A7D38()
{
  if (STACK[0x298])
    operator delete((void *)STACK[0x298]);
  JUMPOUT(0x2183A7C58);
}

void sub_2183A7D6C()
{
  if (STACK[0x2E8])
    operator delete((void *)STACK[0x2E8]);
  JUMPOUT(0x2183A7CA0);
}

void sub_2183A7DA0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 248);
  if (v1)
    operator delete(v1);
  JUMPOUT(0x2183A7CE8);
}

void sub_2183A7DD4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 168))
    JUMPOUT(0x2183A7E3CLL);
  JUMPOUT(0x2183A7D30);
}

void sub_2183A7DE4()
{
  uint64_t v0;

  if (*(char *)(v0 - 201) < 0)
    JUMPOUT(0x2183A7DF4);
  JUMPOUT(0x2183A7E00);
}

void turi::neural_net::`anonymous namespace'::wrap_network_params(std::string const&,CoreML::Specification::ConvolutionLayerParams const&,std::map<std::string,turi::neural_net::shared_float_array> *)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/model_spec.cpp", 94);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"2", 1);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"convolution.kernelsize_size()", 29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/model_spec.cpp", "operator()", 163, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
}

void sub_2183A7FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::neural_net::`anonymous namespace'::weight_params_float_array::create_view(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t *v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  std::__shared_weak_count *v16;
  _BYTE *v17;
  _BYTE v18[16];
  _QWORD v19[33];

  v6 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_24D93D2B0;
  *((_QWORD *)v6 + 3) = &off_24D93D300;
  v7 = *(uint64_t **)a1;
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *((_QWORD *)v6 + 4) = v7;
  *(_OWORD *)(v6 + 40) = v8;
  *((_QWORD *)v6 + 7) = a2;
  v9 = 1;
  while (v7 != (uint64_t *)v8)
  {
    v10 = *v7++;
    v9 *= (_DWORD)v10;
  }
  if (*(_DWORD *)(a2 + 16) != v9)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"WeightParams size ", 18);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" inconsistent with expected size ", 33);
    std::ostream::operator<<();
    v17 = v18;
  }
  v15 = v6 + 24;
  v16 = (std::__shared_weak_count *)v6;
  turi::neural_net::shared_float_array::shared_float_array(a3, &v15);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_2183A81E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__shared_weak_count *v33;
  uint64_t v35;
  void *shared_owners;
  void *v37;

  a14 = *MEMORY[0x24BEDB7F0];
  v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a14 + *(_QWORD *)(a14 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a16 = v35;
  a17 = MEMORY[0x24BEDB848] + 16;
  if (a30 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&a33);
  shared_owners = (void *)v33[1].__shared_owners_;
  if (shared_owners)
  {
    v33[1].__shared_weak_owners_ = (uint64_t)shared_owners;
    operator delete(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v33);
  operator delete(v37);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::`anonymous namespace'::weight_params_float_array>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93D2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::`anonymous namespace'::weight_params_float_array>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D93D2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::neural_net::`anonymous namespace'::weight_params_float_array>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void turi::neural_net::`anonymous namespace'::weight_params_float_array::~weight_params_float_array(turi::neural_net::_anonymous_namespace_::weight_params_float_array *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::`anonymous namespace'::weight_params_float_array::data(turi::neural_net::_anonymous_namespace_::weight_params_float_array *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 24);
  if (v1)
    return v1 + 8;
  else
    return 0;
}

uint64_t turi::neural_net::`anonymous namespace'::weight_params_float_array::size(turi::neural_net::_anonymous_namespace_::weight_params_float_array *this)
{
  return *(int *)(*((_QWORD *)this + 4) + 16);
}

uint64_t turi::neural_net::`anonymous namespace'::weight_params_float_array::shape(turi::neural_net::_anonymous_namespace_::weight_params_float_array *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t turi::neural_net::`anonymous namespace'::weight_params_float_array::dim(turi::neural_net::_anonymous_namespace_::weight_params_float_array *this)
{
  return (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
}

_OWORD *std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__emplace_unique_key_args<std::string,std::string,turi::neural_net::shared_float_array>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  void **v7;
  _OWORD *v8;
  uint64_t **v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[2];
  char v15;
  uint64_t v16;

  v7 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v16, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = operator new(0x70uLL);
    v14[1] = a1 + 1;
    v8[2] = *(_OWORD *)a3;
    v10 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)v8 + 6) = v10;
    *((_QWORD *)v8 + 7) = &unk_24D9175B8;
    v11 = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v12 = *(_OWORD *)(a4 + 24);
    v8[4] = v11;
    v8[5] = v12;
    v8[6] = *(_OWORD *)(a4 + 40);
    v15 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v16, v9, (uint64_t *)v8);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
  }
  return v8;
}

void turi::neural_net::`anonymous namespace'::update_network_params(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  const void **v5;
  uint64_t *v6;
  size_t v7;
  void **v8;
  const void *v9;
  size_t v10;
  __int128 *v11;
  const void *v12;
  int v13;
  const void **v14;
  uint64_t v15;
  size_t v16;
  void **v17;
  const void *v18;
  char is_layer_params_convertible_fp16;
  char v20;
  const void **v21;
  uint64_t *v22;
  size_t v23;
  void **v24;
  const void *v25;
  size_t v26;
  __int128 *v27;
  const void *v28;
  const void **v29;
  _QWORD *v30;
  size_t v31;
  void **v32;
  const void *v33;
  char v34;
  char v35;
  size_t v36;
  void **v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  CoreML::Specification::WeightParams *v41;
  size_t v42;
  __int128 *v43;
  const void *v44;
  uint64_t v45;
  CoreML::Specification::WeightParams *v46;
  size_t v47;
  void **v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  CoreML::Specification::WeightParams *v52;
  size_t v53;
  __int128 *v54;
  const void *v55;
  size_t v56;
  void **v57;
  const void *v58;
  char v59;
  size_t v60;
  void **v61;
  const void *v62;
  char v63;
  size_t v64;
  void **v65;
  const void *v66;
  char v67;
  size_t v68;
  void **v69;
  const void *v70;
  char v71;
  size_t v72;
  void **v73;
  const void *v74;
  char v75;
  size_t v76;
  void **v77;
  const void *v78;
  char v79;
  size_t v80;
  void **v81;
  const void *v82;
  char v83;
  size_t v84;
  void **v85;
  const void *v86;
  char v87;
  size_t v88;
  void **v89;
  const void *v90;
  char v91;
  size_t v92;
  void **v93;
  const void *v94;
  char v95;
  size_t v96;
  void **v97;
  const void *v98;
  int v99;
  CoreML::Specification::LSTMWeightParams *v100;
  size_t v101;
  void **v102;
  const void *v103;
  uint64_t v104;
  uint64_t v105;
  CoreML::Specification::WeightParams *v106;
  size_t v107;
  __int128 *v108;
  const void *v109;
  uint64_t v110;
  CoreML::Specification::WeightParams *v111;
  size_t v112;
  __int128 *v113;
  const void *v114;
  uint64_t v115;
  CoreML::Specification::WeightParams *v116;
  size_t v117;
  __int128 *v118;
  const void *v119;
  uint64_t v120;
  CoreML::Specification::WeightParams *v121;
  size_t v122;
  __int128 *v123;
  const void *v124;
  uint64_t v125;
  CoreML::Specification::WeightParams *v126;
  size_t v127;
  __int128 *v128;
  const void *v129;
  uint64_t v130;
  CoreML::Specification::WeightParams *v131;
  size_t v132;
  __int128 *v133;
  const void *v134;
  uint64_t v135;
  CoreML::Specification::WeightParams *v136;
  size_t v137;
  __int128 *v138;
  const void *v139;
  uint64_t v140;
  CoreML::Specification::WeightParams *v141;
  size_t v142;
  __int128 *v143;
  const void *v144;
  uint64_t v145;
  CoreML::Specification::WeightParams *v146;
  size_t v147;
  __int128 *v148;
  const void *v149;
  uint64_t v150;
  CoreML::Specification::WeightParams *v151;
  size_t v152;
  __int128 *v153;
  const void *v154;
  uint64_t v155;
  CoreML::Specification::WeightParams *v156;
  size_t v157;
  __int128 *v158;
  const void *v159;
  uint64_t v160;
  CoreML::Specification::WeightParams *v161;
  size_t v162;
  void **v163;
  const void *v164;
  char v165;
  size_t v166;
  void **v167;
  const void *v168;
  char v169;
  size_t v170;
  void **v171;
  const void *v172;
  size_t v173;
  void **v174;
  const void *v175;
  uint64_t v176;
  uint64_t v177;
  CoreML::Specification::WeightParams *v178;
  size_t v179;
  __int128 *v180;
  const void *v181;
  uint64_t v182;
  CoreML::Specification::WeightParams *v183;
  size_t v184;
  __int128 *v185;
  const void *v186;
  uint64_t v187;
  CoreML::Specification::WeightParams *v188;
  size_t v189;
  __int128 *v190;
  const void *v191;
  __int128 v192;
  uint64_t v193;
  void *__p[2];
  uint64_t v195;

  v4 = *(_DWORD *)(a2 + 140);
  if (v4 > 159)
  {
    if (v4 != 160)
    {
      if (v4 != 420)
        return;
      v14 = *(const void ***)(a2 + 112);
      v15 = *(_QWORD *)(a2 + 128);
      if (!a3)
        goto LABEL_305;
      if (*((char *)v14 + 23) >= 0)
        v16 = *((unsigned __int8 *)v14 + 23);
      else
        v16 = (size_t)v14[1];
      v17 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v16 + 13);
      if (v195 < 0)
        v17 = (void **)__p[0];
      if (v16)
      {
        if (*((char *)v14 + 23) >= 0)
          v18 = v14;
        else
          v18 = *v14;
        memmove(v17, v18, v16);
      }
      strcpy((char *)v17 + v16, "_i2h_i_weight");
      v20 = is_layer_params_convertible_fp16;
      if (SHIBYTE(v195) < 0)
      {
        operator delete(__p[0]);
        if ((v20 & 1) == 0)
          goto LABEL_305;
      }
      else if ((is_layer_params_convertible_fp16 & 1) == 0)
      {
        goto LABEL_305;
      }
      if (*((char *)v14 + 23) >= 0)
        v56 = *((unsigned __int8 *)v14 + 23);
      else
        v56 = (size_t)v14[1];
      v57 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v56 + 13);
      if (v195 < 0)
        v57 = (void **)__p[0];
      if (v56)
      {
        if (*((char *)v14 + 23) >= 0)
          v58 = v14;
        else
          v58 = *v14;
        memmove(v57, v58, v56);
      }
      strcpy((char *)v57 + v56, "_i2h_f_weight");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      if ((v59 & 1) != 0)
      {
        if (*((char *)v14 + 23) >= 0)
          v60 = *((unsigned __int8 *)v14 + 23);
        else
          v60 = (size_t)v14[1];
        v61 = __p;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v60 + 13);
        if (v195 < 0)
          v61 = (void **)__p[0];
        if (v60)
        {
          if (*((char *)v14 + 23) >= 0)
            v62 = v14;
          else
            v62 = *v14;
          memmove(v61, v62, v60);
        }
        strcpy((char *)v61 + v60, "_i2h_c_weight");
        if (SHIBYTE(v195) < 0)
          operator delete(__p[0]);
        if ((v63 & 1) != 0)
        {
          if (*((char *)v14 + 23) >= 0)
            v64 = *((unsigned __int8 *)v14 + 23);
          else
            v64 = (size_t)v14[1];
          v65 = __p;
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v64 + 13);
          if (v195 < 0)
            v65 = (void **)__p[0];
          if (v64)
          {
            if (*((char *)v14 + 23) >= 0)
              v66 = v14;
            else
              v66 = *v14;
            memmove(v65, v66, v64);
          }
          strcpy((char *)v65 + v64, "_i2h_o_weight");
          if (SHIBYTE(v195) < 0)
            operator delete(__p[0]);
          if ((v67 & 1) != 0)
          {
            if (*((char *)v14 + 23) >= 0)
              v68 = *((unsigned __int8 *)v14 + 23);
            else
              v68 = (size_t)v14[1];
            v69 = __p;
            std::string::basic_string[abi:ne180100]((uint64_t)__p, v68 + 13);
            if (v195 < 0)
              v69 = (void **)__p[0];
            if (v68)
            {
              if (*((char *)v14 + 23) >= 0)
                v70 = v14;
              else
                v70 = *v14;
              memmove(v69, v70, v68);
            }
            strcpy((char *)v69 + v68, "_h2h_i_weight");
            if (SHIBYTE(v195) < 0)
              operator delete(__p[0]);
            if ((v71 & 1) != 0)
            {
              if (*((char *)v14 + 23) >= 0)
                v72 = *((unsigned __int8 *)v14 + 23);
              else
                v72 = (size_t)v14[1];
              v73 = __p;
              std::string::basic_string[abi:ne180100]((uint64_t)__p, v72 + 13);
              if (v195 < 0)
                v73 = (void **)__p[0];
              if (v72)
              {
                if (*((char *)v14 + 23) >= 0)
                  v74 = v14;
                else
                  v74 = *v14;
                memmove(v73, v74, v72);
              }
              strcpy((char *)v73 + v72, "_h2h_f_weight");
              if (SHIBYTE(v195) < 0)
                operator delete(__p[0]);
              if ((v75 & 1) != 0)
              {
                if (*((char *)v14 + 23) >= 0)
                  v76 = *((unsigned __int8 *)v14 + 23);
                else
                  v76 = (size_t)v14[1];
                v77 = __p;
                std::string::basic_string[abi:ne180100]((uint64_t)__p, v76 + 13);
                if (v195 < 0)
                  v77 = (void **)__p[0];
                if (v76)
                {
                  if (*((char *)v14 + 23) >= 0)
                    v78 = v14;
                  else
                    v78 = *v14;
                  memmove(v77, v78, v76);
                }
                strcpy((char *)v77 + v76, "_h2h_c_weight");
                if (SHIBYTE(v195) < 0)
                  operator delete(__p[0]);
                if ((v79 & 1) != 0)
                {
                  if (*((char *)v14 + 23) >= 0)
                    v80 = *((unsigned __int8 *)v14 + 23);
                  else
                    v80 = (size_t)v14[1];
                  v81 = __p;
                  std::string::basic_string[abi:ne180100]((uint64_t)__p, v80 + 13);
                  if (v195 < 0)
                    v81 = (void **)__p[0];
                  if (v80)
                  {
                    if (*((char *)v14 + 23) >= 0)
                      v82 = v14;
                    else
                      v82 = *v14;
                    memmove(v81, v82, v80);
                  }
                  strcpy((char *)v81 + v80, "_h2h_o_weight");
                  if (SHIBYTE(v195) < 0)
                    operator delete(__p[0]);
                  if ((v83 & 1) != 0)
                  {
                    if (*((char *)v14 + 23) >= 0)
                      v84 = *((unsigned __int8 *)v14 + 23);
                    else
                      v84 = (size_t)v14[1];
                    v85 = __p;
                    std::string::basic_string[abi:ne180100]((uint64_t)__p, v84 + 11);
                    if (v195 < 0)
                      v85 = (void **)__p[0];
                    if (v84)
                    {
                      if (*((char *)v14 + 23) >= 0)
                        v86 = v14;
                      else
                        v86 = *v14;
                      memmove(v85, v86, v84);
                    }
                    strcpy((char *)v85 + v84, "_h2h_i_bias");
                    if (SHIBYTE(v195) < 0)
                      operator delete(__p[0]);
                    if ((v87 & 1) != 0)
                    {
                      if (*((char *)v14 + 23) >= 0)
                        v88 = *((unsigned __int8 *)v14 + 23);
                      else
                        v88 = (size_t)v14[1];
                      v89 = __p;
                      std::string::basic_string[abi:ne180100]((uint64_t)__p, v88 + 11);
                      if (v195 < 0)
                        v89 = (void **)__p[0];
                      if (v88)
                      {
                        if (*((char *)v14 + 23) >= 0)
                          v90 = v14;
                        else
                          v90 = *v14;
                        memmove(v89, v90, v88);
                      }
                      strcpy((char *)v89 + v88, "_h2h_f_bias");
                      if (SHIBYTE(v195) < 0)
                        operator delete(__p[0]);
                      if ((v91 & 1) != 0)
                      {
                        if (*((char *)v14 + 23) >= 0)
                          v92 = *((unsigned __int8 *)v14 + 23);
                        else
                          v92 = (size_t)v14[1];
                        v93 = __p;
                        std::string::basic_string[abi:ne180100]((uint64_t)__p, v92 + 11);
                        if (v195 < 0)
                          v93 = (void **)__p[0];
                        if (v92)
                        {
                          if (*((char *)v14 + 23) >= 0)
                            v94 = v14;
                          else
                            v94 = *v14;
                          memmove(v93, v94, v92);
                        }
                        strcpy((char *)v93 + v92, "_h2h_c_bias");
                        if (SHIBYTE(v195) < 0)
                          operator delete(__p[0]);
                        if ((v95 & 1) != 0)
                        {
                          if (*((char *)v14 + 23) >= 0)
                            v96 = *((unsigned __int8 *)v14 + 23);
                          else
                            v96 = (size_t)v14[1];
                          v97 = __p;
                          std::string::basic_string[abi:ne180100]((uint64_t)__p, v96 + 11);
                          if (v195 < 0)
                            v97 = (void **)__p[0];
                          if (v96)
                          {
                            if (*((char *)v14 + 23) >= 0)
                              v98 = v14;
                            else
                              v98 = *v14;
                            memmove(v97, v98, v96);
                          }
                          strcpy((char *)v97 + v96, "_h2h_o_bias");
                          if (SHIBYTE(v195) < 0)
                            operator delete(__p[0]);
                          goto LABEL_306;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_305:
      v99 = 0;
LABEL_306:
      v100 = *(CoreML::Specification::LSTMWeightParams **)(v15 + 48);
      if (!v100)
      {
        v100 = (CoreML::Specification::LSTMWeightParams *)operator new();
        CoreML::Specification::LSTMWeightParams::LSTMWeightParams(v100);
        *(_QWORD *)(v15 + 48) = v100;
      }
      if (*((char *)v14 + 23) >= 0)
        v101 = *((unsigned __int8 *)v14 + 23);
      else
        v101 = (size_t)v14[1];
      v102 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v101 + 13);
      if (v195 < 0)
        v102 = (void **)__p[0];
      if (v101)
      {
        if (*((char *)v14 + 23) >= 0)
          v103 = v14;
        else
          v103 = *v14;
        memmove(v102, v103, v101);
      }
      strcpy((char *)v102 + v101, "_i2h_i_weight");
      v104 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      v105 = a1 + 8;
      if (a1 + 8 != v104)
      {
        v106 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 2);
        if (!v106)
        {
          v106 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v106);
          *((_QWORD *)v100 + 2) = v106;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v107 = *((unsigned __int8 *)v14 + 23);
      else
        v107 = (size_t)v14[1];
      v108 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v107 + 13);
      if (v193 < 0)
        v108 = (__int128 *)v192;
      if (v107)
      {
        if (*((char *)v14 + 23) >= 0)
          v109 = v14;
        else
          v109 = *v14;
        memmove(v108, v109, v107);
      }
      strcpy((char *)v108 + v107, "_i2h_f_weight");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v110 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v110)
      {
        v111 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 3);
        if (!v111)
        {
          v111 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v111);
          *((_QWORD *)v100 + 3) = v111;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v112 = *((unsigned __int8 *)v14 + 23);
      else
        v112 = (size_t)v14[1];
      v113 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v112 + 13);
      if (v193 < 0)
        v113 = (__int128 *)v192;
      if (v112)
      {
        if (*((char *)v14 + 23) >= 0)
          v114 = v14;
        else
          v114 = *v14;
        memmove(v113, v114, v112);
      }
      strcpy((char *)v113 + v112, "_i2h_c_weight");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v115 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v115)
      {
        v116 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 4);
        if (!v116)
        {
          v116 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v116);
          *((_QWORD *)v100 + 4) = v116;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v117 = *((unsigned __int8 *)v14 + 23);
      else
        v117 = (size_t)v14[1];
      v118 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v117 + 13);
      if (v193 < 0)
        v118 = (__int128 *)v192;
      if (v117)
      {
        if (*((char *)v14 + 23) >= 0)
          v119 = v14;
        else
          v119 = *v14;
        memmove(v118, v119, v117);
      }
      strcpy((char *)v118 + v117, "_i2h_o_weight");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v120 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v120)
      {
        v121 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 5);
        if (!v121)
        {
          v121 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v121);
          *((_QWORD *)v100 + 5) = v121;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v122 = *((unsigned __int8 *)v14 + 23);
      else
        v122 = (size_t)v14[1];
      v123 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v122 + 13);
      if (v193 < 0)
        v123 = (__int128 *)v192;
      if (v122)
      {
        if (*((char *)v14 + 23) >= 0)
          v124 = v14;
        else
          v124 = *v14;
        memmove(v123, v124, v122);
      }
      strcpy((char *)v123 + v122, "_h2h_i_weight");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v125 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v125)
      {
        v126 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 6);
        if (!v126)
        {
          v126 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v126);
          *((_QWORD *)v100 + 6) = v126;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v127 = *((unsigned __int8 *)v14 + 23);
      else
        v127 = (size_t)v14[1];
      v128 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v127 + 13);
      if (v193 < 0)
        v128 = (__int128 *)v192;
      if (v127)
      {
        if (*((char *)v14 + 23) >= 0)
          v129 = v14;
        else
          v129 = *v14;
        memmove(v128, v129, v127);
      }
      strcpy((char *)v128 + v127, "_h2h_f_weight");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v130 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v130)
      {
        v131 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 7);
        if (!v131)
        {
          v131 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v131);
          *((_QWORD *)v100 + 7) = v131;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v132 = *((unsigned __int8 *)v14 + 23);
      else
        v132 = (size_t)v14[1];
      v133 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v132 + 13);
      if (v193 < 0)
        v133 = (__int128 *)v192;
      if (v132)
      {
        if (*((char *)v14 + 23) >= 0)
          v134 = v14;
        else
          v134 = *v14;
        memmove(v133, v134, v132);
      }
      strcpy((char *)v133 + v132, "_h2h_c_weight");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v135 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v135)
      {
        v136 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 8);
        if (!v136)
        {
          v136 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v136);
          *((_QWORD *)v100 + 8) = v136;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v137 = *((unsigned __int8 *)v14 + 23);
      else
        v137 = (size_t)v14[1];
      v138 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v137 + 13);
      if (v193 < 0)
        v138 = (__int128 *)v192;
      if (v137)
      {
        if (*((char *)v14 + 23) >= 0)
          v139 = v14;
        else
          v139 = *v14;
        memmove(v138, v139, v137);
      }
      strcpy((char *)v138 + v137, "_h2h_o_weight");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v140 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v140)
      {
        v141 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 9);
        if (!v141)
        {
          v141 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v141);
          *((_QWORD *)v100 + 9) = v141;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v142 = *((unsigned __int8 *)v14 + 23);
      else
        v142 = (size_t)v14[1];
      v143 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v142 + 11);
      if (v193 < 0)
        v143 = (__int128 *)v192;
      if (v142)
      {
        if (*((char *)v14 + 23) >= 0)
          v144 = v14;
        else
          v144 = *v14;
        memmove(v143, v144, v142);
      }
      strcpy((char *)v143 + v142, "_h2h_i_bias");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v145 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v145)
      {
        v146 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 10);
        if (!v146)
        {
          v146 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v146);
          *((_QWORD *)v100 + 10) = v146;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v147 = *((unsigned __int8 *)v14 + 23);
      else
        v147 = (size_t)v14[1];
      v148 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v147 + 11);
      if (v193 < 0)
        v148 = (__int128 *)v192;
      if (v147)
      {
        if (*((char *)v14 + 23) >= 0)
          v149 = v14;
        else
          v149 = *v14;
        memmove(v148, v149, v147);
      }
      strcpy((char *)v148 + v147, "_h2h_f_bias");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v150 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v150)
      {
        v151 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 11);
        if (!v151)
        {
          v151 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v151);
          *((_QWORD *)v100 + 11) = v151;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v152 = *((unsigned __int8 *)v14 + 23);
      else
        v152 = (size_t)v14[1];
      v153 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v152 + 11);
      if (v193 < 0)
        v153 = (__int128 *)v192;
      if (v152)
      {
        if (*((char *)v14 + 23) >= 0)
          v154 = v14;
        else
          v154 = *v14;
        memmove(v153, v154, v152);
      }
      strcpy((char *)v153 + v152, "_h2h_c_bias");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v155 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v155)
      {
        v156 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 12);
        if (!v156)
        {
          v156 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v156);
          *((_QWORD *)v100 + 12) = v156;
        }
      }
      if (*((char *)v14 + 23) >= 0)
        v157 = *((unsigned __int8 *)v14 + 23);
      else
        v157 = (size_t)v14[1];
      v158 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v157 + 11);
      if (v193 < 0)
        v158 = (__int128 *)v192;
      if (v157)
      {
        if (*((char *)v14 + 23) >= 0)
          v159 = v14;
        else
          v159 = *v14;
        memmove(v158, v159, v157);
      }
      strcpy((char *)v158 + v157, "_h2h_o_bias");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
      v160 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
      if (v105 != v160)
      {
        v161 = (CoreML::Specification::WeightParams *)*((_QWORD *)v100 + 13);
        if (!v161)
        {
          v161 = (CoreML::Specification::WeightParams *)operator new();
          CoreML::Specification::WeightParams::WeightParams(v161);
          *((_QWORD *)v100 + 13) = v161;
        }
      }
      goto LABEL_600;
    }
    v29 = *(const void ***)(a2 + 112);
    v30 = *(_QWORD **)(a2 + 128);
    if (!a3)
      goto LABEL_537;
    if (*((char *)v29 + 23) >= 0)
      v31 = *((unsigned __int8 *)v29 + 23);
    else
      v31 = (size_t)v29[1];
    v32 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v31 + 6);
    if (v195 < 0)
      v32 = (void **)__p[0];
    if (v31)
    {
      if (*((char *)v29 + 23) >= 0)
        v33 = v29;
      else
        v33 = *v29;
      memmove(v32, v33, v31);
    }
    strcpy((char *)v32 + v31, "_gamma");
    v35 = v34;
    if (SHIBYTE(v195) < 0)
    {
      operator delete(__p[0]);
      if ((v35 & 1) == 0)
        goto LABEL_537;
    }
    else if ((v34 & 1) == 0)
    {
      goto LABEL_537;
    }
    if (*((char *)v29 + 23) >= 0)
      v162 = *((unsigned __int8 *)v29 + 23);
    else
      v162 = (size_t)v29[1];
    v163 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v162 + 5);
    if (v195 < 0)
      v163 = (void **)__p[0];
    if (v162)
    {
      if (*((char *)v29 + 23) >= 0)
        v164 = v29;
      else
        v164 = *v29;
      memmove(v163, v164, v162);
    }
    strcpy((char *)v163 + v162, "_beta");
    if (SHIBYTE(v195) < 0)
      operator delete(__p[0]);
    if ((v165 & 1) != 0)
    {
      if (*((char *)v29 + 23) >= 0)
        v166 = *((unsigned __int8 *)v29 + 23);
      else
        v166 = (size_t)v29[1];
      v167 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v166 + 13);
      if (v195 < 0)
        v167 = (void **)__p[0];
      if (v166)
      {
        if (*((char *)v29 + 23) >= 0)
          v168 = v29;
        else
          v168 = *v29;
        memmove(v167, v168, v166);
      }
      strcpy((char *)v167 + v166, "_running_mean");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      if ((v169 & 1) != 0)
      {
        if (*((char *)v29 + 23) >= 0)
          v170 = *((unsigned __int8 *)v29 + 23);
        else
          v170 = (size_t)v29[1];
        v171 = __p;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v170 + 12);
        if (v195 < 0)
          v171 = (void **)__p[0];
        if (v170)
        {
          if (*((char *)v29 + 23) >= 0)
            v172 = v29;
          else
            v172 = *v29;
          memmove(v171, v172, v170);
        }
        strcpy((char *)v171 + v170, "_running_var");
        if (SHIBYTE(v195) < 0)
          operator delete(__p[0]);
        goto LABEL_538;
      }
    }
LABEL_537:
    v13 = 0;
LABEL_538:
    if (*((char *)v29 + 23) >= 0)
      v173 = *((unsigned __int8 *)v29 + 23);
    else
      v173 = (size_t)v29[1];
    v174 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v173 + 6);
    if (v195 < 0)
      v174 = (void **)__p[0];
    if (v173)
    {
      if (*((char *)v29 + 23) >= 0)
        v175 = v29;
      else
        v175 = *v29;
      memmove(v174, v175, v173);
    }
    strcpy((char *)v174 + v173, "_gamma");
    v176 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    v177 = a1 + 8;
    if (a1 + 8 != v176)
    {
      v178 = (CoreML::Specification::WeightParams *)v30[2];
      if (!v178)
      {
        v178 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v178);
        v30[2] = v178;
      }
    }
    if (*((char *)v29 + 23) >= 0)
      v179 = *((unsigned __int8 *)v29 + 23);
    else
      v179 = (size_t)v29[1];
    v180 = &v192;
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v179 + 5);
    if (v193 < 0)
      v180 = (__int128 *)v192;
    if (v179)
    {
      if (*((char *)v29 + 23) >= 0)
        v181 = v29;
      else
        v181 = *v29;
      memmove(v180, v181, v179);
    }
    strcpy((char *)v180 + v179, "_beta");
    if (SHIBYTE(v195) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v192;
    v195 = v193;
    v182 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    if (v177 != v182)
    {
      v183 = (CoreML::Specification::WeightParams *)v30[3];
      if (!v183)
      {
        v183 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v183);
        v30[3] = v183;
      }
    }
    if (*((char *)v29 + 23) >= 0)
      v184 = *((unsigned __int8 *)v29 + 23);
    else
      v184 = (size_t)v29[1];
    v185 = &v192;
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v184 + 13);
    if (v193 < 0)
      v185 = (__int128 *)v192;
    if (v184)
    {
      if (*((char *)v29 + 23) >= 0)
        v186 = v29;
      else
        v186 = *v29;
      memmove(v185, v186, v184);
    }
    strcpy((char *)v185 + v184, "_running_mean");
    if (SHIBYTE(v195) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v192;
    v195 = v193;
    v187 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    if (v177 != v187)
    {
      v188 = (CoreML::Specification::WeightParams *)v30[4];
      if (!v188)
      {
        v188 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v188);
        v30[4] = v188;
      }
    }
    if (*((char *)v29 + 23) >= 0)
      v189 = *((unsigned __int8 *)v29 + 23);
    else
      v189 = (size_t)v29[1];
    v190 = &v192;
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v189 + 12);
    if (v193 < 0)
      v190 = (__int128 *)v192;
    if (v189)
    {
      if (*((char *)v29 + 23) >= 0)
        v191 = v29;
      else
        v191 = *v29;
      memmove(v190, v191, v189);
    }
    strcpy((char *)v190 + v189, "_running_var");
    if (SHIBYTE(v195) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v192;
    v195 = v193;
    v45 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    if (v177 == v45)
      goto LABEL_600;
    v46 = (CoreML::Specification::WeightParams *)v30[5];
    if (!v46)
    {
      v46 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v46);
      v30[5] = v46;
    }
    goto LABEL_599;
  }
  if (v4 == 100)
  {
    v21 = *(const void ***)(a2 + 112);
    v22 = *(uint64_t **)(a2 + 128);
    if (a3)
    {
      if (*((char *)v21 + 23) >= 0)
        v23 = *((unsigned __int8 *)v21 + 23);
      else
        v23 = (size_t)v21[1];
      v24 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v23 + 7);
      if (v195 < 0)
        v24 = (void **)__p[0];
      if (v23)
      {
        if (*((char *)v21 + 23) >= 0)
          v25 = v21;
        else
          v25 = *v21;
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, "_weight");
        goto LABEL_127;
      if (v22 == &CoreML::Specification::_ConvolutionLayerParams_default_instance_ || !v22[15])
        goto LABEL_75;
      if (*((char *)v21 + 23) >= 0)
        v26 = *((unsigned __int8 *)v21 + 23);
      else
        v26 = (size_t)v21[1];
      v27 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v26 + 5);
      if (v193 < 0)
        v27 = (__int128 *)v192;
      if (v26)
      {
        if (*((char *)v21 + 23) >= 0)
          v28 = v21;
        else
          v28 = *v21;
        memmove(v27, v28, v26);
      }
      strcpy((char *)v27 + v26, "_bias");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
LABEL_75:
        v13 = 1;
      else
LABEL_127:
        v13 = 0;
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v13 = 0;
    }
    if (*((char *)v21 + 23) >= 0)
      v47 = *((unsigned __int8 *)v21 + 23);
    else
      v47 = (size_t)v21[1];
    v48 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v47 + 7);
    if (v195 < 0)
      v48 = (void **)__p[0];
    if (v47)
    {
      if (*((char *)v21 + 23) >= 0)
        v49 = v21;
      else
        v49 = *v21;
      memmove(v48, v49, v47);
    }
    strcpy((char *)v48 + v47, "_weight");
    v50 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    v51 = a1 + 8;
    if (a1 + 8 != v50)
    {
      v52 = (CoreML::Specification::WeightParams *)v22[14];
      if (!v52)
      {
        v52 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v52);
        v22[14] = (uint64_t)v52;
      }
    }
    if (v22 == &CoreML::Specification::_ConvolutionLayerParams_default_instance_ || !v22[15])
      goto LABEL_600;
    if (*((char *)v21 + 23) >= 0)
      v53 = *((unsigned __int8 *)v21 + 23);
    else
      v53 = (size_t)v21[1];
    v54 = &v192;
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v53 + 5);
    if (v193 < 0)
      v54 = (__int128 *)v192;
    if (v53)
    {
      if (*((char *)v21 + 23) >= 0)
        v55 = v21;
      else
        v55 = *v21;
      memmove(v54, v55, v53);
    }
    strcpy((char *)v54 + v53, "_bias");
    if (SHIBYTE(v195) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v192;
    v195 = v193;
    v45 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    if (v51 == v45)
      goto LABEL_600;
    v46 = (CoreML::Specification::WeightParams *)v22[15];
    if (!v46)
    {
      v46 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v46);
      v22[15] = (uint64_t)v46;
    }
  }
  else
  {
    if (v4 != 140)
      return;
    v5 = *(const void ***)(a2 + 112);
    v6 = *(uint64_t **)(a2 + 128);
    if (a3)
    {
      if (*((char *)v5 + 23) >= 0)
        v7 = *((unsigned __int8 *)v5 + 23);
      else
        v7 = (size_t)v5[1];
      v8 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 7);
      if (v195 < 0)
        v8 = (void **)__p[0];
      if (v7)
      {
        if (*((char *)v5 + 23) >= 0)
          v9 = v5;
        else
          v9 = *v5;
        memmove(v8, v9, v7);
      }
      strcpy((char *)v8 + v7, "_weight");
        goto LABEL_92;
      if (v6 == &CoreML::Specification::_InnerProductLayerParams_default_instance_ || !v6[3])
        goto LABEL_31;
      if (*((char *)v5 + 23) >= 0)
        v10 = *((unsigned __int8 *)v5 + 23);
      else
        v10 = (size_t)v5[1];
      v11 = &v192;
      std::string::basic_string[abi:ne180100]((uint64_t)&v192, v10 + 5);
      if (v193 < 0)
        v11 = (__int128 *)v192;
      if (v10)
      {
        if (*((char *)v5 + 23) >= 0)
          v12 = v5;
        else
          v12 = *v5;
        memmove(v11, v12, v10);
      }
      strcpy((char *)v11 + v10, "_bias");
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v192;
      v195 = v193;
LABEL_31:
        v13 = 1;
      else
LABEL_92:
        v13 = 0;
      if (SHIBYTE(v195) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v13 = 0;
    }
    if (*((char *)v5 + 23) >= 0)
      v36 = *((unsigned __int8 *)v5 + 23);
    else
      v36 = (size_t)v5[1];
    v37 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v36 + 7);
    if (v195 < 0)
      v37 = (void **)__p[0];
    if (v36)
    {
      if (*((char *)v5 + 23) >= 0)
        v38 = v5;
      else
        v38 = *v5;
      memmove(v37, v38, v36);
    }
    strcpy((char *)v37 + v36, "_weight");
    v39 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    v40 = a1 + 8;
    if (a1 + 8 != v39)
    {
      v41 = (CoreML::Specification::WeightParams *)v6[2];
      if (!v41)
      {
        v41 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v41);
        v6[2] = (uint64_t)v41;
      }
    }
    if (v6 == &CoreML::Specification::_InnerProductLayerParams_default_instance_ || !v6[3])
      goto LABEL_600;
    if (*((char *)v5 + 23) >= 0)
      v42 = *((unsigned __int8 *)v5 + 23);
    else
      v42 = (size_t)v5[1];
    v43 = &v192;
    std::string::basic_string[abi:ne180100]((uint64_t)&v192, v42 + 5);
    if (v193 < 0)
      v43 = (__int128 *)v192;
    if (v42)
    {
      if (*((char *)v5 + 23) >= 0)
        v44 = v5;
      else
        v44 = *v5;
      memmove(v43, v44, v42);
    }
    strcpy((char *)v43 + v42, "_bias");
    if (SHIBYTE(v195) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v192;
    v195 = v193;
    v45 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)__p);
    if (v40 == v45)
      goto LABEL_600;
    v46 = (CoreML::Specification::WeightParams *)v6[3];
    if (!v46)
    {
      v46 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v46);
      v6[3] = (uint64_t)v46;
    }
  }
LABEL_599:
LABEL_600:
  if (SHIBYTE(v195) < 0)
    operator delete(__p[0]);
}

void sub_2183AA440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::neural_net::`anonymous namespace'::update_weight_params(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  size_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *p_p;
  _BYTE *v23;
  __n128 __p;
  uint64_t v25;

  v8 = *(_DWORD *)(a3 + 16);
  if (v8 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"float_array ", 12);
    v17 = *(char *)(a1 + 23);
    if (v17 >= 0)
      v18 = a1;
    else
      v18 = *(_QWORD *)a1;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a1 + 23);
    else
      v19 = *(_QWORD *)(a1 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" has size ", 10);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" inconsistent with expected size ", 33);
    std::ostream::operator<<();
    p_p = &__p;
  }
  v9 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v11 = v10;
  if (a4)
  {
    if (v10)
      v12 = v9;
    else
      v12 = 0;
    turi::neural_net::get_half_precision_weights(v12, v11, (uint64_t)&p_p);
    std::string::basic_string[abi:ne180100](&__p, p_p, v23 - (_BYTE *)p_p);
    _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(a3 + 40), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, &__p);
    if (SHIBYTE(v25) < 0)
      operator delete((void *)__p.n128_u64[0]);
    *(_DWORD *)(a3 + 16) = 0;
    if (p_p)
    {
      v23 = p_p;
      operator delete(p_p);
    }
  }
  else if (v10)
  {
    v13 = 4 * v10;
    v14 = *(_QWORD *)(a3 + 24);
    if (v14)
      v15 = (void *)(v14 + 8);
    else
      v15 = 0;
    memmove(v15, v9, v13);
  }
}

void sub_2183AA784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::`anonymous namespace'::is_layer_params_convertible_fp16(const void **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;

  v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a2, a1);
  if (a2 + 8 == v3)
    return 0;
  v4 = v3 + 56;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 56) + 16))(v3 + 56);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  if (v6)
    v7 = (float *)v5;
  else
    v7 = 0;
  return turi::neural_net::is_convertible_to_fp16(v7, v6);
}

uint64_t _GLOBAL__sub_I_model_spec_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

id turi::neural_net::`anonymous namespace'::create_rng_batch(turi::neural_net::_anonymous_namespace_ *this, unsigned int a2)
{
  void *v4;
  turi::neural_net::_anonymous_namespace_ *v5;
  void *v6;
  void *v7;
  _QWORD v9[5];
  void *__p[3];
  _QWORD v11[6];
  _QWORD v12[315];

  v12[313] = *MEMORY[0x24BDAC8D0];
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", this);
  if (this)
  {
    v5 = 0;
    do
    {
      v11[0] = __PAIR64__(v5, a2);
      std::seed_seq::seed_seq[abi:ne180100]<int,(void *)0>(__p, (int *)v11, 2);
      v11[0] = 0;
      v11[1] = v11;
      v11[2] = 0x9F812000000;
      v11[3] = __Block_byref_object_copy__2;
      v11[4] = __Block_byref_object_dispose__2;
      v11[5] = "";
      std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::__seed<std::seed_seq>(v12, (unint64_t)__p);
      v9[0] = MEMORY[0x24BDAC760];
      v9[1] = 3221225472;
      v9[2] = ___ZN4turi10neural_net12_GLOBAL__N_116create_rng_batchEmi_block_invoke;
      v9[3] = &unk_24D93D398;
      v9[4] = v11;
      v6 = (void *)MEMORY[0x219A1A134](v9);
      v7 = (void *)MEMORY[0x219A1A134]();
      objc_msgSend(v4, "addObject:", v7);

      _Block_object_dispose(v11, 8);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v5 = (turi::neural_net::_anonymous_namespace_ *)((char *)v5 + 1);
    }
    while (this != v5);
  }
  return v4;
}

void sub_2183AA9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Block_object_dispose(&a18, 8);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_image_augmenter::mps_image_augmenter(uint64_t a1, float *a2, void *a3)
{
  id v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  TCMPSRandomCropAugmenter *v22;
  TCMPSRandomPadAugmenter *v23;
  TCMPSHorizontalFlipAugmenter *v24;
  TCMPSColorControlAugmenter *v25;
  TCMPSHueAdjustAugmenter *v26;
  TCMPSResizeAugmenter *v27;
  void *v28;
  _QWORD v30[2];
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  *(_QWORD *)a1 = &off_24D93D358;
  v6 = *((_OWORD *)a2 + 4);
  v7 = *((_OWORD *)a2 + 5);
  v8 = *((_OWORD *)a2 + 6);
  v9 = *((_OWORD *)a2 + 7);
  v10 = *(_OWORD *)a2;
  v11 = *((_OWORD *)a2 + 1);
  v12 = *((_OWORD *)a2 + 2);
  v13 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 8) = v10;
  *(_OWORD *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 144) = 0;
  v14 = v5;
  *(_QWORD *)(a1 + 152) = v14;
  v15 = (void *)MEMORY[0x219A19FE4]();
  v16 = *MEMORY[0x24BDBF858];
  v30[0] = *MEMORY[0x24BDBF850];
  v30[1] = v16;
  v31[0] = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCEF8], "null");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v31[1] = v17;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v31, v30, 2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BDBF648], "contextWithOptions:", v18);
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v19;

  v21 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  if (a2[7] > 0.0)
  {
    v22 = objc_alloc_init(TCMPSRandomCropAugmenter);
    -[TCMPSRandomCropAugmenter setSkipProbability:](v22, "setSkipProbability:", (float)(1.0 - a2[7]));
    -[TCMPSRandomCropAugmenter setMinAspectRatio:](v22, "setMinAspectRatio:", a2[8]);
    -[TCMPSRandomCropAugmenter setMaxAspectRatio:](v22, "setMaxAspectRatio:", a2[9]);
    -[TCMPSRandomCropAugmenter setMinAreaFraction:](v22, "setMinAreaFraction:", a2[10]);
    -[TCMPSRandomCropAugmenter setMaxAreaFraction:](v22, "setMaxAreaFraction:", a2[11]);
    -[TCMPSRandomCropAugmenter setMinObjectCovered:](v22, "setMinObjectCovered:", a2[12]);
    -[TCMPSRandomCropAugmenter setMaxAttempts:](v22, "setMaxAttempts:", *((_QWORD *)a2 + 7));
    -[TCMPSRandomCropAugmenter setMinEjectCoverage:](v22, "setMinEjectCoverage:", a2[16]);
    objc_msgSend(v21, "addObject:", v22);

  }
  if (a2[18] > 0.0)
  {
    v23 = objc_alloc_init(TCMPSRandomPadAugmenter);
    -[TCMPSRandomPadAugmenter setSkipProbability:](v23, "setSkipProbability:", (float)(1.0 - a2[18]));
    -[TCMPSRandomPadAugmenter setMinAspectRatio:](v23, "setMinAspectRatio:", a2[20]);
    -[TCMPSRandomPadAugmenter setMaxAspectRatio:](v23, "setMaxAspectRatio:", a2[21]);
    -[TCMPSRandomPadAugmenter setMinAreaFraction:](v23, "setMinAreaFraction:", a2[22]);
    -[TCMPSRandomPadAugmenter setMaxAreaFraction:](v23, "setMaxAreaFraction:", a2[23]);
    -[TCMPSRandomPadAugmenter setMaxAttempts:](v23, "setMaxAttempts:", *((_QWORD *)a2 + 12));
    objc_msgSend(v21, "addObject:", v23);

  }
  if (a2[26] > 0.0)
  {
    v24 = objc_alloc_init(TCMPSHorizontalFlipAugmenter);
    -[TCMPSHorizontalFlipAugmenter setSkipProbability:](v24, "setSkipProbability:", (float)(1.0 - a2[26]));
    objc_msgSend(v21, "addObject:", v24);

  }
  if (a2[27] > 0.0 || a2[28] > 0.0 || a2[29] > 0.0)
  {
    v25 = objc_alloc_init(TCMPSColorControlAugmenter);
    -[TCMPSColorControlAugmenter setMaxBrightnessDelta:](v25, "setMaxBrightnessDelta:", a2[27]);
    -[TCMPSColorControlAugmenter setMaxContrastProportion:](v25, "setMaxContrastProportion:", a2[28]);
    -[TCMPSColorControlAugmenter setMaxSaturationProportion:](v25, "setMaxSaturationProportion:", a2[29]);
    objc_msgSend(v21, "addObject:", v25);

  }
  if (a2[30] > 0.0)
  {
    v26 = objc_alloc_init(TCMPSHueAdjustAugmenter);
    -[TCMPSHueAdjustAugmenter setMaxHueAdjust:](v26, "setMaxHueAdjust:", a2[30]);
    objc_msgSend(v21, "addObject:", v26);

  }
  v27 = -[TCMPSResizeAugmenter initWithSize:]([TCMPSResizeAugmenter alloc], "initWithSize:", (double)*(unint64_t *)(a1 + 16), (double)*(unint64_t *)(a1 + 24));
  objc_msgSend(v21, "addObject:", v27);

  v28 = *(void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v21;

  objc_autoreleasePoolPop(v15);
  return a1;
}

void sub_2183AAE04(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::mps_image_augmenter::mps_image_augmenter(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = (void *)objc_claimAutoreleasedReturnValue();
  turi::neural_net::mps_image_augmenter::mps_image_augmenter(a1, (float *)a2, v4);

  return a1;
}

void sub_2183AAF10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void turi::neural_net::mps_image_augmenter::prepare_images(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *__p;
  void *v28;
  _QWORD *v29;
  void *v30[2];
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[2];
  void *v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v6 = (void *)MEMORY[0x219A19FE4]();
  v7 = a1[1];
  v8 = a1[2];
  v40 = a1[3];
  v41 = v7;
  v39 = v8;
  if (v7 < (a2[1] - *a2) >> 6)
    std::vector<turi::neural_net::labeled_image>::resize(a2, v7);
  v9 = (uint64_t *)turi::neural_net::shared_float_array::shared_float_array((turi::neural_net::shared_float_array *)a3);
  v9[7] = 0;
  v9[8] = 0;
  v9 += 7;
  v9[2] = 0;
  std::vector<std::vector<turi::neural_net::image_annotation>>::resize(v9, (a2[1] - *a2) >> 6);
  std::vector<float>::vector(v37, 3 * v40 * v39 * v41);
  v10 = v37[0];
  if (v37[1] == v37[0])
    v10 = 0;
  v36[0] = v10;
  v36[1] = ((char *)v37[1] - (char *)v37[0]) >> 2;
  turi::neural_net::TaskQueue::GetGlobalConcurrentQueue(&v32);
  v11 = v32;
  v13 = *a2;
  v12 = a2[1];
  v43 = 0;
  v14 = operator new(0x40uLL);
  *v14 = &off_24D93D3C8;
  v14[1] = a2;
  v14[2] = a1;
  v14[3] = &v39;
  v14[4] = &v40;
  v14[5] = v36;
  v14[6] = &v41;
  v14[7] = a3;
  v43 = v14;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v11 + 32))(v11, (v12 - v13) >> 6, v42);
  v15 = v43;
  if (v43 == v42)
  {
    v16 = 4;
    v15 = v42;
    goto LABEL_9;
  }
  if (v43)
  {
    v16 = 5;
LABEL_9:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_OWORD *)v30 = *(_OWORD *)v37;
  v31 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  v21 = v40;
  v20 = v41;
  v22 = v39;
  v23 = operator new(0x20uLL);
  v28 = v23 + 4;
  v29 = v23 + 4;
  *v23 = v20;
  v23[1] = v21;
  v23[2] = v22;
  v23[3] = 3;
  __p = v23;
  turi::neural_net::shared_float_array::wrap((uint64_t)v30, (uint64_t)&__p, (uint64_t)&v32);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a3 + 8, (__int128 *)((char *)&v32 + 8));
  *(_OWORD *)(a3 + 24) = v34;
  *(_OWORD *)(a3 + 40) = v35;
  *(_QWORD *)&v32 = &unk_24D9175B8;
  v24 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  objc_autoreleasePoolPop(v6);
}

void sub_2183AB1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  _Unwind_Resume(exception_object);
}

void turi::neural_net::mps_image_augmenter::~mps_image_augmenter(id *this)
{

}

{

  JUMPOUT(0x219A19A08);
}

void *__Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x9C8uLL);
}

double ___ZN4turi10neural_net12_GLOBAL__N_116create_rng_batchEmi_block_invoke(uint64_t a1, double a2, double a3)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v4;
  double v5;
  double v6;

  v4 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  v5 = a3 - a2;
  v6 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v4);
  return a2
       + v5
       * ((v6
         + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v4)
         * 4294967300.0)
        * 5.42101086e-20);
}

void std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24D93D3C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24D93D3C8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  id *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  int **v32;
  int *v33;
  int **v34;
  void *v35;
  int *v36;
  int *i;
  void *v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  CGFloat v51;
  CGFloat v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  CGFloat v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t j;
  uint64_t v67;
  id v68;
  int v69;
  double v70;
  double v71;
  double v72;
  CGFloat v73;
  double v74;
  CGFloat v75;
  double v76;
  CGFloat v77;
  double v78;
  CGFloat v79;
  float v80;
  float x;
  float y;
  float width;
  float height;
  float *v85;
  void *v86;
  float *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  float *v92;
  float *v93;
  __int128 v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  void *exception;
  uint64_t v100;
  void *context;
  id v102;
  uint64_t v103;
  id obj;
  id obja;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  void *__p[2];
  char *v111;
  CGAffineTransform v112;
  vImage_Buffer dest;
  __int128 v114;
  __int128 v115;
  CGAffineTransform v116;
  vImage_Buffer v117;
  CGAffineTransform src[2];
  uint64_t v119;
  CGSize v120;
  CGSize v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;

  v119 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 16);
  context = (void *)MEMORY[0x219A19FE4]();
  obj = (id)a1;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = (void *)objc_opt_new();
  v7 = *(const void **)(v5 + (v3 << 6));
  if (v8)
  {
    v9 = v8[1];
  }
  else
  {
    v10 = (void *)MEMORY[0x24BDBCEC8];
    v11 = (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 16))(v7);
    objc_msgSend(v10, "dataWithLength:", 12 * v11 * (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 24))(v7));
    v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v13 = objc_msgSend(v12, "mutableBytes");
    v14 = (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 16))(v7);
    if (3 * v14 * (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 24))(v7))
      v15 = v13;
    else
      v15 = 0;
    (*(void (**)(const void *, uint64_t))(*(_QWORD *)v7 + 40))(v7, v15);
    v16 = (void *)MEMORY[0x24BDBCEC8];
    v17 = (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 16))(v7);
    objc_msgSend(v16, "dataWithLength:", 16 * v17 * (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 24))(v7));
    v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *(_QWORD *)&src[0].a = objc_msgSend(v18, "mutableBytes");
    *(_QWORD *)&src[0].c = (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 24))(v7);
    *(_QWORD *)&src[0].b = (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 16))(v7);
    v19 = objc_msgSend(v18, "length");
    v103 = v5;
    v20 = v3;
    *(_QWORD *)&src[0].d = v19 / (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 16))(v7);

    v21 = objc_retainAutorelease(v12);
    v117.data = (void *)objc_msgSend(v21, "mutableBytes");
    v117.width = (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 24))(v7);
    v117.height = (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 16))(v7);
    v22 = objc_msgSend(v21, "length");
    v117.rowBytes = v22 / (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 16))(v7);

    if (vImageConvert_RGBFFFtoRGBAFFFF(&v117, 0, 1.0, (const vImage_Buffer *)src, 1, 0x10u))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::string::basic_string[abi:ne180100]<0>(&dest, "converting RGB bitmap to RGBA");
      turi::TuriException::TuriException(exception, 10, &dest);
    }
    v23 = (void *)MEMORY[0x24BDBF660];
    v24 = objc_msgSend(v18, "length");
    v25 = (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 16))(v7);
    v26 = (*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 24))(v7);
    objc_msgSend(v23, "imageWithBitmapData:bytesPerRow:size:format:colorSpace:", v18, v24 / v25, *MEMORY[0x24BDBF8B8], 0, (double)v26, (double)(unint64_t)(*(uint64_t (**)(const void *))(*(_QWORD *)v7 + 16))(v7));
    v9 = (id)objc_claimAutoreleasedReturnValue();

    v5 = v103;
    v3 = v20;

  }
  objc_msgSend(v9, "imageByClampingToExtent");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setImage:", v27);

  objc_msgSend(v9, "extent");
  objc_msgSend(v6, "setBounds:");
  objc_msgSend(v6, "bounds");
  v29 = v28;
  v31 = v30;
  v32 = (int **)(v5 + (v3 << 6));
  v33 = v32[2];
  v32 += 2;
  v34 = v32 + 1;
  objc_msgSend(MEMORY[0x24BDBCEB8], "arrayWithCapacity:", 0xAAAAAAAAAAAAAAABLL * (((char *)v32[1] - (char *)v33) >> 3));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = *v32;
  for (i = *v34; v36 != i; v36 += 6)
  {
    v38 = (void *)objc_opt_new();
    objc_msgSend(v38, "setIdentifier:", *v36);
    objc_msgSend(v38, "setConfidence:", *((float *)v36 + 5));
    v39 = *((float *)v36 + 1);
    v40 = *((float *)v36 + 2);
    v41 = *((float *)v36 + 3);
    v42 = *((float *)v36 + 4);
    v120.width = v29;
    v120.height = v31;
    v122.origin.x = v39;
    v122.origin.y = v40;
    v122.size.width = v41;
    v122.size.height = v42;
    v123 = CGRectApplyAffineTransform(v122, src);
    objc_msgSend(v38, "setBoundingBox:", v123.origin.x, v123.origin.y, v123.size.width, v123.size.height);
    objc_msgSend(v35, "addObject:", v38);

  }
  objc_msgSend(v6, "setAnnotations:", v35);

  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  v43 = *(id *)(v4 + 144);
  v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v106, &v117, 16);
  if (v44)
  {
    v45 = *(_QWORD *)v107;
    do
    {
      v46 = 0;
      v47 = v6;
      do
      {
        if (*(_QWORD *)v107 != v45)
          objc_enumerationMutation(v43);
        v48 = *(id *)(*((_QWORD *)&v106 + 1) + 8 * v46);
        objc_msgSend(*(id *)(v4 + 152), "objectAtIndexedSubscript:", v3);
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v48, "imageAugmentedFromImage:generator:", v47, v49);
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        ++v46;
        v47 = v6;
      }
      while (v44 != v46);
      v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v106, &v117, 16);
    }
    while (v44);
  }

  v50 = *(void **)(v4 + 136);
  v51 = **((double **)obj + 3);
  v52 = **((double **)obj + 4);
  v53 = (void *)turi::Span<float,18446744073709551615ul>::SliceByDimension(*((_QWORD **)obj + 5), **((_QWORD **)obj + 6), v3);
  v55 = v54;
  v100 = *(_QWORD *)(*((_QWORD *)obj + 7) + 56);
  v56 = v6;
  v57 = v50;
  objc_msgSend(v56, "image");
  v58 = (id)objc_claimAutoreleasedReturnValue();
  v102 = v57;
  v59 = *(_QWORD *)&v52 * *(_QWORD *)&v51;
  if (3 * *(_QWORD *)&v52 * *(_QWORD *)&v51 != v55)
  {
    v97 = __cxa_allocate_exception(0x40uLL);
    memset(src, 0, 24);
    turi::TuriException::TuriException(v97, 4, src);
  }
  *(double *)&v60 = COERCE_DOUBLE(operator new[]());
  v61 = (double)*(unint64_t *)&v52;
  objc_msgSend(v102, "render:toBitmap:rowBytes:bounds:format:colorSpace:", v58, v60, 16 * *(_QWORD *)&v51, *MEMORY[0x24BDBF8B8], 0, 0.0, 0.0, (double)*(unint64_t *)&v51, (double)*(unint64_t *)&v52);
  if (4 * v59)
    v62 = *(double *)&v60;
  else
    v62 = 0.0;
  src[0].a = v62;
  src[0].b = v52;
  src[0].c = v51;
  *(_QWORD *)&src[0].d = (unint64_t)(16 * v59) / *(_QWORD *)&v52;
  dest.data = v53;
  *(CGFloat *)&dest.height = v52;
  *(CGFloat *)&dest.width = v51;
  dest.rowBytes = (unint64_t)(4 * v55) / *(_QWORD *)&v52;
  if (vImageConvert_RGBAFFFFtoRGBFFF((const vImage_Buffer *)src, &dest, 0x10u))
  {
    v98 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(&v116, "converting RGBA bitmap to RGB");
    turi::TuriException::TuriException(v98, 10, &v116);
  }
  MEMORY[0x219A199F0](v60, 0x1000C8052888210);

  objc_msgSend(v56, "annotations");
  v63 = (id)objc_claimAutoreleasedReturnValue();
  __p[1] = 0;
  v111 = 0;
  __p[0] = 0;
  std::vector<turi::neural_net::image_annotation>::reserve(__p, objc_msgSend(v63, "count"));
  v114 = 0u;
  v115 = 0u;
  memset(&dest, 0, sizeof(dest));
  obja = v63;
  v64 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &dest, src, 16);
  if (v64)
  {
    v65 = *(_QWORD *)dest.width;
    do
    {
      for (j = 0; j != v64; ++j)
      {
        if (*(_QWORD *)dest.width != v65)
          objc_enumerationMutation(obja);
        v67 = v3;
        v68 = *(id *)(dest.height + 8 * j);
        v69 = objc_msgSend(v68, "identifier");
        objc_msgSend(v68, "confidence");
        v71 = v70;
        objc_msgSend(v68, "boundingBox");
        v73 = v72;
        v75 = v74;
        v77 = v76;
        v79 = v78;
        v80 = v71;
        v121.width = (double)*(unint64_t *)&v51;
        v121.height = v61;
        CGAffineTransformInvert(&v112, &v116);
        v124.origin.x = v73;
        v124.origin.y = v75;
        v124.size.width = v77;
        v124.size.height = v79;
        v125 = CGRectApplyAffineTransform(v124, &v112);
        x = v125.origin.x;
        y = v125.origin.y;
        width = v125.size.width;
        height = v125.size.height;
        v85 = (float *)__p[1];
        if (__p[1] >= v111)
        {
          v87 = (float *)__p[0];
          v88 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
          v89 = v88 + 1;
          if (v88 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v111 - (char *)__p[0]) >> 3) > v89)
            v89 = 0x5555555555555556 * ((v111 - (char *)__p[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v111 - (char *)__p[0]) >> 3) >= 0x555555555555555)
            v90 = 0xAAAAAAAAAAAAAAALL;
          else
            v90 = v89;
          if (v90)
          {
            v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v111, v90);
            v87 = (float *)__p[0];
            v85 = (float *)__p[1];
          }
          else
          {
            v91 = 0;
          }
          v92 = (float *)&v91[24 * v88];
          *(_DWORD *)v92 = v69;
          v92[1] = x;
          v92[2] = y;
          v92[3] = width;
          v92[4] = height;
          v92[5] = v80;
          v93 = v92;
          if (v85 != v87)
          {
            do
            {
              v94 = *(_OWORD *)(v85 - 6);
              *((_QWORD *)v93 - 1) = *((_QWORD *)v85 - 1);
              *(_OWORD *)(v93 - 6) = v94;
              v93 -= 6;
              v85 -= 6;
            }
            while (v85 != v87);
            v87 = (float *)__p[0];
          }
          v86 = v92 + 6;
          __p[0] = v93;
          __p[1] = v92 + 6;
          v111 = &v91[24 * v90];
          if (v87)
            operator delete(v87);
        }
        else
        {
          *(_DWORD *)__p[1] = v69;
          v85[1] = x;
          v85[2] = y;
          v85[3] = width;
          v85[4] = height;
          v86 = v85 + 6;
          v85[5] = v80;
        }
        __p[1] = v86;

        v3 = v67;
      }
      v64 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &dest, src, 16);
    }
    while (v64);
  }

  v95 = v100 + 24 * v3;
  v96 = *(void **)v95;
  if (*(_QWORD *)v95)
  {
    *(_QWORD *)(v100 + 24 * v3 + 8) = v96;
    operator delete(v96);
    *(_QWORD *)v95 = 0;
    *(_QWORD *)(v95 + 8) = 0;
    *(_QWORD *)(v95 + 16) = 0;
  }
  *(_OWORD *)v95 = *(_OWORD *)__p;
  *(_QWORD *)(v100 + 24 * v3 + 16) = v111;
  __p[0] = 0;
  __p[1] = 0;
  v111 = 0;

  objc_autoreleasePoolPop(context);
}

void sub_2183ABE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  void *v41;
  int v42;
  void *v43;

  if (a40 < 0)
  {
    operator delete(__p);
    if ((v42 & 1) == 0)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v41);
  goto LABEL_6;
}

uint64_t std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0,std::allocator<turi::neural_net::mps_image_augmenter::prepare_images(std::vector<turi::neural_net::labeled_image>)::$_0>,void ()(unsigned long)>::target_type()
{
}

CGAffineTransform *turi::neural_net::`anonymous namespace'::transform_to_core_image@<X0>(CGSize a1@<0:D0, 8:D1>, CGAffineTransform *a2@<X8>)
{
  CGFloat height;
  CGAffineTransform v6;
  CGAffineTransform t1;

  height = a1.height;
  CGAffineTransformMakeScale(&t1, a1.width, -a1.height);
  CGAffineTransformMakeTranslation(&v6, 0.0, height);
  return CGAffineTransformConcat(a2, &t1, &v6);
}

void std::vector<turi::neural_net::image_annotation>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void _GLOBAL__sub_I_mps_image_augmentation_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

double CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/GLMClassifier.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_GLMClassifier_DoubleArray_default_instance_ = (uint64_t)&off_24D93D458;
  *(_QWORD *)algn_254FFA6C8 = 0;
  qword_254FFA6D0 = 0;
  unk_254FFA6D8 = 0;
  dword_254FFA6E4 = 0;
  byte_254FFA6E8 = 1;
  CoreML::Specification::_GLMClassifier_default_instance_ = (uint64_t)&off_24D93D4F0;
  result = 0.0;
  unk_254FFA6F8 = 0u;
  unk_254FFA708 = 0u;
  unk_254FFA718 = 0u;
  unk_254FFA72C = 0;
  qword_254FFA740 = 0;
  byte_254FFA748 = 1;
  return result;
}

void CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(CoreML::Specification::protobuf_GLMClassifier_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_GLMClassifier_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2183AC318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::GLMClassifier_DoubleArray *CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D93D458;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::GLMClassifier_DoubleArray *)&CoreML::Specification::_GLMClassifier_DoubleArray_default_instance_)
    CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_2183AC384(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GLMClassifier_DoubleArray::~GLMClassifier_DoubleArray(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D93D458;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::GLMClassifier_DoubleArray::~GLMClassifier_DoubleArray(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::GLMClassifier_DoubleArray *CoreML::Specification::GLMClassifier_DoubleArray::New(CoreML::Specification::GLMClassifier_DoubleArray *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::GLMClassifier_DoubleArray *v3;

  v3 = (CoreML::Specification::GLMClassifier_DoubleArray *)operator new();
  CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier_DoubleArray>(a2, v3);
  return v3;
}

void sub_2183AC470(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier_DoubleArray>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier_DoubleArray>);
  return result;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::GLMClassifier_DoubleArray::MergePartialFromCodedStream(CoreML::Specification::GLMClassifier_DoubleArray *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  signed int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  signed int v21;
  uint64_t v22;
  _BOOL8 result;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *v5;
      v14 = VarintSizeAsIntFallback >> 3;
      v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      if (v15 == -1)
        v17 = v16;
      if (v17 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1)
          v18 = 1;
        else
          v18 = VarintSizeAsIntFallback >> 3;
        do
        {
          v28 = 0;
          v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result)
              return result;
            v20 = v28;
          }
          else
          {
            v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            v21 = *v5;
          }
          v22 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(_QWORD *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      v25 = *((_QWORD *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      v25 = *((_QWORD *)this + 3);
      v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1)
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
    }
    *v5 = v24;
    v27 = v25 + 8;
    if (!v25)
      v27 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, (const double *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::ByteSizeLong(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::GLMClassifier_DoubleArray::IsInitialized(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return 1;
}

_QWORD *CoreML::Specification::GLMClassifier_DoubleArray::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMClassifier.DoubleArray");
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::GLMClassifier(CoreML::Specification::GLMClassifier *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_24D93D4F0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != (CoreML::Specification::GLMClassifier *)&CoreML::Specification::_GLMClassifier_default_instance_)
    CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(this);
  *(_QWORD *)((char *)this + 60) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_2183AC924(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v5 = *(_QWORD **)(v2 + 48);
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::GLMClassifier(CoreML::Specification::GLMClassifier *this, const CoreML::Specification::GLMClassifier *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  signed int v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v13;
  CoreML::Specification::Int64Vector *v14;
  CoreML::Specification::Int64Vector *v15;
  uint64_t *v16;
  CoreML::Specification::StringVector *v17;
  CoreML::Specification::StringVector *v18;
  uint64_t *v19;

  *(_QWORD *)this = &off_24D93D4F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (uint64_t *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 4);
    v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::GLMClassifier *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>(v5, (CoreML::Specification::GLMRegressor_DoubleArray **)v8, (CoreML::Specification::GLMRegressor_DoubleArray **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    v10 = (int *)*((_QWORD *)this + 4);
    if (*v10 < v9)
      *v10 = v9;
  }
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v11 = *((_DWORD *)a2 + 10);
  if (v11)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 10, v11);
    memcpy((void *)(*((_QWORD *)this + 6) + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  }
  *((_DWORD *)this + 20) = 0;
  v12 = *((_QWORD *)a2 + 1);
  if ((v12 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v12 & 0xFFFFFFFFFFFFFFFELL);
  *(_QWORD *)((char *)this + 60) = *(_QWORD *)((char *)a2 + 60);
  *((_DWORD *)this + 21) = 0;
  v13 = *((_DWORD *)a2 + 21);
  if (v13 == 100)
  {
    CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
    *((_DWORD *)this + 21) = 100;
    v17 = (CoreML::Specification::StringVector *)operator new();
    v18 = (CoreML::Specification::StringVector *)CoreML::Specification::StringVector::StringVector(v17);
    *((_QWORD *)this + 9) = v17;
    if (*((_DWORD *)a2 + 21) == 100)
      v19 = (uint64_t *)*((_QWORD *)a2 + 9);
    else
      v19 = CoreML::Specification::StringVector::default_instance(v18);
    CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v17, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v19);
  }
  else if (v13 == 101)
  {
    CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
    *((_DWORD *)this + 21) = 101;
    v14 = (CoreML::Specification::Int64Vector *)operator new();
    v15 = (CoreML::Specification::Int64Vector *)CoreML::Specification::Int64Vector::Int64Vector(v14);
    *((_QWORD *)this + 9) = v14;
    if (*((_DWORD *)a2 + 21) == 101)
      v16 = (uint64_t *)*((_QWORD *)a2 + 9);
    else
      v16 = CoreML::Specification::Int64Vector::default_instance(v15);
    CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v14, (const CoreML::Specification::GLMRegressor_DoubleArray *)v16);
  }
  return this;
}

void sub_2183ACB30(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  MEMORY[0x219A19A08](v4, 0x10A1C40290C9B23);
  v6 = *(_QWORD **)(v3 + 48);
  if (v6)
  {
    if (!*v6)
      operator delete(v6);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GLMClassifier::~GLMClassifier(CoreML::Specification::GLMClassifier *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D93D4F0;
  if (*((_DWORD *)this + 21))
    CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
  v2 = (_QWORD *)*((_QWORD *)this + 6);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::GLMClassifier::~GLMClassifier(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::GLMClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 84);
  if (v2 == 101 || v2 == 100)
  {
    this = *(_QWORD *)(this + 72);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 84) = 0;
  return this;
}

uint64_t *CoreML::Specification::GLMClassifier::default_instance(CoreML::Specification::GLMClassifier *this)
{
  CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(this);
  return &CoreML::Specification::_GLMClassifier_default_instance_;
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::New(CoreML::Specification::GLMClassifier *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::GLMClassifier *v3;

  v3 = (CoreML::Specification::GLMClassifier *)operator new();
  CoreML::Specification::GLMClassifier::GLMClassifier(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier>(a2, v3);
  return v3;
}

void sub_2183ACCF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40D1CF0537);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::GLMClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier>);
  return result;
}

uint64_t CoreML::Specification::GLMClassifier::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 60) = 0;
  return CoreML::Specification::GLMClassifier::clear_ClassLabels(this);
}

uint64_t CoreML::Specification::GLMClassifier::MergePartialFromCodedStream(CoreML::Specification::GLMClassifier *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  CoreML::Specification::GLMClassifier_DoubleArray *v14;
  char *v15;
  int VarintSizeAsIntFallback;
  CoreML::Specification::Int64Vector *v17;
  char *v18;
  unsigned int v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  CoreML::Specification::StringVector *v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t result;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  signed int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  signed int v45;
  uint64_t v46;
  signed int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int TagFallback;
  uint64_t Varint32Fallback;
  uint64_t v54;
  unint64_t v55;

  v5 = (unsigned int *)((char *)this + 40);
  v6 = (char *)this + 16;
  while (1)
  {
LABEL_2:
    v7 = *(unsigned __int8 **)a2;
    v8 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 >= v8)
    {
      v10 = 0;
    }
    else
    {
      v9 = v7 + 1;
      v10 = *v7;
      if ((char)*v7 >= 1)
      {
        *(_QWORD *)a2 = v9;
        v11 = v10 | 0x100000000;
        if ((v11 & 0x100000000) != 0)
          goto LABEL_9;
        goto LABEL_88;
      }
      if ((unint64_t)v9 < v8)
      {
        v12 = *v9;
        if ((v10 & ~v12) >= 0x80)
        {
          *(_QWORD *)a2 = v7 + 2;
          v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
LABEL_9:
          v13 = v11 >> 3;
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_88;
              v14 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((uint64_t)v6);
              v15 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
              {
                VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (VarintSizeAsIntFallback < 0)
                  return 0;
              }
              else
              {
                VarintSizeAsIntFallback = *v15;
                *(_QWORD *)a2 = v15 + 1;
              }
              v29 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
              if ((v29 & 0x8000000000000000) != 0)
                return 0;
              v31 = v29;
              result = CoreML::Specification::GLMClassifier_DoubleArray::MergePartialFromCodedStream(v14, (char **)a2, v30);
              if ((_DWORD)result)
                goto LABEL_56;
              return result;
            case 2u:
              if (v11 == 17)
              {
                if (_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0x12u, (unint64_t **)a2, (uint64_t)v5))
                {
                  continue;
                }
                return 0;
              }
              if (v11 != 18)
                goto LABEL_88;
              v18 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v18 < 0)
              {
                v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if ((v19 & 0x80000000) != 0)
                  return 0;
              }
              else
              {
                v19 = *v18;
                *(_QWORD *)a2 = v18 + 1;
              }
              if ((v19 & 7) != 0)
                return 0;
              v37 = *v5;
              v38 = v19 >> 3;
              v39 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit(a2);
              v40 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2);
              if (v40 >= v39)
                v41 = v39;
              else
                v41 = v40;
              if (v39 == -1)
                v41 = v40;
              if (v41 < (uint64_t)v19)
              {
                if (v19 < 8)
                  continue;
                if (v38 <= 1)
                  v42 = 1;
                else
                  v42 = v19 >> 3;
                while (1)
                {
                  v55 = 0;
                  v43 = *(unint64_t **)a2;
                  if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 8)
                  {
                    result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v55);
                    if (!(_DWORD)result)
                      return result;
                    v44 = v55;
                  }
                  else
                  {
                    v44 = *v43;
                    *(_QWORD *)a2 = v43 + 1;
                  }
                  v45 = *((_DWORD *)this + 10);
                  if (v45 == *((_DWORD *)this + 11))
                  {
                    _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v45 + 1);
                    v45 = *v5;
                  }
                  v46 = *((_QWORD *)this + 6);
                  *((_DWORD *)this + 10) = v45 + 1;
                  *(_QWORD *)(v46 + 8 * v45 + 8) = v44;
                  if (!--v42)
                    goto LABEL_2;
                }
              }
              v47 = v37 + v38;
              if ((int)*v5 >= (int)(v37 + v38))
              {
                v48 = *((_QWORD *)this + 6);
              }
              else
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v37 + v38);
                v48 = *((_QWORD *)this + 6);
                v49 = 8 * v47 - 8 * *((int *)this + 10);
                if (v49 >= 1)
                  bzero((void *)(v48 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v49 >> 3) - ((unint64_t)v49 > 7)) + 8);
              }
              *v5 = v47;
              v50 = v48 + 8;
              if (!v48)
                v50 = 0;
              if (_tc_google::protobuf::io::CodedInputStream::ReadRaw(a2, (char *)(v50 + 8 * v37), v19))
                continue;
              if ((int)*v5 < 1)
                return 0;
              result = 0;
              *v5 = v37;
              return result;
            case 3u:
              if (v11 != 24)
                goto LABEL_88;
              v20 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
              {
                v21 = 0;
              }
              else
              {
                v21 = *v20;
                if ((*v20 & 0x80000000) == 0)
                {
                  *(_QWORD *)a2 = v20 + 1;
LABEL_96:
                  *((_DWORD *)this + 15) = v21;
                  continue;
                }
              }
              Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v21);
              v21 = Varint32Fallback;
              if (Varint32Fallback < 0)
                return 0;
              goto LABEL_96;
            case 4u:
              if (v11 != 32)
                goto LABEL_88;
              v22 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
              {
                v23 = 0;
              }
              else
              {
                v23 = *v22;
                if ((*v22 & 0x80000000) == 0)
                {
                  *(_QWORD *)a2 = v22 + 1;
                  goto LABEL_99;
                }
              }
              v54 = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v23);
              v23 = v54;
              if (v54 < 0)
                return 0;
LABEL_99:
              *((_DWORD *)this + 16) = v23;
              continue;
            default:
              if (v13 == 100)
              {
                if (v11 != 34)
                  goto LABEL_88;
                if (*((_DWORD *)this + 21) == 100)
                {
                  v24 = (CoreML::Specification::StringVector *)*((_QWORD *)this + 9);
                }
                else
                {
                  CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
                  *((_DWORD *)this + 21) = 100;
                  v24 = (CoreML::Specification::StringVector *)operator new();
                  CoreML::Specification::StringVector::StringVector(v24);
                  *((_QWORD *)this + 9) = v24;
                }
                v27 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v27 < 0)
                {
                  v28 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v28 < 0)
                    return 0;
                }
                else
                {
                  v28 = *v27;
                  *(_QWORD *)a2 = v27 + 1;
                }
                v35 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v28);
                if ((v35 & 0x8000000000000000) != 0)
                  return 0;
                v31 = v35;
                result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v24, (char **)a2, v36);
                if (!(_DWORD)result)
                  return result;
              }
              else
              {
                if (v13 != 101 || v11 != 42)
                  goto LABEL_88;
                if (*((_DWORD *)this + 21) == 101)
                {
                  v17 = (CoreML::Specification::Int64Vector *)*((_QWORD *)this + 9);
                }
                else
                {
                  CoreML::Specification::GLMClassifier::clear_ClassLabels((uint64_t)this);
                  *((_DWORD *)this + 21) = 101;
                  v17 = (CoreML::Specification::Int64Vector *)operator new();
                  CoreML::Specification::Int64Vector::Int64Vector(v17);
                  *((_QWORD *)this + 9) = v17;
                }
                v25 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v25 < 0)
                {
                  v26 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v26 < 0)
                    return 0;
                }
                else
                {
                  v26 = *v25;
                  *(_QWORD *)a2 = v25 + 1;
                }
                v33 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v26);
                if ((v33 & 0x8000000000000000) != 0)
                  return 0;
                v31 = v33;
                result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v17, (char **)a2, v34);
                if (!(_DWORD)result)
                  return result;
              }
LABEL_56:
              if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v31))
                return 0;
              continue;
          }
        }
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
    v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v11 & 0x100000000) != 0)
      goto LABEL_9;
LABEL_88:
    if (!(_DWORD)v11 || (v11 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)return 0;
  }
}

void sub_2183AD2E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  _tc_google::protobuf::internal::WireFormatLite *v16;
  signed int v17;
  signed int v18;
  int v19;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  if (*(int *)(v5 + 40) > 0)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      v8 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v8 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v8;
    }
    v9 = *(_DWORD *)(v5 + 56);
    if (v8 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v9);
    }
    else
    {
      v10 = *((_QWORD *)a2 + 1);
      if (v9 < 0x80)
      {
        v12 = *(_DWORD *)(v5 + 56);
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v11 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v11++ = v9 | 0x80;
          v12 = v9 >> 7;
          v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
      }
      *v11 = v12;
      v14 = (_DWORD)v11 - v10 + 1;
      *((_QWORD *)a2 + 1) += v14;
      *((_DWORD *)a2 + 4) -= v14;
    }
    v15 = *(_QWORD *)(v5 + 48);
    if (v15)
      v16 = (_tc_google::protobuf::internal::WireFormatLite *)(v15 + 8);
    else
      v16 = 0;
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v16, (const double *)*(unsigned int *)(v5 + 40), a2, a4);
  }
  v17 = *(_DWORD *)(v5 + 60);
  if (v17)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(3, v17, a2, a4);
  v18 = *(_DWORD *)(v5 + 64);
  if (v18)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(4, v18, a2, a4);
  v19 = *(_DWORD *)(v5 + 84);
  if (v19 == 100)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, *(_QWORD *)(v5 + 72), a2, a4);
    v19 = *(_DWORD *)(v5 + 84);
  }
  if (v19 == 101)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, *(_QWORD *)(v5 + 72), a2, a4);
  return this;
}

uint64_t CoreML::Specification::GLMClassifier::ByteSizeLong(CoreML::Specification::GLMClassifier *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((_QWORD *)this + 4);
    v5 = *((unsigned int *)this + 6);
    do
    {
      v6 = *(unsigned int **)(v4 + 8 * v3 + 8);
      v7 = v6[4];
      v8 = 8 * v7;
      if ((_DWORD)v7)
      {
        if ((v8 & 0x80000000) != 0)
          v9 = 11;
        else
          v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
        v9 = 0;
      }
      v10 = v9 + v8;
      v6[8] = v8;
      v6[9] = v10;
      v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v5 = 0;
  }
  v11 = *((unsigned int *)this + 10);
  v12 = 8 * v11;
  if ((_DWORD)v11)
  {
    if ((v12 & 0x80000000) != 0)
      v13 = 11;
    else
      v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 += v13;
  }
  *((_DWORD *)this + 14) = v12;
  v14 = v5 + v12;
  v15 = *((_DWORD *)this + 15);
  if (v15)
  {
    if (v15 < 0)
      v16 = 11;
    else
      v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v14 += v16;
  }
  v17 = *((_DWORD *)this + 16);
  if (v17)
  {
    if (v17 < 0)
      v18 = 11;
    else
      v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v14 += v18;
  }
  v19 = *((_DWORD *)this + 21);
  if (v19 == 101)
  {
    v20 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 9));
    goto LABEL_30;
  }
  if (v19 == 100)
  {
    v20 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 9));
LABEL_30:
    v14 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 20) = v14;
  return v14;
}

std::string *CoreML::Specification::GLMClassifier::MergeFrom(std::string *this, const CoreML::Specification::GLMClassifier *a2)
{
  uint64_t v3;
  uint64_t v4;
  signed int v5;
  CoreML::Specification::GLMRegressor_DoubleArray **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  CoreML::Specification::StringVector *v14;
  CoreML::Specification::Int64Vector *v15;
  CoreML::Specification::StringVector *v16;
  uint64_t *v17;
  CoreML::Specification::Int64Vector *v18;
  uint64_t *v19;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), *((_DWORD *)a2 + 6));
    this = (std::string *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((uint64_t *)(v3 + 16), (CoreML::Specification::GLMRegressor_DoubleArray **)v7, v6, v5, **(_DWORD **)(v3 + 32) - *(_DWORD *)(v3 + 24));
    v8 = *(_DWORD *)(v3 + 24) + v5;
    *(_DWORD *)(v3 + 24) = v8;
    v9 = *(int **)(v3 + 32);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 10);
  if (v10)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 40), *(_DWORD *)(v3 + 40) + v10);
    this = (std::string *)memcpy((void *)(*(_QWORD *)(v3 + 48) + 8 * *(int *)(v3 + 40) + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *(_DWORD *)(v3 + 40) += *((_DWORD *)a2 + 10);
  }
  v11 = *((_DWORD *)a2 + 15);
  if (v11)
    *(_DWORD *)(v3 + 60) = v11;
  v12 = *((_DWORD *)a2 + 16);
  if (v12)
    *(_DWORD *)(v3 + 64) = v12;
  v13 = *((_DWORD *)a2 + 21);
  if (v13 == 101)
  {
    if (*(_DWORD *)(v3 + 84) == 101)
    {
      v15 = *(CoreML::Specification::Int64Vector **)(v3 + 72);
    }
    else
    {
      CoreML::Specification::GLMClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 84) = 101;
      v15 = (CoreML::Specification::Int64Vector *)operator new();
      v18 = (CoreML::Specification::Int64Vector *)CoreML::Specification::Int64Vector::Int64Vector(v15);
      *(_QWORD *)(v3 + 72) = v15;
      if (*((_DWORD *)a2 + 21) != 101)
      {
        v19 = CoreML::Specification::Int64Vector::default_instance(v18);
        return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v15, (const CoreML::Specification::GLMRegressor_DoubleArray *)v19);
      }
    }
    v19 = (uint64_t *)*((_QWORD *)a2 + 9);
    return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v15, (const CoreML::Specification::GLMRegressor_DoubleArray *)v19);
  }
  if (v13 == 100)
  {
    if (*(_DWORD *)(v3 + 84) == 100)
    {
      v14 = *(CoreML::Specification::StringVector **)(v3 + 72);
    }
    else
    {
      CoreML::Specification::GLMClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 84) = 100;
      v14 = (CoreML::Specification::StringVector *)operator new();
      v16 = (CoreML::Specification::StringVector *)CoreML::Specification::StringVector::StringVector(v14);
      *(_QWORD *)(v3 + 72) = v14;
      if (*((_DWORD *)a2 + 21) != 100)
      {
        v17 = CoreML::Specification::StringVector::default_instance(v16);
        return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v14, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v17);
      }
    }
    v17 = (uint64_t *)*((_QWORD *)a2 + 9);
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v14, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)v17);
  }
  return this;
}

void sub_2183AD884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::GLMClassifier::IsInitialized(CoreML::Specification::GLMClassifier *this)
{
  return 1;
}

_QWORD *CoreML::Specification::GLMClassifier::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.GLMClassifier");
}

CoreML::Specification::GLMClassifier_DoubleArray *CoreML::Specification::GLMClassifier_DoubleArray::New(CoreML::Specification::GLMClassifier_DoubleArray *this)
{
  return CoreML::Specification::GLMClassifier_DoubleArray::New(this, 0);
}

CoreML::Specification::GLMClassifier *CoreML::Specification::GLMClassifier::New(CoreML::Specification::GLMClassifier *this)
{
  return CoreML::Specification::GLMClassifier::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier_DoubleArray>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::GLMClassifier>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_GLMClassifier_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(uint64_t a1, uint64_t a2, uint64_t **a3, char a4, int a5, uint64_t **a6)
{
  uint64_t **v10;
  uint64_t **v11;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  v10 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v11 = (uint64_t **)(a1 + 32);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  if (a1 + 56 != a2)
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>((uint64_t **)(a1 + 56), *(__int128 **)a2, (__int128 *)(a2 + 8));
  if (v10 != a3)
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(v10, *a3, a3 + 1);
  *(_BYTE *)a1 = a4;
  *(_DWORD *)(a1 + 80) = a5;
  if (v11 != a6)
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(v11, *a6, a6 + 1);
  return a1;
}

void sub_2183ADA30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  char **v5;
  char **v6;

  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v4, *v3);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v2, *v6);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *v5);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, _DWORD *a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_DWORD *)a2 + 35);
  if (v3 <= 879)
  {
    if (v3 <= 604)
    {
      if (v3 > 249)
      {
        if (v3 > 329)
        {
          if (v3 > 409)
          {
            if (v3 <= 429)
            {
              if (v3 == 410)
              {
                CoreML::NeuralNetworkSpecValidator::validateGRULayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
              }
              if (v3 == 420)
              {
                CoreML::NeuralNetworkSpecValidator::validateUniDirectionalLSTMLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
              }
            }
            else
            {
              switch(v3)
              {
                case 430:
                  CoreML::NeuralNetworkSpecValidator::validateBiDirectionalLSTMLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                  return;
                case 500:
                  CoreML::NeuralNetworkSpecValidator::validateCustomLayer((CoreML::Specification::CustomLayerParams **)a2, (uint64_t)a3);
                  return;
                case 600:
                  CoreML::NeuralNetworkSpecValidator::validateCopyLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                  return;
              }
            }
          }
          else if (v3 <= 344)
          {
            if (v3 == 330)
            {
              CoreML::NeuralNetworkSpecValidator::validateSplitLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
            if (v3 == 340)
            {
              CoreML::NeuralNetworkSpecValidator::validateSequenceRepeatLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v3)
            {
              case 345:
                CoreML::NeuralNetworkSpecValidator::validateReorganizeDataLayer(this, a2, (uint64_t)a3);
                return;
              case 350:
                CoreML::NeuralNetworkSpecValidator::validateSliceLayer(this, a2, (uint64_t)a3);
                return;
              case 400:
                CoreML::NeuralNetworkSpecValidator::validateSimpleRecurrentLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
            }
          }
        }
        else if (v3 > 289)
        {
          if (v3 <= 300)
          {
            if (v3 == 290)
            {
              CoreML::NeuralNetworkSpecValidator::validateLoadConstantLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
            if (v3 == 300)
            {
              CoreML::NeuralNetworkSpecValidator::validateReshapeLayer(this, a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v3)
            {
              case 301:
                CoreML::NeuralNetworkSpecValidator::validateFlattenLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
              case 310:
                CoreML::NeuralNetworkSpecValidator::validatePermuteLayer(this, a2, (uint64_t)a3);
                return;
              case 320:
                CoreML::NeuralNetworkSpecValidator::validateConcatLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
            }
          }
        }
        else if (v3 <= 260)
        {
          if (v3 == 250)
          {
            CoreML::NeuralNetworkSpecValidator::validateBiasLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
          if (v3 == 260)
          {
            CoreML::NeuralNetworkSpecValidator::validateMaxLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 261:
              CoreML::NeuralNetworkSpecValidator::validateMinLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 270:
              CoreML::NeuralNetworkSpecValidator::validateDotLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 280:
              CoreML::NeuralNetworkSpecValidator::validateReduceLayer(this, a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 > 189)
      {
        if (v3 > 219)
        {
          if (v3 <= 230)
          {
            if (v3 == 220)
            {
              CoreML::NeuralNetworkSpecValidator::validateUnaryFunctionLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
            if (v3 == 230)
            {
              CoreML::NeuralNetworkSpecValidator::validateAddLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v3)
            {
              case 231:
                CoreML::NeuralNetworkSpecValidator::validateMultiplyLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
              case 240:
                CoreML::NeuralNetworkSpecValidator::validateAverageLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
              case 245:
                CoreML::NeuralNetworkSpecValidator::validateScaleLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
            }
          }
        }
        else if (v3 <= 209)
        {
          if (v3 == 190)
          {
            CoreML::NeuralNetworkSpecValidator::validateCropLayer(this, a2, (uint64_t)a3);
            return;
          }
          if (v3 == 200)
          {
            CoreML::NeuralNetworkSpecValidator::validatePaddingLayer(this, a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 210:
              CoreML::NeuralNetworkSpecValidator::validateUpsampleLayer(this, (int **)a2, (uint64_t)a3);
              return;
            case 211:
              CoreML::NeuralNetworkSpecValidator::validateResizeBilinearLayer(this, a2, (uint64_t)a3);
              return;
            case 212:
              CoreML::NeuralNetworkSpecValidator::validateCropResizeLayer(this, a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 > 159)
      {
        if (v3 <= 169)
        {
          if (v3 == 160)
          {
            CoreML::NeuralNetworkSpecValidator::validateBatchnormLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
          if (v3 == 165)
          {
            CoreML::NeuralNetworkSpecValidator::validateMvnLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 170:
              CoreML::NeuralNetworkSpecValidator::validateL2NormLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 175:
              CoreML::NeuralNetworkSpecValidator::validateSoftmaxLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 180:
              CoreML::NeuralNetworkSpecValidator::validateLRNLayer(this, a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 <= 129)
      {
        if (v3 == 100)
        {
          CoreML::NeuralNetworkSpecValidator::validateConvolutionLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v3 == 120)
        {
          CoreML::NeuralNetworkSpecValidator::validatePoolingLayer(this, a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 130:
            CoreML::NeuralNetworkSpecValidator::validateActivation(this, a2, (uint64_t)a3);
            return;
          case 140:
            CoreML::NeuralNetworkSpecValidator::validateInnerProductLayer(this, a2, (uint64_t)a3);
            return;
          case 150:
            CoreML::NeuralNetworkSpecValidator::validateEmbeddingLayer(this, a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 <= 749)
    {
      if (v3 <= 669)
      {
        if (v3 > 634)
        {
          if (v3 > 659)
          {
            if (v3 == 660)
            {
              CoreML::NeuralNetworkSpecValidator::validateClipLayer(a2, (uint64_t)a3);
              return;
            }
            if (v3 == 665)
            {
              CoreML::NeuralNetworkSpecValidator::validateCeilLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            if (v3 == 635)
            {
              CoreML::NeuralNetworkSpecValidator::validateRangeStaticLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
            if (v3 == 640)
            {
              CoreML::NeuralNetworkSpecValidator::validateRangeDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
          }
        }
        else if (v3 > 619)
        {
          if (v3 == 620 || v3 == 625)
          {
            CoreML::NeuralNetworkSpecValidator::validateLoopContinueBreakLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          if (v3 == 605)
          {
            CoreML::NeuralNetworkSpecValidator::validateBranchLayer(this, a2, (uint64_t)a3);
            return;
          }
          if (v3 == 615)
          {
            CoreML::NeuralNetworkSpecValidator::validateLoopLayer(this, a2, (uint64_t)a3);
            return;
          }
        }
        goto LABEL_314;
      }
      v4 = (v3 - 685);
      if (v4 <= 0x37)
      {
        if (((1 << (v3 + 83)) & 0x84200842000000) != 0)
        {
LABEL_311:
          CoreML::NeuralNetworkSpecValidator::validateTrigonometryLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v3 == 685)
        {
          CoreML::NeuralNetworkSpecValidator::validateRoundLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v4 == 15)
        {
          CoreML::NeuralNetworkSpecValidator::validateExp2Layer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
      }
      if (v3 == 670)
      {
        CoreML::NeuralNetworkSpecValidator::validateFloorLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
      }
      if (v3 == 680)
      {
        CoreML::NeuralNetworkSpecValidator::validateSignLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
      }
      goto LABEL_314;
    }
    if (v3 > 864)
    {
      switch(v3)
      {
        case 865:
          CoreML::NeuralNetworkSpecValidator::validateModBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        case 870:
          CoreML::NeuralNetworkSpecValidator::validateMinBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        case 875:
          CoreML::NeuralNetworkSpecValidator::validateMaxBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
      }
      goto LABEL_314;
    }
    if ((v3 - 795) <= 0x3C)
    {
      if (((1 << (v3 - 27)) & 0x1084202942100000) != 0)
      {
        CoreML::NeuralNetworkSpecValidator::validateBooleanElementwiseLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
      }
      if (v3 == 795)
        goto LABEL_313;
    }
    v5 = (v3 - 750);
    if (v5 <= 0x28)
    {
      if (((1 << v5) & 0x42100421) != 0)
        goto LABEL_311;
      if (v5 == 40)
      {
LABEL_313:
        CoreML::NeuralNetworkSpecValidator::validateActivationLayers((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
      }
    }
LABEL_314:
    CoreML::NeuralNetworkSpecValidator::validateFailUnknownType((const CoreML::Specification::NeuralNetworkLayer *)a2, a3);
    return;
  }
  if (v3 <= 1139)
  {
    if (v3 > 994)
    {
      if (v3 > 1079)
      {
        if (v3 > 1109)
        {
          if (v3 <= 1124)
          {
            if (v3 == 1110)
            {
              CoreML::NeuralNetworkSpecValidator::validateBroadcastToDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            }
            if (v3 == 1120)
            {
              CoreML::NeuralNetworkSpecValidator::validateSqueezeLayer(a2, (uint64_t)a3);
              return;
            }
          }
          else
          {
            switch(v3)
            {
              case 1125:
                CoreML::NeuralNetworkSpecValidator::validateExpandDimsLayer(a2, (uint64_t)a3);
                return;
              case 1130:
                CoreML::NeuralNetworkSpecValidator::validateFlattenTo2DLayer(a2, (uint64_t)a3);
                return;
              case 1135:
                CoreML::NeuralNetworkSpecValidator::validateReshapeLikeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
                return;
            }
          }
        }
        else if (v3 <= 1089)
        {
          if (v3 == 1080)
          {
            CoreML::NeuralNetworkSpecValidator::validateFillLikeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
          if (v3 == 1085)
          {
            CoreML::NeuralNetworkSpecValidator::validateFillStaticLayer(a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 1090:
              CoreML::NeuralNetworkSpecValidator::validateFillDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 1100:
              CoreML::NeuralNetworkSpecValidator::validateBroadcastToLikeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 1105:
              CoreML::NeuralNetworkSpecValidator::validateBroadcastToStaticLayer(a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 > 1024)
      {
        if (v3 <= 1044)
        {
          if (v3 == 1025)
          {
            CoreML::NeuralNetworkSpecValidator::validateArgMaxLayer(this, a2, (uint64_t)a3);
            return;
          }
          if (v3 == 1040)
          {
            CoreML::NeuralNetworkSpecValidator::validateEmbeddingNDLayer(this, a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 1045:
              CoreML::NeuralNetworkSpecValidator::validateBatchedMatmulLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 1065:
              CoreML::NeuralNetworkSpecValidator::validateGetShapeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 1070:
              CoreML::NeuralNetworkSpecValidator::validateLoadConstantNDLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 <= 1004)
      {
        if (v3 == 995)
        {
          CoreML::NeuralNetworkSpecValidator::validateSliceStaticLayer(a2, (uint64_t)a3);
          return;
        }
        if (v3 == 1000)
        {
          CoreML::NeuralNetworkSpecValidator::validateSliceDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 1005:
            CoreML::NeuralNetworkSpecValidator::validateSlidingWindowsLayer(a2, (uint64_t)a3);
            return;
          case 1015:
            CoreML::NeuralNetworkSpecValidator::validateTopKLayer(this, a2, (uint64_t)a3);
            return;
          case 1020:
            CoreML::NeuralNetworkSpecValidator::validateArgMinLayer(this, a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 <= 939)
    {
      if (v3 > 904)
      {
        if (v3 <= 924)
        {
          if (v3 == 905)
          {
            CoreML::NeuralNetworkSpecValidator::validateSubtractBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
          if (v3 == 920)
          {
            CoreML::NeuralNetworkSpecValidator::validateTileLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          switch(v3)
          {
            case 925:
              CoreML::NeuralNetworkSpecValidator::validateStackLayer(a2, (uint64_t)a3);
              return;
            case 930:
              CoreML::NeuralNetworkSpecValidator::validateGatherLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
            case 935:
              CoreML::NeuralNetworkSpecValidator::validateScatterLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
              return;
          }
        }
      }
      else if (v3 <= 889)
      {
        if (v3 == 880)
        {
          CoreML::NeuralNetworkSpecValidator::validateAddBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v3 == 885)
        {
          CoreML::NeuralNetworkSpecValidator::validatePowBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 890:
            CoreML::NeuralNetworkSpecValidator::validateDivideBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          case 895:
            CoreML::NeuralNetworkSpecValidator::validateFloorDivBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          case 900:
            CoreML::NeuralNetworkSpecValidator::validateMultiplyBroadcastableLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 > 959)
    {
      if (v3 <= 974)
      {
        if (v3 == 960)
        {
          CoreML::NeuralNetworkSpecValidator::validateReverseLayer(a2, (uint64_t)a3);
          return;
        }
        if (v3 == 965)
        {
          CoreML::NeuralNetworkSpecValidator::validateReverseSeqLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 975:
            CoreML::NeuralNetworkSpecValidator::validateSplitNDLayer(a2, (uint64_t)a3);
            return;
          case 980:
            CoreML::NeuralNetworkSpecValidator::validateConcatNDLayer(a2, (uint64_t)a3);
            return;
          case 985:
            CoreML::NeuralNetworkSpecValidator::validateTransposeLayer(a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    switch(v3)
    {
      case 945:
        CoreML::NeuralNetworkSpecValidator::validateScatterNDLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        break;
      case 946:
      case 947:
      case 948:
      case 949:
      case 951:
      case 953:
        goto LABEL_314;
      case 950:
        CoreML::NeuralNetworkSpecValidator::validateSoftmaxNDLayer(a2, (uint64_t)a3);
        break;
      case 952:
        CoreML::NeuralNetworkSpecValidator::validateGatherAlongAxisLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        break;
      case 954:
        CoreML::NeuralNetworkSpecValidator::validateScatterAlongAxisLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        break;
      default:
        if (v3 != 940)
          goto LABEL_314;
        CoreML::NeuralNetworkSpecValidator::validateGatherNDLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        break;
    }
    return;
  }
  if (v3 <= 1274)
  {
    if (v3 <= 1199)
    {
      if (v3 <= 1169)
      {
        if (v3 > 1149)
        {
          if (v3 == 1150)
          {
            CoreML::NeuralNetworkSpecValidator::validateRankPreservingReshapeLayer(a2, (uint64_t)a3);
            return;
          }
          if (v3 == 1155)
          {
            CoreML::NeuralNetworkSpecValidator::validateConstantPadLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
        else
        {
          if (v3 == 1140)
          {
            CoreML::NeuralNetworkSpecValidator::validateReshapeStaticLayer(a2, (uint64_t)a3);
            return;
          }
          if (v3 == 1145)
          {
            CoreML::NeuralNetworkSpecValidator::validateReshapeDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          }
        }
      }
      else if (v3 <= 1179)
      {
        if (v3 == 1170)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomNormalLikeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v3 == 1175)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomNormalStaticLayer(a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 1180:
            CoreML::NeuralNetworkSpecValidator::validateRandomNormalDynamicLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          case 1190:
            CoreML::NeuralNetworkSpecValidator::validateRandomUniformLikeLayer(a2, (uint64_t)a3);
            return;
          case 1195:
            CoreML::NeuralNetworkSpecValidator::validateRandomUniformStaticLayer(a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 <= 1249)
    {
      if (v3 <= 1214)
      {
        if (v3 == 1200)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomUniformDynamicLayer(a2, (uint64_t)a3);
          return;
        }
        if (v3 == 1210)
        {
          CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliLikeLayer(a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 1215:
            CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliStaticLayer(a2, (uint64_t)a3);
            return;
          case 1220:
            CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliDynamicLayer(a2, (uint64_t)a3);
            return;
          case 1230:
            CoreML::NeuralNetworkSpecValidator::validateCategoricalDistributionLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 <= 1259)
    {
      if (v3 != 1250 && v3 != 1255)
        goto LABEL_314;
    }
    else if (v3 != 1260 && v3 != 1265 && v3 != 1270)
    {
      goto LABEL_314;
    }
    goto LABEL_216;
  }
  if (v3 <= 1349)
  {
    if (v3 > 1312)
    {
      if (v3 <= 1319)
      {
        if (v3 == 1313)
        {
          CoreML::NeuralNetworkSpecValidator::validateWhereNonZeroLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
        if (v3 == 1315)
        {
          CoreML::NeuralNetworkSpecValidator::validateMatrixBandPartLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
          return;
        }
      }
      else
      {
        switch(v3)
        {
          case 1320:
            CoreML::NeuralNetworkSpecValidator::validateLowerTriangularLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          case 1325:
            CoreML::NeuralNetworkSpecValidator::validateUpperTriangularLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
          case 1330:
            CoreML::NeuralNetworkSpecValidator::validateWhereLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
            return;
        }
      }
      goto LABEL_314;
    }
    if (v3 <= 1284)
    {
      if (v3 != 1275 && v3 != 1280)
        goto LABEL_314;
    }
    else if (v3 != 1285 && v3 != 1290 && v3 != 1295)
    {
      goto LABEL_314;
    }
LABEL_216:
    CoreML::NeuralNetworkSpecValidator::validateReductionTypeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
    return;
  }
  if (v3 <= 1454)
  {
    switch(v3)
    {
      case 1350:
        CoreML::NeuralNetworkSpecValidator::validateLayerNormalizationLayer(a2, (uint64_t)a3);
        return;
      case 1400:
        CoreML::NeuralNetworkSpecValidator::validateNMSLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
      case 1450:
        CoreML::NeuralNetworkSpecValidator::validateOneHotLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
        return;
    }
    goto LABEL_314;
  }
  switch(v3)
  {
    case 1455:
      CoreML::NeuralNetworkSpecValidator::validateCumSumLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
      break;
    case 1460:
      goto LABEL_313;
    case 1461:
      CoreML::NeuralNetworkSpecValidator::validateArgsortLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
      break;
    case 1465:
      CoreML::NeuralNetworkSpecValidator::validatePooling3dLayer(this, a2, (uint64_t)a3);
      break;
    case 1466:
      CoreML::NeuralNetworkSpecValidator::validateGlobalPooling3dLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
      break;
    case 1470:
      CoreML::NeuralNetworkSpecValidator::validateSliceBySizeLayer((const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
      break;
    case 1471:
      CoreML::NeuralNetworkSpecValidator::validateConvolution3DLayer(this, (const CoreML::Specification::NeuralNetworkLayer *)a2, (uint64_t)a3);
      break;
    default:
      goto LABEL_314;
  }
}

void CoreML::validate<(MLModelType)403>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  _BOOL8 v5;
  uint64_t *v6;
  uint64_t *v7;
  _BOOL8 v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  std::string::size_type size;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  uint64_t *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  int v25;
  const void *v26;
  const void *v27;
  size_t v28;
  const void *v30;
  uint64_t v31;
  int v32;
  const void *v33;
  const void *v34;
  size_t v35;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  std::string v42;
  void *v43[2];
  std::string::size_type v44;
  std::string v45;
  uint64_t v46;
  char **v47;
  char *v48[2];
  std::string::size_type v49;
  void *__p[2];
  uint64_t v51;

  if (*(_DWORD *)(a1 + 44) == 403)
    v4 = *(uint64_t **)(a1 + 32);
  else
    v4 = CoreML::Specification::NeuralNetworkClassifier::default_instance((CoreML::Specification::NeuralNetworkClassifier *)a1);
  CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::NeuralNetworkClassifier>(a1, (uint64_t)v4, 0, 0, (uint64_t)&v49);
  v5 = CoreML::Result::good((CoreML::Result *)&v49);
  if (!v5)
  {
    *(_QWORD *)a2 = v49;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 24) = v51;
    return;
  }
  v48[0] = 0;
  v48[1] = 0;
  v47 = v48;
  if (*(_QWORD *)(a1 + 16))
    v6 = *(uint64_t **)(a1 + 16);
  else
    v6 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_DWORD *)(a1 + 44) == 403)
    v7 = *(uint64_t **)(a1 + 32);
  else
    v7 = CoreML::Specification::NeuralNetworkClassifier::default_instance((CoreML::Specification::NeuralNetworkClassifier *)v5);
  validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetworkClassifier>((uint64_t)v6, (uint64_t)v7, (uint64_t **)&v47, *(unsigned __int8 *)(a1 + 28), (uint64_t)&v45);
  v49 = v45.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v51) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)&v45.__r_.__value_.__r.__words[1];
  v51 = v46;
  v8 = CoreML::Result::good((CoreML::Result *)&v49);
  if (v8)
  {
    if (*(_DWORD *)(a1 + 44) == 403)
      v9 = *(uint64_t **)(a1 + 32);
    else
      v9 = CoreML::Specification::NeuralNetworkClassifier::default_instance((CoreML::Specification::NeuralNetworkClassifier *)v8);
    v10 = v9[8];
    if (*(char *)(v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v45.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v11;
    }
    size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v45.__r_.__value_.__l.__size_;
    if (size
      && v48 == (char **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v47, (const void **)&v45.__r_.__value_.__l.__data_))
    {
      std::operator+<char>();
      v37 = std::string::append(&v42, "' which was not found in the network.");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v44 = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)v43 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
    }
    else
    {
      v41 = a2;
      v13 = *(uint64_t **)(a1 + 16);
      if (!v13)
        v13 = &CoreML::Specification::_ModelDescription_default_instance_;
      v14 = v13[7];
      if (v14)
        v15 = v14 + 8;
      else
        v15 = 0;
      v16 = *((int *)v13 + 12);
      if (!(_DWORD)v16)
      {
LABEL_69:
        *(_QWORD *)v41 = v49;
        *(_OWORD *)(v41 + 8) = *(_OWORD *)__p;
        *(_QWORD *)(v41 + 24) = v51;
        __p[0] = 0;
        __p[1] = 0;
        v51 = 0;
LABEL_77:
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        goto LABEL_79;
      }
      v17 = 8 * v16;
      while (1)
      {
        v18 = *(_QWORD *)v15;
        if (v48 == (char **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v47, *(const void ***)(*(_QWORD *)v15 + 16)))
        {
          v19 = *(const void ***)(v18 + 16);
          if (*(_QWORD *)(a1 + 16))
            v20 = *(uint64_t **)(a1 + 16);
          else
            v20 = &CoreML::Specification::_ModelDescription_default_instance_;
          v21 = (const void *)*((unsigned __int8 *)v19 + 23);
          v22 = v21;
          v23 = v19;
          if (*((char *)v19 + 23) < 0)
          {
            v23 = *v19;
            v22 = v19[1];
          }
          v24 = v20[11];
          v25 = *(char *)(v24 + 23);
          v26 = v25 >= 0 ? (const void *)*(unsigned __int8 *)(v24 + 23) : *(const void **)(v24 + 8);
          v27 = v25 >= 0 ? (const void *)v20[11] : *(const void **)v24;
          v28 = (size_t)(v26 >= v22 ? v22 : v26);
          if (memcmp(v23, v27, v28) || v26 != v22)
          {
            v30 = v19;
            if ((v21 & 0x80) != 0)
            {
              v30 = *v19;
              v21 = v19[1];
            }
            v31 = v20[12];
            v32 = *(char *)(v31 + 23);
            v33 = v32 >= 0 ? (const void *)*(unsigned __int8 *)(v31 + 23) : *(const void **)(v31 + 8);
            v34 = v32 >= 0 ? (const void *)v20[12] : *(const void **)v31;
            v35 = (size_t)(v33 >= v21 ? v21 : v33);
            if (memcmp(v30, v34, v35) || v33 != v21)
              break;
          }
        }
        v15 += 8;
        v17 -= 8;
        if (!v17)
          goto LABEL_69;
      }
      std::operator+<char>();
      v39 = std::string::append(&v42, "' is not produced by any layer of the neural network.");
      a2 = v41;
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v44 = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)v43 = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (SHIBYTE(v44) < 0)
      operator delete(v43[0]);
    goto LABEL_77;
  }
  *(_QWORD *)a2 = v49;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 24) = v51;
  __p[0] = 0;
  __p[1] = 0;
  v51 = 0;
LABEL_79:
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v47, v48[0]);
  if (SHIBYTE(v51) < 0)
    operator delete(__p[0]);
}

void sub_2183AE688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,char *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a30, a31);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(a1);
}

void CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::NeuralNetworkClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7;
  CoreML *v9;
  void *v10;
  void *__p;
  __int128 v12;
  uint64_t v13;

  v7 = *(_DWORD *)(a2 + 100);
  if (!v7)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier models must provide class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
LABEL_15:
    if (*(_QWORD *)(a1 + 16))
      v9 = *(CoreML **)(a1 + 16);
    else
      v9 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
    CoreML::validateFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&__p);
    if (!CoreML::Result::good((CoreML::Result *)&__p))
    {
      *(_QWORD *)a5 = __p;
      *(_OWORD *)(a5 + 8) = v12;
      *(_QWORD *)(a5 + 24) = v13;
      return;
    }
    CoreML::validateClassifierFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)a4, a5);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
    v10 = (void *)v12;
    goto LABEL_27;
  }
  if (v7 == 100)
  {
    if ((a3 & 1) == 0 && !*(_DWORD *)(*(_QWORD *)(a2 + 88) + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have String class labels must provide labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    if (*((_DWORD *)CoreML::Specification::Int64Vector::default_instance((CoreML::Specification::Int64Vector *)a1) + 4))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with String class labels must provide exclusively String class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  if (v7 != 101)
  {
LABEL_14:
    a4 = 0;
    goto LABEL_15;
  }
  if ((a3 & 1) == 0 && !*(_DWORD *)(*(_QWORD *)(a2 + 88) + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have Int64 class labels must provide labels.");
    CoreML::Result::Result((_DWORD *)a5, 13);
    goto LABEL_25;
  }
  if (!*((_DWORD *)CoreML::Specification::StringVector::default_instance((CoreML::Specification::StringVector *)a1) + 6))
  {
    a4 = 1;
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
  CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_25:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return;
  v10 = __p;
LABEL_27:
  operator delete(v10);
}

void sub_2183AE8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetworkClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  const CoreML::Specification::NeuralNetworkLayer *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  CoreML **v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  int v42;
  const void **v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t *v58;
  BOOL v59;
  uint64_t v60;
  int v61;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t *v72;
  uint64_t **v73;
  const void **v74;
  const void **v75;
  const void ***v76;
  int v77;
  uint64_t *v78;
  const void **v79;
  __int128 v80;
  std::string::size_type v81;
  uint64_t *v82;
  _QWORD *v83[2];
  char **v84;
  char *v85[2];
  const void **v86;
  __int128 __p;
  std::string::size_type v88;
  std::string v89;
  std::string v90;
  const void **v91;
  _QWORD v92[5];

  v92[3] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v86);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    v12 = (uint64_t *)(v11 + 8);
  else
    v12 = 0;
  v13 = *(int *)(a1 + 24);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13 - 8;
    do
    {
      v15 = *v12++;
      v16 = *(uint64_t **)(v15 + 32);
      if (!v16)
        v16 = &CoreML::Specification::_FeatureType_default_instance_;
      v17 = *((_DWORD *)v16 + 9);
      v18 = v17 != 5;
      v19 = v17 == 5 || v14 == 0;
      v14 -= 8;
    }
    while (!v19);
  }
  else
  {
    v18 = 1;
  }
  v20 = *(_DWORD *)(a2 + 80);
  v21 = *(_DWORD *)(a2 + 84);
  v22 = *(_QWORD *)(a2 + 32);
  if (v22)
    v23 = (CoreML **)(v22 + 8);
  else
    v23 = 0;
  v24 = *(int *)(a2 + 24);
  if ((_DWORD)v24)
  {
    v25 = 8 * v24;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v23, v10) & 1) != 0)
    {
      ++v23;
      v25 -= 8;
      if (!v25)
        goto LABEL_22;
    }
    if (v20)
      v34 = 1;
    else
      v34 = v18;
    if ((v34 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
    v26 = 1;
  }
  else
  {
LABEL_22:
    v26 = (v20 | v21) != 0;
  }
  if (v20)
    v27 = 1;
  else
    v27 = v21 == 0;
  v28 = v27 || v18;
  if ((v28 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  v29 = *(int *)(a1 + 24);
  if (!(_DWORD)v29)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one input.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks produce at least one output.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one layer.");
    CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_52:
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    goto LABEL_54;
  }
  v30 = *(_QWORD *)(a1 + 32);
  if (v30)
    v31 = v30 + 8;
  else
    v31 = 0;
  v32 = 8 * v29;
  while (1)
  {
    v33 = *(uint64_t **)(*(_QWORD *)v31 + 32);
    if (!v33)
      v33 = &CoreML::Specification::_FeatureType_default_instance_;
    if (!*((_BYTE *)v33 + 16))
      break;
    v31 += 8;
    v32 -= 8;
    if (!v32)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one non-optional input.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "inputs");
  CoreML::validateInputOutputTypes(a1 + 16, 1, (CoreML::Result *)a5);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)a5))
    goto LABEL_54;
  if (*(char *)(a5 + 31) < 0)
    operator delete(*(void **)(a5 + 8));
  v77 = a4;
  v85[0] = 0;
  v85[1] = 0;
  v84 = v85;
  if (v26)
  {
    v35 = *(_QWORD *)(a1 + 32);
    if (v35)
      v36 = (uint64_t *)(v35 + 8);
    else
      v36 = 0;
    v37 = *(int *)(a1 + 24);
    if ((_DWORD)v37)
    {
      v38 = 8 * v37;
      while (1)
      {
        v39 = *v36;
        v40 = *(uint64_t **)(*v36 + 32);
        if (!v40)
          v40 = &CoreML::Specification::_FeatureType_default_instance_;
        v41 = *((_DWORD *)v40 + 9);
        if (v41 == 4)
          break;
        if (v41 == 5)
        {
          if (!*(_DWORD *)(a2 + 80))
          {
            v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
            v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v89);
            goto LABEL_78;
          }
          v42 = *(_DWORD *)(v40[3] + 16);
          v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v89)+ 14) = v42;
        }
LABEL_80:
        ++v36;
        v38 -= 8;
        if (!v38)
          goto LABEL_81;
      }
      v43 = *(const void ***)(v39 + 16);
      if (*(_DWORD *)(a2 + 84))
      {
        v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
        v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (__int128 **)&v89);
        v45 = 4;
      }
      else
      {
        v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
        v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (__int128 **)&v89);
LABEL_78:
        v45 = 5;
      }
      *((_DWORD *)v44 + 14) = v45;
      goto LABEL_80;
    }
LABEL_81:
    v46 = *(_QWORD *)(a1 + 56);
    if (v46)
      v47 = v46 + 8;
    else
      v47 = 0;
    v48 = *(int *)(a1 + 48);
    if ((_DWORD)v48)
    {
      v49 = 8 * v48;
      do
      {
        v50 = *(uint64_t **)(*(_QWORD *)v47 + 32);
        if (!v50)
          v50 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v50 + 9) == 5)
        {
          v51 = *(_DWORD *)(v50[3] + 16);
          if (v51)
          {
            v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v47 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v89)+ 14) = v51;
          }
        }
        v47 += 8;
        v49 -= 8;
      }
      while (v49);
    }
  }
  v83[0] = 0;
  v83[1] = 0;
  v82 = (uint64_t *)v83;
  v52 = *(_QWORD *)(a1 + 32);
  if (v52)
    v53 = (uint64_t *)(v52 + 8);
  else
    v53 = 0;
  v54 = *(int *)(a1 + 24);
  if (!(_DWORD)v54)
  {
LABEL_139:
    v73 = (uint64_t **)CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v89, (uint64_t)&v82, (uint64_t **)&v84, v26, 0, (uint64_t **)&v84);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(v73, a2, (uint64_t)&v79);
    v86 = v79;
    if (SHIBYTE(v88) < 0)
      operator delete((void *)__p);
    __p = v80;
    v88 = v81;
    if (CoreML::Result::good((CoreML::Result *)&v86))
    {
      v74 = v91;
      if (v91 != v92)
      {
        do
        {
          if (v83 == (_QWORD **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v82, v74 + 4)|| (unint64_t)v74[9] >= 2)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a3, v74 + 4, (uint64_t)(v74 + 4));
          }
          v75 = (const void **)v74[1];
          if (v75)
          {
            do
            {
              v76 = (const void ***)v75;
              v75 = (const void **)*v75;
            }
            while (v75);
          }
          else
          {
            do
            {
              v76 = (const void ***)v74[2];
              v19 = *v76 == v74;
              v74 = (const void **)v76;
            }
            while (!v19);
          }
          v74 = (const void **)v76;
        }
        while (v76 != v92);
      }
      if (!v26)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(&v79, a1, a2 + 16, 1);
        CoreML::NeuralNetworkShaper::~NeuralNetworkShaper((CoreML::NeuralNetworkShaper *)&v79);
      }
      if ((CoreML::Result::good((CoreML::Result *)&v86) & v77) == 1)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(a2, (CoreML::Result *)&v79);
        v86 = v79;
        if (SHIBYTE(v88) < 0)
          operator delete((void *)__p);
        __p = v80;
        v88 = v81;
        if (CoreML::Result::good((CoreML::Result *)&v86))
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetworkClassifier>(a1, a2, (CoreML::Result *)&v79);
          v86 = v79;
          if (SHIBYTE(v88) < 0)
            operator delete((void *)__p);
          __p = v80;
          v88 = v81;
          CoreML::Result::good((CoreML::Result *)&v86);
        }
      }
    }
    *(_QWORD *)a5 = v86;
    *(_OWORD *)(a5 + 8) = __p;
    *(_QWORD *)(a5 + 24) = v88;
    __p = 0uLL;
    v88 = 0;
    CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)&v89);
    goto LABEL_162;
  }
  v78 = &v53[v54];
  while (1)
  {
    v55 = *v53;
    std::string::basic_string[abi:ne180100]<0>(&v89, "__input");
    v79 = *(const void ***)(v55 + 16);
    v56 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v82, v79, (uint64_t)&std::piecewise_construct, (__int128 **)&v79);
    v57 = std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v56 + 7, &v89, &v90);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    v58 = *(uint64_t **)(v55 + 32);
    if (!v58)
      v58 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v58 + 9) != 5)
      goto LABEL_138;
    if (v26)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)v58[3], (CoreML::Result *)&v89);
      v86 = (const void **)v89.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v88) < 0)
        operator delete((void *)__p);
      __p = *(_OWORD *)&v89.__r_.__value_.__r.__words[1];
      v88 = v90.__r_.__value_.__r.__words[0];
      v90.__r_.__value_.__s.__data_[7] = 0;
      v89.__r_.__value_.__s.__data_[8] = 0;
      v59 = CoreML::Result::good((CoreML::Result *)&v86);
      if (v90.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v89.__r_.__value_.__l.__size_);
      if (!v59)
      {
        *(_QWORD *)a5 = v86;
        *(_OWORD *)(a5 + 8) = __p;
        *(_QWORD *)(a5 + 24) = v88;
        __p = 0uLL;
        v88 = 0;
        goto LABEL_162;
      }
      goto LABEL_138;
    }
    v60 = v58[3];
    v61 = *(_DWORD *)(v60 + 16);
    if (v61 >= 1 && (v61 | 2) != 3)
      break;
    v63 = *(_DWORD *)(v60 + 60);
    if (v63)
    {
      if (v63 != 21)
      {
        if (v63 != 31 || *(_DWORD *)(*(_QWORD *)(v60 + 40) + 24) == 1)
          goto LABEL_138;
        v64 = *(uint64_t **)(v55 + 32);
        if (!v64)
          v64 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v64 + 9) == 5)
          v65 = (uint64_t *)v64[3];
        else
          v65 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v57);
        if (*((_DWORD *)v65 + 15) == 31)
          v72 = (uint64_t *)v65[5];
        else
          v72 = CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v65);
        v71 = *((_DWORD *)v72 + 6) == 3;
        goto LABEL_136;
      }
      v66 = *(_QWORD *)(v60 + 40);
      v67 = *(_QWORD *)(v66 + 32);
      if (v67)
        v68 = v67 + 8;
      else
        v68 = 0;
      v69 = *(int *)(v66 + 24);
      if (!(_DWORD)v69)
        goto LABEL_138;
      v70 = 8 * v69;
      while ((*(_DWORD *)(*(_QWORD *)v68 + 16) | 2) == 3)
      {
        v68 += 8;
        v70 -= 8;
        if (!v70)
          goto LABEL_138;
      }
    }
    v71 = 0;
LABEL_136:
    if (v61 <= 0 && !v71)
      break;
LABEL_138:
    if (++v53 == v78)
      goto LABEL_139;
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  CoreML::Result::Result((_DWORD *)a5, 12);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
LABEL_162:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v82, v83[0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v84, v85[0]);
LABEL_54:
  if (SHIBYTE(v88) < 0)
    operator delete((void *)__p);
}

void sub_2183AF200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, std::string *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,_QWORD *a35,uint64_t a36,char a37,char *a38,uint64_t a39,uint64_t a40,void *__pa,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 161) < 0)
    operator delete(*(void **)(v46 - 184));
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&a34, a35);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a37, a38);
  if (a46 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)303>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  CoreML *v5;
  _BOOL8 v6;
  uint64_t *v7;
  char **v8;
  char *v9[2];
  uint64_t v10;
  void *__p[2];
  uint64_t v12;

  v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  if (*(_QWORD *)(a1 + 16))
    v5 = *(CoreML **)(a1 + 16);
  else
    v5 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  CoreML::validateRegressorInterface(v5, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&v10);
  v6 = CoreML::Result::good((CoreML::Result *)&v10);
  if (v6)
  {
    v9[0] = 0;
    v9[1] = 0;
    v8 = v9;
    if (*(_QWORD *)(a1 + 16))
      v4 = *(uint64_t **)(a1 + 16);
    if (*(_DWORD *)(a1 + 44) == 303)
      v7 = *(uint64_t **)(a1 + 32);
    else
      v7 = CoreML::Specification::NeuralNetworkRegressor::default_instance((CoreML::Specification::NeuralNetworkRegressor *)v6);
    validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetworkRegressor>((uint64_t)v4, (uint64_t)v7, (uint64_t **)&v8, *(unsigned __int8 *)(a1 + 28), a2);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v8, v9[0]);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)a2 = v10;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 24) = v12;
  }
}

void sub_2183AF528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a10, a11);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetworkRegressor>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  const CoreML::Specification::NeuralNetworkLayer *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  CoreML **v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  int v42;
  const void **v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t *v58;
  BOOL v59;
  uint64_t v60;
  int v61;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t *v72;
  uint64_t **v73;
  const void **v74;
  const void **v75;
  const void ***v76;
  int v77;
  uint64_t *v78;
  const void **v79;
  __int128 v80;
  std::string::size_type v81;
  uint64_t *v82;
  _QWORD *v83[2];
  char **v84;
  char *v85[2];
  const void **v86;
  __int128 __p;
  std::string::size_type v88;
  std::string v89;
  std::string v90;
  const void **v91;
  _QWORD v92[5];

  v92[3] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v86);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    v12 = (uint64_t *)(v11 + 8);
  else
    v12 = 0;
  v13 = *(int *)(a1 + 24);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13 - 8;
    do
    {
      v15 = *v12++;
      v16 = *(uint64_t **)(v15 + 32);
      if (!v16)
        v16 = &CoreML::Specification::_FeatureType_default_instance_;
      v17 = *((_DWORD *)v16 + 9);
      v18 = v17 != 5;
      v19 = v17 == 5 || v14 == 0;
      v14 -= 8;
    }
    while (!v19);
  }
  else
  {
    v18 = 1;
  }
  v20 = *(_DWORD *)(a2 + 72);
  v21 = *(_DWORD *)(a2 + 76);
  v22 = *(_QWORD *)(a2 + 32);
  if (v22)
    v23 = (CoreML **)(v22 + 8);
  else
    v23 = 0;
  v24 = *(int *)(a2 + 24);
  if ((_DWORD)v24)
  {
    v25 = 8 * v24;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v23, v10) & 1) != 0)
    {
      ++v23;
      v25 -= 8;
      if (!v25)
        goto LABEL_22;
    }
    if (v20)
      v34 = 1;
    else
      v34 = v18;
    if ((v34 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
    v26 = 1;
  }
  else
  {
LABEL_22:
    v26 = (v20 | v21) != 0;
  }
  if (v20)
    v27 = 1;
  else
    v27 = v21 == 0;
  v28 = v27 || v18;
  if ((v28 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  v29 = *(int *)(a1 + 24);
  if (!(_DWORD)v29)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one input.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks produce at least one output.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one layer.");
    CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_52:
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    goto LABEL_54;
  }
  v30 = *(_QWORD *)(a1 + 32);
  if (v30)
    v31 = v30 + 8;
  else
    v31 = 0;
  v32 = 8 * v29;
  while (1)
  {
    v33 = *(uint64_t **)(*(_QWORD *)v31 + 32);
    if (!v33)
      v33 = &CoreML::Specification::_FeatureType_default_instance_;
    if (!*((_BYTE *)v33 + 16))
      break;
    v31 += 8;
    v32 -= 8;
    if (!v32)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one non-optional input.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "inputs");
  CoreML::validateInputOutputTypes(a1 + 16, 1, (CoreML::Result *)a5);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)a5))
    goto LABEL_54;
  if (*(char *)(a5 + 31) < 0)
    operator delete(*(void **)(a5 + 8));
  v77 = a4;
  v85[0] = 0;
  v85[1] = 0;
  v84 = v85;
  if (v26)
  {
    v35 = *(_QWORD *)(a1 + 32);
    if (v35)
      v36 = (uint64_t *)(v35 + 8);
    else
      v36 = 0;
    v37 = *(int *)(a1 + 24);
    if ((_DWORD)v37)
    {
      v38 = 8 * v37;
      while (1)
      {
        v39 = *v36;
        v40 = *(uint64_t **)(*v36 + 32);
        if (!v40)
          v40 = &CoreML::Specification::_FeatureType_default_instance_;
        v41 = *((_DWORD *)v40 + 9);
        if (v41 == 4)
          break;
        if (v41 == 5)
        {
          if (!*(_DWORD *)(a2 + 72))
          {
            v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
            v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v89);
            goto LABEL_78;
          }
          v42 = *(_DWORD *)(v40[3] + 16);
          v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v89)+ 14) = v42;
        }
LABEL_80:
        ++v36;
        v38 -= 8;
        if (!v38)
          goto LABEL_81;
      }
      v43 = *(const void ***)(v39 + 16);
      if (*(_DWORD *)(a2 + 76))
      {
        v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
        v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (__int128 **)&v89);
        v45 = 4;
      }
      else
      {
        v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
        v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (__int128 **)&v89);
LABEL_78:
        v45 = 5;
      }
      *((_DWORD *)v44 + 14) = v45;
      goto LABEL_80;
    }
LABEL_81:
    v46 = *(_QWORD *)(a1 + 56);
    if (v46)
      v47 = v46 + 8;
    else
      v47 = 0;
    v48 = *(int *)(a1 + 48);
    if ((_DWORD)v48)
    {
      v49 = 8 * v48;
      do
      {
        v50 = *(uint64_t **)(*(_QWORD *)v47 + 32);
        if (!v50)
          v50 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v50 + 9) == 5)
        {
          v51 = *(_DWORD *)(v50[3] + 16);
          if (v51)
          {
            v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v47 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v89)+ 14) = v51;
          }
        }
        v47 += 8;
        v49 -= 8;
      }
      while (v49);
    }
  }
  v83[0] = 0;
  v83[1] = 0;
  v82 = (uint64_t *)v83;
  v52 = *(_QWORD *)(a1 + 32);
  if (v52)
    v53 = (uint64_t *)(v52 + 8);
  else
    v53 = 0;
  v54 = *(int *)(a1 + 24);
  if (!(_DWORD)v54)
  {
LABEL_139:
    v73 = (uint64_t **)CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v89, (uint64_t)&v82, (uint64_t **)&v84, v26, 0, (uint64_t **)&v84);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(v73, a2, (uint64_t)&v79);
    v86 = v79;
    if (SHIBYTE(v88) < 0)
      operator delete((void *)__p);
    __p = v80;
    v88 = v81;
    if (CoreML::Result::good((CoreML::Result *)&v86))
    {
      v74 = v91;
      if (v91 != v92)
      {
        do
        {
          if (v83 == (_QWORD **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v82, v74 + 4)|| (unint64_t)v74[9] >= 2)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a3, v74 + 4, (uint64_t)(v74 + 4));
          }
          v75 = (const void **)v74[1];
          if (v75)
          {
            do
            {
              v76 = (const void ***)v75;
              v75 = (const void **)*v75;
            }
            while (v75);
          }
          else
          {
            do
            {
              v76 = (const void ***)v74[2];
              v19 = *v76 == v74;
              v74 = (const void **)v76;
            }
            while (!v19);
          }
          v74 = (const void **)v76;
        }
        while (v76 != v92);
      }
      if (!v26)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(&v79, a1, a2 + 16, 1);
        CoreML::NeuralNetworkShaper::~NeuralNetworkShaper((CoreML::NeuralNetworkShaper *)&v79);
      }
      if ((CoreML::Result::good((CoreML::Result *)&v86) & v77) == 1)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>(a2, (CoreML::Result *)&v79);
        v86 = v79;
        if (SHIBYTE(v88) < 0)
          operator delete((void *)__p);
        __p = v80;
        v88 = v81;
        if (CoreML::Result::good((CoreML::Result *)&v86))
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetworkRegressor>(a1, (_QWORD *)a2, (CoreML::Result *)&v79);
          v86 = v79;
          if (SHIBYTE(v88) < 0)
            operator delete((void *)__p);
          __p = v80;
          v88 = v81;
          CoreML::Result::good((CoreML::Result *)&v86);
        }
      }
    }
    *(_QWORD *)a5 = v86;
    *(_OWORD *)(a5 + 8) = __p;
    *(_QWORD *)(a5 + 24) = v88;
    __p = 0uLL;
    v88 = 0;
    CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)&v89);
    goto LABEL_162;
  }
  v78 = &v53[v54];
  while (1)
  {
    v55 = *v53;
    std::string::basic_string[abi:ne180100]<0>(&v89, "__input");
    v79 = *(const void ***)(v55 + 16);
    v56 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v82, v79, (uint64_t)&std::piecewise_construct, (__int128 **)&v79);
    v57 = std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v56 + 7, &v89, &v90);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    v58 = *(uint64_t **)(v55 + 32);
    if (!v58)
      v58 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v58 + 9) != 5)
      goto LABEL_138;
    if (v26)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)v58[3], (CoreML::Result *)&v89);
      v86 = (const void **)v89.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v88) < 0)
        operator delete((void *)__p);
      __p = *(_OWORD *)&v89.__r_.__value_.__r.__words[1];
      v88 = v90.__r_.__value_.__r.__words[0];
      v90.__r_.__value_.__s.__data_[7] = 0;
      v89.__r_.__value_.__s.__data_[8] = 0;
      v59 = CoreML::Result::good((CoreML::Result *)&v86);
      if (v90.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v89.__r_.__value_.__l.__size_);
      if (!v59)
      {
        *(_QWORD *)a5 = v86;
        *(_OWORD *)(a5 + 8) = __p;
        *(_QWORD *)(a5 + 24) = v88;
        __p = 0uLL;
        v88 = 0;
        goto LABEL_162;
      }
      goto LABEL_138;
    }
    v60 = v58[3];
    v61 = *(_DWORD *)(v60 + 16);
    if (v61 >= 1 && (v61 | 2) != 3)
      break;
    v63 = *(_DWORD *)(v60 + 60);
    if (v63)
    {
      if (v63 != 21)
      {
        if (v63 != 31 || *(_DWORD *)(*(_QWORD *)(v60 + 40) + 24) == 1)
          goto LABEL_138;
        v64 = *(uint64_t **)(v55 + 32);
        if (!v64)
          v64 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v64 + 9) == 5)
          v65 = (uint64_t *)v64[3];
        else
          v65 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v57);
        if (*((_DWORD *)v65 + 15) == 31)
          v72 = (uint64_t *)v65[5];
        else
          v72 = CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v65);
        v71 = *((_DWORD *)v72 + 6) == 3;
        goto LABEL_136;
      }
      v66 = *(_QWORD *)(v60 + 40);
      v67 = *(_QWORD *)(v66 + 32);
      if (v67)
        v68 = v67 + 8;
      else
        v68 = 0;
      v69 = *(int *)(v66 + 24);
      if (!(_DWORD)v69)
        goto LABEL_138;
      v70 = 8 * v69;
      while ((*(_DWORD *)(*(_QWORD *)v68 + 16) | 2) == 3)
      {
        v68 += 8;
        v70 -= 8;
        if (!v70)
          goto LABEL_138;
      }
    }
    v71 = 0;
LABEL_136:
    if (v61 <= 0 && !v71)
      break;
LABEL_138:
    if (++v53 == v78)
      goto LABEL_139;
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  CoreML::Result::Result((_DWORD *)a5, 12);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
LABEL_162:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v82, v83[0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v84, v85[0]);
LABEL_54:
  if (SHIBYTE(v88) < 0)
    operator delete((void *)__p);
}

void sub_2183AFE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, std::string *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,_QWORD *a35,uint64_t a36,char a37,char *a38,uint64_t a39,uint64_t a40,void *__pa,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 161) < 0)
    operator delete(*(void **)(v46 - 184));
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&a34, a35);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a37, a38);
  if (a46 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)500>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  _BOOL8 v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  std::string *v15;
  void *v16;
  char v17;
  std::string v18;
  void *v19;
  __int128 v20;
  void *__p;
  void *v22[2];
  uint64_t v23;
  char **v24;
  char *v25[2];
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 16))
    v4 = *(uint64_t **)(a1 + 16);
  else
    v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  std::string::basic_string[abi:ne180100]<0>(&__p, "outputs");
  CoreML::validateInputOutputTypes((uint64_t)(v4 + 5), 2, (CoreML::Result *)a2);
  if (SHIBYTE(v22[1]) < 0)
    operator delete(__p);
  v5 = CoreML::Result::good((CoreML::Result *)a2);
  if (v5)
  {
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    v25[0] = 0;
    v25[1] = 0;
    v24 = v25;
    if (*(_QWORD *)(a1 + 16))
      v6 = *(uint64_t **)(a1 + 16);
    else
      v6 = &CoreML::Specification::_ModelDescription_default_instance_;
    if (*(_DWORD *)(a1 + 44) == 500)
      v7 = *(uint64_t **)(a1 + 32);
    else
      v7 = CoreML::Specification::NeuralNetwork::default_instance((CoreML::Specification::NeuralNetwork *)v5);
    validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetwork>((uint64_t)v6, (uint64_t)v7, (uint64_t **)&v24, *(unsigned __int8 *)(a1 + 28), (uint64_t)&__p);
    if (!CoreML::Result::good((CoreML::Result *)&__p))
      goto LABEL_34;
    v8 = *(uint64_t **)(a1 + 16);
    if (!v8)
      v8 = &CoreML::Specification::_ModelDescription_default_instance_;
    v9 = v8[7];
    v10 = v9 ? v9 + 8 : 0;
    v11 = *((int *)v8 + 12);
    if ((_DWORD)v11)
    {
      v12 = 8 * v11;
      while (1)
      {
        v13 = *(const void ***)(*(_QWORD *)v10 + 16);
        v19 = 0;
        v20 = 0uLL;
        v14 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v24, v13);
        if (v14)
        {
          std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)&v24, v13);
        }
        else
        {
          std::operator+<char>();
          v15 = std::string::append(&v18, "' which is not produced by any layer in the neural network.");
          v16 = (void *)v15->__r_.__value_.__r.__words[0];
          v26[0] = v15->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
          v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v20) < 0)
            operator delete(v19);
          v19 = v16;
          *(_QWORD *)&v20 = v26[0];
          *(_QWORD *)((char *)&v20 + 7) = *(_QWORD *)((char *)v26 + 7);
          HIBYTE(v20) = v17;
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v18.__r_.__value_.__l.__data_);
          CoreML::Result::Result((_DWORD *)a2, 12);
        }
        if (SHIBYTE(v20) < 0)
          operator delete(v19);
        if (!v14)
          break;
        v10 += 8;
        v12 -= 8;
        if (!v12)
          goto LABEL_34;
      }
      if (SHIBYTE(v23) < 0)
        operator delete(v22[0]);
    }
    else
    {
LABEL_34:
      *(_QWORD *)a2 = __p;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)v22;
      *(_QWORD *)(a2 + 24) = v23;
    }
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v24, v25[0]);
  }
}

void sub_2183B0304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,char a31,char *a32)
{
  if (a30 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a31, a32);
  _Unwind_Resume(a1);
}

void CoreML::validateInputOutputTypes(uint64_t a1@<X0>, int a2@<W1>, CoreML::Result *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = v4 + 8;
  else
    v5 = 0;
  v6 = *(int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v8 = 8 * v6;
    while (1)
    {
      v9 = *(uint64_t **)(*(_QWORD *)v5 + 32);
      if (!v9)
        v9 = &CoreML::Specification::_FeatureType_default_instance_;
      if ((*((_DWORD *)v9 + 9) & 0xFFFFFFFE) != 4)
        break;
      v5 += 8;
      v8 -= 8;
      if (!v8)
        goto LABEL_10;
    }
    std::operator+<char>();
    v10 = std::string::append(&v12, " to be images or MLMultiArray.");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v14 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a3, 12, a2);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_10:
    CoreML::Result::Result(a3);
  }
}

void sub_2183B0498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void validateNeuralNetworkTopLevel<CoreML::Specification::NeuralNetwork>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  const CoreML::Specification::NeuralNetworkLayer *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  CoreML **v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  BOOL v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  int v42;
  const void **v43;
  uint64_t *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t *v58;
  BOOL v59;
  uint64_t v60;
  int v61;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t *v72;
  uint64_t **v73;
  const void **v74;
  const void **v75;
  const void ***v76;
  int v77;
  uint64_t *v78;
  const void **v79;
  __int128 v80;
  std::string::size_type v81;
  uint64_t *v82;
  _QWORD *v83[2];
  char **v84;
  char *v85[2];
  const void **v86;
  __int128 __p;
  std::string::size_type v88;
  std::string v89;
  std::string v90;
  const void **v91;
  _QWORD v92[5];

  v92[3] = *MEMORY[0x24BDAC8D0];
  CoreML::Result::Result((CoreML::Result *)&v86);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
    v12 = (uint64_t *)(v11 + 8);
  else
    v12 = 0;
  v13 = *(int *)(a1 + 24);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13 - 8;
    do
    {
      v15 = *v12++;
      v16 = *(uint64_t **)(v15 + 32);
      if (!v16)
        v16 = &CoreML::Specification::_FeatureType_default_instance_;
      v17 = *((_DWORD *)v16 + 9);
      v18 = v17 != 5;
      v19 = v17 == 5 || v14 == 0;
      v14 -= 8;
    }
    while (!v19);
  }
  else
  {
    v18 = 1;
  }
  v20 = *(_DWORD *)(a2 + 72);
  v21 = *(_DWORD *)(a2 + 76);
  v22 = *(_QWORD *)(a2 + 32);
  if (v22)
    v23 = (CoreML **)(v22 + 8);
  else
    v23 = 0;
  v24 = *(int *)(a2 + 24);
  if ((_DWORD)v24)
  {
    v25 = 8 * v24;
    while ((CoreML::isIOS12NeuralNetworkLayer(*v23, v10) & 1) != 0)
    {
      ++v23;
      v25 -= 8;
      if (!v25)
        goto LABEL_22;
    }
    if (v20)
      v34 = 1;
    else
      v34 = v18;
    if ((v34 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the network contains a layer added in version 4 (iOS 13) or later. Use 'EXACT_ARRAY_MAPPING' instead.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
    v26 = 1;
  }
  else
  {
LABEL_22:
    v26 = (v20 | v21) != 0;
  }
  if (v20)
    v27 = 1;
  else
    v27 = v21 == 0;
  v28 = v27 || v18;
  if ((v28 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural Network Multi-Array input shape mapping cannot be 'RANK5_ARRAY_MAPPING' if the image input Shape mapping is not 'RANK5_IMAGE_MAPPING'");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  v29 = *(int *)(a1 + 24);
  if (!(_DWORD)v29)
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one input.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a1 + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks produce at least one output.");
    CoreML::Result::Result((_DWORD *)a5, 12);
    goto LABEL_52;
  }
  if (!*(_DWORD *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one layer.");
    CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_52:
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    goto LABEL_54;
  }
  v30 = *(_QWORD *)(a1 + 32);
  if (v30)
    v31 = v30 + 8;
  else
    v31 = 0;
  v32 = 8 * v29;
  while (1)
  {
    v33 = *(uint64_t **)(*(_QWORD *)v31 + 32);
    if (!v33)
      v33 = &CoreML::Specification::_FeatureType_default_instance_;
    if (!*((_BYTE *)v33 + 16))
      break;
    v31 += 8;
    v32 -= 8;
    if (!v32)
    {
      std::string::basic_string[abi:ne180100]<0>(&v89, "Neural networks require at least one non-optional input.");
      CoreML::Result::Result((_DWORD *)a5, 12);
      goto LABEL_52;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "inputs");
  CoreML::validateInputOutputTypes(a1 + 16, 1, (CoreML::Result *)a5);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (!CoreML::Result::good((CoreML::Result *)a5))
    goto LABEL_54;
  if (*(char *)(a5 + 31) < 0)
    operator delete(*(void **)(a5 + 8));
  v77 = a4;
  v85[0] = 0;
  v85[1] = 0;
  v84 = v85;
  if (v26)
  {
    v35 = *(_QWORD *)(a1 + 32);
    if (v35)
      v36 = (uint64_t *)(v35 + 8);
    else
      v36 = 0;
    v37 = *(int *)(a1 + 24);
    if ((_DWORD)v37)
    {
      v38 = 8 * v37;
      while (1)
      {
        v39 = *v36;
        v40 = *(uint64_t **)(*v36 + 32);
        if (!v40)
          v40 = &CoreML::Specification::_FeatureType_default_instance_;
        v41 = *((_DWORD *)v40 + 9);
        if (v41 == 4)
          break;
        if (v41 == 5)
        {
          if (!*(_DWORD *)(a2 + 72))
          {
            v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
            v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v89);
            goto LABEL_78;
          }
          v42 = *(_DWORD *)(v40[3] + 16);
          v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v89)+ 14) = v42;
        }
LABEL_80:
        ++v36;
        v38 -= 8;
        if (!v38)
          goto LABEL_81;
      }
      v43 = *(const void ***)(v39 + 16);
      if (*(_DWORD *)(a2 + 76))
      {
        v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
        v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (__int128 **)&v89);
        v45 = 4;
      }
      else
      {
        v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 16);
        v44 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, v43, (uint64_t)&std::piecewise_construct, (__int128 **)&v89);
LABEL_78:
        v45 = 5;
      }
      *((_DWORD *)v44 + 14) = v45;
      goto LABEL_80;
    }
LABEL_81:
    v46 = *(_QWORD *)(a1 + 56);
    if (v46)
      v47 = v46 + 8;
    else
      v47 = 0;
    v48 = *(int *)(a1 + 48);
    if ((_DWORD)v48)
    {
      v49 = 8 * v48;
      do
      {
        v50 = *(uint64_t **)(*(_QWORD *)v47 + 32);
        if (!v50)
          v50 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v50 + 9) == 5)
        {
          v51 = *(_DWORD *)(v50[3] + 16);
          if (v51)
          {
            v89.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v47 + 16);
            *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v84, (const void **)v89.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v89)+ 14) = v51;
          }
        }
        v47 += 8;
        v49 -= 8;
      }
      while (v49);
    }
  }
  v83[0] = 0;
  v83[1] = 0;
  v82 = (uint64_t *)v83;
  v52 = *(_QWORD *)(a1 + 32);
  if (v52)
    v53 = (uint64_t *)(v52 + 8);
  else
    v53 = 0;
  v54 = *(int *)(a1 + 24);
  if (!(_DWORD)v54)
  {
LABEL_139:
    v73 = (uint64_t **)CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator((uint64_t)&v89, (uint64_t)&v82, (uint64_t **)&v84, v26, 0, (uint64_t **)&v84);
    CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(v73, a2, (uint64_t)&v79);
    v86 = v79;
    if (SHIBYTE(v88) < 0)
      operator delete((void *)__p);
    __p = v80;
    v88 = v81;
    if (CoreML::Result::good((CoreML::Result *)&v86))
    {
      v74 = v91;
      if (v91 != v92)
      {
        do
        {
          if (v83 == (_QWORD **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v82, v74 + 4)|| (unint64_t)v74[9] >= 2)
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a3, v74 + 4, (uint64_t)(v74 + 4));
          }
          v75 = (const void **)v74[1];
          if (v75)
          {
            do
            {
              v76 = (const void ***)v75;
              v75 = (const void **)*v75;
            }
            while (v75);
          }
          else
          {
            do
            {
              v76 = (const void ***)v74[2];
              v19 = *v76 == v74;
              v74 = (const void **)v76;
            }
            while (!v19);
          }
          v74 = (const void **)v76;
        }
        while (v76 != v92);
      }
      if (!v26)
      {
        CoreML::NeuralNetworkShaper::NeuralNetworkShaper(&v79, a1, a2 + 16, 1);
        CoreML::NeuralNetworkShaper::~NeuralNetworkShaper((CoreML::NeuralNetworkShaper *)&v79);
      }
      if ((CoreML::Result::good((CoreML::Result *)&v86) & v77) == 1)
      {
        validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetwork>(a2, (CoreML::Result *)&v79);
        v86 = v79;
        if (SHIBYTE(v88) < 0)
          operator delete((void *)__p);
        __p = v80;
        v88 = v81;
        if (CoreML::Result::good((CoreML::Result *)&v86))
        {
          validateTrainingInputs<CoreML::Specification::NeuralNetwork>(a1, (_QWORD *)a2, (CoreML::Result *)&v79);
          v86 = v79;
          if (SHIBYTE(v88) < 0)
            operator delete((void *)__p);
          __p = v80;
          v88 = v81;
          CoreML::Result::good((CoreML::Result *)&v86);
        }
      }
    }
    *(_QWORD *)a5 = v86;
    *(_OWORD *)(a5 + 8) = __p;
    *(_QWORD *)(a5 + 24) = v88;
    __p = 0uLL;
    v88 = 0;
    CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)&v89);
    goto LABEL_162;
  }
  v78 = &v53[v54];
  while (1)
  {
    v55 = *v53;
    std::string::basic_string[abi:ne180100]<0>(&v89, "__input");
    v79 = *(const void ***)(v55 + 16);
    v56 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v82, v79, (uint64_t)&std::piecewise_construct, (__int128 **)&v79);
    v57 = std::__tree<std::string>::__assign_unique<std::string const*>((uint64_t **)v56 + 7, &v89, &v90);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    v58 = *(uint64_t **)(v55 + 32);
    if (!v58)
      v58 = &CoreML::Specification::_FeatureType_default_instance_;
    if (*((_DWORD *)v58 + 9) != 5)
      goto LABEL_138;
    if (v26)
    {
      CoreML::validateNdMultiArrayInputType((CoreML *)v58[3], (CoreML::Result *)&v89);
      v86 = (const void **)v89.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v88) < 0)
        operator delete((void *)__p);
      __p = *(_OWORD *)&v89.__r_.__value_.__r.__words[1];
      v88 = v90.__r_.__value_.__r.__words[0];
      v90.__r_.__value_.__s.__data_[7] = 0;
      v89.__r_.__value_.__s.__data_[8] = 0;
      v59 = CoreML::Result::good((CoreML::Result *)&v86);
      if (v90.__r_.__value_.__s.__data_[7] < 0)
        operator delete((void *)v89.__r_.__value_.__l.__size_);
      if (!v59)
      {
        *(_QWORD *)a5 = v86;
        *(_OWORD *)(a5 + 8) = __p;
        *(_QWORD *)(a5 + 24) = v88;
        __p = 0uLL;
        v88 = 0;
        goto LABEL_162;
      }
      goto LABEL_138;
    }
    v60 = v58[3];
    v61 = *(_DWORD *)(v60 + 16);
    if (v61 >= 1 && (v61 | 2) != 3)
      break;
    v63 = *(_DWORD *)(v60 + 60);
    if (v63)
    {
      if (v63 != 21)
      {
        if (v63 != 31 || *(_DWORD *)(*(_QWORD *)(v60 + 40) + 24) == 1)
          goto LABEL_138;
        v64 = *(uint64_t **)(v55 + 32);
        if (!v64)
          v64 = &CoreML::Specification::_FeatureType_default_instance_;
        if (*((_DWORD *)v64 + 9) == 5)
          v65 = (uint64_t *)v64[3];
        else
          v65 = CoreML::Specification::ArrayFeatureType::default_instance((CoreML::Specification::ArrayFeatureType *)v57);
        if (*((_DWORD *)v65 + 15) == 31)
          v72 = (uint64_t *)v65[5];
        else
          v72 = CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance((CoreML::Specification::ArrayFeatureType_ShapeRange *)v65);
        v71 = *((_DWORD *)v72 + 6) == 3;
        goto LABEL_136;
      }
      v66 = *(_QWORD *)(v60 + 40);
      v67 = *(_QWORD *)(v66 + 32);
      if (v67)
        v68 = v67 + 8;
      else
        v68 = 0;
      v69 = *(int *)(v66 + 24);
      if (!(_DWORD)v69)
        goto LABEL_138;
      v70 = 8 * v69;
      while ((*(_DWORD *)(*(_QWORD *)v68 + 16) | 2) == 3)
      {
        v68 += 8;
        v70 -= 8;
        if (!v70)
          goto LABEL_138;
      }
    }
    v71 = 0;
LABEL_136:
    if (v61 <= 0 && !v71)
      break;
LABEL_138:
    if (++v53 == v78)
      goto LABEL_139;
  }
  std::string::basic_string[abi:ne180100]<0>(&v89, "Input MLMultiArray to neural networks must have dimension 1 (vector) or 3 (image-like arrays).");
  CoreML::Result::Result((_DWORD *)a5, 12);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
LABEL_162:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v82, v83[0]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v84, v85[0]);
LABEL_54:
  if (SHIBYTE(v88) < 0)
    operator delete((void *)__p);
}

void sub_2183B0DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, std::string *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,_QWORD *a35,uint64_t a36,char a37,char *a38,uint64_t a39,uint64_t a40,void *__pa,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 161) < 0)
    operator delete(*(void **)(v46 - 184));
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&a34, a35);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a37, a38);
  if (a46 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::set<std::string>>,std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::set<std::string> &>::operator=[abi:ne180100]<std::string const,std::set<std::string>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::set<std::string>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2183B1174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::set<std::string> &>::operator=[abi:ne180100]<std::string const,std::set<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(uint64_t ***)(a1 + 8);
  if (v4 != (uint64_t **)(a2 + 24))
    std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v4, *(_QWORD **)(a2 + 24), (_QWORD *)(a2 + 32));
  return a1;
}

uint64_t **std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::string>::__emplace_multi<std::string const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2183B133C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **std::__tree<std::string>::__emplace_multi<std::string const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_2183B13A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_multi<std::pair<std::string const,std::set<std::string>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_2183B1484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::pair<std::string const,std::set<std::string>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2183B14EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::set<std::string>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  return this;
}

void sub_2183B155C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,int>,std::__tree_node<std::__value_type<std::string,int>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_multi<std::pair<std::string const,int> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2183B16EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_multi<std::pair<std::string const,int> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__construct_node<std::pair<std::string const,turi::unary_op> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

void sub_2183B1754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void CoreML::validateNdMultiArrayInputType(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  int v4;
  void *__p[2];
  char v6;

  v4 = *((_DWORD *)this + 4);
  if (v4 <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Input MLMultiArray to neural networks must have at least 1 dimension.");
    CoreML::Result::Result(a2, 12);
  }
  else
  {
    if (*((_DWORD *)this + 15) != 31 || *(_DWORD *)(*((_QWORD *)this + 5) + 24) == v4)
    {
      CoreML::Result::Result(a2);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "For MLMultiArray input: Rank of the flexible shape range must match the rank of the default shape.");
    CoreML::Result::Result(a2, 12);
  }
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_2183B182C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CoreML *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CoreML *v25;
  int v26;
  int v27;
  uint64_t v28;
  const void ***v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  uint64_t v33;
  const void ***v34;
  uint64_t v35;
  uint64_t v36;
  const void **v37;
  uint64_t *v38;
  __int128 *v39;
  __int128 v40;
  uint64_t v41;
  __int128 *v42;
  __int128 v43;
  _DWORD *v44;
  __int128 *v45;
  __int128 v46;
  _DWORD *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  __int128 *v59;
  __int128 v60;
  __int128 *v61;
  __int128 v62;
  __int128 *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  __int128 v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  __int128 *v86;
  __int128 v87;
  std::string *v88;
  std::string::size_type size;
  std::string *v90;
  __int128 v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  __int128 v103;
  __int128 *v104;
  __int128 v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  __int128 v115;
  std::string *v116;
  __int128 v117;
  __int128 *v118;
  __int128 v119;
  __int128 *v120;
  __int128 v121;
  std::string *v122;
  __int128 v123;
  std::string *v124;
  __int128 v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  __int128 v129;
  _QWORD *v130;
  _QWORD *v131;
  CoreML::NeuralNetworkSpecValidator *v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t **v136;
  _BYTE *v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  uint64_t v145;
  std::string v146;
  std::string v147;
  std::string::size_type v148;
  __int128 v149;
  uint64_t v150;

  CoreML::Result::Result((CoreML::Result *)&v148);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = (_QWORD *)(v6 + 8);
  if (!v6)
    v7 = 0;
  v8 = *(int *)(a2 + 24);
  if (!(_DWORD)v8)
  {
LABEL_58:
    CoreML::Result::Result((CoreML::Result *)a3);
    goto LABEL_206;
  }
  v130 = &v7[v8];
  v135 = a1 + 2;
  v136 = a1 + 1;
  v9 = a1 + 4;
  v133 = a3;
  v134 = a1 + 5;
  v10 = a1 + 7;
  v137 = a1 + 8;
  v132 = (CoreML::NeuralNetworkSpecValidator *)a1;
  while (1)
  {
    v131 = v7;
    v11 = *v7;
    if (!CoreML::Result::good((CoreML::Result *)&v148))
    {
LABEL_89:
      *(_QWORD *)a3 = v148;
      *(_OWORD *)(a3 + 8) = v149;
      *(_QWORD *)(a3 + 24) = v150;
      goto LABEL_90;
    }
    if (*(_BYTE *)a1)
    {
      v12 = *(int *)(v11 + 72);
      if ((_DWORD)v12)
      {
        if (*(_DWORD *)(v11 + 24) == (_DWORD)v12)
        {
          v13 = *(_QWORD *)(v11 + 80);
          if (v13)
            v14 = v13 + 8;
          else
            v14 = 0;
          v15 = -8 * v12;
          v16 = 8;
          while (1)
          {
            v17 = *(CoreML **)(v14 + v16 - 8);
            CoreML::validateTensorMessage(v17, (const CoreML::Specification::Tensor *)v11, (CoreML::Result *)&v144);
            v148 = v144.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v150) < 0)
              operator delete((void *)v149);
            v149 = *(_OWORD *)&v144.__r_.__value_.__r.__words[1];
            v150 = v145;
            if (!CoreML::Result::good((CoreML::Result *)&v148))
              goto LABEL_59;
            if (v135 != (_BYTE *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v136, *(const void ***)(*(_QWORD *)(v11 + 32) + v16)))
            {
              v18 = *((_DWORD *)v17 + 9);
              v144.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v11 + 32) + v16);
              if (v18 != *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v136, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v144)+ 14))
              {
                v42 = *(__int128 **)(v11 + 112);
                if (*((char *)v42 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)v42, *((_QWORD *)v42 + 1));
                }
                else
                {
                  v43 = *v42;
                  v141.__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 2);
                  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v43;
                }
                v44 = (_DWORD *)v133;
                v82 = std::string::insert(&v141, 0, "Layer '");
                v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
                v142.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v83;
                v82->__r_.__value_.__l.__size_ = 0;
                v82->__r_.__value_.__r.__words[2] = 0;
                v82->__r_.__value_.__r.__words[0] = 0;
                v84 = std::string::append(&v142, "''s input '");
                v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
                v143.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v85;
                v84->__r_.__value_.__l.__size_ = 0;
                v84->__r_.__value_.__r.__words[2] = 0;
                v84->__r_.__value_.__r.__words[0] = 0;
                v86 = *(__int128 **)(*(_QWORD *)(v11 + 32) + v16);
                if (*((char *)v86 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)v86, *((_QWORD *)v86 + 1));
                }
                else
                {
                  v87 = *v86;
                  v140.__r_.__value_.__r.__words[2] = *((_QWORD *)v86 + 2);
                  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v87;
                }
                if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v88 = &v140;
                else
                  v88 = (std::string *)v140.__r_.__value_.__r.__words[0];
                if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
                else
                  size = v140.__r_.__value_.__l.__size_;
                v90 = std::string::append(&v143, (const std::string::value_type *)v88, size);
                v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
                v146.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v91;
                v90->__r_.__value_.__l.__size_ = 0;
                v90->__r_.__value_.__r.__words[2] = 0;
                v90->__r_.__value_.__r.__words[0] = 0;
                v92 = std::string::append(&v146, "' is also an input to the model. However, for this tensor the rank provided in the layer description");
                v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
                v147.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v93;
                v92->__r_.__value_.__l.__size_ = 0;
                v92->__r_.__value_.__r.__words[2] = 0;
                v92->__r_.__value_.__r.__words[0] = 0;
                v94 = std::string::append(&v147, " does not match the one provided in the model description");
                v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
                v144.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v95;
                v94->__r_.__value_.__l.__size_ = 0;
                v94->__r_.__value_.__r.__words[2] = 0;
                v94->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v147.__r_.__value_.__l.__data_);
                if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v146.__r_.__value_.__l.__data_);
                if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v140.__r_.__value_.__l.__data_);
                if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v143.__r_.__value_.__l.__data_);
                if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v142.__r_.__value_.__l.__data_);
                if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v141.__r_.__value_.__l.__data_);
LABEL_152:
                CoreML::Result::Result(v44, 13);
                goto LABEL_204;
              }
            }
            if (v134 == (_BYTE *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v9, *(const void ***)(*(_QWORD *)(v11 + 32) + v16)))
            {
              v19 = *((_DWORD *)v17 + 9);
              v144.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v11 + 32) + v16);
              *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v144)+ 14) = v19;
            }
            else
            {
              v144.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v11 + 32) + v16);
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v144)+ 14) != *((_DWORD *)v17 + 9))
              {
                v45 = *(__int128 **)(*(_QWORD *)(v11 + 32) + v16);
                if (*((char *)v45 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v45, *((_QWORD *)v45 + 1));
                }
                else
                {
                  v46 = *v45;
                  v146.__r_.__value_.__r.__words[2] = *((_QWORD *)v45 + 2);
                  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v46;
                }
                v47 = (_DWORD *)v133;
                v96 = std::string::insert(&v146, 0, "Inconsistent rank for the blob named '");
                v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
                v147.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v97;
                v96->__r_.__value_.__l.__size_ = 0;
                v96->__r_.__value_.__r.__words[2] = 0;
                v96->__r_.__value_.__r.__words[0] = 0;
                v98 = std::string::append(&v147, "'.");
                v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
                v144.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v99;
                v98->__r_.__value_.__l.__size_ = 0;
                v98->__r_.__value_.__r.__words[2] = 0;
                v98->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v147.__r_.__value_.__l.__data_);
                if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v146.__r_.__value_.__l.__data_);
                goto LABEL_203;
              }
            }
            v16 += 8;
            if (v15 + v16 == 8)
              goto LABEL_23;
          }
        }
        v118 = *(__int128 **)(v11 + 112);
        if (*((char *)v118 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v118, *((_QWORD *)v118 + 1));
        }
        else
        {
          v119 = *v118;
          v146.__r_.__value_.__r.__words[2] = *((_QWORD *)v118 + 2);
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v119;
        }
        v47 = (_DWORD *)v133;
        v122 = std::string::insert(&v146, 0, "Layer '");
        v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v123;
        v122->__r_.__value_.__l.__size_ = 0;
        v122->__r_.__value_.__r.__words[2] = 0;
        v122->__r_.__value_.__r.__words[0] = 0;
        v124 = std::string::append(&v147, "''s input and inputTensors have different lengths");
        v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v147.__r_.__value_.__l.__data_);
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
        goto LABEL_203;
      }
LABEL_23:
      v20 = *(int *)(v11 + 96);
      if ((_DWORD)v20)
      {
        if (*(_DWORD *)(v11 + 48) == (_DWORD)v20)
        {
          v21 = *(_QWORD *)(v11 + 104);
          if (v21)
            v22 = v21 + 8;
          else
            v22 = 0;
          v23 = -8 * v20;
          v24 = 8;
          while (1)
          {
            v25 = *(CoreML **)(v22 + v24 - 8);
            CoreML::validateTensorMessage(v25, (const CoreML::Specification::Tensor *)v11, (CoreML::Result *)&v144);
            v148 = v144.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v150) < 0)
              operator delete((void *)v149);
            v149 = *(_OWORD *)&v144.__r_.__value_.__r.__words[1];
            v150 = v145;
            if (!CoreML::Result::good((CoreML::Result *)&v148))
              break;
            if (v135 != (_BYTE *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v136, *(const void ***)(*(_QWORD *)(v11 + 56) + v24)))
            {
              v26 = *((_DWORD *)v25 + 9);
              v144.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v11 + 56) + v24);
              if (v26 != *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v136, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v144)+ 14))
              {
                v59 = *(__int128 **)(v11 + 112);
                if (*((char *)v59 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)v59, *((_QWORD *)v59 + 1));
                }
                else
                {
                  v60 = *v59;
                  v141.__r_.__value_.__r.__words[2] = *((_QWORD *)v59 + 2);
                  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v60;
                }
                v44 = (_DWORD *)v133;
                v100 = std::string::insert(&v141, 0, "Layer '");
                v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
                v142.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v101;
                v100->__r_.__value_.__l.__size_ = 0;
                v100->__r_.__value_.__r.__words[2] = 0;
                v100->__r_.__value_.__r.__words[0] = 0;
                v102 = std::string::append(&v142, "''s output '");
                v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
                v143.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v103;
                v102->__r_.__value_.__l.__size_ = 0;
                v102->__r_.__value_.__r.__words[2] = 0;
                v102->__r_.__value_.__r.__words[0] = 0;
                v104 = *(__int128 **)(*(_QWORD *)(v11 + 56) + v24);
                if (*((char *)v104 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)v104, *((_QWORD *)v104 + 1));
                }
                else
                {
                  v105 = *v104;
                  v140.__r_.__value_.__r.__words[2] = *((_QWORD *)v104 + 2);
                  *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v105;
                }
                if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v106 = &v140;
                else
                  v106 = (std::string *)v140.__r_.__value_.__r.__words[0];
                if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v107 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
                else
                  v107 = v140.__r_.__value_.__l.__size_;
                v108 = std::string::append(&v143, (const std::string::value_type *)v106, v107);
                v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
                v146.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v109;
                v108->__r_.__value_.__l.__size_ = 0;
                v108->__r_.__value_.__r.__words[2] = 0;
                v108->__r_.__value_.__r.__words[0] = 0;
                v110 = std::string::append(&v146, "' is also an output of the model. However, for this tensor the rank provided in the layer description");
                v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
                v147.__r_.__value_.__r.__words[2] = v110->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v111;
                v110->__r_.__value_.__l.__size_ = 0;
                v110->__r_.__value_.__r.__words[2] = 0;
                v110->__r_.__value_.__r.__words[0] = 0;
                v112 = std::string::append(&v147, " does not match the one provided in the model description");
                v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
                v144.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v113;
                v112->__r_.__value_.__l.__size_ = 0;
                v112->__r_.__value_.__r.__words[2] = 0;
                v112->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v147.__r_.__value_.__l.__data_);
                if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v146.__r_.__value_.__l.__data_);
                if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v140.__r_.__value_.__l.__data_);
                if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v143.__r_.__value_.__l.__data_);
                if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v142.__r_.__value_.__l.__data_);
                if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v141.__r_.__value_.__l.__data_);
                goto LABEL_152;
              }
            }
            if (v134 == (_BYTE *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v9, *(const void ***)(*(_QWORD *)(v11 + 56) + v24)))
            {
              v27 = *((_DWORD *)v25 + 9);
              v144.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v11 + 56) + v24);
              *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v144)+ 14) = v27;
            }
            else
            {
              v144.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v11 + 56) + v24);
              if (*((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v144)+ 14) != *((_DWORD *)v25 + 9))
              {
                v61 = *(__int128 **)(*(_QWORD *)(v11 + 56) + v24);
                if (*((char *)v61 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v61, *((_QWORD *)v61 + 1));
                }
                else
                {
                  v62 = *v61;
                  v146.__r_.__value_.__r.__words[2] = *((_QWORD *)v61 + 2);
                  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v62;
                }
                v47 = (_DWORD *)v133;
                v114 = std::string::insert(&v146, 0, "Inconsistent rank for the blob named '");
                v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
                v147.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v115;
                v114->__r_.__value_.__l.__size_ = 0;
                v114->__r_.__value_.__r.__words[2] = 0;
                v114->__r_.__value_.__r.__words[0] = 0;
                v116 = std::string::append(&v147, "'.");
                v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
                v144.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v117;
                v116->__r_.__value_.__l.__size_ = 0;
                v116->__r_.__value_.__r.__words[2] = 0;
                v116->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v147.__r_.__value_.__l.__data_);
                if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v146.__r_.__value_.__l.__data_);
                goto LABEL_203;
              }
            }
            v24 += 8;
            if (v23 + v24 == 8)
              goto LABEL_39;
          }
LABEL_59:
          *(_QWORD *)v133 = v148;
          *(_OWORD *)(v133 + 8) = v149;
          *(_QWORD *)(v133 + 24) = v150;
LABEL_90:
          v149 = 0uLL;
          v150 = 0;
          goto LABEL_206;
        }
        v120 = *(__int128 **)(v11 + 112);
        if (*((char *)v120 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v146, *(const std::string::value_type **)v120, *((_QWORD *)v120 + 1));
        }
        else
        {
          v121 = *v120;
          v146.__r_.__value_.__r.__words[2] = *((_QWORD *)v120 + 2);
          *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v121;
        }
        v126 = std::string::insert(&v146, 0, "Layer '");
        v47 = (_DWORD *)v133;
        v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v127;
        v126->__r_.__value_.__l.__size_ = 0;
        v126->__r_.__value_.__r.__words[2] = 0;
        v126->__r_.__value_.__r.__words[0] = 0;
        v128 = std::string::append(&v147, "''s output and \"outputTensors\" property have different lengths");
        v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v129;
        v128->__r_.__value_.__l.__size_ = 0;
        v128->__r_.__value_.__r.__words[2] = 0;
        v128->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v147.__r_.__value_.__l.__data_);
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
LABEL_203:
        CoreML::Result::Result(v47, 13);
        goto LABEL_204;
      }
    }
LABEL_39:
    CoreML::NeuralNetworkSpecValidator::validateLayer(v132, (uint64_t **)v11, &v144);
    v148 = v144.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v150) < 0)
      operator delete((void *)v149);
    v149 = *(_OWORD *)&v144.__r_.__value_.__r.__words[1];
    v150 = v145;
    a3 = v133;
    if (!CoreML::Result::good((CoreML::Result *)&v148))
      goto LABEL_89;
    v28 = *(_QWORD *)(v11 + 32);
    v29 = v28 ? (const void ***)(v28 + 8) : 0;
    v30 = *(int *)(v11 + 24);
    if ((_DWORD)v30)
      break;
LABEL_49:
    v33 = *(_QWORD *)(v11 + 56);
    if (v33)
      v34 = (const void ***)(v33 + 8);
    else
      v34 = 0;
    v35 = *(int *)(v11 + 48);
    if ((_DWORD)v35)
    {
      v36 = 8 * v35;
      while (1)
      {
        v37 = *v34;
        if (v137 != (_BYTE *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v10, *v34)&& *(_DWORD *)(v11 + 140) != 600)
        {
          break;
        }
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        v38 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v37, (uint64_t)&std::piecewise_construct, (__int128 **)&v144);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v38 + 7, *(const void ***)(v11 + 112), *(_QWORD *)(v11 + 112));
        ++v34;
        v36 -= 8;
        if (!v36)
          goto LABEL_57;
      }
      v147.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
      v41 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v37, (uint64_t)&std::piecewise_construct, (__int128 **)&v147)[7];
      if (*(char *)(v41 + 55) < 0)
        std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)(v41 + 32), *(_QWORD *)(v41 + 40));
      else
        v144 = *(std::string *)(v41 + 32);
      v63 = *(__int128 **)(v11 + 112);
      if (*((char *)v63 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v63, *((_QWORD *)v63 + 1));
      }
      else
      {
        v64 = *v63;
        v139.__r_.__value_.__r.__words[2] = *((_QWORD *)v63 + 2);
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v64;
      }
      v65 = std::string::insert(&v139, 0, "Layer '");
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v140.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      v67 = std::string::append(&v140, "' produces an output named '");
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v141.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)v37 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v138, (const std::string::value_type *)*v37, (std::string::size_type)v37[1]);
      }
      else
      {
        v69 = *(_OWORD *)v37;
        v138.__r_.__value_.__r.__words[2] = (std::string::size_type)v37[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v69;
      }
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = &v138;
      else
        v70 = (std::string *)v138.__r_.__value_.__r.__words[0];
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      else
        v71 = v138.__r_.__value_.__l.__size_;
      v72 = std::string::append(&v141, (const std::string::value_type *)v70, v71);
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v142.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&v142, "' which is also an output produced by the layer '");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v143.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = &v144;
      else
        v76 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
      else
        v77 = v144.__r_.__value_.__l.__size_;
      v78 = std::string::append(&v143, (const std::string::value_type *)v76, v77);
      v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      v80 = std::string::append(&v146, "'.");
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v147.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v143.__r_.__value_.__l.__data_);
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v142.__r_.__value_.__l.__data_);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v138.__r_.__value_.__l.__data_);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139.__r_.__value_.__l.__data_);
      CoreML::Result::Result((_DWORD *)v133, 13);
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      goto LABEL_204;
    }
LABEL_57:
    v7 = v131 + 1;
    a1 = (uint64_t **)v132;
    if (v131 + 1 == v130)
      goto LABEL_58;
  }
  v31 = 8 * v30;
  while (1)
  {
    v32 = *v29;
    if (v137 == (_BYTE *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v10, *v29))break;
    ++v29;
    v31 -= 8;
    if (!v31)
      goto LABEL_49;
  }
  v39 = *(__int128 **)(v11 + 112);
  if (*((char *)v39 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v142, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
  }
  else
  {
    v40 = *v39;
    v142.__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v40;
  }
  v48 = std::string::insert(&v142, 0, "Layer '");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v143.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&v143, "' consumes an input named '");
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v146.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v32 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v141, (const std::string::value_type *)*v32, (std::string::size_type)v32[1]);
  }
  else
  {
    v52 = *(_OWORD *)v32;
    v141.__r_.__value_.__r.__words[2] = (std::string::size_type)v32[2];
    *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v52;
  }
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v141;
  else
    v53 = (std::string *)v141.__r_.__value_.__r.__words[0];
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
  else
    v54 = v141.__r_.__value_.__l.__size_;
  v55 = std::string::append(&v146, (const std::string::value_type *)v53, v54);
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  v147.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v57 = std::string::append(&v147, "' which is not present in this network.");
  v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v144.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v147.__r_.__value_.__l.__data_);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__r_.__value_.__l.__data_);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  CoreML::Result::Result((_DWORD *)v133, 13);
LABEL_204:
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
LABEL_206:
  if (SHIBYTE(v150) < 0)
    operator delete((void *)v149);
}

void sub_2183B2774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  if (*(char *)(v57 - 89) < 0)
    operator delete(*(void **)(v57 - 112));
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkShaper::~NeuralNetworkShaper(CoreML::NeuralNetworkShaper *this)
{
  std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

uint64_t **std::__tree<std::string>::__assign_unique<std::string const*>(uint64_t **result, std::string *a2, std::string *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v10 = result;
    v11 = v8;
    v12 = v8;
    if (v8)
    {
      v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<std::string>::__node_assign_unique(v5, a2, (uint64_t)v8);
        if ((v9 & 1) != 0)
        {
          v8 = v11;
          v12 = v11;
          if (!v11)
          {
            ++a2;
            break;
          }
          v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          v8 = v12;
        }
        ++a2;
        if (!v8)
          break;
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    result = (uint64_t **)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)a2);
    ++a2;
  }
  return result;
}

void sub_2183B2B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__node_assign_unique(uint64_t **a1, std::string *a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v9, (const void **)&a2->__r_.__value_.__l.__data_);
  if (*v6)
    return *v6;
  v7 = v6;
  std::string::operator=((std::string *)(a3 + 32), a2);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, (uint64_t *)a3);
  return (uint64_t *)a3;
}

void CoreML::validateTensorMessage(CoreML *this@<X0>, const CoreML::Specification::Tensor *a2@<X1>, CoreML::Result *a3@<X8>)
{
  int v5;
  int v6;
  __int128 *v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  void *v16;
  char v17;
  std::string v18;
  std::string v19;
  void *__p;
  __int128 v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v21 = 0uLL;
  v5 = *((_DWORD *)this + 4);
  if (v5 < 1)
    goto LABEL_4;
  v6 = *((_DWORD *)this + 9);
  if (v6 == v5)
  {
    if (v6 > 0)
    {
LABEL_4:
      CoreML::Result::Result(a3);
      goto LABEL_20;
    }
    v9 = (__int128 *)*((_QWORD *)a2 + 14);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v18.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    }
    v14 = std::string::insert(&v18, 0, "Tensor in layer '");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v19, "': rank must be positive");
  }
  else
  {
    v7 = (__int128 *)*((_QWORD *)a2 + 14);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      v18.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
    }
    v11 = std::string::insert(&v18, 0, "Tensor in layer '");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v19, "': rank must match the length of dimValue");
  }
  v16 = (void *)v13->__r_.__value_.__r.__words[0];
  v22[0] = v13->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  v17 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  __p = v16;
  *(_QWORD *)&v21 = v22[0];
  *(_QWORD *)((char *)&v21 + 7) = *(_QWORD *)((char *)v22 + 7);
  HIBYTE(v21) = v17;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  CoreML::Result::Result(a3, 13);
LABEL_20:
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_2183B2DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,CoreML::ShapeConstraint>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<int>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<int>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t _GLOBAL__sub_I_NeuralNetworkValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::ErrorCodeToString@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xA)
    v2 = "Unknown error";
  else
    v2 = off_24D93D5A8[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t _GLOBAL__sub_I_TuriErrorCode_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *CoreML::TreeEnsembleBase::TreeEnsembleBase(_QWORD *a1, const CoreML::Model *a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  CoreML::Specification::TreeEnsembleClassifier *v8;
  CoreML::Specification::TreeEnsembleParameters *v9;

  v5 = CoreML::Model::Model(a1, a2);
  *v5 = &off_24D93D610;
  v5[4] = 0;
  v5[3] = v5 + 4;
  v5[5] = 0;
  v6 = v5[1];
  v7 = *(_DWORD *)(v6 + 44);
  if (a3)
  {
    if (v7 == 402)
    {
      v8 = *(CoreML::Specification::TreeEnsembleClassifier **)(v6 + 32);
    }
    else
    {
      CoreML::Specification::Model::clear_Type(v5[1]);
      *(_DWORD *)(v6 + 44) = 402;
      v8 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
      CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v8);
      *(_QWORD *)(v6 + 32) = v8;
    }
    v9 = (CoreML::Specification::TreeEnsembleParameters *)*((_QWORD *)v8 + 2);
    if (!v9)
    {
LABEL_11:
      v9 = (CoreML::Specification::TreeEnsembleParameters *)operator new();
      CoreML::Specification::TreeEnsembleParameters::TreeEnsembleParameters(v9);
      *((_QWORD *)v8 + 2) = v9;
    }
  }
  else
  {
    if (v7 == 302)
    {
      v8 = *(CoreML::Specification::TreeEnsembleClassifier **)(v6 + 32);
    }
    else
    {
      CoreML::Specification::Model::clear_Type(v5[1]);
      *(_DWORD *)(v6 + 44) = 302;
      v8 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
      CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v8);
      *(_QWORD *)(v6 + 32) = v8;
    }
    v9 = (CoreML::Specification::TreeEnsembleParameters *)*((_QWORD *)v8 + 2);
    if (!v9)
      goto LABEL_11;
  }
  a1[6] = v9;
  return a1;
}

void sub_2183B3120(_Unwind_Exception *a1)
{
  CoreML::Model *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  MEMORY[0x219A19A08](v4, 0x10A1C40CFA7A0FDLL);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v2, *((_QWORD **)v1 + 4));
  CoreML::Model::~Model(v1);
  _Unwind_Resume(a1);
}

_QWORD *CoreML::TreeEnsembleClassifier::TreeEnsembleClassifier(_QWORD *a1, const std::string *a2, const std::string *a3, const std::string *a4)
{
  uint64_t v7;
  CoreML::Specification::TreeEnsembleClassifier *v8;
  std::string **v9;
  std::string *v10;
  std::string **v11;
  uint64_t *v12;
  uint64_t v13;
  std::string **v14;
  std::string *v15;
  std::string **v16;
  uint64_t *v17;
  _BYTE v19[24];

  CoreML::Model::Model((CoreML::Model *)v19, a4);
  CoreML::TreeEnsembleBase::TreeEnsembleBase(a1, (const CoreML::Model *)v19, 1);
  CoreML::Model::~Model((CoreML::Model *)v19);
  *a1 = &off_24D93D640;
  v7 = a1[1];
  if (*(_DWORD *)(v7 + 44) == 402)
  {
    v8 = *(CoreML::Specification::TreeEnsembleClassifier **)(v7 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(a1[1]);
    *(_DWORD *)(v7 + 44) = 402;
    v8 = (CoreML::Specification::TreeEnsembleClassifier *)operator new();
    CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(v8);
    *(_QWORD *)(v7 + 32) = v8;
    v7 = a1[1];
  }
  a1[7] = v8;
  v9 = *(std::string ***)(v7 + 16);
  if (!v9)
  {
    v9 = (std::string **)operator new();
    CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v9);
    *(_QWORD *)(v7 + 16) = v9;
  }
  v12 = (uint64_t *)v9[11];
  v11 = v9 + 11;
  v10 = (std::string *)v12;
  if (v12 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)a2);
  else
    std::string::operator=(v10, a2);
  v13 = a1[1];
  v14 = *(std::string ***)(v13 + 16);
  if (!v14)
  {
    v14 = (std::string **)operator new();
    CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v14);
    *(_QWORD *)(v13 + 16) = v14;
  }
  v17 = (uint64_t *)v14[12];
  v16 = v14 + 12;
  v15 = (std::string *)v17;
  if (v17 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v16, (uint64_t)a3);
  else
    std::string::operator=(v15, a3);
  return a1;
}

void sub_2183B3300(_Unwind_Exception *a1)
{
  CoreML::TreeEnsembleBase *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C40FD9EAC30);
  CoreML::TreeEnsembleBase::~TreeEnsembleBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembleBase::~TreeEnsembleBase(CoreML::TreeEnsembleBase *this)
{
  *(_QWORD *)this = &off_24D93D610;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  CoreML::Model::~Model(this);
}

{
  *(_QWORD *)this = &off_24D93D610;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  CoreML::Model::~Model(this);
}

{
  *(_QWORD *)this = &off_24D93D610;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  CoreML::Model::~Model(this);
  JUMPOUT(0x219A19A08);
}

_QWORD *CoreML::TreeEnsembleRegressor::TreeEnsembleRegressor(_QWORD *a1, const std::string *a2, const std::string *a3)
{
  uint64_t v5;
  CoreML::Specification::TreeEnsembleRegressor *v6;
  std::string **v7;
  std::string *v8;
  std::string **v9;
  uint64_t *v10;
  _BYTE v12[24];

  CoreML::Model::Model((CoreML::Model *)v12, a3);
  CoreML::TreeEnsembleBase::TreeEnsembleBase(a1, (const CoreML::Model *)v12, 0);
  CoreML::Model::~Model((CoreML::Model *)v12);
  *a1 = &off_24D93D670;
  v5 = a1[1];
  if (*(_DWORD *)(v5 + 44) == 302)
  {
    v6 = *(CoreML::Specification::TreeEnsembleRegressor **)(v5 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(a1[1]);
    *(_DWORD *)(v5 + 44) = 302;
    v6 = (CoreML::Specification::TreeEnsembleRegressor *)operator new();
    CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(v6);
    *(_QWORD *)(v5 + 32) = v6;
    v5 = a1[1];
  }
  a1[7] = v6;
  v7 = *(std::string ***)(v5 + 16);
  if (!v7)
  {
    v7 = (std::string **)operator new();
    CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v7);
    *(_QWORD *)(v5 + 16) = v7;
  }
  v10 = (uint64_t *)v7[11];
  v9 = v7 + 11;
  v8 = (std::string *)v10;
  if (v10 == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)a2);
  else
    std::string::operator=(v8, a2);
  return a1;
}

void sub_2183B34AC(_Unwind_Exception *a1)
{
  CoreML::TreeEnsembleBase *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C40FD9EAC30);
  CoreML::TreeEnsembleBase::~TreeEnsembleBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembleRegressor::~TreeEnsembleRegressor(CoreML::TreeEnsembleRegressor *this)
{
  *(_QWORD *)this = &off_24D93D610;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  CoreML::Model::~Model(this);
}

{
  *(_QWORD *)this = &off_24D93D610;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  CoreML::Model::~Model(this);
  JUMPOUT(0x219A19A08);
}

void CoreML::TreeEnsembleClassifier::~TreeEnsembleClassifier(CoreML::TreeEnsembleClassifier *this)
{
  *(_QWORD *)this = &off_24D93D610;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  CoreML::Model::~Model(this);
}

{
  *(_QWORD *)this = &off_24D93D610;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  CoreML::Model::~Model(this);
  JUMPOUT(0x219A19A08);
}

void CoreML::TreeEnsembleBase::setDefaultPredictionValue(CoreML::TreeEnsembleBase *this, double a2)
{
  signed int v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = 0;
  v4 = *((_QWORD *)this + 6);
  *(_DWORD *)(v4 + 40) = 0;
  v5 = (unsigned int *)(v4 + 40);
  v6 = v4;
  if (!*(_DWORD *)(v4 + 44))
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v5, 1);
    v3 = *v5;
    v6 = *((_QWORD *)this + 6);
  }
  v8 = *(_QWORD *)(v4 + 48);
  *(_DWORD *)(v4 + 40) = v3 + 1;
  *(double *)(v8 + 8 * v3 + 8) = a2;
  *(_QWORD *)(v6 + 64) = 1;
}

void CoreML::TreeEnsembleBase::setDefaultPredictionValue(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  signed int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 40) = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    v12 = *a2;
  }
  else
  {
    do
    {
      v7 = *v3;
      v8 = *(_QWORD *)(a1 + 48);
      v10 = (unsigned int *)(v8 + 40);
      v9 = *(_DWORD *)(v8 + 40);
      if (v9 == *(_DWORD *)(v8 + 44))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve(v10, v9 + 1);
        v9 = *v10;
      }
      v11 = *(_QWORD *)(v8 + 48);
      *(_DWORD *)(v8 + 40) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 8) = v7;
      ++v3;
    }
    while (v3 != v4);
    v2 = *(_QWORD *)(a1 + 48);
    v3 = *a2;
    v12 = a2[1];
  }
  *(_QWORD *)(v2 + 64) = v12 - v3;
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *CoreML::TreeEnsembleBase::setupBranchNode(CoreML::TreeEnsembleBase *a1, unint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, double a8)
{
  CoreML::Specification::TreeEnsembleParameters_TreeNode *result;

  result = CoreML::TreeEnsembleBase::_getNode(a1, a2, a3, 1);
  *((_QWORD *)result + 8) = a4;
  *((_DWORD *)result + 14) = a5;
  *((double *)result + 9) = a8;
  *((_QWORD *)result + 10) = a6;
  *((_QWORD *)result + 11) = a7;
  return result;
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *CoreML::TreeEnsembleBase::_getNode(CoreML::TreeEnsembleBase *this, unint64_t a2, unint64_t a3, int a4)
{
  char *v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  CoreML::Specification::TreeEnsembleParameters_TreeNode *v10;
  uint64_t **v11;
  uint64_t v12;
  int v13;
  _QWORD *v15;
  _QWORD *v16;
  std::logic_error *v17;
  _QWORD *v18;
  _QWORD *v19;
  std::logic_error *exception;
  std::string v21;
  unint64_t v22[2];
  int v23;

  v6 = (char *)*((_QWORD *)this + 4);
  v7 = (_QWORD *)((char *)this + 32);
  if (v6)
  {
    v8 = (char *)this + 32;
    do
    {
      v9 = *((_QWORD *)v6 + 4);
      if (v9 >= a2)
      {
        if (v9 <= a2)
        {
          if (*((_QWORD *)v6 + 5) < a3)
            v6 += 8;
          else
            v8 = v6;
        }
        else
        {
          v8 = v6;
        }
      }
      else
      {
        v6 += 8;
      }
      v6 = *(char **)v6;
    }
    while (v6);
    if (v8 != (char *)this + 32)
    {
      if (*((_QWORD *)v8 + 4) == a2 && *((_QWORD *)v8 + 5) == a3)
      {
        if (a4)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Setup routine called multiple times for treeId=", 47);
          v18 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", nodeID=", 9);
          v19 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)".", 1);
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          std::logic_error::logic_error(exception, &v21);
          __cxa_throw(exception, MEMORY[0x24BEDB720], (void (*)(void *))MEMORY[0x24BEDAAC0]);
        }
        return *(CoreML::Specification::TreeEnsembleParameters_TreeNode **)(*(_QWORD *)(*((_QWORD *)this + 6) + 32)
                                                                          + 8 * *((int *)v8 + 12)
                                                                          + 8);
      }
      v7 = v8;
    }
  }
  if ((a4 & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Setup routine not called yet for node with treeId=", 50);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", nodeID=", 9);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)".", 1);
    v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(v17, &v21);
    __cxa_throw(v17, MEMORY[0x24BEDB720], (void (*)(void *))MEMORY[0x24BEDAAC0]);
  }
  v11 = (uint64_t **)((char *)this + 24);
  v12 = *((_QWORD *)this + 6);
  v13 = *(_DWORD *)(v12 + 24);
  v10 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v12 + 16));
  *((_QWORD *)v10 + 5) = a2;
  *((_QWORD *)v10 + 6) = a3;
  v22[0] = a2;
  v22[1] = a3;
  v23 = v13;
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,int>>(v11, v7, v22, (uint64_t)v22);
  return v10;
}

void sub_2183B3A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *CoreML::TreeEnsembleBase::setMissingValueBehavior(CoreML::TreeEnsembleBase *this, unint64_t a2, unint64_t a3, char a4)
{
  CoreML::Specification::TreeEnsembleParameters_TreeNode *result;

  result = CoreML::TreeEnsembleBase::_getNode(this, a2, a3, 0);
  *((_BYTE *)result + 60) = a4;
  return result;
}

double CoreML::TreeEnsembleBase::setupLeafNode(CoreML::TreeEnsembleBase *a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  CoreML::Specification::TreeEnsembleParameters_TreeNode *Node;
  double result;
  CoreML::Specification::TreeEnsembleParameters_TreeNode *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *v13;

  Node = CoreML::TreeEnsembleBase::_getNode(a1, a2, a3, 1);
  v7 = Node;
  *((_DWORD *)Node + 14) = 6;
  v8 = *((unsigned int *)Node + 6);
  if ((int)v8 >= 1)
  {
    v9 = (uint64_t *)(*((_QWORD *)Node + 4) + 8);
    do
    {
      v10 = *v9++;
      CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::Clear(v10);
      --v8;
    }
    while (v8);
    *((_DWORD *)v7 + 6) = 0;
  }
  v11 = *a4;
  v12 = a4[1];
  if (*a4 != v12)
  {
    do
    {
      v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::TypeHandler>((CoreML::Specification::TreeEnsembleParameters_TreeNode *)((char *)v7 + 16));
      *((_QWORD *)v13 + 2) = *(_QWORD *)v11;
      result = *(double *)(v11 + 8);
      *((double *)v13 + 3) = result;
      v11 += 16;
    }
    while (v11 != v12);
  }
  return result;
}

void CoreML::TreeEnsembleBase::finish(CoreML::TreeEnsembles **this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(this[1], &v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t CoreML::TreeEnsembleClassifier::setOutputClassList(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::StringVector *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _tc_google::protobuf::Arena **v13;
  int *v14;
  uint64_t v15;
  int v16;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 44) == 402)
  {
    v5 = *(_QWORD *)(v4 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v4 + 44) = 402;
    v5 = operator new();
    CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier((CoreML::Specification::TreeEnsembleClassifier *)v5);
    *(_QWORD *)(v4 + 32) = v5;
  }
  if (*(_DWORD *)(v5 + 44) == 100)
  {
    v6 = *(CoreML::Specification::StringVector **)(v5 + 32);
  }
  else
  {
    CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v5);
    *(_DWORD *)(v5 + 44) = 100;
    v6 = (CoreML::Specification::StringVector *)operator new();
    CoreML::Specification::StringVector::StringVector(v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)v6 + 16);
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v10 + 44) == 402)
      {
        v11 = *(_QWORD *)(v10 + 32);
      }
      else
      {
        CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
        *(_DWORD *)(v10 + 44) = 402;
        v11 = operator new();
        CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier((CoreML::Specification::TreeEnsembleClassifier *)v11);
        *(_QWORD *)(v10 + 32) = v11;
      }
      if (*(_DWORD *)(v11 + 44) == 100)
      {
        v12 = *(_QWORD *)(v11 + 32);
      }
      else
      {
        CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v11);
        *(_DWORD *)(v11 + 44) = 100;
        v12 = operator new();
        CoreML::Specification::StringVector::StringVector((CoreML::Specification::StringVector *)v12);
        *(_QWORD *)(v11 + 32) = v12;
      }
      v13 = (_tc_google::protobuf::Arena **)(v12 + 16);
      v14 = *(int **)(v12 + 32);
      if (!v14)
        break;
      v15 = *(int *)(v12 + 24);
      v16 = *v14;
      if ((int)v15 >= *v14)
      {
        if (v16 == *(_DWORD *)(v12 + 28))
        {
LABEL_20:
          _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v12 + 16), v16 + 1);
          v14 = *(int **)(v12 + 32);
          v16 = *v14;
        }
        *v14 = v16 + 1;
        v18 = *v13;
        if (*v13)
        {
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
          _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
        }
        else
        {
          Aligned = (std::string *)operator new();
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
        }
        v19 = *(_QWORD *)(v12 + 32);
        v20 = *(int *)(v12 + 24);
        *(_DWORD *)(v12 + 24) = v20 + 1;
        *(_QWORD *)(v19 + 8 * v20 + 8) = Aligned;
        goto LABEL_25;
      }
      *(_DWORD *)(v12 + 24) = v15 + 1;
      Aligned = *(std::string **)&v14[2 * v15 + 2];
LABEL_25:
      result = (uint64_t)std::string::operator=(Aligned, (const std::string *)(*a2 + v8));
      ++v9;
      v8 += 24;
      if (v9 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3))
        return result;
    }
    v16 = *(_DWORD *)(v12 + 28);
    goto LABEL_20;
  }
  return result;
}

void sub_2183B3E54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

void CoreML::TreeEnsembleClassifier::setOutputClassList(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::Int64Vector *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v4 + 44) == 402)
  {
    v5 = *(_QWORD *)(v4 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v4 + 44) = 402;
    v5 = operator new();
    CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier((CoreML::Specification::TreeEnsembleClassifier *)v5);
    *(_QWORD *)(v4 + 32) = v5;
  }
  if (*(_DWORD *)(v5 + 44) == 101)
  {
    v6 = *(CoreML::Specification::Int64Vector **)(v5 + 32);
  }
  else
  {
    CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v5);
    *(_DWORD *)(v5 + 44) = 101;
    v6 = (CoreML::Specification::Int64Vector *)operator new();
    CoreML::Specification::Int64Vector::Int64Vector(v6);
    *(_QWORD *)(v5 + 32) = v6;
  }
  *((_DWORD *)v6 + 4) = 0;
  if (a2[1] != *a2)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a1 + 8);
      if (*(_DWORD *)(v8 + 44) == 402)
      {
        v9 = *(_QWORD *)(v8 + 32);
      }
      else
      {
        CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
        *(_DWORD *)(v8 + 44) = 402;
        v9 = operator new();
        CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier((CoreML::Specification::TreeEnsembleClassifier *)v9);
        *(_QWORD *)(v8 + 32) = v9;
      }
      if (*(_DWORD *)(v9 + 44) == 101)
      {
        v10 = *(_QWORD *)(v9 + 32);
      }
      else
      {
        CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v9);
        *(_DWORD *)(v9 + 44) = 101;
        v10 = operator new();
        CoreML::Specification::Int64Vector::Int64Vector((CoreML::Specification::Int64Vector *)v10);
        *(_QWORD *)(v9 + 32) = v10;
      }
      v11 = *a2;
      v12 = *(_QWORD *)(*a2 + 8 * v7);
      v13 = *(_DWORD *)(v10 + 16);
      if (v13 == *(_DWORD *)(v10 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v10 + 16), v13 + 1);
        v13 = *(_DWORD *)(v10 + 16);
        v11 = *a2;
      }
      v14 = *(_QWORD *)(v10 + 24);
      *(_DWORD *)(v10 + 16) = v13 + 1;
      *(_QWORD *)(v14 + 8 * v13 + 8) = v12;
      ++v7;
    }
    while (v7 < (a2[1] - v11) >> 3);
  }
}

void sub_2183B406C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::TreeEnsembleClassifier::setPostEvaluationTransform(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 56) + 24) = a2;
  return result;
}

CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    v2 = (int *)*((_QWORD *)this + 2);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *((int *)this + 2);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>);
  }
  else
  {
    Aligned = (CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *)operator new();
    CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(Aligned);
  }
  v7 = *((_QWORD *)this + 2);
  v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2183B41C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::TreeEnsembleParameters_TreeNode *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (int *)*((_QWORD *)this + 2);
  if (!v2)
  {
    v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    v2 = (int *)*((_QWORD *)this + 2);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *((int *)this + 2);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::TreeEnsembleParameters_TreeNode **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)this;
  if (*(_QWORD *)this)
  {
    CoreML::Specification::TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode>);
  }
  else
  {
    Aligned = (CoreML::Specification::TreeEnsembleParameters_TreeNode *)operator new();
    CoreML::Specification::TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(Aligned);
  }
  v7 = *((_QWORD *)this + 2);
  v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2183B42E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40FA1F30E5);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_OWORD *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,int>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,int>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,int>>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_equal<std::pair<unsigned long,unsigned long>>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t _GLOBAL__sub_I_TreeEnsemble_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::neural_net::external_float_array::external_float_array(_QWORD *this, const float *a2, uint64_t a3, const unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  const unint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *exception;
  void *v12;
  _QWORD v13[3];
  _QWORD v14[3];

  this[1] = a2;
  *this = &unk_24D93D6E8;
  this[2] = a3;
  this[3] = a4;
  this[4] = a5;
  if (a5)
  {
    v5 = 8 * a5;
    v6 = 8 * a5;
    v7 = a4;
    do
    {
      if (!*v7)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        memset(v14, 0, sizeof(v14));
        turi::TuriException::TuriException(exception, 6, v14);
      }
      ++v7;
      v6 -= 8;
    }
    while (v6);
    v8 = 1;
    do
    {
      v9 = *a4++;
      v8 *= (_DWORD)v9;
      v5 -= 8;
    }
    while (v5);
    v10 = v8;
  }
  else
  {
    v10 = 1;
  }
  if (v10 != a3)
  {
    v12 = __cxa_allocate_exception(0x40uLL);
    memset(v13, 0, sizeof(v13));
    turi::TuriException::TuriException(v12, 6, v13);
  }
  return this;
}

void sub_2183B46F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a14 < 0)
    operator delete(__p);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

_QWORD *turi::neural_net::float_buffer::float_buffer(_QWORD *a1, const void *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  void *exception;
  _QWORD v11[3];

  *a1 = &unk_24D93D728;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a3;
  a1[3] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (uint64_t *)a1[1];
  v5 = (uint64_t *)a1[2];
  if (v4 == v5)
  {
    v8 = 1;
  }
  else
  {
    v6 = 1;
    do
    {
      v7 = *v4++;
      v6 *= (_DWORD)v7;
    }
    while (v4 != v5);
    v8 = v6;
  }
  a1[5] = 0;
  a1[4] = v8;
  a1[6] = 0;
  a1[7] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(a1 + 5, a2, (uint64_t)a2 + 4 * v8, v8);
  if (!a1[4])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v11, 0, sizeof(v11));
    turi::TuriException::TuriException(exception, 5, v11);
  }
  return a1;
}

void sub_2183B4840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void *v17;
  int v18;
  void *v20;
  void *v21;

  if (a15 < 0)
    operator delete(__p);
  if (v18)
    __cxa_free_exception(v17);
  v20 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v15 + 48) = v20;
    operator delete(v20);
  }
  v21 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v15 + 16) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

__n128 turi::neural_net::float_buffer::float_buffer(_QWORD *a1, __n128 *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  void *exception;
  _QWORD v10[3];

  *a1 = &unk_24D93D728;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)a3;
  a1[3] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = (uint64_t *)a1[1];
  v4 = (uint64_t *)a1[2];
  if (v3 == v4)
  {
    v7 = 1;
  }
  else
  {
    v5 = 1;
    do
    {
      v6 = *v3++;
      v5 *= (_DWORD)v6;
    }
    while (v3 != v4);
    v7 = v5;
  }
  a1[5] = 0;
  a1[4] = v7;
  a1[6] = 0;
  a1[7] = 0;
  result = *a2;
  *(__n128 *)(a1 + 5) = *a2;
  a1[7] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  if (a1[4] != (uint64_t)(a1[6] - a1[5]) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v10, 0, sizeof(v10));
    turi::TuriException::TuriException(exception, 5, v10);
  }
  return result;
}

void sub_2183B49B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;
  void *v20;
  void *v21;

  if (a17 < 0)
    operator delete(__p);
  if (v18)
    __cxa_free_exception(v17);
  v20 = *a9;
  if (*a9)
  {
    *(_QWORD *)(a11 + 48) = v20;
    operator delete(v20);
  }
  v21 = *a10;
  if (*a10)
  {
    *(_QWORD *)(a11 + 16) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *turi::neural_net::shared_float_array::shared_float_array(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *exception;
  void *v17;
  void *v18;
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];

  *(_OWORD *)(a1 + 1) = *(_OWORD *)a2;
  v6 = a1 + 1;
  *a1 = &unk_24D9175B8;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  a1[3] = a3;
  a1[4] = a4;
  a1[5] = a5;
  if (a5)
  {
    v7 = 8 * a5;
    v8 = 1;
    do
    {
      v9 = *a4++;
      v8 *= (_DWORD)v9;
      v7 -= 8;
    }
    while (v7);
    v10 = v8;
  }
  else
  {
    v10 = 1;
  }
  a1[6] = v10;
  if (v10 + a3 > (unint64_t)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 24))(a1[1]))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v21, 0, sizeof(v21));
    turi::TuriException::TuriException(exception, 6, v21);
  }
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  v12 = a1[4];
  if (v11 > v12)
  {
    v17 = __cxa_allocate_exception(0x40uLL);
    memset(v20, 0, sizeof(v20));
    turi::TuriException::TuriException(v17, 6, v20);
  }
  v13 = a1[5];
  v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 32))(a1[1]);
  if (v12 + 8 * v13 > v14 + 8 * (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6))
  {
    v18 = __cxa_allocate_exception(0x40uLL);
    memset(v19, 0, sizeof(v19));
    turi::TuriException::TuriException(v18, 6, v19);
  }
  return a1;
}

void sub_2183B4BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v28;
  int v29;

  if (a15 < 0)
    operator delete(__p);
  if (v29)
    __cxa_free_exception(v28);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void turi::neural_net::shared_float_array::default_value(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v9[2];

  if ((v3 & 1) == 0
  {
    v7 = (_QWORD *)operator new();
    v8 = operator new(0x28uLL);
    v8[2] = 0;
    v8[3] = &unk_24D917860;
    *v8 = &unk_24D917810;
    v8[1] = 0;
    *((_DWORD *)v8 + 8) = 0;
    *v7 = v8 + 3;
    v7[1] = v8;
    v9[0] = 0;
    v9[1] = 0;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v9);
    turi::neural_net::shared_float_array::default_value(void)::singleton = (uint64_t)v7;
  }
  v4 = *(_QWORD *)(turi::neural_net::shared_float_array::default_value(void)::singleton + 8);
  *a1 = *(_QWORD *)turi::neural_net::shared_float_array::default_value(void)::singleton;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_2183B4D2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

_QWORD *turi::neural_net::deferred_float_array::deferred_float_array(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  *result = &off_24D93D768;
  result[1] = v3;
  *a2 = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  *((_OWORD *)result + 1) = *(_OWORD *)a3;
  result[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (uint64_t *)result[2];
  v5 = (uint64_t *)result[3];
  if (v4 == v5)
  {
    v8 = 1;
  }
  else
  {
    v6 = 1;
    do
    {
      v7 = *v4++;
      v6 *= (_DWORD)v7;
    }
    while (v4 != v5);
    v8 = v6;
  }
  result[5] = v8;
  return result;
}

uint64_t turi::neural_net::deferred_float_array::data(std::__assoc_sub_state **this)
{
  uint64_t v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  uint64_t v5;
  std::__assoc_sub_state *v6;
  std::__assoc_sub_state *v7;
  const void *v8;
  void *exception;
  void *v11;
  void *v12;
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];

  std::__assoc_state<turi::neural_net::shared_float_array>::copy(this[1]);
  v3 = v2;
  v4 = this[5];
  if (v4 != (std::__assoc_sub_state *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v15, 0, sizeof(v15));
    turi::TuriException::TuriException(exception, 5, v15);
  }
  v5 = (char *)this[3] - (char *)this[2];
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) != v5 >> 3)
  {
    v11 = __cxa_allocate_exception(0x40uLL);
    memset(v14, 0, sizeof(v14));
    turi::TuriException::TuriException(v11, 6, v14);
  }
  v7 = this[2];
  v6 = this[3];
  v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  if (memcmp(v7, v8, (char *)v6 - (char *)v7))
  {
    v12 = __cxa_allocate_exception(0x40uLL);
    memset(v13, 0, sizeof(v13));
    turi::TuriException::TuriException(v12, 6, v13);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
}

void sub_2183B4F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  char v28;

  if (a15 < 0)
    operator delete(__p);
  if ((v28 & 1) != 0)
    __cxa_free_exception(v27);
  _Unwind_Resume(exception_object);
}

void turi::neural_net::deferred_float_array::~deferred_float_array(turi::neural_net::deferred_float_array *this)
{
  void *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)this = &off_24D93D768;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  v3 = (unint64_t *)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = v3 + 1;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      (*(void (**)(unint64_t *))(*v3 + 16))(v3);
  }
}

{
  void *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)this = &off_24D93D768;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  v3 = (unint64_t *)*((_QWORD *)this + 1);
  if (v3)
  {
    v4 = v3 + 1;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      (*(void (**)(unint64_t *))(*v3 + 16))(v3);
  }
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::deferred_float_array::dim(turi::neural_net::deferred_float_array *this)
{
  return (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
}

void turi::neural_net::external_float_array::~external_float_array(turi::neural_net::external_float_array *this)
{
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::external_float_array::shape(turi::neural_net::external_float_array *this)
{
  return *((_QWORD *)this + 3);
}

void turi::neural_net::float_buffer::~float_buffer(turi::neural_net::float_buffer *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D93D728;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_24D93D728;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::float_buffer::dim(turi::neural_net::float_buffer *this)
{
  return (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
}

void std::__assoc_state<turi::neural_net::shared_float_array>::copy(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_2183B51F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_float_array_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void CoreML::validateInt64Parameter(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, CoreML::Result *a4@<X8>)
{
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  uint64_t v51;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  int v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  int v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  int v79;
  const std::string::value_type *v80;
  std::string::size_type v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  __int128 v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  __int128 v90;
  std::string::size_type v91;

  v6 = *(_QWORD *)(a2 + 16);
  if (!a3 || v6 > 0)
  {
    v18 = *(_DWORD *)(a2 + 36);
    if (v18 == 10)
    {
      v23 = *(_QWORD *)(a2 + 24);
      v24 = *(_QWORD *)(v23 + 16);
      if (v24 <= 0 && a3 != 0)
      {
        std::to_string(&v86, v24);
        v40 = std::string::insert(&v86, 0, "Non-positive min value (");
        v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v42 = std::string::append(&v87, ") in Allowed Value Range for '");
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v44 = *(char *)(a1 + 23);
        if (v44 >= 0)
          v45 = (const std::string::value_type *)a1;
        else
          v45 = *(const std::string::value_type **)a1;
        if (v44 >= 0)
          v46 = *(unsigned __int8 *)(a1 + 23);
        else
          v46 = *(_QWORD *)(a1 + 8);
        v47 = std::string::append(&v88, v45, v46);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = std::string::append(&v89, "' is not allowed.");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v91 = v49->__r_.__value_.__r.__words[2];
        v90 = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        goto LABEL_17;
      }
      v26 = *(_QWORD *)(v23 + 24);
      if (v26 <= 0 && a3 != 0)
      {
        std::to_string(&v86, v26);
        v64 = std::string::insert(&v86, 0, "Non-positive max value (");
        v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        v66 = std::string::append(&v87, ") in Allowed Value Range for '");
        v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        v68 = *(char *)(a1 + 23);
        if (v68 >= 0)
          v69 = (const std::string::value_type *)a1;
        else
          v69 = *(const std::string::value_type **)a1;
        if (v68 >= 0)
          v70 = *(unsigned __int8 *)(a1 + 23);
        else
          v70 = *(_QWORD *)(a1 + 8);
        v71 = std::string::append(&v88, v69, v70);
        v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        v73 = std::string::append(&v89, "' is not allowed.");
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v91 = v73->__r_.__value_.__r.__words[2];
        v90 = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        goto LABEL_17;
      }
      if (v6 < v24 || v6 > v26)
      {
        std::to_string(&v86, v6);
        v29 = std::string::insert(&v86, 0, "Specified Default Value (");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        v31 = std::string::append(&v87, ") out of Allowed Value Range for '");
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        v33 = *(char *)(a1 + 23);
        if (v33 >= 0)
          v34 = (const std::string::value_type *)a1;
        else
          v34 = *(const std::string::value_type **)a1;
        if (v33 >= 0)
          v35 = *(unsigned __int8 *)(a1 + 23);
        else
          v35 = *(_QWORD *)(a1 + 8);
        v36 = std::string::append(&v88, v34, v35);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = std::string::append(&v89, "'");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v91 = v38->__r_.__value_.__r.__words[2];
        v90 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v86.__r_.__value_.__l.__data_);
        goto LABEL_17;
      }
    }
    else if (v18 == 11)
    {
      v19 = *(_QWORD *)(a2 + 24);
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
        v21 = (uint64_t *)(v20 + 8);
      else
        v21 = 0;
      if (v20)
        v22 = v20 + 8 + 8 * *(int *)(v19 + 16);
      else
        v22 = 0;
      while (v21 != (uint64_t *)v22)
      {
        v51 = *v21;
        if (*v21 == v6)
          goto LABEL_80;
        if (v51 <= 0 && a3 != 0)
        {
          std::to_string(&v86, v51);
          v75 = std::string::insert(&v86, 0, "Non-positive value (");
          v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
          v87.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v76;
          v75->__r_.__value_.__l.__size_ = 0;
          v75->__r_.__value_.__r.__words[2] = 0;
          v75->__r_.__value_.__r.__words[0] = 0;
          v77 = std::string::append(&v87, ") in Allowed Values Set for '");
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v88.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          v79 = *(char *)(a1 + 23);
          if (v79 >= 0)
            v80 = (const std::string::value_type *)a1;
          else
            v80 = *(const std::string::value_type **)a1;
          if (v79 >= 0)
            v81 = *(unsigned __int8 *)(a1 + 23);
          else
            v81 = *(_QWORD *)(a1 + 8);
          v82 = std::string::append(&v88, v80, v81);
          v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v89.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          v84 = std::string::append(&v89, "' is not allowed.");
          v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
          v91 = v84->__r_.__value_.__r.__words[2];
          v90 = v85;
          v84->__r_.__value_.__l.__size_ = 0;
          v84->__r_.__value_.__r.__words[2] = 0;
          v84->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v89.__r_.__value_.__l.__data_);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v88.__r_.__value_.__l.__data_);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v87.__r_.__value_.__l.__data_);
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v86.__r_.__value_.__l.__data_);
          goto LABEL_17;
        }
        ++v21;
      }
      std::to_string(&v86, v6);
      v53 = std::string::insert(&v86, 0, "Specified Default Value (");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      v55 = std::string::append(&v87, ") not found in Allowed Values Set for '");
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      v57 = *(char *)(a1 + 23);
      if (v57 >= 0)
        v58 = (const std::string::value_type *)a1;
      else
        v58 = *(const std::string::value_type **)a1;
      if (v57 >= 0)
        v59 = *(unsigned __int8 *)(a1 + 23);
      else
        v59 = *(_QWORD *)(a1 + 8);
      v60 = std::string::append(&v88, v58, v59);
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      v62 = std::string::append(&v89, "'");
      v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v91 = v62->__r_.__value_.__r.__words[2];
      v90 = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
LABEL_80:
    CoreML::Result::Result(a4);
    return;
  }
  std::to_string(&v86, v6);
  v7 = std::string::insert(&v86, 0, "Default Value (");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v87, ") for '");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = *(char *)(a1 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a1;
  else
    v12 = *(const std::string::value_type **)a1;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a1 + 23);
  else
    v13 = *(_QWORD *)(a1 + 8);
  v14 = std::string::append(&v88, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v89.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v89, "' expected to be a positive value.");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v91 = v16->__r_.__value_.__r.__words[2];
  v90 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
LABEL_17:
  CoreML::Result::Result(a4, 15);
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
}

void sub_2183B59B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  _Unwind_Resume(exception_object);
}

void CoreML::validateDoubleParameter(uint64_t a1@<X0>, uint64_t a2@<X1>, CoreML::Result *a3@<X8>)
{
  double v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  std::string::size_type v23;

  if (*(_DWORD *)(a2 + 36) == 10
    && ((v5 = *(double *)(a2 + 16), v6 = *(_QWORD *)(a2 + 24), v5 < *(double *)(v6 + 16)) || v5 > *(double *)(v6 + 24)))
  {
    std::to_string(&v18, v5);
    v7 = std::string::insert(&v18, 0, "Specified Default Value (");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v19, ") out of Allowed Value Range for '");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = *(char *)(a1 + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)a1;
    else
      v12 = *(const std::string::value_type **)a1;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 23);
    else
      v13 = *(_QWORD *)(a1 + 8);
    v14 = std::string::append(&v20, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v21, "'");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v23 = v16->__r_.__value_.__r.__words[2];
    v22 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    CoreML::Result::Result(a3, 15);
    if (SHIBYTE(v23) < 0)
      operator delete((void *)v22);
  }
  else
  {
    CoreML::Result::Result(a3);
  }
}

void sub_2183B5C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_ParameterValidator_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double CoreML::NeuralNetworkShaper::shapeConvolutionLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  CoreML::ShapeConstraint *v5;
  const CoreML::ShapeRange *v6;
  const CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  const CoreML::ShapeRange *v9;
  CoreML::Specification::ConvolutionLayerParams *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  double result;
  int v24;
  std::runtime_error *exception;
  int v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  CoreML::ShapeRange *v37;
  int v38;
  CoreML::ShapeRange *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CoreML::ShapeRange *v47;
  int v48;
  CoreML::ShapeRange *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CoreML::ShapeRange *v58;
  uint64_t v59;
  CoreML::ShapeRange *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CoreML::ShapeRange *v64;
  uint64_t v65;
  CoreML::ShapeRange *v66;
  uint64_t v67;
  uint64_t v68;
  signed int v69;
  int v70;
  CoreML::ShapeRange *v71;
  CoreML::ShapeRange *v72;
  uint64_t v73;
  CoreML::ShapeRange *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  CoreML::ShapeRange *v79;
  uint64_t v80;
  CoreML::ShapeRange *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  signed int v87;
  CoreML::ShapeRange *v88;
  CoreML::ShapeRange *v89;
  uint64_t v90;
  CoreML::ShapeRange *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  CoreML::ShapeRange *v96;
  uint64_t v97;
  CoreML::ShapeRange *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  signed int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111[2];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BOOL8 v116;
  uint64_t v117;

  v3 = this + 4;
  v114 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v114, (uint64_t)&std::piecewise_construct, (__int128 **)&v114)+ 7);
  v114 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v114, (uint64_t)&std::piecewise_construct, (__int128 **)&v114)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v6);
  v7 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v7);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v8);
  v9 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v9);
  if (*((_DWORD *)a2 + 35) == 100)
    v11 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v11 = CoreML::Specification::ConvolutionLayerParams::default_instance(v10);
  if (*((_BYTE *)v11 + 152))
  {
    v12 = v11[17];
  }
  else
  {
    v13 = v11[18];
    if (v13 <= 1)
      v13 = 1;
    v12 = v13 * v11[17];
  }
  CoreML::ShapeConstraint::setChannel(v4, (int)v12);
  if (*((_DWORD *)v11 + 4))
  {
    v14 = v11[3];
    v15 = *(_DWORD *)(v14 + 8);
    v16 = *(_DWORD *)(v14 + 16);
  }
  else
  {
    v16 = 3;
    v15 = 3;
  }
  if (*((_DWORD *)v11 + 10))
  {
    v17 = v11[6];
    v18 = *(_DWORD *)(v17 + 8);
    v19 = *(_DWORD *)(v17 + 16);
  }
  else
  {
    v19 = 1;
    v18 = 1;
  }
  if (*((_DWORD *)v11 + 16))
  {
    v20 = v11[9];
    v21 = *(_DWORD *)(v20 + 8);
    v22 = *(_DWORD *)(v20 + 16);
  }
  else
  {
    v22 = 1;
    v21 = 1;
  }
  CoreML::ShapeConstraint::setChannel(v5, v11[16]);
  if (*((_BYTE *)v11 + 152) && *((_DWORD *)v11 + 22) == 2)
  {
    CoreML::ShapeConstraint::setHeight(v5, *(_QWORD *)(v11[12] + 8));
    CoreML::ShapeConstraint::setWidth(v5, *(_QWORD *)(v11[12] + 16));
    return result;
  }
  v24 = *((_DWORD *)v11 + 43);
  switch(v24)
  {
    case 50:
      v26 = v21 * (v15 - 1);
      v27 = v22 * (v16 - 1);
      v28 = *(uint64_t **)(v11[20] + 16);
      if (!v28)
        v28 = &CoreML::Specification::_BorderAmounts_default_instance_;
      if (*((_DWORD *)v28 + 6))
      {
        v29 = v28[4];
        v31 = *(_QWORD *)(v29 + 8);
        v30 = *(_QWORD *)(v29 + 16);
        v32 = *(_DWORD *)(v31 + 16);
        v33 = *(_DWORD *)(v31 + 24);
        v104 = *(_DWORD *)(v30 + 24);
        v105 = *(_DWORD *)(v30 + 16);
      }
      else
      {
        v104 = 0;
        v105 = 0;
        v33 = 0;
        v32 = 0;
      }
      v36 = v26 + 1;
      v106 = v27 + 1;
      if (*((_BYTE *)v11 + 152))
      {
        v37 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        v38 = (int)(v32 + v33 + ~v26 + CoreML::ShapeRange::minimumValue(v37)) / v18;
        v39 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        v107 = CoreML::ShapeRange::maximum(v39);
        v108 = v40;
        v109 = CoreML::RangeValue::operator+(&v107, v33);
        v110 = v41;
        *(_QWORD *)&v111[0] = CoreML::RangeValue::operator+(&v109, v32);
        *((_QWORD *)&v111[0] + 1) = v42;
        v112 = CoreML::RangeValue::operator-(v111);
        v113 = v43;
        v114 = CoreML::RangeValue::operator/((CoreML::RangeValue *)&v112, v18);
        v115 = v44;
        v116 = CoreML::RangeValue::operator+(&v114, 1);
        v117 = v45;
        if ((v38 & 0x80000000) == 0)
          CoreML::ShapeConstraint::lowerBoundHeight(v4, (v38 + 1));
        CoreML::ShapeConstraint::upperBoundHeight(v4, (const CoreML::RangeValue *)&v116);
        v46 = CoreML::ShapeConstraint::heightRange(v4);
        CoreML::ShapeRange::operator-(v46, 1u, (uint64_t)&v107);
        CoreML::ShapeRange::operator*((uint64_t)&v107, v18, (uint64_t)&v109);
        CoreML::ShapeRange::operator+((uint64_t)&v109, v26 + 1, (uint64_t)v111);
        CoreML::ShapeRange::operator-((uint64_t)v111, v32, (uint64_t)&v112);
        CoreML::ShapeRange::operator-((uint64_t)&v112, v33, (uint64_t)&v114);
        CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)&v114);
        v47 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
        v48 = (int)(v104 + v105 + ~v27 + CoreML::ShapeRange::minimumValue(v47)) / v19;
        v49 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
        v107 = CoreML::ShapeRange::maximum(v49);
        v108 = v50;
        v109 = CoreML::RangeValue::operator+(&v107, v105);
        v110 = v51;
        *(_QWORD *)&v111[0] = CoreML::RangeValue::operator+(&v109, v104);
        *((_QWORD *)&v111[0] + 1) = v52;
        v112 = CoreML::RangeValue::operator-(v111);
        v113 = v53;
        v114 = CoreML::RangeValue::operator/((CoreML::RangeValue *)&v112, v19);
        v115 = v54;
        v116 = CoreML::RangeValue::operator+(&v114, 1);
        v117 = v55;
        if ((v48 & 0x80000000) == 0)
          CoreML::ShapeConstraint::lowerBoundWidth(v4, (v48 + 1));
        CoreML::ShapeConstraint::upperBoundWidth(v4, (const CoreML::RangeValue *)&v116);
        v56 = CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeRange::operator-(v56, 1u, (uint64_t)&v107);
        CoreML::ShapeRange::operator*((uint64_t)&v107, v19, (uint64_t)&v109);
        CoreML::ShapeRange::operator+((uint64_t)&v109, v106, (uint64_t)v111);
        CoreML::ShapeRange::operator-((uint64_t)v111, v104, (uint64_t)&v112);
        CoreML::ShapeRange::operator-((uint64_t)&v112, v105, (uint64_t)&v114);
      }
      else
      {
        v69 = v32 + v33;
        v70 = v36 - (v32 + v33);
        if (v70 >= 1)
        {
          v71 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
          if (CoreML::ShapeRange::minimumValue(v71))
          {
            v72 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
            v73 = CoreML::ShapeRange::minimumValue(v72) - 1;
          }
          else
          {
            v73 = 0;
          }
          CoreML::ShapeConstraint::lowerBoundHeight(v4, v73 * v18 + v70);
          v74 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
          v109 = CoreML::ShapeRange::maximum(v74);
          v110 = v75;
          *(_QWORD *)&v111[0] = CoreML::RangeValue::operator-(&v109);
          *((_QWORD *)&v111[0] + 1) = v76;
          v112 = CoreML::RangeValue::operator*(v111);
          v113 = v77;
          v114 = CoreML::RangeValue::operator+(&v112);
          v115 = v78;
          v79 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
          v112 = CoreML::ShapeRange::maximum(v79);
          v113 = v80;
          if ((CoreML::RangeValue::isUnbound((CoreML::RangeValue *)&v112) & 1) == 0)
          {
            v81 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
            *(_QWORD *)&v111[0] = CoreML::ShapeRange::maximum(v81);
            *((_QWORD *)&v111[0] + 1) = v82;
            v83 = CoreML::RangeValue::value((CoreML::RangeValue *)v111);
            v84 = (v69 - v36) & 1;
            if (v69 < v36)
              v84 = -v84;
            if (v83 != -v84)
            {
              v114 = CoreML::RangeValue::operator+(&v114, 1);
              v115 = v85;
            }
          }
          CoreML::ShapeConstraint::upperBoundHeight(v4, (const CoreML::RangeValue *)&v114);
        }
        v86 = CoreML::ShapeConstraint::heightRange(v4);
        CoreML::ShapeRange::operator+(v86, v69 - v36, (uint64_t)v111);
        CoreML::ShapeRange::operator/(v111, v18, (uint64_t)&v112);
        CoreML::ShapeRange::operator+((uint64_t)&v112, 1u, (uint64_t)&v114);
        CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)&v114);
        v87 = v104 + v105;
        if ((int)(v106 - (v104 + v105)) >= 1)
        {
          v88 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
          if (CoreML::ShapeRange::minimumValue(v88))
          {
            v89 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
            v90 = CoreML::ShapeRange::minimumValue(v89) - 1;
          }
          else
          {
            v90 = 0;
          }
          CoreML::ShapeConstraint::lowerBoundWidth(v4, v90 * v19 + v106 - (v104 + v105));
          v91 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
          v109 = CoreML::ShapeRange::maximum(v91);
          v110 = v92;
          *(_QWORD *)&v111[0] = CoreML::RangeValue::operator-(&v109);
          *((_QWORD *)&v111[0] + 1) = v93;
          v112 = CoreML::RangeValue::operator*(v111);
          v113 = v94;
          v114 = CoreML::RangeValue::operator+(&v112);
          v115 = v95;
          v96 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
          v112 = CoreML::ShapeRange::maximum(v96);
          v113 = v97;
          if ((CoreML::RangeValue::isUnbound((CoreML::RangeValue *)&v112) & 1) == 0)
          {
            v98 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
            *(_QWORD *)&v111[0] = CoreML::ShapeRange::maximum(v98);
            *((_QWORD *)&v111[0] + 1) = v99;
            v100 = CoreML::RangeValue::value((CoreML::RangeValue *)v111);
            v101 = (v87 - v106) & 1;
            if (v87 < v106)
              v101 = -v101;
            if (v100 != -v101)
            {
              v114 = CoreML::RangeValue::operator+(&v114, 1);
              v115 = v102;
            }
          }
          CoreML::ShapeConstraint::upperBoundWidth(v4, (const CoreML::RangeValue *)&v114);
        }
        v103 = CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeRange::operator+(v103, v87 - v106, (uint64_t)v111);
        CoreML::ShapeRange::operator/(v111, v19, (uint64_t)&v112);
        CoreML::ShapeRange::operator+((uint64_t)&v112, 1u, (uint64_t)&v114);
      }
      return CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)&v114);
    case 51:
      if (!*((_BYTE *)v11 + 152))
      {
        v57 = CoreML::ShapeConstraint::heightRange(v4);
        CoreML::ShapeRange::operator-(v57, 1u, (uint64_t)v111);
        CoreML::ShapeRange::operator/((uint64_t)v111, v18, (uint64_t)&v112);
        CoreML::ShapeRange::operator+((uint64_t)&v112, 1u, (uint64_t)&v114);
        CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)&v114);
        v58 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        v59 = CoreML::ShapeRange::minimumValue(v58);
        CoreML::ShapeConstraint::lowerBoundHeight(v4, v59);
        v60 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        v112 = CoreML::ShapeRange::maximum(v60);
        v113 = v61;
        v114 = CoreML::RangeValue::operator*(&v112);
        v115 = v62;
        CoreML::ShapeConstraint::upperBoundHeight(v4, (const CoreML::RangeValue *)&v114);
        v63 = CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeRange::operator-(v63, 1u, (uint64_t)v111);
        CoreML::ShapeRange::operator/((uint64_t)v111, v19, (uint64_t)&v112);
        CoreML::ShapeRange::operator+((uint64_t)&v112, 1u, (uint64_t)&v114);
        CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)&v114);
        v64 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
        v65 = CoreML::ShapeRange::minimumValue(v64);
        CoreML::ShapeConstraint::lowerBoundWidth(v4, v65);
        v66 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
        v112 = CoreML::ShapeRange::maximum(v66);
        v113 = v67;
        v114 = CoreML::RangeValue::operator*(&v112);
        v115 = v68;
        return CoreML::ShapeConstraint::upperBoundWidth(v4, (const CoreML::RangeValue *)&v114);
      }
      v34 = CoreML::ShapeConstraint::heightRange(v4);
      CoreML::ShapeRange::operator*(v34, v18, (uint64_t)&v114);
      CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)&v114);
      v35 = CoreML::ShapeConstraint::widthRange(v4);
      CoreML::ShapeRange::operator*(v35, v19, (uint64_t)&v114);
      return CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)&v114);
    case 0:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Convolution padding type not set");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_2183B6520(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double CoreML::NeuralNetworkShaper::shapePoolingLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  turi::neural_net::float_scalar *v5;
  CoreML::ShapeRange *v6;
  CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  CoreML::ShapeRange *v9;
  const CoreML::ShapeRange *v10;
  const CoreML::ShapeRange *v11;
  const CoreML::ShapeRange *v12;
  const CoreML::ShapeRange *v13;
  const CoreML::ShapeRange *v14;
  CoreML::Specification::PoolingLayerParams *v15;
  double result;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::runtime_error *exception;
  signed int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  CoreML::ShapeRange *v43;
  uint64_t v44;
  signed int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  CoreML::ShapeRange *v49;
  uint64_t v50;
  CoreML::ShapeRange *v51;
  CoreML::ShapeRange *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  CoreML::ShapeRange *v56;
  CoreML::ShapeRange *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _BYTE v62[32];
  _BYTE v63[32];
  _BYTE v64[32];
  __int128 *v65[4];

  v3 = this + 4;
  v65[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v65[0], (uint64_t)&std::piecewise_construct, v65)+ 7);
  v65[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v65[0], (uint64_t)&std::piecewise_construct, v65)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v65);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v65);
  v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v65);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v65);
  v11 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeConstraint::updateChannelRange(v5, v11);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v12);
  v13 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v13);
  v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  result = CoreML::ShapeConstraint::updateChannelRange(v4, v14);
  if (*((_DWORD *)a2 + 35) == 120)
    v17 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v17 = CoreML::Specification::PoolingLayerParams::default_instance(v15);
  if (*((_DWORD *)v17 + 4))
  {
    v18 = v17[3];
    v19 = *(_DWORD *)(v18 + 8);
    v20 = *(_DWORD *)(v18 + 16);
  }
  else
  {
    v20 = 3;
    v19 = 3;
  }
  if (*((_DWORD *)v17 + 10))
  {
    v21 = v17[6];
    v22 = *(_DWORD *)(v21 + 8);
    v23 = *(_DWORD *)(v21 + 16);
  }
  else
  {
    v22 = 1;
    v23 = 1;
  }
  if (*((_BYTE *)v17 + 65))
  {
    CoreML::ShapeConstraint::setHeight(v5, 1uLL);
    CoreML::ShapeConstraint::setWidth(v5, 1uLL);
    return result;
  }
  v24 = *((_DWORD *)v17 + 21);
  if (v24 > 30)
  {
    if (v24 != 31)
    {
      if (v24 == 32)
      {
        v25 = v17[9];
        if (*(_DWORD *)(v25 + 16))
        {
          v26 = *(_QWORD *)(v25 + 24);
          v27 = *(_DWORD *)(v26 + 8);
          v28 = *(_DWORD *)(v26 + 16);
        }
        else
        {
          v28 = 0;
          v27 = 0;
        }
        if (v27 | v28)
        {
          v39 = CoreML::ShapeConstraint::minimumHeight(v4) - v19 + 2 * (v27 + v22) - 2;
          if (v39 < (int)(v27 + CoreML::ShapeConstraint::minimumHeight(v4)))
            v40 = 0;
          else
            v40 = -1;
        }
        else
        {
          v40 = 0;
        }
        v41 = CoreML::ShapeConstraint::heightRange(v4);
        CoreML::ShapeRange::operator+(v41, 2 * v27 - v19, (uint64_t)v62);
        CoreML::ShapeRange::divideAndRoundUp((CoreML::ShapeRange *)v62, v22, (uint64_t)v63);
        CoreML::ShapeRange::operator+((uint64_t)v63, 1u, (uint64_t)v64);
        CoreML::ShapeRange::operator+((uint64_t)v64, v40, (uint64_t)v65);
        CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v65);
        v42 = v19 - 2 * v27;
        if (v42 >= 1)
        {
          v43 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
          v44 = CoreML::ShapeRange::minimumValue(v43);
          CoreML::ShapeConstraint::lowerBoundHeight(v4, v44 + v42 - 1);
        }
        if (v27 | v28)
        {
          v45 = CoreML::ShapeConstraint::minimumWidth(v4) - v20 + 2 * (v28 + v23) - 2;
          if (v45 < (int)(v28 + CoreML::ShapeConstraint::minimumWidth(v4)))
            v46 = 0;
          else
            v46 = -1;
        }
        else
        {
          v46 = 0;
        }
        v47 = CoreML::ShapeConstraint::widthRange(v4);
        CoreML::ShapeRange::operator+(v47, 2 * v28 - v20, (uint64_t)v62);
        CoreML::ShapeRange::divideAndRoundUp((CoreML::ShapeRange *)v62, v23, (uint64_t)v63);
        CoreML::ShapeRange::operator+((uint64_t)v63, 1u, (uint64_t)v64);
        CoreML::ShapeRange::operator+((uint64_t)v64, v46, (uint64_t)v65);
        result = CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v65);
        v48 = v20 - 2 * v28;
        if (v48 >= 1)
        {
          v49 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
          v50 = CoreML::ShapeRange::minimumValue(v49);
          return CoreML::ShapeConstraint::lowerBoundHeight(v4, v50 + v48 - 1);
        }
      }
      return result;
    }
    v35 = CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeRange::operator-(v35, 1u, (uint64_t)v63);
    CoreML::ShapeRange::operator/((uint64_t)v63, v22, (uint64_t)v64);
    CoreML::ShapeRange::operator+((uint64_t)v64, 1u, (uint64_t)v65);
    CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v65);
    v36 = CoreML::ShapeConstraint::widthRange(v4);
    CoreML::ShapeRange::operator-(v36, 1u, (uint64_t)v63);
    v37 = v23;
LABEL_54:
    CoreML::ShapeRange::operator/((uint64_t)v63, v37, (uint64_t)v64);
    CoreML::ShapeRange::operator+((uint64_t)v64, 1u, (uint64_t)v65);
    return CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v65);
  }
  if (v24 == 30)
  {
    v29 = *(uint64_t **)(v17[9] + 16);
    if (!v29)
      v29 = &CoreML::Specification::_BorderAmounts_default_instance_;
    if (*((_DWORD *)v29 + 6))
    {
      v30 = v29[4];
      v32 = *(_QWORD *)(v30 + 8);
      v31 = *(_QWORD *)(v30 + 16);
      v61 = *(_DWORD *)(v31 + 16);
      v33 = *(_DWORD *)(v31 + 24);
      v34 = *(_DWORD *)(v32 + 24) + *(_DWORD *)(v32 + 16);
    }
    else
    {
      v61 = 0;
      v33 = 0;
      v34 = 0;
    }
    if (v19 - v34 <= 0)
    {
      v54 = v22;
    }
    else
    {
      v51 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      if (CoreML::ShapeRange::minimumValue(v51))
      {
        v52 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
        v53 = CoreML::ShapeRange::minimumValue(v52) - 1;
      }
      else
      {
        v53 = 0;
      }
      v54 = v22;
      CoreML::ShapeConstraint::lowerBoundHeight(v4, v53 * v22 + (v19 - v34));
    }
    v55 = CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeRange::operator+(v55, v34 - v19, (uint64_t)v63);
    CoreML::ShapeRange::operator/((uint64_t)v63, v54, (uint64_t)v64);
    CoreML::ShapeRange::operator+((uint64_t)v64, 1u, (uint64_t)v65);
    CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v65);
    if (v20 - (v33 + v61) <= 0)
    {
      v59 = v23;
    }
    else
    {
      v56 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      if (CoreML::ShapeRange::minimumValue(v56))
      {
        v57 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
        v58 = CoreML::ShapeRange::minimumValue(v57) - 1;
      }
      else
      {
        v58 = 0;
      }
      v59 = v23;
      CoreML::ShapeConstraint::lowerBoundWidth(v4, v58 * v23 + (v20 - (v33 + v61)));
    }
    v60 = CoreML::ShapeConstraint::widthRange(v4);
    CoreML::ShapeRange::operator+(v60, v33 + v61 - v20, (uint64_t)v63);
    v37 = v59;
    goto LABEL_54;
  }
  if (!v24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Pooling padding type not set");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_2183B6AD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double CoreML::NeuralNetworkShaper::shapeUnchanged(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  const CoreML::ShapeConstraint *v4;
  CoreML::ShapeConstraint *v5;
  const void **v7;

  v3 = this + 4;
  v7 = *(const void ***)(*((_QWORD *)a2 + 4) + 8);
  v4 = (const CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, v7, (uint64_t)&std::piecewise_construct, (__int128 **)&v7)+ 7);
  v7 = *(const void ***)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, v7, (uint64_t)&std::piecewise_construct, (__int128 **)&v7)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  CoreML::ShapeConstraint::copyFrom(v5, v4);
  return CoreML::ShapeConstraint::copyFrom(v4, v5);
}

uint64_t CoreML::NeuralNetworkShaper::shapeInnerProductLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  turi::neural_net::float_scalar *v5;
  CoreML::ShapeRange *v6;
  CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  CoreML::ShapeRange *v9;
  const CoreML::ShapeRange *v10;
  const CoreML::ShapeRange *v11;
  const CoreML::ShapeRange *v12;
  CoreML::Specification::InnerProductLayerParams *v13;
  uint64_t *v14;
  __int128 *v16[4];

  v3 = this + 4;
  v16[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v16[0], (uint64_t)&std::piecewise_construct, v16)+ 7);
  v16[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v16[0], (uint64_t)&std::piecewise_construct, v16)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v16);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v16);
  v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v16);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v16);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v11);
  v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v12);
  if (*((_DWORD *)a2 + 35) == 140)
    v14 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v14 = CoreML::Specification::InnerProductLayerParams::default_instance(v13);
  CoreML::ShapeConstraint::setChannel(v4, v14[4]);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, v14[5]);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  return CoreML::ShapeConstraint::setWidth(v5, 1uLL);
}

void CoreML::NeuralNetworkShaper::shapeEmbeddingLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  CoreML::ShapeConstraint *v5;
  const CoreML::ShapeRange *v6;
  const CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  const CoreML::ShapeRange *v9;
  CoreML::Specification::EmbeddingLayerParams *v10;
  uint64_t *v11;
  __int128 *v12[7];

  v3 = this + 4;
  v12[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v12[0], (uint64_t)&std::piecewise_construct, v12)+ 7);
  v12[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v12[0], (uint64_t)&std::piecewise_construct, v12)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v6);
  v7 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v7);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v8);
  v9 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v9);
  if (*((_DWORD *)a2 + 35) == 150)
    v11 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v11 = CoreML::Specification::EmbeddingLayerParams::default_instance(v10);
  CoreML::Specification::EmbeddingLayerParams::EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)v12, (const CoreML::Specification::EmbeddingLayerParams *)v11);
  CoreML::ShapeConstraint::setChannel(v4, 1uLL);
  CoreML::ShapeConstraint::setHeight(v4, 1uLL);
  CoreML::ShapeConstraint::setWidth(v4, 1uLL);
  CoreML::ShapeConstraint::setChannel(v5, (unint64_t)v12[5]);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  CoreML::ShapeConstraint::setWidth(v5, 1uLL);
  CoreML::Specification::EmbeddingLayerParams::~EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)v12);
}

void sub_2183B6E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CoreML::Specification::EmbeddingLayerParams::~EmbeddingLayerParams((CoreML::Specification::EmbeddingLayerParams *)&a9);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeCropLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  turi::neural_net::float_scalar *v5;
  CoreML::ShapeRange *v6;
  CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  CoreML::ShapeRange *v9;
  const CoreML::ShapeRange *v10;
  CoreML::ShapeRange *v11;
  const CoreML::ShapeRange *v12;
  const CoreML::ShapeRange *v13;
  const CoreML::ShapeRange *v14;
  const CoreML::ShapeRange *v15;
  CoreML::Specification::CropLayerParams *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  const CoreML::ShapeRange *v26;
  uint64_t *v27;
  const CoreML::ShapeRange *v28;
  uint64_t *v29;
  const CoreML::ShapeRange *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[32];
  __int128 *v34[4];
  __int128 *v35[5];
  uint64_t *v36;

  v3 = this + 4;
  v35[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v35[0], (uint64_t)&std::piecewise_construct, v35)+ 7);
  v35[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v35[0], (uint64_t)&std::piecewise_construct, v35)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v35);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v35);
  v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v35);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v35);
  v11 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeRange::intersect(v11, v12, (uint64_t)v35);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v35);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v13);
  v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v14);
  v15 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  CoreML::ShapeConstraint::updateChannelRange(v4, v15);
  if (*((_DWORD *)a2 + 35) == 190)
    v17 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v17 = CoreML::Specification::CropLayerParams::default_instance(v16);
  CoreML::Specification::CropLayerParams::CropLayerParams((CoreML::Specification::CropLayerParams *)v35, (const CoreML::Specification::CropLayerParams *)v17);
  if (*((_DWORD *)a2 + 6) == 1)
  {
    v18 = v36;
    if (!v36)
      v18 = &CoreML::Specification::_BorderAmounts_default_instance_;
    if (*((_DWORD *)v18 + 6))
    {
      v19 = v18[4];
      v21 = *(_QWORD *)(v19 + 8);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_DWORD *)(v21 + 16);
      v23 = *(_DWORD *)(v21 + 24);
      v24 = *(_DWORD *)(v20 + 16);
      v25 = *(_DWORD *)(v20 + 24);
    }
    else
    {
      v24 = 0;
      v25 = 0;
      v22 = 0;
      v23 = 0;
    }
    v31 = CoreML::ShapeConstraint::heightRange(v4);
    CoreML::ShapeRange::operator-(v31, v22, (uint64_t)v33);
    CoreML::ShapeRange::operator-((uint64_t)v33, v23, (uint64_t)v34);
    CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v34);
    v32 = CoreML::ShapeConstraint::widthRange(v4);
    CoreML::ShapeRange::operator-(v32, v25, (uint64_t)v33);
    CoreML::ShapeRange::operator-((uint64_t)v33, v24, (uint64_t)v34);
    CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v34);
    CoreML::ShapeConstraint::lowerBoundHeight(v4, (int)(v22 + v23 + 1));
    CoreML::ShapeConstraint::lowerBoundWidth(v4, (int)(v24 + v25 + 1));
  }
  else
  {
    v26 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
    CoreML::ShapeConstraint::updateChannelRange(v5, v26);
    v34[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 16);
    v27 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v34[0], (uint64_t)&std::piecewise_construct, v34);
    v28 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange((CoreML::ShapeConstraint *)(v27 + 7));
    CoreML::ShapeConstraint::updateHeightRange(v5, v28);
    v34[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 16);
    v29 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v34[0], (uint64_t)&std::piecewise_construct, v34);
    v30 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange((CoreML::ShapeConstraint *)(v29 + 7));
    CoreML::ShapeConstraint::updateWidthRange(v5, v30);
  }
  CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)v35);
}

void sub_2183B7168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  CoreML::Specification::CropLayerParams::~CropLayerParams((CoreML::Specification::CropLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapePaddingLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  turi::neural_net::float_scalar *v5;
  CoreML::ShapeRange *v6;
  CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  CoreML::ShapeRange *v9;
  const CoreML::ShapeRange *v10;
  const CoreML::ShapeRange *v11;
  const CoreML::ShapeRange *v12;
  const CoreML::ShapeRange *v13;
  CoreML::Specification::PaddingLayerParams *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  CoreML::ShapeRange *v24;
  const CoreML::ShapeRange *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[32];
  _BYTE v31[32];
  __int128 *v32[2];
  uint64_t *v33;

  v3 = this + 4;
  v32[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v32[0], (uint64_t)&std::piecewise_construct, v32)+ 7);
  v32[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v32[0], (uint64_t)&std::piecewise_construct, v32)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v32);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v32);
  v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v32);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v32);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v11);
  v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v12);
  v13 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  CoreML::ShapeConstraint::updateChannelRange(v4, v13);
  if (*((_DWORD *)a2 + 35) == 200)
    v15 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v15 = CoreML::Specification::PaddingLayerParams::default_instance(v14);
  CoreML::Specification::PaddingLayerParams::PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v32, (const CoreML::Specification::PaddingLayerParams *)v15);
  v16 = v33;
  if (!v33)
    v16 = &CoreML::Specification::_BorderAmounts_default_instance_;
  if (*((_DWORD *)v16 + 6))
  {
    v17 = v16[4];
    v19 = *(_QWORD *)(v17 + 8);
    v18 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v19 + 16);
    v20 = *(_QWORD *)(v19 + 24);
    v23 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v21 = 0;
    v20 = 0;
  }
  v24 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  v25 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeRange::intersect(v24, v25, (uint64_t)v31);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v31);
  v26 = CoreML::ShapeConstraint::heightRange(v4);
  CoreML::ShapeRange::operator+(v26, v21, (uint64_t)v30);
  CoreML::ShapeRange::operator+((uint64_t)v30, v20, (uint64_t)v31);
  CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v31);
  v27 = CoreML::ShapeConstraint::widthRange(v4);
  CoreML::ShapeRange::operator+(v27, v22, (uint64_t)v30);
  CoreML::ShapeRange::operator+((uint64_t)v30, v23, (uint64_t)v31);
  CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v31);
  v28 = CoreML::ShapeConstraint::heightRange(v5);
  CoreML::ShapeRange::operator-(v28, v21, (uint64_t)v30);
  CoreML::ShapeRange::operator-((uint64_t)v30, v20, (uint64_t)v31);
  CoreML::ShapeConstraint::updateHeightRange(v4, (const CoreML::ShapeRange *)v31);
  v29 = CoreML::ShapeConstraint::widthRange(v5);
  CoreML::ShapeRange::operator-(v29, v23, (uint64_t)v30);
  CoreML::ShapeRange::operator-((uint64_t)v30, v22, (uint64_t)v31);
  CoreML::ShapeConstraint::updateWidthRange(v4, (const CoreML::ShapeRange *)v31);
  CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)v32);
}

void sub_2183B741C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  CoreML::Specification::PaddingLayerParams::~PaddingLayerParams((CoreML::Specification::PaddingLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeUpsampleLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  turi::neural_net::float_scalar *v5;
  CoreML::ShapeRange *v6;
  CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  CoreML::ShapeRange *v9;
  const CoreML::ShapeRange *v10;
  CoreML::ShapeRange *v11;
  const CoreML::ShapeRange *v12;
  const CoreML::ShapeRange *v13;
  const CoreML::ShapeRange *v14;
  const CoreML::ShapeRange *v15;
  CoreML::Specification::UpsampleLayerParams *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];
  __int128 *v25[2];
  int v26;
  uint64_t v27;

  v3 = this + 4;
  v25[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v25[0], (uint64_t)&std::piecewise_construct, v25)+ 7);
  v25[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v25[0], (uint64_t)&std::piecewise_construct, v25)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v25);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v25);
  v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v25);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v25);
  v11 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
  CoreML::ShapeRange::intersect(v11, v12, (uint64_t)v25);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v25);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v13);
  v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v14);
  v15 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  CoreML::ShapeConstraint::updateChannelRange(v4, v15);
  if (*((_DWORD *)a2 + 35) == 210)
    v17 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v17 = CoreML::Specification::UpsampleLayerParams::default_instance(v16);
  CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)v25, (const CoreML::Specification::UpsampleLayerParams *)v17);
  if (v26)
  {
    if (*(_QWORD *)(v27 + 8) <= 1uLL)
      v18 = 1;
    else
      v18 = *(_QWORD *)(v27 + 8);
    if (*(_QWORD *)(v27 + 16) <= 1uLL)
      v19 = 1;
    else
      v19 = *(_QWORD *)(v27 + 16);
  }
  else
  {
    v18 = 1;
    v19 = 1;
  }
  v20 = CoreML::ShapeConstraint::heightRange(v4);
  CoreML::ShapeRange::operator*(v20, v18, (uint64_t)v24);
  CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v24);
  v21 = CoreML::ShapeConstraint::widthRange(v4);
  CoreML::ShapeRange::operator*(v21, v19, (uint64_t)v24);
  CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v24);
  v22 = CoreML::ShapeConstraint::heightRange(v5);
  CoreML::ShapeRange::operator/(v22, v18, (uint64_t)v24);
  CoreML::ShapeConstraint::updateHeightRange(v4, (const CoreML::ShapeRange *)v24);
  v23 = CoreML::ShapeConstraint::widthRange(v5);
  CoreML::ShapeRange::operator/(v23, v19, (uint64_t)v24);
  CoreML::ShapeConstraint::updateWidthRange(v4, (const CoreML::ShapeRange *)v24);
  CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)v25);
}

void sub_2183B7674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  CoreML::Specification::UpsampleLayerParams::~UpsampleLayerParams((CoreML::Specification::UpsampleLayerParams *)va);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeBroadcastLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  __int128 *v5;
  __int128 v6;
  __int128 *v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  __int128 *v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  BOOL hasFixedCHW;
  uint64_t v16;
  uint64_t *v17;
  turi::neural_net::float_scalar *v18;
  const CoreML::ShapeRange *v19;
  const CoreML::ShapeRange *v20;
  const CoreML::ShapeRange *v21;
  const CoreML::ShapeRange *v22;
  const CoreML::ShapeRange *v23;
  turi::neural_net::float_scalar *v25;
  CoreML::ShapeRange *v26;
  CoreML::ShapeRange *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  CoreML::ShapeRange *v34;
  CoreML::ShapeRange *v35;
  CoreML::ShapeRange *v36;
  uint64_t v37;
  CoreML::ShapeConstraint *v38;
  const CoreML::ShapeRange *v39;
  const CoreML::ShapeRange *v40;
  const CoreML::ShapeRange *v41;
  const CoreML::ShapeRange *v42;
  const CoreML::ShapeRange *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v3 = this + 4;
  *(_QWORD *)&v54 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v54, (uint64_t)&std::piecewise_construct, (__int128 **)&v54)+ 7);
  turi::neural_net::float_scalar::~float_scalar(v4);
  v6 = v5[1];
  v54 = *v5;
  v55 = v6;
  v7 = (__int128 *)CoreML::ShapeConstraint::batchRange(v4);
  v8 = v7[1];
  v52 = *v7;
  v53 = v8;
  v9 = (__int128 *)CoreML::ShapeConstraint::channelRange(v4);
  v10 = v9[1];
  v50 = *v9;
  v51 = v10;
  v11 = (__int128 *)CoreML::ShapeConstraint::heightRange(v4);
  v12 = v11[1];
  v48 = *v11;
  v49 = v12;
  v13 = (__int128 *)CoreML::ShapeConstraint::widthRange(v4);
  v14 = v13[1];
  v46 = *v13;
  v47 = v14;
  hasFixedCHW = CoreML::ShapeConstraint::hasFixedCHW(v4);
  if (*((int *)a2 + 6) >= 2)
  {
    v16 = 2;
    do
    {
      *(_QWORD *)&v44 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * v16);
      v17 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v44, (uint64_t)&std::piecewise_construct, (__int128 **)&v44);
      v18 = (turi::neural_net::float_scalar *)(v17 + 7);
      hasFixedCHW = hasFixedCHW && CoreML::ShapeConstraint::hasFixedCHW((CoreML::ShapeConstraint *)(v17 + 7));
      turi::neural_net::float_scalar::~float_scalar(v18);
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v54, v19, (uint64_t)&v44);
      v54 = v44;
      v55 = v45;
      v20 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v18);
      CoreML::ShapeRange::intersect((CoreML::ShapeRange *)&v52, v20, (uint64_t)&v44);
      v52 = v44;
      v53 = v45;
      v21 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v18);
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v50, v21, (uint64_t)&v44);
      v50 = v44;
      v51 = v45;
      v22 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v18);
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v48, v22, (uint64_t)&v44);
      v48 = v44;
      v49 = v45;
      v23 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v18);
      CoreML::ShapeRange::unify((CoreML::ShapeRange *)&v46, v23, (uint64_t)&v44);
      v46 = v44;
      v47 = v45;
    }
    while (v16++ < *((int *)a2 + 6));
  }
  *(_QWORD *)&v44 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
  v25 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v44, (uint64_t)&std::piecewise_construct, (__int128 **)&v44)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v25, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v25);
  CoreML::ShapeRange::intersect(v26, (const CoreML::ShapeRange *)&v54, (uint64_t)&v44);
  CoreML::ShapeConstraint::updateSequenceRange(v25, (const CoreML::ShapeRange *)&v44);
  v27 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v25);
  CoreML::ShapeRange::intersect(v27, (const CoreML::ShapeRange *)&v52, (uint64_t)&v44);
  CoreML::ShapeConstraint::updateBatchRange(v25, (const CoreML::ShapeRange *)&v44);
  if (hasFixedCHW)
  {
    *(_QWORD *)&v44 = CoreML::ShapeRange::maximum((CoreML::ShapeRange *)&v50);
    *((_QWORD *)&v44 + 1) = v28;
    v29 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44);
    CoreML::ShapeConstraint::setChannel(v25, v29);
    *(_QWORD *)&v44 = CoreML::ShapeRange::maximum((CoreML::ShapeRange *)&v48);
    *((_QWORD *)&v44 + 1) = v30;
    v31 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44);
    CoreML::ShapeConstraint::setHeight(v25, v31);
    *(_QWORD *)&v44 = CoreML::ShapeRange::maximum((CoreML::ShapeRange *)&v46);
    *((_QWORD *)&v44 + 1) = v32;
    v33 = CoreML::RangeValue::value((CoreML::RangeValue *)&v44);
    CoreML::ShapeConstraint::setWidth(v25, v33);
  }
  else
  {
    v34 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v25);
    CoreML::ShapeRange::intersect(v34, (const CoreML::ShapeRange *)&v50, (uint64_t)&v44);
    CoreML::ShapeConstraint::updateChannelRange(v25, (const CoreML::ShapeRange *)&v44);
    v35 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v25);
    CoreML::ShapeRange::intersect(v35, (const CoreML::ShapeRange *)&v48, (uint64_t)&v44);
    CoreML::ShapeConstraint::updateHeightRange(v25, (const CoreML::ShapeRange *)&v44);
    v36 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v25);
    CoreML::ShapeRange::intersect(v36, (const CoreML::ShapeRange *)&v46, (uint64_t)&v44);
    CoreML::ShapeConstraint::updateWidthRange(v25, (const CoreML::ShapeRange *)&v44);
  }
  if (*((int *)a2 + 6) >= 1)
  {
    v37 = 0;
    do
    {
      *(_QWORD *)&v44 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * v37 + 8);
      v38 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v44, (uint64_t)&std::piecewise_construct, (__int128 **)&v44)+ 7);
      turi::neural_net::float_scalar::~float_scalar(v25);
      CoreML::ShapeConstraint::updateSequenceRange(v38, v39);
      v40 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v25);
      CoreML::ShapeConstraint::updateBatchRange(v38, v40);
      if (!CoreML::ShapeConstraint::hasFixedCHW(v38))
      {
        v41 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v25);
        CoreML::ShapeConstraint::updateChannelRange(v38, v41);
        v42 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v25);
        CoreML::ShapeConstraint::updateHeightRange(v38, v42);
        v43 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v25);
        CoreML::ShapeConstraint::updateWidthRange(v38, v43);
      }
      ++v37;
    }
    while (v37 < *((int *)a2 + 6));
  }
}

void CoreML::NeuralNetworkShaper::shapeDotLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CoreML::ShapeRange *v12;
  CoreML::ShapeRange *v13;
  turi::neural_net::float_scalar *v14;
  const CoreML::ShapeRange *v15;
  CoreML::ShapeRange *v16;
  const CoreML::ShapeRange *v17;
  CoreML::ShapeRange *v18;
  CoreML::ShapeRange *v19;
  turi::neural_net::float_scalar *v20;
  const CoreML::ShapeRange *v21;
  CoreML::ShapeRange *v22;
  const CoreML::ShapeRange *v23;
  const CoreML::ShapeRange *v24;
  const CoreML::ShapeRange *v25;
  const CoreML::ShapeRange *v26;
  const CoreML::ShapeRange *v27;
  __int128 *v28[4];
  _OWORD v29[10];
  std::string __p;

  v3 = this + 4;
  *(_QWORD *)&v29[0] = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  v4 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, *(const void ***)&v29[0], (uint64_t)&std::piecewise_construct, (__int128 **)v29);
  *(_QWORD *)&v29[0] = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
  v5 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, *(const void ***)&v29[0], (uint64_t)&std::piecewise_construct, (__int128 **)v29);
  v28[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v6 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v28[0], (uint64_t)&std::piecewise_construct, v28);
  v7 = *(_OWORD *)(v6 + 21);
  v29[6] = *(_OWORD *)(v6 + 19);
  v29[7] = v7;
  v8 = *(_OWORD *)(v6 + 25);
  v29[8] = *(_OWORD *)(v6 + 23);
  v29[9] = v8;
  v9 = *(_OWORD *)(v6 + 13);
  v29[2] = *(_OWORD *)(v6 + 11);
  v29[3] = v9;
  v10 = *(_OWORD *)(v6 + 17);
  v29[4] = *(_OWORD *)(v6 + 15);
  v29[5] = v10;
  v11 = *(_OWORD *)(v6 + 9);
  v29[0] = *(_OWORD *)(v6 + 7);
  v29[1] = v11;
  if (*((char *)v6 + 239) < 0)
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v6[27], v6[28]);
  else
    __p = *(std::string *)((_BYTE *)v6 + 9);
  CoreML::ShapeConstraint::setName((uint64_t)v29, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)v29);
  v13 = v12;
  v14 = (turi::neural_net::float_scalar *)(v4 + 7);
  turi::neural_net::float_scalar::~float_scalar(v14);
  CoreML::ShapeRange::intersect(v13, v15, (uint64_t)v28);
  CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)v29, (const CoreML::ShapeRange *)v28);
  v16 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange((CoreML::ShapeConstraint *)v29);
  v17 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v14);
  CoreML::ShapeRange::intersect(v16, v17, (uint64_t)v28);
  CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)v29, (const CoreML::ShapeRange *)v28);
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)v29);
  v19 = v18;
  v20 = (turi::neural_net::float_scalar *)(v5 + 7);
  turi::neural_net::float_scalar::~float_scalar(v20);
  CoreML::ShapeRange::intersect(v19, v21, (uint64_t)v28);
  CoreML::ShapeConstraint::updateSequenceRange((CoreML::ShapeConstraint *)v29, (const CoreML::ShapeRange *)v28);
  v22 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange((CoreML::ShapeConstraint *)v29);
  v23 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v20);
  CoreML::ShapeRange::intersect(v22, v23, (uint64_t)v28);
  CoreML::ShapeConstraint::updateBatchRange((CoreML::ShapeConstraint *)v29, (const CoreML::ShapeRange *)v28);
  CoreML::ShapeConstraint::setHeight(v14, 1uLL);
  CoreML::ShapeConstraint::setWidth(v14, 1uLL);
  CoreML::ShapeConstraint::setHeight(v20, 1uLL);
  CoreML::ShapeConstraint::setWidth(v20, 1uLL);
  CoreML::ShapeConstraint::copyFrom(v14, v20);
  CoreML::ShapeConstraint::copyFrom(v20, v14);
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)v29);
  CoreML::ShapeConstraint::updateSequenceRange(v14, v24);
  v25 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange((CoreML::ShapeConstraint *)v29);
  CoreML::ShapeConstraint::updateBatchRange(v14, v25);
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)v29);
  CoreML::ShapeConstraint::updateSequenceRange(v20, v26);
  v27 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange((CoreML::ShapeConstraint *)v29);
  CoreML::ShapeConstraint::updateBatchRange(v20, v27);
  CoreML::ShapeConstraint::setChannel((CoreML::ShapeConstraint *)v29, 1uLL);
  CoreML::ShapeConstraint::setHeight((CoreML::ShapeConstraint *)v29, 1uLL);
  CoreML::ShapeConstraint::setWidth((CoreML::ShapeConstraint *)v29, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2183B7D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkShaper::shapeReduceLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  turi::neural_net::float_scalar *v5;
  CoreML::ShapeRange *v6;
  CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  CoreML::ShapeRange *v9;
  const CoreML::ShapeRange *v10;
  const CoreML::ShapeRange *v11;
  const CoreML::ShapeRange *v12;
  CoreML::Specification::ReduceLayerParams *v13;
  uint64_t *v14;
  std::runtime_error *exception;
  CoreML::ShapeRange *v16;
  const CoreML::ShapeRange *v17;
  const CoreML::ShapeRange *v18;
  CoreML::ShapeRange *v19;
  const CoreML::ShapeRange *v20;
  const CoreML::ShapeRange *v21;
  CoreML::ShapeRange *v22;
  const CoreML::ShapeRange *v23;
  const CoreML::ShapeRange *v24;
  CoreML::ShapeRange *v25;
  const CoreML::ShapeRange *v26;
  const CoreML::ShapeRange *v27;
  CoreML::ShapeRange *v28;
  const CoreML::ShapeRange *v29;
  const CoreML::ShapeRange *v30;
  CoreML::ShapeRange *v31;
  const CoreML::ShapeRange *v32;
  CoreML::ShapeRange *v33;
  const CoreML::ShapeRange *v34;
  const CoreML::ShapeRange *v35;
  _BYTE v36[32];
  __int128 *v37[3];
  int v38;

  v3 = this + 4;
  v37[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v37[0], (uint64_t)&std::piecewise_construct, v37)+ 7);
  v37[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v37[0], (uint64_t)&std::piecewise_construct, v37)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v5);
  v7 = v6;
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeRange::intersect(v7, v8, (uint64_t)v37);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v37);
  v9 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeRange::intersect(v9, v10, (uint64_t)v37);
  CoreML::ShapeConstraint::updateBatchRange(v5, (const CoreML::ShapeRange *)v37);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v11);
  v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v12);
  if (*((_DWORD *)a2 + 35) == 280)
    v14 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v14 = CoreML::Specification::ReduceLayerParams::default_instance(v13);
  CoreML::Specification::ReduceLayerParams::ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)v37, (const CoreML::Specification::ReduceLayerParams *)v14);
  switch(v38)
  {
    case 0:
      CoreML::ShapeConstraint::setChannel(v5, 1uLL);
      goto LABEL_14;
    case 1:
      v33 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      v34 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
      CoreML::ShapeRange::intersect(v33, v34, (uint64_t)v36);
      CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v36);
      v35 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      CoreML::ShapeConstraint::updateChannelRange(v4, v35);
LABEL_14:
      CoreML::ShapeConstraint::setHeight(v5, 1uLL);
      goto LABEL_15;
    case 2:
      CoreML::ShapeConstraint::setChannel(v5, 1uLL);
      v22 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      v23 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
      CoreML::ShapeRange::intersect(v22, v23, (uint64_t)v36);
      CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v36);
      v24 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      CoreML::ShapeConstraint::updateHeightRange(v4, v24);
      v25 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      v26 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
      CoreML::ShapeRange::intersect(v25, v26, (uint64_t)v36);
      CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v36);
      v27 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      v4 = v5;
      goto LABEL_12;
    case 3:
      v28 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      v29 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
      CoreML::ShapeRange::intersect(v28, v29, (uint64_t)v36);
      CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v36);
      v30 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      CoreML::ShapeConstraint::updateChannelRange(v4, v30);
      CoreML::ShapeConstraint::setHeight(v5, 1uLL);
      v31 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      v32 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
      CoreML::ShapeRange::intersect(v31, v32, (uint64_t)v36);
      CoreML::ShapeConstraint::updateWidthRange(v5, (const CoreML::ShapeRange *)v36);
      v27 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
LABEL_12:
      CoreML::ShapeConstraint::updateWidthRange(v4, v27);
      break;
    case 4:
      v16 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      v17 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
      CoreML::ShapeRange::intersect(v16, v17, (uint64_t)v36);
      CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v36);
      v18 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
      CoreML::ShapeConstraint::updateChannelRange(v4, v18);
      v19 = (CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      v20 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
      CoreML::ShapeRange::intersect(v19, v20, (uint64_t)v36);
      CoreML::ShapeConstraint::updateHeightRange(v5, (const CoreML::ShapeRange *)v36);
      v21 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      CoreML::ShapeConstraint::updateHeightRange(v4, v21);
LABEL_15:
      CoreML::ShapeConstraint::setWidth(v5, 1uLL);
      break;
    default:
      if (v38 == 0x80000000 || v38 == 0x7FFFFFFF)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Reduce layer axis not set -- should have been caught in validator.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      return;
  }
  CoreML::Specification::ReduceLayerParams::~ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)v37);
}

void sub_2183B8128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  CoreML::Specification::ReduceLayerParams::~ReduceLayerParams((CoreML::Specification::ReduceLayerParams *)&a13);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeLoadConstantLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  CoreML::ShapeConstraint *v3;
  std::string *v4;
  uint64_t *v5;
  __int128 *v6[3];
  unint64_t *v7;

  v6[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v3 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v6[0], (uint64_t)&std::piecewise_construct, v6)+ 7);
  v4 = CoreML::ShapeConstraint::setName((uint64_t)v3, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 290)
    v5 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v5 = CoreML::Specification::LoadConstantLayerParams::default_instance((CoreML::Specification::LoadConstantLayerParams *)v4);
  CoreML::Specification::LoadConstantLayerParams::LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v6, (const CoreML::Specification::LoadConstantLayerParams *)v5);
  CoreML::ShapeConstraint::setSequence(v3, 1uLL);
  CoreML::ShapeConstraint::setBatch(v3, 1uLL);
  CoreML::ShapeConstraint::setChannel(v3, v7[1]);
  CoreML::ShapeConstraint::setHeight(v3, v7[2]);
  CoreML::ShapeConstraint::setWidth(v3, v7[3]);
  CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)v6);
}

void sub_2183B8238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CoreML::Specification::LoadConstantLayerParams::~LoadConstantLayerParams((CoreML::Specification::LoadConstantLayerParams *)&a9);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkShaper::shapeReshapeLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  CoreML::ShapeConstraint *v4;
  CoreML::ShapeConstraint *v5;
  std::string *v6;
  uint64_t *v7;
  const CoreML::ShapeRange *v8;
  CoreML::ShapeRange *v9;
  CoreML::ShapeRange *v10;
  const CoreML::ShapeRange *v11;
  unint64_t *v12;
  _BYTE v13[32];
  __int128 *v14[2];
  int v15;
  unint64_t *v16;

  v3 = this + 4;
  v14[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v14[0], (uint64_t)&std::piecewise_construct, v14)+ 7);
  v14[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v14[0], (uint64_t)&std::piecewise_construct, v14)+ 7);
  v6 = CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 300)
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v7 = CoreML::Specification::ReshapeLayerParams::default_instance((CoreML::Specification::ReshapeLayerParams *)v6);
  CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v14, (const CoreML::Specification::ReshapeLayerParams *)v7);
  v8 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v8);
  if (v15 == 3)
  {
    turi::neural_net::float_scalar::~float_scalar(v5);
    v10 = v9;
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeRange::intersect(v10, v11, (uint64_t)v13);
    CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v13);
    CoreML::ShapeConstraint::setChannel(v5, v16[1]);
    CoreML::ShapeConstraint::setHeight(v5, v16[2]);
    v12 = v16 + 3;
  }
  else
  {
    CoreML::ShapeRange::ShapeRange((uint64_t)v13, v16[1]);
    CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v13);
    CoreML::ShapeConstraint::setChannel(v5, v16[2]);
    CoreML::ShapeConstraint::setHeight(v5, v16[3]);
    v12 = v16 + 4;
  }
  CoreML::ShapeConstraint::setWidth(v5, *v12);
  CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)v14);
}

void sub_2183B83D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  CoreML::Specification::ReshapeLayerParams::~ReshapeLayerParams((CoreML::Specification::ReshapeLayerParams *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreML::NeuralNetworkShaper::shapeFlattenLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  CoreML::ShapeConstraint *v5;
  const CoreML::ShapeRange *v6;
  const CoreML::ShapeRange *v7;
  const CoreML::ShapeRange *v8;
  const CoreML::ShapeRange *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  _BYTE v14[32];
  __int128 *v15[4];

  v3 = this + 4;
  v15[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v15[0], (uint64_t)&std::piecewise_construct, v15)+ 7);
  v15[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v15[0], (uint64_t)&std::piecewise_construct, v15)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  turi::neural_net::float_scalar::~float_scalar(v4);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v6);
  v7 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v7);
  turi::neural_net::float_scalar::~float_scalar(v5);
  CoreML::ShapeConstraint::updateSequenceRange(v4, v8);
  v9 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v4, v9);
  v10 = CoreML::ShapeConstraint::channelRange(v4);
  v11 = (__int128 *)CoreML::ShapeConstraint::heightRange(v4);
  CoreML::ShapeRange::operator*(v10, v11, (uint64_t)v14);
  v12 = (__int128 *)CoreML::ShapeConstraint::widthRange(v4);
  CoreML::ShapeRange::operator*((uint64_t)v14, v12, (uint64_t)v15);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v15);
  CoreML::ShapeConstraint::setHeight(v5, 1uLL);
  return CoreML::ShapeConstraint::setWidth(v5, 1uLL);
}

void CoreML::NeuralNetworkShaper::shapePermuteLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  CoreML::Specification::PermuteLayerParams *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CoreML::ShapeConstraint *v22;
  _OWORD *v23;
  _OWORD *v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  _OWORD *v32;
  const CoreML::ShapeRange *v33;
  _OWORD *v34;
  __int128 v35;
  const CoreML::ShapeRange *v36;
  void *__p[3];
  __int128 *v38[3];
  _QWORD *v39;
  void *v40[3];

  v3 = this + 4;
  v38[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v38[0], (uint64_t)&std::piecewise_construct, v38)+ 7);
  std::vector<CoreML::ShapeRange>::vector(v40, 4uLL);
  turi::neural_net::float_scalar::~float_scalar(v4);
  v5 = v40[0];
  v7 = v6[1];
  *(_OWORD *)v40[0] = *v6;
  v5[1] = v7;
  v8 = (_OWORD *)CoreML::ShapeConstraint::channelRange(v4);
  v9 = v40[0];
  v10 = v8[1];
  *((_OWORD *)v40[0] + 2) = *v8;
  v9[3] = v10;
  v11 = (_OWORD *)CoreML::ShapeConstraint::heightRange(v4);
  v12 = v40[0];
  v13 = v11[1];
  *((_OWORD *)v40[0] + 4) = *v11;
  v12[5] = v13;
  v14 = (CoreML::Specification::PermuteLayerParams *)CoreML::ShapeConstraint::widthRange(v4);
  v15 = v40[0];
  v16 = *((_OWORD *)v14 + 1);
  *((_OWORD *)v40[0] + 6) = *(_OWORD *)v14;
  v15[7] = v16;
  if (*((_DWORD *)a2 + 35) == 310)
    v17 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v17 = CoreML::Specification::PermuteLayerParams::default_instance(v14);
  CoreML::Specification::PermuteLayerParams::PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v38, (const CoreML::Specification::PermuteLayerParams *)v17);
  v19 = v39[1];
  v18 = v39[2];
  v21 = v39[3];
  v20 = v39[4];
  __p[0] = *(void **)(*((_QWORD *)a2 + 7) + 8);
  v22 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)__p[0], (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v22, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  CoreML::ShapeConstraint::setName((uint64_t)v22, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  CoreML::ShapeConstraint::updateSequenceRange(v22, (const CoreML::ShapeRange *)((char *)v40[0] + 32 * v19));
  CoreML::ShapeConstraint::updateChannelRange(v22, (const CoreML::ShapeRange *)((char *)v40[0] + 32 * v18));
  CoreML::ShapeConstraint::updateHeightRange(v22, (const CoreML::ShapeRange *)((char *)v40[0] + 32 * v21));
  CoreML::ShapeConstraint::updateWidthRange(v22, (const CoreML::ShapeRange *)((char *)v40[0] + 32 * v20));
  std::vector<CoreML::ShapeRange>::vector(__p, 4uLL);
  turi::neural_net::float_scalar::~float_scalar(v22);
  v23 = (char *)__p[0] + 32 * v19;
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = (_OWORD *)CoreML::ShapeConstraint::channelRange(v22);
  v27 = (char *)__p[0] + 32 * v18;
  v28 = v26[1];
  *v27 = *v26;
  v27[1] = v28;
  v29 = (_OWORD *)CoreML::ShapeConstraint::heightRange(v22);
  v30 = (char *)__p[0] + 32 * v21;
  v31 = v29[1];
  *v30 = *v29;
  v30[1] = v31;
  v32 = (_OWORD *)CoreML::ShapeConstraint::widthRange(v22);
  v33 = (const CoreML::ShapeRange *)__p[0];
  v34 = (char *)__p[0] + 32 * v20;
  v35 = v32[1];
  *v34 = *v32;
  v34[1] = v35;
  CoreML::ShapeConstraint::updateSequenceRange(v4, v33);
  CoreML::ShapeConstraint::updateChannelRange(v4, (const CoreML::ShapeRange *)((char *)__p[0] + 32));
  CoreML::ShapeConstraint::updateHeightRange(v4, (const CoreML::ShapeRange *)((char *)__p[0] + 64));
  CoreML::ShapeConstraint::updateWidthRange(v4, (const CoreML::ShapeRange *)((char *)__p[0] + 96));
  v36 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v22);
  CoreML::ShapeConstraint::updateBatchRange(v4, v36);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)v38);
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
}

void sub_2183B878C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  CoreML::Specification::PermuteLayerParams::~PermuteLayerParams((CoreML::Specification::PermuteLayerParams *)&a12);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double CoreML::NeuralNetworkShaper::shapeConcatLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  turi::neural_net::float_scalar *v4;
  CoreML::ShapeConstraint *v5;
  CoreML::Specification::ConcatLayerParams *v6;
  uint64_t *v7;
  __int128 *v8;
  __int128 v9;
  const CoreML::ShapeRange *v10;
  __int128 *v11;
  __int128 v12;
  const CoreML::ShapeRange *v13;
  const CoreML::ShapeRange *v14;
  const CoreML::ShapeRange *v15;
  const CoreML::ShapeRange *v16;
  CoreML::Specification::ConcatLayerParams *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  turi::neural_net::float_scalar *v22;
  __int128 *v23;
  const CoreML::ShapeRange *v24;
  const CoreML::ShapeRange *v25;
  __int128 *v26;
  const CoreML::ShapeRange *v27;
  const CoreML::ShapeRange *v28;
  const CoreML::ShapeRange *v29;
  const CoreML::ShapeRange *v30;
  const CoreML::ShapeRange *v31;
  const CoreML::ShapeRange *v32;
  const CoreML::ShapeRange *v33;
  const CoreML::ShapeRange *v34;
  uint64_t *v36;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v3 = this + 4;
  *(_QWORD *)&v40 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  v4 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v40, (uint64_t)&std::piecewise_construct, (__int128 **)&v40)+ 7);
  *(_QWORD *)&v40 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v40, (uint64_t)&std::piecewise_construct, (__int128 **)&v40)+ 7);
  CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  v6 = (CoreML::Specification::ConcatLayerParams *)CoreML::ShapeRange::ShapeRange((uint64_t)&v40);
  if (*((_DWORD *)a2 + 35) == 320)
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v7 = CoreML::Specification::ConcatLayerParams::default_instance(v6);
  if (*((_BYTE *)v7 + 16))
  {
    turi::neural_net::float_scalar::~float_scalar(v4);
    v9 = v8[1];
    v40 = *v8;
    v41 = v9;
    v10 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v4);
    CoreML::ShapeConstraint::updateChannelRange(v5, v10);
  }
  else
  {
    v11 = (__int128 *)CoreML::ShapeConstraint::channelRange(v4);
    v12 = v11[1];
    v40 = *v11;
    v41 = v12;
    turi::neural_net::float_scalar::~float_scalar(v4);
    CoreML::ShapeConstraint::updateSequenceRange(v5, v13);
  }
  v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v4);
  CoreML::ShapeConstraint::updateBatchRange(v5, v14);
  v15 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v4);
  CoreML::ShapeConstraint::updateHeightRange(v5, v15);
  v16 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v4);
  CoreML::ShapeConstraint::updateWidthRange(v5, v16);
  if (*((int *)a2 + 6) >= 2)
  {
    v18 = 2;
    do
    {
      *(_QWORD *)&v38 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8 * v18);
      v19 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v38, (uint64_t)&std::piecewise_construct, (__int128 **)&v38);
      v20 = v19;
      if (*((_DWORD *)a2 + 35) == 320)
        v21 = (uint64_t *)*((_QWORD *)a2 + 16);
      else
        v21 = CoreML::Specification::ConcatLayerParams::default_instance((CoreML::Specification::ConcatLayerParams *)v19);
      v22 = (turi::neural_net::float_scalar *)(v20 + 7);
      if (*((_BYTE *)v21 + 16))
      {
        turi::neural_net::float_scalar::~float_scalar(v22);
        CoreML::ShapeRange::operator+((uint64_t)&v40, v23, (uint64_t)&v38);
        v40 = v38;
        v41 = v39;
        v24 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v22);
        CoreML::ShapeConstraint::updateChannelRange(v5, v24);
        v25 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
        CoreML::ShapeConstraint::updateChannelRange(v22, v25);
      }
      else
      {
        v26 = (__int128 *)CoreML::ShapeConstraint::channelRange(v22);
        CoreML::ShapeRange::operator+((uint64_t)&v40, v26, (uint64_t)&v38);
        v40 = v38;
        v41 = v39;
        turi::neural_net::float_scalar::~float_scalar(v22);
        CoreML::ShapeConstraint::updateSequenceRange(v5, v27);
        turi::neural_net::float_scalar::~float_scalar(v5);
        CoreML::ShapeConstraint::updateSequenceRange(v22, v28);
      }
      v29 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v22);
      CoreML::ShapeConstraint::updateBatchRange(v5, v29);
      v30 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
      CoreML::ShapeConstraint::updateBatchRange(v22, v30);
      v31 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v22);
      CoreML::ShapeConstraint::updateHeightRange(v5, v31);
      v32 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      CoreML::ShapeConstraint::updateHeightRange(v22, v32);
      v33 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v22);
      CoreML::ShapeConstraint::updateWidthRange(v5, v33);
      v34 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      CoreML::ShapeConstraint::updateWidthRange(v22, v34);
    }
    while (v18++ < *((int *)a2 + 6));
  }
  if (*((_DWORD *)a2 + 35) == 320)
    v36 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v36 = CoreML::Specification::ConcatLayerParams::default_instance(v17);
  if (*((_BYTE *)v36 + 16))
    return CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)&v40);
  else
    return CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)&v40);
}

double CoreML::NeuralNetworkShaper::shapeSplitLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  turi::neural_net::float_scalar *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  CoreML::ShapeConstraint *v9;
  const CoreML::ShapeRange *v10;
  const CoreML::ShapeRange *v11;
  __int128 *v12;
  const CoreML::ShapeRange *v13;
  const CoreML::ShapeRange *v14;
  turi::neural_net::float_scalar *v16;
  const CoreML::ShapeRange *v17;
  const CoreML::ShapeRange *v18;
  uint64_t v19;
  const CoreML::ShapeRange *v20;
  const CoreML::ShapeRange *v21;
  __int128 *v23[4];

  v3 = this + 4;
  v23[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v23[0], (uint64_t)&std::piecewise_construct, v23);
  v5 = (turi::neural_net::float_scalar *)(v4 + 7);
  if (*((_DWORD *)a2 + 35) == 330)
    v6 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v6 = CoreML::Specification::SplitLayerParams::default_instance((CoreML::Specification::SplitLayerParams *)v4);
  v7 = v6[2];
  if (*((int *)a2 + 12) >= 1)
  {
    v8 = 1;
    do
    {
      v23[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8 * v8);
      v9 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v23[0], (uint64_t)&std::piecewise_construct, v23)+ 7);
      CoreML::ShapeConstraint::setName((uint64_t)v9, *(const std::string **)(*((_QWORD *)a2 + 7) + 8 * v8));
      turi::neural_net::float_scalar::~float_scalar(v5);
      CoreML::ShapeConstraint::updateSequenceRange(v9, v10);
      v11 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
      CoreML::ShapeConstraint::updateBatchRange(v9, v11);
      v12 = (__int128 *)CoreML::ShapeConstraint::channelRange(v5);
      CoreML::ShapeRange::operator/(v12, v7, (uint64_t)v23);
      CoreML::ShapeConstraint::updateChannelRange(v9, (const CoreML::ShapeRange *)v23);
      v13 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
      CoreML::ShapeConstraint::updateHeightRange(v9, v13);
      v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
      CoreML::ShapeConstraint::updateWidthRange(v9, v14);
    }
    while (v8++ < *((int *)a2 + 12));
  }
  v23[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v16 = (turi::neural_net::float_scalar *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v23[0], (uint64_t)&std::piecewise_construct, v23)+ 7);
  turi::neural_net::float_scalar::~float_scalar(v16);
  CoreML::ShapeConstraint::updateSequenceRange(v5, v17);
  v18 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v16);
  CoreML::ShapeConstraint::updateBatchRange(v5, v18);
  v19 = CoreML::ShapeConstraint::channelRange(v16);
  CoreML::ShapeRange::operator*(v19, (int)v7, (uint64_t)v23);
  CoreML::ShapeConstraint::updateChannelRange(v5, (const CoreML::ShapeRange *)v23);
  v20 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v16);
  CoreML::ShapeConstraint::updateHeightRange(v5, v20);
  v21 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v16);
  return CoreML::ShapeConstraint::updateWidthRange(v5, v21);
}

double CoreML::NeuralNetworkShaper::shapeSequenceRepeatLayer(uint64_t **this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  CoreML::ShapeConstraint *v5;
  std::string *v6;
  uint64_t *v7;
  turi::neural_net::float_scalar *v8;
  uint64_t v9;
  uint64_t v10;
  const CoreML::ShapeRange *v11;
  const CoreML::ShapeRange *v12;
  const CoreML::ShapeRange *v13;
  const CoreML::ShapeRange *v14;
  const CoreML::ShapeRange *v15;
  const CoreML::ShapeRange *v16;
  const CoreML::ShapeRange *v17;
  const CoreML::ShapeRange *v18;
  __int128 *v20[4];

  v3 = this + 4;
  v20[0] = *(__int128 **)(*((_QWORD *)a2 + 4) + 8);
  v4 = std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v20[0], (uint64_t)&std::piecewise_construct, v20);
  v20[0] = *(__int128 **)(*((_QWORD *)a2 + 7) + 8);
  v5 = (CoreML::ShapeConstraint *)(std::__tree<std::__value_type<std::string,CoreML::ShapeConstraint>,std::__map_value_compare<std::string,std::__value_type<std::string,CoreML::ShapeConstraint>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CoreML::ShapeConstraint>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (const void **)v20[0], (uint64_t)&std::piecewise_construct, v20)+ 7);
  v6 = CoreML::ShapeConstraint::setName((uint64_t)v5, *(const std::string **)(*((_QWORD *)a2 + 7) + 8));
  if (*((_DWORD *)a2 + 35) == 340)
    v7 = (uint64_t *)*((_QWORD *)a2 + 16);
  else
    v7 = CoreML::Specification::SequenceRepeatLayerParams::default_instance((CoreML::Specification::SequenceRepeatLayerParams *)v6);
  v8 = (turi::neural_net::float_scalar *)(v4 + 7);
  v9 = v7[2];
  turi::neural_net::float_scalar::~float_scalar(v8);
  CoreML::ShapeRange::operator*(v10, v9, (uint64_t)v20);
  CoreML::ShapeConstraint::updateSequenceRange(v5, (const CoreML::ShapeRange *)v20);
  v11 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v8);
  CoreML::ShapeConstraint::updateBatchRange(v5, v11);
  v12 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v8);
  CoreML::ShapeConstraint::updateChannelRange(v5, v12);
  v13 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v8);
  CoreML::ShapeConstraint::updateHeightRange(v5, v13);
  v14 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v8);
  CoreML::ShapeConstraint::updateWidthRange(v5, v14);
  v15 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::batchRange(v5);
  CoreML::ShapeConstraint::updateBatchRange(v8, v15);
  v16 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::channelRange(v5);
  CoreML::ShapeConstraint::updateChannelRange(v8, v16);
  v17 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::heightRange(v5);
  CoreML::ShapeConstraint::updateHeightRange(v8, v17);
  v18 = (const CoreML::ShapeRange *)CoreML::ShapeConstraint::widthRange(v5);
  return CoreML::ShapeConstraint::updateWidthRange(v8, v18);
}

