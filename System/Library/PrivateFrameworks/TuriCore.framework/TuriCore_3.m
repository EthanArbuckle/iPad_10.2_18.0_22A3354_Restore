void sub_217FB7ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,char *a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,int a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a25, a26);
  *(_QWORD *)(v37 - 160) = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 160));
  _Unwind_Resume(a1);
}

void turi::gl_sframe::unique(turi::gl_sframe *this@<X0>, _QWORD *a2@<X8>)
{
  const void ***v4;
  _QWORD *v5[2];
  const void **v6[3];

  (*(void (**)(const void ***__return_ptr))(*(_QWORD *)this + 24))(v6);
  v5[0] = 0;
  v5[1] = 0;
  v4 = (const void ***)v5;
  turi::gl_sframe::groupby((uint64_t)this, v6, &v4, a2);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)&v4, v5[0]);
  v4 = v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_217FB831C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)&a9, a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray_reference::operator=(uint64_t a1, turi::gl_sarray *a2)
{
  uint64_t v4;
  uint64_t v5;
  const turi::flexible_type *v6;
  _BYTE v8[40];

  v4 = (***(uint64_t (****)(_QWORD))(a1 + 40))(*(_QWORD *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v6 = (const turi::flexible_type *)(**(uint64_t (***)(_QWORD))v5)(*(_QWORD *)(a1 + 40));
    turi::gl_sarray::from_const(a2, v6, (turi::gl_sarray *)v8);
  }
  else
  {
    turi::gl_sarray::from_const(a2, (const turi::flexible_type *)1, (turi::gl_sarray *)v8);
  }
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v5 + 32))(v5, v8, a1 + 48);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v8);
  return a1;
}

void sub_217FB83F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::pack_columns(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  std::string::size_type i;
  std::string::size_type size;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  void *exception;
  _QWORD *v34;
  __int128 v35;
  std::string v36;
  std::string v37;
  uint64_t v38;
  std::string *v39;
  unint64_t v40;
  std::string v41;
  char v42[8];
  char *v43;
  const void **v44[3];

  if (a2[1] == *a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Please provide at least two columns to pack");
  }
  (*(void (**)(const void ***__return_ptr))(*(_QWORD *)a1 + 24))(v44);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v42, v44[0], v44[1]);
  v12 = *a2;
  v13 = a2[1];
  while (v12 != v13)
  {
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v14 = *v12;
      v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v14;
    }
    if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v42, (const void **)&v36.__r_.__value_.__l.__data_))
    {
      v32 = __cxa_allocate_exception(0x18uLL);
      std::operator+<char>();
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    v12 = (__int128 *)((char *)v12 + 24);
  }
  if ((a4 - 6) < 0xFDu)
  {
    v34 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v34, "Resulting dtype has to be one of dict/vector/list type");
    goto LABEL_52;
  }
  if ((_DWORD)a4 == 3)
  {
    v34 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v34, "fill_na value for array needs to be numeric type");
LABEL_52:
  }
  memset(&v41, 0, sizeof(v41));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v41, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v38 = 0;
  v39 = 0;
  v40 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v36, a1);
  size = v36.__r_.__value_.__l.__size_;
  for (i = v36.__r_.__value_.__r.__words[0]; i != size; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
    }
    else
    {
      v17 = *(_OWORD *)i;
      v37.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v17;
    }
    if ((__int128 *)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)*a2, (uint64_t)a2[1], (unsigned __int8 **)&v37) == a2[1])
    {
      v18 = v39;
      if ((unint64_t)v39 >= v40)
      {
        v20 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v38, (__int128 *)&v37);
      }
      else
      {
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v39, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
        }
        else
        {
          v19 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
          v39->__r_.__value_.__r.__words[2] = v37.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        }
        v20 = v18 + 1;
      }
      v39 = v20;
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(&v36, a1);
  (*(void (**)(std::string *__return_ptr, std::string::size_type, __int128 **, std::string *, uint64_t, uint64_t))(*(_QWORD *)v36.__r_.__value_.__l.__data_ + 352))(&v37, v36.__r_.__value_.__r.__words[0], a2, &v41, a4, a5);
  v21 = (std::__shared_weak_count *)v36.__r_.__value_.__l.__size_;
  if (v36.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(v36.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  turi::gl_sframe::select_columns(a1, (uint64_t)&v38, a6);
  v35 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
  if (v37.__r_.__value_.__l.__size_)
  {
    v24 = (unint64_t *)(v37.__r_.__value_.__l.__size_ + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  turi::gl_sarray::gl_sarray(&v36, &v35);
  turi::gl_sframe::add_column((uint64_t)a6, (uint64_t)&v36, a3);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v36);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
  if (v37.__r_.__value_.__l.__size_)
  {
    v30 = (unint64_t *)(v37.__r_.__value_.__l.__size_ + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v42, v43);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
}

void sub_217FB883C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33)
{
  void *v33;
  uint64_t v34;

  __cxa_free_exception(v33);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a32, a33);
  a32 = v34 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::pack_columns(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  std::string::size_type i;
  std::string::size_type size;
  __int128 v14;
  char v15;
  std::string *p_p;
  std::string::size_type v17;
  int v18;
  BOOL v19;
  unsigned __int8 *v20;
  uint64_t v21;
  BOOL v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  std::string::size_type v26;
  unsigned __int8 *v27;
  uint64_t v28;
  std::string *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *exception;
  int v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string __p;
  std::string v68;
  std::string *v69;
  std::string *v70;
  unint64_t v71;
  _QWORD v72[3];

  v72[2] = *MEMORY[0x24BDAC8D0];
  v69 = 0;
  v70 = 0;
  v71 = 0;
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 24))(&v68);
  size = v68.__r_.__value_.__l.__size_;
  for (i = v68.__r_.__value_.__r.__words[0]; i != size; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
    }
    else
    {
      v14 = *(_OWORD *)i;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
    }
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v17 = __p.__r_.__value_.__l.__size_;
    v18 = (char)a2[23];
    v19 = v18 < 0;
    v20 = *(unsigned __int8 **)a2;
    if (v18 >= 0)
      v20 = a2;
    v21 = a2[23];
    if (v19)
      v21 = *((_QWORD *)a2 + 1);
    if (v17)
      v22 = v21 == 0;
    else
      v22 = 1;
    if (v22)
    {
      v27 = v20;
LABEL_21:
      if (v27 == &v20[v21])
      {
        v23 = v70;
        if ((unint64_t)v70 >= v71)
        {
          v29 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v69, (__int128 *)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v70, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v70->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
          }
          v29 = v23 + 1;
        }
        v70 = v29;
        v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
    }
    else
    {
      v25 = v21 - 1;
      v26 = v17 - 1;
      v27 = v20;
      while (p_p->__r_.__value_.__s.__data_[0] == *v27)
      {
        ++v27;
        if (v26)
        {
          p_p = (std::string *)((char *)p_p + 1);
          v28 = v25--;
          --v26;
          if (v28)
            continue;
        }
        goto LABEL_21;
      }
    }
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v70 == v69)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v68, "There are no columns beginning with prefix ");
    v62 = (char)a2[23];
    if (v62 >= 0)
      v63 = (const std::string::value_type *)a2;
    else
      v63 = *(const std::string::value_type **)a2;
    if (v62 >= 0)
      v64 = a2[23];
    else
      v64 = *((_QWORD *)a2 + 1);
    v65 = std::string::append(&v68, v63, v64);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    exception[2] = *((_QWORD *)&v65->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
  }
  memset(v72, 0, 13);
  if (v72 != (_QWORD *)a5)
  {
    *(_QWORD *)((char *)v72 + 5) = *(_QWORD *)(a5 + 5);
    v72[0] = *(_QWORD *)a5;
    BYTE4(v72[1]) = *(_BYTE *)(a5 + 12);
    if (BYTE4(v72[1]) <= 9u && ((1 << SBYTE4(v72[1])) & 0x33C) != 0)
    {
      v30 = (unint64_t *)v72[0];
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
    }
  }
  turi::gl_sframe::pack_columns(a1, (__int128 **)&v69, a3, a4, (uint64_t)v72, a6);
  switch(BYTE4(v72[1]))
  {
    case 2:
      v32 = (unint64_t *)v72[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = v72[0];
        if (v72[0])
        {
          if (*(char *)(v72[0] + 31) < 0)
            operator delete(*(void **)(v72[0] + 8));
          v36 = v35;
          v37 = 0x1012C404EF22A49;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      v49 = (unint64_t *)v72[0];
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = v72[0];
        if (v72[0])
        {
          v53 = *(void **)(v72[0] + 8);
          if (v53)
          {
            *(_QWORD *)(v72[0] + 16) = v53;
            operator delete(v53);
          }
          v36 = v52;
          v37 = 0x1080C409938AC02;
          goto LABEL_83;
        }
      }
      break;
    case 4:
      v38 = (unint64_t *)v72[0];
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        v41 = v72[0];
        if (v72[0])
        {
          v68.__r_.__value_.__r.__words[0] = v72[0] + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
          goto LABEL_76;
        }
      }
      break;
    case 5:
      v54 = (unint64_t *)v72[0];
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v41 = v72[0];
        if (v72[0])
        {
          v68.__r_.__value_.__r.__words[0] = v72[0] + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
LABEL_76:
          v36 = v41;
          v37 = 0x1020C405E66F15BLL;
          goto LABEL_83;
        }
      }
      break;
    case 8:
      v57 = (unint64_t *)v72[0];
      do
      {
        v58 = __ldaxr(v57);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v57));
      if (!v59)
      {
        v60 = v72[0];
        if (v72[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v72[0] + 16));
          v36 = v60;
          v48 = -235920773;
          goto LABEL_82;
        }
      }
      break;
    case 9:
      v42 = (unint64_t *)v72[0];
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = v72[0];
        if (v72[0])
        {
          v46 = *(void **)(v72[0] + 48);
          if (v46)
          {
            *(_QWORD *)(v72[0] + 56) = v46;
            operator delete(v46);
          }
          v47 = *(void **)(v45 + 24);
          if (v47)
          {
            *(_QWORD *)(v45 + 32) = v47;
            operator delete(v47);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v45 + 8);
          v36 = v45;
          v48 = 2071181815;
LABEL_82:
          v37 = v48 | 0x1030C4000000000;
LABEL_83:
          MEMORY[0x219A19A08](v36, v37);
        }
      }
      break;
    default:
      break;
  }
  memset(v72, 0, 13);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
}

void sub_217FB8E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26)
{
  void *v26;
  int v27;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      a9 = &a21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void turi::gl_sframe::split_datetime(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 **a4@<X3>, int a5@<W4>, turi::gl_sframe *a6@<X8>)
{
  __int128 *v11;
  __int128 *i;
  uint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  size_t v23;
  void **v24;
  const std::string::value_type *v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  _QWORD *exception;
  std::string *v31;
  __int128 v32;
  void *__p[2];
  uint64_t v34;
  _QWORD v35[3];
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  std::string *v39;
  unint64_t v40;
  _QWORD v41[2];
  std::__shared_weak_count *v42;
  char v43[8];
  char *v44;
  const void **v45[3];
  std::string v46;
  std::string v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v46 = *(std::string *)a3;
  (*(void (**)(const void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(v45, a1);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v43, v45[0], v45[1]);
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v43, (const void **)a2))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    v31 = std::string::append(&v47, "' does not exist in current SFrame");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    exception[2] = *((_QWORD *)&v31->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v46.__r_.__value_.__l.__size_)
      goto LABEL_10;
  }
  else if (*((_BYTE *)&v46.__r_.__value_.__s + 23))
  {
    goto LABEL_10;
  }
  std::string::operator=(&v46, (const std::string *)a2);
LABEL_10:
  turi::gl_sframe::select_column(a1, a2, (uint64_t)&v47);
  turi::gl_sarray::split_datetime((uint64_t)&v47, (uint64_t)&v46, a4, a5, (uint64_t)v41);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v47);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  turi::gl_sframe::column_names((turi::gl_sframe *)v41);
  v11 = v36;
  for (i = v37; v11 != i; v11 = (__int128 *)((char *)v11 + 24))
  {
    v13 = *((unsigned __int8 *)v11 + 23);
    v14 = *((_QWORD *)v11 + 1);
    if ((v13 & 0x80u) == 0)
      v15 = *((unsigned __int8 *)v11 + 23);
    else
      v15 = *((_QWORD *)v11 + 1);
    v16 = *(unsigned __int8 *)(a2 + 23);
    v17 = (char)v16;
    if ((v16 & 0x80u) != 0)
      v16 = *(_QWORD *)(a2 + 8);
    if (v15 != v16)
      goto LABEL_26;
    if (v17 >= 0)
      v18 = (unsigned __int8 *)a2;
    else
      v18 = *(unsigned __int8 **)a2;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, v18, *((_QWORD *)v11 + 1)))
      {
        v20 = v39;
        if ((unint64_t)v39 < v40)
        {
LABEL_31:
          std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v11, v14);
          goto LABEL_32;
        }
LABEL_33:
        v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v38, v11);
LABEL_34:
        v39 = (std::string *)v22;
        if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v43, (const void **)v11))
        {
          if (*((char *)v11 + 23) >= 0)
            v23 = *((unsigned __int8 *)v11 + 23);
          else
            v23 = *((_QWORD *)v11 + 1);
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v23 + 2);
          if (v34 >= 0)
            v24 = __p;
          else
            v24 = (void **)__p[0];
          if (v23)
          {
            if (*((char *)v11 + 23) >= 0)
              v25 = (const std::string::value_type *)v11;
            else
              v25 = *(const std::string::value_type **)v11;
            memmove(v24, v25, v23);
          }
          strcpy((char *)v24 + v23, ".1");
          if (*((char *)v11 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
          }
          else
          {
            v26 = *v11;
            v47.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
            *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v26;
          }
          v48 = *(_OWORD *)__p;
          v49 = v34;
          __p[1] = 0;
          v34 = 0;
          __p[0] = 0;
          std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v35, (const void **)&v47.__r_.__value_.__l.__data_, 1);
          turi::gl_sframe::rename((uint64_t)v41, v35);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v35, (_QWORD *)v35[1]);
          if (SHIBYTE(v49) < 0)
            operator delete((void *)v48);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v47.__r_.__value_.__l.__data_);
          if (SHIBYTE(v34) < 0)
            operator delete(__p[0]);
        }
      }
    }
    else if (*((_BYTE *)v11 + 23))
    {
      v19 = 0;
      while (*((unsigned __int8 *)v11 + v19) == v18[v19])
      {
        if (v13 == ++v19)
          goto LABEL_55;
      }
LABEL_26:
      v20 = v39;
      if ((unint64_t)v39 >= v40)
        goto LABEL_33;
      if ((v13 & 0x80) != 0)
        goto LABEL_31;
      v21 = *v11;
      v39->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
LABEL_32:
      v22 = (uint64_t)&v20[1];
      goto LABEL_34;
    }
LABEL_55:
    ;
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  turi::gl_sframe::select_columns(a1, (uint64_t)&v38, a6);
  turi::gl_sframe::add_columns(a6, (const turi::gl_sframe *)v41);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  v41[0] = off_24D91E9C0;
  v27 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v43, v44);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
}

void sub_217FB93B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,char *a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a28, a29);
  *(_QWORD *)(v39 - 160) = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 160));
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::unpack(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X5>, turi::gl_sframe *a7@<X8>)
{
  std::string::size_type size;
  std::string::size_type i;
  uint64_t v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  uint64_t v27;
  std::string::size_type v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  size_t v33;
  void **v34;
  std::string *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  _QWORD *exception;
  std::string *v41;
  __int128 v42;
  turi::gl_sframe *v43;
  void *__p[2];
  uint64_t v45;
  _QWORD v46[3];
  std::string *v47;
  std::string *v48;
  uint64_t v49;
  std::string *v50;
  unint64_t v51;
  _QWORD v52[2];
  std::__shared_weak_count *v53;
  char v54[8];
  char *v55;
  const void **v56[3];
  std::string v57;
  std::string v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v57 = *(std::string *)a3;
  (*(void (**)(const void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(v56, a1);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v54, v56[0], v56[1]);
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v54, (const void **)a2))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    v41 = std::string::append(&v58, "' does not exist in current SFrame");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    exception[2] = *((_QWORD *)&v41->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
  }
  turi::gl_sframe::select_column(a1, a2, (uint64_t)&v58);
  turi::gl_sarray::unpack((turi::gl_sarray *)&v58, (uint64_t)&v57, a4, a5, a6, (uint64_t)v52);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v58);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v58, a1);
  size = v58.__r_.__value_.__l.__size_;
  for (i = v58.__r_.__value_.__r.__words[0]; i != size; i += 24)
  {
    v15 = *(unsigned __int8 *)(i + 23);
    v16 = *(_QWORD *)(i + 8);
    if ((v15 & 0x80u) == 0)
      v17 = *(unsigned __int8 *)(i + 23);
    else
      v17 = *(_QWORD *)(i + 8);
    v18 = *(unsigned __int8 *)(a2 + 23);
    v19 = (char)v18;
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(a2 + 8);
    if (v17 == v18)
    {
      if (v19 >= 0)
        v20 = (unsigned __int8 *)a2;
      else
        v20 = *(unsigned __int8 **)a2;
      if ((v15 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)i, v20, *(_QWORD *)(i + 8)))
          continue;
        v22 = v50;
        if ((unint64_t)v50 >= v51)
        {
LABEL_29:
          v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v49, (__int128 *)i);
          goto LABEL_30;
        }
LABEL_27:
        std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)i, v16);
        goto LABEL_28;
      }
      if (!*(_BYTE *)(i + 23))
        continue;
      v21 = 0;
      while (*(unsigned __int8 *)(i + v21) == v20[v21])
      {
        if (v15 == ++v21)
          goto LABEL_31;
      }
    }
    v22 = v50;
    if ((unint64_t)v50 >= v51)
      goto LABEL_29;
    if ((v15 & 0x80) != 0)
      goto LABEL_27;
    v23 = *(_OWORD *)i;
    v50->__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
LABEL_28:
    v24 = (uint64_t)&v22[1];
LABEL_30:
    v50 = (std::string *)v24;
LABEL_31:
    ;
  }
  v43 = a7;
  v47 = &v58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  turi::gl_sframe::column_names((turi::gl_sframe *)v52);
  v25 = v47;
  v26 = v48;
  while (v25 != v26)
  {
    v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
    if ((v27 & 0x80u) == 0)
      v28 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
    else
      v28 = v25->__r_.__value_.__l.__size_;
    v29 = *(unsigned __int8 *)(a2 + 23);
    v30 = (char)v29;
    if ((v29 & 0x80u) != 0)
      v29 = *(_QWORD *)(a2 + 8);
    if (v28 != v29)
      goto LABEL_49;
    if (v30 >= 0)
      v31 = (unsigned __int8 *)a2;
    else
      v31 = *(unsigned __int8 **)a2;
    if ((v27 & 0x80) != 0)
    {
      if (memcmp(v25->__r_.__value_.__l.__data_, v31, v25->__r_.__value_.__l.__size_))
        goto LABEL_49;
    }
    else if (*((_BYTE *)&v25->__r_.__value_.__s + 23))
    {
      v32 = 0;
      while (v25->__r_.__value_.__s.__data_[v32] == v31[v32])
      {
        if (v27 == ++v32)
          goto LABEL_70;
      }
LABEL_49:
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v54, (const void **)&v25->__r_.__value_.__l.__data_))
      {
        if ((v25->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
        else
          v33 = v25->__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v33 + 2);
        if (v45 >= 0)
          v34 = __p;
        else
          v34 = (void **)__p[0];
        if (v33)
        {
          if ((v25->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v35 = v25;
          else
            v35 = (std::string *)v25->__r_.__value_.__r.__words[0];
          memmove(v34, v35, v33);
        }
        strcpy((char *)v34 + v33, ".1");
        if (SHIBYTE(v25->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v58, v25->__r_.__value_.__l.__data_, v25->__r_.__value_.__l.__size_);
        }
        else
        {
          v36 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v58.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v36;
        }
        v59 = *(_OWORD *)__p;
        v60 = v45;
        __p[1] = 0;
        v45 = 0;
        __p[0] = 0;
        std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v46, (const void **)&v58.__r_.__value_.__l.__data_, 1);
        turi::gl_sframe::rename((uint64_t)v52, v46);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v46, (_QWORD *)v46[1]);
        if (SHIBYTE(v60) < 0)
          operator delete((void *)v59);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
        if (SHIBYTE(v45) < 0)
          operator delete(__p[0]);
      }
    }
LABEL_70:
    ++v25;
  }
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  turi::gl_sframe::select_columns(a1, (uint64_t)&v49, v43);
  turi::gl_sframe::add_columns(v43, (const turi::gl_sframe *)v52);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v52[0] = off_24D91E9C0;
  v37 = v53;
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v54, v55);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
}

void sub_217FB99FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  _Unwind_Resume(exception_object);
}

void turi::gl_sframe::stack(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string **v12;
  char v13;
  std::string v14;
  __int128 v15;

  *(_QWORD *)&v15 = *MEMORY[0x24BDAC8D0];
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a3 + 23))
    {
      v14 = *(std::string *)a3;
      goto LABEL_6;
    }
LABEL_8:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    turi::gl_sframe::stack(a1, a2, (__int128 **)&v9, a4, a5);
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    return;
  }
  if (!*(_QWORD *)(a3 + 8))
    goto LABEL_8;
  std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_6:
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = &v9;
  v13 = 0;
  v9 = (std::string *)operator new(0x18uLL);
  v10 = v9;
  v11 = v9 + 1;
  v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (__int128 *)&v14, &v15, v9);
  turi::gl_sframe::stack(a1, a2, (__int128 **)&v9, a4, a5);
  v12 = &v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_217FB9CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

void turi::gl_sframe::stack(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, unsigned int a4@<W3>, _QWORD *a5@<X8>)
{
  int v10;
  unint64_t v11;
  _QWORD *exception;
  uint64_t i;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  __int128 v16;
  uint64_t v17;
  std::string::size_type size;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  std::string *p_src;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD **v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  void *v48;
  void *v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  void *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  void ***v97;
  std::__shared_weak_count *v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  unsigned int v111;
  _QWORD *v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  _QWORD v118[2];
  void **v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  std::string v125;
  uint64_t v126;
  uint64_t v127;
  void *__p;
  void *v129;
  uint64_t v130;
  std::vector<std::string> v131;
  _BYTE v132[32];
  __int128 v133;
  __int128 v134;
  std::string *v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  std::string __src;
  __int128 v140;
  void *v141;
  __int128 v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  turi::gl_sframe::select_column(a1, a2, (uint64_t)&__src);
  v10 = turi::gl_sarray::dtype((turi::gl_sarray *)&__src);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__src);
  memset(&v131, 0, sizeof(v131));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v131, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  __p = 0;
  v129 = 0;
  v130 = 0;
  if ((v10 - 6) <= 0xFCu)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Stack is only supported for column of dict/list/array type.");
LABEL_179:
  }
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v131.__end_ - (char *)v131.__begin_) >> 3);
  if (v11 == 1)
  {
    if (v10 == 5)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "new_column_name must contain 2 values to stack a dictionary.");
      goto LABEL_179;
    }
  }
  else
  {
    if (!v11)
    {
      if ((v10 - 3) > 1u)
      {
        std::string::basic_string[abi:ne180100]<0>(&__src, "");
        std::string::basic_string[abi:ne180100]<0>(&v140, "");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v131, &__src, &v142, 2uLL);
        for (i = 0; i != -48; i -= 24)
        {
          if (*((char *)&v141 + i + 7) < 0)
            operator delete(*(void **)((char *)&__src + i + 24));
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__src, "");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v131, &__src, &v140, 1uLL);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__src.__r_.__value_.__l.__data_);
      }
      goto LABEL_16;
    }
    if ((std::vector<std::string>::pointer)((char *)v131.__end_ - (char *)v131.__begin_) == (std::vector<std::string>::pointer)48
      && (v10 - 3) <= 1u)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "new_column_name must contain 1 value to stack an list or array");
      goto LABEL_179;
    }
  }
LABEL_16:
  v111 = a4;
  v112 = a5;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v126, a1);
  begin = v131.__begin_;
  end = v131.__end_;
  while (begin != end)
  {
    if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__src, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
    }
    else
    {
      v16 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
      __src.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v16;
    }
    v17 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v126, v127, (unsigned __int8 **)&__src);
    if (v17 == v127)
    {
LABEL_36:
      if ((*((_BYTE *)&__src.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_40;
      goto LABEL_39;
    }
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    else
      size = __src.__r_.__value_.__l.__size_;
    v19 = *(unsigned __int8 *)(a2 + 23);
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = *(_QWORD *)(a2 + 8);
    if (size != v19)
      goto LABEL_171;
    if (v20 >= 0)
      v21 = (unsigned __int8 *)a2;
    else
      v21 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&__src.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__src.__r_.__value_.__l.__data_, v21, __src.__r_.__value_.__l.__size_))
        goto LABEL_171;
LABEL_39:
      operator delete(__src.__r_.__value_.__l.__data_);
      goto LABEL_40;
    }
    if (*((_BYTE *)&__src.__r_.__value_.__s + 23))
    {
      p_src = &__src;
      v23 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      while (p_src->__r_.__value_.__s.__data_[0] == *v21)
      {
        p_src = (std::string *)((char *)p_src + 1);
        ++v21;
        if (!--v23)
          goto LABEL_36;
      }
LABEL_171:
      v104 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v125, "Column name with ");
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v105 = &__src;
      else
        v105 = (std::string *)__src.__r_.__value_.__r.__words[0];
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v106 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      else
        v106 = __src.__r_.__value_.__l.__size_;
      v107 = std::string::append(&v125, (const std::string::value_type *)v105, v106);
      v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
      *(_QWORD *)&v132[16] = *((_QWORD *)&v107->__r_.__value_.__l + 2);
      *(_OWORD *)v132 = v108;
      v107->__r_.__value_.__l.__size_ = 0;
      v107->__r_.__value_.__r.__words[2] = 0;
      v107->__r_.__value_.__r.__words[0] = 0;
      v109 = std::string::append((std::string *)v132, " already exists");
      v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
      v104[2] = *((_QWORD *)&v109->__r_.__value_.__l + 2);
      *(_OWORD *)v104 = v110;
      v109->__r_.__value_.__l.__size_ = 0;
      v109->__r_.__value_.__r.__words[2] = 0;
      v109->__r_.__value_.__r.__words[0] = 0;
    }
LABEL_40:
    ++begin;
  }
  turi::gl_sframe::select_column(a1, a2, (uint64_t)v132);
  turi::gl_sarray::head((turi::gl_sarray *)v132, 100, (uint64_t)&__src);
  turi::gl_sarray::dropna((turi::gl_sarray *)&__src, (uint64_t)&v125);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&__src);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v132);
  if (turi::gl_sarray::dtype((turi::gl_sarray *)&v125) == 3)
  {
    __src.__r_.__value_.__s.__data_[0] = 1;
    std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(&__p, (char *)&__src, &__src.__r_.__value_.__s.__data_[1], 1uLL);
    goto LABEL_158;
  }
  if (turi::gl_sarray::dtype((turi::gl_sarray *)&v125) == 4)
  {
    memset(v132, 0, 24);
    turi::gl_sarray::range_iterator((turi::gl_sarray *)&v125, 0, 0xFFFFFFFFFFFFFFFFLL, &__src);
    v122 = turi::gl_sarray_range::begin((turi::gl_sarray_range *)&__src);
    v123 = v24;
    v25 = turi::gl_sarray_range::end((turi::gl_sarray_range *)&__src);
    while (v122 != v25)
    {
      v26 = turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)&v122);
      v27 = *(unsigned __int8 *)(v26 + 12) - 2;
      v28 = *(_QWORD *)v26;
      switch(*(_BYTE *)(v26 + 12))
      {
        case 2:
          do
            v29 = __ldaxr((unint64_t *)v28);
          while (__stlxr(v29 + 1, (unint64_t *)v28));
          do
          {
LABEL_48:
            v30 = __ldaxr((unint64_t *)v28);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, (unint64_t *)v28));
          if (v31)
            v32 = 1;
          else
            v32 = v28 == 0;
          if (!v32)
          {
            if (*(char *)(v28 + 31) < 0)
              operator delete(*(void **)(v28 + 8));
            v33 = v28;
            v34 = 0x1012C404EF22A49;
            goto LABEL_103;
          }
          goto LABEL_104;
        case 3:
          do
            v51 = __ldaxr((unint64_t *)v28);
          while (__stlxr(v51 + 1, (unint64_t *)v28));
          do
          {
LABEL_79:
            v52 = __ldaxr((unint64_t *)v28);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, (unint64_t *)v28));
          if (v53)
            v54 = 1;
          else
            v54 = v28 == 0;
          if (!v54)
          {
            v55 = *(void **)(v28 + 8);
            if (v55)
            {
              *(_QWORD *)(v28 + 16) = v55;
              operator delete(v55);
            }
            v33 = v28;
            v34 = 0x1080C409938AC02;
            goto LABEL_103;
          }
          goto LABEL_104;
        case 4:
          do
            v35 = __ldaxr((unint64_t *)v28);
          while (__stlxr(v35 + 1, (unint64_t *)v28));
          v137 = 0;
          v138 = 0;
          v36 = *(uint64_t **)(v28 + 8);
          v37 = *(uint64_t **)(v28 + 16);
          v136 = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v136, v36, v37, ((char *)v37 - (char *)v36) >> 4);
          v38 = v136;
          v39 = v137;
          if (v136 != v137)
          {
            v40 = *(_QWORD ***)&v132[8];
            do
            {
              v40 = std::vector<turi::flexible_type>::insert((uint64_t *)v132, (uint64_t)v40, (unint64_t)v38) + 2;
              v38 += 2;
            }
            while (v38 != v39);
          }
          v119 = (void **)&v136;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v119);
          switch(v27)
          {
            case 0:
              goto LABEL_48;
            case 1:
              goto LABEL_79;
            case 2:
              do
              {
                v41 = __ldaxr((unint64_t *)v28);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, (unint64_t *)v28));
              if (v42)
                v43 = 1;
              else
                v43 = v28 == 0;
              if (v43)
                goto LABEL_104;
              v136 = (_QWORD *)(v28 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
              break;
            case 3:
              goto LABEL_88;
            case 6:
              goto LABEL_96;
            case 7:
              goto LABEL_68;
            default:
              goto LABEL_104;
          }
          goto LABEL_94;
        case 5:
          do
            v56 = __ldaxr((unint64_t *)v28);
          while (__stlxr(v56 + 1, (unint64_t *)v28));
          do
          {
LABEL_88:
            v57 = __ldaxr((unint64_t *)v28);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, (unint64_t *)v28));
          if (v58)
            v59 = 1;
          else
            v59 = v28 == 0;
          if (v59)
            goto LABEL_104;
          v136 = (_QWORD *)(v28 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
LABEL_94:
          v33 = v28;
          v34 = 0x1020C405E66F15BLL;
          goto LABEL_103;
        case 8:
          do
            v60 = __ldaxr((unint64_t *)v28);
          while (__stlxr(v60 + 1, (unint64_t *)v28));
          do
          {
LABEL_96:
            v61 = __ldaxr((unint64_t *)v28);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, (unint64_t *)v28));
          if (v62)
            v63 = 1;
          else
            v63 = v28 == 0;
          if (v63)
            goto LABEL_104;
          boost::detail::shared_count::~shared_count((unsigned int **)(v28 + 16));
          v33 = v28;
          v50 = -235920773;
          goto LABEL_102;
        case 9:
          do
            v44 = __ldaxr((unint64_t *)v28);
          while (__stlxr(v44 + 1, (unint64_t *)v28));
          do
          {
LABEL_68:
            v45 = __ldaxr((unint64_t *)v28);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, (unint64_t *)v28));
          if (v46)
            v47 = 1;
          else
            v47 = v28 == 0;
          if (v47)
            goto LABEL_104;
          v48 = *(void **)(v28 + 48);
          if (v48)
          {
            *(_QWORD *)(v28 + 56) = v48;
            operator delete(v48);
          }
          v49 = *(void **)(v28 + 24);
          if (v49)
          {
            *(_QWORD *)(v28 + 32) = v49;
            operator delete(v49);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v28 + 8);
          v33 = v28;
          v50 = 2071181815;
LABEL_102:
          v34 = v50 | 0x1030C4000000000;
LABEL_103:
          MEMORY[0x219A19A08](v33, v34);
LABEL_104:
          turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)&v122);
          break;
        default:
          goto LABEL_104;
      }
    }
    LOBYTE(v136) = turi::infer_type_of_list((uint64_t *)v132);
    std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(&__p, (char *)&v136, (char *)&v136 + 1, 1uLL);
    turi::gl_sarray_range::~gl_sarray_range((unint64_t **)&__src);
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
    goto LABEL_157;
  }
  if (turi::gl_sarray::dtype((turi::gl_sarray *)&v125) == 5)
  {
    v122 = 0;
    v123 = 0;
    v124 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 0;
    turi::gl_sarray::range_iterator((turi::gl_sarray *)&v125, 0, 0xFFFFFFFFFFFFFFFFLL, &v136);
    v118[0] = turi::gl_sarray_range::begin((turi::gl_sarray_range *)&v136);
    v118[1] = v64;
    v65 = turi::gl_sarray_range::end((turi::gl_sarray_range *)&v136);
    while (v118[0] != v65)
    {
      v66 = (_BYTE *)turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)v118);
      if (v66[12] != 7)
      {
        switch(v66[12])
        {
          case 0:
          case 1:
          case 6:
            turi::flexible_type_fail(0);
            v115 = 0;
            v116 = 0;
            v117 = 0;
            goto LABEL_134;
          case 2:
            v72 = *(_QWORD *)v66;
            if (*(char *)(*(_QWORD *)v66 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__src, *(const std::string::value_type **)(v72 + 8), *(_QWORD *)(v72 + 16));
            }
            else
            {
              v73 = *(_OWORD *)(v72 + 8);
              __src.__r_.__value_.__r.__words[2] = *(_QWORD *)(v72 + 24);
              *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v73;
            }
            turi::flexible_type_fail(0);
            v115 = 0;
            v116 = 0;
            v117 = 0;
            if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_134;
            v81 = (void *)__src.__r_.__value_.__r.__words[0];
            break;
          case 3:
            v80 = *(_QWORD *)v66;
            memset(&__src, 0, sizeof(__src));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__src, *(const void **)(v80 + 8), *(_QWORD *)(v80 + 16), (uint64_t)(*(_QWORD *)(v80 + 16) - *(_QWORD *)(v80 + 8)) >> 3);
            turi::flexible_type_fail(0);
            v115 = 0;
            v116 = 0;
            v117 = 0;
            v81 = (void *)__src.__r_.__value_.__r.__words[0];
            if (!__src.__r_.__value_.__r.__words[0])
              goto LABEL_134;
            __src.__r_.__value_.__l.__size_ = __src.__r_.__value_.__r.__words[0];
            break;
          case 4:
            v70 = *(_QWORD *)v66;
            memset(&__src, 0, sizeof(__src));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__src, *(uint64_t **)(v70 + 8), *(uint64_t **)(v70 + 16), (uint64_t)(*(_QWORD *)(v70 + 16) - *(_QWORD *)(v70 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v115 = 0;
            v116 = 0;
            v117 = 0;
            v135 = &__src;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v135);
            goto LABEL_134;
          case 5:
            v71 = *(_QWORD *)v66;
            v116 = 0;
            v117 = 0;
            v115 = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v115, *(uint64_t **)(v71 + 8), *(uint64_t **)(v71 + 16), (uint64_t)(*(_QWORD *)(v71 + 16) - *(_QWORD *)(v71 + 8)) >> 5);
            goto LABEL_134;
          case 8:
            v74 = *(_QWORD *)v66;
            v75 = *(_QWORD *)(*(_QWORD *)v66 + 16);
            *(_QWORD *)v132 = *(_QWORD *)(*(_QWORD *)v66 + 8);
            *(_QWORD *)&v132[8] = v75;
            if (v75)
            {
              v76 = (unsigned int *)(v75 + 8);
              do
                v77 = __ldxr(v76);
              while (__stxr(v77 + 1, v76));
            }
            v78 = *(_OWORD *)(v74 + 24);
            v79 = *(_OWORD *)(v74 + 56);
            v133 = *(_OWORD *)(v74 + 40);
            v134 = v79;
            *(_OWORD *)&v132[16] = v78;
            turi::flexible_type_fail(0);
            v115 = 0;
            v116 = 0;
            v117 = 0;
            boost::detail::shared_count::~shared_count((unsigned int **)&v132[8]);
            goto LABEL_134;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__src, *(_QWORD *)v66 + 8);
            turi::flexible_type_fail(0);
            v115 = 0;
            v116 = 0;
            v117 = 0;
            if (v141)
            {
              *(_QWORD *)&v142 = v141;
              operator delete(v141);
            }
            if (__src.__r_.__value_.__r.__words[2])
            {
              *(_QWORD *)&v140 = *((_QWORD *)&__src.__r_.__value_.__l + 2);
              operator delete((void *)__src.__r_.__value_.__r.__words[2]);
            }
            v67 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
            if (__src.__r_.__value_.__l.__size_)
            {
              v68 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            goto LABEL_134;
          default:
            turi::flexible_type_fail(0);
            __break(1u);
            return;
        }
        operator delete(v81);
LABEL_134:
        v82 = v115;
        v83 = v116;
        while (v82 != v83)
        {
          v84 = v123;
          if ((unint64_t)v123 >= v124)
          {
            v89 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(&v122, (char *)v82);
          }
          else
          {
            *v123 = 0;
            *((_DWORD *)v84 + 2) = 0;
            *((_BYTE *)v84 + 12) = 0;
            if (v84 != v82)
            {
              v85 = *v82;
              *(uint64_t *)((char *)v84 + 5) = *(uint64_t *)((char *)v82 + 5);
              *v84 = v85;
              v86 = *((unsigned __int8 *)v82 + 12);
              *((_BYTE *)v84 + 12) = v86;
              if (v86 <= 9 && ((1 << v86) & 0x33C) != 0)
              {
                v87 = (unint64_t *)*v84;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 + 1, v87));
              }
            }
            v89 = (uint64_t)(v84 + 2);
          }
          v123 = (uint64_t *)v89;
          v90 = (char *)(v82 + 2);
          v91 = v120;
          if ((unint64_t)v120 >= v121)
          {
            v96 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>((uint64_t *)&v119, v90);
          }
          else
          {
            *v120 = 0;
            *((_DWORD *)v91 + 2) = 0;
            *((_BYTE *)v91 + 12) = 0;
            if (v91 != (_QWORD *)v90)
            {
              v92 = *(_QWORD *)v90;
              *(_QWORD *)((char *)v91 + 5) = *(uint64_t *)((char *)v82 + 21);
              *v91 = v92;
              v93 = *((unsigned __int8 *)v82 + 28);
              *((_BYTE *)v91 + 12) = v93;
              if (v93 <= 9 && ((1 << v93) & 0x33C) != 0)
              {
                v94 = (unint64_t *)*v91;
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 + 1, v94));
              }
            }
            v96 = (uint64_t)(v91 + 2);
          }
          v120 = (_QWORD *)v96;
          v82 += 4;
        }
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
      }
      turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)v118);
    }
    turi::gl_sarray_range::~gl_sarray_range(&v136);
    __src.__r_.__value_.__s.__data_[0] = turi::infer_type_of_list(&v122);
    __src.__r_.__value_.__s.__data_[1] = turi::infer_type_of_list((uint64_t *)&v119);
    std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(&__p, (char *)&__src, &__src.__r_.__value_.__s.__data_[2], 2uLL);
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
    v97 = (void ***)&__src;
LABEL_157:
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v97);
  }
LABEL_158:
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(&__src, a1);
  (*(void (**)(uint64_t *__return_ptr, std::string::size_type, uint64_t, std::vector<std::string> *, void **, _QWORD))(*(_QWORD *)__src.__r_.__value_.__l.__data_ + 360))(&v113, __src.__r_.__value_.__r.__words[0], a2, &v131, &__p, v111);
  turi::gl_sframe::gl_sframe(v112, (uint64_t)&v113);
  v98 = v114;
  if (v114)
  {
    p_shared_owners = (unint64_t *)&v114->__shared_owners_;
    do
      v100 = __ldaxr(p_shared_owners);
    while (__stlxr(v100 - 1, p_shared_owners));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
  if (__src.__r_.__value_.__l.__size_)
  {
    v102 = (unint64_t *)(__src.__r_.__value_.__l.__size_ + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v125);
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
  if (__p)
  {
    v129 = __p;
    operator delete(__p);
  }
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
}

void sub_217FBA96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char **a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  turi::gl_sarray_range::~gl_sarray_range((unint64_t **)(v49 - 208));
  a19 = &a21;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a21 = &a24;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a27);
  a27 = &a35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  a27 = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::unstack(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 *i;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *exception;
  int v17;
  unsigned __int8 *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  const void **v28;
  __int128 *v29;
  std::string *v30;
  std::string __p;
  std::string v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(const void ***__return_ptr))(*(_QWORD *)a1 + 24))(&v28);
  v8 = (__int128 *)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v28, (uint64_t)v29, (unsigned __int8 **)a2);
  if (v8 == v29)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v24, "column name ");
    v17 = *(char *)(a2 + 23);
    if (v17 >= 0)
      v18 = (unsigned __int8 *)a2;
    else
      v18 = *(unsigned __int8 **)a2;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a2 + 23);
    else
      v19 = *(_QWORD *)(a2 + 8);
    v20 = std::string::append(&v24, (const std::string::value_type *)v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&__p, " not found");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    exception[2] = *((_QWORD *)&v22->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v24, (__int128 *)((char *)v8 + 24), v29, (uint64_t)v8);
  v10 = v9;
  for (i = v29; i != v10; i = (__int128 *)((char *)i - 24))
  {
    if (*((char *)i - 1) < 0)
      operator delete(*((void **)i - 3));
  }
  v29 = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
    {
LABEL_9:
      turi::aggregate::CONCAT(a2, &v24);
      std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::pair[abi:ne180100]<std::string const&,turi::aggregate::groupby_descriptor_type,0>(&__p, (__int128 *)a3, (uint64_t)&v24);
      std::map<std::string,turi::aggregate::groupby_descriptor_type>::map[abi:ne180100]((uint64_t)&v26, (const void **)&__p.__r_.__value_.__l.__data_, 1);
      turi::gl_sframe::groupby(a1, &v28, &v26, a4);
      std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)&v26, v27);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
      v30 = &v32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        goto LABEL_21;
      }
      goto LABEL_23;
    }
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    goto LABEL_9;
  }
  turi::aggregate::CONCAT(a2, &v24);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v32 = v24;
  memset(&v24, 0, sizeof(v24));
  v33 = v25;
  v25 = 0uLL;
  std::map<std::string,turi::aggregate::groupby_descriptor_type>::map[abi:ne180100]((uint64_t)&v26, (const void **)&__p.__r_.__value_.__l.__data_, 1);
  turi::gl_sframe::groupby(a1, &v28, &v26, a4);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)&v26, v27);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v33);
  v30 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v14 = __ldaxr(v15);
    while (__stlxr(v14 - 1, v15));
LABEL_21:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_23:
  v30 = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_217FBAF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;

  if (a29 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      __p = &a20;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_217FBB024()
{
  JUMPOUT(0x217FBB01CLL);
}

void turi::gl_sframe::unstack(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *i;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  int v19;
  unsigned __int8 *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  void *exception;
  std::string v27;
  __int128 v28;
  uint64_t v29;
  _QWORD *v30;
  const void **v31;
  __int128 *v32;
  std::string *v33;
  std::string __p;
  std::string v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (a2[1] - *a2 != 48)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "columns must be a vector of two strings");
  }
  (*(void (**)(const void ***__return_ptr))(*(_QWORD *)a1 + 24))(&v31);
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    v10 = v32;
    do
    {
      v11 = (__int128 *)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v31, (uint64_t)v10, (unsigned __int8 **)v8);
      if (v11 == v32)
      {
        v18 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v27, "column name ");
        v19 = *(char *)(v8 + 23);
        if (v19 >= 0)
          v20 = (unsigned __int8 *)v8;
        else
          v20 = *(unsigned __int8 **)v8;
        if (v19 >= 0)
          v21 = *(unsigned __int8 *)(v8 + 23);
        else
          v21 = *(_QWORD *)(v8 + 8);
        v22 = std::string::append(&v27, (const std::string::value_type *)v20, v21);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&__p, " not found");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v18[2] = *((_QWORD *)&v24->__r_.__value_.__l + 2);
        *(_OWORD *)v18 = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v27, (__int128 *)((char *)v11 + 24), v32, (uint64_t)v11);
      v10 = v12;
      for (i = v32; i != v10; i = (__int128 *)((char *)i - 24))
      {
        if (*((char *)i - 1) < 0)
          operator delete(*((void **)i - 3));
      }
      v32 = v10;
      v8 += 24;
    }
    while (v8 != v9);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
    {
LABEL_13:
      turi::aggregate::CONCAT(*a2, *a2 + 24, &v27);
      std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::pair[abi:ne180100]<std::string const&,turi::aggregate::groupby_descriptor_type,0>(&__p, (__int128 *)a3, (uint64_t)&v27);
      std::map<std::string,turi::aggregate::groupby_descriptor_type>::map[abi:ne180100]((uint64_t)&v29, (const void **)&__p.__r_.__value_.__l.__data_, 1);
      turi::gl_sframe::groupby(a1, &v31, &v29, a4);
      std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)&v29, v30);
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
      v33 = &v35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        goto LABEL_25;
      }
      goto LABEL_27;
    }
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    goto LABEL_13;
  }
  turi::aggregate::CONCAT(*a2, *a2 + 24, &v27);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v35 = v27;
  memset(&v27, 0, sizeof(v27));
  v36 = v28;
  v28 = 0uLL;
  std::map<std::string,turi::aggregate::groupby_descriptor_type>::map[abi:ne180100]((uint64_t)&v29, (const void **)&__p.__r_.__value_.__l.__data_, 1);
  turi::gl_sframe::groupby(a1, &v31, &v29, a4);
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)&v29, v30);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v36);
  v33 = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v16 = __ldaxr(v17);
    while (__stlxr(v16 - 1, v17));
LABEL_25:
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_27:
  v33 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_217FBB3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)&a17, a18);
  std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::~pair((uint64_t)&__p);
  turi::aggregate::groupby_descriptor_type::~groupby_descriptor_type(&a9);
  __p = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::sort(uint64_t a1@<X0>, _QWORD *a2@<X1>, std::vector<int>::value_type a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  std::vector<int>::size_type v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::vector<int>::value_type __x;
  std::vector<int> v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v17);
  v7 = v17;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  __x = a3;
  std::vector<int>::vector(&v16, v8, &__x);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, std::vector<int> *))(*(_QWORD *)v7 + 344))(&v19, v7, a2, &v16);
  turi::gl_sframe::gl_sframe(a4, (uint64_t)&v19);
  v9 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v16.__begin_)
  {
    v16.__end_ = v16.__begin_;
    operator delete(v16.__begin_);
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_217FBB5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::sort(uint64_t a1@<X0>, uint64_t a2@<X1>, std::vector<int>::value_type a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  std::vector<int>::size_type v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::vector<int>::value_type __x;
  std::vector<int> v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v22);
  v7 = v22;
  v8 = *(__int128 **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v18.__begin_ = (std::vector<int>::pointer)&v19;
  LOBYTE(v18.__end_) = 0;
  if (v9)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](&v19, v9);
    v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v21, v8, (__int128 *)((char *)v8 + 24 * v9), v20);
    v10 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v10 = 0;
  }
  __x = a3;
  std::vector<int>::vector(&v18, v10, &__x);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, std::vector<int> *))(*(_QWORD *)v7 + 344))(&v24, v7, &v19, &v18);
  turi::gl_sframe::gl_sframe(a4, (uint64_t)&v24);
  v11 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v18.__begin_)
  {
    v18.__end_ = v18.__begin_;
    operator delete(v18.__begin_);
  }
  v18.__begin_ = (std::vector<int>::pointer)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_217FBB754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::dropna(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  int v9;
  _BOOL8 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v20);
  v9 = *((char *)a3 + 23);
  if (v9 < 0)
  {
    if (a3[1] != 3)
    {
LABEL_12:
      v11 = 0;
      goto LABEL_13;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v9 != 3)
  {
    goto LABEL_12;
  }
  v11 = *(_WORD *)a3 == 27745 && *((_BYTE *)a3 + 2) == 108;
LABEL_13:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _BOOL8, _QWORD, uint64_t))(*(_QWORD *)v20 + 376))(&v22, v20, a2, v11, 0, a4);
  v12 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v20 = v24;
  if (v24 != 2)
  {
    v19[2] = &v20;
    turi::gl_sframe::dropna(std::vector<std::string> const&,std::string,BOOL)const::$_0::operator()();
  }
  v15 = *(std::__shared_weak_count **)(v23 + 24);
  v19[0] = *(_QWORD *)(v23 + 16);
  v19[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    turi::gl_sframe::gl_sframe(a5, (uint64_t)v19);
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    turi::gl_sframe::gl_sframe(a5, (uint64_t)v19);
  }
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear(&v22);
}

void sub_217FBB924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::dropna(std::vector<std::string> const&,std::string,BOOL)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sframe.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ret.size()", 10);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sframe.cpp", "operator()", 927, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::gl_sframe::dropna(std::vector<std::string> const&,std::string,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FBBAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::fillna(turi::gl_sframe *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, turi::gl_sframe *a4@<X8>)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE v40[40];
  _BYTE v41[40];
  void **v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x24BDAC8D0];
  turi::gl_sframe::gl_sframe(a4, a1);
  turi::gl_sframe::select_column((uint64_t)a1, (uint64_t)a2, (uint64_t)v40);
  memset(v43, 0, 13);
  if (v43 != (_QWORD *)a3)
  {
    *(_QWORD *)((char *)v43 + 5) = *(_QWORD *)(a3 + 5);
    v43[0] = *(_QWORD *)a3;
    BYTE4(v43[1]) = *(_BYTE *)(a3 + 12);
    if (BYTE4(v43[1]) <= 9u && ((1 << SBYTE4(v43[1])) & 0x33C) != 0)
    {
      v9 = (unint64_t *)v43[0];
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  turi::gl_sarray::fillna((uint64_t)v40, (uint64_t)v43, (uint64_t)v41);
  turi::gl_sframe::replace_add_column((uint64_t)a4, (uint64_t)v41, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v41);
  switch(BYTE4(v43[1]))
  {
    case 2:
      v11 = (unint64_t *)v43[0];
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = v43[0];
        if (v43[0])
        {
          if (*(char *)(v43[0] + 31) < 0)
            operator delete(*(void **)(v43[0] + 8));
          v15 = v14;
          v16 = 0x1012C404EF22A49;
          goto LABEL_49;
        }
      }
      break;
    case 3:
      v28 = (unint64_t *)v43[0];
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = v43[0];
        if (v43[0])
        {
          v32 = *(void **)(v43[0] + 8);
          if (v32)
          {
            *(_QWORD *)(v43[0] + 16) = v32;
            operator delete(v32);
          }
          v15 = v31;
          v16 = 0x1080C409938AC02;
          goto LABEL_49;
        }
      }
      break;
    case 4:
      v17 = (unint64_t *)v43[0];
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = v43[0];
        if (v43[0])
        {
          v42 = (void **)(v43[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
          goto LABEL_42;
        }
      }
      break;
    case 5:
      v33 = (unint64_t *)v43[0];
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v20 = v43[0];
        if (v43[0])
        {
          v42 = (void **)(v43[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_42:
          v15 = v20;
          v16 = 0x1020C405E66F15BLL;
          goto LABEL_49;
        }
      }
      break;
    case 8:
      v36 = (unint64_t *)v43[0];
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = v43[0];
        if (v43[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v43[0] + 16));
          v15 = v39;
          v27 = -235920773;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      v21 = (unint64_t *)v43[0];
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = v43[0];
        if (v43[0])
        {
          v25 = *(void **)(v43[0] + 48);
          if (v25)
          {
            *(_QWORD *)(v43[0] + 56) = v25;
            operator delete(v25);
          }
          v26 = *(void **)(v24 + 24);
          if (v26)
          {
            *(_QWORD *)(v24 + 32) = v26;
            operator delete(v26);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v24 + 8);
          v15 = v24;
          v27 = 2071181815;
LABEL_48:
          v16 = v27 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  memset(v43, 0, 13);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v40);
}

void sub_217FBBE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a14);
  switch(*(_BYTE *)(v15 - 44))
  {
    case 2:
      v17 = *(unint64_t **)(v15 - 56);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (v19)
        goto LABEL_39;
      v20 = *(_QWORD *)(v15 - 56);
      if (!v20)
        goto LABEL_39;
      if (*(char *)(v20 + 31) < 0)
        operator delete(*(void **)(v20 + 8));
      v21 = (_QWORD *)v20;
      v22 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v32 = *(unint64_t **)(v15 - 56);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_39;
      v35 = *(_QWORD **)(v15 - 56);
      if (!v35)
        goto LABEL_39;
      v36 = (void *)v35[1];
      if (v36)
      {
        v35[2] = v36;
        operator delete(v36);
      }
      v21 = v35;
      v22 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v23 = *(unint64_t **)(v15 - 56);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_39;
      v26 = *(_QWORD **)(v15 - 56);
      if (!v26)
        goto LABEL_39;
      *(_QWORD *)(v15 - 64) = v26 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 64));
      goto LABEL_31;
    case 5:
      v37 = *(unint64_t **)(v15 - 56);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_39;
      v26 = *(_QWORD **)(v15 - 56);
      if (!v26)
        goto LABEL_39;
      *(_QWORD *)(v15 - 64) = v26 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 64));
LABEL_31:
      v21 = v26;
      v22 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v40 = *(unint64_t **)(v15 - 56);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_39;
      v43 = *(_QWORD *)(v15 - 56);
      if (!v43)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v43 + 16));
      v21 = (_QWORD *)v43;
      v31 = -235920773;
      goto LABEL_37;
    case 9:
      v27 = *(unint64_t **)(v15 - 56);
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_39;
      v30 = *(_QWORD **)(v15 - 56);
      if (!v30)
        goto LABEL_39;
      v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v30);
      v31 = 2071181815;
LABEL_37:
      v22 = v31 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v21, v22);
LABEL_39:
      *(_QWORD *)(v15 - 56) = 0;
      *(_DWORD *)(v15 - 48) = 0;
      *(_BYTE *)(v15 - 44) = 0;
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a9);
      *v14 = off_24D91E9C0;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v14 + 1));
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

_QWORD *turi::operator<<(_QWORD *a1, turi::gl_sframe *this)
{
  turi::gl_sframe *v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  const char *v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  turi::gl_sframe *v54;
  _QWORD *v55;
  uint64_t v56[3];
  uint64_t v57;
  uint64_t ****v58;
  uint64_t ***v59;
  std::__shared_weak_count *v60;
  std::string v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  std::string *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *__p[3];
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  std::__shared_weak_count *v77;
  void **v78;
  void **v79[96];

  v2 = this;
  v79[94] = *(void ***)MEMORY[0x24BDAC8D0];
  turi::gl_sframe::head(this, 10, v76);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Columns:\n", 9);
  (*(void (**)(uint64_t *__return_ptr, turi::gl_sframe *))(*(_QWORD *)v2 + 24))(&v74, v2);
  v55 = a1;
  (*(void (**)(void **__return_ptr, turi::gl_sframe *))(*(_QWORD *)v2 + 8))(__p, v2);
  v54 = v2;
  if (v75 != v74)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"    ", 4);
      v7 = *(char *)(v74 + v4 + 23);
      if (v7 >= 0)
        v8 = v74 + v4;
      else
        v8 = *(_QWORD *)(v74 + v4);
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(v74 + v4 + 23);
      else
        v9 = *(_QWORD *)(v74 + v4 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\t", 1);
      v12 = *((char *)__p[0] + v5);
      v13 = "undefined";
      if (v12 <= 9)
        v13 = off_24D91EC88[v12];
      v14 = strlen(v13);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      ++v5;
      v4 += 24;
      v2 = v54;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v75 - v74) >> 3));
  }
  if (turi::gl_sframe::has_size(v2))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Rows: ", 6);
    (**(void (***)(turi::gl_sframe *))v2)(v2);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = "\n";
    v18 = 1;
  }
  else
  {
    v17 = "Rows: ?\n";
    v18 = 8;
    v16 = v55;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Data:\n", 6);
  std::deque<std::string>::deque<std::__wrap_iter<std::string*>,0>((uint64_t)&v69, v74, v75);
  while (v72)
  {
    v19 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    do
    {
      v20 = *(_QWORD *)(v70 + 8 * (v71 / 0xAA)) + 24 * (v71 % 0xAA);
      v21 = v67;
      if ((unint64_t)v67 >= v68)
      {
        v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v66, (__int128 *)v20);
      }
      else
      {
        if (*(char *)(v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
        }
        else
        {
          v22 = *(_OWORD *)v20;
          v67->__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
        }
        v23 = v21 + 1;
      }
      v67 = v23;
      v24 = *(_QWORD *)(v70 + 8 * (v71 / 0xAA)) + 24 * (v71 % 0xAA);
      if (*(char *)(v24 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)v24, *(_QWORD *)(v24 + 8));
      }
      else
      {
        v25 = *(_OWORD *)v24;
        v61.__r_.__value_.__r.__words[2] = *(_QWORD *)(v24 + 16);
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v25;
      }
      v62 = 14;
      v26 = v64;
      if (v64 >= v65)
      {
        v28 = (uint64_t)(v64 - v63) >> 5;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v30 = v65 - v63;
        if ((uint64_t)(v65 - v63) >> 4 > v29)
          v29 = v30 >> 4;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
          v31 = 0x7FFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        v79[4] = (void **)&v65;
        v32 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&v65, v31);
        v33 = &v32[4 * v28];
        v79[0] = v32;
        v79[1] = v33;
        v79[3] = &v32[4 * v34];
        v35 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
        v33[2] = (void *)v61.__r_.__value_.__r.__words[2];
        *(_OWORD *)v33 = v35;
        memset(&v61, 0, sizeof(v61));
        v33[3] = (void *)v62;
        v79[2] = v33 + 4;
        std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer(&v63, v79);
        v36 = v64;
        std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)v79);
        v64 = v36;
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
      }
      else
      {
        v27 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
        *(_QWORD *)(v64 + 16) = *((_QWORD *)&v61.__r_.__value_.__l + 2);
        *(_OWORD *)v26 = v27;
        memset(&v61, 0, sizeof(v61));
        *(_QWORD *)(v26 + 24) = v62;
        v64 = v26 + 32;
      }
      std::deque<std::string>::pop_front(&v69);
      if (v19 > 3)
        break;
      ++v19;
    }
    while (v72);
    turi::table_printer::table_printer(v79, &v63, 1);
    v79[6] = (void **)v55;
    turi::table_printer::print_header((turi::table_printer *)v79);
    turi::gl_sframe::select_columns((uint64_t)v76, (uint64_t)&v66, &v61);
    turi::gl_sframe::range_iterator((turi::gl_sframe *)&v61, 0, 0xFFFFFFFFFFFFFFFFLL, &v59);
    v57 = 0;
    v58 = &v59;
    v37 = (char *)v59[11] - (char *)v59[9];
    while (v57 != v37)
    {
      turi::sframe_rows::row::operator std::vector<turi::flexible_type>(*v58 + 4, v56);
      v39 = v56[0];
      v38 = v56[1];
      while (v39 != v38)
      {
        if (*(_BYTE *)(v39 + 12) == 7)
          turi::flexible_type::operator=((uint64_t *)v39, "None");
        v39 += 16;
      }
      turi::table_printer::print_row<turi::flexible_type>(v79, v56);
      v78 = (void **)v56;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v78);
      turi::gl_sframe_range::iterator::increment((turi::gl_sframe_range::iterator *)&v57);
    }
    v40 = v60;
    v2 = v54;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    turi::table_printer::print_footer((turi::table_printer *)v79);
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
    v43 = (std::__shared_weak_count *)v61.__r_.__value_.__r.__words[2];
    if (v61.__r_.__value_.__r.__words[2])
    {
      v44 = (unint64_t *)(v61.__r_.__value_.__r.__words[2] + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    turi::table_printer::~table_printer((turi::table_printer *)v79);
    v79[0] = (void **)&v63;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](v79);
    v79[0] = (void **)&v66;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v79);
  }
  if (turi::gl_sframe::has_size(v2))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"[", 1);
    (**(void (***)(turi::gl_sframe *))v2)(v2);
    v46 = (_QWORD *)std::ostream::operator<<();
    v47 = " rows x ";
    v48 = 8;
  }
  else
  {
    v47 = "? rows x ";
    v48 = 9;
    v46 = v55;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
  v49 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" columns]\n", 10);
  std::deque<std::string>::~deque[abi:ne180100](&v69);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v79[0] = (void **)&v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v79);
  v76[0] = off_24D91E9C0;
  v50 = v77;
  if (v77)
  {
    v51 = (unint64_t *)&v77->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  return v55;
}

void sub_217FBC700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t (**a44)(turi::gl_sframe *__hidden this),uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,char a48)
{
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;

  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }
  a32 = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a44 = off_24D91E9C0;
  v49 = a46;
  if (a46)
  {
    p_shared_owners = (unint64_t *)&a46->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::string>::pop_front(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    v2 = a1[4];
  }
  v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return std::deque<std::string>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t turi::gl_sframe_range::end(turi::gl_sframe_range *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 88) - *(_QWORD *)(*(_QWORD *)this + 72);
}

uint64_t turi::table_printer::print_row<turi::flexible_type>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  const turi::flexible_type *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  unint64_t *v14;
  unint64_t v15;
  void **v17;
  uint64_t *v18;
  void *__p;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  v2 = (a2[1] - *a2) >> 4;
  v22 = (uint64_t)(a1[1] - *a1) >> 5;
  v23 = (void *)v2;
  if (v2 != v22)
  {
    v17 = &v23;
    v18 = &v22;
    turi::table_printer::print_row<turi::flexible_type>(std::vector<turi::flexible_type> const&)const::{lambda(void)#1}::operator()();
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
  LOBYTE(v23) = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)&v23, 1);
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    do
    {
      turi::table_printer::os_log_value((turi::table_printer *)v7, (char *)(v6 + 16 * v7), v5);
      v8 = *a2 + 16 * v7;
      v23 = &unk_24D91EC00;
      memset(v24, 0, 13);
      if (v24 != (_QWORD *)v8)
      {
        v9 = *(_QWORD *)v8;
        *(_QWORD *)((char *)v24 + 5) = *(_QWORD *)(v8 + 5);
        v24[0] = v9;
        v10 = *(unsigned __int8 *)(v8 + 12);
        BYTE4(v24[1]) = v10;
        v11 = v10 > 9;
        v12 = (1 << v10) & 0x33C;
        if (!v11 && v12 != 0)
        {
          v14 = (unint64_t *)v24[0];
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 + 1, v14));
        }
      }
      turi::table_internal::_print_flexible_type(&v17, *(_QWORD *)(*a1 + 32 * v7 + 24), (turi::flexible_type_impl *)v24);
      turi::table_internal::table_printer_element<turi::flexible_type,void>::~table_printer_element((uint64_t)&v23);
      ++v7;
      v6 = *a2;
    }
    while (v7 < (a2[1] - *a2) >> 4);
  }
  turi::table_printer::_p((uint64_t)a1);
  v17 = (void **)*MEMORY[0x24BEDB800];
  *(void ***)((char *)&v17 + (_QWORD)*(v17 - 3)) = *(void ***)(MEMORY[0x24BEDB800] + 24);
  v18 = (uint64_t *)(MEMORY[0x24BEDB848] + 16);
  if (v20 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v21);
}

void sub_217FBCB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ****turi::gl_sframe_range::gl_sframe_range(uint64_t ****a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t ***v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;

  v17 = a4;
  v18 = a3;
  *a1 = 0;
  a1[1] = 0;
  std::allocate_shared[abi:ne180100]<turi::sframe_reader_buffer,std::allocator<turi::sframe_reader_buffer>,std::shared_ptr<turi::sframe_reader> &,unsigned long &,unsigned long &,void>(a2, &v18, &v17, &v16);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a1, &v16);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *a1;
  v9 = (*a1)[13];
  v10 = (*a1)[11];
  if (v9 < v10)
  {
    v11 = v8[8];
    if (*v8 == v8[1])
    {
      v12 = 0;
    }
    else
    {
      v12 = (uint64_t)**v8;
      if (v12)
        v12 = (uint64_t)(*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 4;
    }
    if (v11 == (uint64_t **)v12)
    {
      v13 = (uint64_t)v8[10];
      if (v8[12] >= (uint64_t **)((char *)v10 - v13))
        v14 = (uint64_t **)((char *)v10 - v13);
      else
        v14 = v8[12];
      turi::sframe_reader::read_rows((turi::sframe_reader *)v8[6], v13, (uint64_t)v14 + v13, *a1);
      v11 = 0;
      v8[10] = (uint64_t **)((char *)v14 + (_QWORD)v8[10]);
      v9 = v8[13];
    }
    v8[13] = (uint64_t **)((char *)v9 + 1);
    v8[8] = (uint64_t **)((char *)v11 + 1);
    if (!*((_BYTE *)v8 + 24))
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v8);
    v8[4] = (uint64_t **)v8;
    v8[5] = v11;
  }
  return a1;
}

void sub_217FBCC64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::gl_sframe_range::iterator::increment(turi::gl_sframe_range::iterator *this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)this + 1);
  ++*(_QWORD *)this;
  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  if (v3 < v4)
  {
    v5 = *(_QWORD *)(v2 + 64);
    if (*(_QWORD *)v2 == *(_QWORD *)(v2 + 8))
    {
      v6 = 0;
    }
    else
    {
      v6 = **(_QWORD **)v2;
      if (v6)
        v6 = (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 4;
    }
    if (v5 == v6)
    {
      v7 = *(_QWORD *)(v2 + 80);
      if (*(_QWORD *)(v2 + 96) >= v4 - v7)
        v8 = v4 - v7;
      else
        v8 = *(_QWORD *)(v2 + 96);
      turi::sframe_reader::read_rows(*(turi::sframe_reader **)(v2 + 48), v7, v8 + v7, (uint64_t ***)v2);
      v5 = 0;
      *(_QWORD *)(v2 + 80) += v8;
      v3 = *(_QWORD *)(v2 + 104);
    }
    *(_QWORD *)(v2 + 104) = v3 + 1;
    *(_QWORD *)(v2 + 64) = v5 + 1;
    if (!*(_BYTE *)(v2 + 24))
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v2);
    *(_QWORD *)(v2 + 32) = v2;
    *(_QWORD *)(v2 + 40) = v5;
  }
}

uint64_t turi::gl_sframe_range::iterator::dereference(turi::gl_sframe_range::iterator *this)
{
  return **((_QWORD **)this + 1) + 32;
}

uint64_t turi::gl_sarray_reference::operator=(uint64_t a1, const turi::gl_sarray *a2)
{
  uint64_t v3;
  _BYTE v5[40];

  v3 = *(_QWORD *)(a1 + 40);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)v5, a2);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v3 + 32))(v3, v5, a1 + 48);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v5);
  return a1;
}

void sub_217FBCDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

turi::gl_sarray *turi::gl_sarray_reference::gl_sarray_reference(turi::gl_sarray *a1, uint64_t a2, __int128 *a3)
{
  turi::gl_sarray *v6;
  std::string *v7;
  __int128 v8;

  v6 = turi::gl_sarray::gl_sarray(a1);
  *(_QWORD *)v6 = off_24D91EA30;
  *((_QWORD *)v6 + 5) = a2;
  v7 = (std::string *)((char *)v6 + 48);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_217FBCE34(_Unwind_Exception *a1)
{
  turi::gl_sarray *v1;

  turi::gl_sarray::~gl_sarray(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray_reference::operator=(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), a2, a1 + 48);
  return a1;
}

void turi::gl_sarray_reference::get_proxy(turi::gl_sarray_reference *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v3[40];

  turi::gl_sframe::select_column(*((_QWORD *)this + 5), (uint64_t)this + 48, (uint64_t)v3);
  turi::gl_sarray::get_proxy((uint64_t)v3, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v3);
}

void sub_217FBCEC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

turi::gl_sarray *turi::const_gl_sarray_reference::const_gl_sarray_reference(turi::gl_sarray *a1, uint64_t a2, __int128 *a3)
{
  turi::gl_sarray *v6;
  std::string *v7;
  __int128 v8;

  v6 = turi::gl_sarray::gl_sarray(a1);
  *(_QWORD *)v6 = off_24D91EA58;
  *((_QWORD *)v6 + 5) = a2;
  v7 = (std::string *)((char *)v6 + 48);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_217FBCF48(_Unwind_Exception *a1)
{
  turi::gl_sarray *v1;

  turi::gl_sarray::~gl_sarray(v1);
  _Unwind_Resume(a1);
}

void turi::const_gl_sarray_reference::get_proxy(turi::const_gl_sarray_reference *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v3[40];

  turi::gl_sframe::select_column(*((_QWORD *)this + 5), (uint64_t)this + 48, (uint64_t)v3);
  turi::gl_sarray::get_proxy((uint64_t)v3, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v3);
}

void sub_217FBCFA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sframe_writer_impl::gl_sframe_writer_impl(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  turi::sframe *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t i;
  _QWORD **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::string *p_p;
  uint64_t v27;
  std::string __p;
  std::string *v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v8 = turi::sframe::sframe((turi::sframe *)a1);
  v9 = (uint64_t *)((char *)v8 + 296);
  *((_QWORD *)v8 + 37) = 0;
  *((_QWORD *)v8 + 38) = 0;
  *((_QWORD *)v8 + 39) = 0;
  v10 = turi::SFRAME_DEFAULT_NUM_SEGMENTS;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (a4 == -1)
    v11 = v10;
  else
    v11 = a4;
  turi::sframe::open_for_write(a1, a2, a3, &__p, v11, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  assert_msg(*(unsigned __int8 *)(a1 + 288), "Invalid SFrame");
  if (*(_BYTE *)(a1 + 289))
  {
    v12 = (_QWORD **)(a1 + 208);
    v13 = 15;
  }
  else
  {
    if (!*(_QWORD *)(a1 + 24))
    {
      v14 = 0;
      goto LABEL_11;
    }
    v12 = *(_QWORD ***)(a1 + 184);
    v13 = 3;
  }
  v14 = (*(uint64_t (**)(void))(**v12 + 8 * v13))();
LABEL_11:
  std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::resize(v9, v14);
  v15 = 0;
  for (i = 64; ; i += 96)
  {
    assert_msg(*(unsigned __int8 *)(a1 + 288), "Invalid SFrame");
    if (*(_BYTE *)(a1 + 289))
    {
      v17 = (_QWORD **)(a1 + 208);
      v18 = 15;
LABEL_16:
      v19 = (*(uint64_t (**)(void))(**v17 + 8 * v18))();
      goto LABEL_17;
    }
    if (*(_QWORD *)(a1 + 24))
    {
      v17 = *(_QWORD ***)(a1 + 184);
      v18 = 3;
      goto LABEL_16;
    }
    v19 = 0;
LABEL_17:
    if (v15 >= v19)
      break;
    turi::sframe::get_output_iterator((size_t *)a1, v15, (uint64_t)&__p);
    v20 = *v9;
    v21 = *v9 + i;
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v21 - 64), (uint64_t)&__p);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v21 - 32), (uint64_t)v31);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v20 + i), (uint64_t)v33);
    v22 = v34;
    if (v34 == v33)
    {
      v22 = v33;
      v23 = 4;
    }
    else
    {
      if (!v34)
        goto LABEL_23;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_23:
    v24 = v32;
    if (v32 == v31)
    {
      v24 = v31;
      v25 = 4;
    }
    else
    {
      if (!v32)
        goto LABEL_28;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_28:
    p_p = v30;
    if (v30 == &__p)
    {
      p_p = &__p;
      v27 = 4;
    }
    else
    {
      if (!v30)
        goto LABEL_33;
      v27 = 5;
    }
    (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v27))();
LABEL_33:
    ++v15;
  }
  return a1;
}

void sub_217FBD230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  turi::sframe *v15;

  if (a15 < 0)
    operator delete(__p);
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  turi::sframe::~sframe(v15);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t i;

  v2 = result;
  v3 = (_QWORD *)result[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *result) >> 5);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (uint64_t *)std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__append(result, v6);
  if (!v5)
  {
    for (i = *result + 96 * a2;
          v3 != (_QWORD *)i;
          result = std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v3))
    {
      v3 -= 12;
    }
    v2[1] = i;
  }
  return result;
}

void turi::gl_sframe_writer_impl::write(turi::gl_sframe_writer_impl *this, void ***a2, unint64_t a3)
{
  void **v5;
  unint64_t *v6;
  unint64_t v7;
  BOOL v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  const std::string *v13;
  unint64_t *v14;
  unint64_t v15;
  void **v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  void *v36;
  void *v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  void **v51;
  unint64_t *v52;
  unint64_t v53;
  void **v54;
  double v55;
  double v56;
  unint64_t *v57;
  unint64_t v58;
  double v59;
  double v60;
  uint64_t v61;
  void **v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  unint64_t *v68;
  unint64_t v69;
  BOOL v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  BOOL v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  BOOL v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  BOOL v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  BOOL v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  double v105;
  unint64_t *v106;
  unint64_t v107;
  double v108;
  void *v109;
  void *v110;
  unsigned int v111;
  unint64_t *v112;
  unint64_t v113;
  double v114;
  void *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  double v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char **v125;
  double *v126;
  void *v127[2];
  __int128 v128;
  __int128 v129;
  double v130;
  int v131;
  char v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  v122 = (char *)a3;
  *(_QWORD *)&v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 38) - *((_QWORD *)this + 37)) >> 5);
  if (*(_QWORD *)&v130 <= a3)
  {
    v125 = &v122;
    v126 = &v130;
    turi::gl_sframe_writer_impl::write(turi::flexible_type const&,unsigned long)::$_0::operator()();
  }
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
      v5 = *a2;
      v132 = 0;
      v131 = 0;
      v130 = *(double *)&v5;
      v123 = 0;
      v124 = 0;
      v122 = 0;
      v125 = &v122;
      LOBYTE(v126) = 0;
      v122 = (char *)operator new(0x10uLL);
      v123 = (uint64_t)v122;
      v124 = v122 + 16;
      v123 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v124, (uint64_t *)&v130, &v133, (uint64_t)v122);
      switch(v132)
      {
        case 2:
          v6 = *(unint64_t **)&v130;
          do
          {
            v7 = __ldaxr(v6);
            v8 = --v7 == 0;
          }
          while (__stlxr(v7, v6));
          goto LABEL_77;
        case 3:
          v82 = *(unint64_t **)&v130;
          do
          {
            v83 = __ldaxr(v82);
            v84 = --v83 == 0;
          }
          while (__stlxr(v83, v82));
          goto LABEL_150;
        case 4:
          v68 = *(unint64_t **)&v130;
          do
          {
            v69 = __ldaxr(v68);
            v70 = --v69 == 0;
          }
          while (__stlxr(v69, v68));
          goto LABEL_134;
        case 5:
          v87 = *(unint64_t **)&v130;
          do
          {
            v88 = __ldaxr(v87);
            v89 = --v88 == 0;
          }
          while (__stlxr(v88, v87));
          goto LABEL_158;
        case 8:
          v94 = *(unint64_t **)&v130;
          do
          {
            v95 = __ldaxr(v94);
            v96 = --v95 == 0;
          }
          while (__stlxr(v95, v94));
          goto LABEL_165;
        case 9:
          v73 = *(unint64_t **)&v130;
          do
          {
            v74 = __ldaxr(v73);
            v75 = --v74 == 0;
          }
          while (__stlxr(v74, v73));
          goto LABEL_140;
        default:
          goto LABEL_171;
      }
    case 1:
      v51 = *a2;
      v131 = 0;
      v132 = 1;
      v130 = *(double *)&v51;
      v123 = 0;
      v124 = 0;
      v122 = 0;
      v125 = &v122;
      LOBYTE(v126) = 0;
      v122 = (char *)operator new(0x10uLL);
      v123 = (uint64_t)v122;
      v124 = v122 + 16;
      v123 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v124, (uint64_t *)&v130, &v133, (uint64_t)v122);
      switch(v132)
      {
        case 2:
          v52 = *(unint64_t **)&v130;
          do
          {
            v53 = __ldaxr(v52);
            v8 = --v53 == 0;
          }
          while (__stlxr(v53, v52));
          goto LABEL_77;
        case 3:
          v85 = *(unint64_t **)&v130;
          do
          {
            v86 = __ldaxr(v85);
            v84 = --v86 == 0;
          }
          while (__stlxr(v86, v85));
          goto LABEL_150;
        case 4:
          v71 = *(unint64_t **)&v130;
          do
          {
            v72 = __ldaxr(v71);
            v70 = --v72 == 0;
          }
          while (__stlxr(v72, v71));
          goto LABEL_134;
        case 5:
          v90 = *(unint64_t **)&v130;
          do
          {
            v91 = __ldaxr(v90);
            v89 = --v91 == 0;
          }
          while (__stlxr(v91, v90));
          goto LABEL_158;
        case 8:
          v97 = *(unint64_t **)&v130;
          do
          {
            v98 = __ldaxr(v97);
            v96 = --v98 == 0;
          }
          while (__stlxr(v98, v97));
          goto LABEL_165;
        case 9:
          v76 = *(unint64_t **)&v130;
          do
          {
            v77 = __ldaxr(v76);
            v75 = --v77 == 0;
          }
          while (__stlxr(v77, v76));
          goto LABEL_140;
        default:
          goto LABEL_171;
      }
    case 2:
      v13 = (const std::string *)(*a2 + 1);
      v130 = 0.0;
      v131 = 0;
      v132 = 0;
      turi::flexible_type::operator=<std::string>((uint64_t *)&v130, v13);
      v122 = 0;
      v123 = 0;
      v124 = 0;
      v125 = &v122;
      LOBYTE(v126) = 0;
      v122 = (char *)operator new(0x10uLL);
      v123 = (uint64_t)v122;
      v124 = v122 + 16;
      v123 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v124, (uint64_t *)&v130, &v133, (uint64_t)v122);
      switch(v132)
      {
        case 2:
          v14 = *(unint64_t **)&v130;
          do
          {
            v15 = __ldaxr(v14);
            v8 = --v15 == 0;
          }
          while (__stlxr(v15, v14));
          goto LABEL_77;
        case 3:
          v112 = *(unint64_t **)&v130;
          do
          {
            v113 = __ldaxr(v112);
            v84 = --v113 == 0;
          }
          while (__stlxr(v113, v112));
          goto LABEL_150;
        case 4:
          v103 = *(unint64_t **)&v130;
          do
          {
            v104 = __ldaxr(v103);
            v70 = --v104 == 0;
          }
          while (__stlxr(v104, v103));
          goto LABEL_134;
        case 5:
          v116 = *(unint64_t **)&v130;
          do
          {
            v117 = __ldaxr(v116);
            v89 = --v117 == 0;
          }
          while (__stlxr(v117, v116));
          goto LABEL_158;
        case 8:
          v118 = *(unint64_t **)&v130;
          do
          {
            v119 = __ldaxr(v118);
            v96 = --v119 == 0;
          }
          while (__stlxr(v119, v118));
          goto LABEL_165;
        case 9:
          v106 = *(unint64_t **)&v130;
          do
          {
            v107 = __ldaxr(v106);
            v75 = --v107 == 0;
          }
          while (__stlxr(v107, v106));
          goto LABEL_140;
        default:
          goto LABEL_171;
      }
    case 3:
      v16 = *a2;
      v17 = *a2 + 1;
      v18 = *a2 + 2;
      std::vector<turi::flexible_type>::vector(&v122, (uint64_t)(*v18 - *v17) >> 3);
      v19 = (_QWORD *)*v17;
      if (*v18 != *v17)
      {
        v20 = 0;
        do
        {
          v21 = &v122[16 * v20];
          switch(v21[12])
          {
            case 2:
              v22 = *(unint64_t **)v21;
              do
              {
                v23 = __ldaxr(v22);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, v22));
              if (!v24)
              {
                v25 = *(unint64_t **)v21;
                if (!*(_QWORD *)v21)
                  goto LABEL_65;
                if (*((char *)v25 + 31) < 0)
                  operator delete((void *)v25[1]);
                v26 = v25;
                v27 = 0x1012C404EF22A49;
                goto LABEL_64;
              }
              break;
            case 3:
              v39 = *(unint64_t **)v21;
              do
              {
                v40 = __ldaxr(v39);
                v41 = v40 - 1;
              }
              while (__stlxr(v41, v39));
              if (!v41)
              {
                v42 = *(unint64_t **)v21;
                if (!*(_QWORD *)v21)
                  goto LABEL_65;
                v43 = (void *)v42[1];
                if (v43)
                {
                  v42[2] = (unint64_t)v43;
                  operator delete(v43);
                }
                v26 = v42;
                v27 = 0x1080C409938AC02;
                goto LABEL_64;
              }
              break;
            case 4:
              v28 = *(unint64_t **)v21;
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                v31 = *(unint64_t **)v21;
                if (!*(_QWORD *)v21)
                  goto LABEL_65;
                v125 = (char **)(v31 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
                goto LABEL_57;
              }
              break;
            case 5:
              v44 = *(unint64_t **)v21;
              do
              {
                v45 = __ldaxr(v44);
                v46 = v45 - 1;
              }
              while (__stlxr(v46, v44));
              if (!v46)
              {
                v31 = *(unint64_t **)v21;
                if (!*(_QWORD *)v21)
                  goto LABEL_65;
                v125 = (char **)(v31 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
LABEL_57:
                v26 = v31;
                v27 = 0x1020C405E66F15BLL;
                goto LABEL_64;
              }
              break;
            case 8:
              v47 = *(unint64_t **)v21;
              do
              {
                v48 = __ldaxr(v47);
                v49 = v48 - 1;
              }
              while (__stlxr(v49, v47));
              if (!v49)
              {
                v50 = *(unint64_t **)v21;
                if (!*(_QWORD *)v21)
                  goto LABEL_65;
                boost::detail::shared_count::~shared_count((unsigned int **)v50 + 2);
                v26 = v50;
                v38 = -235920773;
                goto LABEL_63;
              }
              break;
            case 9:
              v32 = *(unint64_t **)v21;
              do
              {
                v33 = __ldaxr(v32);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, v32));
              if (!v34)
              {
                v35 = *(unint64_t **)v21;
                if (*(_QWORD *)v21)
                {
                  v36 = (void *)v35[6];
                  if (v36)
                  {
                    v35[7] = (unint64_t)v36;
                    operator delete(v36);
                  }
                  v37 = (void *)v35[3];
                  if (v37)
                  {
                    v35[4] = (unint64_t)v37;
                    operator delete(v37);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v35 + 1));
                  v26 = v35;
                  v38 = 2071181815;
LABEL_63:
                  v27 = v38 | 0x1030C4000000000;
LABEL_64:
                  MEMORY[0x219A19A08](v26, v27);
                }
LABEL_65:
                *(_QWORD *)v21 = 0;
              }
              break;
            default:
              break;
          }
          *(_QWORD *)v21 = 0;
          *((_DWORD *)v21 + 2) = 0;
          v21[12] = 1;
          *(_QWORD *)v21 = v19[v20++];
          v19 = v16[1];
        }
        while (v20 < ((_BYTE *)v16[2] - (_BYTE *)v19) >> 3);
      }
      break;
    case 4:
      v9 = *a2;
      v123 = 0;
      v124 = 0;
      v122 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v122, (uint64_t *)v9[1], (uint64_t *)v9[2], ((_BYTE *)v9[2] - (_BYTE *)v9[1]) >> 4);
      break;
    case 5:
      v54 = *a2;
      v126 = 0;
      v127[0] = 0;
      v125 = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v125, (uint64_t *)v54[1], (uint64_t *)v54[2], ((_BYTE *)v54[2] - (_BYTE *)v54[1]) >> 5);
      turi::flexible_type_fail(0);
      v122 = 0;
      v123 = 0;
      v124 = 0;
      v130 = COERCE_DOUBLE(&v125);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
      break;
    case 6:
      v55 = (double)((uint64_t)((_QWORD)*a2 << 8) >> 8);
      v56 = (double)*((int *)a2 + 2) / 1000000.0;
      v131 = 0;
      v132 = 1;
      v130 = v56 + v55;
      v123 = 0;
      v124 = 0;
      v122 = 0;
      v125 = &v122;
      LOBYTE(v126) = 0;
      v122 = (char *)operator new(0x10uLL);
      v123 = (uint64_t)v122;
      v124 = v122 + 16;
      v123 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v124, (uint64_t *)&v130, &v133, (uint64_t)v122);
      switch(v132)
      {
        case 2:
          v57 = *(unint64_t **)&v130;
          do
          {
            v58 = __ldaxr(v57);
            v8 = --v58 == 0;
          }
          while (__stlxr(v58, v57));
LABEL_77:
          if (v8)
          {
            v59 = v130;
            if (v130 != 0.0)
            {
              if (*(char *)(*(_QWORD *)&v130 + 31) < 0)
                operator delete(*(void **)(*(_QWORD *)&v130 + 8));
              v60 = v59;
              v61 = 0x1012C404EF22A49;
              goto LABEL_170;
            }
          }
          break;
        case 3:
          v92 = *(unint64_t **)&v130;
          do
          {
            v93 = __ldaxr(v92);
            v84 = --v93 == 0;
          }
          while (__stlxr(v93, v92));
LABEL_150:
          if (v84)
          {
            v114 = v130;
            if (v130 != 0.0)
            {
              v115 = *(void **)(*(_QWORD *)&v130 + 8);
              if (v115)
              {
                *(_QWORD *)(*(_QWORD *)&v130 + 16) = v115;
                operator delete(v115);
              }
              v60 = v114;
              v61 = 0x1080C409938AC02;
              goto LABEL_170;
            }
          }
          break;
        case 4:
          v78 = *(unint64_t **)&v130;
          do
          {
            v79 = __ldaxr(v78);
            v70 = --v79 == 0;
          }
          while (__stlxr(v79, v78));
LABEL_134:
          if (v70)
          {
            v105 = v130;
            if (v130 != 0.0)
            {
              v125 = (char **)(*(_QWORD *)&v130 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
              goto LABEL_162;
            }
          }
          break;
        case 5:
          v99 = *(unint64_t **)&v130;
          do
          {
            v100 = __ldaxr(v99);
            v89 = --v100 == 0;
          }
          while (__stlxr(v100, v99));
LABEL_158:
          if (v89)
          {
            v105 = v130;
            if (v130 != 0.0)
            {
              v125 = (char **)(*(_QWORD *)&v130 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
LABEL_162:
              v60 = v105;
              v61 = 0x1020C405E66F15BLL;
              goto LABEL_170;
            }
          }
          break;
        case 8:
          v101 = *(unint64_t **)&v130;
          do
          {
            v102 = __ldaxr(v101);
            v96 = --v102 == 0;
          }
          while (__stlxr(v102, v101));
LABEL_165:
          if (v96)
          {
            v120 = v130;
            if (v130 != 0.0)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v130 + 16));
              v60 = v120;
              v111 = -235920773;
              goto LABEL_169;
            }
          }
          break;
        case 9:
          v80 = *(unint64_t **)&v130;
          do
          {
            v81 = __ldaxr(v80);
            v75 = --v81 == 0;
          }
          while (__stlxr(v81, v80));
LABEL_140:
          if (v75)
          {
            v108 = v130;
            if (v130 != 0.0)
            {
              v109 = *(void **)(*(_QWORD *)&v130 + 48);
              if (v109)
              {
                *(_QWORD *)(*(_QWORD *)&v130 + 56) = v109;
                operator delete(v109);
              }
              v110 = *(void **)(*(_QWORD *)&v108 + 24);
              if (v110)
              {
                *(_QWORD *)(*(_QWORD *)&v108 + 32) = v110;
                operator delete(v110);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)&v108 + 8);
              v60 = v108;
              v111 = 2071181815;
LABEL_169:
              v61 = v111 | 0x1030C4000000000;
LABEL_170:
              MEMORY[0x219A19A08](*(_QWORD *)&v60, v61);
            }
          }
          break;
        default:
          goto LABEL_171;
      }
      break;
    case 7:
      v122 = 0;
      v123 = 0;
      v124 = 0;
      break;
    case 8:
      v62 = *a2;
      v63 = (unsigned int *)(*a2)[2];
      v125 = (char **)(*a2)[1];
      v126 = (double *)v63;
      if (v63)
      {
        v64 = v63 + 2;
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      v66 = *(_OWORD *)(v62 + 3);
      v67 = *(_OWORD *)(v62 + 7);
      v128 = *(_OWORD *)(v62 + 5);
      v129 = v67;
      *(_OWORD *)v127 = v66;
      turi::flexible_type_fail(0);
      v122 = 0;
      v123 = 0;
      v124 = 0;
      boost::detail::shared_count::~shared_count((unsigned int **)&v126);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v125, (uint64_t)(*a2 + 1));
      turi::flexible_type_fail(0);
      v122 = 0;
      v123 = 0;
      v124 = 0;
      if (*((_QWORD *)&v128 + 1))
      {
        *(_QWORD *)&v129 = *((_QWORD *)&v128 + 1);
        operator delete(*((void **)&v128 + 1));
      }
      if (v127[0])
      {
        v127[1] = v127[0];
        operator delete(v127[0]);
      }
      v10 = (std::__shared_weak_count *)v126;
      if (v126)
      {
        v11 = (unint64_t *)(v126 + 1);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
LABEL_171:
  v121 = *(_QWORD *)(*((_QWORD *)this + 37) + 96 * a3 + 56);
  if (!v121)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v121 + 48))(v121, &v122);
  v125 = &v122;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v125);
}

void sub_217FBDD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,int a23,char a24)
{
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  _QWORD *v48;
  _QWORD *v49;
  unsigned int v50;

  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a13);
  switch(a24)
  {
    case 2:
      v25 = a22;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_45;
      v43 = a22;
      if (!a22)
        goto LABEL_45;
      if (*((char *)a22 + 31) < 0)
        operator delete((void *)a22[1]);
      v44 = v43;
      v45 = 0x1012C404EF22A49;
      goto LABEL_44;
    case 3:
      v28 = a22;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (v30)
        goto LABEL_45;
      v46 = a22;
      if (!a22)
        goto LABEL_45;
      v47 = (void *)a22[1];
      if (v47)
      {
        a22[2] = v47;
        operator delete(v47);
      }
      v44 = v46;
      v45 = 0x1080C409938AC02;
      goto LABEL_44;
    case 4:
      v31 = a22;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (v33)
        goto LABEL_45;
      v48 = a22;
      if (!a22)
        goto LABEL_45;
      a13 = (void **)(a22 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a13);
      goto LABEL_36;
    case 5:
      v34 = a22;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_45;
      v48 = a22;
      if (!a22)
        goto LABEL_45;
      a13 = (void **)(a22 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a13);
LABEL_36:
      v44 = v48;
      v45 = 0x1020C405E66F15BLL;
      goto LABEL_44;
    case 8:
      v37 = a22;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_45;
      v49 = a22;
      if (!a22)
        goto LABEL_45;
      boost::detail::shared_count::~shared_count((unsigned int **)a22 + 2);
      v44 = v49;
      v50 = -235920773;
      goto LABEL_43;
    case 9:
      v40 = a22;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42 || !a22)
        goto LABEL_45;
      v44 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a22);
      v50 = 2071181815;
LABEL_43:
      v45 = v50 | 0x1030C4000000000;
LABEL_44:
      MEMORY[0x219A19A08](v44, v45);
LABEL_45:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_45;
  }
}

void turi::gl_sframe_writer_impl::write(turi::flexible_type const&,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sframe.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_output_iterators.size()", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sframe.cpp", "operator()", 1144, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::gl_sframe_writer_impl::write(turi::flexible_type const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FBE414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::gl_sframe_writer_impl::close(turi::gl_sframe_writer_impl *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *i;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  turi::unity_sframe *v13[2];

  v5 = (_QWORD *)*((_QWORD *)this + 37);
  for (i = (_QWORD *)*((_QWORD *)this + 38);
        i != v5;
        std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::destroy[abi:ne180100]((uint64_t)this + 312, i))
  {
    i -= 12;
  }
  *((_QWORD *)this + 38) = v5;
  turi::sframe::close(this);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v13);
  turi::unity_sframe::construct_from_sframe(v13[0], this);
  v12 = *(_OWORD *)v13;
  v13[0] = 0;
  v13[1] = 0;
  *a2 = off_24D91E9C0;
  a2[2] = 0;
  a2[1] = 0;
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a2 + 1, (uint64_t *)&v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)v13[1];
  if (v13[1])
  {
    v10 = (unint64_t *)((char *)v13[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_217FBE5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::plot(turi::gl_sframe *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 416))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_217FBE650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *turi::gl_sframe_writer::gl_sframe_writer(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  void **v9;

  *a1 = 0;
  v8 = operator new();
  turi::gl_sframe_writer_impl::gl_sframe_writer_impl(v8, a2, a3, a4);
  v9 = (void **)*a1;
  *a1 = v8;
  if (v9)
    std::default_delete<turi::gl_sframe_writer_impl>::operator()[abi:ne180100]((uint64_t)a1, v9);
  return a1;
}

void sub_217FBE6E4(_Unwind_Exception *a1)
{
  void ***v1;
  uint64_t v2;
  void **v4;

  MEMORY[0x219A19A08](v2, 0x10B2C40BFC2DDF7);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    std::default_delete<turi::gl_sframe_writer_impl>::operator()[abi:ne180100]((uint64_t)v1, v4);
  _Unwind_Resume(a1);
}

void turi::gl_sframe_writer::write(turi::gl_sframe_writer_impl **a1, uint64_t **a2, unint64_t a3)
{
  turi::gl_sframe_writer_impl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void **v19;
  unint64_t v20;
  unint64_t v21;
  void **v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  void **v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void **v34;
  void **v35[2];
  void **v36[3];

  v36[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v5 = *a1;
  *(void ***)((char *)v36 + 5) = (void **)0x400000000000000;
  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  v36[0] = (void **)v6;
  *(_QWORD *)v6 = 1;
  if (*(_QWORD *)v6 != 1)
  {
    v7 = operator new();
    v8 = *(uint64_t **)(v6 + 8);
    *(_QWORD *)v7 = *(_QWORD *)v6;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((_QWORD *)(v7 + 8), v8, *(uint64_t **)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - (_QWORD)v8) >> 4);
    v36[0] = (void **)v7;
    *(_QWORD *)v7 = 1;
    do
    {
      v9 = __ldaxr((unint64_t *)v6);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unint64_t *)v6));
    if (!v10)
    {
      v35[0] = (void **)(v6 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v35);
      MEMORY[0x219A19A08](v6, 0x1020C405E66F15BLL);
    }
  }
  v11 = (unint64_t *)v36[0];
  if ((uint64_t **)v36[0] + 1 != a2)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v36[0] + 1), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  turi::gl_sframe_writer_impl::write(v5, v36, a3);
  switch(BYTE4(v36[1]))
  {
    case 2:
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = v36[0];
        if (v36[0])
        {
          if (*((char *)v36[0] + 31) < 0)
            operator delete(v36[0][1]);
          v15 = v14;
          v16 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
      }
      break;
    case 3:
      do
      {
        v26 = __ldaxr(v11);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v11));
      if (!v27)
      {
        v28 = v36[0];
        if (v36[0])
        {
          v29 = v36[0][1];
          if (v29)
          {
            v36[0][2] = v29;
            operator delete(v29);
          }
          v15 = v28;
          v16 = 0x1080C409938AC02;
          goto LABEL_43;
        }
      }
      break;
    case 4:
      do
      {
        v17 = __ldaxr(v11);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v11));
      if (!v18)
      {
        v19 = v36[0];
        if (v36[0])
        {
          v35[0] = v36[0] + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v35);
          goto LABEL_37;
        }
      }
      break;
    case 5:
      do
      {
        v30 = __ldaxr(v11);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v11));
      if (!v31)
      {
        v19 = v36[0];
        if (v36[0])
        {
          v35[0] = v36[0] + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v35);
LABEL_37:
          v15 = v19;
          v16 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
      }
      break;
    case 8:
      do
      {
        v32 = __ldaxr(v11);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v11));
      if (!v33)
      {
        v34 = v36[0];
        if (v36[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v36[0] + 2);
          v15 = v34;
          v25 = -235920773;
          goto LABEL_42;
        }
      }
      break;
    case 9:
      do
      {
        v20 = __ldaxr(v11);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v11));
      if (!v21)
      {
        v22 = v36[0];
        if (v36[0])
        {
          v23 = v36[0][6];
          if (v23)
          {
            v36[0][7] = v23;
            operator delete(v23);
          }
          v24 = v22[3];
          if (v24)
          {
            v22[4] = v24;
            operator delete(v24);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v22 + 1));
          v15 = v22;
          v25 = 2071181815;
LABEL_42:
          v16 = v25 | 0x1030C4000000000;
LABEL_43:
          MEMORY[0x219A19A08](v15, v16);
        }
      }
      break;
    default:
      return;
  }
}

void sub_217FBEA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12)
{
  unint64_t *v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  MEMORY[0x219A19A08](v13, 0x1020C405E66F15BLL);
  do
  {
    v15 = __ldaxr(v12);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v12));
  if (!v16)
  {
    v17 = a12;
    if (a12)
    {
      a10 = (void **)(a12 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      MEMORY[0x219A19A08](v17, 0x1020C405E66F15BLL);
    }
  }
  _Unwind_Resume(a1);
}

void turi::gl_sframe_writer::close(turi::gl_sframe_writer_impl **this@<X0>, _QWORD *a2@<X8>)
{
  turi::gl_sframe_writer_impl::close(*this, a2);
}

void turi::gl_sframe_writer::~gl_sframe_writer(void ***this)
{
  void **v1;

  v1 = *this;
  *this = 0;
  if (v1)
    std::default_delete<turi::gl_sframe_writer_impl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

turi::gl_sframe *std::pair<turi::gl_sframe,turi::gl_sframe>::pair[abi:ne180100]<true,0>(turi::gl_sframe *a1)
{
  turi::gl_sframe *v2;

  v2 = turi::gl_sframe::gl_sframe(a1);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)((char *)v2 + 24));
  return a1;
}

void sub_217FBEDD0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 1));
  _Unwind_Resume(a1);
}

void sub_217FBEF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<turi::unity_sarray_base>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<turi::unity_sarray_base>>,0>(uint64_t a1)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::gl_sarray_range::iterator,turi::gl_sarray_range::iterator,std::insert_iterator<std::vector<turi::flexible_type>>>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X5>, _QWORD **a5@<X6>, uint64_t a6@<X8>)
{
  unint64_t v10;
  double result;
  __int128 v12;

  *(_QWORD *)&v12 = a1;
  *((_QWORD *)&v12 + 1) = a2;
  if (a1 != a3)
  {
    do
    {
      v10 = turi::gl_sarray_range::iterator::dereference((turi::gl_sarray_range::iterator *)&v12);
      a5 = std::vector<turi::flexible_type>::insert(a4, (uint64_t)a5, v10) + 2;
      turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)&v12);
    }
    while ((_QWORD)v12 != a3);
  }
  result = *(double *)&v12;
  *(_OWORD *)a6 = v12;
  *(_QWORD *)(a6 + 16) = a4;
  *(_QWORD *)(a6 + 24) = a5;
  return result;
}

_QWORD **std::vector<turi::flexible_type>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  _QWORD **v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;

  v4 = (_QWORD **)a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v16 = *a1;
    v17 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if (v17 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v18 = (a2 - v16) >> 4;
    v19 = v8 - v16;
    v20 = v19 >> 3;
    if (v19 >> 3 <= v17)
      v20 = ((uint64_t)(v6 - *a1) >> 4) + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    v65 = v7;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v7, v21);
    else
      v22 = 0;
    v61 = v22;
    v62 = &v22[16 * v18];
    v63 = v62;
    v64 = &v22[16 * v21];
    std::__split_buffer<turi::flexible_type>::push_back[abi:ne180100](&v61, (uint64_t *)a3);
    v4 = (_QWORD **)std::vector<turi::flexible_type>::__swap_out_circular_buffer((uint64_t)a1, &v61, (uint64_t *)v4);
    std::__split_buffer<turi::flexible_type>::~__split_buffer(&v61);
  }
  else if (a2 == v6)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 12) = 0;
    if (a2 != a3)
    {
      v23 = *(_QWORD *)a3;
      *(_QWORD *)(a2 + 5) = *(_QWORD *)(a3 + 5);
      *(_QWORD *)a2 = v23;
      v24 = *(unsigned __int8 *)(a3 + 12);
      *(_BYTE *)(a2 + 12) = v24;
      if (v24 <= 9 && ((1 << v24) & 0x33C) != 0)
      {
        v25 = *(unint64_t **)a2;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
      }
    }
    a1[1] = a2 + 16;
  }
  else
  {
    std::vector<turi::flexible_type>::__move_range((uint64_t)a1, (unint64_t **)a2, v6, a2 + 16);
    if ((unint64_t)v4 <= a3)
      a3 += 16 * (a1[1] > a3);
    if ((_QWORD **)a3 != v4)
    {
      switch(*((_BYTE *)v4 + 12))
      {
        case 2:
          v10 = *v4;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            v13 = (uint64_t)*v4;
            if (!*v4)
              goto LABEL_61;
            if (*(char *)(v13 + 31) < 0)
              operator delete(*(void **)(v13 + 8));
            v14 = (_QWORD *)v13;
            v15 = 0x1012C404EF22A49;
            goto LABEL_60;
          }
          break;
        case 3:
          v28 = *v4;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = (uint64_t)*v4;
            if (!*v4)
              goto LABEL_61;
            v32 = *(void **)(v31 + 8);
            if (v32)
            {
              *(_QWORD *)(v31 + 16) = v32;
              operator delete(v32);
            }
            v14 = (_QWORD *)v31;
            v15 = 0x1080C409938AC02;
            goto LABEL_60;
          }
          break;
        case 4:
          v33 = *v4;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            v36 = (uint64_t)*v4;
            if (!*v4)
              goto LABEL_61;
            v61 = (void *)(v36 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
            goto LABEL_48;
          }
          break;
        case 5:
          v37 = *v4;
          do
          {
            v38 = __ldaxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
          {
            v36 = (uint64_t)*v4;
            if (!*v4)
              goto LABEL_61;
            v61 = (void *)(v36 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
LABEL_48:
            v14 = (_QWORD *)v36;
            v15 = 0x1020C405E66F15BLL;
            goto LABEL_60;
          }
          break;
        case 8:
          v40 = *v4;
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            v43 = (uint64_t)*v4;
            if (!*v4)
              goto LABEL_61;
            boost::detail::shared_count::~shared_count((unsigned int **)(v43 + 16));
            v14 = (_QWORD *)v43;
            v44 = -235920773;
            goto LABEL_59;
          }
          break;
        case 9:
          v45 = *v4;
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (!v47)
          {
            if (*v4)
            {
              v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v4);
              v44 = 2071181815;
LABEL_59:
              v15 = v44 | 0x1030C4000000000;
LABEL_60:
              MEMORY[0x219A19A08](v14, v15);
            }
LABEL_61:
            *v4 = 0;
          }
          break;
        default:
          break;
      }
      v48 = *(_QWORD *)a3;
      *(_QWORD **)((char *)v4 + 5) = *(_QWORD **)(a3 + 5);
      *v4 = (_QWORD *)v48;
      LODWORD(v48) = *(unsigned __int8 *)(a3 + 12);
      *((_BYTE *)v4 + 12) = v48;
      switch((int)v48)
      {
        case 2:
          v49 = *v4;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 + 1, v49));
          break;
        case 3:
          v51 = *v4;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 + 1, v51));
          break;
        case 4:
          v53 = *v4;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
          break;
        case 5:
          v55 = *v4;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 + 1, v55));
          break;
        case 8:
          v57 = *v4;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 + 1, v57));
          break;
        case 9:
          v59 = *v4;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 + 1, v59));
          break;
        default:
          return v4;
      }
    }
  }
  return v4;
}

void sub_217FBF5C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unint64_t **std::vector<turi::flexible_type>::__move_range(uint64_t a1, unint64_t **a2, unint64_t a3, uint64_t a4)
{
  unint64_t **v6;
  unint64_t **v7;
  unint64_t **v8;
  unint64_t **v9;
  unint64_t *v10;
  char v12;

  v6 = *(unint64_t ***)(a1 + 8);
  v7 = (unint64_t **)((char *)v6 + (_QWORD)a2 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(unint64_t ***)(a1 + 8);
    do
    {
      *v8 = 0;
      *((_DWORD *)v8 + 2) = 0;
      *((_BYTE *)v8 + 12) = 0;
      v10 = *v9;
      *(unint64_t **)((char *)v8 + 5) = *(unint64_t **)((char *)v9 + 5);
      *v8 = v10;
      *((_BYTE *)v8 + 12) = *((_BYTE *)v9 + 12);
      *((_BYTE *)v9 + 12) = 0;
      v8 += 2;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>((uint64_t)&v12, a2, v7, v6);
}

_QWORD *std::__split_buffer<turi::flexible_type>::push_back[abi:ne180100](_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  int64x2_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = result;
  v4 = result[2];
  if (v4 == result[3])
  {
    v5 = (uint64_t *)result[1];
    v6 = (uint64_t)v5 - *result;
    if ((unint64_t)v5 <= *result)
    {
      if (v4 == *result)
        v13 = 1;
      else
        v13 = (v4 - *result) >> 3;
      v14 = result[4];
      v32 = v3[4];
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v14, v13);
      v17 = &v15[16 * (v13 >> 2)];
      v18 = v3[1];
      v19 = v3[2] - v18;
      if (v19)
      {
        v20 = &v17[v19];
        v21 = &v15[16 * (v13 >> 2)];
        do
        {
          *(_QWORD *)v21 = 0;
          *((_DWORD *)v21 + 2) = 0;
          v21[12] = 0;
          v22 = *(_QWORD *)v18;
          *(_QWORD *)(v21 + 5) = *(_QWORD *)(v18 + 5);
          *(_QWORD *)v21 = v22;
          v21[12] = *(_BYTE *)(v18 + 12);
          *(_BYTE *)(v18 + 12) = 0;
          v21 += 16;
          v18 += 16;
        }
        while (v21 != v20);
        v23 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        v23 = vdupq_n_s64(v18);
        v20 = &v15[16 * (v13 >> 2)];
      }
      v29 = (void *)*v3;
      *v3 = v15;
      v3[1] = v17;
      v30 = v23;
      v24 = v3[3];
      v3[2] = v20;
      v3[3] = &v15[16 * v16];
      v31 = v24;
      result = std::__split_buffer<turi::flexible_type>::~__split_buffer(&v29);
      v4 = v3[2];
    }
    else
    {
      v7 = v6 >> 4;
      v8 = v6 >> 4 < -1;
      v9 = (v6 >> 4) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = v10 >> 1;
      result = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>((uint64_t)&v29, v5, (uint64_t *)v4, (uint64_t)&v5[-2 * (v10 >> 1)]);
      v4 = v12;
      v3[1] -= 16 * v11;
      v3[2] = v12;
    }
  }
  *(_QWORD *)v4 = 0;
  *(_DWORD *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 12) = 0;
  if ((uint64_t *)v4 != a2)
  {
    v25 = *a2;
    *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)v4 = v25;
    v26 = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(v4 + 12) = v26;
    if (v26 <= 9 && ((1 << v26) & 0x33C) != 0)
    {
      v27 = *(unint64_t **)v4;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
    }
  }
  v3[2] += 16;
  return result;
}

uint64_t std::vector<turi::flexible_type>::__swap_out_circular_buffer(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::flexible_type>,std::reverse_iterator<turi::flexible_type*>,std::reverse_iterator<turi::flexible_type*>,std::reverse_iterator<turi::flexible_type*>>(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(v7, a3, *(uint64_t **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

unint64_t **std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>(uint64_t a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  unint64_t **v7;
  unint64_t **v8;
  unint64_t **v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  void *v37;
  void *v38;
  unint64_t *v39;
  void **v41;

  if (a3 != a2)
  {
    v7 = a3;
    do
    {
      v8 = v7 - 2;
      v9 = a4 - 2;
      if (v7 != a4)
      {
        switch(*((_BYTE *)a4 - 4))
        {
          case 2:
            v10 = *v9;
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              v13 = *v9;
              if (!*v9)
                goto LABEL_46;
              if (*((char *)v13 + 31) < 0)
                operator delete((void *)v13[1]);
              v14 = v13;
              v15 = 0x1012C404EF22A49;
              goto LABEL_45;
            }
            break;
          case 3:
            v16 = *v9;
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              v19 = *v9;
              if (!*v9)
                goto LABEL_46;
              v20 = (void *)v19[1];
              if (v20)
              {
                v19[2] = (unint64_t)v20;
                operator delete(v20);
              }
              v14 = v19;
              v15 = 0x1080C409938AC02;
              goto LABEL_45;
            }
            break;
          case 4:
            v21 = *v9;
            do
            {
              v22 = __ldaxr(v21);
              v23 = v22 - 1;
            }
            while (__stlxr(v23, v21));
            if (!v23)
            {
              v24 = *v9;
              if (!*v9)
                goto LABEL_46;
              v41 = (void **)(v24 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
              goto LABEL_29;
            }
            break;
          case 5:
            v25 = *v9;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v24 = *v9;
              if (!*v9)
                goto LABEL_46;
              v41 = (void **)(v24 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_29:
              v14 = v24;
              v15 = 0x1020C405E66F15BLL;
              goto LABEL_45;
            }
            break;
          case 8:
            v28 = *v9;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              v31 = *v9;
              if (!*v9)
                goto LABEL_46;
              boost::detail::shared_count::~shared_count((unsigned int **)v31 + 2);
              v14 = v31;
              v32 = -235920773;
              goto LABEL_44;
            }
            break;
          case 9:
            v33 = *v9;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              v36 = *v9;
              if (*v9)
              {
                v37 = (void *)v36[6];
                if (v37)
                {
                  v36[7] = (unint64_t)v37;
                  operator delete(v37);
                }
                v38 = (void *)v36[3];
                if (v38)
                {
                  v36[4] = (unint64_t)v38;
                  operator delete(v38);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v36 + 1));
                v14 = v36;
                v32 = 2071181815;
LABEL_44:
                v15 = v32 | 0x1030C4000000000;
LABEL_45:
                MEMORY[0x219A19A08](v14, v15);
              }
LABEL_46:
              *v9 = 0;
            }
            break;
          default:
            break;
        }
        v39 = *v8;
        *(unint64_t **)((char *)a4 - 11) = *(unint64_t **)((char *)v7 - 11);
        *v9 = v39;
        *((_BYTE *)a4 - 4) = *((_BYTE *)v7 - 4);
        *((_BYTE *)v7 - 4) = 0;
      }
      a4 -= 2;
      v7 -= 2;
    }
    while (v8 != a2);
  }
  return a3;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type *,turi::flexible_type *,turi::flexible_type *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void **v38;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
      {
        switch(*(_BYTE *)(a4 + 12))
        {
          case 2:
            v7 = *(unint64_t **)a4;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              v10 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              if (*((char *)v10 + 31) < 0)
                operator delete((void *)v10[1]);
              v11 = v10;
              v12 = 0x1012C404EF22A49;
              goto LABEL_44;
            }
            break;
          case 3:
            v13 = *(unint64_t **)a4;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              v17 = (void *)v16[1];
              if (v17)
              {
                v16[2] = (unint64_t)v17;
                operator delete(v17);
              }
              v11 = v16;
              v12 = 0x1080C409938AC02;
              goto LABEL_44;
            }
            break;
          case 4:
            v18 = *(unint64_t **)a4;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              v38 = (void **)(v21 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v38);
              goto LABEL_28;
            }
            break;
          case 5:
            v22 = *(unint64_t **)a4;
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              v21 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              v38 = (void **)(v21 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v38);
LABEL_28:
              v11 = v21;
              v12 = 0x1020C405E66F15BLL;
              goto LABEL_44;
            }
            break;
          case 8:
            v25 = *(unint64_t **)a4;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              v28 = *(unint64_t **)a4;
              if (!*(_QWORD *)a4)
                goto LABEL_45;
              boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
              v11 = v28;
              v29 = -235920773;
              goto LABEL_43;
            }
            break;
          case 9:
            v30 = *(unint64_t **)a4;
            do
            {
              v31 = __ldaxr(v30);
              v32 = v31 - 1;
            }
            while (__stlxr(v32, v30));
            if (!v32)
            {
              v33 = *(unint64_t **)a4;
              if (*(_QWORD *)a4)
              {
                v34 = (void *)v33[6];
                if (v34)
                {
                  v33[7] = (unint64_t)v34;
                  operator delete(v34);
                }
                v35 = (void *)v33[3];
                if (v35)
                {
                  v33[4] = (unint64_t)v35;
                  operator delete(v35);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
                v11 = v33;
                v29 = 2071181815;
LABEL_43:
                v12 = v29 | 0x1030C4000000000;
LABEL_44:
                MEMORY[0x219A19A08](v11, v12);
              }
LABEL_45:
              *(_QWORD *)a4 = 0;
            }
            break;
          default:
            break;
        }
        v36 = *v5;
        *(_QWORD *)(a4 + 5) = *(uint64_t *)((char *)v5 + 5);
        *(_QWORD *)a4 = v36;
        *(_BYTE *)(a4 + 12) = *((_BYTE *)v5 + 12);
        *((_BYTE *)v5 + 12) = 0;
      }
      v5 += 2;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 12) = 0;
      v5 = *a2;
      *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)a2 + 5);
      *(_QWORD *)v4 = v5;
      *(_BYTE *)(v4 + 12) = *((_BYTE *)a2 + 12);
      *((_BYTE *)a2 + 12) = 0;
      v4 += 16;
      a2 += 2;
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::flexible_type>,turi::flexible_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t *std::list<std::shared_ptr<turi::unity_sarray_base>>::list(uint64_t *a1, uint64_t a2)
{
  uint64_t i;

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (i = a2; ; std::list<std::shared_ptr<turi::unity_sarray_base>>::push_back(a1, (_QWORD *)(i + 16)))
  {
    i = *(_QWORD *)(i + 8);
    if (i == a2)
      break;
  }
  return a1;
}

void sub_217FBFE40(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<std::shared_ptr<turi::unity_sarray_base>>::push_back(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  result = operator new(0x20uLL);
  v5 = a2[1];
  result[2] = *a2;
  result[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v8 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void std::__tree<std::__value_type<std::string,turi::gl_sarray>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::gl_sarray>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::gl_sarray>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::gl_sarray>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::gl_sarray>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::gl_sarray>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::gl_sarray>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::gl_sarray>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::gl_sarray>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::gl_sarray>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::gl_sarray>,0>(uint64_t a1)
{
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::gl_sarray>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::gl_sarray>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::gl_sarray>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,turi::gl_sarray>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::gl_sarray>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::gl_sarray>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::gl_sarray>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::gl_sarray>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::gl_sarray>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::gl_sarray>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::gl_sarray>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::gl_sarray>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217FC0034(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::gl_sarray>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::gl_sarray>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::gl_sarray>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)&this[1]);
  return this;
}

void sub_217FC00A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::gl_sarray>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::gl_sarray>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::gl_sarray>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D91EAD8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_217FC0170(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::unity_sframe *,std::shared_ptr<turi::unity_sframe>::__shared_ptr_default_delete<turi::unity_sframe,turi::unity_sframe>,std::allocator<turi::unity_sframe>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::unity_sframe *,std::shared_ptr<turi::unity_sframe>::__shared_ptr_default_delete<turi::unity_sframe,turi::unity_sframe>,std::allocator<turi::unity_sframe>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::vector<std::vector<turi::flexible_type>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_217FC0274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x88uLL);
  _ZNSt3__120__shared_ptr_emplaceIN4turi12unity_sframeENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_217FC02C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4turi12unity_sframeENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D91EB50;
  a1[1] = 0;
  turi::unity_sframe::unity_sframe((turi::unity_sframe *)(a1 + 3));
  return a1;
}

void sub_217FC0310(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::unity_sframe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91EB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::unity_sframe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91EB50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::unity_sframe>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::__shared_ptr_pointer<turi::sframe_reader  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sframe_reader  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t *v4;
  const void **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_217FC043C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_217FC0554(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++v15;
  std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer(v14);
  return v12;
}

void sub_217FC06EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

std::string *std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, turi::gl_sarray *a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)&this[1], a3);
  return this;
}

void sub_217FC096C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_217FC0AEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_217FC0AF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<turi::flex_type_enum>::__assign_with_size[abi:ne180100]<turi::flex_type_enum const*,turi::flex_type_enum const*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](v7, v11);
    v9 = (char *)v7[1];
    goto LABEL_17;
  }
  v12 = (_BYTE *)result[1];
  v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    v16 = a3 - __src;
    if (v16)
      result = memmove(v9, __src, v16);
    v15 = &v9[v16];
    goto LABEL_20;
  }
  v14 = &__src[v13];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v13);
    v9 = (char *)v7[1];
  }
  if (a3 != v14)
    result = memmove(v9, v14, a3 - v14);
  v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

std::string *std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::pair[abi:ne180100]<std::string const&,turi::aggregate::groupby_descriptor_type,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  this[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  return this;
}

uint64_t std::map<std::string,turi::aggregate::groupby_descriptor_type>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = a3 << 6;
    do
    {
      std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 8;
      v6 -= 64;
    }
    while (v6);
  }
  return a1;
}

void sub_217FC0CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::aggregate::groupby_descriptor_type> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__construct_node<std::pair<std::string const,turi::aggregate::groupby_descriptor_type> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::__construct_node<std::pair<std::string const,turi::aggregate::groupby_descriptor_type> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,turi::aggregate::groupby_descriptor_type>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_217FC0DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_217FC0E90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  std::vector<int>::pointer end;
  int *v7;
  std::vector<int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_217FC0F10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::string>::deque<std::__wrap_iter<std::string*>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  std::deque<std::string>::__append_with_size[abi:ne180100]<std::__wrap_iter<std::string*>>((_QWORD *)a1, a2, 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3));
  return a1;
}

void sub_217FC0F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::string>::__append_with_size[abi:ne180100]<std::__wrap_iter<std::string*>>(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = 170 * ((v7 - v6) >> 3) - 1;
  v9 = a1[5] + a1[4];
  v10 = v8 - v9;
  if (a3 > v10)
  {
    std::deque<std::string>::__add_back_capacity(a1, a3 - v10);
    v6 = a1[1];
    v7 = a1[2];
    v9 = a1[4] + a1[5];
  }
  v11 = (_QWORD *)(v6 + 8 * (v9 / 0xAA));
  if (v7 == v6)
    v12 = 0;
  else
    v12 = *v11 + 24 * (v9 % 0xAA);
  v21 = (_QWORD *)(v6 + 8 * (v9 / 0xAA));
  v22 = v12;
  std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100](&v21, a3);
  v13 = v22;
  if (v12 != v22)
  {
    v14 = v21;
    do
    {
      if (v11 == v14)
        v15 = v13;
      else
        v15 = *v11 + 4080;
      if (v12 == v15)
      {
        v15 = v12;
      }
      else
      {
        v16 = 0;
        do
        {
          v17 = (std::string *)(v12 + v16);
          v18 = (__int128 *)(a2 + v16);
          if (*(char *)(a2 + v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
          }
          else
          {
            v19 = *v18;
            v17->__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
          }
          v16 += 24;
        }
        while (v12 + v16 != v15);
        a2 += v16;
      }
      a1[5] -= 0x5555555555555555 * ((uint64_t)(v15 - v12) >> 3);
      if (v11 == v14)
        break;
      v20 = v11[1];
      ++v11;
      v12 = v20;
    }
    while (v20 != v13);
  }
}

void sub_217FC110C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 40) -= 0x5555555555555555 * (v2 >> 3);
  _Unwind_Resume(a1);
}

void std::deque<std::string>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0xAA)
    v6 = v5 / 0xAA + 1;
  else
    v6 = v5 / 0xAA;
  v7 = a1[4];
  if (v6 >= v7 / 0xAA)
    v8 = v7 / 0xAA;
  else
    v8 = v6;
  if (v6 <= v7 / 0xAA)
  {
    for (a1[4] = v7 - 170 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF0uLL);
          std::__split_buffer<char *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF0uLL);
          std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 169;
          else
            v64 = 170;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 170 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -170 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFF0uLL);
        std::__split_buffer<char *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<char *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_217FC1660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 169 - v3;
      v6 = &v2[-(v5 / 0xAA)];
      *result = v6;
      v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *result = &v2[v3 / 0xAA];
      v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t std::deque<std::string>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          v10 = (unint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 85;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 170;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::reverse_iterator<std::pair<std::string,unsigned long>*>,std::reverse_iterator<std::pair<std::string,unsigned long>*>,std::reverse_iterator<std::pair<std::string,unsigned long>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::reverse_iterator<std::pair<std::string,unsigned long>*>,std::reverse_iterator<std::pair<std::string,unsigned long>*>,std::reverse_iterator<std::pair<std::string,unsigned long>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::reverse_iterator<std::pair<std::string,unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::reverse_iterator<std::pair<std::string,unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::reverse_iterator<std::pair<std::string,unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::reverse_iterator<std::pair<std::string,unsigned long>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::string,unsigned long>>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,unsigned long>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::deque<std::string>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0xAA)
    a2 = 1;
  if (v2 < 0x154)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

void turi::table_printer::print_row<turi::flexible_type>(std::vector<turi::flexible_type> const&)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"row_string.size()", 17);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"format.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", "operator()", 288, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  void turi::table_printer::print_row<turi::flexible_type>(std::vector<turi::flexible_type> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FC1CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::table_internal::table_printer_element<turi::flexible_type,void>::print(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  turi::table_internal::_print_flexible_type(a2, a3, (turi::flexible_type_impl *)(a1 + 8));
}

uint64_t turi::table_internal::table_printer_element<turi::flexible_type,void>::get_value@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  if (result + 8 != a2)
  {
    *(_QWORD *)(a2 + 5) = *(_QWORD *)(result + 13);
    *(_QWORD *)a2 = *(_QWORD *)(result + 8);
    v2 = *(unsigned __int8 *)(result + 20);
    *(_BYTE *)(a2 + 12) = v2;
    v3 = v2 > 9;
    v4 = (1 << v2) & 0x33C;
    if (!v3 && v4 != 0)
    {
      v6 = *(unint64_t **)a2;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  return result;
}

uint64_t turi::table_internal::table_printer_element<turi::flexible_type,void>::~table_printer_element(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void **v32;

  *(_QWORD *)a1 = &unk_24D91EC00;
  switch(*(_BYTE *)(a1 + 20))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 8);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 8);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 8);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 8);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 8);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 8);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if (v16)
        {
          v32 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 8);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 8);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 8);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 8);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sframe_reader_buffer,std::allocator<turi::sframe_reader_buffer>,std::shared_ptr<turi::sframe_reader> &,unsigned long &,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<turi::sframe_reader_buffer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sframe_reader> &,unsigned long &,unsigned long &,std::allocator<turi::sframe_reader_buffer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_217FC2028(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sframe_reader_buffer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sframe_reader> &,unsigned long &,unsigned long &,std::allocator<turi::sframe_reader_buffer>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_24D91EC48;
  a1[1] = 0;
  std::allocator<turi::sframe_reader_buffer>::construct[abi:ne180100]<turi::sframe_reader_buffer,std::shared_ptr<turi::sframe_reader> &,unsigned long &,unsigned long &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_217FC2090(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sframe_reader_buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91EC48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sframe_reader_buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91EC48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::sframe_reader_buffer>::__on_zero_shared(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 72);
  v2 = v1;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::allocator<turi::sframe_reader_buffer>::construct[abi:ne180100]<turi::sframe_reader_buffer,std::shared_ptr<turi::sframe_reader> &,unsigned long &,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = a3[1];
  v11 = *a3;
  v12 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  turi::sframe_reader_buffer::sframe_reader_buffer(a2, &v11, *a4, *a5, 1024);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217FC21C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_reader_buffer::sframe_reader_buffer(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  v9 = a1 + 48;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(a1 + 48), a2);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  v10 = *(_QWORD *)(*(_QWORD *)v9 + 40);
  if (v10 >= a4)
    v10 = a4;
  *(_QWORD *)(a1 + 80) = a3;
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = a5;
  *(_QWORD *)(a1 + 104) = a3;
  turi::sframe_rows::clear((turi::sframe_rows *)a1);
  return a1;
}

void sub_217FC226C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 96 * a2;
      v14 = 96 * a2;
      v15 = (_QWORD *)(v7 + 88);
      do
      {
        *(v15 - 8) = 0;
        *(v15 - 4) = 0;
        *v15 = 0;
        v15 += 12;
        v14 -= 96;
      }
      while (v14);
    }
    else
    {
      v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>((uint64_t)result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[96 * v8];
    v22 = &v12[96 * v11];
    v16 = &v20[96 * a2];
    v17 = 96 * a2;
    v18 = v20 + 88;
    do
    {
      *(v18 - 8) = 0;
      *(v18 - 4) = 0;
      *v18 = 0;
      v18 += 12;
      v17 -= 96;
    }
    while (v17);
    v21 = v16;
    std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_217FC23D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>,std::function<void ()(turi::sframe_rows const&)>*,std::function<void ()(turi::sframe_rows const&)>*>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>,std::function<void ()(turi::sframe_rows const&)>*,std::function<void ()(turi::sframe_rows const&)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 96;
      std::allocator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::construct[abi:ne180100]<std::function<void ()(turi::sframe_rows const&)>,std::function<void ()(turi::sframe_rows const&)>>(a1, v7 - 96, v9);
      v7 = *((_QWORD *)&v16 + 1) - 96;
      *((_QWORD *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::allocator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::construct[abi:ne180100]<std::function<void ()(turi::sframe_rows const&)>,std::function<void ()(turi::sframe_rows const&)>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](a2, a3);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](a2 + 32, a3 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a2 + 64, a3 + 64);
}

uint64_t std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::vector<turi::flexible_type> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::default_delete<turi::gl_sframe_writer_impl>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = a2 + 37;
    std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    turi::sframe::~sframe((turi::sframe *)a2);
    return MEMORY[0x219A19A08]();
  }
  return result;
}

unint64_t *OUTLINED_FUNCTION_27_1(unint64_t *result)
{
  __ldaxr(result);
  return result;
}

void __cxx_global_var_init_75_0()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_gl_sframe_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void std::__shared_ptr_emplace<turi::unity_sgraph>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91ECE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::unity_sgraph>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91ECE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::unity_sgraph>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t _GLOBAL__sub_I_gl_sgraph_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t *turi::globals::get_global_registry(turi::globals *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    turi::globals::get_global_registry(void)::global_registry = 0;
    qword_254FEE258 = 0;
    qword_254FEE260 = 0;
    __cxa_atexit((void (*)(void *))std::vector<turi::globals::global_value>::~vector[abi:ne180100], &turi::globals::get_global_registry(void)::global_registry, &dword_217E69000);
  }
  return &turi::globals::get_global_registry(void)::global_registry;
}

void **std::vector<turi::globals::global_value>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<turi::globals::global_value>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t *turi::globals::get_global_registry_map(turi::globals *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    qword_254FEE280 = 0;
    qword_254FEE278 = 0;
    turi::globals::get_global_registry_map(void)::global_registry_map = (uint64_t)&qword_254FEE278;
    __cxa_atexit((void (*)(void *))std::map<std::string,unsigned long>::~map[abi:ne180100], &turi::globals::get_global_registry_map(void)::global_registry_map, &dword_217E69000);
  }
  return &turi::globals::get_global_registry_map(void)::global_registry_map;
}

uint64_t std::map<std::string,unsigned long>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

turi::globals *turi::globals::register_global<double>::register_global(turi::globals *a1, std::string::size_type a2, uint64_t a3, int a4, uint64_t a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  uint64_t *global_registry;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  std::string *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  cppipc *v31;
  int v32;
  file_logger *v33;
  file_logger *v34;
  _QWORD *v35;
  file_logger *v36;
  file_logger *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  _QWORD *exception;
  _QWORD *v53;
  _QWORD *v54;
  std::string v55;
  std::string v56;
  std::string v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;
  _BYTE v61[24];
  _BYTE *v62;
  std::string v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  turi::globals::get_global_registry_map(a1);
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2))
  {
    v10 = (int *)global_logger();
    if (v10[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v10))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v11 = (file_logger *)global_logger();
      started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 159, 1);
      v13 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v13 && *((_BYTE *)v13 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Configuration variable ", 23);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v57 = *(std::string *)a2;
      v20 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v57);
      v21 = pthread_getspecific(*(_QWORD *)(v20 + 592));
      if (v21 && *((_BYTE *)v21 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)" already registered", 19);
      v22 = pthread_getspecific(*(_QWORD *)(v20 + 592));
      if (v22)
      {
        if (*((_BYTE *)v22 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(v22[2] - 24) + 16));
          v23 = std::locale::use_facet((const std::locale *)&v63, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
          std::locale::~locale((std::locale *)&v63);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v20);
          if (*(_DWORD *)(v20 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      {
        v24 = &v57;
LABEL_80:
        operator delete(v24->__r_.__value_.__l.__data_);
        return a1;
      }
    }
    return a1;
  }
  global_registry = turi::globals::get_global_registry(0);
  v16 = turi::globals::get_global_registry(void)::global_registry;
  v15 = qword_254FEE258;
  turi::globals::get_global_registry_map((turi::globals *)global_registry);
  v63.__r_.__value_.__r.__words[0] = a2;
  v17 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v63);
  v17[7] = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 4);
  turi::globals::get_global_registry((turi::globals *)v17);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v63 = *(std::string *)a2;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v58, a5);
  v60 = a3;
  v18 = v61;
  v19 = (uint64_t)v59;
  if (!v59)
    goto LABEL_15;
  if (v59 != v58)
  {
    v19 = (*(uint64_t (**)(void))(*v59 + 16))();
LABEL_15:
    v62 = (_BYTE *)v19;
    goto LABEL_26;
  }
  v62 = v61;
  (*(void (**)(_QWORD *, _BYTE *))(v58[0] + 24))(v58, v61);
LABEL_26:
  v65 = v60;
  std::__function::__value_func<BOOL ()(double)>::__value_func[abi:ne180100]((uint64_t)&v66, (uint64_t)v61);
  v64 = 0;
  v67 = a4;
  v25 = qword_254FEE258;
  if (qword_254FEE258 >= (unint64_t)qword_254FEE260)
  {
    v27 = std::vector<turi::globals::global_value>::__push_back_slow_path<turi::globals::global_value>(&turi::globals::get_global_registry(void)::global_registry, (__int128 *)&v63);
  }
  else
  {
    v26 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
    *(_QWORD *)(qword_254FEE258 + 16) = *((_QWORD *)&v63.__r_.__value_.__l + 2);
    *(_OWORD *)v25 = v26;
    memset(&v63, 0, sizeof(v63));
    boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant(v25 + 24, (unsigned int *)&v64);
    *(_BYTE *)(v25 + 72) = v67;
    v27 = v25 + 80;
  }
  qword_254FEE258 = v27;
  boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content(&v64);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v62 == v61)
  {
    v28 = 4;
  }
  else
  {
    if (!v62)
      goto LABEL_36;
    v28 = 5;
    v18 = v62;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v28))(v18);
LABEL_36:
  v29 = v59;
  if (v59 == v58)
  {
    v30 = 4;
    v29 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_41;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_41:
  v31 = (cppipc *)global_logger();
  v32 = *((_DWORD *)v31 + 169);
  if (a4)
  {
    if (v32 <= 2)
    {
      if (cppipc::must_cancel(v31))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v33 = (file_logger *)global_logger();
      v34 = file_logger::start_stream(v33, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 168, 1);
      v35 = pthread_getspecific(*((_QWORD *)v34 + 74));
      if (v35 && *((_BYTE *)v35 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35 + 2, (uint64_t)"Registering runtime modifiable configuration variable ", 54);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v56 = *(std::string *)a2;
      v39 = file_logger::operator<<<std::string>((uint64_t)v34, (uint64_t)&v56);
      v40 = pthread_getspecific(*(_QWORD *)(v39 + 592));
      if (v40 && *((_BYTE *)v40 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)" = ", 3);
      v41 = file_logger::operator<<<double>(v39);
      v42 = pthread_getspecific(*(_QWORD *)(v41 + 592));
      if (v42 && *((_BYTE *)v42 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42 + 2, (uint64_t)" (double)", 9);
      v43 = pthread_getspecific(*(_QWORD *)(v41 + 592));
      if (v43)
      {
        if (*((_BYTE *)v43 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(v43[2] - 24) + 16));
          v44 = std::locale::use_facet((const std::locale *)&v63, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
          std::locale::~locale((std::locale *)&v63);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v41);
          if (*(_DWORD *)(v41 + 600) == 7)
          {
            __print_back_trace();
            v53 = __cxa_allocate_exception(8uLL);
            *v53 = "LOG_FATAL encountered";
            __cxa_throw(v53, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        v24 = &v56;
        goto LABEL_80;
      }
    }
  }
  else if (v32 <= 2)
  {
    if (cppipc::must_cancel(v31))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v36 = (file_logger *)global_logger();
    v37 = file_logger::start_stream(v36, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 171, 1);
    v38 = pthread_getspecific(*((_QWORD *)v37 + 74));
    if (v38 && *((_BYTE *)v38 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38 + 2, (uint64_t)"Registering environment modifiable configuration variable ", 58);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v55 = *(std::string *)a2;
    v45 = file_logger::operator<<<std::string>((uint64_t)v37, (uint64_t)&v55);
    v46 = pthread_getspecific(*(_QWORD *)(v45 + 592));
    if (v46 && *((_BYTE *)v46 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46 + 2, (uint64_t)" = ", 3);
    v47 = file_logger::operator<<<double>(v45);
    v48 = pthread_getspecific(*(_QWORD *)(v47 + 592));
    if (v48 && *((_BYTE *)v48 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48 + 2, (uint64_t)" (double)", 9);
    v49 = pthread_getspecific(*(_QWORD *)(v47 + 592));
    if (v49)
    {
      if (*((_BYTE *)v49 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(v49[2] - 24) + 16));
        v50 = std::locale::use_facet((const std::locale *)&v63, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
        std::locale::~locale((std::locale *)&v63);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v47);
        if (*(_DWORD *)(v47 + 600) == 7)
        {
          __print_back_trace();
          v54 = __cxa_allocate_exception(8uLL);
          *v54 = "LOG_FATAL encountered";
          __cxa_throw(v54, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      v24 = &v55;
      goto LABEL_80;
    }
  }
  return a1;
}

void sub_217FC36AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::locale a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  std::locale::~locale(&a38);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::globals::global_value::~global_value(turi::globals::global_value *this)
{
  boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content((int *)this + 6);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t file_logger::operator<<<double>(uint64_t a1)
{
  _BYTE *v2;

  v2 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v2 && v2[280])
    std::ostream::operator<<();
  return a1;
}

turi::globals *turi::globals::register_global<long long>::register_global(turi::globals *a1, std::string::size_type a2, uint64_t a3, int a4, uint64_t a5)
{
  int *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  uint64_t *global_registry;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  std::string *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  cppipc *v31;
  int v32;
  file_logger *v33;
  file_logger *v34;
  _QWORD *v35;
  file_logger *v36;
  file_logger *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  const std::locale::facet *v50;
  _QWORD *exception;
  _QWORD *v53;
  _QWORD *v54;
  std::string v55;
  std::string v56;
  std::string v57;
  _QWORD v58[3];
  _QWORD *v59;
  uint64_t v60;
  _BYTE v61[24];
  _BYTE *v62;
  std::string v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  turi::globals::get_global_registry_map(a1);
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2))
  {
    v10 = (int *)global_logger();
    if (v10[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v10))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v11 = (file_logger *)global_logger();
      started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 182, 1);
      v13 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v13 && *((_BYTE *)v13 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Configuration variable ", 23);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v57 = *(std::string *)a2;
      v20 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v57);
      v21 = pthread_getspecific(*(_QWORD *)(v20 + 592));
      if (v21 && *((_BYTE *)v21 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)" already registered", 19);
      v22 = pthread_getspecific(*(_QWORD *)(v20 + 592));
      if (v22)
      {
        if (*((_BYTE *)v22 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(v22[2] - 24) + 16));
          v23 = std::locale::use_facet((const std::locale *)&v63, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
          std::locale::~locale((std::locale *)&v63);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v20);
          if (*(_DWORD *)(v20 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      {
        v24 = &v57;
LABEL_80:
        operator delete(v24->__r_.__value_.__l.__data_);
        return a1;
      }
    }
    return a1;
  }
  global_registry = turi::globals::get_global_registry(0);
  v16 = turi::globals::get_global_registry(void)::global_registry;
  v15 = qword_254FEE258;
  turi::globals::get_global_registry_map((turi::globals *)global_registry);
  v63.__r_.__value_.__r.__words[0] = a2;
  v17 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v63);
  v17[7] = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 4);
  turi::globals::get_global_registry((turi::globals *)v17);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v63 = *(std::string *)a2;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v58, a5);
  v60 = a3;
  v18 = v61;
  v19 = (uint64_t)v59;
  if (!v59)
    goto LABEL_15;
  if (v59 != v58)
  {
    v19 = (*(uint64_t (**)(void))(*v59 + 16))();
LABEL_15:
    v62 = (_BYTE *)v19;
    goto LABEL_26;
  }
  v62 = v61;
  (*(void (**)(_QWORD *, _BYTE *))(v58[0] + 24))(v58, v61);
LABEL_26:
  v65 = v60;
  std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100]((uint64_t)&v66, (uint64_t)v61);
  v64 = 1;
  v67 = a4;
  v25 = qword_254FEE258;
  if (qword_254FEE258 >= (unint64_t)qword_254FEE260)
  {
    v27 = std::vector<turi::globals::global_value>::__push_back_slow_path<turi::globals::global_value>(&turi::globals::get_global_registry(void)::global_registry, (__int128 *)&v63);
  }
  else
  {
    v26 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
    *(_QWORD *)(qword_254FEE258 + 16) = *((_QWORD *)&v63.__r_.__value_.__l + 2);
    *(_OWORD *)v25 = v26;
    memset(&v63, 0, sizeof(v63));
    boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant(v25 + 24, (unsigned int *)&v64);
    *(_BYTE *)(v25 + 72) = v67;
    v27 = v25 + 80;
  }
  qword_254FEE258 = v27;
  boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content(&v64);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v62 == v61)
  {
    v28 = 4;
  }
  else
  {
    if (!v62)
      goto LABEL_36;
    v28 = 5;
    v18 = v62;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v28))(v18);
LABEL_36:
  v29 = v59;
  if (v59 == v58)
  {
    v30 = 4;
    v29 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_41;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_41:
  v31 = (cppipc *)global_logger();
  v32 = *((_DWORD *)v31 + 169);
  if (a4)
  {
    if (v32 <= 2)
    {
      if (cppipc::must_cancel(v31))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v33 = (file_logger *)global_logger();
      v34 = file_logger::start_stream(v33, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 191, 1);
      v35 = pthread_getspecific(*((_QWORD *)v34 + 74));
      if (v35 && *((_BYTE *)v35 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35 + 2, (uint64_t)"Registering runtime modifiable configuration variable ", 54);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v56 = *(std::string *)a2;
      v39 = file_logger::operator<<<std::string>((uint64_t)v34, (uint64_t)&v56);
      v40 = pthread_getspecific(*(_QWORD *)(v39 + 592));
      if (v40 && *((_BYTE *)v40 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)" = ", 3);
      v41 = file_logger::operator<<<long long>(v39);
      v42 = pthread_getspecific(*(_QWORD *)(v41 + 592));
      if (v42 && *((_BYTE *)v42 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42 + 2, (uint64_t)" (int64_t)", 10);
      v43 = pthread_getspecific(*(_QWORD *)(v41 + 592));
      if (v43)
      {
        if (*((_BYTE *)v43 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(v43[2] - 24) + 16));
          v44 = std::locale::use_facet((const std::locale *)&v63, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
          std::locale::~locale((std::locale *)&v63);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v41);
          if (*(_DWORD *)(v41 + 600) == 7)
          {
            __print_back_trace();
            v53 = __cxa_allocate_exception(8uLL);
            *v53 = "LOG_FATAL encountered";
            __cxa_throw(v53, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        v24 = &v56;
        goto LABEL_80;
      }
    }
  }
  else if (v32 <= 2)
  {
    if (cppipc::must_cancel(v31))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v36 = (file_logger *)global_logger();
    v37 = file_logger::start_stream(v36, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 194, 1);
    v38 = pthread_getspecific(*((_QWORD *)v37 + 74));
    if (v38 && *((_BYTE *)v38 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38 + 2, (uint64_t)"Registering environment modifiable configuration variable ", 58);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v55 = *(std::string *)a2;
    v45 = file_logger::operator<<<std::string>((uint64_t)v37, (uint64_t)&v55);
    v46 = pthread_getspecific(*(_QWORD *)(v45 + 592));
    if (v46 && *((_BYTE *)v46 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46 + 2, (uint64_t)" = ", 3);
    v47 = file_logger::operator<<<long long>(v45);
    v48 = pthread_getspecific(*(_QWORD *)(v47 + 592));
    if (v48 && *((_BYTE *)v48 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48 + 2, (uint64_t)" (int64_t)", 10);
    v49 = pthread_getspecific(*(_QWORD *)(v47 + 592));
    if (v49)
    {
      if (*((_BYTE *)v49 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(_QWORD *)(v49[2] - 24) + 16));
        v50 = std::locale::use_facet((const std::locale *)&v63, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
        std::locale::~locale((std::locale *)&v63);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v47);
        if (*(_DWORD *)(v47 + 600) == 7)
        {
          __print_back_trace();
          v54 = __cxa_allocate_exception(8uLL);
          *v54 = "LOG_FATAL encountered";
          __cxa_throw(v54, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      v24 = &v55;
      goto LABEL_80;
    }
  }
  return a1;
}

void sub_217FC3FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::locale a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  std::locale::~locale(&a38);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t file_logger::operator<<<long long>(uint64_t a1)
{
  _BYTE *v2;

  v2 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v2 && v2[280])
    std::ostream::operator<<();
  return a1;
}

turi::globals *turi::globals::register_global<std::string>::register_global(turi::globals *a1, std::string::size_type a2, uint64_t a3, int a4, uint64_t a5)
{
  cppipc *v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  uint64_t *global_registry;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  uint64_t *v23;
  uint64_t v24;
  int *v25;
  file_logger *v26;
  file_logger *v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  _QWORD *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  cppipc *v38;
  int v39;
  file_logger *v40;
  file_logger *v41;
  _QWORD *v42;
  file_logger *v43;
  file_logger *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  const std::locale::facet *v53;
  std::string *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  _QWORD *exception;
  _QWORD *v61;
  _QWORD *v62;
  std::string __p;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;
  _BYTE v71[24];
  _BYTE *v72;
  std::string v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  turi::globals::get_global_registry_map(a1);
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2))
  {
    v10 = (cppipc *)global_logger();
    if (*((int *)v10 + 169) <= 2)
    {
      if (cppipc::must_cancel(v10))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v11 = (file_logger *)global_logger();
      started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 204, 1);
      v13 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v13 && *((_BYTE *)v13 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Configuration variable ", 23);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v67 = *(std::string *)a2;
      v20 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v67);
      v21 = pthread_getspecific(*(_QWORD *)(v20 + 592));
      if (v21 && *((_BYTE *)v21 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)" already registered", 19);
      v10 = (cppipc *)pthread_getspecific(*(_QWORD *)(v20 + 592));
      if (v10)
      {
        if (*((_BYTE *)v10 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*((_QWORD *)v10 + 2) - 24) + 16));
          v22 = std::locale::use_facet((const std::locale *)&v73, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
          std::locale::~locale((std::locale *)&v73);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v20);
          if (*(_DWORD *)(v20 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
    }
    turi::globals::get_global_registry_map(v10);
    v73.__r_.__value_.__r.__words[0] = a2;
    v23 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v73);
    v24 = v23[7];
    turi::globals::get_global_registry((turi::globals *)v23);
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
    if (boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<turi::globals::get_pointer_visitor const,false>,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(turi::globals::get_global_registry(void)::global_registry+ 80 * v24+ 24), *(_DWORD *)(turi::globals::get_global_registry(void)::global_registry + 80 * v24 + 24) ^ (*(int *)(turi::globals::get_global_registry(void)::global_registry + 80 * v24 + 24) >> 31), (uint64_t)&v73, turi::globals::get_global_registry(void)::global_registry + 80 * v24 + 32) != a3)
    {
      v25 = (int *)global_logger();
      if (v25[169] <= 5)
      {
        if (cppipc::must_cancel((cppipc *)v25))
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        v26 = (file_logger *)global_logger();
        v27 = file_logger::start_stream(v26, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 208, 1);
        v28 = pthread_getspecific(*((_QWORD *)v27 + 74));
        if (v28 && *((_BYTE *)v28 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)"Different global variable pointer detected", 42);
        v29 = pthread_getspecific(*((_QWORD *)v27 + 74));
        if (v29)
        {
          if (*((_BYTE *)v29 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(v29[2] - 24) + 16));
            v30 = std::locale::use_facet((const std::locale *)&v73, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
            std::locale::~locale((std::locale *)&v73);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush(v27);
            if (*((_DWORD *)v27 + 150) == 7)
            {
              __print_back_trace();
              v31 = __cxa_allocate_exception(8uLL);
              *v31 = "LOG_FATAL encountered";
              __cxa_throw(v31, MEMORY[0x24BEDB718], 0);
            }
          }
        }
      }
    }
    return a1;
  }
  global_registry = turi::globals::get_global_registry(0);
  v16 = turi::globals::get_global_registry(void)::global_registry;
  v15 = qword_254FEE258;
  turi::globals::get_global_registry_map((turi::globals *)global_registry);
  v73.__r_.__value_.__r.__words[0] = a2;
  v17 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v73);
  v17[7] = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 4);
  turi::globals::get_global_registry((turi::globals *)v17);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v73 = *(std::string *)a2;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v68, a5);
  v70 = a3;
  v18 = v71;
  v19 = (uint64_t)v69;
  if (!v69)
    goto LABEL_15;
  if (v69 != v68)
  {
    v19 = (*(uint64_t (**)(void))(*v69 + 16))();
LABEL_15:
    v72 = (_BYTE *)v19;
    goto LABEL_36;
  }
  v72 = v71;
  (*(void (**)(_QWORD *, _BYTE *))(v68[0] + 24))(v68, v71);
LABEL_36:
  v75 = v70;
  std::__function::__value_func<BOOL ()(std::string)>::__value_func[abi:ne180100]((uint64_t)&v76, (uint64_t)v71);
  v74 = 2;
  v77 = a4;
  v32 = qword_254FEE258;
  if (qword_254FEE258 >= (unint64_t)qword_254FEE260)
  {
    v34 = std::vector<turi::globals::global_value>::__push_back_slow_path<turi::globals::global_value>(&turi::globals::get_global_registry(void)::global_registry, (__int128 *)&v73);
  }
  else
  {
    v33 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
    *(_QWORD *)(qword_254FEE258 + 16) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
    *(_OWORD *)v32 = v33;
    memset(&v73, 0, sizeof(v73));
    boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant(v32 + 24, (unsigned int *)&v74);
    *(_BYTE *)(v32 + 72) = v77;
    v34 = v32 + 80;
  }
  qword_254FEE258 = v34;
  boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content(&v74);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (v72 == v71)
  {
    v35 = 4;
  }
  else
  {
    if (!v72)
      goto LABEL_46;
    v35 = 5;
    v18 = v72;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v35))(v18);
LABEL_46:
  v36 = v69;
  if (v69 == v68)
  {
    v37 = 4;
    v36 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_51;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_51:
  v38 = (cppipc *)global_logger();
  v39 = *((_DWORD *)v38 + 169);
  if (a4)
  {
    if (v39 <= 2)
    {
      if (cppipc::must_cancel(v38))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v40 = (file_logger *)global_logger();
      v41 = file_logger::start_stream(v40, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 218, 1);
      v42 = pthread_getspecific(*((_QWORD *)v41 + 74));
      if (v42 && *((_BYTE *)v42 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42 + 2, (uint64_t)"Registering runtime modifiable configuration variable ", 54);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v66 = *(std::string *)a2;
      v46 = file_logger::operator<<<std::string>((uint64_t)v41, (uint64_t)&v66);
      v47 = pthread_getspecific(*(_QWORD *)(v46 + 592));
      if (v47 && *((_BYTE *)v47 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47 + 2, (uint64_t)" = ", 3);
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v65 = *(std::string *)a3;
      v50 = file_logger::operator<<<std::string>(v46, (uint64_t)&v65);
      v51 = pthread_getspecific(*(_QWORD *)(v50 + 592));
      if (v51 && *((_BYTE *)v51 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51 + 2, (uint64_t)" (string)", 9);
      v52 = pthread_getspecific(*(_QWORD *)(v50 + 592));
      if (v52)
      {
        if (*((_BYTE *)v52 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(_QWORD *)(v52[2] - 24) + 16));
          v53 = std::locale::use_facet((const std::locale *)&v73, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
          std::locale::~locale((std::locale *)&v73);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v50);
          if (*(_DWORD *)(v50 + 600) == 7)
          {
            __print_back_trace();
            v61 = __cxa_allocate_exception(8uLL);
            *v61 = "LOG_FATAL encountered";
            __cxa_throw(v61, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        v54 = &v66;
LABEL_100:
        operator delete(v54->__r_.__value_.__l.__data_);
      }
    }
  }
  else if (v39 <= 2)
  {
    if (cppipc::must_cancel(v38))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v43 = (file_logger *)global_logger();
    v44 = file_logger::start_stream(v43, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "register_global", 221, 1);
    v45 = pthread_getspecific(*((_QWORD *)v44 + 74));
    if (v45 && *((_BYTE *)v45 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45 + 2, (uint64_t)"Registering environment modifiable configuration variable ", 58);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v64 = *(std::string *)a2;
    v48 = file_logger::operator<<<std::string>((uint64_t)v44, (uint64_t)&v64);
    v49 = pthread_getspecific(*(_QWORD *)(v48 + 592));
    if (v49 && *((_BYTE *)v49 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49 + 2, (uint64_t)" = ", 3);
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    v55 = file_logger::operator<<<std::string>(v48, (uint64_t)&__p);
    v56 = pthread_getspecific(*(_QWORD *)(v55 + 592));
    if (v56 && *((_BYTE *)v56 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56 + 2, (uint64_t)" (string)", 9);
    v57 = pthread_getspecific(*(_QWORD *)(v55 + 592));
    if (v57)
    {
      if (*((_BYTE *)v57 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(_QWORD *)(v57[2] - 24) + 16));
        v58 = std::locale::use_facet((const std::locale *)&v73, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
        std::locale::~locale((std::locale *)&v73);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v55);
        if (*(_DWORD *)(v55 + 600) == 7)
        {
          __print_back_trace();
          v62 = __cxa_allocate_exception(8uLL);
          *v62 = "LOG_FATAL encountered";
          __cxa_throw(v62, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      v54 = &v64;
      goto LABEL_100;
    }
  }
  return a1;
}

void sub_217FC4AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  uint64_t v51;

  std::locale::~locale((std::locale *)(v51 - 160));
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t turi::globals::list_globals@<X0>(turi::globals *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t result;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  void **v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unsigned int v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  void **v51[7];
  uint64_t v52;
  char v53;
  std::string v54;
  _BYTE v55[13];
  uint64_t v56;

  v2 = (int)this;
  v56 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = (uint64_t)turi::globals::get_global_registry(this);
  v5 = turi::globals::get_global_registry(void)::global_registry;
  for (i = qword_254FEE258; v5 != i; v5 += 80)
  {
    if (*(unsigned __int8 *)(v5 + 72) == v2)
    {
      v51[0] = (void **)&v50;
      boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<turi::globals::get_value_visitor const,false>,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(v5 + 24), *(_DWORD *)(v5 + 24) ^ (*(int *)(v5 + 24) >> 31), (__int128 **)(v5 + 32), (uint64_t)&v52);
      std::pair<std::string,turi::flexible_type>::pair[abi:ne180100]<std::string&,turi::flexible_type,0>(&v54, (__int128 *)v5, (uint64_t)&v52);
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a2 + 16);
      if (v7 >= v8)
      {
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *(_QWORD *)a2) >> 3);
        v13 = v12 + 1;
        if (v12 + 1 > 0x666666666666666)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - *(_QWORD *)a2) >> 3);
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x333333333333333)
          v15 = 0x666666666666666;
        else
          v15 = v13;
        v51[4] = (void **)(a2 + 16);
        v16 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(a2 + 16, v15);
        v17 = &v16[5 * v12];
        v51[0] = v16;
        v51[1] = v17;
        v51[3] = &v16[5 * v18];
        v19 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
        v17[2] = (void *)v54.__r_.__value_.__r.__words[2];
        *(_OWORD *)v17 = v19;
        memset(&v54, 0, sizeof(v54));
        v17[3] = 0;
        *((_DWORD *)v17 + 8) = 0;
        *((_BYTE *)v17 + 36) = 0;
        v20 = *(void **)v55;
        *(void **)((char *)v17 + 29) = *(void **)&v55[5];
        v17[3] = v20;
        *((_BYTE *)v17 + 36) = v55[12];
        v55[12] = 0;
        v51[2] = v17 + 5;
        std::vector<std::pair<std::string,turi::flexible_type>>::__swap_out_circular_buffer((uint64_t *)a2, v51);
        v11 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::pair<std::string,turi::flexible_type>>::~__split_buffer((uint64_t)v51);
      }
      else
      {
        v9 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
        *(_QWORD *)(v7 + 16) = *((_QWORD *)&v54.__r_.__value_.__l + 2);
        *(_QWORD *)(v7 + 24) = 0;
        *(_OWORD *)v7 = v9;
        memset(&v54, 0, sizeof(v54));
        *(_DWORD *)(v7 + 32) = 0;
        *(_BYTE *)(v7 + 36) = 0;
        v10 = *(_QWORD *)&v55[5];
        *(_QWORD *)(v7 + 24) = *(_QWORD *)v55;
        *(_QWORD *)(v7 + 29) = v10;
        *(_BYTE *)(v7 + 36) = v55[12];
        v55[12] = 0;
        v11 = v7 + 40;
      }
      *(_QWORD *)(a2 + 8) = v11;
      result = std::pair<std::string,turi::flexible_type>::~pair((uint64_t)&v54);
      switch(v53)
      {
        case 2:
          v21 = (unint64_t *)v52;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = v52;
            if (v52)
            {
              if (*(char *)(v52 + 31) < 0)
                operator delete(*(void **)(v52 + 8));
              v25 = v24;
              v26 = 0x1012C404EF22A49;
              goto LABEL_53;
            }
          }
          break;
        case 3:
          v38 = (unint64_t *)v52;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            v41 = v52;
            if (v52)
            {
              v42 = *(void **)(v52 + 8);
              if (v42)
              {
                *(_QWORD *)(v52 + 16) = v42;
                operator delete(v42);
              }
              v25 = v41;
              v26 = 0x1080C409938AC02;
              goto LABEL_53;
            }
          }
          break;
        case 4:
          v27 = (unint64_t *)v52;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            v30 = v52;
            if (v52)
            {
              v51[0] = (void **)(v52 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v51);
              goto LABEL_46;
            }
          }
          break;
        case 5:
          v43 = (unint64_t *)v52;
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45)
          {
            v30 = v52;
            if (v52)
            {
              v51[0] = (void **)(v52 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v51);
LABEL_46:
              v25 = v30;
              v26 = 0x1020C405E66F15BLL;
              goto LABEL_53;
            }
          }
          break;
        case 8:
          v46 = (unint64_t *)v52;
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = v52;
            if (v52)
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v52 + 16));
              v25 = v49;
              v37 = -235920773;
              goto LABEL_52;
            }
          }
          break;
        case 9:
          v31 = (unint64_t *)v52;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = v52;
            if (v52)
            {
              v35 = *(void **)(v52 + 48);
              if (v35)
              {
                *(_QWORD *)(v52 + 56) = v35;
                operator delete(v35);
              }
              v36 = *(void **)(v34 + 24);
              if (v36)
              {
                *(_QWORD *)(v34 + 32) = v36;
                operator delete(v36);
              }
              std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v34 + 8);
              v25 = v34;
              v37 = 2071181815;
LABEL_52:
              v26 = v37 | 0x1030C4000000000;
LABEL_53:
              result = MEMORY[0x219A19A08](v25, v26);
            }
          }
          break;
        default:
          continue;
      }
    }
  }
  return result;
}

void sub_217FC5014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _Unwind_Exception *v29;
  va_list va;
  uint64_t v31;
  _QWORD *v32;
  va_list va1;
  uint64_t v34;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v29 = va_arg(va1, _Unwind_Exception *);
  v31 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v32 = va_arg(va2, _QWORD *);
  v34 = va_arg(va2, _QWORD);
  std::pair<std::string,turi::flexible_type>::~pair((uint64_t)va2);
  switch(BYTE4(v34))
  {
    case 2:
      v8 = v32;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (v10)
        goto LABEL_32;
      turi::globals::list_globals();
      goto LABEL_20;
    case 3:
      v20 = v32;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_32;
      turi::globals::list_globals();
LABEL_20:
      a1 = v29;
      goto LABEL_32;
    case 4:
      v11 = v32;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (v13)
        goto LABEL_32;
      v14 = v32;
      if (!v32)
        goto LABEL_32;
      v29 = (_Unwind_Exception *)(v32 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
      goto LABEL_26;
    case 5:
      v23 = v32;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_32;
      v14 = v32;
      if (!v32)
        goto LABEL_32;
      v29 = (_Unwind_Exception *)(v32 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
LABEL_26:
      v18 = v14;
      v19 = 0x1020C405E66F15BLL;
      break;
    case 8:
      v26 = v32;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
        turi::globals::list_globals((uint64_t)va1);
      goto LABEL_32;
    case 9:
      v15 = v32;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (v17 || !v32)
        goto LABEL_32;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v32);
      v19 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_32;
  }
  MEMORY[0x219A19A08](v18, v19);
LABEL_32:
  std::vector<std::pair<std::string,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

void sub_217FC51C8()
{
  JUMPOUT(0x217FC51C0);
}

uint64_t turi::globals::set_global_impl(turi::globals *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t has_fallback_type;
  unint64_t **v10;
  unint64_t *v11[3];

  v11[2] = *(unint64_t **)MEMORY[0x24BDAC8D0];
  turi::globals::get_global_registry_map(a1);
  v11[0] = (unint64_t *)a1;
  v4 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)v11);
  v5 = v4[7];
  memset(v11, 0, 13);
  if (v11 != (unint64_t **)a2)
  {
    *(unint64_t **)((char *)v11 + 5) = *(unint64_t **)(a2 + 5);
    v11[0] = *(unint64_t **)a2;
    BYTE4(v11[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v11[1]) <= 9u && ((1 << SBYTE4(v11[1])) & 0x33C) != 0)
    {
      v6 = v11[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  turi::globals::get_global_registry((turi::globals *)v4);
  v10 = v11;
  has_fallback_type = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<turi::globals::set_value_visitor,false>,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(turi::globals::get_global_registry(void)::global_registry+ 80 * v5+ 24), *(_DWORD *)(turi::globals::get_global_registry(void)::global_registry + 80 * v5 + 24) ^ (*(int *)(turi::globals::get_global_registry(void)::global_registry + 80 * v5 + 24) >> 31), (uint64_t *)&v10, (uint64_t *)(turi::globals::get_global_registry(void)::global_registry + 80 * v5 + 32));
  turi::globals::set_value_visitor::~set_value_visitor(v11);
  return has_fallback_type;
}

void sub_217FC5300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::globals::set_value_visitor::~set_value_visitor((unint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t turi::globals::set_global(uint64_t a1, uint64_t a2)
{
  turi::globals *v4;
  uint64_t *v5;
  uint64_t v6;
  int *v7;
  file_logger *v8;
  file_logger *v9;
  _QWORD *v10;
  int *v11;
  file_logger *v12;
  file_logger *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  int *v59;
  file_logger *v60;
  file_logger *started;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  const std::locale::facet *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  void *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  std::string *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  void *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  void *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *exception;
  std::string v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::locale v160;
  _QWORD *v161[2];
  _QWORD *v162[2];
  _QWORD *v163[2];
  _QWORD *v164[3];

  v164[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  turi::globals::get_global_registry_map((turi::globals *)a1);
  v4 = (turi::globals *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a1);
  if (v4)
  {
    turi::globals::get_global_registry_map(v4);
    v160.__locale_ = (std::locale::__imp *)a1;
    v5 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&turi::globals::get_global_registry_map(void)::global_registry_map, (const void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v160);
    v6 = v5[7];
    turi::globals::get_global_registry((turi::globals *)v5);
    if (*(_BYTE *)(turi::globals::get_global_registry(void)::global_registry + 80 * v6 + 72))
    {
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v157 = *(std::string *)a1;
      memset(v162, 0, 13);
      if (v162 != (_QWORD **)a2)
      {
        *(_QWORD **)((char *)v162 + 5) = *(_QWORD **)(a2 + 5);
        v162[0] = *(_QWORD **)a2;
        BYTE4(v162[1]) = *(_BYTE *)(a2 + 12);
        if (BYTE4(v162[1]) <= 9u && ((1 << SBYTE4(v162[1])) & 0x33C) != 0)
        {
          v16 = v162[0];
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
        }
      }
      v18 = turi::globals::set_global_impl((turi::globals *)&v157, (uint64_t)v162);
      switch(BYTE4(v162[1]))
      {
        case 2:
          v19 = v162[0];
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = v162[0];
            if (v162[0])
            {
              if (*((char *)v162[0] + 31) < 0)
                operator delete(*((void **)v162[0] + 1));
              v23 = v22;
              v24 = 0x1012C404EF22A49;
              goto LABEL_87;
            }
          }
          break;
        case 3:
          v47 = v162[0];
          do
          {
            v48 = __ldaxr(v47);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v47));
          if (!v49)
          {
            v50 = v162[0];
            if (v162[0])
            {
              v51 = (void *)v162[0][1];
              if (v51)
              {
                v162[0][2] = v51;
                operator delete(v51);
              }
              v23 = v50;
              v24 = 0x1080C409938AC02;
              goto LABEL_87;
            }
          }
          break;
        case 4:
          v39 = v162[0];
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            v42 = v162[0];
            if (v162[0])
            {
              v160.__locale_ = (std::locale::__imp *)(v162[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
              goto LABEL_80;
            }
          }
          break;
        case 5:
          v52 = v162[0];
          do
          {
            v53 = __ldaxr(v52);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v52));
          if (!v54)
          {
            v42 = v162[0];
            if (v162[0])
            {
              v160.__locale_ = (std::locale::__imp *)(v162[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
LABEL_80:
              v23 = v42;
              v24 = 0x1020C405E66F15BLL;
              goto LABEL_87;
            }
          }
          break;
        case 8:
          v55 = v162[0];
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (!v57)
          {
            v58 = v162[0];
            if (v162[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v162[0] + 2);
              v23 = v58;
              v46 = -235920773;
              goto LABEL_86;
            }
          }
          break;
        case 9:
          v43 = v162[0];
          do
          {
            v44 = __ldaxr(v43);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v43));
          if (!v45 && v162[0])
          {
            v23 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v162[0]);
            v46 = 2071181815;
LABEL_86:
            v24 = v46 | 0x1030C4000000000;
LABEL_87:
            MEMORY[0x219A19A08](v23, v24);
          }
          break;
        default:
          break;
      }
      memset(v162, 0, 13);
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v157.__r_.__value_.__l.__data_);
        if ((v18 & 1) != 0)
          return 0;
      }
      else if ((v18 & 1) != 0)
      {
        return 0;
      }
      v59 = (int *)global_logger();
      if (v59[169] > 2)
        return 3;
      if (cppipc::must_cancel((cppipc *)v59))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v60 = (file_logger *)global_logger();
      started = file_logger::start_stream(v60, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "set_global", 263, 1);
      v62 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v62 && *((_BYTE *)v62 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62 + 2, (uint64_t)"Unable to change value of ", 26);
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v156 = *(std::string *)a1;
      v77 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v156);
      v78 = pthread_getspecific(*(_QWORD *)(v77 + 592));
      if (v78 && *((_BYTE *)v78 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78 + 2, (uint64_t)" to ", 4);
      memset(v161, 0, 13);
      if (v161 != (_QWORD **)a2)
      {
        *(_QWORD **)((char *)v161 + 5) = *(_QWORD **)(a2 + 5);
        v161[0] = *(_QWORD **)a2;
        BYTE4(v161[1]) = *(_BYTE *)(a2 + 12);
        if (BYTE4(v161[1]) <= 9u && ((1 << SBYTE4(v161[1])) & 0x33C) != 0)
        {
          v79 = v161[0];
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 + 1, v79));
        }
      }
      v81 = file_logger::operator<<<turi::flexible_type>(v77, (turi::flexible_type_impl *)v161);
      v82 = pthread_getspecific(*(_QWORD *)(v81 + 592));
      if (v82 && *((_BYTE *)v82 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82 + 2, (uint64_t)". Invalid value.", 16);
      v83 = pthread_getspecific(*(_QWORD *)(v81 + 592));
      if (v83)
      {
        if (*((_BYTE *)v83 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(_QWORD *)(v83[2] - 24) + 16));
          v84 = std::locale::use_facet(&v160, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
          std::locale::~locale(&v160);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v81);
          if (*(_DWORD *)(v81 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      switch(BYTE4(v161[1]))
      {
        case 2:
          v85 = v161[0];
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (!v87)
          {
            v88 = v161[0];
            if (v161[0])
            {
              if (*((char *)v161[0] + 31) < 0)
                operator delete(*((void **)v161[0] + 1));
              v89 = v88;
              v90 = 0x1012C404EF22A49;
              goto LABEL_239;
            }
          }
          break;
        case 3:
          v140 = v161[0];
          do
          {
            v141 = __ldaxr(v140);
            v142 = v141 - 1;
          }
          while (__stlxr(v142, v140));
          if (!v142)
          {
            v143 = v161[0];
            if (v161[0])
            {
              v144 = (void *)v161[0][1];
              if (v144)
              {
                v161[0][2] = v144;
                operator delete(v144);
              }
              v89 = v143;
              v90 = 0x1080C409938AC02;
              goto LABEL_239;
            }
          }
          break;
        case 4:
          v132 = v161[0];
          do
          {
            v133 = __ldaxr(v132);
            v134 = v133 - 1;
          }
          while (__stlxr(v134, v132));
          if (!v134)
          {
            v135 = v161[0];
            if (v161[0])
            {
              v160.__locale_ = (std::locale::__imp *)(v161[0] + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
              goto LABEL_232;
            }
          }
          break;
        case 5:
          v145 = v161[0];
          do
          {
            v146 = __ldaxr(v145);
            v147 = v146 - 1;
          }
          while (__stlxr(v147, v145));
          if (!v147)
          {
            v135 = v161[0];
            if (v161[0])
            {
              v160.__locale_ = (std::locale::__imp *)(v161[0] + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
LABEL_232:
              v89 = v135;
              v90 = 0x1020C405E66F15BLL;
              goto LABEL_239;
            }
          }
          break;
        case 8:
          v148 = v161[0];
          do
          {
            v149 = __ldaxr(v148);
            v150 = v149 - 1;
          }
          while (__stlxr(v150, v148));
          if (!v150)
          {
            v151 = v161[0];
            if (v161[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)v161[0] + 2);
              v89 = v151;
              v139 = -235920773;
              goto LABEL_238;
            }
          }
          break;
        case 9:
          v136 = v161[0];
          do
          {
            v137 = __ldaxr(v136);
            v138 = v137 - 1;
          }
          while (__stlxr(v138, v136));
          if (!v138 && v161[0])
          {
            v89 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v161[0]);
            v139 = 2071181815;
LABEL_238:
            v90 = v139 | 0x1030C4000000000;
LABEL_239:
            MEMORY[0x219A19A08](v89, v90);
          }
          break;
        default:
          break;
      }
      memset(v161, 0, 13);
      v15 = 3;
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      {
        v111 = &v156;
        goto LABEL_242;
      }
      return v15;
    }
    v11 = (int *)global_logger();
    if (v11[169] > 2)
      return 2;
    if (cppipc::must_cancel((cppipc *)v11))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v12 = (file_logger *)global_logger();
    v13 = file_logger::start_stream(v12, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "set_global", 258, 1);
    v14 = pthread_getspecific(*((_QWORD *)v13 + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Unable to change value of ", 26);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v158 = *(std::string *)a1;
    v63 = file_logger::operator<<<std::string>((uint64_t)v13, (uint64_t)&v158);
    v64 = pthread_getspecific(*(_QWORD *)(v63 + 592));
    if (v64 && *((_BYTE *)v64 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64 + 2, (uint64_t)" to ", 4);
    memset(v163, 0, 13);
    if (v163 != (_QWORD **)a2)
    {
      *(_QWORD **)((char *)v163 + 5) = *(_QWORD **)(a2 + 5);
      v163[0] = *(_QWORD **)a2;
      BYTE4(v163[1]) = *(_BYTE *)(a2 + 12);
      if (BYTE4(v163[1]) <= 9u && ((1 << SBYTE4(v163[1])) & 0x33C) != 0)
      {
        v65 = v163[0];
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 + 1, v65));
      }
    }
    v67 = file_logger::operator<<<turi::flexible_type>(v63, (turi::flexible_type_impl *)v163);
    v68 = pthread_getspecific(*(_QWORD *)(v67 + 592));
    if (v68 && *((_BYTE *)v68 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68 + 2, (uint64_t)". Variable is not runtime modifiable.", 37);
    v69 = pthread_getspecific(*(_QWORD *)(v67 + 592));
    if (v69)
    {
      if (*((_BYTE *)v69 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(v69[2] - 24) + 16));
        v70 = std::locale::use_facet(&v160, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
        std::locale::~locale(&v160);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v67);
        if (*(_DWORD *)(v67 + 600) == 7)
        {
          __print_back_trace();
          v154 = __cxa_allocate_exception(8uLL);
          *v154 = "LOG_FATAL encountered";
          __cxa_throw(v154, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    switch(BYTE4(v163[1]))
    {
      case 2:
        v71 = v163[0];
        do
        {
          v72 = __ldaxr(v71);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, v71));
        if (!v73)
        {
          v74 = v163[0];
          if (v163[0])
          {
            if (*((char *)v163[0] + 31) < 0)
              operator delete(*((void **)v163[0] + 1));
            v75 = v74;
            v76 = 0x1012C404EF22A49;
            goto LABEL_207;
          }
        }
        break;
      case 3:
        v120 = v163[0];
        do
        {
          v121 = __ldaxr(v120);
          v122 = v121 - 1;
        }
        while (__stlxr(v122, v120));
        if (!v122)
        {
          v123 = v163[0];
          if (v163[0])
          {
            v124 = (void *)v163[0][1];
            if (v124)
            {
              v163[0][2] = v124;
              operator delete(v124);
            }
            v75 = v123;
            v76 = 0x1080C409938AC02;
            goto LABEL_207;
          }
        }
        break;
      case 4:
        v112 = v163[0];
        do
        {
          v113 = __ldaxr(v112);
          v114 = v113 - 1;
        }
        while (__stlxr(v114, v112));
        if (!v114)
        {
          v115 = v163[0];
          if (v163[0])
          {
            v160.__locale_ = (std::locale::__imp *)(v163[0] + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
            goto LABEL_200;
          }
        }
        break;
      case 5:
        v125 = v163[0];
        do
        {
          v126 = __ldaxr(v125);
          v127 = v126 - 1;
        }
        while (__stlxr(v127, v125));
        if (!v127)
        {
          v115 = v163[0];
          if (v163[0])
          {
            v160.__locale_ = (std::locale::__imp *)(v163[0] + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
LABEL_200:
            v75 = v115;
            v76 = 0x1020C405E66F15BLL;
            goto LABEL_207;
          }
        }
        break;
      case 8:
        v128 = v163[0];
        do
        {
          v129 = __ldaxr(v128);
          v130 = v129 - 1;
        }
        while (__stlxr(v130, v128));
        if (!v130)
        {
          v131 = v163[0];
          if (v163[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v163[0] + 2);
            v75 = v131;
            v119 = -235920773;
            goto LABEL_206;
          }
        }
        break;
      case 9:
        v116 = v163[0];
        do
        {
          v117 = __ldaxr(v116);
          v118 = v117 - 1;
        }
        while (__stlxr(v118, v116));
        if (!v118 && v163[0])
        {
          v75 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v163[0]);
          v119 = 2071181815;
LABEL_206:
          v76 = v119 | 0x1030C4000000000;
LABEL_207:
          MEMORY[0x219A19A08](v75, v76);
        }
        break;
      default:
        break;
    }
    memset(v163, 0, 13);
    v15 = 2;
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    {
      v111 = &v158;
      goto LABEL_242;
    }
  }
  else
  {
    v7 = (int *)global_logger();
    if (v7[169] > 2)
      return 1;
    if (cppipc::must_cancel((cppipc *)v7))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v8 = (file_logger *)global_logger();
    v9 = file_logger::start_stream(v8, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "set_global", 252, 1);
    v10 = pthread_getspecific(*((_QWORD *)v9 + 74));
    if (v10 && *((_BYTE *)v10 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Unable to change value of ", 26);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v159 = *(std::string *)a1;
    v25 = file_logger::operator<<<std::string>((uint64_t)v9, (uint64_t)&v159);
    v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
    if (v26 && *((_BYTE *)v26 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)" to ", 4);
    memset(v164, 0, 13);
    if (v164 != (_QWORD **)a2)
    {
      *(_QWORD **)((char *)v164 + 5) = *(_QWORD **)(a2 + 5);
      v164[0] = *(_QWORD **)a2;
      BYTE4(v164[1]) = *(_BYTE *)(a2 + 12);
      if (BYTE4(v164[1]) <= 9u && ((1 << SBYTE4(v164[1])) & 0x33C) != 0)
      {
        v27 = v164[0];
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
      }
    }
    v29 = file_logger::operator<<<turi::flexible_type>(v25, (turi::flexible_type_impl *)v164);
    v30 = pthread_getspecific(*(_QWORD *)(v29 + 592));
    if (v30 && *((_BYTE *)v30 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)". No such configuration variable.", 33);
    v31 = pthread_getspecific(*(_QWORD *)(v29 + 592));
    if (v31)
    {
      if (*((_BYTE *)v31 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(v31[2] - 24) + 16));
        v32 = std::locale::use_facet(&v160, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
        std::locale::~locale(&v160);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v29);
        if (*(_DWORD *)(v29 + 600) == 7)
        {
          __print_back_trace();
          v153 = __cxa_allocate_exception(8uLL);
          *v153 = "LOG_FATAL encountered";
          __cxa_throw(v153, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    switch(BYTE4(v164[1]))
    {
      case 2:
        v33 = v164[0];
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          v36 = v164[0];
          if (v164[0])
          {
            if (*((char *)v164[0] + 31) < 0)
              operator delete(*((void **)v164[0] + 1));
            v37 = v36;
            v38 = 0x1012C404EF22A49;
            goto LABEL_175;
          }
        }
        break;
      case 3:
        v99 = v164[0];
        do
        {
          v100 = __ldaxr(v99);
          v101 = v100 - 1;
        }
        while (__stlxr(v101, v99));
        if (!v101)
        {
          v102 = v164[0];
          if (v164[0])
          {
            v103 = (void *)v164[0][1];
            if (v103)
            {
              v164[0][2] = v103;
              operator delete(v103);
            }
            v37 = v102;
            v38 = 0x1080C409938AC02;
            goto LABEL_175;
          }
        }
        break;
      case 4:
        v91 = v164[0];
        do
        {
          v92 = __ldaxr(v91);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, v91));
        if (!v93)
        {
          v94 = v164[0];
          if (v164[0])
          {
            v160.__locale_ = (std::locale::__imp *)(v164[0] + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
            goto LABEL_168;
          }
        }
        break;
      case 5:
        v104 = v164[0];
        do
        {
          v105 = __ldaxr(v104);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, v104));
        if (!v106)
        {
          v94 = v164[0];
          if (v164[0])
          {
            v160.__locale_ = (std::locale::__imp *)(v164[0] + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
LABEL_168:
            v37 = v94;
            v38 = 0x1020C405E66F15BLL;
            goto LABEL_175;
          }
        }
        break;
      case 8:
        v107 = v164[0];
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
        {
          v110 = v164[0];
          if (v164[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v164[0] + 2);
            v37 = v110;
            v98 = -235920773;
            goto LABEL_174;
          }
        }
        break;
      case 9:
        v95 = v164[0];
        do
        {
          v96 = __ldaxr(v95);
          v97 = v96 - 1;
        }
        while (__stlxr(v97, v95));
        if (!v97 && v164[0])
        {
          v37 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v164[0]);
          v98 = 2071181815;
LABEL_174:
          v38 = v98 | 0x1030C4000000000;
LABEL_175:
          MEMORY[0x219A19A08](v37, v38);
        }
        break;
      default:
        break;
    }
    memset(v164, 0, 13);
    v15 = 1;
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    {
      v111 = &v159;
LABEL_242:
      operator delete(v111->__r_.__value_.__l.__data_);
    }
  }
  return v15;
}

void sub_217FC6200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,_QWORD *a36,std::locale a37)
{
  uint64_t v37;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;

  std::locale::~locale(&a37);
  switch(*(_BYTE *)(v37 - 108))
  {
    case 2:
      v39 = *(unint64_t **)(v37 - 120);
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_39;
      v42 = *(_QWORD *)(v37 - 120);
      if (!v42)
        goto LABEL_39;
      if (*(char *)(v42 + 31) < 0)
        operator delete(*(void **)(v42 + 8));
      v43 = (_QWORD *)v42;
      v44 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v54 = *(unint64_t **)(v37 - 120);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (v56)
        goto LABEL_39;
      v57 = *(_QWORD **)(v37 - 120);
      if (!v57)
        goto LABEL_39;
      v58 = (void *)v57[1];
      if (v58)
      {
        v57[2] = v58;
        operator delete(v58);
      }
      v43 = v57;
      v44 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v45 = *(unint64_t **)(v37 - 120);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_39;
      v48 = *(_QWORD **)(v37 - 120);
      if (!v48)
        goto LABEL_39;
      a36 = v48 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
      goto LABEL_31;
    case 5:
      v59 = *(unint64_t **)(v37 - 120);
      do
      {
        v60 = __ldaxr(v59);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v59));
      if (v61)
        goto LABEL_39;
      v48 = *(_QWORD **)(v37 - 120);
      if (!v48)
        goto LABEL_39;
      a36 = v48 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
LABEL_31:
      v43 = v48;
      v44 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v62 = *(unint64_t **)(v37 - 120);
      do
      {
        v63 = __ldaxr(v62);
        v64 = v63 - 1;
      }
      while (__stlxr(v64, v62));
      if (v64)
        goto LABEL_39;
      v65 = *(_QWORD *)(v37 - 120);
      if (!v65)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(v65 + 16));
      v43 = (_QWORD *)v65;
      v53 = -235920773;
      goto LABEL_37;
    case 9:
      v49 = *(unint64_t **)(v37 - 120);
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (v51)
        goto LABEL_39;
      v52 = *(_QWORD **)(v37 - 120);
      if (!v52)
        goto LABEL_39;
      v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v52);
      v53 = 2071181815;
LABEL_37:
      v44 = v53 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v43, v44);
LABEL_39:
      *(_QWORD *)(v37 - 120) = 0;
      *(_DWORD *)(v37 - 112) = 0;
      *(_BYTE *)(v37 - 108) = 0;
      if (a14 < 0)
        operator delete(a9);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

uint64_t file_logger::operator<<<turi::flexible_type>(uint64_t a1, turi::flexible_type_impl *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string v12;
  _QWORD v13[13];
  char v14;
  uint64_t v15;

  v4 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v4)
  {
    v5 = v4;
    if (v4[280])
    {
      switch(*((_BYTE *)a2 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_6;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_6:
          v13[0] = *MEMORY[0x24BEDB7F0];
          v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
          *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
          v13[2] = v6;
          v13[3] = MEMORY[0x24BEDB848] + 16;
          if (v14 < 0)
            operator delete((void *)v13[11]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v15);
          break;
        case 2:
          v7 = *(_QWORD *)a2;
          if (*(char *)(*(_QWORD *)a2 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
          }
          else
          {
            v8 = *(_OWORD *)(v7 + 8);
            v12.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
            *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v8;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v13, (_QWORD *)(*(_QWORD *)a2 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v13, (uint64_t *)(*(_QWORD *)a2 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v13, (_QWORD *)(*(_QWORD *)a2 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(a2, &v12);
          break;
        case 7:
          memset(&v12, 0, sizeof(v12));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v13, (_QWORD *)(*(_QWORD *)a2 + 8));
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v12;
      else
        v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
      if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
      else
        size = v12.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v5 + 2, (uint64_t)v9, size);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_217FC6A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

std::string *turi::globals::initialize_globals_from_environment(turi::globals *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  turi *v4;
  int *v5;
  file_logger *v6;
  file_logger *started;
  _QWORD *v8;
  __int128 v9;
  int *v10;
  file_logger *v11;
  file_logger *v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  std::string *v22;
  uint64_t v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *exception;
  _QWORD *v28;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::locale v36;
  _BYTE v37[8];
  std::string v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  turi::globals::get_global_registry(a1);
  v2 = turi::globals::get_global_registry(void)::global_registry;
  v1 = qword_254FEE258;
  if (turi::globals::get_global_registry(void)::global_registry != qword_254FEE258)
  {
    while (1)
    {
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v3 = *(_OWORD *)v2;
        v35.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 16);
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v3;
      }
      v4 = (v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? (turi *)&v35
         : (turi *)v35.__r_.__value_.__r.__words[0];
      turi::getenv_str(v4, (uint64_t)v37);
      if (v37[0])
        break;
LABEL_58:
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      v2 += 80;
      if (v2 == v1)
        return std::string::operator=((std::string *)&turi::GLOBALS_MAIN_PROCESS_PATH, (const std::string *)a1);
    }
    memset(&v34, 0, sizeof(v34));
    std::string::operator=(&v34, &v38);
    v36.__locale_ = (std::locale::__imp *)&v34;
    if (boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<turi::globals::set_value_from_string_visitor,false>,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>((boost::detail::variant *)*(unsigned int *)(v2 + 24), *(_DWORD *)(v2 + 24) ^ (*(int *)(v2 + 24) >> 31), (const std::string **)&v36, (uint64_t *)(v2 + 32)))
    {
      v5 = (int *)global_logger();
      if (v5[169] > 2)
        goto LABEL_53;
      if (cppipc::must_cancel((cppipc *)v5))
        goto LABEL_62;
      v6 = (file_logger *)global_logger();
      started = file_logger::start_stream(v6, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "initialize_globals_from_environment", 278, 1);
      v8 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v8 && *((_BYTE *)v8 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Setting configuration variable ", 31);
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v9 = *(_OWORD *)v2;
        v33.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 16);
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
      }
      v15 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v33);
      v16 = pthread_getspecific(*(_QWORD *)(v15 + 592));
      if (v16 && *((_BYTE *)v16 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)" to ", 4);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v32, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
      else
        v32 = v34;
      v19 = file_logger::operator<<<std::string>(v15, (uint64_t)&v32);
      v20 = pthread_getspecific(*(_QWORD *)(v19 + 592));
      if (v20)
      {
        if (*((_BYTE *)v20 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(v20[2] - 24) + 16));
          v21 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
          std::locale::~locale(&v36);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v19);
          if (*(_DWORD *)(v19 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
      v22 = &v33;
    }
    else
    {
      v10 = (int *)global_logger();
      if (v10[169] > 3)
        goto LABEL_53;
      if (cppipc::must_cancel((cppipc *)v10))
LABEL_62:
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v11 = (file_logger *)global_logger();
      v12 = file_logger::start_stream(v11, 3, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/globals/globals.cpp", "initialize_globals_from_environment", 281, 1);
      v13 = pthread_getspecific(*((_QWORD *)v12 + 74));
      if (v13 && *((_BYTE *)v13 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Cannot set configuration variable ", 34);
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v2;
        v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 16);
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
      }
      v17 = file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&v31);
      v18 = pthread_getspecific(*(_QWORD *)(v17 + 592));
      if (v18 && *((_BYTE *)v18 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)" to ", 4);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v30, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
      else
        v30 = v34;
      v23 = file_logger::operator<<<std::string>(v17, (uint64_t)&v30);
      v24 = pthread_getspecific(*(_QWORD *)(v23 + 592));
      if (v24)
      {
        if (*((_BYTE *)v24 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(v24[2] - 24) + 16));
          v25 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
          std::locale::~locale(&v36);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v23);
          if (*(_DWORD *)(v23 + 600) == 7)
          {
            __print_back_trace();
            v28 = __cxa_allocate_exception(8uLL);
            *v28 = "LOG_FATAL encountered";
            __cxa_throw(v28, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
      v22 = &v31;
    }
    operator delete(v22->__r_.__value_.__l.__data_);
LABEL_53:
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (v37[0] && SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    goto LABEL_58;
  }
  return std::string::operator=((std::string *)&turi::GLOBALS_MAIN_PROCESS_PATH, (const std::string *)a1);
}

void sub_217FC6FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a43 < 0)
    operator delete(a38);
  if (*(_BYTE *)(v49 - 128) && *(char *)(v49 - 97) < 0)
    operator delete(*(void **)(v49 - 120));
  if (a49 < 0)
    operator delete(a44);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content(int *a1)
{
  char v2;

  return boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::destroyer,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v2, (uint64_t)(a1 + 2));
}

_QWORD *boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::destroyer,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;

  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      result = *(_QWORD **)(a4 + 32);
      if (result == (_QWORD *)(a4 + 8))
      {
        v5 = 4;
        result = (_QWORD *)(a4 + 8);
      }
      else
      {
        if (!result)
          return result;
        v5 = 5;
      }
      return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
}

void turi::globals::set_value_visitor::~set_value_visitor(unint64_t **this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v31;

  switch(*((_BYTE *)this + 12))
  {
    case 2:
      v2 = *this;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *this;
        if (*this)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *this;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *this;
        if (*this)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *this;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *this;
        if (*this)
        {
          v31 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *this;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *this;
        if (*this)
        {
          v31 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *this;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *this;
        if (*this)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *this;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *this;
        if (*this)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
}

void std::vector<turi::globals::global_value>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<turi::globals::global_value>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::globals::global_value>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::destroy_content((int *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_217FC750C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::vector<turi::globals::global_value>::__push_back_slow_path<turi::globals::global_value>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[80 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[80 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant((uint64_t)(v11 + 24), (unsigned int *)a2 + 6);
  v11[72] = *((_BYTE *)a2 + 72);
  v15[2] = v11 + 80;
  std::vector<turi::globals::global_value>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<turi::globals::global_value>::~__split_buffer(v15);
  return v13;
}

void sub_217FC7698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::globals::global_value>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant(uint64_t a1, unsigned int *a2)
{
  _QWORD *v5;

  v5 = (_QWORD *)(a1 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>((boost::detail::variant *)*a2, *a2 ^ ((int)*a2 >> 31), &v5, (_QWORD *)a2 + 1);
  *(_DWORD *)a1 = *a2 ^ ((int)*a2 >> 31);
  return a1;
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::move_into,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>(boost::detail::variant *a1, int a2, _QWORD **a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;

  switch(a2)
  {
    case 0:
      v4 = *a3;
      *v4 = *a4;
      result = std::__function::__value_func<BOOL ()(double)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)(a4 + 1));
      break;
    case 1:
      v6 = *a3;
      *v6 = *a4;
      result = std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100]((uint64_t)(v6 + 1), (uint64_t)(a4 + 1));
      break;
    case 2:
      v7 = *a3;
      *v7 = *a4;
      result = std::__function::__value_func<BOOL ()(std::string)>::__value_func[abi:ne180100]((uint64_t)(v7 + 1), (uint64_t)(a4 + 1));
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return result;
}

uint64_t std::__function::__value_func<BOOL ()(long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(std::string)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::vector<turi::globals::global_value>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>,std::reverse_iterator<turi::globals::global_value*>,std::reverse_iterator<turi::globals::global_value*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>,std::reverse_iterator<turi::globals::global_value*>,std::reverse_iterator<turi::globals::global_value*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_OWORD *)(v9 - 80);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(v9 - 64);
      *(_OWORD *)(v7 - 80) = v10;
      *(_QWORD *)(v9 - 72) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 80) = 0;
      boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::variant(v7 - 56, (unsigned int *)(v9 - 56));
      *(_BYTE *)(v7 - 8) = *(_BYTE *)(v9 - 8);
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
      v9 -= 80;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::globals::global_value>,std::reverse_iterator<turi::globals::global_value*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::globals::global_value>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::globals::global_value>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::globals::global_value>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::globals::global_value>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<turi::globals::global_value>::destroy[abi:ne180100](v4, i - 80);
  }
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<turi::globals::get_pointer_visitor const,false>,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a2 >= 3)
    boost::detail::variant::forced_return<void>(a1);
  return *(_QWORD *)a4;
}

void std::vector<std::pair<std::string,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::pair<std::string,turi::flexible_type>::~pair(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<turi::globals::get_value_visitor const,false>,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>(boost::detail::variant *a1@<X0>, int a2@<W1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 *v5;

  switch(a2)
  {
    case 0:
      if (*a3)
        v4 = *(_QWORD *)*a3;
      else
        v4 = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(_BYTE *)(a4 + 12) = 1;
      *(_QWORD *)a4 = v4;
      break;
    case 1:
      v5 = *a3;
      if (*a3)
        v5 = *(__int128 **)v5;
      *(_BYTE *)(a4 + 12) = 0;
      *(_DWORD *)(a4 + 8) = 0;
      *(_QWORD *)a4 = v5;
      break;
    case 2:
      turi::globals::get_value_visitor::operator()<turi::globals::value_and_value_check<std::string>>(a3, a4);
      break;
    default:
      boost::detail::variant::forced_return_no_return(a1);
  }
}

void turi::globals::get_value_visitor::operator()<turi::globals::value_and_value_check<std::string>>(__int128 **a1@<X1>, uint64_t a2@<X8>)
{
  std::string __p;

  turi::globals::value_and_value_check<std::string>::get_value(a1, &__p);
  turi::flexible_type::flexible_type<std::string>(a2, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FC7C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::globals::value_and_value_check<std::string>::get_value(__int128 **a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = *a1;
  if (*a1)
  {
    if (*((char *)v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

uint64_t *std::vector<std::pair<std::string,turi::flexible_type>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_OWORD *)(v6 - 40) = v8;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_DWORD *)(v6 - 8) = 0;
      *(_BYTE *)(v6 - 4) = 0;
      v9 = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 11) = *(_QWORD *)(v2 + v5 - 11);
      *(_QWORD *)(v6 - 16) = v9;
      *(_BYTE *)(v6 - 4) = *(_BYTE *)(v2 + v5 - 4);
      *(_BYTE *)(v7 - 4) = 0;
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v10 = *result;
  *result = v4;
  a2[1] = v10;
  v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__split_buffer<std::pair<std::string,turi::flexible_type>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::pair<std::string,turi::flexible_type>::~pair(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::pair<std::string,turi::flexible_type>::pair[abi:ne180100]<std::string&,turi::flexible_type,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  std::string::size_type v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  v6 = *(_QWORD *)a3;
  *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(_QWORD *)(a3 + 5);
  this[1].__r_.__value_.__r.__words[0] = v6;
  this[1].__r_.__value_.__s.__data_[12] = *(_BYTE *)(a3 + 12);
  *(_BYTE *)(a3 + 12) = 0;
  return this;
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<turi::globals::set_value_visitor,false>,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = turi::globals::set_value_visitor::operator()(*a3, (uint64_t)a4);
      break;
    case 1:
      result = turi::globals::set_value_visitor::operator()(*a3, (uint64_t)a4);
      break;
    case 2:
      result = turi::globals::set_value_visitor::operator()((_BYTE *)*a3, a4);
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return result;
}

uint64_t turi::globals::set_value_visitor::operator()(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t result;
  double v6;

  if (*(_BYTE *)(a1 + 12) == 1)
  {
    v3 = *(double *)a1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 12))
      return 0;
    v3 = (double)*(uint64_t *)a1;
  }
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4
    || (v6 = v3, result = (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)v4 + 48))(v4, &v6), (_DWORD)result))
  {
    if (*(_QWORD *)a2)
    {
      **(double **)a2 = v3;
      return 1;
    }
    return 0;
  }
  return result;
}

{
  double v3;
  uint64_t v4;
  uint64_t result;
  double v6;

  if (*(_BYTE *)(a1 + 12) == 1)
  {
    *(_QWORD *)&v3 = (uint64_t)*(double *)a1;
  }
  else
  {
    if (*(_BYTE *)(a1 + 12))
      return 0;
    v3 = *(double *)a1;
  }
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4
    || (v6 = v3, result = (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)v4 + 48))(v4, &v6), (_DWORD)result))
  {
    if (*(_QWORD *)a2)
    {
      **(double **)a2 = v3;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t turi::globals::set_value_visitor::operator()(_BYTE *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  std::string __p;

  if (a1[12] != 2)
    return 0;
  v3 = *(_QWORD *)a1;
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 8);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  v5 = turi::globals::value_and_value_check<std::string>::set_value(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_217FC7FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::globals::value_and_value_check<std::string>::set_value(uint64_t *a1, const std::string *a2)
{
  uint64_t result;

  result = turi::globals::value_and_value_check<std::string>::perform_check((uint64_t)a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    result = *a1;
    if (*a1)
    {
      std::string::operator=((std::string *)result, a2);
      return 1;
    }
  }
  return result;
}

uint64_t turi::globals::value_and_value_check<std::string>::perform_check(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string __p;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    return 1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *(_QWORD *)(a1 + 32);
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  else
  {
    __p = *(std::string *)a2;
  }
  v4 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v3 + 48))(v3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_217FC80EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<3l>,turi::globals::value_and_value_check<double>,boost::mpl::l_item<mpl_::long_<2l>,turi::globals::value_and_value_check<long long>,boost::mpl::l_item<mpl_::long_<1l>,turi::globals::value_and_value_check<std::string>,boost::mpl::l_end>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<turi::globals::set_value_from_string_visitor,false>,void *,boost::variant<turi::globals::value_and_value_check<double>,turi::globals::value_and_value_check<long long>,turi::globals::value_and_value_check<std::string>>::has_fallback_type_>(boost::detail::variant *a1, int a2, const std::string **a3, uint64_t *a4)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = turi::globals::set_value_from_string_visitor::operator()(*a3, (uint64_t)a4);
      break;
    case 1:
      result = turi::globals::set_value_from_string_visitor::operator()(*a3, (uint64_t)a4);
      break;
    case 2:
      result = turi::globals::set_value_from_string_visitor::operator()(*a3, a4);
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return result;
}

uint64_t turi::globals::set_value_from_string_visitor::operator()(const std::string *a1, uint64_t a2)
{
  double v3;
  double v4;
  uint64_t v5;
  uint64_t result;
  double v7;

  v3 = std::stod(a1, 0);
  v4 = v3;
  v5 = *(_QWORD *)(a2 + 32);
  if (!v5
    || (v7 = v3, result = (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)v5 + 48))(v5, &v7), (_DWORD)result))
  {
    if (*(_QWORD *)a2)
    {
      **(double **)a2 = v4;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = std::stoll(a1, 0, 10);
  v4 = *(_QWORD *)(a2 + 32);
  if (!v4
    || (v6 = v3, result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v6),
                 (_DWORD)result))
  {
    if (*(_QWORD *)a2)
    {
      **(_QWORD **)a2 = v3;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_217FC8308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_217FC84EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t turi::globals::set_value_from_string_visitor::operator()(const std::string *a1, uint64_t *a2)
{
  return turi::globals::value_and_value_check<std::string>::set_value(a2, a1);
}

void OUTLINED_FUNCTION_3_5()
{
  JUMPOUT(0x219A19A08);
}

void _GLOBAL__sub_I_globals_cpp()
{
  void (*v0)(void *);
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  qword_254FF60F0 = 0;
  unk_254FF60F8 = 0;
  turi::GLOBALS_MAIN_PROCESS_PATH = 0;
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::GLOBALS_MAIN_PROCESS_PATH, &dword_217E69000);
  qword_254FF6108 = 0;
  unk_254FF6110 = 0;
  turi::GLOBALS_PYTHON_EXECUTABLE = 0;
  __cxa_atexit(v0, &turi::GLOBALS_PYTHON_EXECUTABLE, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_GLOBALS_MAIN_PROCESS_PATH");
  v8 = 0;
  turi::globals::register_global<std::string>::register_global((turi::globals *)&turi::__GLOBALS_MAIN_PROCESS_PATH__register__instance, (std::string::size_type)__p, (uint64_t)&turi::GLOBALS_MAIN_PROCESS_PATH, 0, (uint64_t)v7);
  v1 = v8;
  if (v8 == v7)
  {
    v2 = 4;
    v1 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  if (v6 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_GLOBALS_PYTHON_EXECUTABLE");
  v8 = 0;
  turi::globals::register_global<std::string>::register_global((turi::globals *)&turi::__GLOBALS_PYTHON_EXECUTABLE__register__instance, (std::string::size_type)__p, (uint64_t)&turi::GLOBALS_PYTHON_EXECUTABLE, 1, (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_13;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_13:
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_217FC88B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void demangle(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int status;
  size_t outlen;
  char mangled[1024];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  outlen = 0;
  status = 0;
  if (sscanf(a1, "%*[^(]%*[^_]%127[^)+]", mangled) == 1 && (v4 = __cxa_demangle(mangled, 0, &outlen, &status)) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, v4);
    free(v4);
  }
  else if (sscanf(a1, "%127s", mangled) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, mangled);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, a1);
  }
}

uint64_t __print_back_trace(void)
{
  const char *v0;
  FILE *v1;
  int v2;
  char **v3;
  uint64_t v4;
  const void **v5;
  uint64_t v6;
  const void *v7;
  const char **v8;
  uint64_t v9;
  const char *v10;
  char **v11;
  void **v12;
  void *__p[2];
  char v15;
  char __filename[1024];
  _OWORD v17[512];
  uint64_t v18;

  MEMORY[0x24BDAC7A8]();
  v18 = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, 512);
  pthread_mutex_lock(&back_trace_file_lock);
  if ((write_error & 1) == 0)
  {
    sprintf(__filename, "backtrace.%d", backtrace_file_number);
    if (write_count)
      v0 = "a";
    else
      v0 = "w";
    v1 = fopen(__filename, v0);
    if (v1)
    {
      ++write_count;
      v2 = backtrace((void **)v17, 1024);
      v3 = backtrace_symbols((void *const *)v17, v2);
      v4 = v2;
      fwrite("Pointers\n", 9uLL, 1uLL, v1);
      fwrite("------------\n", 0xDuLL, 1uLL, v1);
      if (v2)
      {
        v5 = (const void **)v17;
        v6 = v2;
        do
        {
          v7 = *v5++;
          fprintf(v1, "%p\n", v7);
          --v6;
        }
        while (v6);
        fwrite("Raw\n", 4uLL, 1uLL, v1);
        fwrite("------------\n", 0xDuLL, 1uLL, v1);
        v8 = (const char **)v3;
        v9 = v2;
        do
        {
          v10 = *v8++;
          fprintf(v1, "%s\n", v10);
          --v9;
        }
        while (v9);
      }
      else
      {
        fwrite("Raw\n", 4uLL, 1uLL, v1);
        fwrite("------------\n", 0xDuLL, 1uLL, v1);
      }
      fwrite("\nDemangled\n", 0xBuLL, 1uLL, v1);
      fwrite("------------\n", 0xDuLL, 1uLL, v1);
      if (v2)
      {
        v11 = v3;
        do
        {
          demangle(*v11, __p);
          if (v15 >= 0)
            v12 = __p;
          else
            v12 = (void **)__p[0];
          fprintf(v1, "%s\n", (const char *)v12);
          if (v15 < 0)
            operator delete(__p[0]);
          ++v11;
          --v4;
        }
        while (v4);
      }
      free(v3);
      fwrite("-------------------------------------------------------\n", 0x38uLL, 1uLL, v1);
      fwrite("\n\n", 2uLL, 1uLL, v1);
      fclose(v1);
    }
    else
    {
      fwrite("Unable to open output backtrace file.\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
      write_error = 1;
    }
  }
  return pthread_mutex_unlock(&back_trace_file_lock);
}

void sub_217FC8D84(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_217FC8D9C(void *a1, int a2)
{
  _QWORD *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Unable to print back trace on termination", 41);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v2);
    __cxa_end_catch();
    JUMPOUT(0x217FC8D48);
  }
  JUMPOUT(0x217FC8D8CLL);
}

void sub_217FC8DF0()
{
  JUMPOUT(0x217FC8D8CLL);
}

void sub_217FC8DF8()
{
  __cxa_end_catch();
  JUMPOUT(0x217FC8D8CLL);
}

void sub_217FC8FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_backtrace_cpp()
{
  uint64_t v0;
  const char *v1;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v0 = pthread_mutex_init(&back_trace_file_lock, 0);
  assert_msg((_DWORD)v0 == 0, v1, v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &back_trace_file_lock, &dword_217E69000);
}

void CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/WordEmbedding.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::CoreMLModels::_WordEmbedding_default_instance_ = (uint64_t)&off_24D91EDB0;
  unk_254FF6120 = 0;
  qword_254FF6128 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FF6130 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FF6138 = 0;
  byte_254FF6140 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_217FC9188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::WordEmbedding *CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  *(_QWORD *)this = &off_24D91EDB0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::WordEmbedding *)&CoreML::Specification::CoreMLModels::_WordEmbedding_default_instance_)
    CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_217FC91F4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  v4 = *(_QWORD *)(v1 + 24);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    JUMPOUT(0x219A19A08);
  }
  return this;
}

void CoreML::Specification::CoreMLModels::WordEmbedding::~WordEmbedding(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D91EDB0;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D91EDB0;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::CoreMLModels::WordEmbedding::default_instance(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(this);
  return &CoreML::Specification::CoreMLModels::_WordEmbedding_default_instance_;
}

CoreML::Specification::CoreMLModels::WordEmbedding *CoreML::Specification::CoreMLModels::WordEmbedding::New(CoreML::Specification::CoreMLModels::WordEmbedding *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::CoreMLModels::WordEmbedding *v3;

  v3 = (CoreML::Specification::CoreMLModels::WordEmbedding *)operator new();
  CoreML::Specification::CoreMLModels::WordEmbedding::WordEmbedding(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::WordEmbedding>(a2, v3);
  return v3;
}

void sub_217FC93A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::WordEmbedding>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::WordEmbedding>);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *(_QWORD *)(this + 24);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

BOOL CoreML::Specification::CoreMLModels::WordEmbedding::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::WordEmbedding *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string **v5;
  std::string **v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  char *v15;
  int v16;
  std::string *v17;
  std::string *v18;
  _BOOL8 result;
  std::string *v20;
  const char *size;
  unsigned int TagFallback;
  uint64_t Varint32Fallback;

  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v7 = *(unsigned __int8 **)a2;
          v8 = *((_QWORD *)a2 + 1);
          if (*(_QWORD *)a2 >= v8)
          {
            v10 = 0;
LABEL_34:
            TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v10);
            v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
            if ((v11 & 0x100000000) == 0)
              goto LABEL_35;
            goto LABEL_9;
          }
          v9 = v7 + 1;
          v10 = *v7;
          if ((char)*v7 < 1)
          {
            if ((unint64_t)v9 < v8)
            {
              v12 = *v9;
              if ((v10 & ~v12) >= 0x80)
              {
                *(_QWORD *)a2 = v7 + 2;
                v11 = (v10 + (v12 << 7) - 128) | 0x100000000;
                goto LABEL_9;
              }
            }
            goto LABEL_34;
          }
          *(_QWORD *)a2 = v9;
          v11 = v10 | 0x100000000;
          if ((v11 & 0x100000000) == 0)
            goto LABEL_35;
LABEL_9:
          v13 = v11 >> 3;
          if (v11 >> 3 != 100)
            break;
          if (v11 != 34)
            goto LABEL_35;
          v17 = *v5;
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v17 = *v5;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v17))
            return 0;
        }
        if (v13 != 10)
          break;
        if (v11 != 82)
          goto LABEL_35;
        v18 = *v6;
        if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v18 = *v6;
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v18);
        if (!result)
          return result;
        v20 = *v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
          size = (const char *)(*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v20, size, 0, (uint64_t)"CoreML.Specification.CoreMLModels.WordEmbedding.language"))return 0;
      }
      if (v13 != 1 || v11 != 8)
        break;
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1))
      {
        v16 = 0;
        goto LABEL_42;
      }
      v16 = *v15;
      if (*v15 < 0)
      {
LABEL_42:
        Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v16);
        *((_DWORD *)this + 8) = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
      }
      else
      {
        *((_DWORD *)this + 8) = v16;
        *(_QWORD *)a2 = v15 + 1;
      }
    }
LABEL_35:
    if (!(_DWORD)v11 || (v11 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::WordEmbedding *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6;
  uint64_t result;
  const char *v8;
  uint64_t v9;

  v6 = *((_DWORD *)this + 8);
  if (v6)
    _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v8 = *(const char **)(result + 8);
    if (!v8)
      goto LABEL_9;
    result = *(_QWORD *)result;
    goto LABEL_8;
  }
  v8 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_8:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordEmbedding.language");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((_QWORD *)this + 2), a2);
  }
LABEL_9:
  v9 = *((_QWORD *)this + 3);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v9 + 23))
      return result;
    return _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(100, v9, a2);
  }
  if (*(_QWORD *)(v9 + 8))
    return _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(100, v9, a2);
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::ByteSizeLong(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v7 = v6;
  v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  v8 = *((_DWORD *)this + 8);
  if (v8)
    v4 += ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

void CoreML::Specification::CoreMLModels::WordEmbedding::MergeFrom(CoreML::Specification::CoreMLModels::WordEmbedding *this, const CoreML::Specification::CoreMLModels::WordEmbedding *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(_QWORD *)(v7 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v7 + 23))
  {
    goto LABEL_19;
  }
  v8 = (uint64_t *)*((_QWORD *)this + 3);
  if (v8 != (uint64_t *)v7)
  {
    if (v8 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v7);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v7);
  }
LABEL_19:
  v9 = *((_DWORD *)a2 + 8);
  if (v9)
    *((_DWORD *)this + 8) = v9;
}

uint64_t CoreML::Specification::CoreMLModels::WordEmbedding::IsInitialized(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  return 1;
}

_QWORD *CoreML::Specification::CoreMLModels::WordEmbedding::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.WordEmbedding");
}

CoreML::Specification::CoreMLModels::WordEmbedding *CoreML::Specification::CoreMLModels::WordEmbedding::New(CoreML::Specification::CoreMLModels::WordEmbedding *this)
{
  return CoreML::Specification::CoreMLModels::WordEmbedding::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::WordEmbedding>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_WordEmbedding_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

std::ios_base::failure *turi::error::io_error::io_error(std::ios_base::failure *a1, const std::string *a2)
{
  std::ios_base::failure *v4;
  std::string *v5;
  __int128 v6;
  std::error_code v8;

  *(_QWORD *)&v8.__val_ = 1;
  v8.__cat_ = std::iostream_category();
  v4 = std::ios_base::failure::failure(a1, a2, &v8);
  v4->__vftable = (std::ios_base::failure_vtbl *)off_24D91EE60;
  v5 = (std::string *)&v4[1];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    v5->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_217FC999C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::error::io_error::what(turi::error::io_error *this)
{
  uint64_t result;

  result = (uint64_t)this + 32;
  if (*((char *)this + 55) < 0)
    return *(_QWORD *)result;
  return result;
}

void turi::error::io_error::~io_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_24D91EE60;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::runtime_error::~runtime_error(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)off_24D91EE60;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x219A19A08);
}

uint64_t _GLOBAL__sub_I_error_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_log_level_setter_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void _GLOBAL__sub_I_TCObjectDetectorTrainer_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

void turi::make_file_name(const void **a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string __p;
  std::string v13;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = &v13;
  std::string::basic_string[abi:ne180100]((uint64_t)&v13, v6 + 1);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 46;
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  *a3 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_217FC9E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void turi::log_rotation_background_thread(turi *this)
{
  void *v1;
  const char *v2;
  std::string *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __darwin_time_t tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v10;
  timeval v11;
  std::string v12;
  std::string __p;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  char v18;

  if (turi::thread_running == 1)
  {
    do
    {
      if (turi::log_base_name[23] < 0)
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)turi::log_base_name, *(std::string::size_type *)&turi::log_base_name[8]);
      else
        v16 = *(std::string *)turi::log_base_name;
      turi::make_file_name((const void **)&v16.__r_.__value_.__l.__data_, turi::log_counter, &v17);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v1 = global_logger();
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v15, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      else
        v15 = v17;
      file_logger::set_log_file((uint64_t)v1, (uint64_t)&v15);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (byte_254FEE377 >= 0)
        v2 = (const char *)&turi::symlink_name;
      else
        v2 = (const char *)turi::symlink_name;
      unlink(v2);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v3 = &v17;
      else
        v3 = (std::string *)v17.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&v14, (char *)v3);
      if (byte_254FEE377 >= 0)
        v4 = (char *)&turi::symlink_name;
      else
        v4 = (char *)turi::symlink_name;
      std::string::basic_string[abi:ne180100]<0>(&__p, v4);
      boost::filesystem::detail::create_symlink(&v14, &__p, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      v5 = turi::truncate_limit;
      v6 = turi::log_counter;
      if (turi::log_counter >= (unint64_t)turi::truncate_limit)
      {
        if (turi::log_base_name[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)turi::log_base_name, *(std::string::size_type *)&turi::log_base_name[8]);
          v6 = turi::log_counter;
          v5 = turi::truncate_limit;
        }
        else
        {
          v12 = *(std::string *)turi::log_base_name;
        }
        turi::make_file_name((const void **)&v12.__r_.__value_.__l.__data_, v6 - v5, &v14);
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12.__r_.__value_.__l.__data_);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        {
          v7 = (void *)v14.__r_.__value_.__r.__words[0];
          unlink(v14.__r_.__value_.__l.__data_);
          operator delete(v7);
        }
        else
        {
          unlink((const char *)&v14);
        }
      }
      gettimeofday(&v11, 0);
      gettimeofday(&v11, 0);
      pthread_mutex_lock(&turi::lock);
      if (turi::thread_running == 1)
      {
        tv_sec = v11.tv_sec;
        tv_usec = v11.tv_usec;
        do
        {
          gettimeofday((timeval *)&v14, 0);
          v10 = turi::log_interval;
          if ((double)(LODWORD(v14.__r_.__value_.__r.__words[1]) - tv_usec) / 1000000.0
             + (double)(v14.__r_.__value_.__r.__words[0] - tv_sec) >= (double)(unint64_t)turi::log_interval)
            break;
          gettimeofday((timeval *)&__p, &v18);
          v14.__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[0] + v10;
          v14.__r_.__value_.__l.__size_ = 1000 * SLODWORD(__p.__r_.__value_.__r.__words[1]);
          pthread_cond_timedwait(&turi::cond, &turi::lock, (const timespec *)&v14);
        }
        while ((turi::thread_running & 1) != 0);
      }
      pthread_mutex_unlock(&turi::lock);
      ++turi::log_counter;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
    while ((turi::thread_running & 1) != 0);
  }
}

void sub_217FCA184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 113) < 0)
    operator delete(*(void **)(v42 - 136));
  _Unwind_Resume(exception_object);
}

uint64_t *turi::begin_log_rotation(turi *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *exception;
  uint64_t v9[4];

  if (!a3)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Truncate limit must be >= 1";
    __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
  }
  turi::stop_log_rotation(a1);
  std::string::operator=((std::string *)turi::log_base_name, (const std::string *)a1);
  turi::log_interval = a2;
  turi::truncate_limit = a3;
  turi::log_counter = 0;
  std::string::operator=((std::string *)&turi::symlink_name, (const std::string *)turi::log_base_name);
  turi::thread_running = 1;
  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)v6 = 0x800000;
  std::shared_ptr<turi::thread>::reset[abi:ne180100]<turi::thread,void>(&turi::log_rotate_thread, v6);
  v9[0] = (uint64_t)boost::function0<void>::assign_to<void (*)(void)>(void (*)(void))::stored_vtable + 1;
  v9[1] = (uint64_t)turi::log_rotation_background_thread;
  turi::thread::launch(turi::log_rotate_thread, v9);
  return boost::function0<void>::~function0(v9);
}

void sub_217FCA330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

void turi::stop_log_rotation(turi *this)
{
  int v1;
  turi::thread *v2;

  if (turi::thread_running == 1)
  {
    pthread_mutex_lock(&turi::lock);
    turi::thread_running = 0;
    v1 = pthread_cond_signal(&turi::cond);
    assert_msg(v1 == 0, "Condition variable signal error %d", v1);
    pthread_mutex_unlock(&turi::lock);
    turi::thread::join(turi::log_rotate_thread, v2);
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](&turi::log_rotate_thread);
    if (byte_254FEE377 >= 0)
      unlink((const char *)&turi::symlink_name);
    else
      unlink((const char *)turi::symlink_name);
  }
}

void std::shared_ptr<turi::thread>::reset[abi:ne180100]<turi::thread,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<turi::thread>::shared_ptr[abi:ne180100]<turi::thread,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_217FCA5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

pthread_cond_t *turi::conditional::conditional(pthread_cond_t *this)
{
  if (pthread_cond_init(this, 0))
    turi::conditional::conditional(void)::{lambda(void)#1}::operator()();
  return this;
}

void turi::conditional::conditional(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.hpp", 97);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.hpp", "operator()", 212, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::conditional::conditional(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FCA7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::conditional::~conditional(pthread_cond_t *this)
{
  _QWORD *v1;

  if (pthread_cond_destroy(this))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Condition variable destroy error ", 33);
    v1 = (_QWORD *)std::ostream::operator<<();
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v1);
    abort();
  }
}

_QWORD *std::shared_ptr<turi::thread>::shared_ptr[abi:ne180100]<turi::thread,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D91EEA0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217FCA910(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x219A19A08](v1, 0x1020C40AF416337);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::thread *,std::shared_ptr<turi::thread>::__shared_ptr_default_delete<turi::thread,turi::thread>,std::allocator<turi::thread>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x219A19A08);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::thread *,std::shared_ptr<turi::thread>::__shared_ptr_default_delete<turi::thread,turi::thread>,std::allocator<turi::thread>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::detail::function::functor_manager<void (*)(void)>::manage(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4;

  v4 = result;
  switch(a3)
  {
    case 0:
      *(_QWORD *)a2 = *(_QWORD *)result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      goto LABEL_7;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186D0185 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186D0185 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
LABEL_7:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::void_function_invoker0<void (*)(void),void>::invoke(uint64_t (**a1)(void))
{
  return (*a1)();
}

uint64_t _GLOBAL__sub_I_log_rotate_cpp()
{
  void (*v0)(void *);
  int v1;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  *(_QWORD *)&turi::log_base_name[8] = 0;
  *(_QWORD *)&turi::log_base_name[16] = 0;
  *(_QWORD *)turi::log_base_name = 0;
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::log_base_name, &dword_217E69000);
  qword_254FEE368 = 0;
  unk_254FEE370 = 0;
  turi::symlink_name = 0;
  __cxa_atexit(v0, &turi::symlink_name, &dword_217E69000);
  __cxa_atexit((void (*)(void *))std::shared_ptr<turi::thread>::~shared_ptr[abi:ne180100], &turi::log_rotate_thread, &dword_217E69000);
  v1 = pthread_mutex_init(&turi::lock, 0);
  assert_msg(v1 == 0, "Mutex create error %d", v1);
  __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::lock, &dword_217E69000);
  turi::conditional::conditional(&turi::cond);
  return __cxa_atexit((void (*)(void *))turi::conditional::~conditional, &turi::cond, &dword_217E69000);
}

void *global_logger(void)
{
  unsigned __int8 v0;

  {
    file_logger::file_logger((file_logger *)&global_logger(void)::l);
    __cxa_atexit((void (*)(void *))file_logger::~file_logger, &global_logger(void)::l, &dword_217E69000);
  }
  return &global_logger(void)::l;
}

void sub_217FCABD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t streambuffdestructor(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x24BEDB7F0];
    v3 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)result = *MEMORY[0x24BEDB7F0];
    v4 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(result + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(result + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(result + 16) = v4;
    if (*(char *)(result + 111) < 0)
      operator delete(*(void **)(result + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x219A198F4](v1 + 128);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void file_logger::file_logger(file_logger *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t i;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  *((_QWORD *)this + 52) = MEMORY[0x24BEDB840] + 64;
  v4 = (char *)this + 8;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  std::ios_base::init(v7, (char *)this + 8);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *(_QWORD *)this = v2 + 24;
  *((_QWORD *)this + 52) = v3;
  MEMORY[0x219A19480](v4);
  *((_QWORD *)this + 73) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((_QWORD *)this + 85) = -1;
  for (i = 712; i != 968; i += 32)
    *(_QWORD *)((char *)this + i) = 0;
  MEMORY[0x219A19390]((char *)this + 568, "");
  *((_BYTE *)this + 672) = 1;
  *((_DWORD *)this + 169) = 3;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 608), 0);
  pthread_key_create((pthread_key_t *)this + 74, (void (__cdecl *)(void *))streambuffdestructor);
}

void sub_217FCAD9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x219A198F4](v1 + 416);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x219A1948C](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x219A198F4](a1 + 52);
  return a1;
}

void file_logger::~file_logger(void **this)
{
  pthread_mutex_t *v2;
  uint64_t i;
  file_logger *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (pthread_mutex_t *)(this + 76);
  pthread_mutex_lock((pthread_mutex_t *)(this + 76));
  if (!*(_DWORD *)((char *)this + *((_QWORD *)*this - 3) + 32))
  {
    std::ostream::flush();
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)this + *((_QWORD *)*this - 3)), *(_DWORD *)((char *)this + *((_QWORD *)*this - 3) + 32) | 4);
  }
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  for (i = 0; i != -32; i -= 4)
  {
    v4 = (file_logger *)this[i + 117];
    if (&this[i + 114] == (void **)v4)
    {
      v4 = (file_logger *)&this[i + 114];
      v5 = 4;
    }
    else
    {
      if (!v4)
        continue;
      v5 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  if (*((char *)this + 591) < 0)
    operator delete(this[71]);
  v6 = MEMORY[0x24BEDB7E8];
  v7 = *MEMORY[0x24BEDB7E8];
  *this = (void *)*MEMORY[0x24BEDB7E8];
  *(void **)((char *)this + *(_QWORD *)(v7 - 24)) = *(void **)(v6 + 24);
  MEMORY[0x219A1948C](this + 1);
  std::ostream::~ostream();
  MEMORY[0x219A198F4](this + 52);
}

uint64_t file_logger::set_log_file(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  v4 = (pthread_mutex_t *)(a1 + 608);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 608));
  if (!*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32))
  {
    std::ostream::flush();
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) | 4);
    MEMORY[0x219A19390](a1 + 568, "");
  }
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
LABEL_12:
      v5 = 1;
      goto LABEL_13;
    }
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    goto LABEL_12;
  }
  std::ofstream::open();
  if ((*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) & 5) == 0)
  {
    std::string::operator=((std::string *)(a1 + 568), (const std::string *)a2);
    goto LABEL_12;
  }
  v5 = 0;
LABEL_13:
  pthread_mutex_unlock(v4);
  return v5;
}

_QWORD *textcolor@<X0>(int a1@<W0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  char __str[13];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0xDuLL, "%c[%d;%dm", 27, a1, a2 + 30);
  return std::string::basic_string[abi:ne180100]<0>(a3, __str);
}

_QWORD *reset_color@<X0>(_QWORD *a1@<X8>)
{
  char __str[20];
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x14uLL, "%c[0m", 27);
  return std::string::basic_string[abi:ne180100]<0>(a1, __str);
}

uint64_t file_logger::_log(uint64_t this, int a2, const char *a3, const char *a4, int a5, const char *a6, va_list a7)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char __str[1024];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(this + 676) <= a2)
  {
    v10 = this;
    v11 = snprintf(__str, 0x400uLL, "%s(%s:%d): ", messages[a2], a4, a5);
    v12 = vsnprintf(&__str[v11], 1024 - v11, a6, a7);
    v13 = v12 + (uint64_t)v11;
    __str[v13] = 10;
    __str[(int)v13 + 1] = 0;
    if (*(_DWORD *)(v10 + 4 * a2 + 944))
    {
      pthread_mutex_lock((pthread_mutex_t *)(v10 + 608));
      v14 = v10 + 32 * a2;
      if (*(_QWORD *)(v14 + 712))
        std::function<void ()(int,char const*,unsigned long)>::operator()(v14 + 688, a2, (uint64_t)&__str[v11], v12);
      pthread_mutex_unlock((pthread_mutex_t *)(v10 + 608));
    }
    return file_logger::_lograw((file_logger *)v10, a2, __str);
  }
  return this;
}

uint64_t file_logger::_lograw(file_logger *this, int a2, const char *a3)
{
  pthread_mutex_t *v5;
  uint64_t result;
  FILE **v7;
  FILE *v8;
  int v9;
  FILE **v10;
  FILE **v11;
  FILE **v12;
  FILE **v13;
  FILE *v14;
  FILE *v15;
  char __str[20];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v5 = (pthread_mutex_t *)((char *)this + 608);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
  if (!*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32))
  {
    std::ostream::write();
    std::ostream::flush();
  }
  result = pthread_mutex_unlock(v5);
  if (*((_BYTE *)this + 672) || *((_BYTE *)this + 673))
  {
    pthread_mutex_lock(v5);
    switch(a2)
    {
      case 1:
        v7 = (FILE **)MEMORY[0x24BDAC8D8];
        if (!*((_BYTE *)this + 673))
          v7 = (FILE **)MEMORY[0x24BDAC8E8];
        v8 = *v7;
        v9 = 33;
        goto LABEL_20;
      case 3:
        v10 = (FILE **)MEMORY[0x24BDAC8D8];
        if (!*((_BYTE *)this + 673))
          v10 = (FILE **)MEMORY[0x24BDAC8E8];
        v8 = *v10;
        v9 = 32;
        goto LABEL_20;
      case 5:
        v11 = (FILE **)MEMORY[0x24BDAC8D8];
        if (!*((_BYTE *)this + 673))
          v11 = (FILE **)MEMORY[0x24BDAC8E8];
        v8 = *v11;
        v9 = 35;
        goto LABEL_20;
      case 6:
        v12 = (FILE **)MEMORY[0x24BDAC8D8];
        if (!*((_BYTE *)this + 673))
          v12 = (FILE **)MEMORY[0x24BDAC8E8];
        v8 = *v12;
        v9 = 31;
LABEL_20:
        snprintf(__str, 0xDuLL, "%c[%d;%dm", 27, 1, v9);
        fputs(__str, v8);
        goto LABEL_21;
      case 7:
        v14 = (FILE *)*MEMORY[0x24BDAC8D8];
        snprintf(__str, 0xDuLL, "%c[%d;%dm", 27, 1, 31);
        fputs(__str, v14);
        goto LABEL_25;
      default:
        if (a2 < 7)
        {
LABEL_21:
          std::ostream::write();
          pthread_mutex_unlock(v5);
          v13 = (FILE **)MEMORY[0x24BDAC8D8];
          if (!*((_BYTE *)this + 673))
            v13 = (FILE **)MEMORY[0x24BDAC8E8];
        }
        else
        {
LABEL_25:
          std::ostream::write();
          pthread_mutex_unlock(v5);
          v13 = (FILE **)MEMORY[0x24BDAC8D8];
        }
        v15 = *v13;
        snprintf(__str, 0x14uLL, "%c[0m", 27);
        result = fputs(__str, v15);
        break;
    }
  }
  return result;
}

file_logger *file_logger::start_stream(file_logger *this, int a2, const char *a3, const char *a4, int a5, char a6)
{
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *exception;
  std::locale v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v10 = (uint64_t)pthread_getspecific(*((_QWORD *)this + 74));
  if (!v10)
  {
    v10 = operator new();
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v10);
    pthread_setspecific(*((_QWORD *)this + 74), (const void *)v10);
  }
  std::stringbuf::str();
  if (v28 < 0)
  {
    operator delete(v26.__locale_);
    if (!v27)
      goto LABEL_10;
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  v11 = pthread_getspecific(*((_QWORD *)this + 74));
  if (v11)
  {
    if (*((_BYTE *)v11 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
      v12 = std::locale::use_facet(&v26, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v26);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(this);
      if (*((_DWORD *)this + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
LABEL_10:
  *(_DWORD *)(v10 + 296) = a2;
  if (*((_DWORD *)this + 169) > a2 || (a6 & 1) == 0)
  {
    *(_BYTE *)(v10 + 280) = 0;
    return this;
  }
  std::stringbuf::str();
  if (v28 < 0)
  {
    v13 = v27;
    operator delete(v26.__locale_);
    if (!v13)
    {
LABEL_17:
      time(0);
      v14 = (_QWORD *)std::ostream::operator<<();
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" : ", 3);
      v16 = strlen(messages[a2]);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)messages[a2], v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
      v19 = strlen(a4);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)a4, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"): ", 3);
    }
  }
  else if (!v28)
  {
    goto LABEL_17;
  }
  *(_BYTE *)(v10 + 280) = 1;
  *((_DWORD *)this + 150) = a2;
  v22 = v10 + 16 + *(_QWORD *)(*(_QWORD *)(v10 + 16) - 24);
  if ((*(_BYTE *)(v22 + 32) & 5) != 0)
  {
    v23 = -1;
  }
  else
  {
    (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v22 + 40) + 32))(&v26, *(_QWORD *)(v22 + 40), 0, 1, 16);
    v23 = v29;
  }
  *(_QWORD *)(v10 + 288) = v23;
  return this;
}

void sub_217FCB7F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B2C40F675228ALL);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_logger_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::table_internal::_print_string(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type size;
  std::string *p_p;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::string __p;
  char v18;

  __p.__r_.__value_.__s.__data_[0] = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  if (v7 <= a2)
  {
    if (v6 >= 0)
      v13 = a3;
    else
      v13 = *(_QWORD *)a3;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v13, v7);
    v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a3 + 8);
    v15 = a2 - v14;
    if (a2 > v14)
    {
      do
      {
        __p.__r_.__value_.__s.__data_[0] = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
        --v15;
      }
      while (v15);
    }
    __p.__r_.__value_.__s.__data_[0] = 32;
    p_p = &__p;
    v11 = a1;
    v12 = 1;
  }
  else
  {
    std::string::basic_string(&__p, (const std::string *)a3, 0, a2 - 2, (std::allocator<char> *)&v18);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &__p;
    else
      v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v8, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    p_p = (std::string *)"...";
    v11 = a1;
    v12 = 3;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v12);
  __p.__r_.__value_.__s.__data_[0] = 124;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
}

void sub_217FCB9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::table_internal::_print_double(_QWORD *a1, unint64_t a2, double a3)
{
  char v4;
  std::string::size_type size;
  char *v6;
  uint64_t v7;
  std::string::size_type v8;
  char *v9;
  unint64_t v10;
  _QWORD *v11;
  std::string::size_type v12;
  int v13;
  std::string::size_type v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::string::size_type v27;
  void *v29[2];
  unsigned __int8 v30;
  void *v31;
  _BYTE v32[15];
  unsigned __int8 v33;
  _BYTE v34[48];
  void *v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  std::string v39;
  _BYTE v40[48];
  void *__p;
  char v42;
  _BYTE v43[16];
  unint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if ((double)(uint64_t)a3 != a3)
    goto LABEL_10;
  std::to_string(&v39, (uint64_t)a3);
  v4 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  if (size < a2)
  {
    turi::table_internal::_print_string(a1, a2, (uint64_t)&v39);
    v4 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (size >= a2)
  {
LABEL_10:
    v39.__r_.__value_.__s.__data_[0] = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v39, 1);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    if ((v6[32] & 5) != 0)
    {
      v7 = -1;
    }
    else
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v6 + 5) + 32))(&v39, *((_QWORD *)v6 + 5), 0, 1, 16);
      v7 = v44;
    }
    v26 = v7;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
    v8 = v39.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)&v39 + *(_QWORD *)(v39.__r_.__value_.__r.__words[0] - 24) + 24) = a2;
    *(_DWORD *)((char *)&v39.__r_.__value_.__r.__words[1] + *(_QWORD *)(v8 - 24)) = *(_DWORD *)((_BYTE *)&v39.__r_.__value_.__r.__words[1]
                                                                                              + *(_QWORD *)(v8 - 24)) & 0xFFFFFF4F | 0x20;
    std::ostream::operator<<();
    v9 = (char *)&v39 + *(_QWORD *)(v39.__r_.__value_.__r.__words[0] - 24);
    if ((v9[32] & 5) != 0)
    {
      v10 = -1;
    }
    else
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v9 + 5) + 32))(&v31, *((_QWORD *)v9 + 5), 0, 1, 16);
      v10 = v38;
    }
    if (v10 <= a2)
    {
      std::stringbuf::str();
      if ((v33 & 0x80u) == 0)
        v21 = &v31;
      else
        v21 = v31;
      if ((v33 & 0x80u) == 0)
        v22 = v33;
      else
        v22 = *(_QWORD *)v32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v21, v22);
      if ((char)v33 < 0)
        operator delete(v31);
      v39.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB800];
      *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words
                                + *(_QWORD *)(v39.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                                  + 24);
      v39.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
      if (v42 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x219A198F4](v43);
    }
    else
    {
      v11 = (_QWORD *)*MEMORY[0x24BEDB800];
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      v12 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + *(v11 - 3)) = v12;
      v27 = MEMORY[0x24BEDB848] + 16;
      v39.__r_.__value_.__l.__size_ = MEMORY[0x24BEDB848] + 16;
      if (v42 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x219A198F4](v43);
      v13 = 0;
      do
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
        v14 = v39.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v40[*(_QWORD *)(v39.__r_.__value_.__r.__words[0] - 24)] = a2;
        *(_DWORD *)((char *)&v39.__r_.__value_.__r.__words[1] + *(_QWORD *)(v14 - 24)) = *(_DWORD *)((_BYTE *)&v39.__r_.__value_.__r.__words[1] + *(_QWORD *)(v14 - 24)) & 0xFFFFFF4F | 0x20;
        *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[2] + *(_QWORD *)(v14 - 24)) = v13;
        std::ostream::operator<<();
        v15 = (char *)&v39 + *(_QWORD *)(v39.__r_.__value_.__r.__words[0] - 24);
        if ((v15[32] & 5) != 0)
        {
          v16 = -1;
        }
        else
        {
          (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v15 + 5) + 32))(&v31, *((_QWORD *)v15 + 5), 0, 1, 16);
          v16 = v38;
        }
        if (v16 > (uint64_t)a2)
        {
          if (v13)
            --v13;
          else
            v13 = 0;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
          v17 = v31;
          *(_QWORD *)&v34[*((_QWORD *)v31 - 3)] = a2;
          *(_DWORD *)&v32[*(v17 - 3)] = *(_DWORD *)&v32[*(v17 - 3)] & 0xFFFFFF4F | 0x20;
          *(_QWORD *)&v32[*(v17 - 3) + 8] = v13;
          std::ostream::operator<<();
          std::stringbuf::str();
          if ((v30 & 0x80u) == 0)
            v18 = v29;
          else
            v18 = (void **)v29[0];
          if ((v30 & 0x80u) == 0)
            v19 = v30;
          else
            v19 = (uint64_t)v29[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v18, v19);
          if ((char)v30 < 0)
            operator delete(v29[0]);
          v31 = v11;
          *(_QWORD *)&v32[*(v11 - 3) - 8] = v12;
          *(_QWORD *)v32 = MEMORY[0x24BEDB848] + 16;
          if (v36 < 0)
            operator delete(v35);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x219A198F4](&v37);
        }
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
        *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + *(v11 - 3)) = v12;
        v39.__r_.__value_.__l.__size_ = v27;
        if (v42 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x219A198F4](v43);
        if (v16 > (uint64_t)a2)
          break;
      }
      while (v13++ < 4);
    }
    v23 = *(_QWORD *)(*a1 - 24);
    if ((*((_BYTE *)a1 + v23 + 32) & 5) == 0)
    {
      v24 = v26 + a2;
      do
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)((char *)a1 + v23 + 40)
                                                                                            + 32))(&v39, *(_QWORD *)((char *)a1 + v23 + 40), 0, 1, 16);
        if (v44 >= v24)
          break;
        v39.__r_.__value_.__s.__data_[0] = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v39, 1);
        v23 = *(_QWORD *)(*a1 - 24);
      }
      while ((*((_BYTE *)a1 + v23 + 32) & 5) == 0);
    }
    v39.__r_.__value_.__s.__data_[0] = 32;
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v39, 1);
    v39.__r_.__value_.__s.__data_[0] = 124;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)&v39, 1);
  }
}

void sub_217FCBF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  std::ostringstream::~ostringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void turi::table_internal::_print_BOOL(_QWORD *a1, unint64_t a2, int a3)
{
  char *v5;
  void *__p[2];
  char v7;

  if (a2 < 5)
  {
    if (a3)
      v5 = "T";
    else
      v5 = "F";
  }
  else if (a3)
  {
    v5 = "True";
  }
  else
  {
    v5 = "False";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  turi::table_internal::_print_string(a1, a2, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_217FCC0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::table_internal::_print_long(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  _QWORD v9[11];
  char v10;
  uint64_t v11;
  void *v12[2];
  char v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  *(_DWORD *)((char *)&v9[1] + *(_QWORD *)(v9[0] - 24)) = *(_DWORD *)((_BYTE *)&v9[1] + *(_QWORD *)(v9[0] - 24)) & 0xFFFFFF4F | 0x20;
  std::ostream::operator<<();
  v6 = (char *)v9 + *(_QWORD *)(v9[0] - 24);
  if ((v6[32] & 5) != 0)
  {
    v7 = -1;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v6 + 5) + 32))(v12, *((_QWORD *)v6 + 5), 0, 1, 16);
    v7 = v14;
  }
  if (v7 <= a2)
  {
    std::stringbuf::str();
    turi::table_internal::_print_string(a1, a2, (uint64_t)v12);
    if (v13 < 0)
      operator delete(v12[0]);
  }
  else
  {
    turi::table_internal::_print_double(a1, a2, (double)a3);
  }
  v9[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v9[1] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v11);
}

void sub_217FCC270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::table_internal::_format_time(double a1)
{
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *result;

  if (a1 >= 0.001)
  {
    if (a1 < 1.0)
    {
      v2 = (_QWORD *)std::ostream::operator<<();
      v3 = "ms";
      goto LABEL_5;
    }
    if (a1 >= 60.0)
    {
      if (a1 >= 3600.0)
      {
        if (a1 >= 86400.0)
        {
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"d ", 2);
          v12 = (_QWORD *)std::ostream::operator<<();
          result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"h ", 2);
          if (a1 >= 864000.0)
            return result;
        }
        else
        {
          v10 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"h ", 2);
        }
        v2 = (_QWORD *)std::ostream::operator<<();
        v3 = "m";
        goto LABEL_21;
      }
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"m ", 2);
      v2 = (_QWORD *)std::ostream::operator<<();
    }
    else
    {
      v5 = vcvtmd_u64_f64(a1 * 100.0) % 0x64;
      v6 = (_QWORD *)std::ostream::operator<<();
      if (v5 <= 9)
        v7 = ".0";
      else
        v7 = ".";
      if (v5 > 9)
        v8 = 1;
      else
        v8 = 2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      v2 = (_QWORD *)std::ostream::operator<<();
    }
    v3 = "s";
LABEL_21:
    v4 = 1;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  }
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = "us";
LABEL_5:
  v4 = 2;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
}

uint64_t turi::table_internal::_print_time(_QWORD *a1, unint64_t a2, double a3)
{
  uint64_t v6;
  void *__p;
  char v9;
  _QWORD v10[13];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  turi::table_internal::_format_time(a3);
  std::stringbuf::str();
  turi::table_internal::_print_string(a1, a2, (uint64_t)&__p);
  if (v9 < 0)
    operator delete(__p);
  v10[0] = *MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[2] = v6;
  v10[3] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x219A198F4](&v12);
}

void sub_217FCC63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::table_internal::_print_flexible_type(_QWORD *a1, unint64_t a2, turi::flexible_type_impl *this)
{
  int v5;
  std::string __p;
  char v7;

  v5 = *((unsigned __int8 *)this + 12);
  if (*((_BYTE *)this + 12))
  {
    if (v5 == 2)
    {
      turi::table_internal::_print_string(a1, a2, *(_QWORD *)this + 8);
    }
    else if (v5 == 1)
    {
      turi::table_internal::_print_double(a1, a2, *(double *)this);
    }
    else
    {
      switch(*((_BYTE *)this + 12))
      {
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v7, (_QWORD *)(*(_QWORD *)this + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v7, (uint64_t *)(*(_QWORD *)this + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v7, (_QWORD *)(*(_QWORD *)this + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(this, &__p);
          break;
        case 7:
          memset(&__p, 0, sizeof(__p));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v7, (_QWORD *)(*(_QWORD *)this + 8));
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      turi::table_internal::_print_string(a1, a2, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    turi::table_internal::_print_long(a1, a2, *(_QWORD *)this);
  }
}

void sub_217FCC7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_table_element_printers_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t *turi::table_printer::table_printer(uint64_t *a1, __int128 **a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  std::chrono::system_clock::time_point v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::pair<std::string,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>((std::string *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 5);
  gettimeofday((timeval *)(a1 + 3), 0);
  a1[5] = 1000 * std::chrono::system_clock::now().__d_.__rep_;
  a1[6] = 0;
  a1[7] = 0xBFF0000000000000;
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  v5 = pthread_mutex_init((pthread_mutex_t *)(a1 + 12), 0);
  assert_msg(v5 == 0, "Mutex create error %d", v5);
  v6 = pthread_mutex_init((pthread_mutex_t *)(a1 + 20), 0);
  assert_msg(v6 == 0, "Mutex create error %d", v6);
  a1[28] = 0xBFF0000000000000;
  v7 = pthread_mutex_init((pthread_mutex_t *)(a1 + 29), 0);
  assert_msg(v7 == 0, "Mutex create error %d", v7);
  turi::sframe::sframe((turi::sframe *)(a1 + 37));
  *((_WORD *)a1 + 296) = 0;
  a1[78] = 0;
  a1[82] = 0;
  *((_OWORD *)a1 + 43) = 0u;
  *((_OWORD *)a1 + 44) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  a1[92] = 0;
  a1[93] = a3;
  v8 = *a1;
  v9 = a1[1];
  v10 = v9 - *a1;
  if (v9 != *a1)
  {
    v11 = 0;
    v12 = v10 >> 5;
    if (v12 <= 1)
      v12 = 1;
    v13 = (unint64_t *)(v8 + 24);
    while (*((char *)v13 - 1) < 0)
    {
      v14 = *(v13 - 2);
      if (v14 > *v13)
      {
        v15 = (unint64_t *)(v8 + 32 * v11 + 24);
LABEL_10:
        *v15 = v14;
      }
LABEL_11:
      ++v11;
      v13 += 4;
      if (!--v12)
        goto LABEL_12;
    }
    v14 = *((unsigned __int8 *)v13 - 1);
    v15 = v13;
    if (*v13 >= v14)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_12:
  v16.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  turi::estimate_ticks_per_second((turi *)v16.__d_.__rep_);
  gettimeofday((timeval *)(a1 + 3), 0);
  return a1;
}

void sub_217FCCA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  pthread_mutex_t *v11;
  pthread_mutex_t *v12;
  pthread_mutex_t *v13;
  turi::sframe *v14;
  _QWORD *v15;
  void *v17;

  v17 = *(void **)(v10 + 720);
  if (v17)
  {
    *(_QWORD *)(v10 + 728) = v17;
    operator delete(v17);
  }
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(v15);
  turi::sframe::~sframe(v14);
  turi::mutex::~mutex(v13);
  turi::mutex::~mutex(v12);
  turi::mutex::~mutex(v11);
  a10 = (void **)v10;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD *turi::sframe_function_output_iterator<std::vector<turi::flexible_type>,std::function<void ()(std::vector<turi::flexible_type> const&)>,std::function<void ()(std::vector<turi::flexible_type>&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[3];
  if (v7 == a1)
  {
    v8 = 4;
    v7 = a1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void turi::table_printer::~table_printer(turi::table_printer *this)
{
  turi::sframe *v2;
  void *v3;
  turi::table_printer *v4;
  uint64_t v5;
  turi::table_printer *v6;
  uint64_t v7;
  turi::table_printer *v8;
  uint64_t v9;
  void **v10;

  v2 = (turi::table_printer *)((char *)this + 296);
  if (*((_BYTE *)this + 584) && *((_BYTE *)this + 585))
    turi::sframe::close((turi::table_printer *)((char *)this + 296));
  v3 = (void *)*((_QWORD *)this + 90);
  if (v3)
  {
    *((_QWORD *)this + 91) = v3;
    operator delete(v3);
  }
  v10 = (void **)((char *)this + 696);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v10);
  v4 = (turi::table_printer *)*((_QWORD *)this + 86);
  if (v4 == (turi::table_printer *)((char *)this + 664))
  {
    v5 = 4;
    v4 = (turi::table_printer *)((char *)this + 664);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_11:
  v6 = (turi::table_printer *)*((_QWORD *)this + 82);
  if (v6 == (turi::table_printer *)((char *)this + 632))
  {
    v7 = 4;
    v6 = (turi::table_printer *)((char *)this + 632);
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_16:
  v8 = (turi::table_printer *)*((_QWORD *)this + 78);
  if (v8 == (turi::table_printer *)((char *)this + 600))
  {
    v9 = 4;
    v8 = (turi::table_printer *)((char *)this + 600);
    goto LABEL_20;
  }
  if (v8)
  {
    v9 = 5;
LABEL_20:
    (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
  }
  turi::sframe::~sframe(v2);
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 232));
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 160));
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 96));
  v10 = (void **)this;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v10);
}

uint64_t turi::table_printer::print_header(turi::table_printer *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t v14[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _OWORD buf[4];
  void *__p;
  char v22;
  _QWORD v23[22];

  v23[20] = *MEMORY[0x24BDAC8D0];
  os_log_object();
  v2 = os_log_object(void)::log_object;
  if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = 0;
    _os_log_impl(&dword_217E69000, v2, OS_LOG_TYPE_INFO, "event: %lu", (uint8_t *)buf, 0xCu);
  }
  turi::table_printer::print_line_break(this);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  v14[0] = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v14, 1);
  v3 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v4)
  {
    v5 = 0;
    do
    {
      v14[0] = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v14, 1);
      v6 = *(char *)(v3 + 23);
      if (v6 >= 0)
        v7 = v3;
      else
        v7 = *(_QWORD *)v3;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(v3 + 23);
      else
        v8 = *(_QWORD *)(v3 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, v7, v8);
      if (*(char *)(v3 + 23) < 0)
        v9 = *(_QWORD *)(v3 + 8);
      else
        v9 = *(unsigned __int8 *)(v3 + 23);
      while (v9 < *(_QWORD *)(v3 + 24))
      {
        v14[0] = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v14, 1);
        ++v9;
      }
      v14[0] = 32;
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v14, 1);
      v14[0] = 124;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v14, 1);
      os_log_object();
      v11 = os_log_object(void)::log_object;
      if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
      {
        v12 = v3;
        if (*(char *)(v3 + 23) < 0)
          v12 = *(_QWORD *)v3;
        *(_DWORD *)v14 = 134218498;
        v15 = 1;
        v16 = 2048;
        v17 = v5;
        v18 = 2082;
        v19 = v12;
        _os_log_impl(&dword_217E69000, v11, OS_LOG_TYPE_INFO, "event: %lu, column: %lu, value: %{public}s", v14, 0x20u);
      }
      ++v5;
      v3 += 32;
    }
    while (v3 != v4);
  }
  turi::table_printer::_p((uint64_t)this);
  turi::table_printer::print_line_break(this);
  *(_QWORD *)&buf[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)buf + *(_QWORD *)(*(_QWORD *)&buf[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *((_QWORD *)&buf[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (v22 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](v23);
}

void sub_217FCCF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void os_log_object(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      os_log_object(void)::log_object = (uint64_t)os_log_create("com.apple.turi", "table_printer");
    }
  }
}

uint64_t turi::table_printer::print_line_break(turi::table_printer *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  char v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  v9 = 43;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v3)
  {
    do
    {
      if (*(_QWORD *)(v2 + 24) != -2)
      {
        v4 = 0;
        do
        {
          v9 = 45;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
          ++v4;
        }
        while (v4 < *(_QWORD *)(v2 + 24) + 2);
      }
      v9 = 43;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
      v2 += 32;
    }
    while (v2 != v3);
  }
  turi::table_printer::_p((uint64_t)this);
  v6[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v6[1] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v8);
}

void sub_217FCD0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::table_printer::print_footer(turi::table_printer *this)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  turi::table_printer::print_track_row_if_necessary(this);
  turi::table_printer::print_line_break(this);
  os_log_object();
  v2 = os_log_object(void)::log_object;
  if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
  {
    v3 = 134217984;
    v4 = 3;
    _os_log_impl(&dword_217E69000, v2, OS_LOG_TYPE_INFO, "event: %lu", (uint8_t *)&v3, 0xCu);
  }
}

uint64_t turi::table_printer::print_track_row_if_necessary(turi::table_printer *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const turi::flexible_type *v6;
  uint64_t v7;
  unint64_t v8;
  std::string::size_type *v9;
  unint64_t v10;
  int v11;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  std::string::size_type v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string::size_type v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  std::string::size_type v25;
  char **v26;
  char *v27;
  const std::string *v28;
  uint64_t v29;
  std::string::size_type v30;
  char **v31;
  char *v32;
  const std::string *v33;
  double v34;
  uint64_t v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string::size_type v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  std::string::size_type v44;
  std::string::size_type v45;
  std::string::size_type v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  __int128 v50;
  __int128 v51;
  float v52;
  uint64_t result;
  std::runtime_error *v54;
  std::string *v55;
  __int128 v56;
  std::runtime_error *exception;
  std::string *v58;
  __int128 v59;
  double v60;
  size_t __idx[2];
  std::string *v62;
  uint64_t *v63;
  void *__p;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  std::string v72;
  size_t v73;
  std::string v74;
  std::string::size_type v75;
  void *v76;
  void *v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v2 = (pthread_mutex_t *)((char *)this + 232);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 232));
  if (!*((_BYTE *)this + 593))
  {
    v3 = *((_QWORD *)this + 87);
    v4 = *((_QWORD *)this + 88);
    if (v3 != v4)
    {
      v5 = (v4 - v3) >> 4;
      v74.__r_.__value_.__r.__words[0] = v5;
      v67 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 5;
      if (v5 != v67)
      {
        v62 = &v74;
        v63 = &v67;
        turi::table_printer::print_track_row_if_necessary(void)const::$_0::operator()();
      }
      v74.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 91) - *((_QWORD *)this + 90);
      v67 = v5;
      if (v74.__r_.__value_.__r.__words[0] != v5)
      {
        v62 = &v74;
        v63 = &v67;
        turi::table_printer::print_track_row_if_necessary(void)const::$_1::operator()();
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v62);
      v74.__r_.__value_.__s.__data_[0] = 124;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)&v74, 1);
      v7 = *((_QWORD *)this + 87);
      if (*((_QWORD *)this + 88) != v7)
      {
        v8 = 0;
        do
        {
          v9 = (std::string::size_type *)(v7 + 16 * v8);
          turi::table_printer::os_log_value((turi::table_printer *)v8, (char *)v9, v6);
          v10 = *(_QWORD *)(*(_QWORD *)this + 32 * v8 + 24);
          v11 = *(unsigned __int8 *)(*((_QWORD *)this + 90) + v8);
          if (v11 == 2)
          {
            v16 = 0.0;
            switch(*((_BYTE *)v9 + 12))
            {
              case 0:
                v16 = (double)(uint64_t)*v9;
                goto LABEL_78;
              case 1:
                v16 = *(double *)v9;
                goto LABEL_78;
              case 2:
                v30 = *v9;
                v31 = (char **)(*v9 + 8);
                v73 = 0;
                v32 = (char *)v31;
                if (*(char *)(v30 + 31) < 0)
                  v32 = *v31;
                v33 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v74, v32);
                v34 = std::stod(v33, &v73);
                if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v74.__r_.__value_.__l.__data_);
                if (*(char *)(v30 + 31) < 0)
                  v35 = *(_QWORD *)(v30 + 16);
                else
                  v35 = *(unsigned __int8 *)(v30 + 31);
                if (v73 != v35)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v58 = std::string::append(&v72, " cannot be interpreted as a float");
                  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
                  v74.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v59;
                  v58->__r_.__value_.__l.__size_ = 0;
                  v58->__r_.__value_.__r.__words[2] = 0;
                  v58->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, &v74);
                  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                v52 = v34;
                v16 = v52;
                goto LABEL_78;
              case 3:
                v21 = *v9;
                memset(&v74, 0, sizeof(v74));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v74, *(const void **)(v21 + 8), *(_QWORD *)(v21 + 16), (uint64_t)(*(_QWORD *)(v21 + 16) - *(_QWORD *)(v21 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (v74.__r_.__value_.__r.__words[0])
                {
                  v74.__r_.__value_.__l.__size_ = v74.__r_.__value_.__r.__words[0];
                  operator delete(v74.__r_.__value_.__l.__data_);
                }
                goto LABEL_78;
              case 4:
                v44 = *v9;
                memset(&v74, 0, sizeof(v74));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v74, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(_QWORD *)(v44 + 16) - *(_QWORD *)(v44 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
                goto LABEL_78;
              case 5:
                v45 = *v9;
                memset(&v74, 0, sizeof(v74));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v74, *(uint64_t **)(v45 + 8), *(uint64_t **)(v45 + 16), (uint64_t)(*(_QWORD *)(v45 + 16) - *(_QWORD *)(v45 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
                goto LABEL_78;
              case 6:
                v16 = (double)*((int *)v9 + 2) / 1000000.0 + (double)((uint64_t)(*v9 << 8) >> 8);
                goto LABEL_78;
              case 7:
                goto LABEL_78;
              case 8:
                v46 = *v9;
                v47 = *(unsigned int **)(*v9 + 16);
                v67 = *(_QWORD *)(*v9 + 8);
                v68 = v47;
                if (v47)
                {
                  v48 = v47 + 2;
                  do
                    v49 = __ldxr(v48);
                  while (__stxr(v49 + 1, v48));
                }
                v50 = *(_OWORD *)(v46 + 24);
                v51 = *(_OWORD *)(v46 + 56);
                v70 = *(_OWORD *)(v46 + 40);
                v71 = v51;
                v69 = v50;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v68);
                goto LABEL_78;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&v74, *v9 + 8);
                turi::flexible_type_fail(0);
                if (v76)
                {
                  v77 = v76;
                  operator delete(v76);
                }
                if (v74.__r_.__value_.__r.__words[2])
                {
                  v75 = v74.__r_.__value_.__r.__words[2];
                  operator delete((void *)v74.__r_.__value_.__r.__words[2]);
                }
                size = (std::__shared_weak_count *)v74.__r_.__value_.__l.__size_;
                if (v74.__r_.__value_.__l.__size_)
                {
                  v23 = (unint64_t *)(v74.__r_.__value_.__l.__size_ + 8);
                  do
                    v24 = __ldaxr(v23);
                  while (__stlxr(v24 - 1, v23));
                  if (!v24)
                  {
                    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                    std::__shared_weak_count::__release_weak(size);
                  }
                }
LABEL_78:
                v60 = v16;
                turi::table_printer::_get_table_printer((uint64_t)this, &v60, (uint64_t)__idx);
                turi::table_internal::_print_time(&v62, v10, *(double *)&__idx[1]);
                goto LABEL_79;
              default:
LABEL_86:
                result = turi::flexible_type_fail(0);
                __break(1u);
                return result;
            }
          }
          if (v11 == 1)
          {
            v15 = 0;
            switch(*((_BYTE *)v9 + 12))
            {
              case 0:
                v15 = *v9;
                goto LABEL_65;
              case 1:
                v15 = (uint64_t)*(double *)v9;
                goto LABEL_65;
              case 2:
                v25 = *v9;
                v26 = (char **)(*v9 + 8);
                __idx[0] = 0;
                v27 = (char *)v26;
                if (*(char *)(v25 + 31) < 0)
                  v27 = *v26;
                v28 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v74, v27);
                v15 = std::stoll(v28, __idx, 10);
                if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v74.__r_.__value_.__l.__data_);
                if (*(char *)(v25 + 31) < 0)
                  v29 = *(_QWORD *)(v25 + 16);
                else
                  v29 = *(unsigned __int8 *)(v25 + 31);
                if (__idx[0] != v29)
                {
                  v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v55 = std::string::append(&v72, " cannot be interpreted as an integer");
                  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
                  v74.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v56;
                  v55->__r_.__value_.__l.__size_ = 0;
                  v55->__r_.__value_.__r.__words[2] = 0;
                  v55->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v54, &v74);
                  __cxa_throw(v54, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_65;
              case 3:
                v17 = *v9;
                memset(&v74, 0, sizeof(v74));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v74, *(const void **)(v17 + 8), *(_QWORD *)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (v74.__r_.__value_.__r.__words[0])
                {
                  v74.__r_.__value_.__l.__size_ = v74.__r_.__value_.__r.__words[0];
                  operator delete(v74.__r_.__value_.__l.__data_);
                }
                goto LABEL_64;
              case 4:
                v36 = *v9;
                memset(&v74, 0, sizeof(v74));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v74, *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(_QWORD *)(v36 + 16) - *(_QWORD *)(v36 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
                goto LABEL_64;
              case 5:
                v37 = *v9;
                memset(&v74, 0, sizeof(v74));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v74, *(uint64_t **)(v37 + 8), *(uint64_t **)(v37 + 16), (uint64_t)(*(_QWORD *)(v37 + 16) - *(_QWORD *)(v37 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v72.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
                goto LABEL_64;
              case 6:
                v15 = (uint64_t)(*v9 << 8) >> 8;
                goto LABEL_65;
              case 7:
                goto LABEL_65;
              case 8:
                v38 = *v9;
                v39 = *(unsigned int **)(*v9 + 16);
                v67 = *(_QWORD *)(*v9 + 8);
                v68 = v39;
                if (v39)
                {
                  v40 = v39 + 2;
                  do
                    v41 = __ldxr(v40);
                  while (__stxr(v41 + 1, v40));
                }
                v42 = *(_OWORD *)(v38 + 24);
                v43 = *(_OWORD *)(v38 + 56);
                v70 = *(_OWORD *)(v38 + 40);
                v71 = v43;
                v69 = v42;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v68);
                goto LABEL_64;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&v74, *v9 + 8);
                turi::flexible_type_fail(0);
                if (v76)
                {
                  v77 = v76;
                  operator delete(v76);
                }
                if (v74.__r_.__value_.__r.__words[2])
                {
                  v75 = v74.__r_.__value_.__r.__words[2];
                  operator delete((void *)v74.__r_.__value_.__r.__words[2]);
                }
                v18 = (std::__shared_weak_count *)v74.__r_.__value_.__l.__size_;
                if (v74.__r_.__value_.__l.__size_)
                {
                  v19 = (unint64_t *)(v74.__r_.__value_.__l.__size_ + 8);
                  do
                    v20 = __ldaxr(v19);
                  while (__stlxr(v20 - 1, v19));
                  if (!v20)
                  {
                    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                    std::__shared_weak_count::__release_weak(v18);
                  }
                }
LABEL_64:
                v15 = 0;
LABEL_65:
                turi::table_internal::_print_BOOL(&v62, v10, v15 != 0);
                goto LABEL_79;
              default:
                goto LABEL_86;
            }
          }
          if (!*(_BYTE *)(*((_QWORD *)this + 90) + v8))
          {
            v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91EC00;
            v74.__r_.__value_.__l.__size_ = 0;
            LODWORD(v74.__r_.__value_.__r.__words[2]) = 0;
            v74.__r_.__value_.__s.__data_[20] = 0;
            if (&v74.__r_.__value_.__r.__words[1] != v9)
            {
              v12 = *v9;
              *(std::string::size_type *)((char *)&v74.__r_.__value_.__r.__words[1] + 5) = *(std::string::size_type *)((char *)v9 + 5);
              v74.__r_.__value_.__l.__size_ = v12;
              v74.__r_.__value_.__s.__data_[20] = *((_BYTE *)v9 + 12);
              if (v74.__r_.__value_.__s.__data_[20] <= 9u
                && ((1 << v74.__r_.__value_.__s.__data_[20]) & 0x33C) != 0)
              {
                v13 = (unint64_t *)v74.__r_.__value_.__l.__size_;
                do
                  v14 = __ldaxr(v13);
                while (__stlxr(v14 + 1, v13));
              }
            }
            turi::table_internal::_print_flexible_type(&v62, v10, (turi::flexible_type_impl *)&v74.__r_.__value_.__r.__words[1]);
            turi::table_internal::table_printer_element<turi::flexible_type,void>::~table_printer_element((uint64_t)&v74);
          }
LABEL_79:
          ++v8;
          v7 = *((_QWORD *)this + 87);
        }
        while (v8 < (*((_QWORD *)this + 88) - v7) >> 4);
      }
      turi::table_printer::_p((uint64_t)this);
      v62 = (std::string *)*MEMORY[0x24BEDB800];
      *(std::string **)((char *)&v62 + v62[-1].__r_.__value_.__r.__words[0]) = *(std::string **)(MEMORY[0x24BEDB800]
                                                                                               + 24);
      v63 = (uint64_t *)(MEMORY[0x24BEDB848] + 16);
      if (v65 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x219A198F4](&v66);
    }
  }
  return pthread_mutex_unlock(v2);
}

void sub_217FCD9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  pthread_mutex_t *v14;
  void *v15;
  int v16;
  uint64_t v17;

  if (*(char *)(v17 - 169) < 0)
    operator delete(*(void **)(v17 - 192));
  if (*(char *)(v17 - 201) < 0)
  {
    operator delete(*(void **)(v17 - 224));
    if ((v16 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&a14);
      pthread_mutex_unlock(v14);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v15);
  goto LABEL_8;
}

uint64_t turi::table_printer::get_tracked_table@<X0>(turi::table_printer *this@<X0>, turi::sframe *a2@<X8>)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::vector<std::string>::size_type v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::string *p_p;
  uint64_t v16;
  void *v18[3];
  std::vector<std::string> v19;
  std::string __p;
  std::string *v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)((char *)this + 232);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 232));
  if (*((_BYTE *)this + 592))
    goto LABEL_26;
  turi::sframe::sframe((turi::sframe *)&__p);
  turi::sframe::operator=((uint64_t)this + 296, (uint64_t)&__p);
  turi::sframe::~sframe((turi::sframe *)&__p);
  v6 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  v7 = (v5 - *(_QWORD *)this) >> 5;
  std::vector<std::string>::vector(&v19, v7);
  std::vector<turi::flex_type_enum>::vector(v18, v7);
  if (v5 != v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    if (v7 <= 1)
      v7 = 1;
    do
    {
      std::string::operator=(&v19.__begin_[v8], (const std::string *)(*(_QWORD *)this + v9));
      *((_BYTE *)v18[0] + v10++) = 2;
      v9 += 32;
      ++v8;
    }
    while (v7 != v10);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  turi::sframe::open_for_write((uint64_t)this + 296, &v19, v18, &__p, 1, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::sframe::get_output_iterator((size_t *)this + 37, 0, (uint64_t)&__p);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)this + 75, (uint64_t)&__p);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)this + 79, (uint64_t)v22);
  std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)this + 83, (uint64_t)v24);
  v11 = v25;
  if (v25 == v24)
  {
    v12 = 4;
    v11 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_13;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_13:
  v13 = v23;
  if (v23 == v22)
  {
    v14 = 4;
    v13 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_18;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_18:
  p_p = v21;
  if (v21 == &__p)
  {
    v16 = 4;
    p_p = &__p;
    goto LABEL_22;
  }
  if (v21)
  {
    v16 = 5;
LABEL_22:
    (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v16))();
  }
  *((_BYTE *)this + 592) = 1;
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_26:
  if (*((_BYTE *)this + 584) && *((_BYTE *)this + 585))
    turi::sframe::close((turi::table_printer *)((char *)this + 296));
  *((_BYTE *)this + 592) = 0;
  turi::sframe::sframe(a2, (turi::table_printer *)((char *)this + 296));
  return pthread_mutex_unlock(v4);
}

void sub_217FCDDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void turi::table_printer::print_track_row_if_necessary(void)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"track_row_values_.size()", 24);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"format.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.cpp", "operator()", 229, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::table_printer::print_track_row_if_necessary(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FCDFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::table_printer::print_track_row_if_necessary(void)const::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"track_row_styles_.size()", 24);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"format.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.cpp", "operator()", 230, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::table_printer::print_track_row_if_necessary(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FCE210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::table_printer::os_log_value(turi::table_printer *this, char *a2, const turi::flexible_type *a3)
{
  NSObject *v5;
  _QWORD *v6;
  const char *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  turi::table_printer *v16;
  __int16 v17;
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  switch(a2[12])
  {
    case 0:
      os_log_object();
      v5 = os_log_object(void)::log_object;
      if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD **)a2;
        v13 = 134218496;
        v14 = 2;
        v15 = 2048;
        v16 = this;
        v17 = 2048;
        v18 = v6;
        v7 = "event: %lu, column: %lu, value: %lld";
        goto LABEL_17;
      }
      break;
    case 1:
      os_log_object();
      v5 = os_log_object(void)::log_object;
      if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
      {
        v8 = *(_QWORD **)a2;
        v13 = 134218496;
        v14 = 2;
        v15 = 2048;
        v16 = this;
        v17 = 2048;
        v18 = v8;
        v7 = "event: %lu, column: %lu, value: %f";
        goto LABEL_17;
      }
      break;
    case 2:
      os_log_object();
      v5 = os_log_object(void)::log_object;
      if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
      {
        v9 = (_QWORD *)(*(_QWORD *)a2 + 8);
        if (*(char *)(*(_QWORD *)a2 + 31) < 0)
          v9 = (_QWORD *)*v9;
        v13 = 134218498;
        v14 = 2;
        v15 = 2048;
        v16 = this;
        v17 = 2082;
        v18 = v9;
        v7 = "event: %lu, column: %lu, value: %{public}s";
        goto LABEL_17;
      }
      break;
    case 6:
      os_log_object();
      v5 = os_log_object(void)::log_object;
      if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
      {
        v12 = (uint64_t)(*(_QWORD *)a2 << 8) >> 8;
        v13 = 134218496;
        v14 = 2;
        v15 = 2048;
        v16 = this;
        v17 = 2048;
        v18 = (_QWORD *)v12;
        v7 = "event: %lu, column: %lu, value: %{time_t}lld";
        goto LABEL_17;
      }
      break;
    default:
      os_log_object();
      v5 = os_log_object(void)::log_object;
      if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
      {
        v10 = a2[12];
        if (v10 > 9)
          v11 = "undefined";
        else
          v11 = off_24D91EF80[v10];
        v13 = 134218498;
        v14 = 2;
        v15 = 2048;
        v16 = this;
        v17 = 2082;
        v18 = v11;
        v7 = "event: %lu, column: %lu, value: instance of complex type %{public}s";
LABEL_17:
        _os_log_impl(&dword_217E69000, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v13, 0x20u);
      }
      break;
  }
}

uint64_t turi::table_printer::_get_table_printer@<X0>(uint64_t result@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  uint64_t v5;
  timeval v6;

  v4 = *a2;
  if (*a2 < 0.0)
  {
    v5 = result;
    result = gettimeofday(&v6, 0);
    v4 = (double)(v6.tv_usec - *(_DWORD *)(v5 + 32)) / 1000000.0 + (double)(v6.tv_sec - *(_QWORD *)(v5 + 24));
  }
  *(_QWORD *)a3 = &unk_24D91EF58;
  *(double *)(a3 + 8) = v4;
  return result;
}

uint64_t turi::table_internal::table_printer_element<turi::progress_time,void>::print(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  return turi::table_internal::_print_time(a2, a3, *(double *)(a1 + 8));
}

uint64_t turi::table_printer::set_up_time_printing_interval(turi::table_printer *this, uint64_t a2)
{
  unint64_t v4;
  double v5;
  double v6;
  uint64_t result;
  uint64_t v8;
  double v9;
  uint64_t i;
  timeval v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  gettimeofday(v12, 0);
  v4 = 0;
  v5 = ((double)(v12[0].tv_usec - *((_DWORD *)this + 8)) / 1000000.0
      + (double)(v12[0].tv_sec - *((_QWORD *)this + 3))
      - *((double *)this + 7))
     / (double)(unint64_t)(a2 - *((_QWORD *)this + 8));
  v12[0] = (timeval)xmmword_2186D01F0;
  v12[1] = (timeval)unk_2186D0200;
  v6 = *(double *)&turi::MIN_SECONDS_BETWEEN_TICK_PRINTS;
  result = 1000000000;
  do
  {
    v8 = 0;
    while (1)
    {
      v9 = v5 * (double)*(unint64_t *)((char *)&v12[0].tv_sec + v8);
      if (v9 >= v6)
        break;
      v8 += 8;
      if (v8 == 32)
        goto LABEL_7;
    }
    result = *(__darwin_time_t *)((char *)&v12[0].tv_sec + v8);
LABEL_7:
    for (i = 0; i != 32; i += 8)
      *(__darwin_time_t *)((char *)&v12[0].tv_sec + i) *= 10;
  }
  while (v9 < v6 && v4++ <= 8);
  return result;
}

void turi::table_printer::os_log_value(turi::table_printer *this, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  turi::table_printer *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  os_log_object();
  v4 = os_log_object(void)::log_object;
  if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
  {
    v5 = 134218496;
    v6 = 2;
    v7 = 2048;
    v8 = this;
    v9 = 2048;
    v10 = a2;
    _os_log_impl(&dword_217E69000, v4, OS_LOG_TYPE_INFO, "event: %lu, column: %lu, value: %lu", (uint8_t *)&v5, 0x20u);
  }
}

{
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  turi::table_printer *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  os_log_object();
  v4 = os_log_object(void)::log_object;
  if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
  {
    v5 = 134218496;
    v6 = 2;
    v7 = 2048;
    v8 = this;
    v9 = 2048;
    v10 = a2;
    _os_log_impl(&dword_217E69000, v4, OS_LOG_TYPE_INFO, "event: %lu, column: %lu, value: %lld", (uint8_t *)&v5, 0x20u);
  }
}

void turi::table_printer::os_log_value(turi::table_printer *this, double a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  turi::table_printer *v8;
  __int16 v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  os_log_object();
  v4 = os_log_object(void)::log_object;
  if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
  {
    v5 = 134218496;
    v6 = 2;
    v7 = 2048;
    v8 = this;
    v9 = 2048;
    v10 = a2;
    _os_log_impl(&dword_217E69000, v4, OS_LOG_TYPE_INFO, "event: %lu, column: %lu, value: %f", (uint8_t *)&v5, 0x20u);
  }
}

void turi::table_printer::os_log_value(turi::table_printer *this, float a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  turi::table_printer *v8;
  __int16 v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  os_log_object();
  v4 = os_log_object(void)::log_object;
  if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
  {
    v5 = 134218496;
    v6 = 2;
    v7 = 2048;
    v8 = this;
    v9 = 2048;
    v10 = a2;
    _os_log_impl(&dword_217E69000, v4, OS_LOG_TYPE_INFO, "event: %lu, column: %lu, value: %f", (uint8_t *)&v5, 0x20u);
  }
}

void turi::table_printer::os_log_value(uint64_t a1, uint64_t a2, double *a3)
{
  NSObject *v6;
  double v7;
  _BYTE v8[22];
  __int16 v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  os_log_object();
  v6 = os_log_object(void)::log_object;
  if (os_log_type_enabled((os_log_t)os_log_object(void)::log_object, OS_LOG_TYPE_INFO))
  {
    v7 = *a3;
    if (*a3 < 0.0)
    {
      gettimeofday((timeval *)v8, 0);
      v7 = (double)(*(_DWORD *)&v8[8] - *(_DWORD *)(a1 + 32)) / 1000000.0
         + (double)(uint64_t)(*(_QWORD *)v8 - *(_QWORD *)(a1 + 24));
    }
    *(_DWORD *)v8 = 134218496;
    *(_QWORD *)&v8[4] = 2;
    *(_WORD *)&v8[12] = 2048;
    *(_QWORD *)&v8[14] = a2;
    v9 = 2048;
    v10 = v7;
    _os_log_impl(&dword_217E69000, v6, OS_LOG_TYPE_INFO, "event: %lu, column: %lu, value: %f seconds", v8, 0x20u);
  }
}

void sub_217FCECB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

double turi::table_internal::table_printer_element<turi::progress_time,void>::get_value@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 1;
  result = *(double *)(a1 + 8);
  *(double *)a2 = result;
  return result;
}

std::string *std::vector<std::pair<std::string,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_217FCEDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*,std::pair<std::string,unsigned long>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v6 + 3);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_217FCEE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 32;
  }
}

void __cxx_global_var_init_6_0()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

void _GLOBAL__sub_I_table_printer_cpp()
{
  _QWORD *v0;
  uint64_t v1;
  void *__p[2];
  char v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_MIN_SECONDS_BETWEEN_TICK_PRINTS");
  v5 = 0;
  turi::globals::register_global<double>::register_global(&turi::__MIN_SECONDS_BETWEEN_TICK_PRINTS__register__instance, __p, &turi::MIN_SECONDS_BETWEEN_TICK_PRINTS, 1, v4);
  v0 = v5;
  if (v5 == v4)
  {
    v1 = 4;
    v0 = v4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = 5;
  }
  (*(void (**)(void))(*v0 + 8 * v1))();
LABEL_6:
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_217FCF0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _GLOBAL__sub_I_table_printer_cpp_cold_1((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_mlc_od_backend_mm()
{
  void *v0;

  v0 = (void *)MEMORY[0x219A19FE4]();
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  objc_autoreleasePoolPop(v0);
}

pthread_mutex_t *turi::mutex::mutex(pthread_mutex_t *this)
{
  int v2;

  v2 = pthread_mutex_init(this, 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  return this;
}

void sub_217FCF334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_execute_task_in_native_thread_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double CoreML::Specification::V5::protobuf_MIL_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::V5::protobuf_MIL_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  double result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/MIL.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  qword_254FF6160 = 0;
  unk_254FF6168 = 0;
  qword_254FF6158 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF6170 = 0;
  CoreML::Specification::V5::_Program_FunctionsEntry_default_instance_ = (uint64_t)&unk_24D920530;
  qword_254FF6150 = 0;
  byte_254FF6178 = 1;
  qword_254FF6198 = 0;
  unk_254FF61A0 = 0;
  qword_254FF6190 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF61A8 = 0;
  CoreML::Specification::V5::_Program_AttributesEntry_default_instance_ = (uint64_t)&unk_24D9206B0;
  qword_254FF6188 = 0;
  byte_254FF61B0 = 1;
  *((_BYTE *)CoreML::Specification::V5::Program::Program((CoreML::Specification::V5::Program *)&CoreML::Specification::V5::_Program_default_instance_)
  + 104) = 1;
  qword_254FF6240 = 0;
  unk_254FF6248 = 0;
  qword_254FF6238 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF6250 = 0;
  CoreML::Specification::V5::_Function_BlockSpecializationsEntry_default_instance_ = (uint64_t)&unk_24D920830;
  qword_254FF6230 = 0;
  byte_254FF6258 = 1;
  qword_254FF6278 = 0;
  unk_254FF6280 = 0;
  qword_254FF6268 = 0;
  unk_254FF6270 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF6288 = 0;
  CoreML::Specification::V5::_Function_AttributesEntry_default_instance_ = (uint64_t)&unk_24D9206B0;
  byte_254FF6290 = 1;
  *((_BYTE *)CoreML::Specification::V5::Function::Function((CoreML::Specification::V5::Function *)&CoreML::Specification::V5::_Function_default_instance_)
  + 120) = 1;
  qword_254FF6330 = 0;
  unk_254FF6338 = 0;
  qword_254FF6320 = 0;
  unk_254FF6328 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF6340 = 0;
  CoreML::Specification::V5::_Block_AttributesEntry_default_instance_ = (uint64_t)&unk_24D9206B0;
  byte_254FF6348 = 1;
  *((_BYTE *)CoreML::Specification::V5::Block::Block((CoreML::Specification::V5::Block *)&CoreML::Specification::V5::_Block_default_instance_)
  + 128) = 1;
  CoreML::Specification::V5::_Argument_Binding_default_instance_ = (uint64_t)&off_24D91F1A8;
  unk_254FF63E0 = 0;
  qword_254FF63F0 = 0;
  byte_254FF63F8 = 1;
  CoreML::Specification::V5::_Argument_default_instance_ = (uint64_t)&off_24D91F240;
  unk_254FF6418 = 0u;
  unk_254FF6428 = 0u;
  dword_254FF6438 = 0;
  byte_254FF6440 = 1;
  qword_254FF6460 = 0;
  unk_254FF6468 = 0;
  qword_254FF6458 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF6470 = 0;
  CoreML::Specification::V5::_Operation_InputsEntry_default_instance_ = (uint64_t)&unk_24D9209B0;
  qword_254FF6450 = 0;
  byte_254FF6478 = 1;
  qword_254FF6498 = 0;
  unk_254FF64A0 = 0;
  qword_254FF6488 = 0;
  unk_254FF6490 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF64A8 = 0;
  CoreML::Specification::V5::_Operation_AttributesEntry_default_instance_ = (uint64_t)&unk_24D9206B0;
  byte_254FF64B0 = 1;
  *((_BYTE *)CoreML::Specification::V5::Operation::Operation((CoreML::Specification::V5::Operation *)&CoreML::Specification::V5::_Operation_default_instance_)
  + 144) = 1;
  CoreML::Specification::V5::_NamedValueType_default_instance_ = (uint64_t)&off_24D91F370;
  *(_QWORD *)algn_254FF6558 = 0;
  qword_254FF6560 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FF6568 = 0;
  dword_254FF6570 = 0;
  byte_254FF6578 = 1;
  CoreML::Specification::V5::_ValueType_default_instance_ = (uint64_t)&off_24D91F408;
  unk_254FF6588 = 0;
  qword_254FF6598 = 0;
  byte_254FF65A0 = 1;
  qword_254FF65E0 = 0;
  unk_254FF65E8 = 0;
  qword_254FF65D0 = 0;
  unk_254FF65D8 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF65F0 = 0;
  CoreML::Specification::V5::_TensorType_AttributesEntry_default_instance_ = (uint64_t)&unk_24D9206B0;
  byte_254FF65F8 = 1;
  *((_BYTE *)CoreML::Specification::V5::TensorType::TensorType((CoreML::Specification::V5::TensorType *)&CoreML::Specification::V5::_TensorType_default_instance_)
  + 88) = 1;
  CoreML::Specification::V5::_TupleType_default_instance_ = (uint64_t)&off_24D91F538;
  result = 0.0;
  unk_254FF6668 = 0u;
  unk_254FF6678 = 0u;
  dword_254FF6688 = 0;
  byte_254FF6690 = 1;
  CoreML::Specification::V5::_ListType_default_instance_ = (uint64_t)&off_24D91F5D0;
  unk_254FF66A0 = 0;
  dword_254FF66B8 = 0;
  byte_254FF66C0 = 1;
  CoreML::Specification::V5::_DictionaryType_default_instance_ = (uint64_t)&off_24D91F668;
  unk_254FF66D0 = 0;
  dword_254FF66E8 = 0;
  byte_254FF66F0 = 1;
  qword_254FF6700 = 0;
  qword_254FF6708 = 0;
  CoreML::Specification::V5::_Dimension_ConstantDimension_default_instance_ = (uint64_t)&off_24D91F700;
  dword_254FF6710 = 0;
  byte_254FF6718 = 1;
  CoreML::Specification::V5::_Dimension_UnknownDimension_default_instance_ = (uint64_t)&off_24D91F798;
  qword_254FF6728 = 0;
  byte_254FF6730 = 0;
  dword_254FF6734 = 0;
  byte_254FF6738 = 1;
  CoreML::Specification::V5::_Dimension_default_instance_ = (uint64_t)&off_24D91F830;
  unk_254FF6748 = 0;
  qword_254FF6758 = 0;
  byte_254FF6760 = 1;
  CoreML::Specification::V5::_Value_ImmediateValue_default_instance_ = (uint64_t)&off_24D91F8C8;
  unk_254FF6780 = 0;
  qword_254FF6790 = 0;
  byte_254FF6798 = 1;
  CoreML::Specification::V5::_Value_FileValue_default_instance_ = (uint64_t)&off_24D91F960;
  *(_QWORD *)algn_254FF67C8 = 0;
  qword_254FF67D0 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FF67D8 = 0;
  dword_254FF67E0 = 0;
  byte_254FF67E8 = 1;
  CoreML::Specification::V5::_Value_BlobFileValue_default_instance_ = (uint64_t)&off_24D91F9F8;
  *(_QWORD *)algn_254FF67F8 = 0;
  qword_254FF6800 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FF6808 = 0;
  dword_254FF6810 = 0;
  byte_254FF6818 = 1;
  CoreML::Specification::V5::_Value_default_instance_ = (uint64_t)&off_24D91FA90;
  *(_QWORD *)algn_254FF6828 = 0;
  qword_254FF6848 = 0;
  CoreML::Specification::V5::_TensorValue_RepeatedFloats_default_instance_ = (uint64_t)&off_24D91FB28;
  *(_QWORD *)algn_254FF6878 = 0;
  qword_254FF6880 = 0;
  unk_254FF6888 = 0;
  dword_254FF6894 = 0;
  byte_254FF6898 = 1;
  CoreML::Specification::V5::_TensorValue_RepeatedDoubles_default_instance_ = (uint64_t)&off_24D91FBC0;
  *(_QWORD *)algn_254FF68A8 = 0;
  qword_254FF68B0 = 0;
  unk_254FF68B8 = 0;
  dword_254FF68C4 = 0;
  byte_254FF68C8 = 1;
  CoreML::Specification::V5::_TensorValue_RepeatedInts_default_instance_ = (uint64_t)&off_24D91FC58;
  *(_QWORD *)algn_254FF68D8 = 0;
  qword_254FF68E0 = 0;
  unk_254FF68E8 = 0;
  dword_254FF68F4 = 0;
  byte_254FF68F8 = 1;
  CoreML::Specification::V5::_TensorValue_RepeatedLongInts_default_instance_ = (uint64_t)&off_24D91FCF0;
  *(_QWORD *)algn_254FF6908 = 0;
  qword_254FF6910 = 0;
  unk_254FF6918 = 0;
  dword_254FF6924 = 0;
  byte_254FF6928 = 1;
  CoreML::Specification::V5::_TensorValue_RepeatedBools_default_instance_ = (uint64_t)&off_24D91FD88;
  *(_QWORD *)algn_254FF6938 = 0;
  qword_254FF6940 = 0;
  unk_254FF6948 = 0;
  dword_254FF6954 = 0;
  byte_254FF6958 = 1;
  CoreML::Specification::V5::_TensorValue_RepeatedStrings_default_instance_ = (uint64_t)&off_24D91FE20;
  dword_254FF6988 = 0;
  unk_254FF6978 = 0u;
  unk_254FF6968 = 0u;
  byte_254FF6990 = 1;
  CoreML::Specification::V5::_TensorValue_RepeatedBytes_default_instance_ = (uint64_t)&off_24D91FEB8;
  unk_254FF69A0 = 0;
  qword_254FF69A8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF69B0 = 0;
  byte_254FF69B8 = 1;
  CoreML::Specification::V5::_TensorValue_default_instance_ = (uint64_t)&off_24D91FF50;
  unk_254FF69C8 = 0;
  qword_254FF69D8 = 0;
  byte_254FF69E0 = 1;
  CoreML::Specification::V5::_TupleValue_default_instance_ = (uint64_t)&off_24D91FFE8;
  dword_254FF6A48 = 0;
  unk_254FF6A38 = 0u;
  unk_254FF6A28 = 0u;
  byte_254FF6A50 = 1;
  CoreML::Specification::V5::_ListValue_default_instance_ = (uint64_t)&off_24D920080;
  dword_254FF6A80 = 0;
  *(_OWORD *)&algn_254FF6A60[16] = 0u;
  *(_OWORD *)algn_254FF6A60 = 0u;
  byte_254FF6A88 = 1;
  CoreML::Specification::V5::_DictionaryValue_default_instance_ = (uint64_t)&off_24D9201B0;
  byte_254FF6850 = 1;
  CoreML::Specification::V5::_DictionaryValue_KeyValuePair_default_instance_ = (uint64_t)&off_24D920118;
  *(_QWORD *)algn_254FF6A98 = 0;
  dword_254FF6AB0 = 0;
  byte_254FF6AB8 = 1;
  dword_254FF6AE8 = 0;
  unk_254FF6AD8 = 0u;
  unk_254FF6AC8 = 0u;
  byte_254FF6AF0 = 1;
  qword_254FF6150 = (uint64_t)&CoreML::Specification::V5::_Program_FunctionsEntry_default_instance_;
  qword_254FF6160 = (uint64_t)&CoreML::Specification::V5::_Function_default_instance_;
  qword_254FF6188 = (uint64_t)&CoreML::Specification::V5::_Program_AttributesEntry_default_instance_;
  qword_254FF6198 = (uint64_t)&CoreML::Specification::V5::_Value_default_instance_;
  qword_254FF6230 = (uint64_t)&CoreML::Specification::V5::_Function_BlockSpecializationsEntry_default_instance_;
  qword_254FF6240 = (uint64_t)&CoreML::Specification::V5::_Block_default_instance_;
  qword_254FF6268 = (uint64_t)&CoreML::Specification::V5::_Function_AttributesEntry_default_instance_;
  qword_254FF6278 = (uint64_t)&CoreML::Specification::V5::_Value_default_instance_;
  qword_254FF6320 = (uint64_t)&CoreML::Specification::V5::_Block_AttributesEntry_default_instance_;
  qword_254FF6330 = (uint64_t)&CoreML::Specification::V5::_Value_default_instance_;
  qword_254FF6450 = (uint64_t)&CoreML::Specification::V5::_Operation_InputsEntry_default_instance_;
  qword_254FF6460 = (uint64_t)&CoreML::Specification::V5::_Argument_default_instance_;
  qword_254FF6488 = (uint64_t)&CoreML::Specification::V5::_Operation_AttributesEntry_default_instance_;
  qword_254FF6498 = (uint64_t)&CoreML::Specification::V5::_Value_default_instance_;
  qword_254FF6568 = (uint64_t)&CoreML::Specification::V5::_ValueType_default_instance_;
  qword_254FF65D0 = (uint64_t)&CoreML::Specification::V5::_TensorType_AttributesEntry_default_instance_;
  qword_254FF65E0 = (uint64_t)&CoreML::Specification::V5::_Value_default_instance_;
  qword_254FF66A8 = (uint64_t)&CoreML::Specification::V5::_ValueType_default_instance_;
  unk_254FF66B0 = &CoreML::Specification::V5::_Dimension_default_instance_;
  qword_254FF66D8 = (uint64_t)&CoreML::Specification::V5::_ValueType_default_instance_;
  unk_254FF66E0 = &CoreML::Specification::V5::_ValueType_default_instance_;
  qword_254FF6830 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FF6838 = &CoreML::Specification::V5::_ValueType_default_instance_;
  qword_254FF6AA0 = (uint64_t)&CoreML::Specification::V5::_Value_default_instance_;
  unk_254FF6AA8 = &CoreML::Specification::V5::_Value_default_instance_;
  return result;
}

void CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(CoreML::Specification::V5::protobuf_MIL_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::V5::protobuf_MIL_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_217FCFA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::V5::Program *CoreML::Specification::V5::Program::Program(CoreML::Specification::V5::Program *this)
{
  CoreML::Specification::V5::protobuf_MIL_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D91EFE0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::Init((uint64_t)this + 24);
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 16) = 0;
  v2 = (CoreML::Specification::V5::protobuf_MIL_2eproto *)_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::Init((uint64_t)this + 56);
  *((_DWORD *)this + 16) = 0;
  if (this != (CoreML::Specification::V5::Program *)&CoreML::Specification::V5::_Program_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 10) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  return this;
}

void sub_217FCFAAC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map(v3);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  const CoreML::Specification::V5::Function *v7;
  std::string *v8;
  CoreML::Specification::V5::Function *v9;
  _QWORD v10[3];

  result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v10);
  v4 = v10[0];
  if (v10[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(std::string **)(v4 + 24);
      v7 = (const CoreML::Specification::V5::Function *)&v6[1];
      v8 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::operator[](v5, v6);
      if (v7 != (const CoreML::Specification::V5::Function *)v8)
      {
        v9 = (CoreML::Specification::V5::Function *)v8;
        CoreML::Specification::V5::Function::Clear((CoreML::Specification::V5::Function *)v8);
        CoreML::Specification::V5::Function::MergeFrom(v9, v7);
      }
      result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v10);
      v4 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  const CoreML::Specification::V5::Value *v7;
  std::string *v8;
  CoreML::Specification::V5::Value *v9;
  _QWORD v10[3];

  result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v10);
  v4 = v10[0];
  if (v10[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(std::string **)(v4 + 24);
      v7 = (const CoreML::Specification::V5::Value *)&v6[1];
      v8 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::operator[](v5, v6);
      if (v7 != (const CoreML::Specification::V5::Value *)v8)
      {
        v9 = (CoreML::Specification::V5::Value *)v8;
        CoreML::Specification::V5::Value::Clear((CoreML::Specification::V5::Value *)v8);
        CoreML::Specification::V5::Value::MergeFrom(v9, v7);
      }
      result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v10);
      v4 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

void CoreML::Specification::V5::Program::~Program(CoreML::Specification::V5::Program *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D91EFE0;
  v2 = (_QWORD *)((char *)this + 56);
  CoreML::Specification::V5::Program::SharedDtor((uint64_t)this);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map(v2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::~Map((_QWORD *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::Program::~Program(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::V5::Program::SharedDtor(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 80);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x219A19A08);
  }
  return this;
}

void *CoreML::Specification::V5::Program::default_instance(CoreML::Specification::V5::Program *this)
{
  CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  return &CoreML::Specification::V5::_Program_default_instance_;
}

CoreML::Specification::V5::Program *CoreML::Specification::V5::Program::New(CoreML::Specification::V5::Program *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Program *v3;

  v3 = (CoreML::Specification::V5::Program *)operator new();
  CoreML::Specification::V5::Program::Program(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Program>(a2, v3);
  return v3;
}

void sub_217FCFD24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40FAC9F822);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Program>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Program>);
  return result;
}

void CoreML::Specification::V5::Program::Clear(CoreML::Specification::V5::Program *this)
{
  uint64_t v2;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::clear((uint64_t)this + 24);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::clear((uint64_t)this + 56);
  v2 = *((_QWORD *)this + 10);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *((_QWORD *)this + 11) = 0;
}

uint64_t CoreML::Specification::V5::Program::MergePartialFromCodedStream(CoreML::Specification::V5::Program *this, char **a2, unsigned int a3)
{
  char *v5;
  std::string **v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int TagFallback;
  char *v13;
  unint64_t Varint64Fallback;
  char *v15;
  int VarintSizeAsIntFallback;
  std::string *v17;
  std::string *v18;
  const char *size;
  char *v20;
  int v21;
  BOOL v22;
  int v23;
  char v24;
  unint64_t v25;
  int v26;
  _tc_google::protobuf::internal *p_p;
  unint64_t v28;
  _BOOL4 v29;
  unint64_t v30;
  int v31;
  _tc_google::protobuf::internal *v32;
  unint64_t v33;
  BOOL v34;
  char *v36;
  char *v37;
  char *v38;
  void *__p;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v36 = (char *)this + 48;
  v5 = (char *)this + 56;
  v6 = (std::string **)((char *)this + 80);
  v7 = (char *)this + 16;
  v8 = (char *)this + 24;
  while (1)
  {
    v9 = *a2;
    if (*a2 >= a2[1])
      break;
    v10 = *v9;
    if (*v9 < 1)
      goto LABEL_7;
    *a2 = v9 + 1;
    v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) == 0)
      goto LABEL_27;
LABEL_8:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 8)
          goto LABEL_27;
        v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v24 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v13;
          *a2 = v13 + 1;
        }
        *((_QWORD *)this + 11) = Varint64Fallback;
        break;
      case 2u:
        if (v11 != 18)
          goto LABEL_27;
        v37 = v7;
        v38 = v8;
        v40 = 0;
        v41 = 0;
        __p = 0;
        v42 = 0;
        v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_71;
        }
        else
        {
          VarintSizeAsIntFallback = *v15;
          *a2 = v15 + 1;
        }
        v25 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        v26 = v25;
        if ((v25 & 0x8000000000000000) != 0
          || !_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>>::MergePartialFromCodedStream((uint64_t)&v37, (uint64_t)a2)|| !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v26))
        {
          goto LABEL_71;
        }
        if (v41 >= 0)
          p_p = (_tc_google::protobuf::internal *)&__p;
        else
          p_p = (_tc_google::protobuf::internal *)__p;
        if (v41 >= 0)
          v28 = HIBYTE(v41);
        else
          v28 = v40;
        v29 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, (const char *)v28, 0, (uint64_t)"CoreML.Specification.V5.Program.FunctionsEntry.key");
        goto LABEL_59;
      case 3u:
        if (v11 != 26)
          goto LABEL_27;
        v17 = *v6;
        if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v17 = *v6;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v17))
          return 0;
        v18 = *v6;
        if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
        {
          v18 = (std::string *)v18->__r_.__value_.__r.__words[0];
          size = (const char *)(*v6)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v18, size, 0, (uint64_t)"CoreML.Specification.V5.Program.docString"))return 0;
        break;
      case 4u:
        if (v11 != 34)
          goto LABEL_27;
        v37 = v36;
        v38 = v5;
        v40 = 0;
        v41 = 0;
        __p = 0;
        v42 = 0;
        v20 = *a2;
        if (*a2 >= a2[1] || *v20 < 0)
        {
          v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v21 < 0)
            goto LABEL_71;
        }
        else
        {
          v21 = *v20;
          *a2 = v20 + 1;
        }
        v30 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v21);
        v31 = v30;
        if ((v30 & 0x8000000000000000) != 0
          || !_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::MergePartialFromCodedStream((uint64_t)&v37, (uint64_t)a2)|| !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v31))
        {
LABEL_71:
          v34 = 0;
          v23 = 6;
          goto LABEL_62;
        }
        if (v41 >= 0)
          v32 = (_tc_google::protobuf::internal *)&__p;
        else
          v32 = (_tc_google::protobuf::internal *)__p;
        if (v41 >= 0)
          v33 = HIBYTE(v41);
        else
          v33 = v40;
        v29 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v32, (const char *)v33, 0, (uint64_t)"CoreML.Specification.V5.Program.AttributesEntry.key");
LABEL_59:
        v34 = v29;
        if (v29)
          v23 = 0;
        else
          v23 = 6;
LABEL_62:
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        if (SHIBYTE(v41) < 0)
          operator delete(__p);
        if (!v34)
          goto LABEL_33;
        break;
      default:
        goto LABEL_27;
    }
LABEL_32:
    v23 = 0;
LABEL_33:
    if (v23)
      return 0;
  }
  v10 = 0;
LABEL_7:
  TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v10);
  v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v11 & 0x100000000) != 0)
    goto LABEL_8;
LABEL_27:
  if ((_DWORD)v11)
    v22 = (v11 & 7) == 4;
  else
    v22 = 1;
  if (!v22)
  {
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3))return 0;
    goto LABEL_32;
  }
  return 1;
}

void sub_217FD013C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::V5::Program::SerializeWithCachedSizes(CoreML::Specification::V5::Program *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  _tc_google::protobuf::io::CodedOutputStream *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  const char *v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _tc_google::protobuf::io::CodedOutputStream *v22;
  uint64_t v23;
  _tc_google::protobuf::internal *v24;
  const char *v25;
  uint64_t result;
  const char *v27;
  unint64_t v28;
  uint64_t v30;
  _tc_google::protobuf::io::CodedOutputStream *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  const char *v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _tc_google::protobuf::io::CodedOutputStream *v43;
  uint64_t v44;
  _tc_google::protobuf::internal *v45;
  const char *v46;
  _QWORD v47[3];

  v6 = *((_QWORD *)this + 11);
  if (v6)
    _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  v7 = **((_QWORD **)this + 5);
  if (v7)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v7 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_26:
        v15 = operator new[]();
        _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v47);
        v16 = v47[0];
        if (v47[0])
        {
          v17 = 0;
          do
          {
            *(_QWORD *)(v15 + 8 * v17) = *(_QWORD *)(v16 + 24);
            _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v47);
            ++v17;
            v16 = v47[0];
          }
          while (v47[0]);
        }
        else
        {
          v17 = 0;
        }
        v18 = 126 - 2 * __clz(v17);
        if (v17)
          v19 = v18;
        else
          v19 = 0;
        std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,false>(v15, (const void ***)(v15 + 8 * v17), (uint64_t)v47, v19, 1);
        if (v17)
        {
          v20 = 0;
          v21 = (uint64_t *)v15;
          do
          {
            v23 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*v21, *v21 + 24, *((_tc_google::protobuf::Arena **)this + 2));
            if (v20 != v23)
            {
              if (v20)
                (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
              v20 = v23;
            }
            _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v20, a2, v22);
            v24 = (_tc_google::protobuf::internal *)*v21;
            if (*(char *)(*v21 + 23) < 0)
            {
              v24 = *(_tc_google::protobuf::internal **)v24;
              v25 = *(const char **)(*v21 + 8);
            }
            else
            {
              v25 = (const char *)*(unsigned __int8 *)(*v21 + 23);
            }
            _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (uint64_t)"CoreML.Specification.V5.Program.FunctionsEntry.key");
            ++v21;
            --v17;
          }
          while (v17);
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        MEMORY[0x219A199F0](v15, 0x60C8044C4A2DFLL);
        goto LABEL_46;
      }
    }
    else if (v7 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_26;
    }
    _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v47);
    v9 = 0;
    while (v47[0])
    {
      v11 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v47[0] + 24), *(_QWORD *)(v47[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 2));
      if (v9 != v11)
      {
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v9 = v11;
      }
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v9, a2, v10);
      v12 = *(unsigned __int8 **)(v47[0] + 24);
      if ((char)v12[23] < 0)
      {
        v12 = *(unsigned __int8 **)v12;
        v13 = *(const char **)(*(_QWORD *)(v47[0] + 24) + 8);
      }
      else
      {
        v13 = (const char *)v12[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v12, v13, 1, (uint64_t)"CoreML.Specification.V5.Program.FunctionsEntry.key");
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v47);
    }
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
LABEL_46:
  result = *((_QWORD *)this + 10);
  if (*(char *)(result + 23) < 0)
  {
    v27 = *(const char **)(result + 8);
    if (!v27)
      goto LABEL_52;
    result = *(_QWORD *)result;
    goto LABEL_51;
  }
  v27 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_51:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v27, 1, (uint64_t)"CoreML.Specification.V5.Program.docString");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3, *((_QWORD *)this + 10), a2);
  }
LABEL_52:
  v28 = **((_QWORD **)this + 9);
  if (!v28)
    return result;
  if (*((_BYTE *)a2 + 26))
  {
    if (v28 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_75:
      v36 = operator new[]();
      _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 56, v47);
      v37 = v47[0];
      if (v47[0])
      {
        v38 = 0;
        do
        {
          *(_QWORD *)(v36 + 8 * v38) = *(_QWORD *)(v37 + 24);
          _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v47);
          ++v38;
          v37 = v47[0];
        }
        while (v47[0]);
      }
      else
      {
        v38 = 0;
      }
      v39 = 126 - 2 * __clz(v38);
      if (v38)
        v40 = v39;
      else
        v40 = 0;
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const**,false>(v36, (const void ***)(v36 + 8 * v38), (uint64_t)v47, v40, 1);
      if (v38)
      {
        v41 = 0;
        v42 = (uint64_t *)v36;
        do
        {
          v44 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*v42, *v42 + 24, *((_tc_google::protobuf::Arena **)this + 6));
          if (v41 != v44)
          {
            if (v41)
              (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
            v41 = v44;
          }
          _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v41, a2, v43);
          v45 = (_tc_google::protobuf::internal *)*v42;
          if (*(char *)(*v42 + 23) < 0)
          {
            v45 = *(_tc_google::protobuf::internal **)v45;
            v46 = *(const char **)(*v42 + 8);
          }
          else
          {
            v46 = (const char *)*(unsigned __int8 *)(*v42 + 23);
          }
          _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v45, v46, 1, (uint64_t)"CoreML.Specification.V5.Program.AttributesEntry.key");
          ++v42;
          --v38;
        }
        while (v38);
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      }
      return MEMORY[0x219A199F0](v36, 0x60C8044C4A2DFLL);
    }
  }
  else if (v28 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_75;
  }
  result = _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 56, v47);
  v30 = 0;
  while (v47[0])
  {
    v32 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v47[0] + 24), *(_QWORD *)(v47[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 6));
    if (v30 != v32)
    {
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      v30 = v32;
    }
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v30, a2, v31);
    v33 = *(unsigned __int8 **)(v47[0] + 24);
    if ((char)v33[23] < 0)
    {
      v33 = *(unsigned __int8 **)v33;
      v34 = *(const char **)(*(_QWORD *)(v47[0] + 24) + 8);
    }
    else
    {
      v34 = (const char *)v33[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v33, v34, 1, (uint64_t)"CoreML.Specification.V5.Program.AttributesEntry.key");
    result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v47);
  }
  if (v30)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  return result;
}

void sub_217FD0660(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Program::ByteSizeLong(_tc_google::protobuf::Arena **this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _tc_google::protobuf::Arena *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[3];

  v2 = *(unsigned int *)this[5];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 3), v16);
  v3 = 0;
  while (v16[0])
  {
    v4 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v16[0] + 24), *(_QWORD *)(v16[0] + 24) + 24, this[2]);
    if (v3 != (_DWORD *)v4)
    {
      if (v3)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v3 = (_DWORD *)v4;
    }
    v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v3);
    v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v16);
  }
  if (v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v6 = *(unsigned int *)this[9];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 7), v16);
  v7 = 0;
  v8 = v6 + v2;
  while (v16[0])
  {
    v9 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v16[0] + 24), *(_QWORD *)(v16[0] + 24) + 24, this[6]);
    if (v7 != (_DWORD *)v9)
    {
      if (v7)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      v7 = (_DWORD *)v9;
    }
    v10 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v7);
    v8 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v16);
  }
  if (v7)
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  v11 = this[10];
  v12 = *((unsigned __int8 *)v11 + 23);
  if (*((char *)v11 + 23) < 0)
  {
    if (!*((_QWORD *)v11 + 1))
      goto LABEL_24;
  }
  else if (!*((_BYTE *)v11 + 23))
  {
    goto LABEL_24;
  }
  v13 = *((_QWORD *)v11 + 1);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v8 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_24:
  v14 = (unint64_t)this[11];
  if (v14)
    v8 += ((9 * (__clz(v14 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 24) = v8;
  return v8;
}

void sub_217FD08C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::V5::Program::MergeFrom(CoreML::Specification::V5::Program *this, const CoreML::Specification::V5::Program *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 48, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 10);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 10);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, v5);
    else
      std::string::operator=(*((std::string **)this + 10), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 11);
  if (v7)
    *((_QWORD *)this + 11) = v7;
}

uint64_t CoreML::Specification::V5::Program::IsInitialized(CoreML::Specification::V5::Program *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Program::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Program");
}

CoreML::Specification::V5::Function *CoreML::Specification::V5::Function::Function(CoreML::Specification::V5::Function *this)
{
  CoreML::Specification::V5::protobuf_MIL_2eproto *v2;

  *(_QWORD *)this = &off_24D91F078;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::Init((uint64_t)this + 48);
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 22) = 0;
  v2 = (CoreML::Specification::V5::protobuf_MIL_2eproto *)_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::Init((uint64_t)this + 80);
  *((_DWORD *)this + 22) = 0;
  if (this != (CoreML::Specification::V5::Function *)&CoreML::Specification::V5::_Function_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 13) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 28) = 0;
  return this;
}

void sub_217FD0A48(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = v4;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map(v5);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::~Map(v3);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)(v2 + 16));
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  const CoreML::Specification::V5::Block *v7;
  std::string *v8;
  CoreML::Specification::V5::Block *v9;
  _QWORD v10[3];

  result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v10);
  v4 = v10[0];
  if (v10[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(std::string **)(v4 + 24);
      v7 = (const CoreML::Specification::V5::Block *)&v6[1];
      v8 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::operator[](v5, v6);
      if (v7 != (const CoreML::Specification::V5::Block *)v8)
      {
        v9 = (CoreML::Specification::V5::Block *)v8;
        CoreML::Specification::V5::Block::Clear((CoreML::Specification::V5::Block *)v8);
        CoreML::Specification::V5::Block::MergeFrom(v9, v7);
      }
      result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v10);
      v4 = v10[0];
    }
    while (v10[0]);
  }
  return result;
}

void CoreML::Specification::V5::Function::~Function(CoreML::Specification::V5::Function *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D91F078;
  v2 = (_QWORD *)((char *)this + 80);
  CoreML::Specification::V5::Function::SharedDtor((uint64_t)this);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map(v2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::~Map((_QWORD *)this + 6);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::Function::~Function(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::V5::Function::SharedDtor(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 104);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x219A19A08);
  }
  return this;
}

CoreML::Specification::V5::Function *CoreML::Specification::V5::Function::New(CoreML::Specification::V5::Function *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Function *v3;

  v3 = (CoreML::Specification::V5::Function *)operator new();
  CoreML::Specification::V5::Function::Function(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Function>(a2, v3);
  return v3;
}

void sub_217FD0C3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Function>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Function>);
  return result;
}

void CoreML::Specification::V5::Function::Clear(CoreML::Specification::V5::Function *this)
{
  uint64_t v2;
  CoreML::Specification::V5::NamedValueType **v3;
  CoreML::Specification::V5::NamedValueType *v4;
  uint64_t v5;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::V5::NamedValueType **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::V5::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::clear((uint64_t)this + 48);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::clear((uint64_t)this + 80);
  v5 = *((_QWORD *)this + 13);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::V5::Function::MergePartialFromCodedStream(CoreML::Specification::V5::Function *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  char *v6;
  std::string **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int TagFallback;
  CoreML::Specification::V5::NamedValueType *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  std::string *v16;
  std::string *v17;
  const char *size;
  char *v19;
  int v20;
  char *v21;
  int v22;
  int v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  int v29;
  _tc_google::protobuf::internal *p_p;
  unint64_t v31;
  _BOOL4 v32;
  unint64_t v33;
  int v34;
  _tc_google::protobuf::internal *v35;
  unint64_t v36;
  BOOL v37;
  char *v39;
  char *v40;
  char *v41;
  void *__p;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v39 = (char *)this + 72;
  v4 = (char *)this + 80;
  v5 = (char *)this + 40;
  v6 = (char *)this + 48;
  v7 = (std::string **)((char *)this + 104);
  v8 = (char *)this + 16;
  while (1)
  {
    v9 = *a2;
    if (*a2 >= a2[1])
    {
      v10 = 0;
    }
    else
    {
      v10 = *v9;
      if (*v9 >= 1)
      {
        *a2 = v9 + 1;
        v11 = v10 | 0x100000000;
        if ((v11 & 0x100000000) != 0)
          goto LABEL_8;
        goto LABEL_27;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v10);
    v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v11 & 0x100000000) != 0)
    {
LABEL_8:
      switch(v11 >> 3)
      {
        case 1u:
          if (v11 != 10)
            break;
          v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::NamedValueType>::TypeHandler>((uint64_t)v8);
          v14 = *a2;
          if (*a2 >= a2[1] || *v14 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v14;
            *a2 = v14 + 1;
          }
          v25 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v25 & 0x8000000000000000) == 0)
          {
            v27 = v25;
            if (CoreML::Specification::V5::NamedValueType::MergePartialFromCodedStream(v13, a2, v26))
            {
              if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v27))
              {
                goto LABEL_32;
              }
            }
          }
          return 0;
        case 2u:
          if (v11 != 18)
            break;
          v16 = *v7;
          if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v16 = *v7;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v16))
            return 0;
          v17 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            v17 = (std::string *)v17->__r_.__value_.__r.__words[0];
            size = (const char *)(*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v17, size, 0, (uint64_t)"CoreML.Specification.V5.Function.opset"))return 0;
          goto LABEL_32;
        case 3u:
          if (v11 != 26)
            break;
          v40 = v5;
          v41 = v6;
          v43 = 0;
          v44 = 0;
          __p = 0;
          v45 = 0;
          v19 = *a2;
          if (*a2 >= a2[1] || *v19 < 0)
          {
            v20 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v20 < 0)
              goto LABEL_74;
          }
          else
          {
            v20 = *v19;
            *a2 = v19 + 1;
          }
          v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v20);
          v29 = v28;
          if ((v28 & 0x8000000000000000) != 0
            || !_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>>::MergePartialFromCodedStream((uint64_t)&v40, (uint64_t)a2)|| !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v29))
          {
            goto LABEL_74;
          }
          if (v44 >= 0)
            p_p = (_tc_google::protobuf::internal *)&__p;
          else
            p_p = (_tc_google::protobuf::internal *)__p;
          if (v44 >= 0)
            v31 = HIBYTE(v44);
          else
            v31 = v43;
          v32 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, (const char *)v31, 0, (uint64_t)"CoreML.Specification.V5.Function.BlockSpecializationsEntry.key");
          goto LABEL_62;
        case 4u:
          if (v11 != 34)
            break;
          v40 = v39;
          v41 = v4;
          v43 = 0;
          v44 = 0;
          __p = 0;
          v45 = 0;
          v21 = *a2;
          if (*a2 >= a2[1] || *v21 < 0)
          {
            v22 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v22 < 0)
              goto LABEL_74;
          }
          else
          {
            v22 = *v21;
            *a2 = v21 + 1;
          }
          v33 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22);
          v34 = v33;
          if ((v33 & 0x8000000000000000) != 0
            || !_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::MergePartialFromCodedStream((uint64_t)&v40, (uint64_t)a2)|| !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v34))
          {
LABEL_74:
            v37 = 0;
            v24 = 6;
            goto LABEL_65;
          }
          if (v44 >= 0)
            v35 = (_tc_google::protobuf::internal *)&__p;
          else
            v35 = (_tc_google::protobuf::internal *)__p;
          if (v44 >= 0)
            v36 = HIBYTE(v44);
          else
            v36 = v43;
          v32 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v35, (const char *)v36, 0, (uint64_t)"CoreML.Specification.V5.Function.AttributesEntry.key");
LABEL_62:
          v37 = v32;
          if (v32)
            v24 = 0;
          else
            v24 = 6;
LABEL_65:
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          if (SHIBYTE(v44) < 0)
            operator delete(__p);
          if (!v37)
            goto LABEL_33;
          goto LABEL_32;
        default:
          break;
      }
    }
LABEL_27:
    if (!(_DWORD)v11 || (v11 & 7) == 4)
      return 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3))return 0;
LABEL_32:
    v24 = 0;
LABEL_33:
    if (v24)
      return 0;
  }
}

void sub_217FD10C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::V5::Function::SerializeWithCachedSizes(CoreML::Specification::V5::Function *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v6;
  int i;
  uint64_t result;
  const char *v9;
  unint64_t v10;
  uint64_t v12;
  _tc_google::protobuf::io::CodedOutputStream *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  const char *v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _tc_google::protobuf::io::CodedOutputStream *v25;
  uint64_t v26;
  _tc_google::protobuf::internal *v27;
  const char *v28;
  unint64_t v29;
  uint64_t v31;
  _tc_google::protobuf::io::CodedOutputStream *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  const char *v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _tc_google::protobuf::io::CodedOutputStream *v44;
  uint64_t v45;
  _tc_google::protobuf::internal *v46;
  const char *v47;
  _QWORD v48[3];

  v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i + 8), a2, a4);
  }
  result = *((_QWORD *)this + 13);
  if (*(char *)(result + 23) < 0)
  {
    v9 = *(const char **)(result + 8);
    if (!v9)
      goto LABEL_10;
    result = *(_QWORD *)result;
    goto LABEL_9;
  }
  v9 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_9:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v9, 1, (uint64_t)"CoreML.Specification.V5.Function.opset");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, *((_QWORD *)this + 13), a2);
  }
LABEL_10:
  v10 = **((_QWORD **)this + 8);
  if (!v10)
    goto LABEL_53;
  if (*((_BYTE *)a2 + 26))
  {
    if (v10 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_33:
      v18 = operator new[]();
      _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 48, v48);
      v19 = v48[0];
      if (v48[0])
      {
        v20 = 0;
        do
        {
          *(_QWORD *)(v18 + 8 * v20) = *(_QWORD *)(v19 + 24);
          _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v48);
          ++v20;
          v19 = v48[0];
        }
        while (v48[0]);
      }
      else
      {
        v20 = 0;
      }
      v21 = 126 - 2 * __clz(v20);
      if (v20)
        v22 = v21;
      else
        v22 = 0;
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const**,false>(v18, (const void ***)(v18 + 8 * v20), (uint64_t)v48, v22, 1);
      if (v20)
      {
        v23 = 0;
        v24 = (uint64_t *)v18;
        do
        {
          v26 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*v24, *v24 + 24, *((_tc_google::protobuf::Arena **)this + 5));
          if (v23 != v26)
          {
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v23 = v26;
          }
          _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v23, a2, v25);
          v27 = (_tc_google::protobuf::internal *)*v24;
          if (*(char *)(*v24 + 23) < 0)
          {
            v27 = *(_tc_google::protobuf::internal **)v27;
            v28 = *(const char **)(*v24 + 8);
          }
          else
          {
            v28 = (const char *)*(unsigned __int8 *)(*v24 + 23);
          }
          _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 1, (uint64_t)"CoreML.Specification.V5.Function.BlockSpecializationsEntry.key");
          ++v24;
          --v20;
        }
        while (v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      result = MEMORY[0x219A199F0](v18, 0x60C8044C4A2DFLL);
      goto LABEL_53;
    }
  }
  else if (v10 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_33;
  }
  result = _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 48, v48);
  v12 = 0;
  while (v48[0])
  {
    v14 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v48[0] + 24), *(_QWORD *)(v48[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 5));
    if (v12 != v14)
    {
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v12 = v14;
    }
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v12, a2, v13);
    v15 = *(unsigned __int8 **)(v48[0] + 24);
    if ((char)v15[23] < 0)
    {
      v15 = *(unsigned __int8 **)v15;
      v16 = *(const char **)(*(_QWORD *)(v48[0] + 24) + 8);
    }
    else
    {
      v16 = (const char *)v15[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v15, v16, 1, (uint64_t)"CoreML.Specification.V5.Function.BlockSpecializationsEntry.key");
    result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v48);
  }
  if (v12)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
LABEL_53:
  v29 = **((_QWORD **)this + 12);
  if (!v29)
    return result;
  if (*((_BYTE *)a2 + 26))
  {
    if (v29 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_76:
      v37 = operator new[]();
      _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 80, v48);
      v38 = v48[0];
      if (v48[0])
      {
        v39 = 0;
        do
        {
          *(_QWORD *)(v37 + 8 * v39) = *(_QWORD *)(v38 + 24);
          _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v48);
          ++v39;
          v38 = v48[0];
        }
        while (v48[0]);
      }
      else
      {
        v39 = 0;
      }
      v40 = 126 - 2 * __clz(v39);
      if (v39)
        v41 = v40;
      else
        v41 = 0;
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const**,false>(v37, (const void ***)(v37 + 8 * v39), (uint64_t)v48, v41, 1);
      if (v39)
      {
        v42 = 0;
        v43 = (uint64_t *)v37;
        do
        {
          v45 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*v43, *v43 + 24, *((_tc_google::protobuf::Arena **)this + 9));
          if (v42 != v45)
          {
            if (v42)
              (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
            v42 = v45;
          }
          _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v42, a2, v44);
          v46 = (_tc_google::protobuf::internal *)*v43;
          if (*(char *)(*v43 + 23) < 0)
          {
            v46 = *(_tc_google::protobuf::internal **)v46;
            v47 = *(const char **)(*v43 + 8);
          }
          else
          {
            v47 = (const char *)*(unsigned __int8 *)(*v43 + 23);
          }
          _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v46, v47, 1, (uint64_t)"CoreML.Specification.V5.Function.AttributesEntry.key");
          ++v43;
          --v39;
        }
        while (v39);
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
      return MEMORY[0x219A199F0](v37, 0x60C8044C4A2DFLL);
    }
  }
  else if (v29 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_76;
  }
  result = _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 80, v48);
  v31 = 0;
  while (v48[0])
  {
    v33 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v48[0] + 24), *(_QWORD *)(v48[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 9));
    if (v31 != v33)
    {
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v31 = v33;
    }
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v31, a2, v32);
    v34 = *(unsigned __int8 **)(v48[0] + 24);
    if ((char)v34[23] < 0)
    {
      v34 = *(unsigned __int8 **)v34;
      v35 = *(const char **)(*(_QWORD *)(v48[0] + 24) + 8);
    }
    else
    {
      v35 = (const char *)v34[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v34, v35, 1, (uint64_t)"CoreML.Specification.V5.Function.AttributesEntry.key");
    result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v48);
  }
  if (v31)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  return result;
}

void sub_217FD1600(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Function::ByteSizeLong(CoreML::Specification::V5::Function *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::V5::NamedValueType::ByteSizeLong(*(CoreML::Specification::V5::NamedValueType **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = **((unsigned int **)this + 8);
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 48, v20);
  v7 = 0;
  v8 = v6 + v4;
  while (v20[0])
  {
    v9 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v20[0] + 24), *(_QWORD *)(v20[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 5));
    if (v7 != (_DWORD *)v9)
    {
      if (v7)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      v7 = (_DWORD *)v9;
    }
    v10 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v7);
    v8 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v20);
  }
  if (v7)
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  v11 = **((unsigned int **)this + 12);
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 80, v20);
  v12 = 0;
  v13 = v11 + v8;
  while (v20[0])
  {
    v14 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v20[0] + 24), *(_QWORD *)(v20[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 9));
    if (v12 != (_DWORD *)v14)
    {
      if (v12)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      v12 = (_DWORD *)v14;
    }
    v15 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v12);
    v13 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v20);
  }
  if (v12)
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  v16 = *((_QWORD *)this + 13);
  v17 = *(unsigned __int8 *)(v16 + 23);
  if (*(char *)(v16 + 23) < 0)
  {
    if (!*(_QWORD *)(v16 + 8))
      goto LABEL_29;
  }
  else if (!*(_BYTE *)(v16 + 23))
  {
    goto LABEL_29;
  }
  v18 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v18 = v17;
  v13 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_29:
  *((_DWORD *)this + 28) = v13;
  return v13;
}

void sub_217FD1898(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::V5::Function::MergeFrom(CoreML::Specification::V5::Function *this, const CoreML::Specification::V5::Function *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::V5::NamedValueType **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  uint64_t v10;
  std::string *v11;
  std::string **v12;
  std::string *v13;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::V5::NamedValueType **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::V5::Function *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::NamedValueType>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::V5::NamedValueType **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 40, (uint64_t)a2 + 40);
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 72, (uint64_t)a2 + 72);
  v10 = *((_QWORD *)a2 + 13);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      return;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    return;
  }
  v13 = (std::string *)*((_QWORD *)this + 13);
  v12 = (std::string **)((char *)this + 104);
  v11 = v13;
  if (v13 != (std::string *)v10)
  {
    if (v11 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, v10);
    else
      std::string::operator=(v11, (const std::string *)v10);
  }
}

uint64_t CoreML::Specification::V5::Function::IsInitialized(CoreML::Specification::V5::Function *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Function::InternalSwap(CoreML::Specification::V5::Function *this, CoreML::Specification::V5::Function *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::swap((_QWORD *)this + 6, (uint64_t)a2 + 48);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::swap((_QWORD *)this + 10, (uint64_t)a2 + 80);
  v6 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  return result;
}

_QWORD *CoreML::Specification::V5::Function::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Function");
}

CoreML::Specification::V5::Block *CoreML::Specification::V5::Block::Block(CoreML::Specification::V5::Block *this)
{
  CoreML::Specification::V5::protobuf_MIL_2eproto *v2;

  *(_QWORD *)this = &off_24D91F110;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  v2 = (CoreML::Specification::V5::protobuf_MIL_2eproto *)_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::Init((uint64_t)this + 96);
  *((_DWORD *)this + 26) = 0;
  if (this != (CoreML::Specification::V5::Block *)&CoreML::Specification::V5::_Block_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_DWORD *)this + 30) = 0;
  return this;
}

void sub_217FD1B0C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = v4;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map(v5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)(v2 + 64));
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v3);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)(v2 + 16));
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::Block::~Block(CoreML::Specification::V5::Block *this)
{
  *(_QWORD *)this = &off_24D91F110;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map((_QWORD *)this + 12);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 8);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::Block::~Block(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::Block *CoreML::Specification::V5::Block::New(CoreML::Specification::V5::Block *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Block *v3;

  v3 = (CoreML::Specification::V5::Block *)operator new();
  CoreML::Specification::V5::Block::Block(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Block>(a2, v3);
  return v3;
}

void sub_217FD1C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Block>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Block>);
  return result;
}

double CoreML::Specification::V5::Block::Clear(CoreML::Specification::V5::Block *this)
{
  uint64_t v2;
  CoreML::Specification::V5::NamedValueType **v3;
  CoreML::Specification::V5::NamedValueType *v4;
  uint64_t v5;
  CoreML::Specification::V5::Operation **v6;
  CoreML::Specification::V5::Operation *v7;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::V5::NamedValueType **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::V5::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
  v5 = *((unsigned int *)this + 18);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::V5::Operation **)(*((_QWORD *)this + 10) + 8);
    do
    {
      v7 = *v6++;
      CoreML::Specification::V5::Operation::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 18) = 0;
  }
  return _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::clear((uint64_t)this + 96);
}

uint64_t CoreML::Specification::V5::Block::MergePartialFromCodedStream(CoreML::Specification::V5::Block *this, char **a2, unsigned int a3)
{
  char *v5;
  char *v6;
  unsigned int *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int TagFallback;
  CoreML::Specification::V5::NamedValueType *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  int *v16;
  uint64_t v17;
  int v18;
  std::string *Aligned;
  CoreML::Specification::V5::Operation *v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  BOOL v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  _tc_google::protobuf::internal *p_p;
  unint64_t v35;
  _BOOL4 v36;
  BOOL v37;
  _tc_google::protobuf::Arena *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  const char *v43;
  uint64_t result;
  char *v45;
  _QWORD v46[2];
  void *__p;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v45 = (char *)this + 88;
  v5 = (char *)this + 96;
  v6 = (char *)this + 64;
  v7 = (unsigned int *)((char *)this + 40);
  v8 = (char *)this + 16;
  while (1)
  {
    v9 = *a2;
    if (*a2 >= a2[1])
      break;
    v10 = *v9;
    if (*v9 < 1)
      goto LABEL_7;
    *a2 = v9 + 1;
    v11 = v10 | 0x100000000;
    if ((v11 & 0x100000000) != 0)
      goto LABEL_8;
LABEL_25:
    if ((_DWORD)v11)
      v25 = (v11 & 7) == 4;
    else
      v25 = 1;
    if (v25)
      return 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3))goto LABEL_75;
LABEL_30:
    v26 = 0;
LABEL_31:
    if (v26)
      goto LABEL_75;
  }
  v10 = 0;
LABEL_7:
  TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v10);
  v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v11 & 0x100000000) == 0)
    goto LABEL_25;
LABEL_8:
  switch(v11 >> 3)
  {
    case 1u:
      if (v11 != 10)
        goto LABEL_25;
      v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::NamedValueType>::TypeHandler>((uint64_t)v8);
      v14 = *a2;
      if (*a2 >= a2[1] || *v14 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          goto LABEL_75;
      }
      else
      {
        VarintSizeAsIntFallback = *v14;
        *a2 = v14 + 1;
      }
      v27 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v27 & 0x8000000000000000) != 0)
        goto LABEL_75;
      v29 = v27;
      if (!CoreML::Specification::V5::NamedValueType::MergePartialFromCodedStream(v13, a2, v28))
        goto LABEL_75;
      goto LABEL_40;
    case 2u:
      if (v11 != 18)
        goto LABEL_25;
      v16 = (int *)*((_QWORD *)this + 7);
      if (!v16)
      {
        v18 = *((_DWORD *)this + 13);
LABEL_63:
        _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v18 + 1);
        v16 = (int *)*((_QWORD *)this + 7);
        v18 = *v16;
        goto LABEL_64;
      }
      v17 = *((int *)this + 12);
      v18 = *v16;
      if ((int)v17 < *v16)
      {
        *((_DWORD *)this + 12) = v17 + 1;
        Aligned = *(std::string **)&v16[2 * v17 + 2];
        goto LABEL_68;
      }
      if (v18 == *((_DWORD *)this + 13))
        goto LABEL_63;
LABEL_64:
      *v16 = v18 + 1;
      v38 = *(_tc_google::protobuf::Arena **)v7;
      if (*(_QWORD *)v7)
      {
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
        _tc_google::protobuf::Arena::AddListNode(v38, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        Aligned = (std::string *)operator new();
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
      }
      v39 = *((_QWORD *)this + 7);
      v40 = *((int *)this + 12);
      *((_DWORD *)this + 12) = v40 + 1;
      *(_QWORD *)(v39 + 8 * v40 + 8) = Aligned;
LABEL_68:
      if (_tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, Aligned))
      {
        v41 = *((_QWORD *)this + 7);
        v42 = *(unsigned __int8 **)(v41 + 8 * *((int *)this + 12));
        if ((char)v42[23] < 0)
        {
          v42 = *(unsigned __int8 **)v42;
          v43 = *(const char **)(*(_QWORD *)(v41 + 8 * *((int *)this + 12)) + 8);
        }
        else
        {
          v43 = (const char *)v42[23];
        }
        if (_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v42, v43, 0, (uint64_t)"CoreML.Specification.V5.Block.outputs"))
        {
          goto LABEL_30;
        }
      }
LABEL_75:
      result = 0;
      break;
    case 3u:
      if (v11 != 26)
        goto LABEL_25;
      v20 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Operation>::TypeHandler>((uint64_t)v6);
      v21 = *a2;
      if (*a2 >= a2[1] || *v21 < 0)
      {
        v22 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v22 < 0)
          goto LABEL_75;
      }
      else
      {
        v22 = *v21;
        *a2 = v21 + 1;
      }
      v30 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22);
      if ((v30 & 0x8000000000000000) != 0)
        goto LABEL_75;
      v29 = v30;
      if (!CoreML::Specification::V5::Operation::MergePartialFromCodedStream(v20, a2, v31))
        goto LABEL_75;
LABEL_40:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v29))goto LABEL_75;
      goto LABEL_30;
    case 4u:
      if (v11 != 34)
        goto LABEL_25;
      v46[0] = v45;
      v46[1] = v5;
      v48 = 0;
      v49 = 0;
      __p = 0;
      v50 = 0;
      v23 = *a2;
      if (*a2 >= a2[1] || *v23 < 0)
      {
        v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v24 < 0)
          goto LABEL_74;
      }
      else
      {
        v24 = *v23;
        *a2 = v23 + 1;
      }
      v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v24);
      v33 = v32;
      if ((v32 & 0x8000000000000000) != 0
        || !_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::MergePartialFromCodedStream((uint64_t)v46, (uint64_t)a2)|| !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v33))
      {
LABEL_74:
        v37 = 0;
        v26 = 6;
        goto LABEL_55;
      }
      if (v49 >= 0)
        p_p = (_tc_google::protobuf::internal *)&__p;
      else
        p_p = (_tc_google::protobuf::internal *)__p;
      if (v49 >= 0)
        v35 = HIBYTE(v49);
      else
        v35 = v48;
      v36 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, (const char *)v35, 0, (uint64_t)"CoreML.Specification.V5.Block.AttributesEntry.key");
      v37 = v36;
      if (v36)
        v26 = 0;
      else
        v26 = 6;
LABEL_55:
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      if (SHIBYTE(v49) < 0)
        operator delete(__p);
      if (!v37)
        goto LABEL_31;
      goto LABEL_30;
    default:
      goto LABEL_25;
  }
  return result;
}

void sub_217FD2120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::V5::Block::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  const char *v12;
  int v13;
  int j;
  unint64_t v15;
  uint64_t v17;
  _tc_google::protobuf::io::CodedOutputStream *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  const char *v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _tc_google::protobuf::io::CodedOutputStream *v30;
  uint64_t v31;
  _tc_google::protobuf::internal *v32;
  const char *v33;
  _QWORD v34[3];

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v8 = *(unsigned int *)(v5 + 48);
  if ((int)v8 >= 1)
  {
    v9 = -v8;
    v10 = 1;
    do
    {
      v11 = *(unsigned __int8 **)(*(_QWORD *)(v5 + 56) + 8 * v10);
      if ((char)v11[23] < 0)
      {
        v11 = *(unsigned __int8 **)v11;
        v12 = *(const char **)(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10) + 8);
      }
      else
      {
        v12 = (const char *)v11[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v11, v12, 1, (uint64_t)"CoreML.Specification.V5.Block.outputs");
      this = _tc_google::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10++), a2);
    }
    while (v9 + v10 != 1);
  }
  v13 = *(_DWORD *)(v5 + 72);
  if (v13)
  {
    for (j = 0; j != v13; ++j)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * j + 8), a2, a4);
  }
  v15 = **(_QWORD **)(v5 + 112);
  if (v15)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v15 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_36:
        v23 = operator new[]();
        _tc_google::protobuf::Map<std::string,std::string>::begin(v5 + 96, v34);
        v24 = v34[0];
        if (v34[0])
        {
          v25 = 0;
          do
          {
            *(_QWORD *)(v23 + 8 * v25) = *(_QWORD *)(v24 + 24);
            _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v34);
            ++v25;
            v24 = v34[0];
          }
          while (v34[0]);
        }
        else
        {
          v25 = 0;
        }
        v26 = 126 - 2 * __clz(v25);
        if (v25)
          v27 = v26;
        else
          v27 = 0;
        std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const**,false>(v23, (const void ***)(v23 + 8 * v25), (uint64_t)v34, v27, 1);
        if (v25)
        {
          v28 = 0;
          v29 = (uint64_t *)v23;
          do
          {
            v31 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*v29, *v29 + 24, *(_tc_google::protobuf::Arena **)(v5 + 88));
            if (v28 != v31)
            {
              if (v28)
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
              v28 = v31;
            }
            _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v28, a2, v30);
            v32 = (_tc_google::protobuf::internal *)*v29;
            if (*(char *)(*v29 + 23) < 0)
            {
              v32 = *(_tc_google::protobuf::internal **)v32;
              v33 = *(const char **)(*v29 + 8);
            }
            else
            {
              v33 = (const char *)*(unsigned __int8 *)(*v29 + 23);
            }
            _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v32, v33, 1, (uint64_t)"CoreML.Specification.V5.Block.AttributesEntry.key");
            ++v29;
            --v25;
          }
          while (v25);
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        return MEMORY[0x219A199F0](v23, 0x60C8044C4A2DFLL);
      }
    }
    else if (v15 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_36;
    }
    this = _tc_google::protobuf::Map<std::string,std::string>::begin(v5 + 96, v34);
    v17 = 0;
    while (v34[0])
    {
      v19 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v34[0] + 24), *(_QWORD *)(v34[0] + 24) + 24, *(_tc_google::protobuf::Arena **)(v5 + 88));
      if (v17 != v19)
      {
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v17 = v19;
      }
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v17, a2, v18);
      v20 = *(unsigned __int8 **)(v34[0] + 24);
      if ((char)v20[23] < 0)
      {
        v20 = *(unsigned __int8 **)v20;
        v21 = *(const char **)(*(_QWORD *)(v34[0] + 24) + 8);
      }
      else
      {
        v21 = (const char *)v20[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v20, v21, 1, (uint64_t)"CoreML.Specification.V5.Block.AttributesEntry.key");
      this = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v34);
    }
    if (v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return this;
}

void sub_217FD2484(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Block::ByteSizeLong(CoreML::Specification::V5::Block *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::V5::NamedValueType::ByteSizeLong(*(CoreML::Specification::V5::NamedValueType **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  v7 = v4 + v6;
  if ((int)v6 >= 1)
  {
    v8 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v9 = *v8++;
      v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = *(_QWORD *)(v9 + 8);
      if ((v10 & 0x80u) == 0)
        v11 = v10;
      v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      --v6;
    }
    while (v6);
  }
  v12 = *((unsigned int *)this + 18);
  v13 = v7 + v12;
  if ((_DWORD)v12)
  {
    v14 = 0;
    do
    {
      v15 = CoreML::Specification::V5::Operation::ByteSizeLong(*(_tc_google::protobuf::Arena ***)(*((_QWORD *)this + 10)
                                                                                                + 8 * v14
                                                                                                + 8));
      v13 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6);
      ++v14;
    }
    while ((_DWORD)v12 != v14);
  }
  v16 = **((unsigned int **)this + 14);
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 96, v22);
  v17 = 0;
  v18 = v16 + v13;
  while (v22[0])
  {
    v19 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v22[0] + 24), *(_QWORD *)(v22[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 11));
    if (v17 != (_DWORD *)v19)
    {
      if (v17)
        (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
      v17 = (_DWORD *)v19;
    }
    v20 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v17);
    v18 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v22);
  }
  if (v17)
    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
  *((_DWORD *)this + 30) = v18;
  return v18;
}

void sub_217FD26B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::V5::Block::MergeFrom(CoreML::Specification::V5::Block *this, const CoreML::Specification::V5::Block *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::V5::NamedValueType **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  signed int v10;
  const std::string **v11;
  unsigned int *v12;
  int v13;
  int *v14;
  signed int v15;
  CoreML::Specification::V5::Operation **v16;
  unsigned int *v17;
  int v18;
  int *v19;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::V5::NamedValueType **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::V5::Block *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::NamedValueType>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::V5::NamedValueType **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    v11 = (const std::string **)(*((_QWORD *)a2 + 7) + 8);
    v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::V5::Block *)((char *)this + 40), *((_DWORD *)a2 + 12));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)((char *)this + 40), (std::string **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    v14 = (int *)*((_QWORD *)this + 7);
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    v16 = (CoreML::Specification::V5::Operation **)(*((_QWORD *)a2 + 10) + 8);
    v17 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::V5::Block *)((char *)this + 64), *((_DWORD *)a2 + 18));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Operation>::TypeHandler>((_tc_google::protobuf::Arena **)this + 8, (CoreML::Specification::V5::Operation **)v17, v16, v15, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    v18 = *((_DWORD *)this + 18) + v15;
    *((_DWORD *)this + 18) = v18;
    v19 = (int *)*((_QWORD *)this + 10);
    if (*v19 < v18)
      *v19 = v18;
  }
  return _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 88, (uint64_t)a2 + 88);
}

uint64_t CoreML::Specification::V5::Block::IsInitialized(CoreML::Specification::V5::Block *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Block::InternalSwap(CoreML::Specification::V5::Block *this, CoreML::Specification::V5::Block *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  int v8;

  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  LODWORD(v5) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LODWORD(v5) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v6;
  LODWORD(v6) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v6;
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::swap((_QWORD *)this + 12, (uint64_t)a2 + 96);
  v8 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v8;
  return result;
}

_QWORD *CoreML::Specification::V5::Block::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Block");
}

CoreML::Specification::V5::Argument_Binding *CoreML::Specification::V5::Argument_Binding::Argument_Binding(CoreML::Specification::V5::Argument_Binding *this)
{
  *(_QWORD *)this = &off_24D91F1A8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::Argument_Binding *)&CoreML::Specification::V5::_Argument_Binding_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_217FD2980(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::Value::MergeFrom(CoreML::Specification::V5::Value *this, const CoreML::Specification::V5::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  const CoreML::Specification::V5::ValueType *v7;
  CoreML::Specification::V5::ValueType *v8;
  const CoreML::Specification::V5::ValueType *v9;
  int v10;
  CoreML::Specification::V5::Value_ImmediateValue *v11;
  CoreML::Specification::V5::Value_BlobFileValue *v12;
  CoreML::Specification::V5::Value_FileValue *v13;
  CoreML::Specification::V5::Value_BlobFileValue *v14;
  uint64_t *v15;
  CoreML::Specification::V5::Value_FileValue *v16;
  CoreML::Specification::V5::Value_ImmediateValue *v17;
  const CoreML::Specification::V5::Value_ImmediateValue *v18;
  CoreML::Specification::V5::Value_FileValue *v19;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  if (a2 != (const CoreML::Specification::V5::Value *)&CoreML::Specification::V5::_Value_default_instance_)
  {
    v7 = (const CoreML::Specification::V5::ValueType *)*((_QWORD *)a2 + 3);
    if (v7)
    {
      v8 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 3);
      if (!v8)
      {
        v8 = (CoreML::Specification::V5::ValueType *)operator new();
        CoreML::Specification::V5::ValueType::ValueType(v8);
        *((_QWORD *)this + 3) = v8;
        v7 = (const CoreML::Specification::V5::ValueType *)*((_QWORD *)a2 + 3);
      }
      if (v7)
        v9 = v7;
      else
        v9 = (const CoreML::Specification::V5::ValueType *)&CoreML::Specification::V5::_ValueType_default_instance_;
      CoreML::Specification::V5::ValueType::MergeFrom(v8, v9);
    }
  }
  v10 = *((_DWORD *)a2 + 11);
  switch(v10)
  {
    case 5:
      if (*((_DWORD *)this + 11) == 5)
      {
        v12 = (CoreML::Specification::V5::Value_BlobFileValue *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::V5::Value::clear_value((uint64_t)this);
        *((_DWORD *)this + 11) = 5;
        v12 = (CoreML::Specification::V5::Value_BlobFileValue *)operator new();
        v14 = CoreML::Specification::V5::Value_BlobFileValue::Value_BlobFileValue(v12);
        *((_QWORD *)this + 4) = v12;
        if (*((_DWORD *)a2 + 11) != 5)
        {
          CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v14);
          v15 = &CoreML::Specification::V5::_Value_BlobFileValue_default_instance_;
          goto LABEL_36;
        }
      }
      v15 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_36:
      v19 = v12;
LABEL_37:
      CoreML::Specification::V5::Value_FileValue::MergeFrom(v19, (const CoreML::Specification::V5::Value_FileValue *)v15);
      return;
    case 4:
      if (*((_DWORD *)this + 11) == 4)
      {
        v13 = (CoreML::Specification::V5::Value_FileValue *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::V5::Value::clear_value((uint64_t)this);
        *((_DWORD *)this + 11) = 4;
        v13 = (CoreML::Specification::V5::Value_FileValue *)operator new();
        v16 = CoreML::Specification::V5::Value_FileValue::Value_FileValue(v13);
        *((_QWORD *)this + 4) = v13;
        if (*((_DWORD *)a2 + 11) != 4)
        {
          CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v16);
          v15 = &CoreML::Specification::V5::_Value_FileValue_default_instance_;
          goto LABEL_39;
        }
      }
      v15 = (uint64_t *)*((_QWORD *)a2 + 4);
LABEL_39:
      v19 = v13;
      goto LABEL_37;
    case 3:
      if (*((_DWORD *)this + 11) == 3)
      {
        v11 = (CoreML::Specification::V5::Value_ImmediateValue *)*((_QWORD *)this + 4);
      }
      else
      {
        CoreML::Specification::V5::Value::clear_value((uint64_t)this);
        *((_DWORD *)this + 11) = 3;
        v11 = (CoreML::Specification::V5::Value_ImmediateValue *)operator new();
        v17 = CoreML::Specification::V5::Value_ImmediateValue::Value_ImmediateValue(v11);
        *((_QWORD *)this + 4) = v11;
        if (*((_DWORD *)a2 + 11) != 3)
        {
          CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v17);
          v18 = (const CoreML::Specification::V5::Value_ImmediateValue *)&CoreML::Specification::V5::_Value_ImmediateValue_default_instance_;
          goto LABEL_41;
        }
      }
      v18 = (const CoreML::Specification::V5::Value_ImmediateValue *)*((_QWORD *)a2 + 4);
LABEL_41:
      CoreML::Specification::V5::Value_ImmediateValue::MergeFrom(v11, v18);
      break;
  }
}

void sub_217FD2C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::Argument_Binding::~Argument_Binding(CoreML::Specification::V5::Argument_Binding *this)
{
  *(_QWORD *)this = &off_24D91F1A8;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::V5::Argument_Binding::clear_binding((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::Argument_Binding::~Argument_Binding(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::V5::Argument_Binding::clear_binding(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 2)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  else if (v2 == 1)
  {
    v3 = *(_QWORD *)(this + 16);
    if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x219A19A08](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::V5::Argument_Binding *CoreML::Specification::V5::Argument_Binding::New(CoreML::Specification::V5::Argument_Binding *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Argument_Binding *v3;

  v3 = (CoreML::Specification::V5::Argument_Binding *)operator new();
  CoreML::Specification::V5::Argument_Binding::Argument_Binding(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Argument_Binding>(a2, v3);
  return v3;
}

void sub_217FD2D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Argument_Binding>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Argument_Binding>);
  return result;
}

uint64_t CoreML::Specification::V5::Argument_Binding::MergePartialFromCodedStream(CoreML::Specification::V5::Argument_Binding *this, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  std::string *v12;
  uint64_t result;
  int v15;
  std::string *v16;
  std::string *v17;
  const char *size;
  char *v19;
  int VarintSizeAsIntFallback;
  unint64_t v21;
  unsigned int v22;
  int v23;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_20;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_20;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 2)
        {
          v12 = *v5;
        }
        else
        {
          CoreML::Specification::V5::Argument_Binding::clear_binding((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v12 = (std::string *)operator new();
          CoreML::Specification::V5::Value::Value((CoreML::Specification::V5::Value *)v12);
          *v5 = v12;
        }
        v19 = *a2;
        if (*a2 >= a2[1] || *v19 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v19;
          *a2 = v19 + 1;
        }
        v21 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v21 & 0x8000000000000000) == 0)
        {
          v23 = v21;
          result = CoreML::Specification::V5::Value::MergePartialFromCodedStream((CoreML::Specification::V5::Value *)v12, a2, v22);
          if (!(_DWORD)result)
            return result;
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v23))
          {
            continue;
          }
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      if (*((_DWORD *)this + 7) != 1)
      {
        CoreML::Specification::V5::Argument_Binding::clear_binding((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
LABEL_27:
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
        goto LABEL_28;
      }
      v11 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_27;
LABEL_28:
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11);
      if (!(_DWORD)result)
        return result;
      v15 = *((_DWORD *)this + 7);
      v16 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
      if (v15 == 1)
        v16 = *v5;
      if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0)
        v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
      v17 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
      if (v15 == 1)
        v17 = *v5;
      if (SHIBYTE(v17->__r_.__value_.__r.__words[2]) < 0)
        size = (const char *)v17->__r_.__value_.__l.__size_;
      else
        size = (const char *)HIBYTE(v17->__r_.__value_.__r.__words[2]);
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v16, size, 0, (uint64_t)"CoreML.Specification.V5.Argument.Binding.name"))return 0;
    }
LABEL_20:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

void sub_217FD3024(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Argument_Binding::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  const char *v8;
  uint64_t *v9;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    v7 = *(unsigned __int8 **)(this + 16);
    if ((char)v7[23] < 0)
    {
      v7 = *(unsigned __int8 **)v7;
      v8 = *(const char **)(*(_QWORD *)(v5 + 16) + 8);
    }
    else
    {
      v8 = (const char *)v7[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v7, v8, 1, (uint64_t)"CoreML.Specification.V5.Argument.Binding.name");
    if (*(_DWORD *)(v5 + 28) == 1)
      v9 = *(uint64_t **)(v5 + 16);
    else
      v9 = &_tc_google::protobuf::internal::fixed_address_empty_string;
    this = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, (uint64_t)v9, a2);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::V5::Argument_Binding::ByteSizeLong(CoreML::Specification::V5::Argument_Binding *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    v7 = CoreML::Specification::V5::Value::ByteSizeLong(*((CoreML::Specification::V5::Value **)this + 2));
    v6 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
  }
  else
  {
    if (v2 != 1)
    {
      result = 0;
      goto LABEL_9;
    }
    v3 = *((_QWORD *)this + 2);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v5 = v4;
    v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
  }
  result = v6 + 1;
LABEL_9:
  *((_DWORD *)this + 6) = result;
  return result;
}

void CoreML::Specification::V5::Argument_Binding::MergeFrom(CoreML::Specification::V5::Argument_Binding *this, const CoreML::Specification::V5::Argument_Binding *a2)
{
  uint64_t v4;
  int v5;
  const std::string *v6;
  std::string *v7;
  CoreML::Specification::V5::Value *v8;
  CoreML::Specification::V5::Value *v9;
  const CoreML::Specification::V5::Value *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 == 2)
  {
    if (*((_DWORD *)this + 7) == 2)
    {
      v8 = (CoreML::Specification::V5::Value *)*((_QWORD *)this + 2);
    }
    else
    {
      CoreML::Specification::V5::Argument_Binding::clear_binding((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v8 = (CoreML::Specification::V5::Value *)operator new();
      v9 = CoreML::Specification::V5::Value::Value(v8);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) != 2)
      {
        CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v9);
        v10 = (const CoreML::Specification::V5::Value *)&CoreML::Specification::V5::_Value_default_instance_;
        goto LABEL_16;
      }
    }
    v10 = (const CoreML::Specification::V5::Value *)*((_QWORD *)a2 + 2);
LABEL_16:
    CoreML::Specification::V5::Value::MergeFrom(v8, v10);
    return;
  }
  if (v5 == 1)
  {
    v6 = (const std::string *)*((_QWORD *)a2 + 2);
    if (*((_DWORD *)this + 7) == 1)
    {
      v7 = (std::string *)*((_QWORD *)this + 2);
      if (v7 != (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        std::string::operator=(v7, v6);
        return;
      }
    }
    else
    {
      CoreML::Specification::V5::Argument_Binding::clear_binding((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
    }
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, (uint64_t)v6);
  }
}

void sub_217FD32C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Argument_Binding::IsInitialized(CoreML::Specification::V5::Argument_Binding *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Argument_Binding::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Argument.Binding");
}

CoreML::Specification::V5::Argument *CoreML::Specification::V5::Argument::Argument(CoreML::Specification::V5::Argument *this)
{
  *(_QWORD *)this = &off_24D91F240;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::V5::Argument *)&CoreML::Specification::V5::_Argument_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_217FD335C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::Argument::~Argument(CoreML::Specification::V5::Argument *this)
{
  *(_QWORD *)this = &off_24D91F240;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::Argument::~Argument(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::Argument *CoreML::Specification::V5::Argument::New(CoreML::Specification::V5::Argument *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Argument *v3;

  v3 = (CoreML::Specification::V5::Argument *)operator new();
  CoreML::Specification::V5::Argument::Argument(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Argument>(a2, v3);
  return v3;
}

void sub_217FD3430(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Argument>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Argument>);
  return result;
}

uint64_t CoreML::Specification::V5::Argument::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::V5::Argument_Binding::clear_binding(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::V5::Argument::MergePartialFromCodedStream(CoreML::Specification::V5::Argument *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::Argument_Binding *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Argument_Binding>::TypeHandler>((uint64_t)v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::V5::Argument_Binding::MergePartialFromCodedStream(v11, a2, v15);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::V5::Argument::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::Argument::ByteSizeLong(CoreML::Specification::V5::Argument *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::V5::Argument_Binding::ByteSizeLong(*(CoreML::Specification::V5::Argument_Binding **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

void CoreML::Specification::V5::Argument::MergeFrom(CoreML::Specification::V5::Argument *this, const CoreML::Specification::V5::Argument *a2)
{
  uint64_t v4;
  int v5;
  CoreML::Specification::V5::Argument_Binding **v6;
  unsigned int *v7;
  int v8;
  int *v9;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::V5::Argument_Binding **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::V5::Argument *)((char *)this + 16), v5);
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Argument_Binding>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::V5::Argument_Binding **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void CoreML::Specification::V5::Argument::CopyFrom(CoreML::Specification::V5::Argument *this, const CoreML::Specification::V5::Argument *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if (a2 != this)
  {
    v4 = *((unsigned int *)this + 6);
    if ((int)v4 >= 1)
    {
      v5 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
      do
      {
        v6 = *v5++;
        CoreML::Specification::V5::Argument_Binding::clear_binding(v6);
        --v4;
      }
      while (v4);
      *((_DWORD *)this + 6) = 0;
    }
    CoreML::Specification::V5::Argument::MergeFrom(this, a2);
  }
}

uint64_t CoreML::Specification::V5::Argument::IsInitialized(CoreML::Specification::V5::Argument *this)
{
  return 1;
}

uint64_t CoreML::Specification::V5::Argument::Swap(uint64_t this, CoreML::Specification::V5::Argument *a2)
{
  uint64_t v2;

  if (a2 != (CoreML::Specification::V5::Argument *)this)
  {
    v2 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v2;
  }
  return this;
}

_QWORD *CoreML::Specification::V5::Argument::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Argument");
}

CoreML::Specification::V5::Operation *CoreML::Specification::V5::Operation::Operation(CoreML::Specification::V5::Operation *this)
{
  CoreML::Specification::V5::protobuf_MIL_2eproto *v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D91F2D8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::Init((uint64_t)this + 24);
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 8) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  v2 = (CoreML::Specification::V5::protobuf_MIL_2eproto *)_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::Init((uint64_t)this + 104);
  *((_DWORD *)this + 28) = 0;
  if (this != (CoreML::Specification::V5::Operation *)&CoreML::Specification::V5::_Operation_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 34) = 0;
  return this;
}

void sub_217FD38D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map(v4);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3 + 3);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  const CoreML::Specification::V5::Argument *v7;
  std::string *v8;
  _QWORD v9[3];

  result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v9);
  v4 = v9[0];
  if (v9[0])
  {
    v5 = a1 + 8;
    do
    {
      v6 = *(std::string **)(v4 + 24);
      v7 = (const CoreML::Specification::V5::Argument *)&v6[1];
      v8 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::operator[](v5, v6);
      CoreML::Specification::V5::Argument::CopyFrom((CoreML::Specification::V5::Argument *)v8, v7);
      result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v9);
      v4 = v9[0];
    }
    while (v9[0]);
  }
  return result;
}

void CoreML::Specification::V5::Operation::~Operation(CoreML::Specification::V5::Operation *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D91F2D8;
  v2 = (_QWORD *)((char *)this + 104);
  CoreML::Specification::V5::Operation::SharedDtor((uint64_t)this);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 9);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 6);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::~Map((_QWORD *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::Operation::~Operation(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::V5::Operation::SharedDtor(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 128);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x219A19A08);
  }
  return this;
}

CoreML::Specification::V5::Operation *CoreML::Specification::V5::Operation::New(CoreML::Specification::V5::Operation *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Operation *v3;

  v3 = (CoreML::Specification::V5::Operation *)operator new();
  CoreML::Specification::V5::Operation::Operation(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Operation>(a2, v3);
  return v3;
}

void sub_217FD3AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Operation>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Operation>);
  return result;
}

void CoreML::Specification::V5::Operation::Clear(CoreML::Specification::V5::Operation *this)
{
  uint64_t v2;
  CoreML::Specification::V5::NamedValueType **v3;
  CoreML::Specification::V5::NamedValueType *v4;
  uint64_t v5;
  CoreML::Specification::V5::Block **v6;
  CoreML::Specification::V5::Block *v7;
  uint64_t v8;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::clear((uint64_t)this + 24);
  v2 = *((unsigned int *)this + 14);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::V5::NamedValueType **)(*((_QWORD *)this + 8) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::V5::NamedValueType::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 14) = 0;
  }
  v5 = *((unsigned int *)this + 20);
  if ((int)v5 >= 1)
  {
    v6 = (CoreML::Specification::V5::Block **)(*((_QWORD *)this + 11) + 8);
    do
    {
      v7 = *v6++;
      CoreML::Specification::V5::Block::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 20) = 0;
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::clear((uint64_t)this + 104);
  v8 = *((_QWORD *)this + 16);
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::V5::Operation::MergePartialFromCodedStream(CoreML::Specification::V5::Operation *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  std::string **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int TagFallback;
  std::string *v13;
  std::string *v14;
  const char *size;
  char *v16;
  int VarintSizeAsIntFallback;
  CoreML::Specification::V5::NamedValueType *v18;
  char *v19;
  int v20;
  CoreML::Specification::V5::Block *v21;
  char *v22;
  int v23;
  char *v24;
  int v25;
  int v27;
  unint64_t v28;
  int v29;
  _tc_google::protobuf::internal *p_p;
  unint64_t v31;
  _BOOL4 v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _tc_google::protobuf::internal *v39;
  unint64_t v40;
  BOOL v41;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  void *__p;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v43 = (char *)this + 104;
  v44 = (char *)this + 96;
  v4 = (char *)this + 72;
  v5 = (char *)this + 48;
  v6 = (char *)this + 16;
  v7 = (char *)this + 24;
  v8 = (std::string **)((char *)this + 128);
  while (1)
  {
    v9 = *a2;
    if (*a2 >= a2[1])
    {
      v10 = 0;
    }
    else
    {
      v10 = *v9;
      if (*v9 >= 1)
      {
        *a2 = v9 + 1;
        v11 = v10 | 0x100000000;
        if ((v11 & 0x100000000) != 0)
          goto LABEL_8;
        goto LABEL_31;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v10);
    v11 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v11 & 0x100000000) != 0)
    {
LABEL_8:
      switch(v11 >> 3)
      {
        case 1u:
          if (v11 != 10)
            break;
          v13 = *v8;
          if (*v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
          {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
            v13 = *v8;
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v13))
            return 0;
          v14 = *v8;
          if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
          {
            v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
            size = (const char *)(*v8)->__r_.__value_.__l.__size_;
          }
          else
          {
            size = (const char *)HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v14, size, 0, (uint64_t)"CoreML.Specification.V5.Operation.type"))return 0;
          goto LABEL_36;
        case 2u:
          if (v11 != 18)
            break;
          v45 = v6;
          v46 = v7;
          v48 = 0;
          v49 = 0;
          __p = 0;
          v50 = 0;
          v16 = *a2;
          if (*a2 >= a2[1] || *v16 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0)
              goto LABEL_82;
          }
          else
          {
            VarintSizeAsIntFallback = *v16;
            *a2 = v16 + 1;
          }
          v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          v29 = v28;
          if ((v28 & 0x8000000000000000) != 0
            || !_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>>::MergePartialFromCodedStream((uint64_t)&v45, (uint64_t)a2)|| !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v29))
          {
            goto LABEL_82;
          }
          if (v49 >= 0)
            p_p = (_tc_google::protobuf::internal *)&__p;
          else
            p_p = (_tc_google::protobuf::internal *)__p;
          if (v49 >= 0)
            v31 = HIBYTE(v49);
          else
            v31 = v48;
          v32 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, (const char *)v31, 0, (uint64_t)"CoreML.Specification.V5.Operation.InputsEntry.key");
          goto LABEL_70;
        case 3u:
          if (v11 != 26)
            break;
          v18 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::NamedValueType>::TypeHandler>((uint64_t)v5);
          v19 = *a2;
          if (*a2 >= a2[1] || *v19 < 0)
          {
            v20 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v20 < 0)
              return 0;
          }
          else
          {
            v20 = *v19;
            *a2 = v19 + 1;
          }
          v33 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v20);
          if ((v33 & 0x8000000000000000) != 0)
            return 0;
          v35 = v33;
          if (!CoreML::Specification::V5::NamedValueType::MergePartialFromCodedStream(v18, a2, v34))
            return 0;
          goto LABEL_57;
        case 4u:
          if (v11 != 34)
            break;
          v21 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Block>::TypeHandler>((uint64_t)v4);
          v22 = *a2;
          if (*a2 >= a2[1] || *v22 < 0)
          {
            v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v23 < 0)
              return 0;
          }
          else
          {
            v23 = *v22;
            *a2 = v22 + 1;
          }
          v36 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v23);
          if ((v36 & 0x8000000000000000) != 0)
            return 0;
          v35 = v36;
          if (!CoreML::Specification::V5::Block::MergePartialFromCodedStream(v21, (_tc_google::protobuf::io::CodedInputStream *)a2))return 0;
LABEL_57:
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v35))
          {
            goto LABEL_36;
          }
          return 0;
        case 5u:
          if (v11 != 42)
            break;
          v45 = v44;
          v46 = v43;
          v48 = 0;
          v49 = 0;
          __p = 0;
          v50 = 0;
          v24 = *a2;
          if (*a2 >= a2[1] || *v24 < 0)
          {
            v25 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v25 < 0)
              goto LABEL_82;
          }
          else
          {
            v25 = *v24;
            *a2 = v24 + 1;
          }
          v37 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v25);
          v38 = v37;
          if ((v37 & 0x8000000000000000) != 0
            || !_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::MergePartialFromCodedStream((uint64_t)&v45, (uint64_t)a2)|| !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v38))
          {
LABEL_82:
            v41 = 0;
            v27 = 6;
            goto LABEL_73;
          }
          if (v49 >= 0)
            v39 = (_tc_google::protobuf::internal *)&__p;
          else
            v39 = (_tc_google::protobuf::internal *)__p;
          if (v49 >= 0)
            v40 = HIBYTE(v49);
          else
            v40 = v48;
          v32 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v39, (const char *)v40, 0, (uint64_t)"CoreML.Specification.V5.Operation.AttributesEntry.key");
LABEL_70:
          v41 = v32;
          if (v32)
            v27 = 0;
          else
            v27 = 6;
LABEL_73:
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          if (SHIBYTE(v49) < 0)
            operator delete(__p);
          if (!v41)
            goto LABEL_37;
          goto LABEL_36;
        default:
          break;
      }
    }
LABEL_31:
    if (!(_DWORD)v11 || (v11 & 7) == 4)
      return 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v11, a3))return 0;
LABEL_36:
    v27 = 0;
LABEL_37:
    if (v27)
      return 0;
  }
}

void sub_217FD3FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a21)
    (*(void (**)(uint64_t))(*(_QWORD *)a21 + 8))(a21);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::V5::Operation::SerializeWithCachedSizes(CoreML::Specification::V5::Operation *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  const char *v7;
  unint64_t v8;
  uint64_t v10;
  _tc_google::protobuf::io::CodedOutputStream *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  const char *v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _tc_google::protobuf::io::CodedOutputStream *v23;
  uint64_t v24;
  _tc_google::protobuf::internal *v25;
  const char *v26;
  int v27;
  int i;
  int v29;
  int j;
  unint64_t v31;
  uint64_t v33;
  _tc_google::protobuf::io::CodedOutputStream *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  const char *v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _tc_google::protobuf::io::CodedOutputStream *v46;
  uint64_t v47;
  _tc_google::protobuf::internal *v48;
  const char *v49;
  _QWORD v50[3];

  result = *((_QWORD *)this + 16);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(const char **)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  v7 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v7, 1, (uint64_t)"CoreML.Specification.V5.Operation.type");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 16), a2);
  }
LABEL_7:
  v8 = **((_QWORD **)this + 5);
  if (!v8)
    goto LABEL_50;
  if (*((_BYTE *)a2 + 26))
  {
    if (v8 >= 2 && *((_BYTE *)a2 + 27) != 0)
    {
LABEL_30:
      v16 = operator new[]();
      _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v50);
      v17 = v50[0];
      if (v50[0])
      {
        v18 = 0;
        do
        {
          *(_QWORD *)(v16 + 8 * v18) = *(_QWORD *)(v17 + 24);
          _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v50);
          ++v18;
          v17 = v50[0];
        }
        while (v50[0]);
      }
      else
      {
        v18 = 0;
      }
      v19 = 126 - 2 * __clz(v18);
      if (v18)
        v20 = v19;
      else
        v20 = 0;
      std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const**,false>(v16, (const void ***)(v16 + 8 * v18), (uint64_t)v50, v20, 1);
      if (v18)
      {
        v21 = 0;
        v22 = (uint64_t *)v16;
        do
        {
          v24 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*v22, *v22 + 24, *((_tc_google::protobuf::Arena **)this + 2));
          if (v21 != v24)
          {
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v21 = v24;
          }
          _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v21, a2, v23);
          v25 = (_tc_google::protobuf::internal *)*v22;
          if (*(char *)(*v22 + 23) < 0)
          {
            v25 = *(_tc_google::protobuf::internal **)v25;
            v26 = *(const char **)(*v22 + 8);
          }
          else
          {
            v26 = (const char *)*(unsigned __int8 *)(*v22 + 23);
          }
          _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v25, v26, 1, (uint64_t)"CoreML.Specification.V5.Operation.InputsEntry.key");
          ++v22;
          --v18;
        }
        while (v18);
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      result = MEMORY[0x219A199F0](v16, 0x60C8044C4A2DFLL);
      goto LABEL_50;
    }
  }
  else if (v8 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
  {
    goto LABEL_30;
  }
  result = _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v50);
  v10 = 0;
  while (v50[0])
  {
    v12 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v50[0] + 24), *(_QWORD *)(v50[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 2));
    if (v10 != v12)
    {
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v10 = v12;
    }
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v10, a2, v11);
    v13 = *(unsigned __int8 **)(v50[0] + 24);
    if ((char)v13[23] < 0)
    {
      v13 = *(unsigned __int8 **)v13;
      v14 = *(const char **)(*(_QWORD *)(v50[0] + 24) + 8);
    }
    else
    {
      v14 = (const char *)v13[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v13, v14, 1, (uint64_t)"CoreML.Specification.V5.Operation.InputsEntry.key");
    result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v50);
  }
  if (v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_50:
  v27 = *((_DWORD *)this + 14);
  if (v27)
  {
    for (i = 0; i != v27; ++i)
      result = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*((_QWORD *)this + 8) + 8 * i + 8), a2, a4);
  }
  v29 = *((_DWORD *)this + 20);
  if (v29)
  {
    for (j = 0; j != v29; ++j)
      result = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(*((_QWORD *)this + 11) + 8 * j + 8), a2, a4);
  }
  v31 = **((_QWORD **)this + 15);
  if (v31)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v31 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_79:
        v39 = operator new[]();
        _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 104, v50);
        v40 = v50[0];
        if (v50[0])
        {
          v41 = 0;
          do
          {
            *(_QWORD *)(v39 + 8 * v41) = *(_QWORD *)(v40 + 24);
            _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v50);
            ++v41;
            v40 = v50[0];
          }
          while (v50[0]);
        }
        else
        {
          v41 = 0;
        }
        v42 = 126 - 2 * __clz(v41);
        if (v41)
          v43 = v42;
        else
          v43 = 0;
        std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const**,false>(v39, (const void ***)(v39 + 8 * v41), (uint64_t)v50, v43, 1);
        if (v41)
        {
          v44 = 0;
          v45 = (uint64_t *)v39;
          do
          {
            v47 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*v45, *v45 + 24, *((_tc_google::protobuf::Arena **)this + 12));
            if (v44 != v47)
            {
              if (v44)
                (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
              v44 = v47;
            }
            _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, v44, a2, v46);
            v48 = (_tc_google::protobuf::internal *)*v45;
            if (*(char *)(*v45 + 23) < 0)
            {
              v48 = *(_tc_google::protobuf::internal **)v48;
              v49 = *(const char **)(*v45 + 8);
            }
            else
            {
              v49 = (const char *)*(unsigned __int8 *)(*v45 + 23);
            }
            _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v48, v49, 1, (uint64_t)"CoreML.Specification.V5.Operation.AttributesEntry.key");
            ++v45;
            --v41;
          }
          while (v41);
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        }
        return MEMORY[0x219A199F0](v39, 0x60C8044C4A2DFLL);
      }
    }
    else if (v31 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_79;
    }
    result = _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 104, v50);
    v33 = 0;
    while (v50[0])
    {
      v35 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v50[0] + 24), *(_QWORD *)(v50[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 12));
      if (v33 != v35)
      {
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        v33 = v35;
      }
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, v33, a2, v34);
      v36 = *(unsigned __int8 **)(v50[0] + 24);
      if ((char)v36[23] < 0)
      {
        v36 = *(unsigned __int8 **)v36;
        v37 = *(const char **)(*(_QWORD *)(v50[0] + 24) + 8);
      }
      else
      {
        v37 = (const char *)v36[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v36, v37, 1, (uint64_t)"CoreML.Specification.V5.Operation.AttributesEntry.key");
      result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v50);
    }
    if (v33)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  return result;
}

void sub_217FD4558(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Operation::ByteSizeLong(_tc_google::protobuf::Arena **this)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _tc_google::protobuf::Arena *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];

  v2 = *(unsigned int *)this[5];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 3), v23);
  v3 = 0;
  while (v23[0])
  {
    v4 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v23[0] + 24), *(_QWORD *)(v23[0] + 24) + 24, this[2]);
    if (v3 != (_DWORD *)v4)
    {
      if (v3)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v3 = (_DWORD *)v4;
    }
    v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v3);
    v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v23);
  }
  if (v3)
    (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v6 = *((unsigned int *)this + 14);
  v7 = v2 + v6;
  if ((_DWORD)v6)
  {
    v8 = 0;
    do
    {
      v9 = CoreML::Specification::V5::NamedValueType::ByteSizeLong(*((CoreML::Specification::V5::NamedValueType **)this[8]
                                                                   + v8
                                                                   + 1));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while ((_DWORD)v6 != v8);
  }
  v10 = *((unsigned int *)this + 20);
  v11 = v7 + v10;
  if ((_DWORD)v10)
  {
    v12 = 0;
    do
    {
      v13 = CoreML::Specification::V5::Block::ByteSizeLong(*((CoreML::Specification::V5::Block **)this[11] + v12 + 1));
      v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      ++v12;
    }
    while ((_DWORD)v10 != v12);
  }
  v14 = *(unsigned int *)this[15];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 13), v23);
  v15 = 0;
  v16 = v14 + v11;
  while (v23[0])
  {
    v17 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v23[0] + 24), *(_QWORD *)(v23[0] + 24) + 24, this[12]);
    if (v15 != (_DWORD *)v17)
    {
      if (v15)
        (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
      v15 = (_DWORD *)v17;
    }
    v18 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v15);
    v16 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v23);
  }
  if (v15)
    (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
  v19 = this[16];
  v20 = *((unsigned __int8 *)v19 + 23);
  if (*((char *)v19 + 23) < 0)
  {
    if (!*((_QWORD *)v19 + 1))
      goto LABEL_30;
  }
  else if (!*((_BYTE *)v19 + 23))
  {
    goto LABEL_30;
  }
  v21 = *((_QWORD *)v19 + 1);
  if ((v20 & 0x80u) == 0)
    v21 = v20;
  v16 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_30:
  *((_DWORD *)this + 34) = v16;
  return v16;
}

void sub_217FD4830(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::V5::Operation::MergeFrom(CoreML::Specification::V5::Operation *this, const CoreML::Specification::V5::Operation *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::V5::NamedValueType **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  signed int v10;
  CoreML::Specification::V5::Block **v11;
  unsigned int *v12;
  int v13;
  int *v14;
  uint64_t v15;
  std::string *v16;
  std::string **v17;
  std::string *v18;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
  v5 = *((_DWORD *)a2 + 14);
  if (v5)
  {
    v6 = (CoreML::Specification::V5::NamedValueType **)(*((_QWORD *)a2 + 8) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::V5::Operation *)((char *)this + 48), *((_DWORD *)a2 + 14));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::NamedValueType>::TypeHandler>((_tc_google::protobuf::Arena **)this + 6, (CoreML::Specification::V5::NamedValueType **)v7, v6, v5, **((_DWORD **)this + 8) - *((_DWORD *)this + 14));
    v8 = *((_DWORD *)this + 14) + v5;
    *((_DWORD *)this + 14) = v8;
    v9 = (int *)*((_QWORD *)this + 8);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 20);
  if (v10)
  {
    v11 = (CoreML::Specification::V5::Block **)(*((_QWORD *)a2 + 11) + 8);
    v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::V5::Operation *)((char *)this + 72), *((_DWORD *)a2 + 20));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Block>::TypeHandler>((uint64_t)this + 72, (CoreML::Specification::V5::Block **)v12, v11, v10, **((_DWORD **)this + 11) - *((_DWORD *)this + 20));
    v13 = *((_DWORD *)this + 20) + v10;
    *((_DWORD *)this + 20) = v13;
    v14 = (int *)*((_QWORD *)this + 11);
    if (*v14 < v13)
      *v14 = v13;
  }
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 96, (uint64_t)a2 + 96);
  v15 = *((_QWORD *)a2 + 16);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      return;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    return;
  }
  v18 = (std::string *)*((_QWORD *)this + 16);
  v17 = (std::string **)((char *)this + 128);
  v16 = v18;
  if (v18 != (std::string *)v15)
  {
    if (v16 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v17, v15);
    else
      std::string::operator=(v16, (const std::string *)v15);
  }
}

uint64_t CoreML::Specification::V5::Operation::IsInitialized(CoreML::Specification::V5::Operation *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Operation::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Operation");
}

CoreML::Specification::V5::NamedValueType *CoreML::Specification::V5::NamedValueType::NamedValueType(CoreML::Specification::V5::NamedValueType *this)
{
  *(_QWORD *)this = &off_24D91F370;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::NamedValueType *)&CoreML::Specification::V5::_NamedValueType_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_217FD4A54(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::NamedValueType::~NamedValueType(CoreML::Specification::V5::NamedValueType *this)
{
  *(_QWORD *)this = &off_24D91F370;
  CoreML::Specification::V5::NamedValueType::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::NamedValueType::~NamedValueType(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::V5::NamedValueType::SharedDtor(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = this;
  v2 = this[2];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (uint64_t *)MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  if (v1 != &CoreML::Specification::V5::_NamedValueType_default_instance_)
  {
    this = (uint64_t *)v1[3];
    if (this)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
  return this;
}

CoreML::Specification::V5::NamedValueType *CoreML::Specification::V5::NamedValueType::New(CoreML::Specification::V5::NamedValueType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::NamedValueType *v3;

  v3 = (CoreML::Specification::V5::NamedValueType *)operator new();
  CoreML::Specification::V5::NamedValueType::NamedValueType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::NamedValueType>(a2, v3);
  return v3;
}

void sub_217FD4BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::NamedValueType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::NamedValueType>);
  return result;
}

uint64_t CoreML::Specification::V5::NamedValueType::Clear(CoreML::Specification::V5::NamedValueType *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::V5::NamedValueType::MergePartialFromCodedStream(CoreML::Specification::V5::NamedValueType *this, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  uint64_t result;
  std::string *v13;
  const char *size;
  CoreML::Specification::V5::ValueType *v15;
  char *v16;
  int VarintSizeAsIntFallback;
  unint64_t v19;
  unsigned int v20;
  int v21;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_25;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_25;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 18)
          goto LABEL_25;
        v15 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 3);
        if (!v15)
        {
          v15 = (CoreML::Specification::V5::ValueType *)operator new();
          CoreML::Specification::V5::ValueType::ValueType(v15);
          *((_QWORD *)this + 3) = v15;
        }
        v16 = *a2;
        if (*a2 >= a2[1] || *v16 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v16;
          *a2 = v16 + 1;
        }
        v19 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v19 & 0x8000000000000000) == 0)
        {
          v21 = v19;
          result = CoreML::Specification::V5::ValueType::MergePartialFromCodedStream(v15, a2, v20);
          if (!(_DWORD)result)
            return result;
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v21))
          {
            continue;
          }
        }
        return 0;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11);
      if (!(_DWORD)result)
        return result;
      v13 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = (std::string *)v13->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v13, size, 0, (uint64_t)"CoreML.Specification.V5.NamedValueType.name"))return 0;
    }
LABEL_25:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

void sub_217FD4E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::NamedValueType::SerializeWithCachedSizes(CoreML::Specification::V5::NamedValueType *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(const char **)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  v7 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v7, 1, (uint64_t)"CoreML.Specification.V5.NamedValueType.name");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  if (this != (CoreML::Specification::V5::NamedValueType *)&CoreML::Specification::V5::_NamedValueType_default_instance_)
  {
    v8 = *((_QWORD *)this + 3);
    if (v8)
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::V5::NamedValueType::ByteSizeLong(CoreML::Specification::V5::NamedValueType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::V5::TensorType **v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if (this != (CoreML::Specification::V5::NamedValueType *)&CoreML::Specification::V5::_NamedValueType_default_instance_)
  {
    v6 = (CoreML::Specification::V5::TensorType **)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = CoreML::Specification::V5::ValueType::ByteSizeLong(v6);
      v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v5;
  return v5;
}

void CoreML::Specification::V5::NamedValueType::MergeFrom(CoreML::Specification::V5::NamedValueType *this, const CoreML::Specification::V5::NamedValueType *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  const CoreML::Specification::V5::ValueType *v7;
  CoreML::Specification::V5::ValueType *v8;
  const CoreML::Specification::V5::ValueType *v9;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  if (a2 != (const CoreML::Specification::V5::NamedValueType *)&CoreML::Specification::V5::_NamedValueType_default_instance_)
  {
    v7 = (const CoreML::Specification::V5::ValueType *)*((_QWORD *)a2 + 3);
    if (v7)
    {
      v8 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 3);
      if (!v8)
      {
        v8 = (CoreML::Specification::V5::ValueType *)operator new();
        CoreML::Specification::V5::ValueType::ValueType(v8);
        *((_QWORD *)this + 3) = v8;
        v7 = (const CoreML::Specification::V5::ValueType *)*((_QWORD *)a2 + 3);
      }
      if (v7)
        v9 = v7;
      else
        v9 = (const CoreML::Specification::V5::ValueType *)&CoreML::Specification::V5::_ValueType_default_instance_;
      CoreML::Specification::V5::ValueType::MergeFrom(v8, v9);
    }
  }
}

void sub_217FD5088(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::ValueType::MergeFrom(CoreML::Specification::V5::ValueType *this, const CoreML::Specification::V5::ValueType *a2)
{
  uint64_t v4;
  CoreML::Specification::V5::TensorType *v5;
  CoreML::Specification::V5::TupleType *v6;
  CoreML::Specification::V5::DictionaryType *v7;
  CoreML::Specification::V5::ListType *v8;
  CoreML::Specification::V5::TupleType *v9;
  const CoreML::Specification::V5::TupleType *v10;
  CoreML::Specification::V5::DictionaryType *v11;
  const CoreML::Specification::V5::DictionaryType *v12;
  CoreML::Specification::V5::TensorType *v13;
  const CoreML::Specification::V5::TensorType *v14;
  CoreML::Specification::V5::ListType *v15;
  const CoreML::Specification::V5::ListType *v16;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        v5 = (CoreML::Specification::V5::TensorType *)*((_QWORD *)this + 2);
LABEL_17:
        v14 = (const CoreML::Specification::V5::TensorType *)*((_QWORD *)a2 + 2);
        goto LABEL_25;
      }
      CoreML::Specification::V5::ValueType::clear_type((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v5 = (CoreML::Specification::V5::TensorType *)operator new();
      v13 = CoreML::Specification::V5::TensorType::TensorType(v5);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
        goto LABEL_17;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v13);
      v14 = (const CoreML::Specification::V5::TensorType *)&CoreML::Specification::V5::_TensorType_default_instance_;
LABEL_25:
      CoreML::Specification::V5::TensorType::MergeFrom(v5, v14);
      return;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        v8 = (CoreML::Specification::V5::ListType *)*((_QWORD *)this + 2);
LABEL_19:
        v16 = (const CoreML::Specification::V5::ListType *)*((_QWORD *)a2 + 2);
        goto LABEL_27;
      }
      CoreML::Specification::V5::ValueType::clear_type((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v8 = (CoreML::Specification::V5::ListType *)operator new();
      v15 = CoreML::Specification::V5::ListType::ListType(v8);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 2)
        goto LABEL_19;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v15);
      v16 = (const CoreML::Specification::V5::ListType *)&CoreML::Specification::V5::_ListType_default_instance_;
LABEL_27:
      CoreML::Specification::V5::ListType::MergeFrom(v8, v16);
      return;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        v6 = (CoreML::Specification::V5::TupleType *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::V5::ValueType::clear_type((uint64_t)this);
        *((_DWORD *)this + 7) = 3;
        v6 = (CoreML::Specification::V5::TupleType *)operator new();
        v9 = CoreML::Specification::V5::TupleType::TupleType(v6);
        *((_QWORD *)this + 2) = v6;
        if (*((_DWORD *)a2 + 7) != 3)
        {
          CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v9);
          v10 = (const CoreML::Specification::V5::TupleType *)&CoreML::Specification::V5::_TupleType_default_instance_;
          goto LABEL_21;
        }
      }
      v10 = (const CoreML::Specification::V5::TupleType *)*((_QWORD *)a2 + 2);
LABEL_21:
      CoreML::Specification::V5::TupleType::MergeFrom((uint64_t)v6, v10);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        v7 = (CoreML::Specification::V5::DictionaryType *)*((_QWORD *)this + 2);
LABEL_15:
        v12 = (const CoreML::Specification::V5::DictionaryType *)*((_QWORD *)a2 + 2);
        goto LABEL_23;
      }
      CoreML::Specification::V5::ValueType::clear_type((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v7 = (CoreML::Specification::V5::DictionaryType *)operator new();
      v11 = CoreML::Specification::V5::DictionaryType::DictionaryType(v7);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_15;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v11);
      v12 = (const CoreML::Specification::V5::DictionaryType *)&CoreML::Specification::V5::_DictionaryType_default_instance_;
LABEL_23:
      CoreML::Specification::V5::DictionaryType::MergeFrom((std::string *)v7, v12);
      return;
    default:
      return;
  }
}

void sub_217FD5300(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::NamedValueType::IsInitialized(CoreML::Specification::V5::NamedValueType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::NamedValueType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.NamedValueType");
}

CoreML::Specification::V5::ValueType *CoreML::Specification::V5::ValueType::ValueType(CoreML::Specification::V5::ValueType *this)
{
  *(_QWORD *)this = &off_24D91F408;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::ValueType *)&CoreML::Specification::V5::_ValueType_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_217FD53B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::TensorType::MergeFrom(CoreML::Specification::V5::TensorType *this, const CoreML::Specification::V5::TensorType *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::V5::Dimension **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  uint64_t result;
  uint64_t v11;
  int v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::V5::Dimension **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::V5::TensorType *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Dimension>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::V5::Dimension **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  result = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 40, (uint64_t)a2 + 40);
  v11 = *((_QWORD *)a2 + 9);
  if (v11)
    *((_QWORD *)this + 9) = v11;
  v12 = *((_DWORD *)a2 + 20);
  if (v12)
    *((_DWORD *)this + 20) = v12;
  return result;
}

void CoreML::Specification::V5::ListType::MergeFrom(CoreML::Specification::V5::ListType *this, const CoreML::Specification::V5::ListType *a2)
{
  uint64_t v4;
  const CoreML::Specification::V5::ValueType *v5;
  CoreML::Specification::V5::ValueType *v6;
  const CoreML::Specification::V5::ValueType *v7;
  const CoreML::Specification::V5::Dimension *v8;
  CoreML::Specification::V5::Dimension *v9;
  const CoreML::Specification::V5::Dimension *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::V5::ListType *)&CoreML::Specification::V5::_ListType_default_instance_)
  {
    v5 = (const CoreML::Specification::V5::ValueType *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::V5::ValueType *)operator new();
        CoreML::Specification::V5::ValueType::ValueType(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::V5::ValueType *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::V5::ValueType *)&CoreML::Specification::V5::_ValueType_default_instance_;
      CoreML::Specification::V5::ValueType::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::V5::Dimension *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::V5::Dimension *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::V5::Dimension *)operator new();
        CoreML::Specification::V5::Dimension::Dimension(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::V5::Dimension *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::V5::Dimension *)&CoreML::Specification::V5::_Dimension_default_instance_;
      CoreML::Specification::V5::Dimension::MergeFrom(v9, v10);
    }
  }
}

void sub_217FD558C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::TupleType::MergeFrom(uint64_t this, const CoreML::Specification::V5::TupleType *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  CoreML::Specification::V5::ValueType **v6;
  unsigned int *v7;
  int v8;
  int *v9;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(this + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::V5::ValueType **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::ValueType>::TypeHandler>(v3 + 16, (CoreML::Specification::V5::ValueType **)v7, v6, v5, **(_DWORD **)(v3 + 32) - *(_DWORD *)(v3 + 24));
    v8 = *(_DWORD *)(v3 + 24) + v5;
    *(_DWORD *)(v3 + 24) = v8;
    v9 = *(int **)(v3 + 32);
    if (*v9 < v8)
      *v9 = v8;
  }
  return this;
}

std::string *CoreML::Specification::V5::DictionaryType::MergeFrom(std::string *this, const CoreML::Specification::V5::DictionaryType *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::V5::ValueType *v5;
  CoreML::Specification::V5::ValueType *v6;
  const CoreML::Specification::V5::ValueType *v7;
  const CoreML::Specification::V5::ValueType *v8;
  CoreML::Specification::V5::ValueType *data;
  const CoreML::Specification::V5::ValueType *v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::V5::DictionaryType *)&CoreML::Specification::V5::_DictionaryType_default_instance_)
  {
    v5 = (const CoreML::Specification::V5::ValueType *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::V5::ValueType *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::V5::ValueType *)operator new();
        CoreML::Specification::V5::ValueType::ValueType(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::V5::ValueType *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::V5::ValueType *)&CoreML::Specification::V5::_ValueType_default_instance_;
      this = (std::string *)CoreML::Specification::V5::ValueType::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::V5::ValueType *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::V5::ValueType *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::V5::ValueType *)operator new();
        CoreML::Specification::V5::ValueType::ValueType(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::V5::ValueType *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::V5::ValueType *)&CoreML::Specification::V5::_ValueType_default_instance_;
      return (std::string *)CoreML::Specification::V5::ValueType::MergeFrom(data, v10);
    }
  }
  return this;
}

void sub_217FD5744(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::ValueType::~ValueType(CoreML::Specification::V5::ValueType *this)
{
  *(_QWORD *)this = &off_24D91F408;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::V5::ValueType::clear_type((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::ValueType::~ValueType(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::V5::ValueType::clear_type(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::V5::ValueType *CoreML::Specification::V5::ValueType::New(CoreML::Specification::V5::ValueType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::ValueType *v3;

  v3 = (CoreML::Specification::V5::ValueType *)operator new();
  CoreML::Specification::V5::ValueType::ValueType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::ValueType>(a2, v3);
  return v3;
}

void sub_217FD5888(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::ValueType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::ValueType>);
  return result;
}

uint64_t CoreML::Specification::V5::ValueType::MergePartialFromCodedStream(CoreML::Specification::V5::ValueType *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::TensorType *v9;
  CoreML::Specification::V5::ListType *v10;
  CoreML::Specification::V5::TupleType *v11;
  CoreML::Specification::V5::DictionaryType *v12;
  BOOL v13;
  char *v14;
  int VarintSizeAsIntFallback;
  char *v16;
  int v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t result;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;

  while (2)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_20:
      if ((_DWORD)v7)
        v13 = (v7 & 7) == 4;
      else
        v13 = 1;
      if (v13)
        return 1;
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)goto LABEL_58;
    }
    v6 = 0;
LABEL_6:
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_20;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (CoreML::Specification::V5::TensorType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::V5::TensorType *)operator new();
          CoreML::Specification::V5::TensorType::TensorType(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v14 = *a2;
        if (*a2 >= a2[1] || *v14 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_58;
        }
        else
        {
          VarintSizeAsIntFallback = *v14;
          *a2 = v14 + 1;
        }
        v22 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v22 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v24 = v22;
        result = CoreML::Specification::V5::TensorType::MergePartialFromCodedStream(v9, a2, v23);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 2u:
        if (v7 != 18)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 2)
        {
          v10 = (CoreML::Specification::V5::ListType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v10 = (CoreML::Specification::V5::ListType *)operator new();
          CoreML::Specification::V5::ListType::ListType(v10);
          *((_QWORD *)this + 2) = v10;
        }
        v16 = *a2;
        if (*a2 >= a2[1] || *v16 < 0)
        {
          v17 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v17 < 0)
            goto LABEL_58;
        }
        else
        {
          v17 = *v16;
          *a2 = v16 + 1;
        }
        v26 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17);
        if ((v26 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v24 = v26;
        result = CoreML::Specification::V5::ListType::MergePartialFromCodedStream(v10, a2, v27);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 3u:
        if (v7 != 26)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 3)
        {
          v11 = (CoreML::Specification::V5::TupleType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v11 = (CoreML::Specification::V5::TupleType *)operator new();
          CoreML::Specification::V5::TupleType::TupleType(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v18 = *a2;
        if (*a2 >= a2[1] || *v18 < 0)
        {
          v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v19 < 0)
            goto LABEL_58;
        }
        else
        {
          v19 = *v18;
          *a2 = v18 + 1;
        }
        v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19);
        if ((v28 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v24 = v28;
        result = CoreML::Specification::V5::TupleType::MergePartialFromCodedStream(v11, a2, v29);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 4u:
        if (v7 != 34)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 4)
        {
          v12 = (CoreML::Specification::V5::DictionaryType *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::ValueType::clear_type((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v12 = (CoreML::Specification::V5::DictionaryType *)operator new();
          CoreML::Specification::V5::DictionaryType::DictionaryType(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v20 = *a2;
        if (*a2 >= a2[1] || *v20 < 0)
        {
          v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v21 < 0)
            goto LABEL_58;
        }
        else
        {
          v21 = *v20;
          *a2 = v20 + 1;
        }
        v30 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v21);
        if ((v30 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v24 = v30;
        result = CoreML::Specification::V5::DictionaryType::MergePartialFromCodedStream(v12, a2, v31);
        if (!(_DWORD)result)
          return result;
LABEL_57:
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v24))
        {
          continue;
        }
LABEL_58:
        result = 0;
        break;
      default:
        goto LABEL_20;
    }
    return result;
  }
}

void sub_217FD5C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::ValueType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::V5::ValueType::ByteSizeLong(CoreML::Specification::V5::TensorType **this)
{
  uint64_t v2;
  uint64_t result;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = CoreML::Specification::V5::TensorType::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 2:
      v2 = CoreML::Specification::V5::ListType::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 3:
      v2 = CoreML::Specification::V5::TupleType::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 4:
      v2 = CoreML::Specification::V5::DictionaryType::ByteSizeLong(this[2]);
LABEL_7:
      result = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::V5::ValueType::IsInitialized(CoreML::Specification::V5::ValueType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::ValueType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.ValueType");
}

CoreML::Specification::V5::TensorType *CoreML::Specification::V5::TensorType::TensorType(CoreML::Specification::V5::TensorType *this)
{
  CoreML::Specification::V5::protobuf_MIL_2eproto *v2;

  *(_QWORD *)this = &off_24D91F4A0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  v2 = (CoreML::Specification::V5::protobuf_MIL_2eproto *)_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::Init((uint64_t)this + 48);
  *((_DWORD *)this + 14) = 0;
  if (this != (CoreML::Specification::V5::TensorType *)&CoreML::Specification::V5::_TensorType_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v2);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_217FD5E7C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map(v3);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)(v2 + 16));
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TensorType::~TensorType(CoreML::Specification::V5::TensorType *this)
{
  *(_QWORD *)this = &off_24D91F4A0;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map((_QWORD *)this + 6);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::TensorType::~TensorType(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::TensorType *CoreML::Specification::V5::TensorType::New(CoreML::Specification::V5::TensorType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TensorType *v3;

  v3 = (CoreML::Specification::V5::TensorType *)operator new();
  CoreML::Specification::V5::TensorType::TensorType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorType>(a2, v3);
  return v3;
}

void sub_217FD5F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4012099E73);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorType>);
  return result;
}

void CoreML::Specification::V5::TensorType::Clear(CoreML::Specification::V5::TensorType *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::V5::Dimension::clear_dimension(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::clear((uint64_t)this + 48);
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 9) = 0;
}

uint64_t CoreML::Specification::V5::TensorType::MergePartialFromCodedStream(CoreML::Specification::V5::TensorType *this, char **a2, unsigned int a3)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int TagFallback;
  char *v12;
  int v13;
  char *v14;
  unint64_t Varint64Fallback;
  CoreML::Specification::V5::Dimension *v16;
  char *v17;
  int VarintSizeAsIntFallback;
  char *v19;
  int v20;
  BOOL v21;
  int v22;
  char v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  int v28;
  _tc_google::protobuf::internal *p_p;
  unint64_t v30;
  _BOOL4 v31;
  BOOL v32;
  uint64_t Varint32Fallback;
  _QWORD v35[2];
  void *__p;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = (char *)this + 40;
  v6 = (char *)this + 48;
  v7 = (char *)this + 16;
  while (1)
  {
    v8 = *a2;
    if (*a2 >= a2[1])
      break;
    v9 = *v8;
    if (*v8 < 1)
      goto LABEL_7;
    *a2 = v8 + 1;
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) == 0)
      goto LABEL_25;
LABEL_8:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 8)
          goto LABEL_25;
        v12 = *a2;
        if (*a2 >= a2[1])
        {
          v13 = 0;
        }
        else
        {
          v13 = *v12;
          if ((*v12 & 0x80000000) == 0)
          {
            *a2 = v12 + 1;
            goto LABEL_62;
          }
        }
        Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v13);
        v13 = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
LABEL_62:
        *((_DWORD *)this + 20) = v13;
        break;
      case 2u:
        if (v10 != 16)
          goto LABEL_25;
        v14 = *a2;
        if (*a2 >= a2[1] || *v14 < 0)
        {
          Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v23 & 1) == 0)
            return 0;
        }
        else
        {
          Varint64Fallback = *v14;
          *a2 = v14 + 1;
        }
        *((_QWORD *)this + 9) = Varint64Fallback;
        break;
      case 3u:
        if (v10 != 26)
          goto LABEL_25;
        v16 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Dimension>::TypeHandler>((uint64_t)v7);
        v17 = *a2;
        if (*a2 >= a2[1] || *v17 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v17;
          *a2 = v17 + 1;
        }
        v24 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v24 & 0x8000000000000000) != 0)
          return 0;
        v26 = v24;
        if (!CoreML::Specification::V5::Dimension::MergePartialFromCodedStream(v16, a2, v25)
          || !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v26))
        {
          return 0;
        }
        break;
      case 4u:
        if (v10 != 34)
          goto LABEL_25;
        v35[0] = v5;
        v35[1] = v6;
        v37 = 0;
        v38 = 0;
        __p = 0;
        v39 = 0;
        v19 = *a2;
        if (*a2 >= a2[1] || *v19 < 0)
        {
          v20 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v20 < 0)
            goto LABEL_59;
        }
        else
        {
          v20 = *v19;
          *a2 = v19 + 1;
        }
        v27 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v20);
        v28 = v27;
        if ((v27 & 0x8000000000000000) != 0
          || !_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::MergePartialFromCodedStream((uint64_t)v35, (uint64_t)a2)|| !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v28))
        {
LABEL_59:
          v32 = 0;
          v22 = 6;
          goto LABEL_53;
        }
        if (v38 >= 0)
          p_p = (_tc_google::protobuf::internal *)&__p;
        else
          p_p = (_tc_google::protobuf::internal *)__p;
        if (v38 >= 0)
          v30 = HIBYTE(v38);
        else
          v30 = v37;
        v31 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, (const char *)v30, 0, (uint64_t)"CoreML.Specification.V5.TensorType.AttributesEntry.key");
        v32 = v31;
        if (v31)
          v22 = 0;
        else
          v22 = 6;
LABEL_53:
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        if (SHIBYTE(v38) < 0)
          operator delete(__p);
        if (!v32)
          goto LABEL_31;
        break;
      default:
        goto LABEL_25;
    }
LABEL_30:
    v22 = 0;
LABEL_31:
    if (v22)
      return 0;
  }
  v9 = 0;
LABEL_7:
  TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v9);
  v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
  if ((v10 & 0x100000000) != 0)
    goto LABEL_8;
LABEL_25:
  if ((_DWORD)v10)
    v21 = (v10 & 7) == 4;
  else
    v21 = 1;
  if (!v21)
  {
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v10, a3))return 0;
    goto LABEL_30;
  }
  return 1;
}

void sub_217FD631C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::V5::TensorType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  signed int v6;
  unint64_t v7;
  int v8;
  int i;
  unint64_t v10;
  uint64_t v12;
  _tc_google::protobuf::io::CodedOutputStream *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  const char *v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _tc_google::protobuf::io::CodedOutputStream *v25;
  uint64_t v26;
  _tc_google::protobuf::internal *v27;
  const char *v28;
  _QWORD v29[3];

  v5 = this;
  v6 = *(_DWORD *)(this + 80);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  v7 = *(_QWORD *)(v5 + 72);
  if (v7)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  v8 = *(_DWORD *)(v5 + 24);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v10 = **(_QWORD **)(v5 + 64);
  if (v10)
  {
    if (*((_BYTE *)a2 + 26))
    {
      if (v10 >= 2 && *((_BYTE *)a2 + 27) != 0)
      {
LABEL_31:
        v18 = operator new[]();
        _tc_google::protobuf::Map<std::string,std::string>::begin(v5 + 48, v29);
        v19 = v29[0];
        if (v29[0])
        {
          v20 = 0;
          do
          {
            *(_QWORD *)(v18 + 8 * v20) = *(_QWORD *)(v19 + 24);
            _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v29);
            ++v20;
            v19 = v29[0];
          }
          while (v29[0]);
        }
        else
        {
          v20 = 0;
        }
        v21 = 126 - 2 * __clz(v20);
        if (v20)
          v22 = v21;
        else
          v22 = 0;
        std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const**,false>(v18, (const void ***)(v18 + 8 * v20), (uint64_t)v29, v22, 1);
        if (v20)
        {
          v23 = 0;
          v24 = (uint64_t *)v18;
          do
          {
            v26 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*v24, *v24 + 24, *(_tc_google::protobuf::Arena **)(v5 + 40));
            if (v23 != v26)
            {
              if (v23)
                (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
              v23 = v26;
            }
            _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v23, a2, v25);
            v27 = (_tc_google::protobuf::internal *)*v24;
            if (*(char *)(*v24 + 23) < 0)
            {
              v27 = *(_tc_google::protobuf::internal **)v27;
              v28 = *(const char **)(*v24 + 8);
            }
            else
            {
              v28 = (const char *)*(unsigned __int8 *)(*v24 + 23);
            }
            _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 1, (uint64_t)"CoreML.Specification.V5.TensorType.AttributesEntry.key");
            ++v24;
            --v20;
          }
          while (v20);
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        }
        return MEMORY[0x219A199F0](v18, 0x60C8044C4A2DFLL);
      }
    }
    else if (v10 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
      goto LABEL_31;
    }
    this = _tc_google::protobuf::Map<std::string,std::string>::begin(v5 + 48, v29);
    v12 = 0;
    while (v29[0])
    {
      v14 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v29[0] + 24), *(_QWORD *)(v29[0] + 24) + 24, *(_tc_google::protobuf::Arena **)(v5 + 40));
      if (v12 != v14)
      {
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v12 = v14;
      }
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, v12, a2, v13);
      v15 = *(unsigned __int8 **)(v29[0] + 24);
      if ((char)v15[23] < 0)
      {
        v15 = *(unsigned __int8 **)v15;
        v16 = *(const char **)(*(_QWORD *)(v29[0] + 24) + 8);
      }
      else
      {
        v16 = (const char *)v15[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v15, v16, 1, (uint64_t)"CoreML.Specification.V5.TensorType.AttributesEntry.key");
      this = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v29);
    }
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  return this;
}

void sub_217FD6610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A199F0](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::TensorType::ByteSizeLong(CoreML::Specification::V5::TensorType *this)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD v15[3];

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::V5::Dimension::ByteSizeLong(*(CoreML::Specification::V5::Dimension **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = **((unsigned int **)this + 8);
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 48, v15);
  v7 = 0;
  v8 = v6 + v4;
  while (v15[0])
  {
    v9 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(*(_QWORD *)(v15[0] + 24), *(_QWORD *)(v15[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 5));
    if (v7 != (_DWORD *)v9)
    {
      if (v7)
        (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      v7 = (_DWORD *)v9;
    }
    v10 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(v7);
    v8 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v15);
  }
  if (v7)
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  v11 = *((_QWORD *)this + 9);
  if (v11)
    v8 += ((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6) + 1;
  v12 = *((_DWORD *)this + 20);
  if (v12)
  {
    if (v12 < 0)
      v13 = 11;
    else
      v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v8 += v13;
  }
  *((_DWORD *)this + 21) = v8;
  return v8;
}

void sub_217FD67F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::V5::TensorType::IsInitialized(CoreML::Specification::V5::TensorType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TensorType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TensorType");
}

CoreML::Specification::V5::TupleType *CoreML::Specification::V5::TupleType::TupleType(CoreML::Specification::V5::TupleType *this)
{
  *(_QWORD *)this = &off_24D91F538;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::V5::TupleType *)&CoreML::Specification::V5::_TupleType_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_217FD6890(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TupleType::~TupleType(CoreML::Specification::V5::TupleType *this)
{
  *(_QWORD *)this = &off_24D91F538;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::TupleType::~TupleType(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::TupleType *CoreML::Specification::V5::TupleType::New(CoreML::Specification::V5::TupleType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TupleType *v3;

  v3 = (CoreML::Specification::V5::TupleType *)operator new();
  CoreML::Specification::V5::TupleType::TupleType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TupleType>(a2, v3);
  return v3;
}

void sub_217FD6964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TupleType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TupleType>);
  return result;
}

uint64_t CoreML::Specification::V5::TupleType::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (uint64_t *)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::V5::ValueType::clear_type(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::V5::TupleType::MergePartialFromCodedStream(CoreML::Specification::V5::TupleType *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::ValueType *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  int v15;
  uint64_t result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::ValueType>::TypeHandler>((uint64_t)v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v15 = v14;
        result = CoreML::Specification::V5::ValueType::MergePartialFromCodedStream(v11, (_tc_google::protobuf::io::CodedInputStream *)a2);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v15))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::V5::TupleType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::TupleType::ByteSizeLong(CoreML::Specification::V5::TupleType *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::V5::ValueType::ByteSizeLong(*(CoreML::Specification::V5::ValueType **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::V5::TupleType::IsInitialized(CoreML::Specification::V5::TupleType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TupleType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TupleType");
}

CoreML::Specification::V5::ListType *CoreML::Specification::V5::ListType::ListType(CoreML::Specification::V5::ListType *this)
{
  *(_QWORD *)this = &off_24D91F5D0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::ListType *)&CoreML::Specification::V5::_ListType_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_217FD6C5C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::ListType::~ListType(CoreML::Specification::V5::ListType *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D91F5D0;
  if (this != (CoreML::Specification::V5::ListType *)&CoreML::Specification::V5::_ListType_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::ListType::~ListType(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::ListType *CoreML::Specification::V5::ListType::New(CoreML::Specification::V5::ListType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::ListType *v3;

  v3 = (CoreML::Specification::V5::ListType *)operator new();
  CoreML::Specification::V5::ListType::ListType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::ListType>(a2, v3);
  return v3;
}

void sub_217FD6D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::ListType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::ListType>);
  return result;
}

uint64_t CoreML::Specification::V5::ListType::Clear(CoreML::Specification::V5::ListType *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::V5::ListType::MergePartialFromCodedStream(CoreML::Specification::V5::ListType *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::ValueType *v10;
  char *v11;
  int v12;
  CoreML::Specification::V5::Dimension *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  unint64_t v17;
  int v18;
  uint64_t result;
  unint64_t v20;
  unsigned int v21;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_24;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_24;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_24;
      v13 = (CoreML::Specification::V5::Dimension *)*((_QWORD *)this + 3);
      if (!v13)
      {
        v13 = (CoreML::Specification::V5::Dimension *)operator new();
        CoreML::Specification::V5::Dimension::Dimension(v13);
        *((_QWORD *)this + 3) = v13;
      }
      v14 = *a2;
      if (*a2 >= a2[1] || *v14 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v14;
        *a2 = v14 + 1;
      }
      v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v20 & 0x8000000000000000) != 0)
        return 0;
      v18 = v20;
      result = CoreML::Specification::V5::Dimension::MergePartialFromCodedStream(v13, a2, v21);
      if (!(_DWORD)result)
        return result;
LABEL_37:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18))return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::V5::ValueType *)operator new();
        CoreML::Specification::V5::ValueType::ValueType(v10);
        *((_QWORD *)this + 2) = v10;
      }
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        v12 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v12 < 0)
          return 0;
      }
      else
      {
        v12 = *v11;
        *a2 = v11 + 1;
      }
      v17 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
      if ((v17 & 0x8000000000000000) != 0)
        return 0;
      v18 = v17;
      result = CoreML::Specification::V5::ValueType::MergePartialFromCodedStream(v10, (_tc_google::protobuf::io::CodedInputStream *)a2);
      if (!(_DWORD)result)
        return result;
      goto LABEL_37;
    }
LABEL_24:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_217FD6FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::V5::ListType::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (this != &CoreML::Specification::V5::_ListType_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::ListType::ByteSizeLong(CoreML::Specification::V5::ListType *this)
{
  CoreML::Specification::V5::ValueType *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::V5::Dimension *v5;
  unint64_t v6;

  if (this == (CoreML::Specification::V5::ListType *)&CoreML::Specification::V5::_ListType_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::V5::ValueType::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::V5::Dimension *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::V5::Dimension::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void CoreML::Specification::V5::Dimension::MergeFrom(CoreML::Specification::V5::Dimension *this, const CoreML::Specification::V5::Dimension *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  CoreML::Specification::V5::Dimension_ConstantDimension *v8;
  uint64_t *v9;
  CoreML::Specification::V5::Dimension_UnknownDimension *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 != 2)
  {
    if (v5 != 1)
      return;
    if (*((_DWORD *)this + 7) == 1)
    {
      v6 = (uint64_t *)*((_QWORD *)this + 2);
    }
    else
    {
      CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v6 = (uint64_t *)operator new();
      v8 = CoreML::Specification::V5::Dimension_ConstantDimension::Dimension_ConstantDimension((CoreML::Specification::V5::Dimension_ConstantDimension *)v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) != 1)
      {
        CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v8);
        v9 = &CoreML::Specification::V5::_Dimension_ConstantDimension_default_instance_;
        goto LABEL_14;
      }
    }
    v9 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_14:
    v12 = v9[1];
    if ((v12 & 1) != 0)
      _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v6 + 1, v12 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v9[2];
    if (v13)
      v6[2] = v13;
    return;
  }
  if (*((_DWORD *)this + 7) == 2)
  {
    v7 = *((_QWORD *)this + 2);
  }
  else
  {
    CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
    *((_DWORD *)this + 7) = 2;
    v7 = operator new();
    v10 = CoreML::Specification::V5::Dimension_UnknownDimension::Dimension_UnknownDimension((CoreML::Specification::V5::Dimension_UnknownDimension *)v7);
    *((_QWORD *)this + 2) = v7;
    if (*((_DWORD *)a2 + 7) != 2)
    {
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v10);
      v11 = &CoreML::Specification::V5::_Dimension_UnknownDimension_default_instance_;
      goto LABEL_19;
    }
  }
  v11 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_19:
  v14 = v11[1];
  if ((v14 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v7 + 8), v14 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)v11 + 16))
    *(_BYTE *)(v7 + 16) = 1;
}

void sub_217FD7250(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::ListType::IsInitialized(CoreML::Specification::V5::ListType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::ListType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.ListType");
}

CoreML::Specification::V5::DictionaryType *CoreML::Specification::V5::DictionaryType::DictionaryType(CoreML::Specification::V5::DictionaryType *this)
{
  *(_QWORD *)this = &off_24D91F668;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::DictionaryType *)&CoreML::Specification::V5::_DictionaryType_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_217FD72F0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::DictionaryType::~DictionaryType(CoreML::Specification::V5::DictionaryType *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D91F668;
  if (this != (CoreML::Specification::V5::DictionaryType *)&CoreML::Specification::V5::_DictionaryType_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::DictionaryType::~DictionaryType(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::DictionaryType *CoreML::Specification::V5::DictionaryType::New(CoreML::Specification::V5::DictionaryType *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::DictionaryType *v3;

  v3 = (CoreML::Specification::V5::DictionaryType *)operator new();
  CoreML::Specification::V5::DictionaryType::DictionaryType(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::DictionaryType>(a2, v3);
  return v3;
}

void sub_217FD73E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::DictionaryType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::DictionaryType>);
  return result;
}

uint64_t CoreML::Specification::V5::DictionaryType::Clear(CoreML::Specification::V5::DictionaryType *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::V5::DictionaryType::MergePartialFromCodedStream(CoreML::Specification::V5::DictionaryType *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::ValueType *v10;
  char *v11;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  int v15;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_21;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_21;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_21;
      v10 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = (CoreML::Specification::V5::ValueType *)operator new();
        CoreML::Specification::V5::ValueType::ValueType(v10);
        *((_QWORD *)this + 3) = v10;
      }
LABEL_18:
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v11;
        *a2 = v11 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v15 = v14;
        result = CoreML::Specification::V5::ValueType::MergePartialFromCodedStream(v10, (_tc_google::protobuf::io::CodedInputStream *)a2);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v15))
        {
          continue;
        }
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::V5::ValueType *)operator new();
        CoreML::Specification::V5::ValueType::ValueType(v10);
        *((_QWORD *)this + 2) = v10;
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_217FD75FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::V5::DictionaryType::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (this != &CoreML::Specification::V5::_DictionaryType_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::DictionaryType::ByteSizeLong(CoreML::Specification::V5::DictionaryType *this)
{
  CoreML::Specification::V5::ValueType *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::V5::ValueType *v5;
  uint64_t v6;

  if (this == (CoreML::Specification::V5::DictionaryType *)&CoreML::Specification::V5::_DictionaryType_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::V5::ValueType::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::V5::ValueType::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::V5::DictionaryType::IsInitialized(CoreML::Specification::V5::DictionaryType *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::DictionaryType::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.DictionaryType");
}

CoreML::Specification::V5::Dimension_ConstantDimension *CoreML::Specification::V5::Dimension_ConstantDimension::Dimension_ConstantDimension(CoreML::Specification::V5::Dimension_ConstantDimension *this)
{
  *(_QWORD *)this = &off_24D91F700;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::Dimension_ConstantDimension *)&CoreML::Specification::V5::_Dimension_ConstantDimension_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_217FD7790(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::Dimension_ConstantDimension::~Dimension_ConstantDimension(CoreML::Specification::V5::Dimension_ConstantDimension *this)
{
  *(_QWORD *)this = &off_24D91F700;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D91F700;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::Dimension_ConstantDimension *CoreML::Specification::V5::Dimension_ConstantDimension::New(CoreML::Specification::V5::Dimension_ConstantDimension *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Dimension_ConstantDimension *v3;

  v3 = (CoreML::Specification::V5::Dimension_ConstantDimension *)operator new();
  CoreML::Specification::V5::Dimension_ConstantDimension::Dimension_ConstantDimension(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Dimension_ConstantDimension>(a2, v3);
  return v3;
}

void sub_217FD7864(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Dimension_ConstantDimension>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Dimension_ConstantDimension>);
  return result;
}

uint64_t CoreML::Specification::V5::Dimension_ConstantDimension::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::V5::Dimension_ConstantDimension::MergePartialFromCodedStream(CoreML::Specification::V5::Dimension_ConstantDimension *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  char *v11;
  char v12;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        *((_QWORD *)this + 2) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v12 & 1) == 0)
          return 0;
      }
      else
      {
        *((_QWORD *)this + 2) = *v11;
        *a2 = v11 + 1;
      }
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::V5::Dimension_ConstantDimension::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unint64_t v5;

  v5 = *(_QWORD *)(this + 16);
  if (v5)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v5, a2, a4);
  return this;
}

unint64_t CoreML::Specification::V5::Dimension_ConstantDimension::ByteSizeLong(CoreML::Specification::V5::Dimension_ConstantDimension *this)
{
  unint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    v1 = ((9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 6) = v1;
  return v1;
}

std::string *CoreML::Specification::V5::Dimension_ConstantDimension::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  return this;
}

uint64_t CoreML::Specification::V5::Dimension_ConstantDimension::IsInitialized(CoreML::Specification::V5::Dimension_ConstantDimension *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Dimension_ConstantDimension::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Dimension.ConstantDimension");
}

CoreML::Specification::V5::Dimension_UnknownDimension *CoreML::Specification::V5::Dimension_UnknownDimension::Dimension_UnknownDimension(CoreML::Specification::V5::Dimension_UnknownDimension *this)
{
  *(_QWORD *)this = &off_24D91F798;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::Dimension_UnknownDimension *)&CoreML::Specification::V5::_Dimension_UnknownDimension_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_BYTE *)this + 16) = 0;
  *((_DWORD *)this + 5) = 0;
  return this;
}

void sub_217FD7A80(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::Dimension_UnknownDimension::~Dimension_UnknownDimension(CoreML::Specification::V5::Dimension_UnknownDimension *this)
{
  *(_QWORD *)this = &off_24D91F798;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D91F798;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::Dimension_UnknownDimension *CoreML::Specification::V5::Dimension_UnknownDimension::New(CoreML::Specification::V5::Dimension_UnknownDimension *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Dimension_UnknownDimension *v3;

  v3 = (CoreML::Specification::V5::Dimension_UnknownDimension *)operator new();
  CoreML::Specification::V5::Dimension_UnknownDimension::Dimension_UnknownDimension(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Dimension_UnknownDimension>(a2, v3);
  return v3;
}

void sub_217FD7B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Dimension_UnknownDimension>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Dimension_UnknownDimension>);
  return result;
}

uint64_t CoreML::Specification::V5::Dimension_UnknownDimension::Clear(uint64_t this)
{
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::V5::Dimension_UnknownDimension::MergePartialFromCodedStream(CoreML::Specification::V5::Dimension_UnknownDimension *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  char *v11;
  unint64_t Varint64Fallback;
  char v13;

  do
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v13 & 1) == 0)
          return 0;
      }
      else
      {
        Varint64Fallback = *v11;
        *a2 = v11 + 1;
      }
      *((_BYTE *)this + 16) = Varint64Fallback != 0;
    }
    if ((_DWORD)v7)
      v10 = (v7 & 7) == 4;
    else
      v10 = 1;
    if (v10)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::V5::Dimension_UnknownDimension::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(_BYTE *)(this + 16))
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(1, 1u, a2, a4);
  return this;
}

uint64_t CoreML::Specification::V5::Dimension_UnknownDimension::ByteSizeLong(CoreML::Specification::V5::Dimension_UnknownDimension *this)
{
  uint64_t v1;

  v1 = 2 * *((unsigned __int8 *)this + 16);
  *((_DWORD *)this + 5) = v1;
  return v1;
}

std::string *CoreML::Specification::V5::Dimension_UnknownDimension::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    v3->__r_.__value_.__s.__data_[16] = 1;
  return this;
}

uint64_t CoreML::Specification::V5::Dimension_UnknownDimension::IsInitialized(CoreML::Specification::V5::Dimension_UnknownDimension *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Dimension_UnknownDimension::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Dimension.UnknownDimension");
}

CoreML::Specification::V5::Dimension *CoreML::Specification::V5::Dimension::Dimension(CoreML::Specification::V5::Dimension *this)
{
  *(_QWORD *)this = &off_24D91F830;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::Dimension *)&CoreML::Specification::V5::_Dimension_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_217FD7D60(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::Dimension::~Dimension(CoreML::Specification::V5::Dimension *this)
{
  *(_QWORD *)this = &off_24D91F830;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::Dimension::~Dimension(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::V5::Dimension::clear_dimension(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::V5::Dimension *CoreML::Specification::V5::Dimension::New(CoreML::Specification::V5::Dimension *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Dimension *v3;

  v3 = (CoreML::Specification::V5::Dimension *)operator new();
  CoreML::Specification::V5::Dimension::Dimension(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Dimension>(a2, v3);
  return v3;
}

void sub_217FD7E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Dimension>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Dimension>);
  return result;
}

uint64_t CoreML::Specification::V5::Dimension::MergePartialFromCodedStream(CoreML::Specification::V5::Dimension *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::Dimension_ConstantDimension *v10;
  CoreML::Specification::V5::Dimension_UnknownDimension *v11;
  char *v13;
  int v14;
  char *v15;
  int VarintSizeAsIntFallback;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t result;
  unint64_t v21;
  unsigned int v22;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_18;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_18;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_18;
      if (*((_DWORD *)this + 7) == 2)
      {
        v11 = (CoreML::Specification::V5::Dimension_UnknownDimension *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        v11 = (CoreML::Specification::V5::Dimension_UnknownDimension *)operator new();
        CoreML::Specification::V5::Dimension_UnknownDimension::Dimension_UnknownDimension(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v15 = *a2;
      if (*a2 >= a2[1] || *v15 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v15;
        *a2 = v15 + 1;
      }
      v21 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v21 & 0x8000000000000000) != 0)
        return 0;
      v19 = v21;
      result = CoreML::Specification::V5::Dimension_UnknownDimension::MergePartialFromCodedStream(v11, a2, v22);
      if (!(_DWORD)result)
        return result;
LABEL_39:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19))return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      if (*((_DWORD *)this + 7) == 1)
      {
        v10 = (CoreML::Specification::V5::Dimension_ConstantDimension *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v10 = (CoreML::Specification::V5::Dimension_ConstantDimension *)operator new();
        CoreML::Specification::V5::Dimension_ConstantDimension::Dimension_ConstantDimension(v10);
        *((_QWORD *)this + 2) = v10;
      }
      v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        v14 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v14 < 0)
          return 0;
      }
      else
      {
        v14 = *v13;
        *a2 = v13 + 1;
      }
      v17 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v14);
      if ((v17 & 0x8000000000000000) != 0)
        return 0;
      v19 = v17;
      result = CoreML::Specification::V5::Dimension_ConstantDimension::MergePartialFromCodedStream(v10, a2, v18);
      if (!(_DWORD)result)
        return result;
      goto LABEL_39;
    }
LABEL_18:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_217FD80DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Dimension::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

unint64_t CoreML::Specification::V5::Dimension::ByteSizeLong(CoreML::Specification::V5::Dimension *this)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *((_DWORD *)this + 7);
  if (v1 == 2)
  {
    v4 = *((_QWORD *)this + 2);
    v3 = 2 * *(unsigned __int8 *)(v4 + 16);
    *(_DWORD *)(v4 + 20) = v3;
  }
  else
  {
    if (v1 != 1)
    {
      v5 = 0;
      goto LABEL_9;
    }
    v2 = *((_QWORD *)this + 2);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
      v3 = ((9 * (__clz(v3 | 1) ^ 0x3F) + 73) >> 6) + 1;
    *(_DWORD *)(v2 + 24) = v3;
  }
  v5 = v3 + 2;
LABEL_9:
  *((_DWORD *)this + 6) = v5;
  return v5;
}

uint64_t CoreML::Specification::V5::Dimension::IsInitialized(CoreML::Specification::V5::Dimension *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Dimension::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Dimension");
}

CoreML::Specification::V5::Value_ImmediateValue *CoreML::Specification::V5::Value_ImmediateValue::Value_ImmediateValue(CoreML::Specification::V5::Value_ImmediateValue *this)
{
  *(_QWORD *)this = &off_24D91F8C8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::Value_ImmediateValue *)&CoreML::Specification::V5::_Value_ImmediateValue_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_217FD8248(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TensorValue::MergeFrom(CoreML::Specification::V5::TensorValue *this, const CoreML::Specification::V5::TensorValue *a2)
{
  uint64_t v4;
  CoreML::Specification::V5::TensorValue_RepeatedFloats *v5;
  CoreML::Specification::V5::TensorValue_RepeatedInts *v6;
  CoreML::Specification::V5::TensorValue_RepeatedBools *v7;
  CoreML::Specification::V5::TensorValue_RepeatedStrings *v8;
  CoreML::Specification::V5::TensorValue_RepeatedLongInts *v9;
  CoreML::Specification::V5::TensorValue_RepeatedDoubles *v10;
  CoreML::Specification::V5::TensorValue_RepeatedBytes *v11;
  CoreML::Specification::V5::TensorValue_RepeatedFloats *v12;
  uint64_t *v13;
  CoreML::Specification::V5::TensorValue_RepeatedInts *v14;
  CoreML::Specification::V5::TensorValue_RepeatedBools *v15;
  const CoreML::Specification::V5::TensorValue_RepeatedBools *v16;
  CoreML::Specification::V5::TensorValue_RepeatedStrings *v17;
  const CoreML::Specification::V5::TensorValue_RepeatedStrings *v18;
  CoreML::Specification::V5::TensorValue_RepeatedLongInts *v19;
  uint64_t *v20;
  CoreML::Specification::V5::TensorValue_RepeatedDoubles *v21;
  CoreML::Specification::V5::TensorValue_RepeatedBytes *v22;
  const CoreML::Specification::V5::TensorValue_RepeatedBytes *v23;
  uint64_t *v24;
  uint64_t *v25;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        v5 = (CoreML::Specification::V5::TensorValue_RepeatedFloats *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v5 = (CoreML::Specification::V5::TensorValue_RepeatedFloats *)operator new();
        v12 = CoreML::Specification::V5::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(v5);
        *((_QWORD *)this + 2) = v5;
        if (*((_DWORD *)a2 + 7) != 1)
        {
          CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v12);
          v13 = &CoreML::Specification::V5::_TensorValue_RepeatedFloats_default_instance_;
          goto LABEL_33;
        }
      }
      v13 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_33:
      v24 = (uint64_t *)v5;
      goto LABEL_34;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        v6 = (CoreML::Specification::V5::TensorValue_RepeatedInts *)*((_QWORD *)this + 2);
LABEL_21:
        v13 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_36;
      }
      CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v6 = (CoreML::Specification::V5::TensorValue_RepeatedInts *)operator new();
      v14 = CoreML::Specification::V5::TensorValue_RepeatedInts::TensorValue_RepeatedInts(v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) == 2)
        goto LABEL_21;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v14);
      v13 = &CoreML::Specification::V5::_TensorValue_RepeatedInts_default_instance_;
LABEL_36:
      v24 = (uint64_t *)v6;
LABEL_34:
      CoreML::Specification::V5::TensorValue_RepeatedFloats::MergeFrom(v24, (const CoreML::Specification::V5::TensorValue_RepeatedFloats *)v13);
      return;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        v7 = (CoreML::Specification::V5::TensorValue_RepeatedBools *)*((_QWORD *)this + 2);
LABEL_23:
        v16 = (const CoreML::Specification::V5::TensorValue_RepeatedBools *)*((_QWORD *)a2 + 2);
        goto LABEL_38;
      }
      CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v7 = (CoreML::Specification::V5::TensorValue_RepeatedBools *)operator new();
      v15 = CoreML::Specification::V5::TensorValue_RepeatedBools::TensorValue_RepeatedBools(v7);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 3)
        goto LABEL_23;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v15);
      v16 = (const CoreML::Specification::V5::TensorValue_RepeatedBools *)&CoreML::Specification::V5::_TensorValue_RepeatedBools_default_instance_;
LABEL_38:
      CoreML::Specification::V5::TensorValue_RepeatedBools::MergeFrom((uint64_t *)v7, v16);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        v8 = (CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((_QWORD *)this + 2);
LABEL_25:
        v18 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((_QWORD *)a2 + 2);
        goto LABEL_40;
      }
      CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v8 = (CoreML::Specification::V5::TensorValue_RepeatedStrings *)operator new();
      v17 = CoreML::Specification::V5::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(v8);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_25;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v17);
      v18 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)&CoreML::Specification::V5::_TensorValue_RepeatedStrings_default_instance_;
LABEL_40:
      CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom((std::string *)v8, v18);
      return;
    case 5:
      if (*((_DWORD *)this + 7) == 5)
      {
        v9 = (CoreML::Specification::V5::TensorValue_RepeatedLongInts *)*((_QWORD *)this + 2);
LABEL_27:
        v20 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_42;
      }
      CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 5;
      v9 = (CoreML::Specification::V5::TensorValue_RepeatedLongInts *)operator new();
      v19 = CoreML::Specification::V5::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(v9);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 5)
        goto LABEL_27;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v19);
      v20 = &CoreML::Specification::V5::_TensorValue_RepeatedLongInts_default_instance_;
LABEL_42:
      v25 = (uint64_t *)v9;
      goto LABEL_43;
    case 6:
      if (*((_DWORD *)this + 7) == 6)
      {
        v10 = (CoreML::Specification::V5::TensorValue_RepeatedDoubles *)*((_QWORD *)this + 2);
LABEL_29:
        v20 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_45;
      }
      CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 6;
      v10 = (CoreML::Specification::V5::TensorValue_RepeatedDoubles *)operator new();
      v21 = CoreML::Specification::V5::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(v10);
      *((_QWORD *)this + 2) = v10;
      if (*((_DWORD *)a2 + 7) == 6)
        goto LABEL_29;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v21);
      v20 = &CoreML::Specification::V5::_TensorValue_RepeatedDoubles_default_instance_;
LABEL_45:
      v25 = (uint64_t *)v10;
LABEL_43:
      CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(v25, (const CoreML::Specification::GLMRegressor_DoubleArray *)v20);
      return;
    case 7:
      if (*((_DWORD *)this + 7) == 7)
      {
        v11 = (CoreML::Specification::V5::TensorValue_RepeatedBytes *)*((_QWORD *)this + 2);
LABEL_31:
        v23 = (const CoreML::Specification::V5::TensorValue_RepeatedBytes *)*((_QWORD *)a2 + 2);
        goto LABEL_47;
      }
      CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 7;
      v11 = (CoreML::Specification::V5::TensorValue_RepeatedBytes *)operator new();
      v22 = CoreML::Specification::V5::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(v11);
      *((_QWORD *)this + 2) = v11;
      if (*((_DWORD *)a2 + 7) == 7)
        goto LABEL_31;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v22);
      v23 = (const CoreML::Specification::V5::TensorValue_RepeatedBytes *)&CoreML::Specification::V5::_TensorValue_RepeatedBytes_default_instance_;
LABEL_47:
      CoreML::Specification::V5::TensorValue_RepeatedBytes::MergeFrom(v11, v23);
      return;
    default:
      return;
  }
}

void sub_217FD8624(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::TupleValue::MergeFrom(uint64_t this, const CoreML::Specification::V5::TupleValue *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  CoreML::Specification::V5::Value **v6;
  unsigned int *v7;
  int v8;
  int *v9;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(this + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::V5::Value **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Value>::TypeHandler>(v3 + 16, (CoreML::Specification::V5::Value **)v7, v6, v5, **(_DWORD **)(v3 + 32) - *(_DWORD *)(v3 + 24));
    v8 = *(_DWORD *)(v3 + 24) + v5;
    *(_DWORD *)(v3 + 24) = v8;
    v9 = *(int **)(v3 + 32);
    if (*v9 < v8)
      *v9 = v8;
  }
  return this;
}

std::string *CoreML::Specification::V5::DictionaryValue::MergeFrom(std::string *this, const CoreML::Specification::V5::DictionaryValue *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  CoreML::Specification::V5::DictionaryValue_KeyValuePair **v6;
  unsigned int *v7;
  int v8;
  int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::V5::DictionaryValue_KeyValuePair **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::DictionaryValue_KeyValuePair>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

void CoreML::Specification::V5::Value_ImmediateValue::~Value_ImmediateValue(CoreML::Specification::V5::Value_ImmediateValue *this)
{
  *(_QWORD *)this = &off_24D91F8C8;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::V5::Value_ImmediateValue::clear_value((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::Value_ImmediateValue::~Value_ImmediateValue(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::V5::Value_ImmediateValue::clear_value(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::V5::Value_ImmediateValue *CoreML::Specification::V5::Value_ImmediateValue::New(CoreML::Specification::V5::Value_ImmediateValue *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Value_ImmediateValue *v3;

  v3 = (CoreML::Specification::V5::Value_ImmediateValue *)operator new();
  CoreML::Specification::V5::Value_ImmediateValue::Value_ImmediateValue(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Value_ImmediateValue>(a2, v3);
  return v3;
}

void sub_217FD88DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Value_ImmediateValue>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Value_ImmediateValue>);
  return result;
}

uint64_t CoreML::Specification::V5::Value_ImmediateValue::MergePartialFromCodedStream(CoreML::Specification::V5::Value_ImmediateValue *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::TensorValue *v9;
  CoreML::Specification::V5::TupleValue *v10;
  CoreML::Specification::V5::ListValue *v11;
  CoreML::Specification::V5::DictionaryValue *v12;
  BOOL v13;
  char *v14;
  int VarintSizeAsIntFallback;
  char *v16;
  int v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t result;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;

  while (2)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_20:
      if ((_DWORD)v7)
        v13 = (v7 & 7) == 4;
      else
        v13 = 1;
      if (v13)
        return 1;
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)goto LABEL_58;
    }
    v6 = 0;
LABEL_6:
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_20;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (CoreML::Specification::V5::TensorValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::V5::TensorValue *)operator new();
          CoreML::Specification::V5::TensorValue::TensorValue(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v14 = *a2;
        if (*a2 >= a2[1] || *v14 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_58;
        }
        else
        {
          VarintSizeAsIntFallback = *v14;
          *a2 = v14 + 1;
        }
        v22 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v22 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v24 = v22;
        result = CoreML::Specification::V5::TensorValue::MergePartialFromCodedStream(v9, a2, v23);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 2u:
        if (v7 != 18)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 2)
        {
          v10 = (CoreML::Specification::V5::TupleValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v10 = (CoreML::Specification::V5::TupleValue *)operator new();
          CoreML::Specification::V5::TupleValue::TupleValue(v10);
          *((_QWORD *)this + 2) = v10;
        }
        v16 = *a2;
        if (*a2 >= a2[1] || *v16 < 0)
        {
          v17 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v17 < 0)
            goto LABEL_58;
        }
        else
        {
          v17 = *v16;
          *a2 = v16 + 1;
        }
        v26 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17);
        if ((v26 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v24 = v26;
        result = CoreML::Specification::V5::TupleValue::MergePartialFromCodedStream(v10, a2, v27);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 3u:
        if (v7 != 26)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 3)
        {
          v11 = (CoreML::Specification::V5::ListValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v11 = (CoreML::Specification::V5::ListValue *)operator new();
          CoreML::Specification::V5::ListValue::ListValue(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v18 = *a2;
        if (*a2 >= a2[1] || *v18 < 0)
        {
          v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v19 < 0)
            goto LABEL_58;
        }
        else
        {
          v19 = *v18;
          *a2 = v18 + 1;
        }
        v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19);
        if ((v28 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v24 = v28;
        result = CoreML::Specification::V5::ListValue::MergePartialFromCodedStream(v11, a2, v29);
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
      case 4u:
        if (v7 != 34)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 4)
        {
          v12 = (CoreML::Specification::V5::DictionaryValue *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::Value_ImmediateValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v12 = (CoreML::Specification::V5::DictionaryValue *)operator new();
          CoreML::Specification::V5::DictionaryValue::DictionaryValue(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v20 = *a2;
        if (*a2 >= a2[1] || *v20 < 0)
        {
          v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v21 < 0)
            goto LABEL_58;
        }
        else
        {
          v21 = *v20;
          *a2 = v20 + 1;
        }
        v30 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v21);
        if ((v30 & 0x8000000000000000) != 0)
          goto LABEL_58;
        v24 = v30;
        result = CoreML::Specification::V5::DictionaryValue::MergePartialFromCodedStream(v12, a2, v31);
        if (!(_DWORD)result)
          return result;
LABEL_57:
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v24))
        {
          continue;
        }
LABEL_58:
        result = 0;
        break;
      default:
        goto LABEL_20;
    }
    return result;
  }
}

void sub_217FD8CBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Value_ImmediateValue::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::V5::Value_ImmediateValue::ByteSizeLong(CoreML::Specification::V5::TensorValue **this)
{
  uint64_t v2;
  uint64_t result;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = CoreML::Specification::V5::TensorValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 2:
      v2 = CoreML::Specification::V5::TupleValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 3:
      v2 = CoreML::Specification::V5::ListValue::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 4:
      v2 = CoreML::Specification::V5::DictionaryValue::ByteSizeLong(this[2]);
LABEL_7:
      result = v2 + ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

void CoreML::Specification::V5::Value_ImmediateValue::MergeFrom(CoreML::Specification::V5::Value_ImmediateValue *this, const CoreML::Specification::V5::Value_ImmediateValue *a2)
{
  uint64_t v4;
  CoreML::Specification::V5::TensorValue *v5;
  CoreML::Specification::V5::ListValue *v6;
  CoreML::Specification::V5::DictionaryValue *v7;
  CoreML::Specification::V5::TupleValue *v8;
  CoreML::Specification::V5::ListValue *v9;
  uint64_t *v10;
  CoreML::Specification::V5::DictionaryValue *v11;
  const CoreML::Specification::V5::DictionaryValue *v12;
  CoreML::Specification::V5::TensorValue *v13;
  const CoreML::Specification::V5::TensorValue *v14;
  CoreML::Specification::V5::TupleValue *v15;
  uint64_t v16;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        v5 = (CoreML::Specification::V5::TensorValue *)*((_QWORD *)this + 2);
LABEL_17:
        v14 = (const CoreML::Specification::V5::TensorValue *)*((_QWORD *)a2 + 2);
        goto LABEL_26;
      }
      CoreML::Specification::V5::Value_ImmediateValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v5 = (CoreML::Specification::V5::TensorValue *)operator new();
      v13 = CoreML::Specification::V5::TensorValue::TensorValue(v5);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
        goto LABEL_17;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v13);
      v14 = (const CoreML::Specification::V5::TensorValue *)&CoreML::Specification::V5::_TensorValue_default_instance_;
LABEL_26:
      CoreML::Specification::V5::TensorValue::MergeFrom(v5, v14);
      return;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        v8 = (CoreML::Specification::V5::TupleValue *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::V5::Value_ImmediateValue::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        v8 = (CoreML::Specification::V5::TupleValue *)operator new();
        v15 = CoreML::Specification::V5::TupleValue::TupleValue(v8);
        *((_QWORD *)this + 2) = v8;
        if (*((_DWORD *)a2 + 7) != 2)
        {
          CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v15);
          v10 = &CoreML::Specification::V5::_TupleValue_default_instance_;
          goto LABEL_28;
        }
      }
      v10 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_28:
      v16 = (uint64_t)v8;
      goto LABEL_22;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        v6 = (CoreML::Specification::V5::ListValue *)*((_QWORD *)this + 2);
LABEL_13:
        v10 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_21;
      }
      CoreML::Specification::V5::Value_ImmediateValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v6 = (CoreML::Specification::V5::ListValue *)operator new();
      v9 = CoreML::Specification::V5::ListValue::ListValue(v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) == 3)
        goto LABEL_13;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v9);
      v10 = &CoreML::Specification::V5::_ListValue_default_instance_;
LABEL_21:
      v16 = (uint64_t)v6;
LABEL_22:
      CoreML::Specification::V5::TupleValue::MergeFrom(v16, (const CoreML::Specification::V5::TupleValue *)v10);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        v7 = (CoreML::Specification::V5::DictionaryValue *)*((_QWORD *)this + 2);
LABEL_15:
        v12 = (const CoreML::Specification::V5::DictionaryValue *)*((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
      CoreML::Specification::V5::Value_ImmediateValue::clear_value((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v7 = (CoreML::Specification::V5::DictionaryValue *)operator new();
      v11 = CoreML::Specification::V5::DictionaryValue::DictionaryValue(v7);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_15;
      CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v11);
      v12 = (const CoreML::Specification::V5::DictionaryValue *)&CoreML::Specification::V5::_DictionaryValue_default_instance_;
LABEL_24:
      CoreML::Specification::V5::DictionaryValue::MergeFrom((std::string *)v7, v12);
      return;
    default:
      return;
  }
}

void sub_217FD9088(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Value_ImmediateValue::IsInitialized(CoreML::Specification::V5::Value_ImmediateValue *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Value_ImmediateValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Value.ImmediateValue");
}

CoreML::Specification::V5::Value_FileValue *CoreML::Specification::V5::Value_FileValue::Value_FileValue(CoreML::Specification::V5::Value_FileValue *this)
{
  *(_QWORD *)this = &off_24D91F960;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::Value_FileValue *)&CoreML::Specification::V5::_Value_FileValue_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_217FD9138(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Value_FileValue::SharedDtor(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x219A19A08);
  }
  return this;
}

void CoreML::Specification::V5::Value_FileValue::~Value_FileValue(CoreML::Specification::V5::Value_FileValue *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D91F960;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::V5::Value_FileValue::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D91F960;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::V5::Value_FileValue::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::Value_FileValue *CoreML::Specification::V5::Value_FileValue::New(CoreML::Specification::V5::Value_FileValue *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Value_FileValue *v3;

  v3 = (CoreML::Specification::V5::Value_FileValue *)operator new();
  CoreML::Specification::V5::Value_FileValue::Value_FileValue(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Value_FileValue>(a2, v3);
  return v3;
}

void sub_217FD9284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Value_FileValue>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Value_FileValue>);
  return result;
}

uint64_t CoreML::Specification::V5::Value_FileValue::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  *(_QWORD *)(this + 24) = 0;
  return this;
}

BOOL CoreML::Specification::V5::Value_FileValue::MergePartialFromCodedStream(CoreML::Specification::V5::Value_FileValue *this, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  _BOOL8 result;
  std::string *v13;
  const char *size;
  char *v15;
  char v17;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_23;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_23;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 16)
          goto LABEL_23;
        v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          *((_QWORD *)this + 3) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v17 & 1) == 0)
            return 0;
        }
        else
        {
          *((_QWORD *)this + 3) = *v15;
          *a2 = v15 + 1;
        }
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11);
      if (!result)
        return result;
      v13 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = (std::string *)v13->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v13, size, 0, (uint64_t)"CoreML.Specification.V5.Value.FileValue.fileName"))return 0;
    }
LABEL_23:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::V5::Value_FileValue::SerializeWithCachedSizes(CoreML::Specification::V5::Value_FileValue *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  const char *v7;
  unint64_t v8;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(const char **)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  v7 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v7, 1, (uint64_t)"CoreML.Specification.V5.Value.FileValue.fileName");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v8 = *((_QWORD *)this + 3);
  if (v8)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v8, a2, a4);
  return result;
}

uint64_t CoreML::Specification::V5::Value_FileValue::ByteSizeLong(CoreML::Specification::V5::Value_FileValue *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  if (v5)
    v4 += ((9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void CoreML::Specification::V5::Value_FileValue::MergeFrom(CoreML::Specification::V5::Value_FileValue *this, const CoreML::Specification::V5::Value_FileValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_QWORD *)a2 + 3);
  if (v7)
    *((_QWORD *)this + 3) = v7;
}

uint64_t CoreML::Specification::V5::Value_FileValue::IsInitialized(CoreML::Specification::V5::Value_FileValue *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Value_FileValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Value.FileValue");
}

CoreML::Specification::V5::Value_BlobFileValue *CoreML::Specification::V5::Value_BlobFileValue::Value_BlobFileValue(CoreML::Specification::V5::Value_BlobFileValue *this)
{
  *(_QWORD *)this = &off_24D91F9F8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::Value_BlobFileValue *)&CoreML::Specification::V5::_Value_BlobFileValue_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_217FD967C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::Value_BlobFileValue::~Value_BlobFileValue(CoreML::Specification::V5::Value_BlobFileValue *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D91F9F8;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::V5::Value_FileValue::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D91F9F8;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::V5::Value_FileValue::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::Value_BlobFileValue *CoreML::Specification::V5::Value_BlobFileValue::New(CoreML::Specification::V5::Value_BlobFileValue *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Value_BlobFileValue *v3;

  v3 = (CoreML::Specification::V5::Value_BlobFileValue *)operator new();
  CoreML::Specification::V5::Value_BlobFileValue::Value_BlobFileValue(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Value_BlobFileValue>(a2, v3);
  return v3;
}

void sub_217FD9768(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Value_BlobFileValue>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Value_BlobFileValue>);
  return result;
}

uint64_t CoreML::Specification::V5::Value_BlobFileValue::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  *(_QWORD *)(this + 24) = 0;
  return this;
}

BOOL CoreML::Specification::V5::Value_BlobFileValue::MergePartialFromCodedStream(CoreML::Specification::V5::Value_BlobFileValue *this, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v11;
  _BOOL8 result;
  std::string *v13;
  const char *size;
  char *v15;
  char v17;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_23;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_23;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 != 16)
          goto LABEL_23;
        v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          *((_QWORD *)this + 3) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v17 & 1) == 0)
            return 0;
        }
        else
        {
          *((_QWORD *)this + 3) = *v15;
          *a2 = v15 + 1;
        }
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      v11 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11);
      if (!result)
        return result;
      v13 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = (std::string *)v13->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v13, size, 0, (uint64_t)"CoreML.Specification.V5.Value.BlobFileValue.fileName"))return 0;
    }
LABEL_23:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::V5::Value_BlobFileValue::SerializeWithCachedSizes(CoreML::Specification::V5::Value_BlobFileValue *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  const char *v7;
  unint64_t v8;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(const char **)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  v7 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v7, 1, (uint64_t)"CoreML.Specification.V5.Value.BlobFileValue.fileName");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v8 = *((_QWORD *)this + 3);
  if (v8)
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v8, a2, a4);
  return result;
}

uint64_t CoreML::Specification::V5::Value_BlobFileValue::ByteSizeLong(CoreML::Specification::V5::Value_BlobFileValue *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_QWORD *)this + 3);
  if (v5)
    v4 += ((9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6) + 1;
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::V5::Value_BlobFileValue::IsInitialized(CoreML::Specification::V5::Value_BlobFileValue *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::Value_BlobFileValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Value.BlobFileValue");
}

CoreML::Specification::V5::Value *CoreML::Specification::V5::Value::Value(CoreML::Specification::V5::Value *this)
{
  *(_QWORD *)this = &off_24D91FA90;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::Value *)&CoreML::Specification::V5::_Value_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_217FD9AD0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::Value::~Value(CoreML::Specification::V5::Value *this)
{
  *(_QWORD *)this = &off_24D91FA90;
  CoreML::Specification::V5::Value::SharedDtor(this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::Value::~Value(this);
  JUMPOUT(0x219A19A08);
}

_QWORD *CoreML::Specification::V5::Value::SharedDtor(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)this;
  v2 = this[2];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = (_QWORD *)MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  if ((uint64_t *)v1 != &CoreML::Specification::V5::_Value_default_instance_)
  {
    this = *(_QWORD **)(v1 + 24);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  if (*(_DWORD *)(v1 + 44))
    return (_QWORD *)CoreML::Specification::V5::Value::clear_value(v1);
  return this;
}

uint64_t CoreML::Specification::V5::Value::clear_value(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 44);
  if (v2 == 5 || v2 == 4 || v2 == 3)
  {
    this = *(_QWORD *)(this + 32);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

CoreML::Specification::V5::Value *CoreML::Specification::V5::Value::New(CoreML::Specification::V5::Value *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::Value *v3;

  v3 = (CoreML::Specification::V5::Value *)operator new();
  CoreML::Specification::V5::Value::Value(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Value>(a2, v3);
  return v3;
}

void sub_217FD9C80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::Value>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Value>);
  return result;
}

uint64_t CoreML::Specification::V5::Value::Clear(CoreML::Specification::V5::Value *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  return CoreML::Specification::V5::Value::clear_value((uint64_t)this);
}

uint64_t CoreML::Specification::V5::Value::MergePartialFromCodedStream(CoreML::Specification::V5::Value *this, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  std::string *v10;
  uint64_t result;
  std::string *v12;
  const char *size;
  CoreML::Specification::V5::ValueType *v14;
  char *v15;
  int VarintSizeAsIntFallback;
  CoreML::Specification::V5::Value_ImmediateValue *v17;
  CoreML::Specification::V5::Value_FileValue *v18;
  CoreML::Specification::V5::Value_BlobFileValue *v19;
  BOOL v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;

  v5 = (std::string **)((char *)this + 16);
  while (2)
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
        break;
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) != 0)
        goto LABEL_8;
LABEL_30:
      if ((_DWORD)v8)
        v20 = (v8 & 7) == 4;
      else
        v20 = 1;
      if (v20)
        return 1;
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)goto LABEL_67;
    }
    v7 = 0;
LABEL_7:
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
    v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0)
      goto LABEL_30;
LABEL_8:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10)
          goto LABEL_30;
        v10 = *v5;
        if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v10 = *v5;
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v10);
        if (!(_DWORD)result)
          return result;
        v12 = *v5;
        if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
        {
          v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
          size = (const char *)(*v5)->__r_.__value_.__l.__size_;
        }
        else
        {
          size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v12, size, 0, (uint64_t)"CoreML.Specification.V5.Value.docString"))goto LABEL_67;
        continue;
      case 2u:
        if (v8 != 18)
          goto LABEL_30;
        v14 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 3);
        if (!v14)
        {
          v14 = (CoreML::Specification::V5::ValueType *)operator new();
          CoreML::Specification::V5::ValueType::ValueType(v14);
          *((_QWORD *)this + 3) = v14;
        }
        v15 = *a2;
        if (*a2 >= a2[1] || *v15 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_67;
        }
        else
        {
          VarintSizeAsIntFallback = *v15;
          *a2 = v15 + 1;
        }
        v27 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v27 & 0x8000000000000000) != 0)
          goto LABEL_67;
        v28 = v27;
        result = CoreML::Specification::V5::ValueType::MergePartialFromCodedStream(v14, (_tc_google::protobuf::io::CodedInputStream *)a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_63;
      case 3u:
        if (v8 != 26)
          goto LABEL_30;
        if (*((_DWORD *)this + 11) == 3)
        {
          v17 = (CoreML::Specification::V5::Value_ImmediateValue *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::V5::Value::clear_value((uint64_t)this);
          *((_DWORD *)this + 11) = 3;
          v17 = (CoreML::Specification::V5::Value_ImmediateValue *)operator new();
          CoreML::Specification::V5::Value_ImmediateValue::Value_ImmediateValue(v17);
          *((_QWORD *)this + 4) = v17;
        }
        v21 = *a2;
        if (*a2 >= a2[1] || *v21 < 0)
        {
          v22 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v22 < 0)
            goto LABEL_67;
        }
        else
        {
          v22 = *v21;
          *a2 = v21 + 1;
        }
        v29 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22);
        if ((v29 & 0x8000000000000000) != 0)
          goto LABEL_67;
        v28 = v29;
        result = CoreML::Specification::V5::Value_ImmediateValue::MergePartialFromCodedStream(v17, a2, v30);
        if (!(_DWORD)result)
          return result;
        goto LABEL_63;
      case 4u:
        if (v8 != 34)
          goto LABEL_30;
        if (*((_DWORD *)this + 11) == 4)
        {
          v18 = (CoreML::Specification::V5::Value_FileValue *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::V5::Value::clear_value((uint64_t)this);
          *((_DWORD *)this + 11) = 4;
          v18 = (CoreML::Specification::V5::Value_FileValue *)operator new();
          CoreML::Specification::V5::Value_FileValue::Value_FileValue(v18);
          *((_QWORD *)this + 4) = v18;
        }
        v23 = *a2;
        if (*a2 >= a2[1] || *v23 < 0)
        {
          v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v24 < 0)
            goto LABEL_67;
        }
        else
        {
          v24 = *v23;
          *a2 = v23 + 1;
        }
        v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v24);
        if ((v31 & 0x8000000000000000) != 0)
          goto LABEL_67;
        v28 = v31;
        result = CoreML::Specification::V5::Value_FileValue::MergePartialFromCodedStream(v18, a2, v32);
        if (!(_DWORD)result)
          return result;
        goto LABEL_63;
      case 5u:
        if (v8 != 42)
          goto LABEL_30;
        if (*((_DWORD *)this + 11) == 5)
        {
          v19 = (CoreML::Specification::V5::Value_BlobFileValue *)*((_QWORD *)this + 4);
        }
        else
        {
          CoreML::Specification::V5::Value::clear_value((uint64_t)this);
          *((_DWORD *)this + 11) = 5;
          v19 = (CoreML::Specification::V5::Value_BlobFileValue *)operator new();
          CoreML::Specification::V5::Value_BlobFileValue::Value_BlobFileValue(v19);
          *((_QWORD *)this + 4) = v19;
        }
        v25 = *a2;
        if (*a2 >= a2[1] || *v25 < 0)
        {
          v26 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v26 < 0)
            goto LABEL_67;
        }
        else
        {
          v26 = *v25;
          *a2 = v25 + 1;
        }
        v33 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v26);
        if ((v33 & 0x8000000000000000) != 0)
          goto LABEL_67;
        v28 = v33;
        result = CoreML::Specification::V5::Value_BlobFileValue::MergePartialFromCodedStream(v19, a2, v34);
        if (!(_DWORD)result)
          return result;
LABEL_63:
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v28))
        {
          continue;
        }
LABEL_67:
        result = 0;
        break;
      default:
        goto LABEL_30;
    }
    return result;
  }
}

void sub_217FDA120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::Value::SerializeWithCachedSizes(CoreML::Specification::V5::Value *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  int v9;

  result = *((_QWORD *)this + 2);
  if ((*(char *)(result + 23) & 0x80000000) == 0)
  {
    v7 = (const char *)*(unsigned __int8 *)(result + 23);
    if (!*(_BYTE *)(result + 23))
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = *(const char **)(result + 8);
  if (v7)
  {
    result = *(_QWORD *)result;
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v7, 1, (uint64_t)"CoreML.Specification.V5.Value.docString");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  if (this != (CoreML::Specification::V5::Value *)&CoreML::Specification::V5::_Value_default_instance_)
  {
    v8 = *((_QWORD *)this + 3);
    if (v8)
      result = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  v9 = *((_DWORD *)this + 11);
  if (v9 == 3)
  {
    result = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *((_QWORD *)this + 4), a2, a4);
    v9 = *((_DWORD *)this + 11);
  }
  if (v9 == 4)
  {
    result = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, *((_QWORD *)this + 4), a2, a4);
    v9 = *((_DWORD *)this + 11);
  }
  if (v9 == 5)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, *((_QWORD *)this + 4), a2, a4);
  return result;
}

uint64_t CoreML::Specification::V5::Value::ByteSizeLong(CoreML::Specification::V5::Value *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::V5::ValueType *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if (this != (CoreML::Specification::V5::Value *)&CoreML::Specification::V5::_Value_default_instance_)
  {
    v6 = (CoreML::Specification::V5::ValueType *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = CoreML::Specification::V5::ValueType::ByteSizeLong(v6);
      v5 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v8 = *((_DWORD *)this + 11);
  switch(v8)
  {
    case 5:
      v9 = CoreML::Specification::V5::Value_BlobFileValue::ByteSizeLong(*((CoreML::Specification::V5::Value_BlobFileValue **)this
                                                                        + 4));
      goto LABEL_17;
    case 4:
      v9 = CoreML::Specification::V5::Value_FileValue::ByteSizeLong(*((CoreML::Specification::V5::Value_FileValue **)this
                                                                    + 4));
      goto LABEL_17;
    case 3:
      v9 = CoreML::Specification::V5::Value_ImmediateValue::ByteSizeLong(*((CoreML::Specification::V5::TensorValue ***)this
                                                                         + 4));
LABEL_17:
      v5 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
  }
  *((_DWORD *)this + 10) = v5;
  return v5;
}

uint64_t CoreML::Specification::V5::Value::IsInitialized(CoreML::Specification::V5::Value *this)
{
  return 1;
}

uint64_t CoreML::Specification::V5::Value::Swap(uint64_t this, CoreML::Specification::V5::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 != (CoreML::Specification::V5::Value *)this)
  {
    v2 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v2;
    v3 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v3;
    v4 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v4;
  }
  return this;
}

_QWORD *CoreML::Specification::V5::Value::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.Value");
}

CoreML::Specification::V5::TensorValue_RepeatedFloats *CoreML::Specification::V5::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(CoreML::Specification::V5::TensorValue_RepeatedFloats *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D91FB28;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::V5::TensorValue_RepeatedFloats *)&CoreML::Specification::V5::_TensorValue_RepeatedFloats_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_217FDA430(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TensorValue_RepeatedFloats::~TensorValue_RepeatedFloats(CoreML::Specification::V5::TensorValue_RepeatedFloats *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D91FB28;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::TensorValue_RepeatedFloats::~TensorValue_RepeatedFloats(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::TensorValue_RepeatedFloats *CoreML::Specification::V5::TensorValue_RepeatedFloats::New(CoreML::Specification::V5::TensorValue_RepeatedFloats *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TensorValue_RepeatedFloats *v3;

  v3 = (CoreML::Specification::V5::TensorValue_RepeatedFloats *)operator new();
  CoreML::Specification::V5::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedFloats>(a2, v3);
  return v3;
}

void sub_217FDA518(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedFloats>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedFloats>);
  return result;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedFloats::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::V5::TensorValue_RepeatedFloats::MergePartialFromCodedStream(CoreML::Specification::V5::TensorValue_RepeatedFloats *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  signed int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  signed int v21;
  uint64_t v22;
  _BOOL8 result;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 13)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(_tc_google::protobuf::internal::WireFormatLite::FieldType)2>(1, 0xAu, (unsigned int **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 3) != 0)
        return 0;
      v13 = *v5;
      v14 = VarintSizeAsIntFallback >> 2;
      v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      if (v15 == -1)
        v17 = v16;
      if (v17 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 4)
      {
        if (v14 <= 1)
          v18 = 1;
        else
          v18 = VarintSizeAsIntFallback >> 2;
        do
        {
          v28 = 0;
          v19 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v28);
            if (!result)
              return result;
            v20 = v28;
          }
          else
          {
            v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<float>::Reserve(v5, v21 + 1);
            v21 = *v5;
          }
          v22 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(_DWORD *)(v22 + 4 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      v25 = *((_QWORD *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<float>::Reserve(v5, v13 + v14);
      v25 = *((_QWORD *)this + 3);
      v26 = 4 * v24 - 4 * *((int *)this + 4);
      if (v26 >= 1)
        bzero((void *)(v25 + 8 + 4 * *((int *)this + 4)), 4 * (((unint64_t)v26 >> 2) - ((unint64_t)v26 > 3)) + 4);
    }
    *v5 = v24;
    v27 = v25 + 8;
    if (!v25)
      v27 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 4 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v13;
    return result;
  }
  return 0;
}

BOOL _tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(_tc_google::protobuf::internal::WireFormatLite::FieldType)2>(int a1, unsigned int a2, unsigned int **this, uint64_t a4)
{
  unsigned int *v8;
  unsigned int v9;
  signed int v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  int v24;
  int v25;
  _BOOL8 result;
  unsigned int v27;

  v27 = 0;
  v8 = *this;
  if ((int)(*((_DWORD *)this + 2) - *this) < 4)
  {
    result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v27);
    if (!result)
      return result;
    v9 = v27;
  }
  else
  {
    v9 = *v8;
    *this = v8 + 1;
  }
  v10 = *(_DWORD *)a4;
  if (*(_DWORD *)a4 == *(_DWORD *)(a4 + 4))
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)a4, v10 + 1);
    v10 = *(_DWORD *)a4;
  }
  v11 = *(_QWORD *)(a4 + 8);
  v12 = v10 + 1;
  *(_DWORD *)a4 = v10 + 1;
  *(_DWORD *)(v11 + 4 * v10 + 8) = v9;
  v13 = *this;
  v14 = *((_DWORD *)this + 2) - *this;
  if (v14 >= 1)
  {
    v15 = a1 + 4;
    v16 = *(_DWORD *)(a4 + 4) - v12;
    v17 = v14 / (a1 + 4);
    if (v17 >= v16)
      v18 = *(_DWORD *)(a4 + 4) - v12;
    else
      v18 = v14 / (a1 + 4);
    if (v18 < 1)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      v19 = 0;
      v20 = v10 + 2;
      v21 = v11 + 4 * v12 + 8;
      v22 = v17;
      if (v17 >= (uint64_t)v16)
        v22 = v16;
      do
      {
        if (a2 > 0x7F)
        {
          if (a2 >> 14
            || (a2 & 0x7F | 0x80) != *(unsigned __int8 *)v13
            || *((unsigned __int8 *)v13 + 1) != (a2 >> 7))
          {
            goto LABEL_22;
          }
          v23 = (unsigned int *)((char *)v13 + 2);
        }
        else
        {
          v24 = *(unsigned __int8 *)v13;
          v23 = (unsigned int *)((char *)v13 + 1);
          if (v24 != a2)
            goto LABEL_22;
        }
        v25 = *v23;
        v13 = v23 + 1;
        *(_DWORD *)a4 = v20 + v19;
        *(_DWORD *)(v21 + 4 * v19++) = v25;
      }
      while (v22 != (_DWORD)v19);
      LODWORD(v19) = v18;
    }
LABEL_22:
    if ((int)v19 * v15 >= 1)
      _tc_google::protobuf::io::CodedInputStream::Skip((_tc_google::protobuf::io::CodedInputStream *)this, v19 * v15);
  }
  return 1;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedFloats::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloatArray(v14, (const float *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedFloats::ByteSizeLong(CoreML::Specification::V5::TensorValue_RepeatedFloats *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 4 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t *CoreML::Specification::V5::TensorValue_RepeatedFloats::MergeFrom(uint64_t *this, const CoreML::Specification::V5::TensorValue_RepeatedFloats *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v7 = *((_DWORD *)v3 + 4);
    v6 = (unsigned int *)(v3 + 2);
    _tc_google::protobuf::RepeatedField<float>::Reserve(v6, v7 + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v6 + 1) + 4 * (int)*v6 + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 4 * *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedFloats::IsInitialized(CoreML::Specification::V5::TensorValue_RepeatedFloats *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TensorValue_RepeatedFloats::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TensorValue.RepeatedFloats");
}

CoreML::Specification::V5::TensorValue_RepeatedDoubles *CoreML::Specification::V5::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(CoreML::Specification::V5::TensorValue_RepeatedDoubles *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D91FBC0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::V5::TensorValue_RepeatedDoubles *)&CoreML::Specification::V5::_TensorValue_RepeatedDoubles_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_217FDABC0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TensorValue_RepeatedDoubles::~TensorValue_RepeatedDoubles(CoreML::Specification::V5::TensorValue_RepeatedDoubles *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D91FBC0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::TensorValue_RepeatedDoubles::~TensorValue_RepeatedDoubles(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::TensorValue_RepeatedDoubles *CoreML::Specification::V5::TensorValue_RepeatedDoubles::New(CoreML::Specification::V5::TensorValue_RepeatedDoubles *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TensorValue_RepeatedDoubles *v3;

  v3 = (CoreML::Specification::V5::TensorValue_RepeatedDoubles *)operator new();
  CoreML::Specification::V5::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedDoubles>(a2, v3);
  return v3;
}

void sub_217FDACA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedDoubles>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedDoubles>);
  return result;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedDoubles::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::V5::TensorValue_RepeatedDoubles::MergePartialFromCodedStream(CoreML::Specification::V5::TensorValue_RepeatedDoubles *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  signed int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  signed int v21;
  uint64_t v22;
  _BOOL8 result;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 9)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0)
        return 0;
      v13 = *v5;
      v14 = VarintSizeAsIntFallback >> 3;
      v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      if (v15 == -1)
        v17 = v16;
      if (v17 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1)
          v18 = 1;
        else
          v18 = VarintSizeAsIntFallback >> 3;
        do
        {
          v28 = 0;
          v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result)
              return result;
            v20 = v28;
          }
          else
          {
            v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            v21 = *v5;
          }
          v22 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(_QWORD *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      v25 = *((_QWORD *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      v25 = *((_QWORD *)this + 3);
      v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1)
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
    }
    *v5 = v24;
    v27 = v25 + 8;
    if (!v25)
      v27 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedDoubles::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, (const double *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedDoubles::ByteSizeLong(CoreML::Specification::V5::TensorValue_RepeatedDoubles *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 8 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedDoubles::IsInitialized(CoreML::Specification::V5::TensorValue_RepeatedDoubles *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TensorValue_RepeatedDoubles::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TensorValue.RepeatedDoubles");
}

CoreML::Specification::V5::TensorValue_RepeatedInts *CoreML::Specification::V5::TensorValue_RepeatedInts::TensorValue_RepeatedInts(CoreML::Specification::V5::TensorValue_RepeatedInts *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D91FC58;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::V5::TensorValue_RepeatedInts *)&CoreML::Specification::V5::_TensorValue_RepeatedInts_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_217FDB14C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TensorValue_RepeatedInts::~TensorValue_RepeatedInts(CoreML::Specification::V5::TensorValue_RepeatedInts *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D91FC58;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::TensorValue_RepeatedInts::~TensorValue_RepeatedInts(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::TensorValue_RepeatedInts *CoreML::Specification::V5::TensorValue_RepeatedInts::New(CoreML::Specification::V5::TensorValue_RepeatedInts *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TensorValue_RepeatedInts *v3;

  v3 = (CoreML::Specification::V5::TensorValue_RepeatedInts *)operator new();
  CoreML::Specification::V5::TensorValue_RepeatedInts::TensorValue_RepeatedInts(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedInts>(a2, v3);
  return v3;
}

void sub_217FDB234(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedInts>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedInts>);
  return result;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedInts::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedInts::MergePartialFromCodedStream(CoreML::Specification::V5::TensorValue_RepeatedInts *this, char **a2, unsigned int a3)
{
  signed int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  char *v14;
  int v15;
  uint64_t Varint32Fallback;
  signed int v17;
  uint64_t v18;

  v5 = (signed int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
          break;
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) != 0)
          goto LABEL_8;
LABEL_14:
        if ((_DWORD)v8)
          v12 = (v8 & 7) == 4;
        else
          v12 = 1;
        if (v12)
          return 1;
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
      }
      v7 = 0;
LABEL_7:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
      v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v8 & 0x100000000) == 0)
        goto LABEL_14;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        goto LABEL_14;
      if (v8 != 8)
        break;
      if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(_tc_google::protobuf::internal::WireFormatLite::FieldType)5>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, v5) & 1) == 0)return 0;
    }
    if (v8 != 10)
      goto LABEL_14;
    v10 = *a2;
    if (*a2 < a2[1] && (*v10 & 0x80000000) == 0)
    {
      VarintSizeAsIntFallback = *v10;
      *a2 = v10 + 1;
      goto LABEL_23;
    }
    VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
    if (VarintSizeAsIntFallback < 0)
      return 0;
LABEL_23:
    v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
    if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
    {
      while (1)
      {
        v14 = *a2;
        if (*a2 >= a2[1])
          break;
        v15 = *v14;
        if (*v14 < 0)
          goto LABEL_28;
        *a2 = v14 + 1;
LABEL_29:
        v17 = *((_DWORD *)this + 4);
        if (v17 == *((_DWORD *)this + 5))
        {
          _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)v5, v17 + 1);
          v17 = *v5;
        }
        v18 = *((_QWORD *)this + 3);
        *((_DWORD *)this + 4) = v17 + 1;
        *(_DWORD *)(v18 + 4 * v17 + 8) = v15;
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) <= 0)
          goto LABEL_32;
      }
      v15 = 0;
LABEL_28:
      Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v15);
      v15 = Varint32Fallback;
      if (Varint32Fallback < 0)
        return 0;
      goto LABEL_29;
    }
LABEL_32:
    _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
  }
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<int,(_tc_google::protobuf::internal::WireFormatLite::FieldType)5>(uint64_t a1, unsigned int a2, _tc_google::protobuf::io::CodedInputStream *a3, signed int *a4)
{
  char *v7;
  int v8;
  uint64_t Varint32Fallback;
  signed int v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v7 = *(char **)a3;
  if (*(_QWORD *)a3 >= *((_QWORD *)a3 + 1))
  {
    v8 = 0;
  }
  else
  {
    v8 = *v7;
    if ((*v7 & 0x80000000) == 0)
    {
      *(_QWORD *)a3 = v7 + 1;
      goto LABEL_6;
    }
  }
  Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a3, v8);
  v8 = Varint32Fallback;
  if (Varint32Fallback < 0)
    return 0;
LABEL_6:
  v10 = *a4;
  if (*a4 == a4[1])
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)a4, v10 + 1);
    v10 = *a4;
  }
  v11 = *((_QWORD *)a4 + 1);
  *a4 = v10 + 1;
  *(_DWORD *)(v11 + 4 * v10 + 8) = v8;
  v12 = a4[1] - *a4;
  if (v12 >= 1)
  {
    v13 = v12 + 1;
    while (1)
    {
      if (a2 > 0x7F)
      {
        if (a2 >> 14)
          return 1;
        v17 = *(char **)a3;
        v14 = *((_QWORD *)a3 + 1);
        if ((int)(v14 - *(_QWORD *)a3) < 2
          || (a2 & 0x7F | 0x80) != *v17
          || v17[1] != (a2 >> 7))
        {
          return 1;
        }
        v16 = v17 + 2;
      }
      else
      {
        v15 = *(char **)a3;
        v14 = *((_QWORD *)a3 + 1);
        if (*(_QWORD *)a3 >= v14 || *v15 != a2)
          return 1;
        v16 = v15 + 1;
      }
      *(_QWORD *)a3 = v16;
      if ((unint64_t)v16 >= v14)
        break;
      v18 = *v16;
      if (*v16 < 0)
        goto LABEL_23;
      *(_QWORD *)a3 = v16 + 1;
LABEL_25:
      v20 = *a4;
      *a4 = v20 + 1;
      *(_DWORD *)(v11 + 4 * v20 + 8) = v18;
      if (--v13 <= 1)
        return 1;
    }
    v18 = 0;
LABEL_23:
    v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a3, v18);
    if (v19 < 0)
      return 0;
    v18 = v19;
    v11 = *((_QWORD *)a4 + 1);
    goto LABEL_25;
  }
  return 1;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedInts::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(int *)(*(_QWORD *)(v3 + 24) + 4 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            LODWORD(v16) = *(_DWORD *)(*(_QWORD *)(v3 + 24) + 4 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedInts::ByteSizeLong(CoreML::Specification::V5::TensorValue_RepeatedInts *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;

  v2 = _tc_google::protobuf::internal::WireFormatLite::Int32Size((unsigned int *)this + 4);
  if (v2)
  {
    v3 = v2;
    if ((v2 & 0x80000000) != 0)
      v4 = 11;
    else
      v4 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = v4 + v2;
  *((_DWORD *)this + 8) = v3;
  *((_DWORD *)this + 9) = result;
  return result;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedInts::IsInitialized(CoreML::Specification::V5::TensorValue_RepeatedInts *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TensorValue_RepeatedInts::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TensorValue.RepeatedInts");
}

CoreML::Specification::V5::TensorValue_RepeatedLongInts *CoreML::Specification::V5::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(CoreML::Specification::V5::TensorValue_RepeatedLongInts *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D91FCF0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::V5::TensorValue_RepeatedLongInts *)&CoreML::Specification::V5::_TensorValue_RepeatedLongInts_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_217FDB820(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TensorValue_RepeatedLongInts::~TensorValue_RepeatedLongInts(CoreML::Specification::V5::TensorValue_RepeatedLongInts *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D91FCF0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::TensorValue_RepeatedLongInts::~TensorValue_RepeatedLongInts(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::TensorValue_RepeatedLongInts *CoreML::Specification::V5::TensorValue_RepeatedLongInts::New(CoreML::Specification::V5::TensorValue_RepeatedLongInts *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TensorValue_RepeatedLongInts *v3;

  v3 = (CoreML::Specification::V5::TensorValue_RepeatedLongInts *)operator new();
  CoreML::Specification::V5::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedLongInts>(a2, v3);
  return v3;
}

void sub_217FDB908(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedLongInts>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedLongInts>);
  return result;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedLongInts::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedLongInts::MergePartialFromCodedStream(CoreML::Specification::V5::TensorValue_RepeatedLongInts *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  char *v14;
  unint64_t v15;
  unint64_t Varint64Fallback;
  char v17;
  signed int v18;
  uint64_t v19;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        v7 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0)
                return 0;
              v15 = Varint64Fallback;
            }
            else
            {
              v15 = *v14;
              *a2 = v14 + 1;
            }
            v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              v18 = *v5;
            }
            v19 = *((_QWORD *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(_QWORD *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(uint64_t a1, unsigned int a2, _tc_google::protobuf::io::CodedInputStream *a3, uint64_t a4)
{
  char *v7;
  unint64_t v8;
  unint64_t Varint64Fallback;
  char v10;
  signed int v12;
  int v13;
  uint64_t v14;
  signed int v15;
  int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v7 = *(char **)a3;
  if (*(_QWORD *)a3 >= *((_QWORD *)a3 + 1) || *v7 < 0)
  {
    Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a3);
    if ((v10 & 1) == 0)
      return 0;
    v8 = Varint64Fallback;
  }
  else
  {
    v8 = *v7;
    *(_QWORD *)a3 = v7 + 1;
  }
  v12 = *(_DWORD *)a4;
  v13 = *(_DWORD *)(a4 + 4);
  if (*(_DWORD *)a4 == v13)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)a4, v12 + 1);
    v12 = *(_DWORD *)a4;
    v13 = *(_DWORD *)(a4 + 4);
  }
  v14 = *(_QWORD *)(a4 + 8);
  v15 = v12 + 1;
  *(_DWORD *)a4 = v12 + 1;
  *(_QWORD *)(v14 + 8 * v12 + 8) = v8;
  if (v13 - (v12 + 1) >= 1)
  {
    v16 = v13 - v12;
    do
    {
      if (a2 > 0x7F)
      {
        if (a2 >> 14)
          return 1;
        v20 = *(char **)a3;
        v17 = *((_QWORD *)a3 + 1);
        if ((int)(v17 - *(_QWORD *)a3) < 2
          || (a2 & 0x7F | 0x80) != *v20
          || v20[1] != (a2 >> 7))
        {
          return 1;
        }
        v19 = v20 + 2;
      }
      else
      {
        v18 = *(char **)a3;
        v17 = *((_QWORD *)a3 + 1);
        if (*(_QWORD *)a3 >= v17 || *v18 != a2)
          return 1;
        v19 = v18 + 1;
      }
      *(_QWORD *)a3 = v19;
      if ((unint64_t)v19 >= v17 || *v19 < 0)
      {
        v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a3);
        if ((v22 & 1) == 0)
          return 0;
        v14 = *(_QWORD *)(a4 + 8);
        v15 = *(_DWORD *)a4;
      }
      else
      {
        v21 = *v19;
        *(_QWORD *)a3 = v19 + 1;
      }
      v23 = v14 + 8 * v15++;
      *(_DWORD *)a4 = v15;
      *(_QWORD *)(v23 + 8) = v21;
      --v16;
    }
    while (v16 > 1);
  }
  return 1;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedLongInts::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;

  if (*(int *)(this + 16) >= 1)
  {
    v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(v3 + 32);
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v7 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *((_QWORD *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          v14 = *((_QWORD *)a2 + 1);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * i + 8);
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v15 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *((_QWORD *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedLongInts::ByteSizeLong(CoreML::Specification::V5::TensorValue_RepeatedLongInts *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    v2 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_10;
  }
  v2 = 0;
  v3 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2)
    goto LABEL_8;
  if ((v2 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_10:
  v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedLongInts::IsInitialized(CoreML::Specification::V5::TensorValue_RepeatedLongInts *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TensorValue_RepeatedLongInts::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TensorValue.RepeatedLongInts");
}

CoreML::Specification::V5::TensorValue_RepeatedBools *CoreML::Specification::V5::TensorValue_RepeatedBools::TensorValue_RepeatedBools(CoreML::Specification::V5::TensorValue_RepeatedBools *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D91FD88;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::V5::TensorValue_RepeatedBools *)&CoreML::Specification::V5::_TensorValue_RepeatedBools_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_217FDBEF4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TensorValue_RepeatedBools::~TensorValue_RepeatedBools(CoreML::Specification::V5::TensorValue_RepeatedBools *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D91FD88;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::TensorValue_RepeatedBools::~TensorValue_RepeatedBools(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::TensorValue_RepeatedBools *CoreML::Specification::V5::TensorValue_RepeatedBools::New(CoreML::Specification::V5::TensorValue_RepeatedBools *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TensorValue_RepeatedBools *v3;

  v3 = (CoreML::Specification::V5::TensorValue_RepeatedBools *)operator new();
  CoreML::Specification::V5::TensorValue_RepeatedBools::TensorValue_RepeatedBools(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedBools>(a2, v3);
  return v3;
}

void sub_217FDBFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedBools>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedBools>);
  return result;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedBools::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedBools::MergePartialFromCodedStream(CoreML::Specification::V5::TensorValue_RepeatedBools *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  int VarintSizeAsIntFallback;
  BOOL v12;
  int v13;
  char *v14;
  unint64_t Varint64Fallback;
  char v16;
  BOOL v17;
  signed int v18;
  uint64_t v19;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        v7 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8)
        break;
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<BOOL,(_tc_google::protobuf::internal::WireFormatLite::FieldType)8>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0;
      }
      else
      {
        if (v8 != 10)
          break;
        v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            return 0;
        }
        else
        {
          VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v16 & 1) == 0)
                return 0;
            }
            else
            {
              Varint64Fallback = *v14;
              *a2 = v14 + 1;
            }
            v17 = Varint64Fallback != 0;
            v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v5, v18 + 1);
              v18 = *v5;
            }
            v19 = *((_QWORD *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(_BYTE *)(v19 + v18 + 8) = v17;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if ((_DWORD)v8)
      v12 = (v8 & 7) == 4;
    else
      v12 = 1;
    if (v12)
      return 1;
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<BOOL,(_tc_google::protobuf::internal::WireFormatLite::FieldType)8>(uint64_t a1, unsigned int a2, _tc_google::protobuf::io::CodedInputStream *a3, uint64_t a4)
{
  char *v7;
  unint64_t Varint64Fallback;
  char v9;
  BOOL v11;
  signed int v12;
  int v13;
  uint64_t v14;
  signed int v15;
  int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v7 = *(char **)a3;
  if (*(_QWORD *)a3 >= *((_QWORD *)a3 + 1) || *v7 < 0)
  {
    Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a3);
    if ((v9 & 1) == 0)
      return 0;
  }
  else
  {
    Varint64Fallback = *v7;
    *(_QWORD *)a3 = v7 + 1;
  }
  v11 = Varint64Fallback != 0;
  v12 = *(_DWORD *)a4;
  v13 = *(_DWORD *)(a4 + 4);
  if (*(_DWORD *)a4 == v13)
  {
    _tc_google::protobuf::RepeatedField<BOOL>::Reserve((unsigned int *)a4, v12 + 1);
    v12 = *(_DWORD *)a4;
    v13 = *(_DWORD *)(a4 + 4);
  }
  v14 = *(_QWORD *)(a4 + 8);
  v15 = v12 + 1;
  *(_DWORD *)a4 = v12 + 1;
  *(_BYTE *)(v14 + v12 + 8) = v11;
  if (v13 - (v12 + 1) >= 1)
  {
    v16 = v13 - v12;
    do
    {
      if (a2 > 0x7F)
      {
        if (a2 >> 14)
          return 1;
        v20 = *(char **)a3;
        v17 = *((_QWORD *)a3 + 1);
        if ((int)(v17 - *(_QWORD *)a3) < 2
          || (a2 & 0x7F | 0x80) != *v20
          || v20[1] != (a2 >> 7))
        {
          return 1;
        }
        v19 = v20 + 2;
      }
      else
      {
        v18 = *(char **)a3;
        v17 = *((_QWORD *)a3 + 1);
        if (*(_QWORD *)a3 >= v17 || *v18 != a2)
          return 1;
        v19 = v18 + 1;
      }
      *(_QWORD *)a3 = v19;
      if ((unint64_t)v19 >= v17 || *v19 < 0)
      {
        v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a3);
        if ((v22 & 1) == 0)
          return 0;
        v14 = *(_QWORD *)(a4 + 8);
        v15 = *(_DWORD *)a4;
      }
      else
      {
        v21 = *v19;
        *(_QWORD *)a3 = v19 + 1;
      }
      v23 = v14 + v15++;
      *(_DWORD *)a4 = v15;
      *(_BYTE *)(v23 + 8) = v21 != 0;
      --v16;
    }
    while (v16 > 1);
  }
  return 1;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedBools::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteBoolArray(v14, (const BOOL *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedBools::ByteSizeLong(CoreML::Specification::V5::TensorValue_RepeatedBools *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1)
  {
    if ((v1 & 0x80000000) != 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  v3 = v2 + v1;
  *((_DWORD *)this + 8) = v1;
  *((_DWORD *)this + 9) = v3;
  return v3;
}

uint64_t *CoreML::Specification::V5::TensorValue_RepeatedBools::MergeFrom(uint64_t *this, const CoreML::Specification::V5::TensorValue_RepeatedBools *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    v7 = *((_DWORD *)v3 + 4);
    v6 = (unsigned int *)(v3 + 2);
    _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v6, v7 + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v6 + 1) + (int)*v6 + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), *((int *)a2 + 4));
    *v6 += *((_DWORD *)a2 + 4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedBools::IsInitialized(CoreML::Specification::V5::TensorValue_RepeatedBools *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TensorValue_RepeatedBools::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TensorValue.RepeatedBools");
}

CoreML::Specification::V5::TensorValue_RepeatedStrings *CoreML::Specification::V5::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(CoreML::Specification::V5::TensorValue_RepeatedStrings *this)
{
  *(_QWORD *)this = &off_24D91FE20;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::V5::TensorValue_RepeatedStrings *)&CoreML::Specification::V5::_TensorValue_RepeatedStrings_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_217FDC5A4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TensorValue_RepeatedStrings::~TensorValue_RepeatedStrings(CoreML::Specification::V5::TensorValue_RepeatedStrings *this)
{
  *(_QWORD *)this = &off_24D91FE20;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::TensorValue_RepeatedStrings::~TensorValue_RepeatedStrings(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::TensorValue_RepeatedStrings *CoreML::Specification::V5::TensorValue_RepeatedStrings::New(CoreML::Specification::V5::TensorValue_RepeatedStrings *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TensorValue_RepeatedStrings *v3;

  v3 = (CoreML::Specification::V5::TensorValue_RepeatedStrings *)operator new();
  CoreML::Specification::V5::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedStrings>(a2, v3);
  return v3;
}

void sub_217FDC678(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedStrings>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedStrings>);
  return result;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedStrings::Clear(CoreML::Specification::V5::TensorValue_RepeatedStrings *this)
{
  return _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
}

BOOL CoreML::Specification::V5::TensorValue_RepeatedStrings::MergePartialFromCodedStream(CoreML::Specification::V5::TensorValue_RepeatedStrings *this, char **a2, unsigned int a3)
{
  _tc_google::protobuf::Arena **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  int *v12;
  uint64_t v13;
  int v14;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  uint64_t v20;
  unsigned __int8 *v21;
  const char *v22;

  v5 = (_tc_google::protobuf::Arena **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v6 = *a2;
      if (*a2 >= a2[1])
      {
        v7 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v7 = *v6;
      if (*v6 < 1)
        goto LABEL_7;
      *a2 = v6 + 1;
      v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8)
        break;
      v12 = (int *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v14 = *((_DWORD *)this + 7);
        goto LABEL_23;
      }
      v13 = *((int *)this + 6);
      v14 = *v12;
      if ((int)v13 >= *v12)
      {
        if (v14 != *((_DWORD *)this + 7))
        {
LABEL_24:
          *v12 = v14 + 1;
          v16 = *v5;
          if (*v5)
          {
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
            _tc_google::protobuf::Arena::AddListNode(v16, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
          }
          else
          {
            Aligned = (std::string *)operator new();
            Aligned->__r_.__value_.__l.__size_ = 0;
            Aligned->__r_.__value_.__r.__words[2] = 0;
            Aligned->__r_.__value_.__r.__words[0] = 0;
          }
          v17 = *((_QWORD *)this + 4);
          v18 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v18 + 1;
          *(_QWORD *)(v17 + 8 * v18 + 8) = Aligned;
          goto LABEL_28;
        }
LABEL_23:
        _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v5, v14 + 1);
        v12 = (int *)*((_QWORD *)this + 4);
        v14 = *v12;
        goto LABEL_24;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      Aligned = *(std::string **)&v12[2 * v13 + 2];
LABEL_28:
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, Aligned);
      if (!result)
        return result;
      v20 = *((_QWORD *)this + 4);
      v21 = *(unsigned __int8 **)(v20 + 8 * *((int *)this + 6));
      if ((char)v21[23] < 0)
      {
        v21 = *(unsigned __int8 **)v21;
        v22 = *(const char **)(*(_QWORD *)(v20 + 8 * *((int *)this + 6)) + 8);
      }
      else
      {
        v22 = (const char *)v21[23];
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v21, v22, 0, (uint64_t)"CoreML.Specification.V5.TensorValue.RepeatedStrings.values"))return 0;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedStrings::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  const char *v8;

  v2 = *(unsigned int *)(this + 24);
  if ((int)v2 >= 1)
  {
    v4 = this;
    v5 = -v2;
    v6 = 1;
    do
    {
      v7 = *(unsigned __int8 **)(*(_QWORD *)(v4 + 32) + 8 * v6);
      if ((char)v7[23] < 0)
      {
        v7 = *(unsigned __int8 **)v7;
        v8 = *(const char **)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6) + 8);
      }
      else
      {
        v8 = (const char *)v7[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v7, v8, 1, (uint64_t)"CoreML.Specification.V5.TensorValue.RepeatedStrings.values");
      this = _tc_google::protobuf::internal::WireFormatLite::WriteString(1, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v6++), a2);
    }
    while (v5 + v6 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedStrings::ByteSizeLong(CoreML::Specification::V5::TensorValue_RepeatedStrings *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 6);
  if ((int)v1 < 1)
  {
    v3 = *((unsigned int *)this + 6);
  }
  else
  {
    v2 = (uint64_t *)(*((_QWORD *)this + 4) + 8);
    v3 = *((unsigned int *)this + 6);
    do
    {
      v4 = *v2++;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  *((_DWORD *)this + 10) = v3;
  return v3;
}

std::string *CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(std::string *this, const CoreML::Specification::V5::TensorValue_RepeatedStrings *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  const std::string **v6;
  unsigned int *v7;
  int v8;
  int *size;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (const std::string **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    size = (int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8)
      *size = v8;
  }
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedStrings::IsInitialized(CoreML::Specification::V5::TensorValue_RepeatedStrings *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TensorValue_RepeatedStrings::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TensorValue.RepeatedStrings");
}

CoreML::Specification::V5::TensorValue_RepeatedBytes *CoreML::Specification::V5::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(CoreML::Specification::V5::TensorValue_RepeatedBytes *this)
{
  *(_QWORD *)this = &off_24D91FEB8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::TensorValue_RepeatedBytes *)&CoreML::Specification::V5::_TensorValue_RepeatedBytes_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_217FDCAC8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TensorValue_RepeatedBytes::~TensorValue_RepeatedBytes(CoreML::Specification::V5::TensorValue_RepeatedBytes *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D91FEB8;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::V5::Value_FileValue::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_24D91FEB8;
  v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::V5::Value_FileValue::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::TensorValue_RepeatedBytes *CoreML::Specification::V5::TensorValue_RepeatedBytes::New(CoreML::Specification::V5::TensorValue_RepeatedBytes *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TensorValue_RepeatedBytes *v3;

  v3 = (CoreML::Specification::V5::TensorValue_RepeatedBytes *)operator new();
  CoreML::Specification::V5::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedBytes>(a2, v3);
  return v3;
}

void sub_217FDCBB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue_RepeatedBytes>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedBytes>);
  return result;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedBytes::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedBytes::MergePartialFromCodedStream(CoreML::Specification::V5::TensorValue_RepeatedBytes *this, char **a2, unsigned int a3)
{
  std::string **v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  std::string *v11;

  v4 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = *v4;
      if (*v4 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v4, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v11 = *v4;
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v11))
        return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedBytes::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 16);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v3 + 23))
      return this;
    return _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1, v3, a2);
  }
  if (*(_QWORD *)(v3 + 8))
    return _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1, v3, a2);
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedBytes::ByteSizeLong(CoreML::Specification::V5::TensorValue_RepeatedBytes *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  *((_DWORD *)this + 6) = v4;
  return v4;
}

void CoreML::Specification::V5::TensorValue_RepeatedBytes::MergeFrom(CoreML::Specification::V5::TensorValue_RepeatedBytes *this, const CoreML::Specification::V5::TensorValue_RepeatedBytes *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string **v7;
  std::string *v8;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      return;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    return;
  }
  v8 = (std::string *)*((_QWORD *)this + 2);
  v7 = (std::string **)((char *)this + 16);
  v6 = v8;
  if (v8 != (std::string *)v5)
  {
    if (v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, v5);
    else
      std::string::operator=(v6, (const std::string *)v5);
  }
}

uint64_t CoreML::Specification::V5::TensorValue_RepeatedBytes::IsInitialized(CoreML::Specification::V5::TensorValue_RepeatedBytes *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TensorValue_RepeatedBytes::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TensorValue.RepeatedBytes");
}

CoreML::Specification::V5::TensorValue *CoreML::Specification::V5::TensorValue::TensorValue(CoreML::Specification::V5::TensorValue *this)
{
  *(_QWORD *)this = &off_24D91FF50;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::TensorValue *)&CoreML::Specification::V5::_TensorValue_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_217FDCE94(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TensorValue::~TensorValue(CoreML::Specification::V5::TensorValue *this)
{
  *(_QWORD *)this = &off_24D91FF50;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::TensorValue::~TensorValue(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::V5::TensorValue::clear_value(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

CoreML::Specification::V5::TensorValue *CoreML::Specification::V5::TensorValue::New(CoreML::Specification::V5::TensorValue *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TensorValue *v3;

  v3 = (CoreML::Specification::V5::TensorValue *)operator new();
  CoreML::Specification::V5::TensorValue::TensorValue(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue>(a2, v3);
  return v3;
}

void sub_217FDCFC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TensorValue>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue>);
  return result;
}

uint64_t CoreML::Specification::V5::TensorValue::MergePartialFromCodedStream(CoreML::Specification::V5::TensorValue *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::TensorValue_RepeatedFloats *v9;
  CoreML::Specification::V5::TensorValue_RepeatedInts *v10;
  CoreML::Specification::V5::TensorValue_RepeatedBools *v11;
  CoreML::Specification::V5::TensorValue_RepeatedStrings *v12;
  CoreML::Specification::V5::TensorValue_RepeatedLongInts *v13;
  CoreML::Specification::V5::TensorValue_RepeatedDoubles *v14;
  CoreML::Specification::V5::TensorValue_RepeatedBytes *v15;
  BOOL v16;
  char *v17;
  int VarintSizeAsIntFallback;
  char *v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t result;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;

  while (2)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
        break;
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_29:
      if ((_DWORD)v7)
        v16 = (v7 & 7) == 4;
      else
        v16 = 1;
      if (v16)
        return 1;
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)goto LABEL_91;
    }
    v6 = 0;
LABEL_6:
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
    v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v7 & 0x100000000) == 0)
      goto LABEL_29;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (CoreML::Specification::V5::TensorValue_RepeatedFloats *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = (CoreML::Specification::V5::TensorValue_RepeatedFloats *)operator new();
          CoreML::Specification::V5::TensorValue_RepeatedFloats::TensorValue_RepeatedFloats(v9);
          *((_QWORD *)this + 2) = v9;
        }
        v17 = *a2;
        if (*a2 >= a2[1] || *v17 < 0)
        {
          VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0)
            goto LABEL_91;
        }
        else
        {
          VarintSizeAsIntFallback = *v17;
          *a2 = v17 + 1;
        }
        v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v31 & 0x8000000000000000) != 0)
          goto LABEL_91;
        v33 = v31;
        result = CoreML::Specification::V5::TensorValue_RepeatedFloats::MergePartialFromCodedStream(v9, a2, v32);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 2u:
        if (v7 != 18)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 2)
        {
          v10 = (CoreML::Specification::V5::TensorValue_RepeatedInts *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v10 = (CoreML::Specification::V5::TensorValue_RepeatedInts *)operator new();
          CoreML::Specification::V5::TensorValue_RepeatedInts::TensorValue_RepeatedInts(v10);
          *((_QWORD *)this + 2) = v10;
        }
        v19 = *a2;
        if (*a2 >= a2[1] || *v19 < 0)
        {
          v20 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v20 < 0)
            goto LABEL_91;
        }
        else
        {
          v20 = *v19;
          *a2 = v19 + 1;
        }
        v35 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v20);
        if ((v35 & 0x8000000000000000) != 0)
          goto LABEL_91;
        v33 = v35;
        result = CoreML::Specification::V5::TensorValue_RepeatedInts::MergePartialFromCodedStream(v10, a2, v36);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 3u:
        if (v7 != 26)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 3)
        {
          v11 = (CoreML::Specification::V5::TensorValue_RepeatedBools *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v11 = (CoreML::Specification::V5::TensorValue_RepeatedBools *)operator new();
          CoreML::Specification::V5::TensorValue_RepeatedBools::TensorValue_RepeatedBools(v11);
          *((_QWORD *)this + 2) = v11;
        }
        v21 = *a2;
        if (*a2 >= a2[1] || *v21 < 0)
        {
          v22 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v22 < 0)
            goto LABEL_91;
        }
        else
        {
          v22 = *v21;
          *a2 = v21 + 1;
        }
        v37 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22);
        if ((v37 & 0x8000000000000000) != 0)
          goto LABEL_91;
        v33 = v37;
        result = CoreML::Specification::V5::TensorValue_RepeatedBools::MergePartialFromCodedStream(v11, a2, v38);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 4u:
        if (v7 != 34)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 4)
        {
          v12 = (CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v12 = (CoreML::Specification::V5::TensorValue_RepeatedStrings *)operator new();
          CoreML::Specification::V5::TensorValue_RepeatedStrings::TensorValue_RepeatedStrings(v12);
          *((_QWORD *)this + 2) = v12;
        }
        v23 = *a2;
        if (*a2 >= a2[1] || *v23 < 0)
        {
          v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v24 < 0)
            goto LABEL_91;
        }
        else
        {
          v24 = *v23;
          *a2 = v23 + 1;
        }
        v39 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v24);
        if ((v39 & 0x8000000000000000) != 0)
          goto LABEL_91;
        v33 = v39;
        result = CoreML::Specification::V5::TensorValue_RepeatedStrings::MergePartialFromCodedStream(v12, a2, v40);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 5u:
        if (v7 != 42)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 5)
        {
          v13 = (CoreML::Specification::V5::TensorValue_RepeatedLongInts *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 5;
          v13 = (CoreML::Specification::V5::TensorValue_RepeatedLongInts *)operator new();
          CoreML::Specification::V5::TensorValue_RepeatedLongInts::TensorValue_RepeatedLongInts(v13);
          *((_QWORD *)this + 2) = v13;
        }
        v25 = *a2;
        if (*a2 >= a2[1] || *v25 < 0)
        {
          v26 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v26 < 0)
            goto LABEL_91;
        }
        else
        {
          v26 = *v25;
          *a2 = v25 + 1;
        }
        v41 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v26);
        if ((v41 & 0x8000000000000000) != 0)
          goto LABEL_91;
        v33 = v41;
        result = CoreML::Specification::V5::TensorValue_RepeatedLongInts::MergePartialFromCodedStream(v13, a2, v42);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 6u:
        if (v7 != 50)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 6)
        {
          v14 = (CoreML::Specification::V5::TensorValue_RepeatedDoubles *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 6;
          v14 = (CoreML::Specification::V5::TensorValue_RepeatedDoubles *)operator new();
          CoreML::Specification::V5::TensorValue_RepeatedDoubles::TensorValue_RepeatedDoubles(v14);
          *((_QWORD *)this + 2) = v14;
        }
        v27 = *a2;
        if (*a2 >= a2[1] || *v27 < 0)
        {
          v28 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v28 < 0)
            goto LABEL_91;
        }
        else
        {
          v28 = *v27;
          *a2 = v27 + 1;
        }
        v43 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v28);
        if ((v43 & 0x8000000000000000) != 0)
          goto LABEL_91;
        v33 = v43;
        result = CoreML::Specification::V5::TensorValue_RepeatedDoubles::MergePartialFromCodedStream(v14, a2, v44);
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
      case 7u:
        if (v7 != 58)
          goto LABEL_29;
        if (*((_DWORD *)this + 7) == 7)
        {
          v15 = (CoreML::Specification::V5::TensorValue_RepeatedBytes *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::V5::TensorValue::clear_value((uint64_t)this);
          *((_DWORD *)this + 7) = 7;
          v15 = (CoreML::Specification::V5::TensorValue_RepeatedBytes *)operator new();
          CoreML::Specification::V5::TensorValue_RepeatedBytes::TensorValue_RepeatedBytes(v15);
          *((_QWORD *)this + 2) = v15;
        }
        v29 = *a2;
        if (*a2 >= a2[1] || *v29 < 0)
        {
          v30 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v30 < 0)
            goto LABEL_91;
        }
        else
        {
          v30 = *v29;
          *a2 = v29 + 1;
        }
        v45 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v30);
        if ((v45 & 0x8000000000000000) != 0)
          goto LABEL_91;
        v33 = v45;
        result = CoreML::Specification::V5::TensorValue_RepeatedBytes::MergePartialFromCodedStream(v15, a2, v46);
        if (!(_DWORD)result)
          return result;
LABEL_90:
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v33))
        {
          continue;
        }
LABEL_91:
        result = 0;
        break;
      default:
        goto LABEL_29;
    }
    return result;
  }
}

void sub_217FDD5A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::TensorValue::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 3)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 4)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 5)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 6)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)6, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 7)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)7, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::V5::TensorValue::ByteSizeLong(CoreML::Specification::V5::TensorValue *this)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = (unsigned int *)*((_QWORD *)this + 2);
      v3 = v2[4];
      v4 = 4 * v3;
      if ((_DWORD)v3)
        goto LABEL_7;
      goto LABEL_3;
    case 2:
      v7 = CoreML::Specification::V5::TensorValue_RepeatedInts::ByteSizeLong(*((CoreML::Specification::V5::TensorValue_RepeatedInts **)this
                                                                             + 2));
      goto LABEL_14;
    case 3:
      v2 = (unsigned int *)*((_QWORD *)this + 2);
      v4 = v2[4];
      if ((_DWORD)v4)
        goto LABEL_7;
      goto LABEL_3;
    case 4:
      v7 = CoreML::Specification::V5::TensorValue_RepeatedStrings::ByteSizeLong(*((CoreML::Specification::V5::TensorValue_RepeatedStrings **)this
                                                                                + 2));
      goto LABEL_14;
    case 5:
      v7 = CoreML::Specification::V5::TensorValue_RepeatedLongInts::ByteSizeLong(*((CoreML::Specification::V5::TensorValue_RepeatedLongInts **)this
                                                                                 + 2));
      goto LABEL_14;
    case 6:
      v2 = (unsigned int *)*((_QWORD *)this + 2);
      v8 = v2[4];
      v4 = 8 * v8;
      if ((_DWORD)v8)
      {
LABEL_7:
        if ((v4 & 0x80000000) != 0)
          v5 = 11;
        else
          v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      else
      {
LABEL_3:
        v5 = 0;
      }
      v10 = v5 + v4;
      v2[8] = v4;
      v2[9] = v10;
      v9 = v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_17;
    case 7:
      v7 = CoreML::Specification::V5::TensorValue_RepeatedBytes::ByteSizeLong(*((CoreML::Specification::V5::TensorValue_RepeatedBytes **)this
                                                                              + 2));
LABEL_14:
      v9 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
LABEL_17:
      result = v9 + 1;
      break;
    default:
      result = 0;
      break;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

uint64_t CoreML::Specification::V5::TensorValue::IsInitialized(CoreML::Specification::V5::TensorValue *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TensorValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TensorValue");
}

CoreML::Specification::V5::TupleValue *CoreML::Specification::V5::TupleValue::TupleValue(CoreML::Specification::V5::TupleValue *this)
{
  *(_QWORD *)this = &off_24D91FFE8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::V5::TupleValue *)&CoreML::Specification::V5::_TupleValue_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_217FDD890(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::TupleValue::~TupleValue(CoreML::Specification::V5::TupleValue *this)
{
  *(_QWORD *)this = &off_24D91FFE8;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::TupleValue::~TupleValue(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::TupleValue *CoreML::Specification::V5::TupleValue::New(CoreML::Specification::V5::TupleValue *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::TupleValue *v3;

  v3 = (CoreML::Specification::V5::TupleValue *)operator new();
  CoreML::Specification::V5::TupleValue::TupleValue(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TupleValue>(a2, v3);
  return v3;
}

void sub_217FDD964(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::TupleValue>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TupleValue>);
  return result;
}

uint64_t CoreML::Specification::V5::TupleValue::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CoreML::Specification::V5::Value **v3;
  CoreML::Specification::V5::Value *v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (CoreML::Specification::V5::Value **)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::V5::Value::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::V5::TupleValue::MergePartialFromCodedStream(CoreML::Specification::V5::TupleValue *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::Value *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  int v15;
  uint64_t result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Value>::TypeHandler>((uint64_t)v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v15 = v14;
        result = CoreML::Specification::V5::Value::MergePartialFromCodedStream(v11, (_tc_google::protobuf::io::CodedInputStream *)a2);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v15))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::V5::TupleValue::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::TupleValue::ByteSizeLong(CoreML::Specification::V5::TupleValue *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::V5::Value::ByteSizeLong(*(CoreML::Specification::V5::Value **)(*((_QWORD *)this + 4)
                                                                                               + 8 * v3
                                                                                               + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::V5::TupleValue::IsInitialized(CoreML::Specification::V5::TupleValue *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::TupleValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.TupleValue");
}

CoreML::Specification::V5::ListValue *CoreML::Specification::V5::ListValue::ListValue(CoreML::Specification::V5::ListValue *this)
{
  *(_QWORD *)this = &off_24D920080;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::V5::ListValue *)&CoreML::Specification::V5::_ListValue_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_217FDDC6C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::ListValue::~ListValue(CoreML::Specification::V5::ListValue *this)
{
  *(_QWORD *)this = &off_24D920080;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::ListValue::~ListValue(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::ListValue *CoreML::Specification::V5::ListValue::New(CoreML::Specification::V5::ListValue *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::ListValue *v3;

  v3 = (CoreML::Specification::V5::ListValue *)operator new();
  CoreML::Specification::V5::ListValue::ListValue(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::ListValue>(a2, v3);
  return v3;
}

void sub_217FDDD40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::ListValue>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::ListValue>);
  return result;
}

uint64_t CoreML::Specification::V5::ListValue::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  CoreML::Specification::V5::Value **v3;
  CoreML::Specification::V5::Value *v4;

  v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = (CoreML::Specification::V5::Value **)(*(_QWORD *)(this + 32) + 8);
    do
    {
      v4 = *v3++;
      this = CoreML::Specification::V5::Value::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::V5::ListValue::MergePartialFromCodedStream(CoreML::Specification::V5::ListValue *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::Value *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  int v15;
  uint64_t result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Value>::TypeHandler>((uint64_t)v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v15 = v14;
        result = CoreML::Specification::V5::Value::MergePartialFromCodedStream(v11, (_tc_google::protobuf::io::CodedInputStream *)a2);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v15))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::V5::ListValue::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::ListValue::ByteSizeLong(CoreML::Specification::V5::ListValue *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::V5::Value::ByteSizeLong(*(CoreML::Specification::V5::Value **)(*((_QWORD *)this + 4)
                                                                                               + 8 * v3
                                                                                               + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::V5::ListValue::IsInitialized(CoreML::Specification::V5::ListValue *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::ListValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.ListValue");
}

CoreML::Specification::V5::DictionaryValue_KeyValuePair *CoreML::Specification::V5::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(CoreML::Specification::V5::DictionaryValue_KeyValuePair *this)
{
  *(_QWORD *)this = &off_24D920118;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::V5::DictionaryValue_KeyValuePair *)&CoreML::Specification::V5::_DictionaryValue_KeyValuePair_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_217FDE038(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::DictionaryValue_KeyValuePair::~DictionaryValue_KeyValuePair(CoreML::Specification::V5::DictionaryValue_KeyValuePair *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D920118;
  if (this != (CoreML::Specification::V5::DictionaryValue_KeyValuePair *)&CoreML::Specification::V5::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::DictionaryValue_KeyValuePair::~DictionaryValue_KeyValuePair(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::DictionaryValue_KeyValuePair *CoreML::Specification::V5::DictionaryValue_KeyValuePair::New(CoreML::Specification::V5::DictionaryValue_KeyValuePair *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::DictionaryValue_KeyValuePair *v3;

  v3 = (CoreML::Specification::V5::DictionaryValue_KeyValuePair *)operator new();
  CoreML::Specification::V5::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::DictionaryValue_KeyValuePair>(a2, v3);
  return v3;
}

void sub_217FDE130(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::DictionaryValue_KeyValuePair>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::DictionaryValue_KeyValuePair>);
  return result;
}

uint64_t CoreML::Specification::V5::DictionaryValue_KeyValuePair::Clear(CoreML::Specification::V5::DictionaryValue_KeyValuePair *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::V5::DictionaryValue_KeyValuePair::MergePartialFromCodedStream(CoreML::Specification::V5::DictionaryValue_KeyValuePair *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::Value *v10;
  char *v11;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  int v15;
  uint64_t result;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_21;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_21;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_21;
      v10 = (CoreML::Specification::V5::Value *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = (CoreML::Specification::V5::Value *)operator new();
        CoreML::Specification::V5::Value::Value(v10);
        *((_QWORD *)this + 3) = v10;
      }
LABEL_18:
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v11;
        *a2 = v11 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v15 = v14;
        result = CoreML::Specification::V5::Value::MergePartialFromCodedStream(v10, (_tc_google::protobuf::io::CodedInputStream *)a2);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v15))
        {
          continue;
        }
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::V5::Value *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::V5::Value *)operator new();
        CoreML::Specification::V5::Value::Value(v10);
        *((_QWORD *)this + 2) = v10;
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_217FDE344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::V5::DictionaryValue_KeyValuePair::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (this != &CoreML::Specification::V5::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::DictionaryValue_KeyValuePair::ByteSizeLong(CoreML::Specification::V5::DictionaryValue_KeyValuePair *this)
{
  CoreML::Specification::V5::Value *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::V5::Value *v5;
  uint64_t v6;

  if (this == (CoreML::Specification::V5::DictionaryValue_KeyValuePair *)&CoreML::Specification::V5::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::V5::Value *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::V5::Value::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::V5::Value *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::V5::Value::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

std::string *CoreML::Specification::V5::DictionaryValue_KeyValuePair::MergeFrom(std::string *this, const CoreML::Specification::V5::DictionaryValue_KeyValuePair *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::V5::Value *v5;
  CoreML::Specification::V5::Value *v6;
  const CoreML::Specification::V5::Value *v7;
  const CoreML::Specification::V5::Value *v8;
  CoreML::Specification::V5::Value *data;
  const CoreML::Specification::V5::Value *v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::V5::DictionaryValue_KeyValuePair *)&CoreML::Specification::V5::_DictionaryValue_KeyValuePair_default_instance_)
  {
    v5 = (const CoreML::Specification::V5::Value *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::V5::Value *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::V5::Value *)operator new();
        CoreML::Specification::V5::Value::Value(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::V5::Value *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::V5::Value *)&CoreML::Specification::V5::_Value_default_instance_;
      this = (std::string *)CoreML::Specification::V5::Value::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::V5::Value *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::V5::Value *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::V5::Value *)operator new();
        CoreML::Specification::V5::Value::Value(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::V5::Value *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::V5::Value *)&CoreML::Specification::V5::_Value_default_instance_;
      return (std::string *)CoreML::Specification::V5::Value::MergeFrom(data, v10);
    }
  }
  return this;
}

void sub_217FDE560(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::V5::DictionaryValue_KeyValuePair::IsInitialized(CoreML::Specification::V5::DictionaryValue_KeyValuePair *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::DictionaryValue_KeyValuePair::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.DictionaryValue.KeyValuePair");
}

CoreML::Specification::V5::DictionaryValue *CoreML::Specification::V5::DictionaryValue::DictionaryValue(CoreML::Specification::V5::DictionaryValue *this)
{
  *(_QWORD *)this = &off_24D9201B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::V5::DictionaryValue *)&CoreML::Specification::V5::_DictionaryValue_default_instance_)
    CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(this);
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_217FDE600(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::V5::DictionaryValue::~DictionaryValue(CoreML::Specification::V5::DictionaryValue *this)
{
  *(_QWORD *)this = &off_24D9201B0;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::V5::DictionaryValue::~DictionaryValue(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::V5::DictionaryValue *CoreML::Specification::V5::DictionaryValue::New(CoreML::Specification::V5::DictionaryValue *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::V5::DictionaryValue *v3;

  v3 = (CoreML::Specification::V5::DictionaryValue *)operator new();
  CoreML::Specification::V5::DictionaryValue::DictionaryValue(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::V5::DictionaryValue>(a2, v3);
  return v3;
}

void sub_217FDE6D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::V5::DictionaryValue>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::DictionaryValue>);
  return result;
}

uint64_t CoreML::Specification::V5::DictionaryValue::Clear(CoreML::Specification::V5::DictionaryValue *this)
{
  return _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::DictionaryValue_KeyValuePair>::TypeHandler>((uint64_t)this + 16);
}

uint64_t CoreML::Specification::V5::DictionaryValue::MergePartialFromCodedStream(CoreML::Specification::V5::DictionaryValue *this, char **a2, unsigned int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::V5::DictionaryValue_KeyValuePair *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t result;

  v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_7:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_8;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_7;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::DictionaryValue_KeyValuePair>::TypeHandler>((uint64_t)v4);
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::V5::DictionaryValue_KeyValuePair::MergePartialFromCodedStream(v11, a2, v15);
        if (!(_DWORD)result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::V5::DictionaryValue::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4;
  uint64_t v6;
  int i;

  v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    v6 = this;
    for (i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::V5::DictionaryValue::ByteSizeLong(CoreML::Specification::V5::DictionaryValue *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::V5::DictionaryValue_KeyValuePair::ByteSizeLong(*(CoreML::Specification::V5::DictionaryValue_KeyValuePair **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

uint64_t CoreML::Specification::V5::DictionaryValue::IsInitialized(CoreML::Specification::V5::DictionaryValue *this)
{
  return 1;
}

_QWORD *CoreML::Specification::V5::DictionaryValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.V5.DictionaryValue");
}

CoreML::Specification::V5::Program *CoreML::Specification::V5::Program::New(CoreML::Specification::V5::Program *this)
{
  return CoreML::Specification::V5::Program::New(this, 0);
}

uint64_t CoreML::Specification::V5::Program::GetCachedSize(CoreML::Specification::V5::Program *this)
{
  return *((unsigned int *)this + 24);
}

CoreML::Specification::V5::Function *CoreML::Specification::V5::Function::New(CoreML::Specification::V5::Function *this)
{
  return CoreML::Specification::V5::Function::New(this, 0);
}

uint64_t CoreML::Specification::V5::Function::GetCachedSize(CoreML::Specification::V5::Function *this)
{
  return *((unsigned int *)this + 28);
}

CoreML::Specification::V5::Block *CoreML::Specification::V5::Block::New(CoreML::Specification::V5::Block *this)
{
  return CoreML::Specification::V5::Block::New(this, 0);
}

uint64_t CoreML::Specification::V5::Block::GetCachedSize(CoreML::Specification::V5::Block *this)
{
  return *((unsigned int *)this + 30);
}

CoreML::Specification::V5::Argument_Binding *CoreML::Specification::V5::Argument_Binding::New(CoreML::Specification::V5::Argument_Binding *this)
{
  return CoreML::Specification::V5::Argument_Binding::New(this, 0);
}

CoreML::Specification::V5::Argument *CoreML::Specification::V5::Argument::New(CoreML::Specification::V5::Argument *this)
{
  return CoreML::Specification::V5::Argument::New(this, 0);
}

uint64_t CoreML::Specification::V5::Argument::GetCachedSize(CoreML::Specification::V5::Argument *this)
{
  return *((unsigned int *)this + 10);
}

CoreML::Specification::V5::Operation *CoreML::Specification::V5::Operation::New(CoreML::Specification::V5::Operation *this)
{
  return CoreML::Specification::V5::Operation::New(this, 0);
}

uint64_t CoreML::Specification::V5::Operation::GetCachedSize(CoreML::Specification::V5::Operation *this)
{
  return *((unsigned int *)this + 34);
}

CoreML::Specification::V5::NamedValueType *CoreML::Specification::V5::NamedValueType::New(CoreML::Specification::V5::NamedValueType *this)
{
  return CoreML::Specification::V5::NamedValueType::New(this, 0);
}

uint64_t CoreML::Specification::V5::NamedValueType::GetCachedSize(CoreML::Specification::V5::NamedValueType *this)
{
  return *((unsigned int *)this + 8);
}

CoreML::Specification::V5::ValueType *CoreML::Specification::V5::ValueType::New(CoreML::Specification::V5::ValueType *this)
{
  return CoreML::Specification::V5::ValueType::New(this, 0);
}

CoreML::Specification::V5::TensorType *CoreML::Specification::V5::TensorType::New(CoreML::Specification::V5::TensorType *this)
{
  return CoreML::Specification::V5::TensorType::New(this, 0);
}

uint64_t CoreML::Specification::V5::TensorType::GetCachedSize(CoreML::Specification::V5::TensorType *this)
{
  return *((unsigned int *)this + 21);
}

CoreML::Specification::V5::TupleType *CoreML::Specification::V5::TupleType::New(CoreML::Specification::V5::TupleType *this)
{
  return CoreML::Specification::V5::TupleType::New(this, 0);
}

CoreML::Specification::V5::ListType *CoreML::Specification::V5::ListType::New(CoreML::Specification::V5::ListType *this)
{
  return CoreML::Specification::V5::ListType::New(this, 0);
}

CoreML::Specification::V5::DictionaryType *CoreML::Specification::V5::DictionaryType::New(CoreML::Specification::V5::DictionaryType *this)
{
  return CoreML::Specification::V5::DictionaryType::New(this, 0);
}

CoreML::Specification::V5::Dimension_ConstantDimension *CoreML::Specification::V5::Dimension_ConstantDimension::New(CoreML::Specification::V5::Dimension_ConstantDimension *this)
{
  return CoreML::Specification::V5::Dimension_ConstantDimension::New(this, 0);
}

CoreML::Specification::V5::Dimension_UnknownDimension *CoreML::Specification::V5::Dimension_UnknownDimension::New(CoreML::Specification::V5::Dimension_UnknownDimension *this)
{
  return CoreML::Specification::V5::Dimension_UnknownDimension::New(this, 0);
}

uint64_t CoreML::Specification::V5::Dimension_UnknownDimension::GetCachedSize(CoreML::Specification::V5::Dimension_UnknownDimension *this)
{
  return *((unsigned int *)this + 5);
}

CoreML::Specification::V5::Dimension *CoreML::Specification::V5::Dimension::New(CoreML::Specification::V5::Dimension *this)
{
  return CoreML::Specification::V5::Dimension::New(this, 0);
}

CoreML::Specification::V5::Value_ImmediateValue *CoreML::Specification::V5::Value_ImmediateValue::New(CoreML::Specification::V5::Value_ImmediateValue *this)
{
  return CoreML::Specification::V5::Value_ImmediateValue::New(this, 0);
}

CoreML::Specification::V5::Value_FileValue *CoreML::Specification::V5::Value_FileValue::New(CoreML::Specification::V5::Value_FileValue *this)
{
  return CoreML::Specification::V5::Value_FileValue::New(this, 0);
}

CoreML::Specification::V5::Value_BlobFileValue *CoreML::Specification::V5::Value_BlobFileValue::New(CoreML::Specification::V5::Value_BlobFileValue *this)
{
  return CoreML::Specification::V5::Value_BlobFileValue::New(this, 0);
}

CoreML::Specification::V5::Value *CoreML::Specification::V5::Value::New(CoreML::Specification::V5::Value *this)
{
  return CoreML::Specification::V5::Value::New(this, 0);
}

CoreML::Specification::V5::TensorValue_RepeatedFloats *CoreML::Specification::V5::TensorValue_RepeatedFloats::New(CoreML::Specification::V5::TensorValue_RepeatedFloats *this)
{
  return CoreML::Specification::V5::TensorValue_RepeatedFloats::New(this, 0);
}

CoreML::Specification::V5::TensorValue_RepeatedDoubles *CoreML::Specification::V5::TensorValue_RepeatedDoubles::New(CoreML::Specification::V5::TensorValue_RepeatedDoubles *this)
{
  return CoreML::Specification::V5::TensorValue_RepeatedDoubles::New(this, 0);
}

CoreML::Specification::V5::TensorValue_RepeatedInts *CoreML::Specification::V5::TensorValue_RepeatedInts::New(CoreML::Specification::V5::TensorValue_RepeatedInts *this)
{
  return CoreML::Specification::V5::TensorValue_RepeatedInts::New(this, 0);
}

CoreML::Specification::V5::TensorValue_RepeatedLongInts *CoreML::Specification::V5::TensorValue_RepeatedLongInts::New(CoreML::Specification::V5::TensorValue_RepeatedLongInts *this)
{
  return CoreML::Specification::V5::TensorValue_RepeatedLongInts::New(this, 0);
}

CoreML::Specification::V5::TensorValue_RepeatedBools *CoreML::Specification::V5::TensorValue_RepeatedBools::New(CoreML::Specification::V5::TensorValue_RepeatedBools *this)
{
  return CoreML::Specification::V5::TensorValue_RepeatedBools::New(this, 0);
}

CoreML::Specification::V5::TensorValue_RepeatedStrings *CoreML::Specification::V5::TensorValue_RepeatedStrings::New(CoreML::Specification::V5::TensorValue_RepeatedStrings *this)
{
  return CoreML::Specification::V5::TensorValue_RepeatedStrings::New(this, 0);
}

CoreML::Specification::V5::TensorValue_RepeatedBytes *CoreML::Specification::V5::TensorValue_RepeatedBytes::New(CoreML::Specification::V5::TensorValue_RepeatedBytes *this)
{
  return CoreML::Specification::V5::TensorValue_RepeatedBytes::New(this, 0);
}

CoreML::Specification::V5::TensorValue *CoreML::Specification::V5::TensorValue::New(CoreML::Specification::V5::TensorValue *this)
{
  return CoreML::Specification::V5::TensorValue::New(this, 0);
}

CoreML::Specification::V5::TupleValue *CoreML::Specification::V5::TupleValue::New(CoreML::Specification::V5::TupleValue *this)
{
  return CoreML::Specification::V5::TupleValue::New(this, 0);
}

CoreML::Specification::V5::ListValue *CoreML::Specification::V5::ListValue::New(CoreML::Specification::V5::ListValue *this)
{
  return CoreML::Specification::V5::ListValue::New(this, 0);
}

CoreML::Specification::V5::DictionaryValue_KeyValuePair *CoreML::Specification::V5::DictionaryValue_KeyValuePair::New(CoreML::Specification::V5::DictionaryValue_KeyValuePair *this)
{
  return CoreML::Specification::V5::DictionaryValue_KeyValuePair::New(this, 0);
}

CoreML::Specification::V5::DictionaryValue *CoreML::Specification::V5::DictionaryValue::New(CoreML::Specification::V5::DictionaryValue *this)
{
  return CoreML::Specification::V5::DictionaryValue::New(this, 0);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x219A19A08](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::erase(a1, &v5, (uint64_t)&v7);
    result = *(double *)&v7;
    v3 = v7;
    v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::erase@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  if (!*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6)
    {
      v7 = _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value>::~MapPair(v6);
      MEMORY[0x219A19A08](v7, 0x10B2C40CC7398DALL);
    }
  }
  v9 = *(_OWORD *)a2;
  v10 = a2[2];
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(*(_QWORD **)(a1 + 16), (uint64_t)&v9);
  result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = a2[2];
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(_QWORD *a1, uint64_t a2)
{
  _BOOL4 v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::revalidate_if_necessary(a2, &v12);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(void ***)a2;
  v7 = a1[4];
  v8 = *(_QWORD *)(v7 + 8 * v5);
  if (v4)
  {
    v9 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::EraseFromLinkedList((uint64_t)a1, (uint64_t)v6, *(_QWORD *)(v7 + 8 * v5));
LABEL_5:
    *(_QWORD *)(a1[4] + 8 * v5) = v9;
    goto LABEL_6;
  }
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::__erase_unique<std::string *>(v8, (const void ***)(v12 + 32));
  if (!*(_QWORD *)(v8 + 24))
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, (_QWORD **)v8);
    v9 = 0;
    *(_QWORD *)(a1[4] + ((8 * v5) | 8)) = 0;
    v5 &= ~1uLL;
    goto LABEL_5;
  }
LABEL_6:
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyNode((uint64_t)a1, v6);
  --*a1;
  if (v5 == a1[3])
  {
    v10 = a1[1];
    if (v5 < v10)
    {
      v11 = a1[4];
      do
      {
        if (*(_QWORD *)(v11 + 8 * v5))
          break;
        a1[3] = ++v5;
      }
      while (v10 != v5);
    }
  }
}

uint64_t _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value>::~MapPair(uint64_t a1)
{
  CoreML::Specification::V5::Value::~Value((CoreML::Specification::V5::Value *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::EraseFromLinkedList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a3;
  v4 = *(_QWORD *)(a3 + 32);
  if (v3 == a2)
    return v4;
  *(_QWORD *)(v3 + 32) = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::EraseFromLinkedList();
  return v3;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree(uint64_t a1, _QWORD **a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)a2, a2[1]);
  if (!v3)
    operator delete(a2);
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyNode(uint64_t a1, void **__p)
{
  if (*((char *)__p + 23) < 0)
    operator delete(*__p);
  if (!*(_QWORD *)(a1 + 40))
    operator delete(__p);
}

uint64_t std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::__erase_unique<std::string *>(uint64_t a1, const void ***a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)std::__tree<std::string *,_tc_google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(a1, a2);
  if ((uint64_t *)(a1 + 8) == v3)
    return 0;
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::erase(a1, v3);
  return 1;
}

uint64_t *std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;

  v4 = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::__remove_node_pointer(a1, a2);
  if (!*(_QWORD *)(a1 + 16))
    operator delete(a2);
  return v4;
}

uint64_t *std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::__remove_node_pointer(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*(uint64_t **)a1 == a2)
    *(_QWORD *)a1 = v3;
  --*(_QWORD *)(a1 + 24);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), a2);
  return v3;
}

void std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(a1, *a2);
    std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(a1, a2[1]);
    if (!*(_QWORD *)(a1 + 16))
      operator delete(a2);
  }
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32))
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::clear((_QWORD *)a1);
    if (!*(_QWORD *)(a1 + 40))
      operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::clear(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v2 = a1[1];
  if (v2)
  {
    v3 = 0;
    do
    {
      v4 = a1[4];
      v5 = *(_QWORD *)(v4 + 8 * v3);
      if (v5)
      {
        if (v5 == *(_QWORD *)(v4 + 8 * (v3 ^ 1)))
        {
          v7 = v3 + 1;
          *(_QWORD *)(v4 + 8 * (v3 + 1)) = 0;
          *(_QWORD *)(a1[4] + 8 * v3) = 0;
          v8 = *(uint64_t **)v5;
          do
          {
            v9 = (void **)v8[4];
            v10 = (uint64_t *)v8[1];
            v11 = v8;
            if (v10)
            {
              do
              {
                v12 = v10;
                v10 = (uint64_t *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v12 = (uint64_t *)v11[2];
                v13 = *v12 == (_QWORD)v11;
                v11 = v12;
              }
              while (!v13);
            }
            std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::erase(v5, v8);
            _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyNode((uint64_t)a1, v9);
            v8 = v12;
          }
          while (v12 != (uint64_t *)(v5 + 8));
          _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, (_QWORD **)v5);
          goto LABEL_16;
        }
        *(_QWORD *)(v4 + 8 * v3) = 0;
        do
        {
          v6 = *(_QWORD *)(v5 + 32);
          _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyNode((uint64_t)a1, (void **)v5);
          v5 = v6;
        }
        while (v6);
      }
      v7 = v3;
LABEL_16:
      v3 = v7 + 1;
      v2 = a1[1];
    }
    while (v7 + 1 < v2);
  }
  *a1 = 0;
  a1[3] = v2;
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x219A19A08](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::erase(a1, &v5, (uint64_t)&v7);
    result = *(double *)&v7;
    v3 = v7;
    v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::erase@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  if (!*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6)
    {
      v7 = _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function>::~MapPair(v6);
      MEMORY[0x219A19A08](v7, 0x10B2C40A53FFCBDLL);
    }
  }
  v9 = *(_OWORD *)a2;
  v10 = a2[2];
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(*(_QWORD **)(a1 + 16), (uint64_t)&v9);
  result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = a2[2];
  return result;
}

uint64_t _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function>::~MapPair(uint64_t a1)
{
  CoreML::Specification::V5::Function::~Function((CoreML::Specification::V5::Function *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x219A19A08](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::erase(a1, &v5, (uint64_t)&v7);
    result = *(double *)&v7;
    v3 = v7;
    v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::erase@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  if (!*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6)
    {
      v7 = _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block>::~MapPair(v6);
      MEMORY[0x219A19A08](v7, 0x10B2C4008C62E43);
    }
  }
  v9 = *(_OWORD *)a2;
  v10 = a2[2];
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(*(_QWORD **)(a1 + 16), (uint64_t)&v9);
  result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = a2[2];
  return result;
}

uint64_t _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block>::~MapPair(uint64_t a1)
{
  CoreML::Specification::V5::Block::~Block((CoreML::Specification::V5::Block *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

CoreML::Specification::V5::NamedValueType *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::NamedValueType>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::V5::NamedValueType *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::V5::NamedValueType **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::V5::NamedValueType::NamedValueType(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::NamedValueType>);
  }
  else
  {
    Aligned = (CoreML::Specification::V5::NamedValueType *)operator new();
    CoreML::Specification::V5::NamedValueType::NamedValueType(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217FDF450(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::NamedValueType>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::V5::Operation *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Operation>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::V5::Operation *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::V5::Operation **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::V5::Operation::Operation(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Operation>);
  }
  else
  {
    Aligned = (CoreML::Specification::V5::Operation *)operator new();
    CoreML::Specification::V5::Operation::Operation(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217FDF578(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Operation>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::V5::Argument_Binding *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Argument_Binding>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::V5::Argument_Binding *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::V5::Argument_Binding **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::V5::Argument_Binding::Argument_Binding(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Argument_Binding>);
  }
  else
  {
    Aligned = (CoreML::Specification::V5::Argument_Binding *)operator new();
    CoreML::Specification::V5::Argument_Binding::Argument_Binding(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217FDF6A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Argument_Binding>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::clear((uint64_t)a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x219A19A08](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::clear(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((_QWORD)v3)
  {
    v5 = v3;
    v6 = v4;
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::erase(a1, &v5, (uint64_t)&v7);
    result = *(double *)&v7;
    v3 = v7;
    v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::erase@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  if (!*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6)
    {
      v7 = _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument>::~MapPair(v6);
      MEMORY[0x219A19A08](v7, 0x10B2C40C743746ALL);
    }
  }
  v9 = *(_OWORD *)a2;
  v10 = a2[2];
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(*(_QWORD **)(a1 + 16), (uint64_t)&v9);
  result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 16) = a2[2];
  return result;
}

uint64_t _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument>::~MapPair(uint64_t a1)
{
  CoreML::Specification::V5::Argument::~Argument((CoreML::Specification::V5::Argument *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

CoreML::Specification::V5::Block *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Block>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::V5::Block *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::V5::Block **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::V5::Block::Block(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Block>);
  }
  else
  {
    Aligned = (CoreML::Specification::V5::Block *)operator new();
    CoreML::Specification::V5::Block::Block(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217FDF94C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Block>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::V5::Dimension *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Dimension>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::V5::Dimension *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::V5::Dimension **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::V5::Dimension::Dimension(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Dimension>);
  }
  else
  {
    Aligned = (CoreML::Specification::V5::Dimension *)operator new();
    CoreML::Specification::V5::Dimension::Dimension(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217FDFA74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Dimension>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::V5::ValueType *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::ValueType>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::V5::ValueType *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::V5::ValueType **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::V5::ValueType::ValueType(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::ValueType>);
  }
  else
  {
    Aligned = (CoreML::Specification::V5::ValueType *)operator new();
    CoreML::Specification::V5::ValueType::ValueType(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217FDFB9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::ValueType>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void _tc_google::protobuf::RepeatedField<float>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  _tc_google::protobuf::Arena **v4;
  _tc_google::protobuf::Arena *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *Aligned;
  uint64_t v10;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (_tc_google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    v8 = 4 * v7;
    if (v5)
      Aligned = _tc_google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x24BEDB778], v8 + 8);
    else
      Aligned = operator new(v8 + 8);
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v10 = *a1;
    if ((int)v10 >= 1)
      memcpy(Aligned + 1, v4 + 1, 4 * v10);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

CoreML::Specification::V5::Value *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Value>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::V5::Value *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::V5::Value **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::V5::Value::Value(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Value>);
  }
  else
  {
    Aligned = (CoreML::Specification::V5::Value *)operator new();
    CoreML::Specification::V5::Value::Value(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217FDFD90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Value>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

CoreML::Specification::V5::DictionaryValue_KeyValuePair *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::DictionaryValue_KeyValuePair>::TypeHandler>(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v4;
  CoreML::Specification::V5::DictionaryValue_KeyValuePair *Aligned;
  _tc_google::protobuf::Arena *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    v2 = *(int **)(a1 + 16);
    v4 = *v2;
    goto LABEL_7;
  }
  v3 = *(int *)(a1 + 8);
  v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::V5::DictionaryValue_KeyValuePair **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12))
    goto LABEL_6;
LABEL_7:
  *v2 = v4 + 1;
  v6 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    CoreML::Specification::V5::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
    _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::DictionaryValue_KeyValuePair>);
  }
  else
  {
    Aligned = (CoreML::Specification::V5::DictionaryValue_KeyValuePair *)operator new();
    CoreML::Specification::V5::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(_QWORD *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_217FDFEB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::DictionaryValue_KeyValuePair>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::DictionaryValue_KeyValuePair>::TypeHandler>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v4 = *(_QWORD *)v3;
      v5 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      *(_QWORD *)(v4 + 16) = 0;
      result = *(_QWORD *)(v4 + 24);
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      *(_QWORD *)(v4 + 24) = 0;
      v3 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

_QWORD *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D920530;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, _tc_google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D920530;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  CoreML::Specification::V5::Function *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(CoreML::Specification::V5::Function **)(a1 + 24);
  if (v3)
    CoreML::Specification::V5::Function::Clear(v3);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::V5::Function *Aligned;
  _tc_google::protobuf::Arena *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  unint64_t v16;
  unsigned int v17;
  int v18;

  v5 = (std::string **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          TagFallback = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *a2 = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = *a2;
        if (*a2 < a2[1] && *v11 == 18)
        {
          *a2 = v11 + 1;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::V5::Function **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::V5::Function::Function(Aligned);
          _tc_google::protobuf::Arena::AddListNode(v13, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Function>);
        }
        else
        {
          Aligned = (CoreML::Specification::V5::Function *)operator new();
          CoreML::Specification::V5::Function::Function(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v14 = *a2;
      if (*a2 >= a2[1] || *v14 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v14;
        *a2 = v14 + 1;
      }
      v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v16 & 0x8000000000000000) != 0)
        return 0;
      v18 = v16;
      result = CoreML::Specification::V5::Function::MergePartialFromCodedStream(Aligned, a2, v17);
      if (!(_DWORD)result)
        return result;
      result = _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_217FE0368(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::V5::Function *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::V5::Function *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::V5::Function::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  _tc_google::protobuf::io::CodedOutputStream *v6;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteString(1, v4, a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray((_tc_google::protobuf::internal::WireFormatLite *)2, v5, a2, v6);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 112) + ((9 * (__clz(*(_DWORD *)(v4 + 112) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const void **v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v6 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  *a3 = 10;
  v7 = _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v6, a3 + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  *v7 = 18;
  v9 = v7 + 1;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  if (v10 < 0x80)
  {
    LOBYTE(v11) = v10;
  }
  else
  {
    do
    {
      *v9++ = v10 | 0x80;
      v11 = v10 >> 7;
      v12 = v10 >> 14;
      v10 >>= 7;
    }
    while (v12);
  }
  *v9 = v11;
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v8 + 128))(v8, a2, v9 + 1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  char v6;
  std::string v7[2];

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/map_entry_lite.h", 162);
    v3 = _tc_google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: default_instance_ != NULL: ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, (_tc_google::protobuf::internal::LogMessage *)v3);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(a1 + 24))
    return *(_QWORD *)(a1 + 24);
  else
    return v4;
}

void sub_217FE0684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24D920608;
  if (*(_QWORD *)(a1 + 8) != a1 && !*(_QWORD *)(a1 + 32))
  {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t **_tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena(uint64_t **result)
{
  uint64_t *v1;

  v1 = *result;
  if (*result != &_tc_google::protobuf::internal::fixed_address_empty_string && v1 != 0)
  {
    if (*((char *)v1 + 23) < 0)
      operator delete((void *)*v1);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  _tc_google::protobuf::Arena *v7;
  CoreML::Specification::V5::Function *Aligned;
  const CoreML::Specification::V5::Function *v9;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::V5::Function::Function(Aligned);
          _tc_google::protobuf::Arena::AddListNode(v7, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Function>);
        }
        else
        {
          Aligned = (CoreML::Specification::V5::Function *)operator new();
          CoreML::Specification::V5::Function::Function(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v9 = (const CoreML::Specification::V5::Function *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::V5::Function::MergeFrom(*(CoreML::Specification::V5::Function **)(a1 + 24), v9);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_217FE089C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(std::string **a1, _tc_google::protobuf::Arena *a2, uint64_t a3)
{
  std::string *v6;
  std::string *v7;

  v6 = (std::string *)operator new();
  v7 = v6;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *a1 = v7;
  if (a2)
    _tc_google::protobuf::Arena::Own<std::string>(a2, v7);
}

void sub_217FE0950(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<std::string>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<std::string>);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<std::string>(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Function>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D9206B0;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, _tc_google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D9206B0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  return result;
}

CoreML::Specification::V5::Value *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  CoreML::Specification::V5::Value *result;

  v2 = *(_QWORD *)(a1 + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  result = *(CoreML::Specification::V5::Value **)(a1 + 24);
  if (result)
    result = (CoreML::Specification::V5::Value *)CoreML::Specification::V5::Value::Clear(result);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::V5::Value *Aligned;
  _tc_google::protobuf::Arena *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  unint64_t v16;
  unsigned int v17;
  int v18;

  v5 = (std::string **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          TagFallback = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *a2 = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = *a2;
        if (*a2 < a2[1] && *v11 == 18)
        {
          *a2 = v11 + 1;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::V5::Value **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::V5::Value::Value(Aligned);
          _tc_google::protobuf::Arena::AddListNode(v13, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Value>);
        }
        else
        {
          Aligned = (CoreML::Specification::V5::Value *)operator new();
          CoreML::Specification::V5::Value::Value(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v14 = *a2;
      if (*a2 >= a2[1] || *v14 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v14;
        *a2 = v14 + 1;
      }
      v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v16 & 0x8000000000000000) != 0)
        return 0;
      v18 = v16;
      result = CoreML::Specification::V5::Value::MergePartialFromCodedStream(Aligned, a2, v17);
      if (!(_DWORD)result)
        return result;
      result = _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_217FE0D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::V5::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::V5::Value *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::V5::Value::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 40) + ((9 * (__clz(*(_DWORD *)(v4 + 40) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24D920788;
  if (*(_QWORD *)(a1 + 8) != a1 && !*(_QWORD *)(a1 + 32))
  {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  _tc_google::protobuf::Arena *v7;
  CoreML::Specification::V5::Value *Aligned;
  const CoreML::Specification::V5::Value *v9;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::V5::Value::Value(Aligned);
          _tc_google::protobuf::Arena::AddListNode(v7, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Value>);
        }
        else
        {
          Aligned = (CoreML::Specification::V5::Value *)operator new();
          CoreML::Specification::V5::Value::Value(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v9 = (const CoreML::Specification::V5::Value *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::V5::Value::MergeFrom(*(CoreML::Specification::V5::Value **)(a1 + 24), v9);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_217FE10B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D920830;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, _tc_google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D920830;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  CoreML::Specification::V5::Block *v3;

  v2 = *(_QWORD *)(a1 + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(CoreML::Specification::V5::Block **)(a1 + 24);
  if (v3)
    CoreML::Specification::V5::Block::Clear(v3);
  *(_DWORD *)(a1 + 40) &= 0xFFFFFFFC;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::V5::Block *Aligned;
  _tc_google::protobuf::Arena *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  unint64_t v16;
  unsigned int v17;
  int v18;

  v5 = (std::string **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          TagFallback = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *a2 = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = *a2;
        if (*a2 < a2[1] && *v11 == 18)
        {
          *a2 = v11 + 1;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::V5::Block **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::V5::Block::Block(Aligned);
          _tc_google::protobuf::Arena::AddListNode(v13, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Block>);
        }
        else
        {
          Aligned = (CoreML::Specification::V5::Block *)operator new();
          CoreML::Specification::V5::Block::Block(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v14 = *a2;
      if (*a2 >= a2[1] || *v14 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v14;
        *a2 = v14 + 1;
      }
      v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v16 & 0x8000000000000000) != 0)
        return 0;
      v18 = v16;
      result = CoreML::Specification::V5::Block::MergePartialFromCodedStream(Aligned, a2, v17);
      if (!(_DWORD)result)
        return result;
      result = _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_217FE147C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::V5::Block *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::V5::Block *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::V5::Block::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = *(_DWORD *)(v4 + 120) + ((9 * (__clz(*(_DWORD *)(v4 + 120) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24D920908;
  if (*(_QWORD *)(a1 + 8) != a1 && !*(_QWORD *)(a1 + 32))
  {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  _tc_google::protobuf::Arena *v7;
  CoreML::Specification::V5::Block *Aligned;
  const CoreML::Specification::V5::Block *v9;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::V5::Block::Block(Aligned);
          _tc_google::protobuf::Arena::AddListNode(v7, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Block>);
        }
        else
        {
          Aligned = (CoreML::Specification::V5::Block *)operator new();
          CoreML::Specification::V5::Block::Block(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v9 = (const CoreML::Specification::V5::Block *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::V5::Block::MergeFrom(*(CoreML::Specification::V5::Block **)(a1 + 24), v9);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_217FE17A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(result + 40) = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = &unk_24D9209B0;
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(uint64_t a1, _tc_google::protobuf::Arena *a2)
{
  uint64_t result;

  if (a2)
  else
    result = operator new();
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D9209B0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 24);
    if ((int)v4 >= 1)
    {
      v5 = (uint64_t *)(*(_QWORD *)(v3 + 32) + 8);
      do
      {
        v6 = *v5++;
        result = CoreML::Specification::V5::Argument_Binding::clear_binding(v6);
        --v4;
      }
      while (v4);
      *(_DWORD *)(v3 + 24) = 0;
    }
  }
  *(_DWORD *)(v1 + 40) &= 0xFFFFFFFC;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergePartialFromCodedStream(uint64_t a1, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  unint64_t TagFallback;
  std::string *v8;
  uint64_t result;
  int v10;
  char *v11;
  CoreML::Specification::V5::Argument *Aligned;
  _tc_google::protobuf::Arena *v13;
  char *v14;
  int VarintSizeAsIntFallback;
  unint64_t v16;
  unsigned int v17;
  int v18;

  v5 = (std::string **)(a1 + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          TagFallback = 0;
        }
        else
        {
          TagFallback = *v6;
          if ((*v6 & 0x80000000) == 0)
          {
            *a2 = v6 + 1;
            goto LABEL_7;
          }
        }
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_7:
        if ((_DWORD)TagFallback != 10)
          break;
        *(_DWORD *)(a1 + 40) |= 1u;
        v8 = *(std::string **)(a1 + 16);
        if (v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
          v8 = *(std::string **)(a1 + 16);
        }
        result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v8);
        if (!(_DWORD)result)
          return result;
        v10 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 40) = v10;
        v11 = *a2;
        if (*a2 < a2[1] && *v11 == 18)
        {
          *a2 = v11 + 1;
          goto LABEL_20;
        }
      }
      if ((_DWORD)TagFallback != 18)
        break;
      v10 = *(_DWORD *)(a1 + 40);
LABEL_20:
      *(_DWORD *)(a1 + 40) = v10 | 2;
      Aligned = *(CoreML::Specification::V5::Argument **)(a1 + 24);
      if (!Aligned)
      {
        v13 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (v13)
        {
          CoreML::Specification::V5::Argument::Argument(Aligned);
          _tc_google::protobuf::Arena::AddListNode(v13, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Argument>);
        }
        else
        {
          Aligned = (CoreML::Specification::V5::Argument *)operator new();
          CoreML::Specification::V5::Argument::Argument(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v14 = *a2;
      if (*a2 >= a2[1] || *v14 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v14;
        *a2 = v14 + 1;
      }
      v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v16 & 0x8000000000000000) != 0)
        return 0;
      v18 = v16;
      result = CoreML::Specification::V5::Argument::MergePartialFromCodedStream(Aligned, a2, v17);
      if (!(_DWORD)result)
        return result;
      result = _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*a2 == a2[1] && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0;
  }
}

void sub_217FE1BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  CoreML::Specification::V5::Argument *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[10];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (CoreML::Specification::V5::Argument *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 144))(a1);
  v5 = CoreML::Specification::V5::Argument::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24D920A88;
  if (*(_QWORD *)(a1 + 8) != a1 && !*(_QWORD *)(a1 + 32))
  {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  const std::string *v6;
  _tc_google::protobuf::Arena *v7;
  CoreML::Specification::V5::Argument *Aligned;
  const CoreML::Specification::V5::Argument *v9;

  v2 = a2[10];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(_tc_google::protobuf::Arena **)(a1 + 32), (uint64_t)v6);
      else
        std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 24))
      {
        v7 = *(_tc_google::protobuf::Arena **)(a1 + 32);
        if (v7)
        {
          CoreML::Specification::V5::Argument::Argument(Aligned);
          _tc_google::protobuf::Arena::AddListNode(v7, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Argument>);
        }
        else
        {
          Aligned = (CoreML::Specification::V5::Argument *)operator new();
          CoreML::Specification::V5::Argument::Argument(Aligned);
        }
        *(_QWORD *)(a1 + 24) = Aligned;
      }
      v9 = (const CoreML::Specification::V5::Argument *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 144))(a2);
      CoreML::Specification::V5::Argument::MergeFrom(*(CoreML::Specification::V5::Argument **)(a1 + 24), v9);
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
}

void sub_217FE1E1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Argument>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::Init(uint64_t a1)
{
  _tc_google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;

  v2 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
    result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_217FE1EE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(_QWORD *a1, unint64_t a2, _tc_google::protobuf::Arena *a3)
{
  _QWORD *v6;
  _tc_google::protobuf::Arena *v8;

  *a1 = 0;
  a1[2] = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::Seed();
  a1[4] = 0;
  a1[5] = a3;
  if (a2 <= 8)
    a2 = 8;
  v8 = a3;
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v8, a2, 0);
  bzero(v6, 8 * a2);
  a1[3] = a2;
  a1[4] = v6;
  a1[1] = a2;
  return a1;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::Seed()
{
  std::random_device *v0;
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  __int128 v5;
  unsigned int v6[258];
  std::random_device v7;

  v0 = std::random_device::random_device[abi:ne180100](&v7);
  v1 = MEMORY[0x219A19624](v0);
  v2 = v1 + ((v1 / 0x7FFFFFFF) | ((v1 / 0x7FFFFFFF) << 31));
  if (v2 <= 1)
    v2 = 1;
  v6[0] = v2;
  std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](v6);
  v5 = xmmword_2186D1680;
  v3 = std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>((uint64_t)&v5, (uint64_t)v6, &v5);
  std::random_device::~random_device(&v7);
  return v3;
}

void sub_217FE201C(void *a1)
{
  uint64_t v1;

  std::random_device::~random_device((std::random_device *)(v1 - 36));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FE2004);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217FE2098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned int *std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>::__init[abi:ne180100](unsigned int *result)
{
  unsigned int v1;
  uint64_t i;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v1 = *result;
  for (i = 1; i != 257; ++i)
  {
    v3 = v1 / 0x1F31D;
    v4 = 16807 * (v1 % 0x1F31D);
    v3 *= 2836;
    v5 = v4 >= v3;
    v6 = v4 - v3;
    if (v5)
      v7 = 0;
    else
      v7 = 0x7FFFFFFF;
    v1 = v7 + v6;
    result[i] = v1;
  }
  v8 = 16807 * (v1 % 0x1F31D);
  v9 = 2836 * (v1 / 0x1F31D);
  v5 = v8 >= v9;
  v10 = v8 - v9;
  if (v5)
    v11 = 0;
  else
    v11 = 0x7FFFFFFF;
  v12 = v11 + v10;
  *result = v12;
  result[257] = v12;
  return result;
}

uint64_t std::uniform_int_distribution<unsigned long>::operator()<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3 % 0x1E)
    v3 = a3 / 0x1E + 1;
  else
    v3 = a3 / 0x1E;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      v6 = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E)
    v6 = 0;
  else
    v6 = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
LABEL_13:
  *(_QWORD *)(result + 48) = v6;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  if (v4 >= 0x1F)
    v8 = -1;
  else
    v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = *(unsigned int **)a1;
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = **(_DWORD **)a1;
    v8 = *(_DWORD *)(*(_QWORD *)a1 + 1028);
    do
    {
      do
      {
        v9 = (char *)v4
           + (((unint64_t)((((unint64_t)(v8 - 1) << 7) * (unsigned __int128)0x8000000201uLL) >> 64) >> 3) & 0xFFC);
        v4[257] = *((_DWORD *)v9 + 1);
        v10 = v7 / 0x1F31D;
        v11 = 16807 * (v7 % 0x1F31D);
        v10 *= 2836;
        v12 = v11 >= v10;
        v13 = v11 - v10;
        if (v12)
          v14 = 0;
        else
          v14 = 0x7FFFFFFF;
        v7 = v14 + v13;
        *((_DWORD *)v9 + 1) = v7;
        v8 = v4[257];
        v15 = v8 - 1;
      }
      while (v5 <= v15);
      v16 = v2 << v6;
      if (v6 >= 0x40)
        v16 = 0;
      v2 = v16 + (*(_DWORD *)(a1 + 56) & v15);
      ++v3;
    }
    while (v3 != v1);
    *v4 = v7;
  }
  else
  {
    v2 = 0;
  }
  v17 = *(_QWORD *)(a1 + 24);
  if (v1 < v17)
  {
    v18 = *(unsigned int **)a1;
    v19 = *(_QWORD *)(a1 + 48);
    v20 = *(_QWORD *)(a1 + 16);
    v21 = **(_DWORD **)a1;
    v22 = *(_DWORD *)(*(_QWORD *)a1 + 1028);
    do
    {
      do
      {
        v23 = (char *)v18
            + (((unint64_t)((((unint64_t)(v22 - 1) << 7) * (unsigned __int128)0x8000000201uLL) >> 64) >> 3) & 0xFFC);
        v18[257] = *((_DWORD *)v23 + 1);
        v24 = v21 / 0x1F31D;
        v25 = 16807 * (v21 % 0x1F31D);
        v24 *= 2836;
        v12 = v25 >= v24;
        v26 = v25 - v24;
        if (v12)
          v27 = 0;
        else
          v27 = 0x7FFFFFFF;
        v21 = v27 + v26;
        *((_DWORD *)v23 + 1) = v21;
        v22 = v18[257];
        v28 = v22 - 1;
      }
      while (v19 <= v28);
      v29 = v2 << (v20 + 1);
      if (v20 >= 0x3F)
        v29 = 0;
      v2 = v29 + (*(_DWORD *)(a1 + 60) & v28);
      ++v1;
    }
    while (v1 != v17);
    *v18 = v21;
  }
  return v2;
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(_tc_google::protobuf::Arena **a1, uint64_t a2, size_t __sz)
{
  _tc_google::protobuf::Arena *v3;

  v3 = *a1;
  if (v3)
    return _tc_google::protobuf::Arena::AllocateAligned(v3, MEMORY[0x24BEDB790], 8 * a2);
  else
    return operator new(8 * a2);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::Init(uint64_t a1)
{
  _tc_google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;

  v2 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
    result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_217FE24DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::operator[](uint64_t a1, std::string *a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_217FE25D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, std::string *a2)
{
  _tc_google::protobuf::Arena *v4;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v6;
  _tc_google::protobuf::Arena *v7;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 144);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    v7 = *a1;
    CoreML::Specification::V5::Function::Function((CoreML::Specification::V5::Function *)&Aligned[1]);
    _tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::V5::Function>(v7, &Aligned[1]);
    std::string::operator=(Aligned, a2);
  }
  else
  {
    Aligned = (std::string *)operator new();
    _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function>::MapPair(Aligned, (__int128 *)a2);
  }
  return Aligned;
}

void sub_217FE2698(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B2C40A53FFCBDLL);
  _Unwind_Resume(a1);
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x24BEDB790], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _tc_google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (_tc_google::protobuf::Arena *)a1[5];
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_217FE2C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const void **v8;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  if (!v3)
    return 0;
  v5 = 0;
  do
  {
    v8 = (const void **)v3;
    std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(a3, &v8, (uint64_t *)&v8);
    ++v5;
    v6 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;
    v3 = v6;
  }
  while (v6);
  return v5;
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_217FE2CD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(uint64_t *result, const void ***a2, const void ****a3)
{
  const void ***v4;
  uint64_t v5;
  uint64_t *v6;
  const void **v7;
  const void ****v8;
  BOOL v9;

  if (a2 != (const void ***)a3)
  {
    v4 = a2;
    v5 = (uint64_t)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_hint_unique_key_args<std::string *,std::string * const&>(v5, v6, v4 + 4, (uint64_t *)v4 + 4);
      v7 = v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ****)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ****)v4[2];
          v9 = *v8 == v4;
          v4 = (const void ***)v8;
        }
        while (!v9);
      }
      v4 = (const void ***)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_hint_unique_key_args<std::string *,std::string * const&>(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>((_QWORD *)a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((_tc_google::protobuf::Arena **)(a1 + 16), 1, 0);
    v7[4] = *a4;
    std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, const void ***a5)
{
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *a5, (const void **)a2[4]))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (uint64_t *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (const void **)v12[4], *a5))
      goto LABEL_16;
    return std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (const void **)a2[4], *a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (uint64_t *)a2[1];
      do
      {
        v15 = v14;
        v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (uint64_t *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *a5, (const void **)v15[4]))
        return std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[3] = (uint64_t *)((char *)a1[3] + 1);
  return result;
}

uint64_t *std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>(uint64_t a1, _QWORD *a2, const void ***a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 24;
    do
    {
      while (1)
      {
        v8 = v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, *a3, (const void **)v4[4]))
          break;
        v4 = (uint64_t *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, (const void **)v8[4], *a3))
        break;
      v5 = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(_tc_google::protobuf::Arena **a1, uint64_t a2, size_t __sz)
{
  _tc_google::protobuf::Arena *v3;

  v3 = *a1;
  if (v3)
    return _tc_google::protobuf::Arena::AllocateAligned(v3, MEMORY[0x24BEDB790], 40 * a2);
  else
    return operator new(40 * a2);
}

uint64_t *std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(uint64_t a1, const void ***a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>(a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((_tc_google::protobuf::Arena **)(a1 + 16), 1, 0);
    v6[4] = *a3;
    std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, v9, v7, v6);
  }
  return v6;
}

std::string *_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function>::MapPair(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::V5::Function::Function((CoreML::Specification::V5::Function *)&this[1]);
  return this;
}

void sub_217FE3194(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::OwnDestructor<std::string>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
  return result;
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::V5::Function>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Function>);
  return result;
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::operator[](uint64_t a1, std::string *a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_217FE32A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, std::string *a2)
{
  _tc_google::protobuf::Arena *v4;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v6;
  _tc_google::protobuf::Arena *v7;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 72);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    v7 = *a1;
    CoreML::Specification::V5::Value::Value((CoreML::Specification::V5::Value *)&Aligned[1]);
    _tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::V5::Value>(v7, &Aligned[1]);
    std::string::operator=(Aligned, a2);
  }
  else
  {
    Aligned = (std::string *)operator new();
    _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value>::MapPair(Aligned, (__int128 *)a2);
  }
  return Aligned;
}

void sub_217FE336C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B2C40CC7398DALL);
  _Unwind_Resume(a1);
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x24BEDB790], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _tc_google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (_tc_google::protobuf::Arena *)a1[5];
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_217FE38DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_217FE3938(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value>::MapPair(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::V5::Value::Value((CoreML::Specification::V5::Value *)&this[1]);
  return this;
}

void sub_217FE39A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::V5::Value>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Value>);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Program>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>>::MergePartialFromCodedStream(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  CoreML::Specification::V5::Function *v7;
  char *v8;
  int VarintSizeAsIntFallback;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;

  v4 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v4 != 10)
  {
    v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v10);
    *v10 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(_QWORD *)a2 = v4 + 1;
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, (std::string *)(a1 + 16)))
    return 0;
  if ((int)(*(_DWORD *)(a2 + 8) - *(_QWORD *)a2) < 1
    || **(_BYTE **)a2 != 18
    || (v5 = *(_QWORD *)(a1 + 8),
        v6 = **(_QWORD **)(v5 + 16),
        *(_QWORD *)(a1 + 40) = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::operator[](v5, (std::string *)(a1 + 16)), v6 == **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16)))
  {
LABEL_13:
    v11 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    v12 = *(_QWORD *)(a1 + 48);
    if (v12 != v11)
    {
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_QWORD *)(a1 + 48) = v11;
    }
    v13 = *(std::string **)(v11 + 16);
    *(_DWORD *)(v11 + 40) |= 1u;
    if (v13 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v11 + 16), *(_tc_google::protobuf::Arena **)(v11 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v13 = *(std::string **)(v11 + 16);
    }
    std::string::operator=(v13, (const std::string *)(a1 + 16));
    v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
    if ((_DWORD)v14)
      _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>>::UseKeyAndValueFromEntry(a1);
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
      *(_QWORD *)(a1 + 48) = 0;
    return v14;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip((_tc_google::protobuf::io::CodedInputStream *)a2, 1u);
  v7 = *(CoreML::Specification::V5::Function **)(a1 + 40);
  v8 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v8 < 0)
  {
    VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
    if (VarintSizeAsIntFallback < 0)
    {
LABEL_29:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
      return 0;
    }
  }
  else
  {
    VarintSizeAsIntFallback = *v8;
    *(_QWORD *)a2 = v8 + 1;
  }
  v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_29;
  v17 = v15;
  if (!CoreML::Specification::V5::Function::MergePartialFromCodedStream(v7, (char **)a2, v16)
    || !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17))
  {
    goto LABEL_29;
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8) || !*(_DWORD *)(a2 + 44) && *(_DWORD *)(a2 + 24) != *(_DWORD *)(a2 + 40))
    return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>>::ReadBeyondKeyValuePair(a1, a2);
  *(_DWORD *)(a2 + 32) = 0;
  v14 = 1;
  *(_BYTE *)(a2 + 36) = 1;
  return v14;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::erase(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(_QWORD *)(a1 + 16), a2, 0, &v6);
  if (!(_QWORD)v6)
    return 0;
  v4 = v6;
  v5 = v7;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::V5::Function *v6;
  CoreML::Specification::V5::Function *Aligned;
  _tc_google::protobuf::Arena *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::V5::Function **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::V5::Function **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(_tc_google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::V5::Function::Function(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v8, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Function>);
    }
    else
    {
      Aligned = (CoreML::Specification::V5::Function *)operator new();
      CoreML::Specification::V5::Function::Function(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  if (v6 != Aligned)
    CoreML::Specification::V5::Function::InternalSwap(Aligned, v6);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v9 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v9 + 40) |= 1u;
  v10 = *(_QWORD *)(v9 + 16);
  if ((uint64_t *)v10 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v9 + 16), *(_tc_google::protobuf::Arena **)(v9 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v10 = *(_QWORD *)(v9 + 16);
  }
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  v11 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v12)
    _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v12;
}

void sub_217FE3E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  _tc_google::protobuf::Arena *v1;
  uint64_t result;

  v1 = *a1;
  if (*a1)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D920530;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

std::string *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  std::string *result;
  uint64_t v4;
  CoreML::Specification::V5::Function *Aligned;
  _tc_google::protobuf::Arena *v6;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::operator[](*(_QWORD *)(a1 + 8), (std::string *)(a1 + 16));
  *(_QWORD *)(a1 + 40) = result;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::V5::Function **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(_tc_google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::V5::Function::Function(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Function>);
    }
    else
    {
      Aligned = (CoreML::Specification::V5::Function *)operator new();
      CoreML::Specification::V5::Function::Function(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    result = *(std::string **)(a1 + 40);
  }
  if (Aligned != (CoreML::Specification::V5::Function *)result)
    return (std::string *)CoreML::Specification::V5::Function::InternalSwap((CoreML::Specification::V5::Function *)result, Aligned);
  return result;
}

void sub_217FE3FC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40408AB1BCLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::MergePartialFromCodedStream(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  CoreML::Specification::V5::Value *v7;
  char *v8;
  int VarintSizeAsIntFallback;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;

  v4 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v4 != 10)
  {
    v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v10);
    *v10 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(_QWORD *)a2 = v4 + 1;
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, (std::string *)(a1 + 16)))
    return 0;
  if ((int)(*(_DWORD *)(a2 + 8) - *(_QWORD *)a2) < 1
    || **(_BYTE **)a2 != 18
    || (v5 = *(_QWORD *)(a1 + 8),
        v6 = **(_QWORD **)(v5 + 16),
        *(_QWORD *)(a1 + 40) = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::operator[](v5, (std::string *)(a1 + 16)), v6 == **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16)))
  {
LABEL_13:
    v11 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    v12 = *(_QWORD *)(a1 + 48);
    if (v12 != v11)
    {
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_QWORD *)(a1 + 48) = v11;
    }
    v13 = *(std::string **)(v11 + 16);
    *(_DWORD *)(v11 + 40) |= 1u;
    if (v13 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v11 + 16), *(_tc_google::protobuf::Arena **)(v11 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v13 = *(std::string **)(v11 + 16);
    }
    std::string::operator=(v13, (const std::string *)(a1 + 16));
    v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
    if ((_DWORD)v14)
      _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::UseKeyAndValueFromEntry(a1);
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
      *(_QWORD *)(a1 + 48) = 0;
    return v14;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip((_tc_google::protobuf::io::CodedInputStream *)a2, 1u);
  v7 = *(CoreML::Specification::V5::Value **)(a1 + 40);
  v8 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v8 < 0)
  {
    VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
    if (VarintSizeAsIntFallback < 0)
    {
LABEL_29:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
      return 0;
    }
  }
  else
  {
    VarintSizeAsIntFallback = *v8;
    *(_QWORD *)a2 = v8 + 1;
  }
  v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_29;
  v17 = v15;
  if (!CoreML::Specification::V5::Value::MergePartialFromCodedStream(v7, (char **)a2, v16)
    || !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17))
  {
    goto LABEL_29;
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8) || !*(_DWORD *)(a2 + 44) && *(_DWORD *)(a2 + 24) != *(_DWORD *)(a2 + 40))
    return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::ReadBeyondKeyValuePair(a1, a2);
  *(_DWORD *)(a2 + 32) = 0;
  v14 = 1;
  *(_BYTE *)(a2 + 36) = 1;
  return v14;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::erase(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(_QWORD *)(a1 + 16), a2, 0, &v6);
  if (!(_QWORD)v6)
    return 0;
  v4 = v6;
  v5 = v7;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::V5::Value *v6;
  CoreML::Specification::V5::Value *Aligned;
  _tc_google::protobuf::Arena *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::V5::Value **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::V5::Value **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(_tc_google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::V5::Value::Value(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v8, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Value>);
    }
    else
    {
      Aligned = (CoreML::Specification::V5::Value *)operator new();
      CoreML::Specification::V5::Value::Value(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  CoreML::Specification::V5::Value::Swap((uint64_t)Aligned, v6);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v9 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v9 + 40) |= 1u;
  v10 = *(_QWORD *)(v9 + 16);
  if ((uint64_t *)v10 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v9 + 16), *(_tc_google::protobuf::Arena **)(v9 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v10 = *(_QWORD *)(v9 + 16);
  }
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  v11 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v12)
    _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v12;
}

void sub_217FE4440(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  _tc_google::protobuf::Arena *v1;
  uint64_t result;

  v1 = *a1;
  if (*a1)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D9206B0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  std::string *v3;
  uint64_t v4;
  CoreML::Specification::V5::Value *Aligned;
  _tc_google::protobuf::Arena *v6;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::operator[](*(_QWORD *)(a1 + 8), (std::string *)(a1 + 16));
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::V5::Value **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(_tc_google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::V5::Value::Value(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Value>);
    }
    else
    {
      Aligned = (CoreML::Specification::V5::Value *)operator new();
      CoreML::Specification::V5::Value::Value(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    v3 = *(std::string **)(a1 + 40);
  }
  return CoreML::Specification::V5::Value::Swap((uint64_t)v3, Aligned);
}

void sub_217FE45AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  const void ***v8;
  const void ***v9;
  const void ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void ***v16;
  const void **v17;
  const void ***v18;
  char v19;
  BOOL v20;
  const void **v21;

  v8 = (const void ***)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10 - 1, v10))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
            v10 = (const void ***)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a2, a3);
        return result;
    }
  }
}

BOOL _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(uint64_t a1, const void ***a2, const void ***a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)*a3 + 23);
  v4 = *((char *)*a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)*a2 + 23);
  else
    v5 = (size_t)(*a2)[1];
  if (v4 >= 0)
    v6 = *a2;
  else
    v6 = **a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)*a3 + 23);
  else
    v7 = (size_t)(*a3)[1];
  if (v3 >= 0)
    v8 = *a3;
  else
    v8 = **a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

const void ***std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(const void ***result, const void ***a2, uint64_t a3)
{
  const void **v3;
  const void **v4;
  const void ***v6;
  const void ***v7;
  uint64_t v9;
  const void ***v10;
  const void ***v11;
  uint64_t v12;
  const void ***v13;
  const void **v14[9];

  if (result != a2)
  {
    v14[7] = v3;
    v14[8] = v4;
    v6 = result;
    v7 = result + 1;
    if (result + 1 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (const void ***)_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v7, v11);
        if ((_DWORD)result)
        {
          v14[0] = *v10;
          v12 = v9;
          while (1)
          {
            *(const void ***)((char *)v6 + v12 + 8) = *(const void ***)((char *)v6 + v12);
            if (!v12)
              break;
            v12 -= 8;
            result = (const void ***)_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v14, (const void ***)((char *)v6 + v12));
            if ((result & 1) == 0)
            {
              v13 = (const void ***)((char *)v6 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v6;
LABEL_10:
          *v13 = v14[0];
        }
        v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

const void ***std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(const void ***result, const void ***a2, uint64_t a3)
{
  const void **v3;
  const void **v4;
  const void ***v6;
  const void ***v7;
  const void ***v9;
  const void ***v10;
  const void ***v11;
  const void **v12[9];

  if (result != a2)
  {
    v12[7] = v3;
    v12[8] = v4;
    v6 = result;
    v7 = result + 1;
    if (result + 1 != a2)
    {
      v9 = result - 1;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (const void ***)_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v7, v10);
        if ((_DWORD)result)
        {
          v12[0] = *v6;
          v11 = v9;
          do
          {
            v11[2] = v11[1];
            result = (const void ***)_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v12, v11--);
          }
          while ((result & 1) != 0);
          v11[2] = v12[0];
        }
        v7 = v6 + 1;
        ++v9;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(const void ***a1, const void ***a2, const void ***a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void **v10;
  const void **v11;
  const void **v12;
  const void **v13;

  v8 = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a4, a2, a1);
  result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a4, a2, a1))return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a4, a3, a2))return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

const void ***std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(const void ***a1, const void ***a2, uint64_t a3)
{
  const void ***v4;
  const void ***v6;
  const void ***v7;
  _BOOL4 v8;
  const void **v9;
  const void **v11;

  v4 = a2;
  v11 = *a1;
  if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v11, a2 - 1))
  {
    v6 = a1;
    do
      ++v6;
    while (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v11, v6));
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v11, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v11, v4));
  }
  while (v6 < v4)
  {
    v9 = *v6;
    *v6 = *v4;
    *v4 = v9;
    do
      ++v6;
    while (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v11, v6));
    do
      --v4;
    while (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v11, v4));
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v11;
  return v6;
}

const void ***std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6;
  const void ***v7;
  const void ***v8;
  const void ***v9;
  const void ***v10;
  const void **v11;
  const void **v13;

  v6 = 0;
  v13 = *a1;
  do
    ++v6;
  while (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &a1[v6], &v13));
  v7 = &a1[v6];
  v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      --a2;
    }
    while (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2, &v13));
  }
  else
  {
    do
      --a2;
    while (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2, &v13));
  }
  if (v7 < a2)
  {
    v9 = &a1[v6];
    v10 = a2;
    do
    {
      v11 = *v9;
      *v9 = *v10;
      *v10 = v11;
      do
        ++v9;
      while (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v9, &v13));
      do
        --v10;
      while (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10, &v13));
    }
    while (v9 < v10);
    v8 = v9 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v13;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  const void ***v8;
  const void **v9;
  const void ***v10;
  const void ***v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void ***v15;
  const void ***v16;
  const void **v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(const void ***a1, const void ***a2, const void ***a3, const void ***a4, uint64_t a5)
{
  _BOOL8 result;
  const void **v11;
  const void **v12;
  const void **v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a2, a3, a5);
  result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a5, a4, a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a5, a3, a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a5, a2, a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(const void ***a1, const void ***a2, const void ***a3, const void ***a4, const void ***a5, uint64_t a6)
{
  _BOOL8 result;
  const void **v13;
  const void **v14;
  const void **v15;
  const void **v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a2, a3, a4, a6);
  result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a6, a5, a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a6, a4, a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a6, a3, a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a6, a2, a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

const void ***std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(const void ***a1, const void ***a2, const void ***a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void ***v12;
  const void ***v13;
  const void ***v14;
  const void **v15;
  uint64_t v16;
  const void ***v17;
  const void **v18;
  const void ***v19;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>((_BOOL8)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a4, v14, a1))
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>((_BOOL8)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 1;
      do
      {
        v18 = *a1;
        v19 = (const void ***)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a4, v16);
        if (v17 == v19)
        {
          *v19 = v18;
        }
        else
        {
          *v19 = *v17;
          *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>((_BOOL8)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(_BOOL8 result, uint64_t a2, uint64_t a3, const void ***a4)
{
  const void **v4;
  const void **v5;
  unint64_t v6;
  const void ***v7;
  _BOOL8 v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  const void ***v14;
  uint64_t v15;
  const void ***v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v19[11] = v4;
    v19[12] = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v12 = ((uint64_t)a4 - result) >> 2;
      v13 = v12 + 1;
      v14 = (const void ***)(result + 8 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3
        && _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a2, (const void ***)(result + 8 * (v12 + 1)), v14 + 1))
      {
        ++v14;
        v13 = v15;
      }
      result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a2, v14, v7);
      if (!result)
      {
        v19[0] = *v7;
        do
        {
          v16 = v14;
          *v7 = *v14;
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = (const void ***)(v8 + 8 * v17);
          v18 = 2 * v13 + 2;
          if (v18 < a3
            && _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a2, (const void ***)(v8 + 8 * v17), v14 + 1))
          {
            ++v14;
            v17 = v18;
          }
          result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a2, v14, v19);
          v7 = v16;
          v13 = v17;
        }
        while (!result);
        *v16 = v19[0];
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a2, (const void ***)&a1[v6 + 1], (const void ***)&a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void **v4;
  const void **v5;
  unint64_t v6;
  _BOOL8 v8;
  unint64_t v9;
  const void ***v10;
  const void ***v11;
  const void ***v12;
  const void **v13[9];

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v13[7] = v4;
    v13[8] = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = (const void ***)(result + 8 * (v6 >> 1));
    v11 = (const void ***)(a2 - 8);
    result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10, (const void ***)(a2 - 8));
    if (result)
    {
      v13[0] = *v11;
      do
      {
        v12 = v10;
        *v11 = *v10;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (const void ***)(v8 + 8 * v9);
        result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10, v13);
        v11 = v12;
      }
      while (result);
      *v12 = v13[0];
    }
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &unk_24D920B90;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  const void ***v8;
  const void ***v9;
  const void ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void ***v16;
  const void **v17;
  const void ***v18;
  char v19;
  BOOL v20;
  const void **v21;

  v8 = (const void ***)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10 - 1, v10))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
            v10 = (const void ***)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const**>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const**>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const**,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Value> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  const void ***v8;
  const void **v9;
  const void ***v10;
  const void ***v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void ***v15;
  const void ***v16;
  const void **v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &unk_24D920C50;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Value,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::swap(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD v6[3];

  v3 = result;
  if (*result == *(_QWORD *)a2)
  {
    v4 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v4;
    v5 = result[2];
    result[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v5;
  }
  else
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::Map((uint64_t)v6, (uint64_t)result);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::operator=(v3, a2);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::operator=((_QWORD *)a2, (uint64_t)v6);
    return _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map(v6);
  }
  return result;
}

void sub_217FE5C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[3];
  __int128 v6;

  if (a1 != (_QWORD *)a2)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::clear((uint64_t)a1);
    _tc_google::protobuf::Map<std::string,std::string>::begin(a2, &v6);
    memset(v5, 0, sizeof(v5));
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::insert<_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::Map(uint64_t a1, uint64_t a2)
{
  _QWORD v5[3];
  __int128 v6;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::Init(a1);
  _tc_google::protobuf::Map<std::string,std::string>::begin(a2, &v6);
  memset(v5, 0, sizeof(v5));
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::insert<_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::const_iterator>((_QWORD *)a1, &v6, v5);
  return a1;
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::insert<_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::const_iterator>(_QWORD *result, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  std::string *v6;
  const CoreML::Specification::V5::Value *v7;
  std::string *v8;
  CoreML::Specification::V5::Value *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[4];

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v3 = v10;
  if ((_QWORD)v10 != *a3)
  {
    v5 = (uint64_t)result;
    do
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(_QWORD *)(v5 + 16), *(unsigned __int8 **)(v3 + 24), 0, v12);
      if (!v12[0])
      {
        v6 = *(std::string **)(v10 + 24);
        v7 = (const CoreML::Specification::V5::Value *)&v6[1];
        v8 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::operator[](v5, v6);
        if (v7 != (const CoreML::Specification::V5::Value *)v8)
        {
          v9 = (CoreML::Specification::V5::Value *)v8;
          CoreML::Specification::V5::Value::Clear((CoreML::Specification::V5::Value *)v8);
          CoreML::Specification::V5::Value::MergeFrom(v9, v7);
        }
      }
      result = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(&v10);
      v3 = v10;
    }
    while ((_QWORD)v10 != *a3);
  }
  return result;
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::Init(uint64_t a1)
{
  _tc_google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;

  v2 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
    result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_217FE5E58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::operator[](uint64_t a1, std::string *a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_217FE5F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, std::string *a2)
{
  _tc_google::protobuf::Arena *v4;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v6;
  _tc_google::protobuf::Arena *v7;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 152);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    v7 = *a1;
    CoreML::Specification::V5::Block::Block((CoreML::Specification::V5::Block *)&Aligned[1]);
    _tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::V5::Block>(v7, &Aligned[1]);
    std::string::operator=(Aligned, a2);
  }
  else
  {
    Aligned = (std::string *)operator new();
    _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block>::MapPair(Aligned, (__int128 *)a2);
  }
  return Aligned;
}

void sub_217FE6014(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B2C4008C62E43);
  _Unwind_Resume(a1);
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x24BEDB790], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _tc_google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (_tc_google::protobuf::Arena *)a1[5];
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_217FE6584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_217FE65E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block>::MapPair(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::V5::Block::Block((CoreML::Specification::V5::Block *)&this[1]);
  return this;
}

void sub_217FE664C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::V5::Block>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Block>);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Function>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>>::MergePartialFromCodedStream(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  CoreML::Specification::V5::Block *v7;
  char *v8;
  int VarintSizeAsIntFallback;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;

  v4 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v4 != 10)
  {
    v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v10);
    *v10 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(_QWORD *)a2 = v4 + 1;
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, (std::string *)(a1 + 16)))
    return 0;
  if ((int)(*(_DWORD *)(a2 + 8) - *(_QWORD *)a2) < 1
    || **(_BYTE **)a2 != 18
    || (v5 = *(_QWORD *)(a1 + 8),
        v6 = **(_QWORD **)(v5 + 16),
        *(_QWORD *)(a1 + 40) = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::operator[](v5, (std::string *)(a1 + 16)), v6 == **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16)))
  {
LABEL_13:
    v11 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    v12 = *(_QWORD *)(a1 + 48);
    if (v12 != v11)
    {
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_QWORD *)(a1 + 48) = v11;
    }
    v13 = *(std::string **)(v11 + 16);
    *(_DWORD *)(v11 + 40) |= 1u;
    if (v13 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v11 + 16), *(_tc_google::protobuf::Arena **)(v11 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v13 = *(std::string **)(v11 + 16);
    }
    std::string::operator=(v13, (const std::string *)(a1 + 16));
    v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
    if ((_DWORD)v14)
      _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>>::UseKeyAndValueFromEntry(a1);
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
      *(_QWORD *)(a1 + 48) = 0;
    return v14;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip((_tc_google::protobuf::io::CodedInputStream *)a2, 1u);
  v7 = *(CoreML::Specification::V5::Block **)(a1 + 40);
  v8 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v8 < 0)
  {
    VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
    if (VarintSizeAsIntFallback < 0)
    {
LABEL_29:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
      return 0;
    }
  }
  else
  {
    VarintSizeAsIntFallback = *v8;
    *(_QWORD *)a2 = v8 + 1;
  }
  v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_29;
  v17 = v15;
  if (!CoreML::Specification::V5::Block::MergePartialFromCodedStream(v7, (char **)a2, v16)
    || !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17))
  {
    goto LABEL_29;
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8) || !*(_DWORD *)(a2 + 44) && *(_DWORD *)(a2 + 24) != *(_DWORD *)(a2 + 40))
    return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>>::ReadBeyondKeyValuePair(a1, a2);
  *(_DWORD *)(a2 + 32) = 0;
  v14 = 1;
  *(_BYTE *)(a2 + 36) = 1;
  return v14;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::erase(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(_QWORD *)(a1 + 16), a2, 0, &v6);
  if (!(_QWORD)v6)
    return 0;
  v4 = v6;
  v5 = v7;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::V5::Block *v6;
  CoreML::Specification::V5::Block *Aligned;
  _tc_google::protobuf::Arena *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::V5::Block **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::V5::Block **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(_tc_google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::V5::Block::Block(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v8, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Block>);
    }
    else
    {
      Aligned = (CoreML::Specification::V5::Block *)operator new();
      CoreML::Specification::V5::Block::Block(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  if (v6 != Aligned)
    CoreML::Specification::V5::Block::InternalSwap(Aligned, v6);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v9 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v9 + 40) |= 1u;
  v10 = *(_QWORD *)(v9 + 16);
  if ((uint64_t *)v10 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v9 + 16), *(_tc_google::protobuf::Arena **)(v9 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v10 = *(_QWORD *)(v9 + 16);
  }
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  v11 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v12)
    _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v12;
}

void sub_217FE6AEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  _tc_google::protobuf::Arena *v1;
  uint64_t result;

  v1 = *a1;
  if (*a1)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D920830;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

std::string *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  std::string *result;
  uint64_t v4;
  CoreML::Specification::V5::Block *Aligned;
  _tc_google::protobuf::Arena *v6;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::operator[](*(_QWORD *)(a1 + 8), (std::string *)(a1 + 16));
  *(_QWORD *)(a1 + 40) = result;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::V5::Block **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(_tc_google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::V5::Block::Block(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Block>);
    }
    else
    {
      Aligned = (CoreML::Specification::V5::Block *)operator new();
      CoreML::Specification::V5::Block::Block(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    result = *(std::string **)(a1 + 40);
  }
  if (Aligned != (CoreML::Specification::V5::Block *)result)
    return (std::string *)CoreML::Specification::V5::Block::InternalSwap((CoreML::Specification::V5::Block *)result, Aligned);
  return result;
}

void sub_217FE6C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  const void ***v8;
  const void ***v9;
  const void ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void ***v16;
  const void **v17;
  const void ***v18;
  char v19;
  BOOL v20;
  const void **v21;

  v8 = (const void ***)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10 - 1, v10))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
            v10 = (const void ***)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const**>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const**>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const**,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Block> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  const void ***v8;
  const void **v9;
  const void ***v10;
  const void ***v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void ***v15;
  const void ***v16;
  const void **v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &unk_24D920D38;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Block,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::NamedValueType>::TypeHandler>(_tc_google::protobuf::Arena **a1, CoreML::Specification::V5::NamedValueType **a2, CoreML::Specification::V5::NamedValueType **a3, signed int a4, signed int a5)
{
  uint64_t v10;
  CoreML::Specification::V5::NamedValueType **v11;
  CoreML::Specification::V5::NamedValueType **v12;
  CoreML::Specification::V5::NamedValueType *v13;
  CoreML::Specification::V5::NamedValueType *v14;
  CoreML::Specification::V5::NamedValueType *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::V5::NamedValueType **v18;
  CoreML::Specification::V5::NamedValueType **v19;
  CoreML::Specification::V5::NamedValueType *v20;
  CoreML::Specification::V5::NamedValueType *Aligned;

  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::NamedValueType>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *a1;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::V5::NamedValueType::NamedValueType(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::NamedValueType>);
      }
      else
      {
        Aligned = (CoreML::Specification::V5::NamedValueType *)operator new();
        CoreML::Specification::V5::NamedValueType::NamedValueType(Aligned);
      }
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::NamedValueType>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
}

void sub_217FE7344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::NamedValueType>::Merge(CoreML::Specification::V5::NamedValueType *a1, CoreML::Specification::V5::NamedValueType *this)
{
  CoreML::Specification::V5::NamedValueType::MergeFrom(this, a1);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::swap(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD v6[3];

  v3 = result;
  if (*result == *(_QWORD *)a2)
  {
    v4 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v4;
    v5 = result[2];
    result[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v5;
  }
  else
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::Map((uint64_t)v6, (uint64_t)result);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::operator=(v3, a2);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::operator=((_QWORD *)a2, (uint64_t)v6);
    return _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::~Map(v6);
  }
  return result;
}

void sub_217FE7400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD v5[3];
  __int128 v6;

  if (a1 != (_QWORD *)a2)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::clear((uint64_t)a1);
    _tc_google::protobuf::Map<std::string,std::string>::begin(a2, &v6);
    memset(v5, 0, sizeof(v5));
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::insert<_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::Map(uint64_t a1, uint64_t a2)
{
  _QWORD v5[3];
  __int128 v6;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::Init(a1);
  _tc_google::protobuf::Map<std::string,std::string>::begin(a2, &v6);
  memset(v5, 0, sizeof(v5));
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::insert<_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::const_iterator>((_QWORD *)a1, &v6, v5);
  return a1;
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::insert<_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::const_iterator>(_QWORD *result, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  std::string *v6;
  const CoreML::Specification::V5::Block *v7;
  std::string *v8;
  CoreML::Specification::V5::Block *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[4];

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v3 = v10;
  if ((_QWORD)v10 != *a3)
  {
    v5 = (uint64_t)result;
    do
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(_QWORD *)(v5 + 16), *(unsigned __int8 **)(v3 + 24), 0, v12);
      if (!v12[0])
      {
        v6 = *(std::string **)(v10 + 24);
        v7 = (const CoreML::Specification::V5::Block *)&v6[1];
        v8 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Block>::operator[](v5, v6);
        if (v7 != (const CoreML::Specification::V5::Block *)v8)
        {
          v9 = (CoreML::Specification::V5::Block *)v8;
          CoreML::Specification::V5::Block::Clear((CoreML::Specification::V5::Block *)v8);
          CoreML::Specification::V5::Block::MergeFrom(v9, v7);
        }
      }
      result = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(&v10);
      v3 = v10;
    }
    while ((_QWORD)v10 != *a3);
  }
  return result;
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x219A19A08](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Block>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  const std::string **v18;
  std::string **v19;
  const std::string *v20;
  std::string *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        Aligned = (std::string *)operator new();
        Aligned->__r_.__value_.__l.__size_ = 0;
        Aligned->__r_.__value_.__r.__words[2] = 0;
        Aligned->__r_.__value_.__r.__words[0] = 0;
      }
      result = std::string::operator=(Aligned, v20);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Operation>::TypeHandler>(_tc_google::protobuf::Arena **a1, CoreML::Specification::V5::Operation **a2, CoreML::Specification::V5::Operation **a3, signed int a4, signed int a5)
{
  uint64_t v10;
  CoreML::Specification::V5::Operation **v11;
  CoreML::Specification::V5::Operation **v12;
  CoreML::Specification::V5::Operation *v13;
  CoreML::Specification::V5::Operation *v14;
  CoreML::Specification::V5::Operation *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::V5::Operation **v18;
  CoreML::Specification::V5::Operation **v19;
  CoreML::Specification::V5::Operation *v20;
  CoreML::Specification::V5::Operation *Aligned;

  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Operation>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *a1;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::V5::Operation::Operation(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Operation>);
      }
      else
      {
        Aligned = (CoreML::Specification::V5::Operation *)operator new();
        CoreML::Specification::V5::Operation::Operation(Aligned);
      }
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Operation>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
}

void sub_217FE7838(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Operation>::Merge(CoreML::Specification::V5::Operation *a1, CoreML::Specification::V5::Operation *this)
{
  CoreML::Specification::V5::Operation::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Argument_Binding>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Argument>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Argument_Binding>::TypeHandler>(_tc_google::protobuf::Arena **a1, CoreML::Specification::V5::Argument_Binding **a2, CoreML::Specification::V5::Argument_Binding **a3, signed int a4, signed int a5)
{
  uint64_t v10;
  CoreML::Specification::V5::Argument_Binding **v11;
  CoreML::Specification::V5::Argument_Binding **v12;
  CoreML::Specification::V5::Argument_Binding *v13;
  CoreML::Specification::V5::Argument_Binding *v14;
  CoreML::Specification::V5::Argument_Binding *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::V5::Argument_Binding **v18;
  CoreML::Specification::V5::Argument_Binding **v19;
  CoreML::Specification::V5::Argument_Binding *v20;
  CoreML::Specification::V5::Argument_Binding *Aligned;

  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Argument_Binding>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *a1;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::V5::Argument_Binding::Argument_Binding(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Argument_Binding>);
      }
      else
      {
        Aligned = (CoreML::Specification::V5::Argument_Binding *)operator new();
        CoreML::Specification::V5::Argument_Binding::Argument_Binding(Aligned);
      }
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Argument_Binding>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
}

void sub_217FE7998(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Argument_Binding>::Merge(CoreML::Specification::V5::Argument_Binding *a1, CoreML::Specification::V5::Argument_Binding *this)
{
  CoreML::Specification::V5::Argument_Binding::MergeFrom(this, a1);
}

_QWORD *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::Init(uint64_t a1)
{
  _tc_google::protobuf::Arena *v2;
  _QWORD *Aligned;
  _QWORD *result;

  v2 = *(_tc_google::protobuf::Arena **)a1;
  if (*(_QWORD *)a1)
  {
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
    result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap>);
  }
  else
  {
    Aligned = (_QWORD *)operator new();
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, 0);
  }
  *(_QWORD *)(a1 + 16) = Aligned;
  return result;
}

void sub_217FE7A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::operator[](uint64_t a1, std::string *a2)
{
  std::string **v4;
  std::string *ValueTypeInternal;

  v4 = (std::string **)_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[4];
  std::string v6;
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v7 = 0;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::insert(a1, (__int128 *)&v6, (uint64_t)v5);
  v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v3 + 24;
}

void sub_217FE7B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, std::string *a2)
{
  _tc_google::protobuf::Arena *v4;
  std::string *Aligned;
  _tc_google::protobuf::Arena *v6;
  _tc_google::protobuf::Arena *v7;

  v4 = *a1;
  if (v4)
  {
    Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 72);
    v6 = *a1;
    Aligned->__r_.__value_.__l.__size_ = 0;
    Aligned->__r_.__value_.__r.__words[2] = 0;
    Aligned->__r_.__value_.__r.__words[0] = 0;
    _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
    v7 = *a1;
    CoreML::Specification::V5::Argument::Argument((CoreML::Specification::V5::Argument *)&Aligned[1]);
    _tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::V5::Argument>(v7, &Aligned[1]);
    std::string::operator=(Aligned, a2);
  }
  else
  {
    Aligned = (std::string *)operator new();
    _tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument>::MapPair(Aligned, (__int128 *)a2);
  }
  return Aligned;
}

void sub_217FE7C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10B2C40C743746ALL);
  _Unwind_Resume(a1);
}

double _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _tc_google::protobuf::Arena *v10;
  std::string *Aligned;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((_QWORD)v17)
  {
    v7 = *((_QWORD *)&v17 + 1);
    v8 = v18;
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_BYTE *)(a3 + 24) = 0;
  }
  else
  {
    if ((_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1) & 1) != 0)
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      v17 = v14;
      v9 = v16;
      v18 = v15;
      v19 = v16;
    }
    else
    {
      v9 = v19;
    }
    v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10)
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x24BEDB790], 40);
    else
      Aligned = (std::string *)operator new(0x28uLL);
    v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(_QWORD *)(v12 + 24) = *((_QWORD *)a2 + 3);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(_QWORD *)(a3 + 16) = v15;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  char v7;

  v2 = a1[1];
  v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2)
      goto LABEL_16;
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v8 = result[4];
  v9 = *(_QWORD *)(v8 + 8 * a2);
  if (!v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(_QWORD *)(v8 + 8 * (a2 ^ 1)))
  {
    v10 = 0;
    v11 = *(_QWORD *)(v8 + 8 * a2);
    do
    {
      ++v10;
      v11 = *(_QWORD *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(_QWORD *)(a3 + 32) = v9;
      *(_QWORD *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(_QWORD *)(v4 + 32) = 0;
    v14 = *(_QWORD *)(v6[4] + 8 * v5);
    v15 = (const void **)v4;
    result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    v4 = result[4];
LABEL_8:
    v12 = v6[3];
    if (v5 < v12)
      v12 = v5;
    v6[3] = v12;
    goto LABEL_11;
  }
  *(_QWORD *)(a3 + 32) = 0;
  v13 = *(_QWORD *)(v8 + 8 * a2);
  v15 = (const void **)a3;
  result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _tc_google::protobuf::Arena *v9;

  v4 = a1[1];
  a1[1] = a2;
  v5 = (_QWORD *)a1[4];
  v9 = (_tc_google::protobuf::Arena *)a1[5];
  v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1])
        _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      else
        _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
    }
    ++v7;
  }
  if (!a1[5])
    operator delete(v5);
}

uint64_t *_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8[3];

  v4 = *(_QWORD *)(a2 + 8 * a3);
  do
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (_BYTE *)v4);
    result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::InsertUnique(a1, v6, v4, v8);
    v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11[3];

  v4 = *(_QWORD ***)(a2 + 8 * a3);
  v5 = *v4;
  do
  {
    v6 = (_BYTE *)v5[4];
    v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  _tc_google::protobuf::Arena *v4;
  uint64_t *Aligned;
  uint64_t v6;
  uint64_t result;
  _QWORD **v8;
  _QWORD *v9[3];

  v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4)
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x24BEDB790], 32);
  else
    Aligned = (uint64_t *)operator new(0x20uLL);
  v6 = (uint64_t)Aligned;
  v9[1] = *(_QWORD **)(a1 + 40);
  v9[2] = 0;
  v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_217FE818C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_217FE81E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument>::MapPair(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::V5::Argument::Argument((CoreML::Specification::V5::Argument *)&this[1]);
  return this;
}

void sub_217FE8254(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::OwnDestructor<CoreML::Specification::V5::Argument>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Argument>);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Operation>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>>::MergePartialFromCodedStream(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  CoreML::Specification::V5::Argument *v7;
  char *v8;
  int VarintSizeAsIntFallback;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;

  v4 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v4 != 10)
  {
    v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v10);
    *v10 = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(_QWORD *)a2 = v4 + 1;
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, (std::string *)(a1 + 16)))
    return 0;
  if ((int)(*(_DWORD *)(a2 + 8) - *(_QWORD *)a2) < 1
    || **(_BYTE **)a2 != 18
    || (v5 = *(_QWORD *)(a1 + 8),
        v6 = **(_QWORD **)(v5 + 16),
        *(_QWORD *)(a1 + 40) = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::operator[](v5, (std::string *)(a1 + 16)), v6 == **(_QWORD **)(*(_QWORD *)(a1 + 8) + 16)))
  {
LABEL_13:
    v11 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    v12 = *(_QWORD *)(a1 + 48);
    if (v12 != v11)
    {
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_QWORD *)(a1 + 48) = v11;
    }
    v13 = *(std::string **)(v11 + 16);
    *(_DWORD *)(v11 + 40) |= 1u;
    if (v13 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v11 + 16), *(_tc_google::protobuf::Arena **)(v11 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
      v13 = *(std::string **)(v11 + 16);
    }
    std::string::operator=(v13, (const std::string *)(a1 + 16));
    v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
    if ((_DWORD)v14)
      _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>>::UseKeyAndValueFromEntry(a1);
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
      *(_QWORD *)(a1 + 48) = 0;
    return v14;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip((_tc_google::protobuf::io::CodedInputStream *)a2, 1u);
  v7 = *(CoreML::Specification::V5::Argument **)(a1 + 40);
  v8 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v8 < 0)
  {
    VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
    if (VarintSizeAsIntFallback < 0)
    {
LABEL_29:
      _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
      return 0;
    }
  }
  else
  {
    VarintSizeAsIntFallback = *v8;
    *(_QWORD *)a2 = v8 + 1;
  }
  v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_29;
  v17 = v15;
  if (!CoreML::Specification::V5::Argument::MergePartialFromCodedStream(v7, (char **)a2, v16)
    || !_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17))
  {
    goto LABEL_29;
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8) || !*(_DWORD *)(a2 + 44) && *(_DWORD *)(a2 + 24) != *(_DWORD *)(a2 + 40))
    return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>>::ReadBeyondKeyValuePair(a1, a2);
  *(_DWORD *)(a2 + 32) = 0;
  v14 = 1;
  *(_BYTE *)(a2 + 36) = 1;
  return v14;
}

uint64_t _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::erase(uint64_t a1, unsigned __int8 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(_QWORD *)(a1 + 16), a2, 0, &v6);
  if (!(_QWORD)v6)
    return 0;
  v4 = v6;
  v5 = v7;
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CoreML::Specification::V5::Argument *v6;
  CoreML::Specification::V5::Argument *Aligned;
  _tc_google::protobuf::Arena *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 48) = v4;
  }
  v6 = *(CoreML::Specification::V5::Argument **)(a1 + 40);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::V5::Argument **)(v4 + 24);
  if (!Aligned)
  {
    v8 = *(_tc_google::protobuf::Arena **)(v4 + 32);
    if (v8)
    {
      CoreML::Specification::V5::Argument::Argument(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v8, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Argument>);
    }
    else
    {
      Aligned = (CoreML::Specification::V5::Argument *)operator new();
      CoreML::Specification::V5::Argument::Argument(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
  }
  CoreML::Specification::V5::Argument::Swap((uint64_t)Aligned, v6);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::erase(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  v9 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v9 + 40) |= 1u;
  v10 = *(_QWORD *)(v9 + 16);
  if ((uint64_t *)v10 == &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v9 + 16), *(_tc_google::protobuf::Arena **)(v9 + 32), (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
    v10 = *(_QWORD *)(v9 + 16);
  }
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  v11 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), a2);
  if ((_DWORD)v12)
    _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>>::UseKeyAndValueFromEntry(a1);
  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48)))
    *(_QWORD *)(a1 + 48) = 0;
  return v12;
}

void sub_217FE86EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  _tc_google::protobuf::Arena *v1;
  uint64_t result;

  v1 = *a1;
  if (*a1)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = v1;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)result = &unk_24D9209B0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  const std::string *v2;
  std::string *v3;
  uint64_t v4;
  CoreML::Specification::V5::Argument *Aligned;
  _tc_google::protobuf::Arena *v6;

  v2 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Argument>::operator[](*(_QWORD *)(a1 + 8), (std::string *)(a1 + 16));
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  Aligned = *(CoreML::Specification::V5::Argument **)(v4 + 24);
  if (!Aligned)
  {
    v6 = *(_tc_google::protobuf::Arena **)(v4 + 32);
    if (v6)
    {
      CoreML::Specification::V5::Argument::Argument(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Argument>);
    }
    else
    {
      Aligned = (CoreML::Specification::V5::Argument *)operator new();
      CoreML::Specification::V5::Argument::Argument(Aligned);
    }
    *(_QWORD *)(v4 + 24) = Aligned;
    v3 = *(std::string **)(a1 + 40);
  }
  return CoreML::Specification::V5::Argument::Swap((uint64_t)v3, Aligned);
}

void sub_217FE8858(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  const void ***v8;
  const void ***v9;
  const void ***v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void ***v16;
  const void **v17;
  const void ***v18;
  char v19;
  BOOL v20;
  const void **v21;

  v8 = (const void ***)result;
LABEL_2:
  v9 = a2 - 1;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = a2 - v10;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v10);
        if ((_DWORD)result)
        {
          v21 = *v10;
          *v10 = *v9;
          *v9 = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a3);
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[v14 >> 1];
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v10[v14 >> 1], v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, &v10[v14 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 1, v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10 + 2, &v10[v15 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v16 - 1, v16, &v10[v15 + 1], a3);
            v17 = *v10;
            *v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v10 - 1, v10))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
            v10 = (const void ***)result;
            goto LABEL_17;
          }
LABEL_12:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v10, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_15;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const**>(v10, v18, a3);
          v10 = v18 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const**>(v18 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v20)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const**,false>(v8, v18, a3, -v12, a5 & 1);
            v10 = v18 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v10, a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Argument> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  const void ***v8;
  const void **v9;
  const void ***v10;
  const void ***v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const void ***v15;
  const void ***v16;
  const void **v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *a3)
{
  uint64_t result;

  if (a3)
  else
    result = operator new();
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &unk_24D920E20;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 48) = a1;
  *(_QWORD *)(result + 56) = a2;
  *(_DWORD *)(result + 40) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Argument,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Block>::TypeHandler>(uint64_t result, CoreML::Specification::V5::Block **a2, CoreML::Specification::V5::Block **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::V5::Block **v11;
  CoreML::Specification::V5::Block **v12;
  CoreML::Specification::V5::Block *v13;
  CoreML::Specification::V5::Block *v14;
  CoreML::Specification::V5::Block *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::V5::Block **v18;
  CoreML::Specification::V5::Block **v19;
  CoreML::Specification::V5::Block *v20;
  CoreML::Specification::V5::Block *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Block>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::V5::Block::Block(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Block>);
      }
      else
      {
        Aligned = (CoreML::Specification::V5::Block *)operator new();
        CoreML::Specification::V5::Block::Block(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Block>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_217FE8F2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4058FDD882);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Block>::Merge(CoreML::Specification::V5::Block *a1, CoreML::Specification::V5::Block *this)
{
  return CoreML::Specification::V5::Block::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::NamedValueType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::ValueType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Dimension>::TypeHandler>(_tc_google::protobuf::Arena **a1, CoreML::Specification::V5::Dimension **a2, CoreML::Specification::V5::Dimension **a3, signed int a4, signed int a5)
{
  uint64_t v10;
  CoreML::Specification::V5::Dimension **v11;
  CoreML::Specification::V5::Dimension **v12;
  CoreML::Specification::V5::Dimension *v13;
  CoreML::Specification::V5::Dimension *v14;
  CoreML::Specification::V5::Dimension *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::V5::Dimension **v18;
  CoreML::Specification::V5::Dimension **v19;
  CoreML::Specification::V5::Dimension *v20;
  CoreML::Specification::V5::Dimension *Aligned;

  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Dimension>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *a1;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::V5::Dimension::Dimension(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Dimension>);
      }
      else
      {
        Aligned = (CoreML::Specification::V5::Dimension *)operator new();
        CoreML::Specification::V5::Dimension::Dimension(Aligned);
      }
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Dimension>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
}

void sub_217FE90A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Dimension>::Merge(CoreML::Specification::V5::Dimension *a1, CoreML::Specification::V5::Dimension *this)
{
  CoreML::Specification::V5::Dimension::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TupleType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::ValueType>::TypeHandler>(uint64_t result, CoreML::Specification::V5::ValueType **a2, CoreML::Specification::V5::ValueType **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::V5::ValueType **v11;
  CoreML::Specification::V5::ValueType **v12;
  CoreML::Specification::V5::ValueType *v13;
  CoreML::Specification::V5::ValueType *v14;
  CoreML::Specification::V5::ValueType *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::V5::ValueType **v18;
  CoreML::Specification::V5::ValueType **v19;
  CoreML::Specification::V5::ValueType *v20;
  CoreML::Specification::V5::ValueType *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::ValueType>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::V5::ValueType::ValueType(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::ValueType>);
      }
      else
      {
        Aligned = (CoreML::Specification::V5::ValueType *)operator new();
        CoreML::Specification::V5::ValueType::ValueType(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::ValueType>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_217FE91EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::ValueType>::Merge(CoreML::Specification::V5::ValueType *a1, CoreML::Specification::V5::ValueType *this)
{
  return CoreML::Specification::V5::ValueType::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::ListType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::DictionaryType>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Dimension_ConstantDimension>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Dimension_UnknownDimension>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Dimension>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Value_ImmediateValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Value_FileValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Value_BlobFileValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::Value>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedFloats>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedDoubles>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedInts>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedLongInts>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _tc_google::protobuf::RepeatedField<BOOL>::Reserve(unsigned int *a1, int a2)
{
  signed int v2;
  _tc_google::protobuf::Arena **v4;
  _tc_google::protobuf::Arena *v5;
  int v6;
  int v7;
  _QWORD *Aligned;
  size_t v9;

  v2 = a1[1];
  if (v2 < a2)
  {
    v4 = (_tc_google::protobuf::Arena **)*((_QWORD *)a1 + 1);
    if (v4)
      v5 = *v4;
    else
      v5 = 0;
    v6 = 2 * v2;
    if (v6 <= a2)
      v6 = a2;
    if (v6 <= 4)
      v7 = 4;
    else
      v7 = v6;
    if (v5)
      Aligned = _tc_google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x24BEDB778], (v7 + 8));
    else
      Aligned = operator new((v7 + 8));
    *((_QWORD *)a1 + 1) = Aligned;
    *Aligned = v5;
    a1[1] = v7;
    v9 = *a1;
    if ((int)v9 >= 1)
      memcpy(Aligned + 1, v4 + 1, v9);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedBools>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedStrings>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue_RepeatedBytes>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TensorValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::TupleValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::Value>::TypeHandler>(uint64_t result, CoreML::Specification::V5::Value **a2, CoreML::Specification::V5::Value **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::V5::Value **v11;
  CoreML::Specification::V5::Value **v12;
  CoreML::Specification::V5::Value *v13;
  CoreML::Specification::V5::Value *v14;
  CoreML::Specification::V5::Value *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::V5::Value **v18;
  CoreML::Specification::V5::Value **v19;
  CoreML::Specification::V5::Value *v20;
  CoreML::Specification::V5::Value *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Value>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::V5::Value::Value(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::Value>);
      }
      else
      {
        Aligned = (CoreML::Specification::V5::Value *)operator new();
        CoreML::Specification::V5::Value::Value(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Value>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_217FE9550(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::Value>::Merge(CoreML::Specification::V5::Value *a1, CoreML::Specification::V5::Value *this)
{
  return CoreML::Specification::V5::Value::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::ListValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::DictionaryValue_KeyValuePair>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::V5::DictionaryValue>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::V5::DictionaryValue_KeyValuePair>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::V5::DictionaryValue_KeyValuePair **a3, signed int a4, signed int a5)
{
  _tc_google::protobuf::Arena **v9;
  uint64_t v10;
  CoreML::Specification::V5::DictionaryValue_KeyValuePair **v11;
  std::string **v12;
  CoreML::Specification::V5::DictionaryValue_KeyValuePair *v13;
  CoreML::Specification::V5::DictionaryValue_KeyValuePair *v14;
  std::string *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  CoreML::Specification::V5::DictionaryValue_KeyValuePair **v18;
  CoreML::Specification::V5::DictionaryValue_KeyValuePair **v19;
  CoreML::Specification::V5::DictionaryValue_KeyValuePair *v20;
  CoreML::Specification::V5::DictionaryValue_KeyValuePair *Aligned;

  v9 = (_tc_google::protobuf::Arena **)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::DictionaryValue_KeyValuePair>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = (CoreML::Specification::V5::DictionaryValue_KeyValuePair **)&a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::V5::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::V5::DictionaryValue_KeyValuePair>);
      }
      else
      {
        Aligned = (CoreML::Specification::V5::DictionaryValue_KeyValuePair *)operator new();
        CoreML::Specification::V5::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
      }
      result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::DictionaryValue_KeyValuePair>::Merge(v20, (std::string *)Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void sub_217FE96C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::V5::DictionaryValue_KeyValuePair>::Merge(CoreML::Specification::V5::DictionaryValue_KeyValuePair *a1, std::string *this)
{
  return CoreML::Specification::V5::DictionaryValue_KeyValuePair::MergeFrom(this, a1);
}

uint64_t _GLOBAL__sub_I_MIL_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::get_tsd_id(turi *this)
{
  unsigned __int8 v1;

  {
    turi::get_tsd_id(void)::keys = 0;
    pthread_key_create((pthread_key_t *)&turi::get_tsd_id(void)::keys, (void (__cdecl *)(void *))turi::destroy_tls_data);
  }
  return turi::get_tsd_id(void)::keys;
}

void sub_217FE979C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_BYTE *turi::create_tls_data(turi *this)
{
  _BYTE *v2;
  uint64_t v3;
  turi *v4;
  _QWORD *v5;
  pthread_key_t tsd_id;

  v2 = (_BYTE *)operator new();
  *(_QWORD *)v2 = this;
  v2[8] = 0;
  *((_QWORD *)v2 + 2) = 0;
  v3 = operator new();
  v4 = (turi *)boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>::unordered_map(v3);
  v5 = (_QWORD *)*((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = v3;
  if (v5)
    std::default_delete<boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>>::operator()[abi:ne180100]((uint64_t)(v2 + 16), v5);
  tsd_id = turi::get_tsd_id(v4);
  pthread_setspecific(tsd_id, v2);
  return v2;
}

void sub_217FE9848(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v4 = v3;
  MEMORY[0x219A19A08](v4, 0x1020C40D1E6F92FLL);
  v6 = (_QWORD *)*v2;
  *v2 = 0;
  if (v6)
    std::default_delete<boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>>::operator()[abi:ne180100]((uint64_t)v2, v6);
  MEMORY[0x219A19A08](v1, 0x1020C40D090CC53);
  _Unwind_Resume(a1);
}

_BYTE *turi::thread::get_tls_data(turi::thread *this)
{
  pthread_key_t tsd_id;
  _BYTE *result;

  tsd_id = turi::get_tsd_id(this);
  result = pthread_getspecific(tsd_id);
  if (!result)
    return turi::create_tls_data(0);
  return result;
}

uint64_t turi::destroy_tls_data(uint64_t this, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (this)
  {
    v4 = *(_QWORD **)(this + 16);
    v2 = (_QWORD *)(this + 16);
    v3 = v4;
    *v2 = 0;
    if (v4)
      std::default_delete<boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>>::operator()[abi:ne180100]((uint64_t)v2, v3);
    JUMPOUT(0x219A19A08);
  }
  return this;
}

uint64_t turi::thread::invoke(turi **this, void *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)(this + 1);
  turi::create_tls_data(*this);
  boost::function0<void>::operator()(v3);
  boost::function0<void>::~function0(v3);
  v4 = MEMORY[0x219A19A08](this, 0x10E2C40FB0CDD78);
  if (turi::__thr_callback)
    turi::__thr_callback(v4);
  return 0;
}

uint64_t boost::function0<void>::operator()(_QWORD *a1)
{
  std::runtime_error v2;

  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&unk_24D91D228;
    boost::throw_exception<boost::bad_function_call>(&v2);
  }
  return (*(uint64_t (**)(_QWORD *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_217FE9B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::thread::join(uint64_t this, turi::thread *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  __int128 v5;
  _QWORD *exception;
  std::string::size_type v7;
  void **v8;
  std::string v9;
  void *v10;

  v10 = 0;
  if (*(_BYTE *)(this + 24))
  {
    this = pthread_join(*(pthread_t *)(this + 8), &v10);
    if (v10)
    {
      v8 = (void **)v10;
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
        if (*((char *)v8 + 23) < 0)
          operator delete(*v8);
      }
      else
      {
        v5 = *(_OWORD *)v10;
        v9.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
      }
      MEMORY[0x219A19A08](v8, 0x1012C40EC159624);
      exception = __cxa_allocate_exception(0x18uLL);
      v7 = v9.__r_.__value_.__r.__words[2];
      *(_OWORD *)exception = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
      exception[2] = v7;
      memset(&v9, 0, sizeof(v9));
    }
    if ((_DWORD)this)
    {
      v2 = (_QWORD *)MEMORY[0x24BEDB310];
      v3 = std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x24BEDB310], "Major error in join");
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v3);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "pthread_join() returned error ");
      v4 = (_QWORD *)std::ostream::operator<<();
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
      exit(1);
    }
  }
  return this;
}

void sub_217FE9CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

uint64_t turi::thread::cpu_count(turi::thread *this)
{
  char *v1;
  uint64_t result;

  v1 = getenv("OMP_NUM_THREADS");
  if (v1 && (LODWORD(result) = atoi(v1), (int)result > 0))
    return result;
  else
    return sysconf(58);
}

uint64_t turi::thread::launch(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  _QWORD *v9;
  pthread_attr_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  turi::get_tsd_id((turi *)a1);
  if (*(_BYTE *)(a1 + 24))
    turi::thread::launch(boost::function<void ()(void)> const&)::$_0::operator()();
  if (pthread_attr_init(&v10))
    turi::thread::launch(boost::function<void ()(void)> const&)::$_1::operator()();
  if (pthread_attr_setstacksize(&v10, *(_QWORD *)a1))
    turi::thread::launch(boost::function<void ()(void)> const&)::$_2::operator()();
  if (pthread_attr_setdetachstate(&v10, 1))
    turi::thread::launch(boost::function<void ()(void)> const&)::$_3::operator()();
  v4 = operator new();
  v5 = (void *)v4;
  *(_QWORD *)v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v4 + 8) = 0;
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(v4 + 8) = v6;
    if ((v6 & 1) != 0)
    {
      *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(v4 + 32) = a2[3];
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, v4 + 16, 0);
    }
  }
  v7 = pthread_create((pthread_t *)(a1 + 8), &v10, (void *(__cdecl *)(void *))turi::thread::invoke, v5);
  *(_BYTE *)(a1 + 24) = 1;
  if (v7)
  {
    std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x24BEDB310], "Major error in thread_group.launch (pthread_create). Error: ");
    v9 = (_QWORD *)std::ostream::operator<<();
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v9);
    exit(1);
  }
  result = pthread_attr_destroy(&v10);
  if ((_DWORD)result)
    turi::thread::launch(boost::function<void ()(void)> const&)::$_4::operator()();
  return result;
}

void sub_217FE9ECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E2C40FB0CDD78);
  _Unwind_Resume(a1);
}

void turi::thread::launch(boost::function<void ()(void)> const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.cpp", 97);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(thread_started)", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.cpp", "operator()", 217, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::thread::launch(boost::function<void ()(void)> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FE9FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::thread::launch(boost::function<void ()(void)> const&)::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.cpp", 97);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.cpp", "operator()", 222, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::thread::launch(boost::function<void ()(void)> const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FEA170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::thread::launch(boost::function<void ()(void)> const&)::$_2::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.cpp", 97);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.cpp", "operator()", 224, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::thread::launch(boost::function<void ()(void)> const&)::$_2::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FEA2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::thread::launch(boost::function<void ()(void)> const&)::$_3::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.cpp", 97);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.cpp", "operator()", 226, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::thread::launch(boost::function<void ()(void)> const&)::$_3::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FEA470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::thread::launch(boost::function<void ()(void)> const&)::$_4::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.cpp", 97);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.cpp", "operator()", 241, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::thread::launch(boost::function<void ()(void)> const&)::$_4::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FEA5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::thread_group::invoke(_QWORD *a1, uint64_t a2)
{
  int v3;
  __n128 v5;

  boost::function0<void>::operator()(a1);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 16));
  v5 = (__n128)(unint64_t)pthread_self();
  std::deque<std::pair<_opaque_pthread_t *,char const*>>::push_back((_QWORD *)(a2 + 128), &v5);
  v3 = pthread_cond_signal((pthread_cond_t *)(a2 + 80));
  assert_msg(v3 == 0, "Condition variable signal error %d", v3);
  return pthread_mutex_unlock((pthread_mutex_t *)(a2 + 16));
}

uint64_t *turi::thread_group::launch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[5];
  uint64_t (**v13[4])();
  __int128 v14;
  uint64_t v15;
  char v16;

  v4 = (*(_QWORD *)a1)++;
  v15 = v4;
  v16 = 0;
  v14 = xmmword_2186D18B0;
  v5 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  ++*(_QWORD *)(a1 + 8);
  pthread_mutex_unlock(v5);
  v8 = 0;
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v8 = *(_QWORD *)a2;
    if ((v6 & 1) != 0)
    {
      v9 = *(_OWORD *)(a2 + 8);
      v10 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 8, &v9, 0);
    }
  }
  boost::bind<void,boost::function<void ()(void)>,turi::thread_group *,boost::function<void ()(void)>,turi::thread_group *>((uint64_t)turi::thread_group::invoke, (uint64_t)&v8, a1, (uint64_t)&v11);
  boost::function<void ()(void)>::function<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(v13, &v11);
  turi::thread::launch((uint64_t)&v14, (uint64_t *)v13);
  boost::function0<void>::~function0((uint64_t *)v13);
  boost::function0<void>::~function0(v12);
  return boost::function0<void>::~function0(&v8);
}

void sub_217FEA81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  boost::function0<void>::~function0(&a19);
  boost::function0<void>::~function0(&a14);
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t *boost::bind<void,boost::function<void ()(void)>,turi::thread_group *,boost::function<void ()(void)>,turi::thread_group *>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v10 = 0;
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v10 = *(_QWORD *)a2;
    if ((v7 & 1) != 0)
    {
      v11 = *(_OWORD *)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v7 & 0xFFFFFFFFFFFFFFFELL))(a2 + 8, &v11, 0);
    }
  }
  boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>::list2((uint64_t)&v13, (uint64_t)&v10, a3);
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = 0;
  v8 = v13;
  if (v13)
  {
    *(_QWORD *)(a4 + 8) = v13;
    if ((v8 & 1) != 0)
    {
      *(_OWORD *)(a4 + 16) = v14;
      *(_QWORD *)(a4 + 32) = v15;
    }
    else
    {
      (*(void (**)(__int128 *, uint64_t, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(&v14, a4 + 16, 0);
    }
  }
  *(_QWORD *)(a4 + 40) = v16;
  boost::function0<void>::~function0(&v13);
  return boost::function0<void>::~function0(&v10);
}

void sub_217FEA938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::function0<void>::~function0((uint64_t *)va1);
  boost::function0<void>::~function0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *turi::thread_group::launch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (***v8)();
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[5];
  uint64_t (**v14[4])();
  __int128 v15;
  uint64_t v16;
  char v17;

  if (a3 == -1)
    return turi::thread_group::launch(a1, a2);
  v5 = (*(_QWORD *)a1)++;
  v16 = v5;
  v17 = 0;
  v15 = xmmword_2186D18B0;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  ++*(_QWORD *)(a1 + 8);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 16));
  v9 = 0;
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v9 = *(_QWORD *)a2;
    if ((v6 & 1) != 0)
    {
      v10 = *(_OWORD *)(a2 + 8);
      v11 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 8, &v10, 0);
    }
  }
  boost::bind<void,boost::function<void ()(void)>,turi::thread_group *,boost::function<void ()(void)>,turi::thread_group *>((uint64_t)turi::thread_group::invoke, (uint64_t)&v9, a1, (uint64_t)&v12);
  v8 = boost::function<void ()(void)>::function<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(v14, &v12);
  turi::get_tsd_id((turi *)v8);
  turi::thread::launch((uint64_t)&v15, (uint64_t *)v14);
  boost::function0<void>::~function0((uint64_t *)v14);
  boost::function0<void>::~function0(v13);
  return boost::function0<void>::~function0(&v9);
}

void sub_217FEAA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  boost::function0<void>::~function0(&a14);
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::thread_group::join(turi::thread_group *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  _opaque_pthread_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *exception;
  void *v12;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  while (*((_QWORD *)this + 1))
  {
    while (1)
    {
      v3 = *((_QWORD *)this + 21);
      if (v3)
        break;
      v4 = pthread_cond_wait((pthread_cond_t *)((char *)this + 80), v2);
      assert_msg(v4 == 0, "Condition variable wait error %d", v4);
    }
    v5 = *((_QWORD *)this + 20);
    v6 = *(_QWORD *)(*((_QWORD *)this + 17) + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v5;
    v7 = *(_opaque_pthread_t **)v6;
    v8 = *(_QWORD *)(v6 + 8);
    *((_QWORD *)this + 20) = v5 + 1;
    *((_QWORD *)this + 21) = v3 - 1;
    std::deque<std::pair<_opaque_pthread_t *,char const*>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this + 128, 1);
    v9 = *((_QWORD *)this + 1) - 1;
    *((_QWORD *)this + 1) = v9;
    if (!v9)
      *(_QWORD *)this = 0;
    pthread_mutex_unlock(v2);
    v12 = 0;
    pthread_join(v7, &v12);
    if (v8)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = v8;
      __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
    }
    pthread_mutex_lock(v2);
  }
  return pthread_mutex_unlock(v2);
}

void std::default_delete<boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,turi::any>>,unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(a2);
    JUMPOUT(0x219A19A08);
  }
}

void boost::unordered::detail::table<boost::unordered::detail::map<std::allocator<std::pair<unsigned long const,turi::any>>,unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>>>::delete_buckets(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    v3 = (_QWORD *)v2[a1[1]];
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        v5 = v3[3];
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
      v2 = (_QWORD *)a1[5];
    }
    operator delete(v2);
    a1[2] = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
}

uint64_t boost::unordered::unordered_map<unsigned long,turi::any,boost::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<std::pair<unsigned long const,turi::any>>>::unordered_map(uint64_t result)
{
  unint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t *v4;
  char *v5;
  unint64_t v6;
  char *v7;

  *(_BYTE *)result = 0;
  v1 = 38;
  v2 = (char *)&boost::unordered::detail::prime_list_template<unsigned long>::value;
  do
  {
    v3 = v1 >> 1;
    v4 = (unint64_t *)&v2[8 * (v1 >> 1)];
    v6 = *v4;
    v5 = (char *)(v4 + 1);
    v1 += ~(v1 >> 1);
    if (v6 < 0xB)
      v2 = v5;
    else
      v1 = v3;
  }
  while (v1);
  v7 = (char *)&unk_2186D17C0;
  if (v2 != "NSt3__117bad_function_callE")
    v7 = v2;
  *(_QWORD *)(result + 8) = *(_QWORD *)v7;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 1065353216;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

void sub_217FEAE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::pair<_opaque_pthread_t *,char const*>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<_opaque_pthread_t *,char const*>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void std::deque<std::pair<_opaque_pthread_t *,char const*>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_217FEB280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>::list2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v7 = 0;
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(_QWORD *)a2;
    if ((v5 & 1) != 0)
    {
      v8 = *(_OWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v5 & 0xFFFFFFFFFFFFFFFELL))(a2 + 8, &v8, 0);
    }
  }
  boost::_bi::storage2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>::storage2(a1, (uint64_t)&v7, a3);
  boost::function0<void>::~function0(&v7);
  return a1;
}

void sub_217FEB354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::_bi::storage2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>::storage2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v7 = 0;
  v5 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v7 = *(_QWORD *)a2;
    if ((v5 & 1) != 0)
    {
      v8 = *(_OWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)a1 = 0;
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v5 & 0xFFFFFFFFFFFFFFFELL))(a2 + 8, &v8, 0);
      v5 = v7;
      *(_QWORD *)a1 = 0;
      if (!v5)
        goto LABEL_10;
    }
    *(_QWORD *)a1 = v5;
    if ((v5 & 1) != 0)
    {
      *(_OWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 24) = v9;
    }
    else
    {
      (*(void (**)(__int128 *, uint64_t, _QWORD))(v5 & 0xFFFFFFFFFFFFFFFELL))(&v8, a1 + 8, 0);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
  }
LABEL_10:
  boost::function0<void>::~function0(&v7);
  *(_QWORD *)(a1 + 32) = a3;
  return a1;
}

void sub_217FEB434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function<void ()(void)>::function<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(uint64_t (***a1)(), uint64_t *a2))()
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  v6 = *a2;
  v7 = 0;
  if (v4)
  {
    v7 = v4;
    if ((v4 & 1) != 0)
    {
      v8 = *((_OWORD *)a2 + 1);
      v9 = a2[4];
    }
    else
    {
      (*(void (**)(uint64_t *, __int128 *, _QWORD))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 2, &v8, 0);
    }
  }
  v10 = a2[5];
  boost::function0<void>::function0<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(a1, (uint64_t)&v6);
  boost::function0<void>::~function0(&v7);
  return a1;
}

void sub_217FEB4E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  boost::function0<void>::~function0(v1);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function0<void>::function0<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(uint64_t (***a1)(), uint64_t a2))()
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)a2;
  v7 = 0;
  if (v4)
  {
    v7 = v4;
    if ((v4 & 1) != 0)
    {
      v8 = *(_OWORD *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 32);
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 16, &v8, 0);
    }
  }
  v10 = *(_QWORD *)(a2 + 40);
  boost::function0<void>::assign_to<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(a1, &v6);
  boost::function0<void>::~function0(&v7);
  return a1;
}

void sub_217FEB59C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  boost::function0<void>::~function0(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::function0<void>::assign_to<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(uint64_t (***a1)(), uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *result;
  uint64_t (**v7)();
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a2[1];
  v8 = *a2;
  v9 = 0;
  if (v4)
  {
    v9 = v4;
    if ((v4 & 1) != 0)
    {
      v10 = *((_OWORD *)a2 + 1);
      v11 = a2[4];
    }
    else
    {
      (*(void (**)(uint64_t *, __int128 *, _QWORD))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 2, &v10, 0);
    }
  }
  v12 = a2[5];
  v5 = boost::detail::function::basic_vtable0<void>::assign_to<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>((uint64_t)boost::function0<void>::assign_to<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>)::stored_vtable, (uint64_t)&v8, (uint64_t *)a1 + 1);
  result = boost::function0<void>::~function0(&v9);
  if (v5)
    v7 = boost::function0<void>::assign_to<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>)::stored_vtable;
  else
    v7 = 0;
  *a1 = v7;
  return result;
}

void sub_217FEB664(_Unwind_Exception *a1)
{
  uint64_t *v1;

  boost::function0<void>::~function0(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

uint64_t *boost::detail::function::void_function_obj_invoker0<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>,void>::invoke(void (***a1)(uint64_t *, _QWORD))
{
  return boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>::operator()<void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list0>((uint64_t)(*a1 + 1), *a1);
}

uint64_t boost::detail::function::basic_vtable0<void>::assign_to<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)a2;
  v10 = 0;
  if (v6)
  {
    v10 = v6;
    if ((v6 & 1) != 0)
    {
      v11 = *(_OWORD *)(a2 + 16);
      v12 = *(_QWORD *)(a2 + 32);
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 16, &v11, 0);
    }
  }
  v13 = *(_QWORD *)(a2 + 40);
  v7 = boost::detail::function::basic_vtable0<void>::assign_to<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(a1, &v9, a3);
  boost::function0<void>::~function0(&v10);
  return v7;
}

void sub_217FEB76C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  boost::function0<void>::~function0(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      result = operator new();
      v6 = result;
      *(_QWORD *)(result + 8) = 0;
      v7 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)result = *(_QWORD *)v5;
      if (v7)
      {
        *(_QWORD *)(result + 8) = v7;
        if ((v7 & 1) != 0)
        {
          v9 = *(_OWORD *)(v5 + 16);
          *(_QWORD *)(result + 32) = *(_QWORD *)(v5 + 32);
          *(_OWORD *)(result + 16) = v9;
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v7 & 0xFFFFFFFFFFFFFFFELL))(v5 + 16, result + 16, 0);
        }
      }
      *(_QWORD *)(v6 + 40) = *(_QWORD *)(v5 + 40);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v8 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        boost::function0<void>::~function0((uint64_t *)(v8 + 8));
        result = MEMORY[0x219A19A08](v8, 0x10E2C4076855C0ALL);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186D1837 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186D1837 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217FEB8D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E2C4076855C0ALL);
  _Unwind_Resume(a1);
}

uint64_t *boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>::operator()<void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list0>(uint64_t a1, void (**a2)(uint64_t *, _QWORD))
{
  void (*v3)(uint64_t *, _QWORD);
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v3 = *a2;
  v6 = 0;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)a1;
    if ((v4 & 1) != 0)
    {
      v7 = *(_OWORD *)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v4 & 0xFFFFFFFFFFFFFFFELL))(a1 + 8, &v7, 0);
    }
  }
  v3(&v6, *(_QWORD *)(a1 + 32));
  return boost::function0<void>::~function0(&v6);
}

void sub_217FEB974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::basic_vtable0<void>::assign_to<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  v8 = *a2;
  v9 = 0;
  if (v6)
  {
    v9 = v6;
    if ((v6 & 1) != 0)
    {
      v10 = *((_OWORD *)a2 + 1);
      v11 = a2[4];
    }
    else
    {
      (*(void (**)(uint64_t *, __int128 *, _QWORD))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 2, &v10, 0);
    }
  }
  v12 = a2[5];
  boost::detail::function::basic_vtable0<void>::assign_functor<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(a1, (uint64_t)&v8, a3);
  boost::function0<void>::~function0(&v9);
  return 1;
}

void sub_217FEBA2C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  boost::function0<void>::~function0(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::basic_vtable0<void>::assign_functor<boost::_bi::bind_t<void,void (*)(boost::function<void ()(void)>,turi::thread_group *),boost::_bi::list2<boost::_bi::value<boost::function<void ()(void)>>,boost::_bi::value<turi::thread_group *>>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  v6 = result;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = 0;
  if (v7)
  {
    *(_QWORD *)(result + 8) = v7;
    if ((v7 & 1) != 0)
    {
      *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v7 & 0xFFFFFFFFFFFFFFFELL))(a2 + 16, result + 16, 0);
    }
  }
  *(_QWORD *)(v6 + 40) = *(_QWORD *)(a2 + 40);
  *a3 = v6;
  return result;
}

void sub_217FEBAD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E2C4076855C0ALL);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<_opaque_pthread_t *,char const*>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t _GLOBAL__sub_I_pthread_tools_cpp()
{
  turi *v0;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  v0 = (turi *)__cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  return turi::get_tsd_id(v0);
}

turi::parallel_task_queue *turi::parallel_task_queue::parallel_task_queue(turi::parallel_task_queue *this, turi::thread_pool *a2)
{
  pthread_cond_t *v3;
  int v4;

  *(_QWORD *)this = a2;
  v3 = (pthread_cond_t *)((char *)this + 72);
  v4 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 8), 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  turi::conditional::conditional(v3);
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  return this;
}

void sub_217FEBC10(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  turi::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::parallel_task_queue::launch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17[4];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;

  v5 = (uint64_t *)a1;
  v6 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  ++v5[21];
  v7 = *v5;
  v13 = 0;
  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v16 = v5;
    v18 = 0;
LABEL_6:
    v21 = v5;
    v22 = 0;
    v17[0] = 0;
LABEL_7:
    v25 = v5;
    v26 = 0;
LABEL_8:
    v29 = v5;
    v30 = 0;
LABEL_9:
    v33 = v5;
    v34 = 0;
    goto LABEL_10;
  }
  v13 = *(_QWORD *)a2;
  if ((v8 & 1) != 0)
  {
    v14 = *(_OWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 24);
    v16 = v5;
  }
  else
  {
    (*(void (**)(uint64_t, __int128 *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(a2 + 8, &v14, 0);
    v8 = v13;
    v16 = v5;
    v18 = 0;
    if (!v13)
      goto LABEL_6;
  }
  v18 = v8;
  if ((v8 & 1) != 0)
  {
    v19 = v14;
    v20 = v15;
    v21 = v5;
    v17[0] = 0;
  }
  else
  {
    (*(void (**)(__int128 *, __int128 *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(&v14, &v19, 0);
    v8 = v18;
    v5 = v16;
    v21 = v16;
    v22 = 0;
    v17[0] = 0;
    if (!v18)
      goto LABEL_7;
  }
  v22 = v8;
  if ((v8 & 1) != 0)
  {
    v23 = v19;
    v24 = v20;
    v25 = v5;
  }
  else
  {
    (*(void (**)(__int128 *, __int128 *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(&v19, &v23, 0);
    v5 = v21;
    v8 = v22;
    v25 = v21;
    v26 = 0;
    if (!v22)
      goto LABEL_8;
  }
  v26 = v8;
  if ((v8 & 1) != 0)
  {
    v27 = v23;
    v28 = v24;
    v29 = v5;
  }
  else
  {
    (*(void (**)(__int128 *, __int128 *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(&v23, &v27, 0);
    v5 = v25;
    v8 = v26;
    v29 = v25;
    v30 = 0;
    if (!v26)
      goto LABEL_9;
  }
  v30 = v8;
  if ((v8 & 1) != 0)
  {
    v31 = v27;
    v32 = v28;
    v33 = v5;
  }
  else
  {
    (*(void (**)(__int128 *, __int128 *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(&v27, &v31, 0);
    v8 = v30;
    v5 = v29;
    v33 = v29;
    v34 = 0;
    if (!v30)
      goto LABEL_10;
  }
  v34 = v8;
  if ((v8 & 1) != 0)
  {
    v35 = v31;
    v36 = v32;
  }
  else
  {
    (*(void (**)(__int128 *, __int128 *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFFELL))(&v31, &v35, 0);
    v5 = v33;
  }
LABEL_10:
  v37 = v5;
  v9 = operator new();
  v10 = v9;
  *(_QWORD *)v9 = 0;
  v11 = v34;
  if (v34)
  {
    *(_QWORD *)v9 = v34;
    if ((v11 & 1) != 0)
    {
      *(_OWORD *)(v9 + 8) = v35;
      *(_QWORD *)(v9 + 24) = v36;
    }
    else
    {
      (*(void (**)(__int128 *, uint64_t, _QWORD))(v11 & 0xFFFFFFFFFFFFFFFELL))(&v35, v9 + 8, 0);
    }
  }
  *(_QWORD *)(v10 + 32) = v37;
  v17[1] = v10;
  boost::function0<void>::~function0(&v34);
  boost::function0<void>::~function0(&v30);
  boost::function0<void>::~function0(&v26);
  v17[0] = (uint64_t)boost::function0<void>::assign_to<turi::parallel_task_queue::launch(boost::function<void ()(void)> const&,unsigned long)::$_0>(turi::parallel_task_queue::launch(boost::function<void ()(void)> const&,unsigned long)::$_0)::stored_vtable;
  boost::function0<void>::~function0(&v22);
  boost::function0<void>::~function0(&v18);
  turi::thread_pool::launch(v7, (uint64_t)v17, a3);
  boost::function0<void>::~function0(v17);
  boost::function0<void>::~function0(&v13);
  return pthread_mutex_unlock(v6);
}

void sub_217FEBF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  pthread_mutex_t *v28;
  uint64_t v29;

  boost::function0<void>::~function0((uint64_t *)(v29 - 144));
  boost::function0<void>::~function0(&a28);
  boost::function0<void>::~function0(&a23);
  boost::function0<void>::~function0(&a18);
  boost::function0<void>::~function0(&a9);
  pthread_mutex_unlock(v28);
  _Unwind_Resume(a1);
}

uint64_t turi::thread_pool::launch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[4];
  int v15;

  v6 = (pthread_mutex_t *)(a1 + 408);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 408));
  ++*(_QWORD *)(a1 + 520);
  v10 = 0;
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v10 = *(_QWORD *)a2;
    if ((v7 & 1) != 0)
    {
      v11 = *(_OWORD *)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v7 & 0xFFFFFFFFFFFFFFFELL))(a2 + 8, &v11, 0);
    }
  }
  v13 = a3;
  v14[0] = 0;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::move_assign((uint64_t)v14, &v10);
  v15 = v13;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 232));
  std::deque<std::pair<boost::function<void ()(void)>,int>>::push_back((_QWORD *)(a1 + 184), v14);
  if (*(_WORD *)(a1 + 392))
  {
    v8 = pthread_cond_signal((pthread_cond_t *)(a1 + 296));
    assert_msg(v8 == 0, "Condition variable signal error %d", v8);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 232));
  boost::function0<void>::~function0(v14);
  boost::function0<void>::~function0(&v10);
  return pthread_mutex_unlock(v6);
}

void sub_217FEC0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  pthread_mutex_t *v16;

  pthread_mutex_unlock(v16);
  _Unwind_Resume(a1);
}

void turi::parallel_task_queue::join(turi::parallel_task_queue *this)
{
  pthread_mutex_t *v2;
  int v3;
  pthread_mutex_t *v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  _OWORD v7[3];
  std::exception_ptr v8;
  pthread_mutex_t *v9;
  char v10;

  v9 = (pthread_mutex_t *)((char *)this + 8);
  v10 = 1;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  *((_BYTE *)this + 184) = 1;
  while (*((_QWORD *)this + 22) != *((_QWORD *)this + 21))
  {
    v2 = v9;
    v9 = 0;
    v10 = 0;
    v3 = pthread_cond_wait((pthread_cond_t *)((char *)this + 72), v2);
    assert_msg(v3 == 0, "Condition variable wait error %d", v3);
    v4 = v9;
    v9 = v2;
    *(_QWORD *)&v7[0] = v4;
    LOBYTE(v4) = v10;
    v10 = 1;
    BYTE8(v7[0]) = (_BYTE)v4;
    std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)v7);
  }
  *((_BYTE *)this + 184) = 0;
  if (*((_QWORD *)this + 20))
  {
    std::exception_ptr::exception_ptr(&v8, (const std::exception_ptr *)(*(_QWORD *)(*((_QWORD *)this + 16)+ ((*((_QWORD *)this + 19) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*((_QWORD *)this + 19) & 0x1FFLL)));
    memset(v7, 0, sizeof(v7));
    std::deque<std::exception_ptr>::__move_assign((_QWORD *)this + 15, (uint64_t)v7);
    std::deque<std::exception_ptr>::~deque[abi:ne180100](v7);
    std::exception_ptr::exception_ptr(&v6, &v8);
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v9);
  }
}

void sub_217FEC268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::exception_ptr a18)
{
  uint64_t v18;

  std::exception_ptr::~exception_ptr(&a10);
  std::exception_ptr::~exception_ptr(&a18);
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100](v18 - 64);
  _Unwind_Resume(a1);
}

void turi::parallel_task_queue::~parallel_task_queue(turi::parallel_task_queue *this)
{
  turi::parallel_task_queue::join(this);
  std::deque<std::exception_ptr>::~deque[abi:ne180100]((_QWORD *)this + 15);
  turi::conditional::~conditional((pthread_cond_t *)((char *)this + 72));
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 8));
}

void sub_217FEC2D0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FEC2A8);
}

turi::thread_pool *turi::thread_pool::thread_pool(turi::thread_pool *this, uint64_t a2, char a3)
{
  turi::thread_group *v6;
  int v7;

  v6 = turi::thread_group::thread_group(this);
  turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::blocking_queue((uint64_t)v6 + 176);
  v7 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 408), 0);
  assert_msg(v7 == 0, "Mutex create error %d", v7);
  turi::conditional::conditional((pthread_cond_t *)((char *)this + 472));
  *((_BYTE *)this + 536) = 0;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_BYTE *)this + 537) = a3;
  *((_QWORD *)this + 50) = a2;
  turi::thread_pool::spawn_thread_group(this);
  return this;
}

void sub_217FEC38C(_Unwind_Exception *a1)
{
  turi::thread_group *v1;
  uint64_t v2;
  pthread_mutex_t *v3;
  pthread_cond_t *v4;

  turi::conditional::~conditional(v4);
  turi::mutex::~mutex(v3);
  turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::~blocking_queue(v2);
  turi::thread_group::~thread_group(v1);
  _Unwind_Resume(a1);
}

uint64_t *turi::thread_pool::spawn_thread_group(turi::thread_pool *this)
{
  turi::thread *v2;
  uint64_t *result;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *(*v7)(turi::thread_pool *);
  uint64_t v8;
  turi::thread_pool *v9;

  turi::config::init_cocoa_multithreaded_runtime(this);
  result = (uint64_t *)turi::thread::cpu_count(v2);
  if (*((_QWORD *)this + 50))
  {
    v4 = result;
    v5 = 0;
    do
    {
      if (*((_BYTE *)this + 537))
      {
        v8 = 0;
        v9 = this;
        v6 = (uint64_t)boost::function0<void>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::thread_pool>,boost::_bi::list1<boost::_bi::value<turi::thread_pool*>>>>(boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::thread_pool>,boost::_bi::list1<boost::_bi::value<turi::thread_pool*>>>)::stored_vtable
           + 1;
        v7 = turi::thread_pool::wait_for_task;
        turi::thread_group::launch((uint64_t)this, (uint64_t)&v6, v5 % (unint64_t)v4);
      }
      else
      {
        v8 = 0;
        v9 = this;
        v6 = (uint64_t)boost::function0<void>::assign_to<boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::thread_pool>,boost::_bi::list1<boost::_bi::value<turi::thread_pool*>>>>(boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::thread_pool>,boost::_bi::list1<boost::_bi::value<turi::thread_pool*>>>)::stored_vtable
           + 1;
        v7 = turi::thread_pool::wait_for_task;
        turi::thread_group::launch((uint64_t)this, (uint64_t)&v6);
      }
      result = boost::function0<void>::~function0(&v6);
      ++v5;
    }
    while (v5 < *((_QWORD *)this + 50));
  }
  return result;
}

void sub_217FEC488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

void turi::thread_group::~thread_group(turi::thread_group *this)
{
  turi::thread_group::join(this);
  std::deque<std::pair<_opaque_pthread_t *,char const*>>::~deque[abi:ne180100]((_QWORD *)this + 16);
  turi::conditional::~conditional((pthread_cond_t *)((char *)this + 80));
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 16));
}

uint64_t turi::thread_pool::size(turi::thread_pool *this)
{
  return *((_QWORD *)this + 50);
}

uint64_t *turi::thread_pool::wait_for_task(turi::thread_pool *this)
{
  uint64_t *v2;
  uint64_t v3;
  turi::thread *tls_data;
  uint64_t v5;
  turi::thread *v6;
  uint64_t v7;
  int v8;
  uint64_t v10[4];
  int v11;
  char v12;
  uint64_t v13[4];
  int v14;
  char v15;

  turi::thread::get_tls_data(this)[8] = 1;
  while (1)
  {
    v13[0] = 0;
    v14 = 0;
    v15 = 0;
    turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::dequeue((uint64_t)this + 176, (uint64_t)v10);
    boost::function<void ()(void)>::operator=(v13, v10);
    v14 = v11;
    v15 = v12;
    v2 = boost::function0<void>::~function0(v10);
    if (!v15)
      break;
    v3 = v14;
    tls_data = (turi::thread *)turi::thread::get_tls_data((turi::thread *)v2);
    v5 = *(_QWORD *)tls_data;
    if ((_DWORD)v3 != -1)
      *(_QWORD *)turi::thread::get_tls_data(tls_data) = v3;
    v6 = (turi::thread *)boost::function0<void>::operator()(v13);
    *(_QWORD *)turi::thread::get_tls_data(v6) = v5;
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 408));
    v7 = *((_QWORD *)this + 66) + 1;
    *((_QWORD *)this + 66) = v7;
    if (*((_BYTE *)this + 536))
    {
      if (v7 == *((_QWORD *)this + 65))
      {
        v8 = pthread_cond_signal((pthread_cond_t *)((char *)this + 472));
        assert_msg(v8 == 0, "Condition variable signal error %d", v8);
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 408));
    boost::function0<void>::~function0(v13);
  }
  return boost::function0<void>::~function0(v13);
}

void sub_217FEC61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  pthread_mutex_t *v17;

  pthread_mutex_unlock(v17);
  boost::function0<void>::~function0(&a17);
  _Unwind_Resume(a1);
}

uint64_t turi::thread_pool::destroy_all_threads(turi::thread_pool *this)
{
  int v2;
  int v3;

  turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::wait_until_empty((unsigned __int8 *)this + 176);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 232));
  *((_BYTE *)this + 176) = 0;
  v2 = pthread_cond_broadcast((pthread_cond_t *)((char *)this + 296));
  assert_msg(v2 == 0, "Condition variable broadcast error %d", v2);
  v3 = pthread_cond_broadcast((pthread_cond_t *)((char *)this + 344));
  assert_msg(v3 == 0, "Condition variable broadcast error %d", v3);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 232));
  return turi::thread_group::join(this);
}

uint64_t turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::wait_until_empty(unsigned __int8 *a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  for (; *((_QWORD *)a1 + 6); --*((_WORD *)a1 + 109))
  {
    if (!*a1)
      break;
    ++*((_WORD *)a1 + 109);
    v3 = pthread_cond_wait((pthread_cond_t *)(a1 + 168), v2);
    assert_msg(v3 == 0, "Condition variable wait error %d", v3);
  }
  pthread_mutex_unlock(v2);
  return *a1;
}

void turi::thread_pool::destroy_all_threads(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/thread_pool.cpp", 95);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/thread_pool.cpp", "operator()", 144, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::thread_pool::destroy_all_threads(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FEC91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t *turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::dequeue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v4 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  v13 = 0;
  v16 = 0;
  if (*(_QWORD *)(a1 + 48))
  {
LABEL_4:
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (v6 / 0x66));
    v8 = v6 % 0x66;
    boost::function<void ()(void)>::operator=(&v13, v7 + 40 * (v6 % 0x66));
    v16 = *(_DWORD *)(v7 + 40 * v8 + 32);
    std::deque<std::pair<boost::function<void ()(void)>,int>>::pop_front((int64x2_t *)(a1 + 8));
    if (!*(_QWORD *)(a1 + 48) && *(_WORD *)(a1 + 218))
    {
      v9 = pthread_cond_signal((pthread_cond_t *)(a1 + 168));
      assert_msg(v9 == 0, "Condition variable signal error %d", v9);
    }
    v10 = 1;
  }
  else
  {
    while (*(_BYTE *)a1)
    {
      ++*(_WORD *)(a1 + 216);
      v5 = pthread_cond_wait((pthread_cond_t *)(a1 + 120), v4);
      assert_msg(v5 == 0, "Condition variable wait error %d", v5);
      --*(_WORD *)(a1 + 216);
      if (*(_QWORD *)(a1 + 48))
        goto LABEL_4;
    }
    v10 = 0;
  }
  pthread_mutex_unlock(v4);
  *(_QWORD *)a2 = 0;
  v11 = v13;
  if (v13)
  {
    *(_QWORD *)a2 = v13;
    if ((v11 & 1) != 0)
    {
      *(_OWORD *)(a2 + 8) = v14;
      *(_QWORD *)(a2 + 24) = v15;
    }
    else
    {
      (*(void (**)(__int128 *, uint64_t, _QWORD))(v11 & 0xFFFFFFFFFFFFFFFELL))(&v14, a2 + 8, 0);
    }
  }
  *(_DWORD *)(a2 + 32) = v16;
  *(_BYTE *)(a2 + 40) = v10;
  return boost::function0<void>::~function0(&v13);
}

void sub_217FECB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::function0<void>::~function0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::thread_pool::join(turi::thread_pool *this)
{
  int v2;
  pthread_mutex_t *v4;
  char v5;
  uint64_t v6;
  char v7;

  turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::wait_until_empty((unsigned __int8 *)this + 176);
  v4 = (pthread_mutex_t *)((char *)this + 408);
  v5 = 1;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 408));
  *((_BYTE *)this + 536) = 1;
  while (*((_QWORD *)this + 66) != *((_QWORD *)this + 65))
  {
    v2 = pthread_cond_wait((pthread_cond_t *)((char *)this + 472), v4);
    assert_msg(v2 == 0, "Condition variable wait error %d", v2);
    v6 = 0;
    v5 = 1;
    v7 = 0;
    std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v6);
  }
  *((_BYTE *)this + 536) = 0;
  return std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)&v4);
}

void sub_217FECC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_lock<turi::mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::thread_pool::~thread_pool(turi::thread_pool *this)
{
  turi::thread_pool::destroy_all_threads(this);
  turi::conditional::~conditional((pthread_cond_t *)((char *)this + 472));
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 408));
  turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::~blocking_queue((uint64_t)this + 176);
  turi::thread_group::join(this);
  std::deque<std::pair<_opaque_pthread_t *,char const*>>::~deque[abi:ne180100]((_QWORD *)this + 16);
  turi::conditional::~conditional((pthread_cond_t *)((char *)this + 80));
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 16));
}

uint64_t turi::thread_pool::get_instance(turi::thread_pool *this)
{
  turi::get_pool_ptr_instance(this);
  return turi::get_pool_ptr_instance(void)::pool;
}

uint64_t turi::get_pool_ptr_instance(turi *this)
{
  unsigned __int8 v1;
  turi::thread *v2;
  unsigned __int8 v3;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;

  {
    turi::mutex::mutex(&turi::pool_creation_lock(void)::lock);
    __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::pool_creation_lock(void)::lock, &dword_217E69000);
  }
  v2 = (turi::thread *)pthread_mutex_lock(&turi::pool_creation_lock(void)::lock);
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<turi::thread_pool>::~shared_ptr[abi:ne180100], &turi::get_pool_ptr_instance(void)::pool, &dword_217E69000);
    }
  }
  if (!turi::get_pool_ptr_instance(void)::pool)
  {
    v9 = turi::thread::cpu_count(v2);
    v8 = 1;
    std::allocate_shared[abi:ne180100]<turi::thread_pool,std::allocator<turi::thread_pool>,unsigned long,BOOL,void>(&v9, &v8, &v10);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&turi::get_pool_ptr_instance(void)::pool, &v10);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return pthread_mutex_unlock(&turi::pool_creation_lock(void)::lock);
}

void sub_217FECE24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_217FECFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::exception_ptr>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  std::exception_ptr *v7;
  uint64_t v8;
  std::exception_ptr *v9;
  std::exception_ptr *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 9];
    v7 = (std::exception_ptr *)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (std::exception_ptr *)v8)
    {
      do
      {
        std::exception_ptr::~exception_ptr(v7);
        v7 = v9 + 1;
        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v10 = (std::exception_ptr *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (std::exception_ptr *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 256;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 512;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

turi::thread_group *turi::thread_group::thread_group(turi::thread_group *this)
{
  int v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 16), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  turi::conditional::conditional((pthread_cond_t *)((char *)this + 80));
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return this;
}

void sub_217FED208(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  turi::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<_opaque_pthread_t *,char const*>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::thread_pool,std::allocator<turi::thread_pool>,unsigned long,BOOL,void>@<X0>(uint64_t *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x238uLL);
  result = std::__shared_ptr_emplace<turi::thread_pool>::__shared_ptr_emplace[abi:ne180100]<unsigned long,BOOL,std::allocator<turi::thread_pool>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_217FED300(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::thread_pool>::__shared_ptr_emplace[abi:ne180100]<unsigned long,BOOL,std::allocator<turi::thread_pool>,0>(_QWORD *a1, uint64_t *a2, char *a3)
{
  a1[2] = 0;
  *a1 = &unk_24D920F00;
  a1[1] = 0;
  turi::thread_pool::thread_pool((turi::thread_pool *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_217FED354(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::thread_pool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D920F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::thread_pool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D920F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::thread_pool>::__on_zero_shared(uint64_t a1)
{
  turi::thread_pool::~thread_pool((turi::thread_pool *)(a1 + 24));
}

uint64_t boost::detail::function::functor_manager<turi::parallel_task_queue::launch(boost::function<void ()(void)> const&,unsigned long)::$_0>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      result = operator new();
      v6 = result;
      *(_QWORD *)result = 0;
      v7 = *(_QWORD *)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)result = v7;
        if ((v7 & 1) != 0)
        {
          v9 = *(_OWORD *)(v5 + 8);
          *(_QWORD *)(result + 24) = *(_QWORD *)(v5 + 24);
          *(_OWORD *)(result + 8) = v9;
        }
        else
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v7 & 0xFFFFFFFFFFFFFFFELL))(v5 + 8, result + 8, 0);
        }
      }
      *(_QWORD *)(v6 + 32) = *(_QWORD *)(v5 + 32);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v8 = boost::function0<void>::~function0((uint64_t *)result);
        result = MEMORY[0x219A19A08](v8, 0x10E2C40F3C66E27);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi19parallel_task_queue6launchERKN5boost8functionIFvvEEEmE3$_0" & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi19parallel_task_queue6launchERKN5boost8functionIFvvEEEmE3$_0" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217FED4F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E2C40F3C66E27);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::void_function_obj_invoker0<turi::parallel_task_queue::launch(boost::function<void ()(void)> const&,unsigned long)::$_0,void>::invoke(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = *a1;
  v2 = v1[4];
  boost::function0<void>::operator()(v1);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  v3 = *(_QWORD *)(v2 + 176) + 1;
  *(_QWORD *)(v2 + 176) = v3;
  if (*(_BYTE *)(v2 + 184) && v3 == *(_QWORD *)(v2 + 168))
  {
    v4 = pthread_cond_signal((pthread_cond_t *)(v2 + 72));
    assert_msg(v4 == 0, "Condition variable signal error %d", v4);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
}

void sub_217FED5A8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_217FED5C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  uint64_t v10;

  __cxa_begin_catch(a1);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 8));
  std::current_exception();
  std::deque<std::exception_ptr>::push_back((_QWORD *)(v10 + 120), &a10);
  std::exception_ptr::~exception_ptr(&a10);
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 8));
  __cxa_end_catch();
  JUMPOUT(0x217FED53CLL);
}

void sub_217FED610(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  pthread_mutex_t *v10;

  std::exception_ptr::~exception_ptr(&a10);
  pthread_mutex_unlock(v10);
  __cxa_end_catch();
  JUMPOUT(0x217FED5B4);
}

std::exception_ptr *std::deque<std::exception_ptr>::push_back(_QWORD *a1, std::exception_ptr *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::exception_ptr *v8;
  std::exception_ptr *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = ((v5 - v4) << 6) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::exception_ptr>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (std::exception_ptr *)(*(_QWORD *)(v4 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF));
  }
  result = std::exception_ptr::exception_ptr(v8, a2);
  ++a1[5];
  return result;
}

void std::deque<std::exception_ptr>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_217FED998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::exception_ptr>::__move_assign(_QWORD *a1, uint64_t a2)
{
  void **v4;
  void **v5;
  _QWORD *v6;
  unint64_t v7;
  void **v8;
  std::exception_ptr *v9;
  uint64_t v10;
  std::exception_ptr *v11;
  std::exception_ptr *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = (void **)a1[2];
  if (v5 == v4)
  {
    v6 = a1 + 5;
    v5 = (void **)a1[1];
  }
  else
  {
    v6 = a1 + 5;
    v7 = a1[4];
    v8 = &v4[v7 >> 9];
    v9 = (std::exception_ptr *)((char *)*v8 + 8 * (v7 & 0x1FF));
    v10 = *(uint64_t *)((char *)v4 + (((a1[5] + v7) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v7) & 0x1FF);
    if (v9 != (std::exception_ptr *)v10)
    {
      do
      {
        std::exception_ptr::~exception_ptr(v9);
        v9 = v11 + 1;
        if ((char *)v9 - (_BYTE *)*v8 == 4096)
        {
          v12 = (std::exception_ptr *)v8[1];
          ++v8;
          v9 = v12;
        }
      }
      while (v9 != (std::exception_ptr *)v10);
      v4 = (void **)a1[1];
      v5 = (void **)a1[2];
    }
  }
  *v6 = 0;
  v13 = (char *)v5 - (char *)v4;
  if (v13 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v14 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v13 = v14 - (_QWORD)v4;
    }
    while (v13 > 0x10);
  }
  if (v13 >> 3 == 1)
  {
    v15 = 256;
    goto LABEL_14;
  }
  if (v13 >> 3 == 2)
  {
    v15 = 512;
LABEL_14:
    a1[4] = v15;
  }
  std::deque<std::exception_ptr>::shrink_to_fit(a1);
  result = std::__split_buffer<std::exception_ptr *>::operator=((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void std::deque<std::exception_ptr>::shrink_to_fit(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    std::deque<std::exception_ptr>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 0);
    std::deque<std::exception_ptr>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  std::__split_buffer<std::exception_ptr *>::shrink_to_fit((uint64_t)a1);
}

uint64_t std::deque<std::exception_ptr>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<std::exception_ptr>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__split_buffer<std::exception_ptr *>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t std::__split_buffer<std::exception_ptr *>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  std::__split_buffer<std::exception_ptr *>::shrink_to_fit(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::blocking_queue(uint64_t a1)
{
  int v2;

  *(_BYTE *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 56), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  turi::conditional::conditional((pthread_cond_t *)(a1 + 120));
  turi::conditional::conditional((pthread_cond_t *)(a1 + 168));
  *(_WORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 218) = 0;
  return a1;
}

void sub_217FEDE08(_Unwind_Exception *a1)
{
  _QWORD *v1;
  pthread_mutex_t *v2;
  pthread_cond_t *v3;

  turi::conditional::~conditional(v3);
  turi::mutex::~mutex(v2);
  std::deque<std::pair<boost::function<void ()(void)>,int>>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<boost::function<void ()(void)>,int>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x66];
    v7 = (uint64_t *)((char *)*v6 + 40 * (v5 % 0x66));
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        v7 = boost::function0<void>::~function0(v7) + 5;
        if ((char *)v7 - (_BYTE *)*v6 == 4080)
        {
          v9 = (uint64_t *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (uint64_t *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 51;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 102;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::~blocking_queue(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::broadcast(a1);
  turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::broadcast_blocking_empty(a1);
  turi::conditional::~conditional((pthread_cond_t *)(a1 + 168));
  turi::conditional::~conditional((pthread_cond_t *)(a1 + 120));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 56));
  std::deque<std::pair<boost::function<void ()(void)>,int>>::~deque[abi:ne180100]((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::broadcast(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  v3 = pthread_cond_broadcast((pthread_cond_t *)(a1 + 120));
  assert_msg(v3 == 0, "Condition variable broadcast error %d", v3);
  return pthread_mutex_unlock(v2);
}

uint64_t turi::blocking_queue<std::pair<boost::function<void ()(void)>,int>>::broadcast_blocking_empty(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  v3 = pthread_cond_broadcast((pthread_cond_t *)(a1 + 168));
  assert_msg(v3 == 0, "Condition variable broadcast error %d", v3);
  return pthread_mutex_unlock(v2);
}

uint64_t boost::detail::function::functor_manager<boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::thread_pool>,boost::_bi::list1<boost::_bi::value<turi::thread_pool*>>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186D1909 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186D1909 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<boost::_bi::bind_t<void,boost::_mfi::mf0<void,turi::thread_pool>,boost::_bi::list1<boost::_bi::value<turi::thread_pool*>>>,void>::invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(uint64_t (**)(_QWORD *))a1;
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 16) + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void std::deque<std::pair<boost::function<void ()(void)>,int>>::push_back(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<boost::function<void ()(void)>,int>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66));
  v9 = v7 % 0x66;
  v10 = v8 + 40 * (v7 % 0x66);
  *(_QWORD *)v10 = 0;
  v11 = *a2;
  if (*a2)
  {
    *(_QWORD *)v10 = v11;
    if ((v11 & 1) != 0)
    {
      v12 = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(v10 + 24) = a2[3];
      *(_OWORD *)(v10 + 8) = v12;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(v11 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, v10 + 8, 0);
    }
  }
  *(_DWORD *)(v8 + 40 * v9 + 32) = *((_DWORD *)a2 + 8);
  ++a1[5];
}

void std::deque<std::pair<boost::function<void ()(void)>,int>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_217FEE4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<boost::function<void ()(void)>,int>>::pop_front(int64x2_t *a1)
{
  boost::function0<void>::~function0((uint64_t *)(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL))
                                               + 40 * (a1[2].i64[0] % 0x66uLL)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2186CA040);
  return std::deque<std::pair<boost::function<void ()(void)>,int>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t *boost::function<void ()(void)>::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v5 = 0;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(_QWORD *)a2;
    if ((v3 & 1) != 0)
    {
      v6 = *(_OWORD *)(a2 + 8);
      v7 = *(_QWORD *)(a2 + 24);
    }
    else
    {
      (*(void (**)(uint64_t, __int128 *, _QWORD))(v3 & 0xFFFFFFFFFFFFFFFELL))(a2 + 8, &v6, 0);
    }
  }
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(&v5, a1);
  boost::function0<void>::~function0(&v5);
  return a1;
}

void sub_217FEE634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<boost::function<void ()(void)>,int>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x66)
    a2 = 1;
  if (v2 < 0xCC)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 102;
  }
  return v4 ^ 1u;
}

uint64_t *boost::function<void ()(void)>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4[4];

  v4[0] = 0;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::move_assign((uint64_t)v4, a2);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v4, a1);
  boost::function0<void>::~function0(v4);
  return a1;
}

void sub_217FEE6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_thread_pool_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_DWORD *boost::random::lagged_fibonacci_01_engine<double,48,607u,273u>::fill(_DWORD *result)
{
  uint64_t i;
  double v2;
  uint64_t v3;
  float64x2_t v10;

  for (i = 0; i != 546; i += 2)
  {
    v2 = *(double *)&result[i + 2] + *(double *)&result[i + 670];
    if (v2 >= 1.0)
      v2 = v2 + -1.0;
    *(double *)&result[i + 2] = v2;
  }
  v3 = 0;
  __asm
  {
    FMOV            V0.2D, #1.0
    FMOV            V1.2D, #-1.0
  }
  do
  {
    v10 = vaddq_f64(*(float64x2_t *)&result[v3 + 548], *(float64x2_t *)&result[v3 + 2]);
    *(int8x16_t *)&result[v3 + 548] = vbslq_s8((int8x16_t)vcgeq_f64(v10, _Q0), (int8x16_t)vaddq_f64(v10, _Q1), (int8x16_t)v10);
    v3 += 4;
  }
  while (v3 != 668);
  *result = 0;
  return result;
}

uint64_t _GLOBAL__sub_I_alias_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::random::pure_random_seed(turi::random *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unint64_t v4;
  std::chrono::steady_clock::time_point v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  time_t v10;

  {
    turi::random::pure_random_seed(void)::base_start_time = std::chrono::steady_clock::now().__d_.__rep_;
  }
  {
    v10 = time(0);
    turi::random::pure_random_seed(void)::base_seed = 0xC6A4A7935BD1E995
                                                    * ((0xC6A4A7935BD1E995 * (v10 ^ 0xC3A5C85C97CB3127)) ^ ((0xC6A4A7935BD1E995 * (v10 ^ 0xC3A5C85C97CB3127)) >> 47));
  }
  {
    turi::random::pure_random_seed(void)::base_count = 0;
  }
  do
    v4 = __ldaxr((unint64_t *)&turi::random::pure_random_seed(void)::base_count);
  while (__stlxr(v4 + 1, (unint64_t *)&turi::random::pure_random_seed(void)::base_count));
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v6 = 5
     * __ROR8__((0x4CF5AD432745937FLL* ((0x2284A7AA00000000 * (v5.__d_.__rep_ - turi::random::pure_random_seed(void)::base_start_time)) | ((0x87C37B91114253D5 * (v5.__d_.__rep_ - turi::random::pure_random_seed(void)::base_start_time)) >> 31))) ^ 0x9FA35C8D77B96328, 27)+ 0x1E30CEC3A97BD6F1;
  v7 = (5
      * (v6
       + __ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * turi::random::pure_random_seed(void)::base_count) | ((unint64_t)(0x4CF5AD432745937FLL * turi::random::pure_random_seed(void)::base_count) >> 33))) ^ 0x9FA35C8D77B96328, 31))+ 944331445) ^ v6;
  v8 = 5
     * __ROR8__((0x4CF5AD432745937FLL* ((0x2284A7AA00000000 * turi::random::pure_random_seed(void)::base_seed) | ((0x87C37B91114253D5* turi::random::pure_random_seed(void)::base_seed) >> 31))) ^ 0x9FA35C8D77B96328, 27)+ 0x1E30CEC3A97BD6F1;
  return (5
        * (__ROR8__((0x87C37B91114253D5* ((0x93A2C9BF80000000 * v7) | ((unint64_t)(0x4CF5AD432745937FLL * v7) >> 33))) ^ 0x9FA35C8D77B96328, 31)+ v8)+ 944331445) ^ v8;
}

void sub_217FEEA0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::random::destroy_tls_data(uint64_t this, void *a2)
{
  if (this)
  {
    turi::mutex::~mutex((pthread_mutex_t *)(this + 6288));
    JUMPOUT(0x219A19A08);
  }
  return this;
}

uint64_t turi::random::get_random_source_key(turi::random *this)
{
  unsigned __int8 v1;

  {
    turi::random::get_random_source_key(void)::key = 0;
    pthread_key_create((pthread_key_t *)&turi::random::get_random_source_key(void)::key, (void (__cdecl *)(void *))turi::random::destroy_tls_data);
  }
  return turi::random::get_random_source_key(void)::key;
}

void sub_217FEEAD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

turi::random::generator *turi::random::get_source(turi::random *this)
{
  pthread_key_t random_source_key;
  turi::random::generator *v2;
  turi::random::generator *v3;
  uint64_t **v4;
  turi::random *v5;
  pthread_key_t v6;

  random_source_key = turi::random::get_random_source_key(this);
  v2 = (turi::random::generator *)pthread_getspecific(random_source_key);
  if (!v2)
  {
    v2 = (turi::random::generator *)operator new();
    v3 = turi::random::generator::generator(v2);
    v4 = (uint64_t **)turi::random::source_registry::global(v3);
    v5 = (turi::random *)turi::random::source_registry::register_generator(v4, v2);
    v6 = turi::random::get_random_source_key(v5);
    pthread_setspecific(v6, v2);
  }
  return v2;
}

void sub_217FEEB4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1000C40541204DDLL);
  _Unwind_Resume(a1);
}

void *turi::random::source_registry::global(turi::random::source_registry *this)
{
  unsigned __int8 v1;

  {
    turi::random::source_registry::source_registry((turi::random::source_registry *)&turi::random::source_registry::global(void)::registry);
    __cxa_atexit((void (*)(void *))turi::random::source_registry::~source_registry, &turi::random::source_registry::global(void)::registry, &dword_217E69000);
  }
  return &turi::random::source_registry::global(void)::registry;
}

void sub_217FEEBE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::random::source_registry::register_generator(uint64_t **this, turi::random::generator *a2)
{
  pthread_mutex_t *v3;
  turi::random::generator *v5;

  v5 = a2;
  if (!a2)
    turi::random::source_registry::register_generator(turi::random::generator *)::{lambda(void)#1}::operator()();
  v3 = (pthread_mutex_t *)(this + 797);
  pthread_mutex_lock((pthread_mutex_t *)(this + 797));
  std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(this, (unint64_t *)&v5, (uint64_t *)&v5);
  turi::random::generator::seed(v5, (turi::random::generator *)(this + 3));
  return pthread_mutex_unlock(v3);
}

uint64_t turi::random::generator::nondet_seed(turi::random::generator *this)
{
  pthread_mutex_t *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = (pthread_mutex_t *)turi::random::nondet_generator::global(this);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 6288));
  turi::random::nondet_generator::operator()(v2);
  boost::random::detail::seed_array_real<48,607ul,boost::random::detail::generator_seed_seq<boost::random::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>>,double>();
  *(_DWORD *)this = 607;
  v3 = turi::random::nondet_generator::operator()(v2);
  v4 = 0;
  *((_DWORD *)this + 1216) = v3;
  v5 = 1;
  do
  {
    v6 = 1812433253 * (v3 ^ (v3 >> 30));
    v3 = v6 + v5;
    *((_DWORD *)this + v4 + 1217) = v4 + v6 + 1;
    ++v5;
    ++v4;
  }
  while (v4 != 350);
  *((_QWORD *)this + 784) = 351;
  boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::normalize_state((unsigned int *)this + 1216);
  *((_QWORD *)this + 785) = ((unint64_t)turi::random::nondet_generator::operator()(v2) << 16) | 0x330E;
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 6288));
}

void *turi::random::nondet_generator::global(turi::random::nondet_generator *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    turi::random::nondet_generator::nondet_generator((pthread_mutex_t *)&turi::random::nondet_generator::global(void)::global_gen);
    __cxa_atexit((void (*)(void *))turi::random::nondet_generator::~nondet_generator, &turi::random::nondet_generator::global(void)::global_gen, &dword_217E69000);
  }
  return &turi::random::nondet_generator::global(void)::global_gen;
}

void sub_217FEEDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t turi::random::nondet_generator::operator()(pthread_mutex_t *a1)
{
  pthread_mutex_t *v2;

  v2 = a1 + 9;
  pthread_mutex_lock(a1 + 9);
  if (*(_DWORD *)&a1->__opaque[*(_QWORD *)(a1->__sig - 24) + 24])
    turi::random::nondet_generator::operator()(void)::{lambda(void)#1}::operator()();
  std::istream::read();
  if (*(_DWORD *)&a1->__opaque[*(_QWORD *)(a1->__sig - 24) + 24])
    turi::random::nondet_generator::operator()(void)::{lambda(void)#2}::operator()();
  pthread_mutex_unlock(v2);
  return 0;
}

unsigned int *boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::seed(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  uint64_t i;

  v2 = *a2;
  *result = *a2;
  for (i = 1; i != 351; ++i)
  {
    v2 = i + 1812433253 * (v2 ^ (v2 >> 30));
    result[i] = v2;
  }
  *((_QWORD *)result + 176) = 351;
  return boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::normalize_state(result);
}

turi::random::generator *turi::random::generator::generator(turi::random::generator *this)
{
  uint64_t v2;
  const char *v3;
  int v5;
  timeval v6;

  v5 = 331;
  v6.tv_sec = (__darwin_time_t)&v5;
  boost::random::detail::seed_array_real<48,607ul,boost::random::detail::generator_seed_seq<boost::random::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>>,double>();
  *(_DWORD *)this = 607;
  boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::seed((unsigned int *)this + 1216, (unsigned int *)&boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::default_seed);
  *((_QWORD *)this + 785) = 78606;
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 6288), 0);
  assert_msg((_DWORD)v2 == 0, v3, v2);
  gettimeofday(&v6, 0);
  turi::random::generator::seed(this, v6.tv_usec + 1000000 * LODWORD(v6.tv_sec));
  return this;
}

void sub_217FEEF98(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  turi::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void sub_217FEF148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t turi::random::generator::seed(turi::random::generator *this, unsigned int a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 6288);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 6288));
  *((_QWORD *)this + 785) = ((unint64_t)a2 << 16) | 0x330E;
  boost::random::detail::seed_array_real<48,607ul,boost::random::rand48,double>();
  *(_DWORD *)this = 607;
  boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::seed<boost::random::rand48>((char *)this + 4864, (uint64_t *)this + 785);
  return pthread_mutex_unlock(v4);
}

unsigned int *boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::seed<boost::random::rand48>(void *__dst, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE __src[1404];
  uint64_t v8;

  v3 = 0;
  v8 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  do
  {
    v5 = 0x5DEECE66DLL * v4 + 11;
    v4 = v5 & 0xFFFFFFFFFFFFLL;
    *(_DWORD *)&__src[v3] = (v5 >> 17) & 0x7FFFFFFF;
    v3 += 4;
  }
  while (v3 != 1404);
  *a2 = v4;
  memcpy(__dst, __src, 0x57CuLL);
  *((_QWORD *)__dst + 176) = 351;
  return boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::normalize_state((unsigned int *)__dst);
}

uint64_t *boost::random::detail::seed_array_real<48,607ul,boost::random::rand48,double>()
{
  uint64_t *result;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v8[4856];
  uint64_t v9;

  result = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v3 = 0;
  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *result;
  do
  {
    v5 = 0x5DEECE66DLL * v4 + 11;
    v4 = v5 & 0xFFFFFFFFFFFFLL;
    *(_DWORD *)&v8[4 * v3++] = (v5 >> 17) & 0x7FFFFFFF;
  }
  while (v3 != 1214);
  *result = v4;
  v6 = -4856;
  do
  {
    LODWORD(v2) = *(_DWORD *)&v8[v6 + 4856];
    v7 = 0x3CF0000000000000;
    LOWORD(v7) = *(_WORD *)((char *)&v9 + v6 + 4);
    v2 = (double)*(unint64_t *)&v2 * 3.55271368e-15 + 0.0 + (double)v7 * 0.0000152587891;
    *(double *)(v1 + v6 + 4856) = v2;
    v6 += 8;
  }
  while (v6);
  return result;
}

unsigned int *boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::normalize_state(unsigned int *result)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = 0;
  v2 = result[350] ^ result[174];
  if (v2 >= 0)
    v3 = 2 * v2;
  else
    v3 = (2 * v2) ^ 0x71DCF;
  *result = *result & 0xFFF80000 | v3 & 0x7FFFF;
  while (!result[v1])
  {
    if (++v1 == 351)
    {
      *result = 0x80000000;
      return result;
    }
  }
  return result;
}

turi::random::source_registry *turi::random::source_registry::source_registry(turi::random::source_registry *this)
{
  uint64_t v2;
  const char *v3;

  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  turi::random::generator::generator((turi::random::source_registry *)((char *)this + 24));
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 6376), 0);
  assert_msg((_DWORD)v2 == 0, v3, v2);
  return this;
}

void sub_217FEF498(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void turi::random::source_registry::~source_registry(turi::random::source_registry *this)
{
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 6376));
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 6312));
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void turi::random::source_registry::register_generator(turi::random::generator *)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/random/random.cpp", 88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"tls_ptr != __null", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/random/random.cpp", "operator()", 191, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::random::source_registry::register_generator(turi::random::generator *)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FEF600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::random::generator::seed(turi::random::generator *this, turi::random::generator *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  unsigned int __src[351];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)((char *)this + 6288);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 6288));
  boost::random::detail::seed_array_real<48,607ul,boost::random::lagged_fibonacci_01_engine<double,48,607u,273u>,double>();
  *(_DWORD *)this = 607;
  boost::random::detail::generate_from_int<boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>,unsigned int *>((int *)a2 + 1216, __src, (unsigned int *)&v8);
  memcpy((char *)this + 4864, __src, 0x57CuLL);
  *((_QWORD *)this + 784) = 351;
  boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::normalize_state((unsigned int *)this + 1216);
  v5 = 0x5DEECE66DLL * *((_QWORD *)a2 + 785) + 11;
  *((_QWORD *)a2 + 785) = v5 & 0xFFFFFFFFFFFFLL;
  *((_QWORD *)this + 785) = (v5 >> 1) & 0x7FFFFFFF0000 | 0x330E;
  return pthread_mutex_unlock(v4);
}

void boost::random::detail::seed_array_real<48,607ul,boost::random::lagged_fibonacci_01_engine<double,48,607u,273u>,double>()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6[1214];
  uint64_t v7;

  v0 = (int *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v7 = *MEMORY[0x24BDAC8D0];
  boost::random::detail::generate_from_real<boost::random::lagged_fibonacci_01_engine<double,48,607u,273u>,unsigned int *>(v0, v6, (unsigned int *)&v7);
  v4 = -4856;
  do
  {
    LODWORD(v3) = v6[v4 / 4 + 1214];
    v5 = 0x3CF0000000000000;
    LOWORD(v5) = *(_WORD *)((char *)&v7 + v4 + 4);
    v3 = (double)*(unint64_t *)&v3 * 3.55271368e-15 + 0.0 + (double)v5 * 0.0000152587891;
    *(double *)(v2 + v4 + 4856) = v3;
    v4 += 8;
  }
  while (v4);
}

void boost::random::detail::generate_from_real<boost::random::lagged_fibonacci_01_engine<double,48,607u,273u>,unsigned int *>(int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v6;
  int i;
  int v8;
  double v9;
  double v10;
  int v11;
  unsigned int v12;
  BOOL v13;

  v6 = 0;
  for (i = 0; ; i = v11)
  {
    v8 = *a1;
    if (*a1 >= 0x25F)
    {
      boost::random::lagged_fibonacci_01_engine<double,48,607u,273u>::fill(a1);
      v8 = *a1;
    }
    *a1 = v8 + 1;
    v9 = *(double *)&a1[2 * v8 + 2];
    v10 = v9 * 2.81474977e14;
    if (!i)
      break;
    *a2++ = (fmod(v9 * 2.81474977e14, 4294967300.0) << i) | v6;
    if (a2 == a3)
      return;
    v11 = i + 16;
    v10 = v10 / (double)(1 << -(char)i);
    if (i + 16 >= 32)
      goto LABEL_9;
LABEL_12:
    v6 = v10;
  }
  v11 = 48;
LABEL_9:
  v12 = v11;
  while (1)
  {
    *a2++ = fmod(v10, 4294967300.0);
    if (a2 == a3)
      break;
    v10 = v10 * 2.32830644e-10;
    v11 = v12 - 32;
    v13 = v12 > 0x3F;
    v12 -= 32;
    if (!v13)
      goto LABEL_12;
  }
}

int *boost::random::detail::generate_from_int<boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>,unsigned int *>(int *result, unsigned int *a2, unsigned int *a3)
{
  int *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;

  v5 = result;
  v6 = *((_QWORD *)result + 176);
  do
  {
    if (v6 == 351)
    {
      result = boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::twist(v5);
      v6 = *((_QWORD *)v5 + 176);
    }
    v7 = v5[v6++];
    *((_QWORD *)v5 + 176) = v6;
    v8 = ((v7 ^ (v7 >> 11)) << 7) & 0x31B6AB00 ^ v7 ^ (v7 >> 11);
    *a2++ = (v8 << 15) & 0xFFE50000 ^ v8 ^ (((v8 << 15) & 0xFFE50000 ^ v8) >> 17);
  }
  while (a2 != a3);
  return result;
}

int *boost::random::mersenne_twister_engine<unsigned int,32ul,351ul,175ul,19ul,3433795303u,11ul,4294967295u,7ul,834054912u,15ul,4293197824u,17ul,1812433253u>::twist(int *result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  const float *v5;
  int8x8_t v6;
  int v7;
  unsigned int v8;

  v1 = 0;
  v2 = *result;
  do
  {
    v3 = v2 & 0xFFF80000;
    v2 = result[v1 + 1];
    result[v1] = result[v1 + 175] ^ ((v2 & 0x7FFFE | v3) >> 1) ^ (v2 << 31 >> 31) & 0xCCAB8EE7;
    ++v1;
  }
  while (v1 != 174);
  v4 = 0;
  v5 = (const float *)(result + 174);
  v6 = (int8x8_t)vld1_dup_f32(v5);
  *((int8x8_t *)result + 87) = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)vorr_s8(vand_s8(*(int8x8_t *)(result + 175), (int8x8_t)vdup_n_s32(0x7FFFEu)), vand_s8(vext_s8(v6, *(int8x8_t *)(result + 175), 4uLL), (int8x8_t)0x700000007)), 1uLL), veor_s8(*(int8x8_t *)(result + 349), vbic_s8((int8x8_t)vdup_n_s32(0xCCAB8EE7), (int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)(result + 175), (int8x8_t)0x100000001)))));
  v7 = result[176];
  do
  {
    v8 = v7 & 0xFFF80000;
    v7 = result[v4 + 177];
    result[v4 + 176] = result[v4] ^ ((v7 & 0x7FFFE | v8) >> 1) ^ (v7 << 31 >> 31) & 0xCCAB8EE7;
    ++v4;
  }
  while (v4 != 174);
  result[350] = result[174] ^ ((*result & 0x7FFFE | result[350] & 0xFFF80000) >> 1) ^ (*result << 31 >> 31) & 0xCCAB8EE7;
  *((_QWORD *)result + 176) = 0;
  return result;
}

pthread_mutex_t *turi::random::nondet_generator::nondet_generator(pthread_mutex_t *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  const char *v9;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  *(_QWORD *)&this[6].__opaque[32] = MEMORY[0x24BEDB838] + 64;
  v4 = &this->__opaque[8];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  this->__sig = v5;
  *(uint64_t *)((char *)&this->__sig + *(_QWORD *)(v5 - 24)) = v6;
  *(_QWORD *)this->__opaque = 0;
  v7 = (std::ios_base *)((char *)this + *(_QWORD *)(this->__sig - 24));
  std::ios_base::init(v7, &this->__opaque[8]);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  this->__sig = v2 + 24;
  *(_QWORD *)&this[6].__opaque[32] = v3;
  MEMORY[0x219A19480](v4);
  v8 = pthread_mutex_init(this + 9, 0);
  assert_msg((_DWORD)v8 == 0, v9, v8);
  std::ifstream::open();
  if (*(_DWORD *)&this->__opaque[*(_QWORD *)(this->__sig - 24) + 24])
    turi::random::nondet_generator::nondet_generator(void)::{lambda(void)#1}::operator()();
  return this;
}

void sub_217FEFC10(_Unwind_Exception *a1)
{
  _QWORD *v1;
  pthread_mutex_t *v2;

  turi::mutex::~mutex(v2);
  std::ifstream::~ifstream(v1);
  _Unwind_Resume(a1);
}

void turi::random::nondet_generator::nondet_generator(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/random/random.cpp", 88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rnd_dev.good()", 14);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/random/random.cpp", "operator()", 78, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::random::nondet_generator::nondet_generator(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FEFD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x219A1948C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x219A198F4](a1 + 53);
  return a1;
}

void turi::random::nondet_generator::~nondet_generator(pthread_mutex_t *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = &this->__opaque[8];
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(this->__sig - 24)), *(_DWORD *)&this->__opaque[*(_QWORD *)(this->__sig - 24) + 24] | 4);
  turi::mutex::~mutex(this + 9);
  v3 = MEMORY[0x24BEDB7E0];
  v4 = *MEMORY[0x24BEDB7E0];
  this->__sig = *MEMORY[0x24BEDB7E0];
  *(uint64_t *)((char *)&this->__sig + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(v3 + 24);
  MEMORY[0x219A1948C](v2);
  std::istream::~istream();
  MEMORY[0x219A198F4](&this[6].__opaque[32]);
}

void turi::random::nondet_generator::operator()(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/random/random.cpp", 88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rnd_dev.good()", 14);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/random/random.cpp", "operator()", 115, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::random::nondet_generator::operator()(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FEFFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::random::nondet_generator::operator()(void)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/random/random.cpp", 88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rnd_dev.good()", 14);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/random/random.cpp", "operator()", 117, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::random::nondet_generator::operator()(void)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FF0140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

unsigned int **boost::random::detail::seed_array_real<48,607ul,boost::random::detail::generator_seed_seq<boost::random::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>>,double>()
{
  unsigned int **result;
  uint64_t v1;
  double v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v8[4856];
  uint64_t v9;

  result = (unsigned int **)MEMORY[0x24BDAC7A8]();
  v3 = 0;
  v9 = *MEMORY[0x24BDAC8D0];
  v4 = *result;
  v5 = **result;
  do
  {
    v5 = 16807 * v5 % 0x7FFFFFFF;
    *(_DWORD *)&v8[4 * v3++] = v5;
  }
  while (v3 != 1214);
  *v4 = v5;
  v6 = -4856;
  do
  {
    LODWORD(v2) = *(_DWORD *)&v8[v6 + 4856];
    v7 = 0x3CF0000000000000;
    LOWORD(v7) = *(_WORD *)((char *)&v9 + v6 + 4);
    v2 = (double)*(unint64_t *)&v2 * 3.55271368e-15 + 0.0 + (double)v7 * 0.0000152587891;
    *(double *)(v1 + v6 + 4856) = v2;
    v6 += 8;
  }
  while (v6);
  return result;
}

uint64_t _GLOBAL__sub_I_random_cpp()
{
  turi::random *v0;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  v0 = (turi::random *)__cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  return turi::random::get_random_source_key(v0);
}

std::string *turi::block_cache::init(std::string *a1, const std::string *a2, std::string::size_type a3)
{
  std::string *result;

  if (a1->__r_.__value_.__s.__data_[0])
    turi::block_cache::init(std::string const&,unsigned long)::$_0::operator()();
  result = std::string::operator=(a1 + 1, a2);
  a1[692].__r_.__value_.__r.__words[0] = a3;
  a1->__r_.__value_.__s.__data_[0] = 1;
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void turi::general_ofstream::~general_ofstream(turi::general_ofstream *this)
{
  char *v2;

  *(_QWORD *)this = &unk_24D920F98;
  *((_QWORD *)this + 29) = &unk_24D920FC0;
  v2 = (char *)this + 232;
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)this + 8);
  MEMORY[0x219A198F4](v2);
}

{
  char *v2;

  *(_QWORD *)this = &unk_24D920F98;
  *((_QWORD *)this + 29) = &unk_24D920FC0;
  v2 = (char *)this + 232;
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)this + 8);
  MEMORY[0x219A198F4](v2);
  JUMPOUT(0x219A19A08);
}

void turi::block_cache::~block_cache(turi::block_cache *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  uint64_t i;

  if (*(_BYTE *)this)
  {
    v2 = (char *)*((_QWORD *)this + 14);
    v3 = (char *)this + 120;
    if (v2 != (char *)this + 120)
    {
      do
      {
        turi::fileio::delete_path((uint64_t)(v2 + 32), 3);
        v4 = (char *)*((_QWORD *)v2 + 1);
        if (v4)
        {
          do
          {
            v5 = v4;
            v4 = *(char **)v4;
          }
          while (v4);
        }
        else
        {
          do
          {
            v5 = (char *)*((_QWORD *)v2 + 2);
            v6 = *(_QWORD *)v5 == (_QWORD)v2;
            v2 = v5;
          }
          while (!v6);
        }
        v2 = v5;
      }
      while (v5 != v3);
    }
  }
  boost::multi_index::multi_index_container<std::pair<std::string,BOOL>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,BOOL>,std::string,&std::pair<std::string,BOOL>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,BOOL>>>::~multi_index_container((uint64_t)this + 16632);
  boost::multi_index::multi_index_container<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>>>::~multi_index_container((uint64_t)this + 16528);
  for (i = 16464; i != 80; i -= 64)
    turi::mutex::~mutex((pthread_mutex_t *)((char *)this + i));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 112, *((char **)this + 15));
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 48));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

uint64_t turi::block_cache::get_instance(turi::block_cache *this)
{
  unint64_t v1;
  uint64_t result;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&turi::block_cache_is_initialized);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&turi::block_cache_is_initialized, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<turi::block_cache::get_instance(void)::$_0 &&>>);
  }
  result = turi::bc;
  if (!turi::bc)
    turi::block_cache::get_instance(void)::$_1::operator()();
  return result;
}

void `virtual thunk to'turi::general_ofstream::~general_ofstream(turi::general_ofstream *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &unk_24D920F98;
  *((_QWORD *)v1 + 29) = &unk_24D920FC0;
  if (v1[231] < 0)
    operator delete(*((void **)v1 + 26));
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)(v1 + 8));
  JUMPOUT(0x219A198F4);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &unk_24D920F98;
  *((_QWORD *)v1 + 29) = &unk_24D920FC0;
  if (v1[231] < 0)
    operator delete(*((void **)v1 + 26));
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)(v1 + 8));
  MEMORY[0x219A198F4](v1 + 232);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::iostreams::stream<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v2 + 8);
  MEMORY[0x219A198F4](a1 + 208);
  return a1;
}

void boost::iostreams::stream<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v2 + 8);
  MEMORY[0x219A198F4](a1 + 208);
  JUMPOUT(0x219A19A08);
}

void `virtual thunk to'boost::iostreams::stream<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>>::~stream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)(v1 + 8));
  JUMPOUT(0x219A198F4);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)(v1 + 8));
  MEMORY[0x219A198F4](v1 + 208);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::~stream_base(uint64_t a1)
{
  uint64_t v2;

  v2 = std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v2 + 8);
  MEMORY[0x219A198F4](a1 + 208);
  return a1;
}

void boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::~stream_base(uint64_t a1)
{
  uint64_t v2;

  v2 = std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v2 + 8);
  MEMORY[0x219A198F4](a1 + 208);
  JUMPOUT(0x219A19A08);
}

void `virtual thunk to'boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::~stream_base(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)(v1 + 8));
  JUMPOUT(0x219A198F4);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)(v1 + 8));
  MEMORY[0x219A198F4](v1 + 208);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24D921188;
  if ((~*(_DWORD *)(a1 + 192) & 5) == 0)
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>((_DWORD *)a1, 8, (_DWORD *)a1, 16, (turi::fileio_impl::general_fstream_sink *)(a1 + 72), (_DWORD *)(a1 + 192));
  *(_QWORD *)a1 = &unk_24D921280;
  v2 = *(void **)(a1 + 168);
  if (v2)
    operator delete(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    turi::fileio_impl::general_fstream_sink::~general_fstream_sink((turi::fileio_impl::general_fstream_sink *)(a1 + 72));
    *(_BYTE *)(a1 + 152) = 0;
  }
  return std::streambuf::~streambuf();
}

void sub_217FF0A38(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FF09F8);
}

void boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(uint64_t a1)
{
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(a1);
  JUMPOUT(0x219A19A08);
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::imbue(uint64_t a1, const std::locale *a2)
{
  std::locale *v2;
  std::locale *v4;
  std::locale v5;

  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
  {
    v2 = *(std::locale **)(a1 + 160);
    if (v2)
    {
      v4 = v2 + 1;
      (*((void (**)(std::locale *))v2->__locale_ + 2))(v2);
      std::locale::locale(&v5, v4);
      std::locale::operator=(v4, a2);
      std::locale::~locale(&v5);
    }
  }
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::seekpos(uint64_t a1, uint64_t a2, int a3)
{
  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::seek_impl(a1, *(_QWORD *)(a2 + 128), 0, a3);
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::sync(uint64_t a1)
{
  uint64_t result;

  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::sync_impl((const char *)a1);
  result = *(_QWORD *)(a1 + 160);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    return 0;
  }
  return result;
}

void sub_217FF0B1C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FF0B10);
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::underflow(_QWORD *a1)
{
  unsigned __int8 *v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (unsigned __int8 *)a1[3];
  if (!v2)
  {
    (*(void (**)(_QWORD *))(*a1 + 168))(a1);
    v2 = (unsigned __int8 *)a1[3];
  }
  if ((unint64_t)v2 >= a1[4])
  {
    v4 = a1[23];
    if (v4 >= (uint64_t)&v2[-a1[2]])
      v5 = (size_t)&v2[-a1[2]];
    else
      v5 = a1[23];
    if (v5)
    {
      v6 = -(uint64_t)v5;
      memmove((void *)(a1[21] + v4 - v5), &v2[-v5], v5);
      v4 = a1[23];
    }
    else
    {
      v6 = 0;
    }
    v7 = a1[21] + v4;
    a1[2] = v7 + v6;
    a1[3] = v7;
    a1[4] = v7;
    boost::iostreams::detail::device_wrapper_impl<boost::iostreams::output>::read<turi::fileio_impl::general_fstream_sink,boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>();
  }
  return *v2;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::overflow(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  char v6;

  if ((*(_BYTE *)(a1 + 192) & 2) != 0 && !*(_QWORD *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  if ((_DWORD)a2 == -1)
    return 0;
  if ((*(_BYTE *)(a1 + 192) & 2) == 0)
  {
    v6 = a2;
    if (turi::fileio_impl::general_fstream_sink::write((turi::fileio_impl::general_fstream_sink *)(a1 + 72), &v6, 1) == (const char *)1)
      return a2;
    return 0xFFFFFFFFLL;
  }
  v4 = *(_BYTE **)(a1 + 48);
  if (v4 == *(_BYTE **)(a1 + 56))
  {
    boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::sync_impl((const char *)a1);
    v4 = *(_BYTE **)(a1 + 48);
    if (v4 == *(_BYTE **)(a1 + 56))
      return 0xFFFFFFFFLL;
  }
  *v4 = a2;
  ++*(_QWORD *)(a1 + 48);
  return a2;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::set_next(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 160) = a2;
  return result;
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::close_impl(_QWORD *a1, int a2)
{
  if (a2 != 8)
  {
    if (a2 == 16)
    {
      (*(void (**)(_QWORD *))(*a1 + 48))(a1);
      a1[6] = 0;
      a1[7] = 0;
      a1[5] = 0;
    }
    turi::fileio_impl::general_fstream_sink::close((turi::fileio_impl::general_fstream_sink *)(a1 + 9));
  }
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::auto_close(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 192) >> 2) & 1;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::set_auto_close(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(result + 192) = *(_DWORD *)(result + 192) & 0xFFFFFFFB | v2;
  return result;
}

BOOL boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::strict_sync(uint64_t a1)
{
  uint64_t v2;

  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::sync_impl((const char *)a1);
  v2 = *(_QWORD *)(a1 + 160);
  return !v2 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2) != -1;
}

void sub_217FF0DA4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FF0D98);
}

void *boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::component_type()
{
}

_QWORD *boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::init_get_area(_QWORD *result)
{
  uint64_t v1;

  v1 = result[21];
  result[2] = v1;
  result[3] = v1;
  result[4] = v1;
  return result;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::init_put_area(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(result + 192) & 2) != 0)
  {
    v1 = *(_QWORD *)(result + 168);
    v2 = v1 + *(_QWORD *)(result + 176);
  }
  else
  {
    v1 = 0;
    v2 = 0;
  }
  *(_QWORD *)(result + 40) = v1;
  *(_QWORD *)(result + 48) = v1;
  *(_QWORD *)(result + 56) = v2;
  return result;
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(_DWORD *a1, int a2, _DWORD *a3, int a4, turi::fileio_impl::general_fstream_sink *a5, _DWORD *a6)
{
  uint64_t result;

  result = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>>(a1, a2, a3, a4, a5);
  *a6 = 0;
  return result;
}

void sub_217FF0E1C(void *a1)
{
  _DWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_217FF0E2C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>>(_DWORD *a1, int a2, _DWORD *a3, int a4, turi::fileio_impl::general_fstream_sink *a5)
{
  uint64_t v6;

  v6 = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>>(a1, a2, a3, a4);
  if (*((_BYTE *)a5 + 80))
  {
    turi::fileio_impl::general_fstream_sink::~general_fstream_sink(a5);
    *((_BYTE *)a5 + 80) = 0;
  }
  return v6;
}

void sub_217FF0E7C(void *a1)
{
  turi::fileio_impl::general_fstream_sink *v1;

  __cxa_begin_catch(a1);
  if (*((_BYTE *)v1 + 80))
  {
    turi::fileio_impl::general_fstream_sink::~general_fstream_sink(v1);
    *((_BYTE *)v1 + 80) = 0;
  }
  __cxa_rethrow();
}

void sub_217FF0E9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~indirect_streambuf(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24D921280;
  v2 = *(void **)(a1 + 168);
  if (v2)
    operator delete(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    turi::fileio_impl::general_fstream_sink::~general_fstream_sink((turi::fileio_impl::general_fstream_sink *)(a1 + 72));
    *(_BYTE *)(a1 + 152) = 0;
  }
  return std::streambuf::~streambuf();
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~indirect_streambuf(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24D921280;
  v2 = *(void **)(a1 + 168);
  if (v2)
    operator delete(v2);
  if (*(_BYTE *)(a1 + 152))
  {
    turi::fileio_impl::general_fstream_sink::~general_fstream_sink((turi::fileio_impl::general_fstream_sink *)(a1 + 72));
    *(_BYTE *)(a1 + 152) = 0;
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x219A19A08);
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::seek_impl(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;

  if (a3 != 1
    || a4 != 8
    || (v5 = *(_QWORD *)(a1 + 24)) == 0
    || *(_QWORD *)(a1 + 16) - v5 > a2
    || *(_QWORD *)(a1 + 32) - v5 < a2)
  {
    if (*(_QWORD *)(a1 + 48))
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    boost::iostreams::detail::device_wrapper_impl<boost::iostreams::any_tag>::seek<turi::fileio_impl::general_fstream_sink>();
  }
  *(_QWORD *)(a1 + 24) = v5 + (int)a2;
  boost::iostreams::detail::device_wrapper_impl<boost::iostreams::any_tag>::seek<turi::fileio_impl::general_fstream_sink>();
}

void boost::iostreams::detail::device_wrapper_impl<boost::iostreams::any_tag>::seek<turi::fileio_impl::general_fstream_sink>()
{
  std::ios_base::failure v0;
  std::error_code __ec;

  *(_QWORD *)&__ec.__val_ = 1;
  __ec.__cat_ = std::iostream_category();
  std::ios_base::failure::failure(&v0, "no random access", &__ec);
  boost::throw_exception<std::ios_base::failure>((uint64_t)&v0);
}

void sub_217FF1130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

const char *boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::sync_impl(const char *result)
{
  const char *v1;
  uint64_t v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;

  v1 = (const char *)*((_QWORD *)result + 5);
  v2 = *((_QWORD *)result + 6);
  v3 = (const char *)(v2 - (_QWORD)v1);
  if (v2 - (uint64_t)v1 >= 1)
  {
    v4 = result;
    result = turi::fileio_impl::general_fstream_sink::write((turi::fileio_impl::general_fstream_sink *)(result + 72), v1, v2 - (_QWORD)v1);
    if (result == v3)
    {
      v5 = (const char *)*((_QWORD *)v4 + 21);
      v6 = &v5[*((_QWORD *)v4 + 22)];
      *((_QWORD *)v4 + 5) = v5;
    }
    else
    {
      v7 = *((_QWORD *)v4 + 21);
      v8 = &result[v7];
      v6 = (const char *)(v7 + *((_QWORD *)v4 + 22));
      v5 = &v8[*((_DWORD *)v4 + 12) - (int)v8];
      *((_QWORD *)v4 + 5) = v8;
    }
    *((_QWORD *)v4 + 6) = v5;
    *((_QWORD *)v4 + 7) = v6;
  }
  return result;
}

void boost::iostreams::detail::device_wrapper_impl<boost::iostreams::output>::read<turi::fileio_impl::general_fstream_sink,boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>()
{
  std::ios_base::failure v0;
  std::error_code __ec;

  *(_QWORD *)&__ec.__val_ = 1;
  __ec.__cat_ = std::iostream_category();
  std::ios_base::failure::failure(&v0, "no read access", &__ec);
  boost::throw_exception<std::ios_base::failure>((uint64_t)&v0);
}

void sub_217FF11F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string,BOOL>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,BOOL>,std::string,&std::pair<std::string,BOOL>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,BOOL>>>::~multi_index_container(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(void ***)(v2 + 48);
  v4 = (void **)(v2 + 48);
  v3 = v5;
  if (v5 != v4)
  {
    do
    {
      v6 = (void **)*v3;
      boost::multi_index::multi_index_container<std::pair<std::string,BOOL>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,BOOL>,std::string,&std::pair<std::string,BOOL>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,BOOL>>>::delete_node_(a1, v3 - 6);
      v3 = v6;
    }
    while (v6 != v4);
  }
  if (*(_QWORD *)(a1 + 40))
    operator delete(*(void **)(a1 + 48));
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::multi_index::multi_index_container<std::pair<std::string,BOOL>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,BOOL>,std::string,&std::pair<std::string,BOOL>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,BOOL>>>::delete_node_(int a1, void **__p)
{
  if (*((char *)__p + 23) < 0)
    operator delete(*__p);
  operator delete(__p);
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>>>::~multi_index_container(uint64_t a1)
{
  boost::multi_index::detail::hashed_index<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,boost::hash<std::string>,std::equal_to<std::string>,boost::multi_index::detail::nth_layer<1,std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>>>,boost::mpl::vector0<mpl_::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_(a1 + 16);
  if (*(_QWORD *)(a1 + 40))
    operator delete(*(void **)(a1 + 48));
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::multi_index::detail::hashed_index<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,boost::hash<std::string>,std::equal_to<std::string>,boost::multi_index::detail::nth_layer<1,std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>>>,boost::mpl::vector0<mpl_::na>,boost::multi_index::detail::hashed_unique_tag>::delete_all_nodes_(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD **)(v1 + 56);
  v3 = (_QWORD *)(v1 + 56);
  v2 = v4;
  if (v4 != v3)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v5 = v2 - 7;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<turi::unity_sarray_base>>,0>((uint64_t)v5);
      operator delete(v5);
      v2 = v6;
    }
    while (v6 != v3);
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t boost::multi_index::detail::bucket_array<std::allocator<std::pair<std::string,BOOL>>>::bucket_array(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;

  v6 = 60;
  v7 = "5";
  do
  {
    v8 = v6 >> 1;
    v9 = &v7[8 * (v6 >> 1)];
    v11 = *(_QWORD *)v9;
    v10 = v9 + 8;
    v6 += ~(v6 >> 1);
    if (v11 < a4)
      v7 = v10;
    else
      v6 = v8;
  }
  while (v6);
  if (v7 == "NSt3__120__shared_ptr_emplaceIN4turi16general_ifstreamENS_9allocatorIS2_EEEE")
    v7 = (char *)&unk_2186D1E28;
  *(_QWORD *)a1 = (v7 - "5") >> 3;
  boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_base_node_impl<std::allocator<char>>,std::allocator<std::pair<std::string,BOOL>>>::auto_space(a1 + 8, a2, *(_QWORD *)v7 + 1);
  v12 = *(_QWORD *)&boost::multi_index::detail::bucket_array_base<true>::sizes[8 * *(_QWORD *)a1];
  bzero(*(void **)(a1 + 24), 8 * v12);
  *a3 = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v12) = a3;
  a3[1] = *(_QWORD *)(a1 + 24) + 8 * v12;
  return a1;
}

uint64_t boost::multi_index::detail::auto_space<boost::multi_index::detail::hashed_index_base_node_impl<std::allocator<char>>,std::allocator<std::pair<std::string,BOOL>>>::auto_space(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v4;

  *(_QWORD *)(a1 + 8) = a3;
  if (a3)
  {
    if (a3 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a3);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

std::string *std::allocate_shared[abi:ne180100]<turi::general_ifstream,std::allocator<turi::general_ifstream>,std::string &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0x188uLL);
  result = std::__shared_ptr_emplace<turi::general_ifstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::general_ifstream>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_217FF14FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<turi::general_ifstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::general_ifstream>,0>(std::string *a1, uint64_t a2)
{
  char v4;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D921538;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<turi::general_ifstream>::construct[abi:ne180100]<turi::general_ifstream,std::string &>((uint64_t)&v4, a1 + 1, a2);
  return a1;
}

void sub_217FF155C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::general_ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D921538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::general_ifstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D921538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::general_ifstream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<turi::general_ifstream>::construct[abi:ne180100]<turi::general_ifstream,std::string &>(uint64_t a1, std::string *a2, uint64_t a3)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::general_ifstream::general_ifstream(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FF1630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::string>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3;

  v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  std::__tree<std::string>::erase(a1, v3);
  return 1;
}

uint64_t *std::__tree<std::string>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<turi::block_cache::get_instance(void)::$_0 &&>>()
{
  std::__shared_weak_count *size;
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BOOL4 v7;
  turi::thread *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  const std::locale::facet *v12;
  std::string *v13;
  uint64_t v14;
  int *v15;
  file_logger *v16;
  file_logger *v17;
  _QWORD *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  std::string *v21;
  turi::thread *v22;
  uint64_t v23;
  _QWORD *exception;
  std::string v25;
  std::string __p;
  std::string v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  _ZNSt3__115allocate_sharedB8ne180100IN4turi11block_cacheENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v27);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)&turi::bc, (__int128 *)&v27);
  size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
  if (v27.__r_.__value_.__l.__size_)
  {
    v1 = (unint64_t *)(v27.__r_.__value_.__l.__size_ + 8);
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 - 1, v1));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v3 = turi::bc;
  turi::fileio::fixed_size_cache_manager::hold_instance(&v28);
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(v3 + 8), &v28);
  v4 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "block_caches-");
  turi::get_temp_name_prefer_hdfs((uint64_t)&__p, &v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  turi::fileio::delete_path((uint64_t)&v27, 3);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v25, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    v25 = v27;
  turi::fileio::get_protocol(&v25, (std::string::size_type)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = __p.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1936090216;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 4 && LODWORD(__p.__r_.__value_.__l.__data_) == 1936090216;
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_26:
      v8 = (turi::thread *)global_logger();
      if (*((int *)v8 + 169) > 2)
      {
LABEL_34:
        v13 = (std::string *)turi::bc;
        v14 = turi::thread::cpu_count(v8);
        turi::block_cache::init(v13, &v27, 4 * v14);
        goto LABEL_46;
      }
      if (!cppipc::must_cancel(v8))
      {
        v9 = (file_logger *)global_logger();
        started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/block_cache.cpp", "operator()", 223, 1);
        v11 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v11 && *((_BYTE *)v11 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Storing S3 Block Caches on HDFS", 31);
        v8 = (turi::thread *)pthread_getspecific(*((_QWORD *)started + 74));
        if (!v8)
          goto LABEL_34;
        if (!*((_BYTE *)v8 + 280))
          goto LABEL_34;
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*((_QWORD *)v8 + 2) - 24) + 16));
        v12 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) != 7)
          goto LABEL_34;
LABEL_50:
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
LABEL_49:
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
  }
  else if (v7)
  {
    goto LABEL_26;
  }
  v15 = (int *)global_logger();
  if (v15[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v15))
      goto LABEL_49;
    v16 = (file_logger *)global_logger();
    v17 = file_logger::start_stream(v16, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/block_cache.cpp", "operator()", 226, 1);
    v18 = pthread_getspecific(*((_QWORD *)v17 + 74));
    if (v18 && *((_BYTE *)v18 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18 + 2, (uint64_t)"Storing S3 Block Caches in memory cache", 39);
    v19 = pthread_getspecific(*((_QWORD *)v17 + 74));
    if (v19)
    {
      if (*((_BYTE *)v19 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(v19[2] - 24) + 16));
        v20 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v17);
        if (*((_DWORD *)v17 + 150) == 7)
          goto LABEL_50;
      }
    }
  }
  v21 = (std::string *)turi::bc;
  v22 = (turi::thread *)std::string::basic_string[abi:ne180100]<0>(&__p, "cache://block_caches-");
  v23 = turi::thread::cpu_count(v22);
  turi::block_cache::init(v21, &__p, 4 * v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_46:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_217FF1AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::locale::~locale(&a16);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4turi11block_cacheENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x4178uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi11block_cacheENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_217FF1B98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4turi11block_cacheENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  turi::block_cache *v2;

  a1[2] = 0;
  *a1 = &unk_24D921588;
  a1[1] = 0;
  v2 = (turi::block_cache *)(a1 + 3);
  bzero(a1 + 3, 0x4160uLL);
  turi::block_cache::block_cache(v2);
  return a1;
}

void sub_217FF1BF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::block_cache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D921588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::block_cache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D921588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::block_cache>::__on_zero_shared(uint64_t a1)
{
  turi::block_cache::~block_cache((turi::block_cache *)(a1 + 24));
}

turi::block_cache *turi::block_cache::block_cache(turi::block_cache *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 48), 0);
  assert_msg((_DWORD)v2 == 0, v3, v2);
  v4 = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  do
  {
    v5 = pthread_mutex_init((pthread_mutex_t *)((char *)this + v4 + 144), 0);
    assert_msg((_DWORD)v5 == 0, v6, v5);
    v4 += 64;
  }
  while (v4 != 0x4000);
  boost::multi_index::multi_index_container<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>>>::multi_index_container((uint64_t)this + 16528);
  *((_QWORD *)this + 2076) = -1;
  *((_QWORD *)this + 2078) = 0;
  *((_QWORD *)this + 2077) = 0;
  boost::multi_index::multi_index_container<std::pair<std::string,BOOL>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,BOOL>,std::string,&std::pair<std::string,BOOL>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,BOOL>>>::multi_index_container((uint64_t)this + 16632);
  *((_QWORD *)this + 2089) = -1;
  *((_QWORD *)this + 2091) = 0;
  *((_QWORD *)this + 2090) = 0;
  return this;
}

void sub_217FF1D5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  pthread_mutex_t *v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t i;

  v7 = v5;
  boost::multi_index::multi_index_container<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>>>::~multi_index_container(v7);
  for (i = 16464; i != 80; i -= 64)
    turi::mutex::~mutex((pthread_mutex_t *)(v1 + i));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v4, *v6);
  turi::mutex::~mutex(v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sub_217FF1F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>>>::multi_index_container(uint64_t a1)
{
  char v3;
  unint64_t v4[3];

  *(_QWORD *)(a1 + 8) = operator new(0x48uLL);
  v4[0] = 0;
  boost::multi_index::detail::hashed_index<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,boost::hash<std::string>,std::equal_to<std::string>,boost::multi_index::detail::nth_layer<1,std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>>>,boost::mpl::vector0<mpl_::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index(a1 + 16, v4, (uint64_t)&v3);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_217FF2064(_Unwind_Exception *a1)
{
  uint64_t v1;

  operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::detail::hashed_index<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,boost::hash<std::string>,std::equal_to<std::string>,boost::multi_index::detail::nth_layer<1,std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>,std::string,&std::pair<std::string,std::shared_ptr<turi::general_ifstream>>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,std::shared_ptr<turi::general_ifstream>>>>,boost::mpl::vector0<mpl_::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  float v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v4 + 48) = v4 + 40;
  *(_QWORD *)(*(_QWORD *)(a1 - 8) + 40) = v4 + 40;
  boost::multi_index::detail::bucket_array<std::allocator<std::pair<std::string,BOOL>>>::bucket_array(a1 + 8, a3, (_QWORD *)(*(_QWORD *)(a1 - 8) + 56), *a2);
  *(_DWORD *)(a1 + 40) = 1065353216;
  v5 = (float)*(unint64_t *)&boost::multi_index::detail::bucket_array_base<true>::sizes[8 * *(_QWORD *)(a1 + 8)];
  v6 = (unint64_t)v5;
  if (v5 >= 1.8447e19)
    v6 = -1;
  *(_QWORD *)(a1 + 48) = v6;
  return a1;
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string,BOOL>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,BOOL>,std::string,&std::pair<std::string,BOOL>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,BOOL>>>::multi_index_container(uint64_t a1)
{
  char v3;
  unint64_t v4[3];

  *(_QWORD *)(a1 + 8) = operator new(0x40uLL);
  v4[0] = 0;
  boost::multi_index::detail::hashed_index<boost::multi_index::member<std::pair<std::string,BOOL>,std::string,&std::pair<std::string,BOOL>::first>,boost::hash<std::string>,std::equal_to<std::string>,boost::multi_index::detail::nth_layer<1,std::pair<std::string,BOOL>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,BOOL>,std::string,&std::pair<std::string,BOOL>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,BOOL>>>,boost::mpl::vector0<mpl_::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index(a1 + 16, v4, (uint64_t)&v3);
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_217FF2148(_Unwind_Exception *a1)
{
  uint64_t v1;

  operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::detail::hashed_index<boost::multi_index::member<std::pair<std::string,BOOL>,std::string,&std::pair<std::string,BOOL>::first>,boost::hash<std::string>,std::equal_to<std::string>,boost::multi_index::detail::nth_layer<1,std::pair<std::string,BOOL>,boost::multi_index::indexed_by<boost::multi_index::hashed_unique<boost::multi_index::member<std::pair<std::string,BOOL>,std::string,&std::pair<std::string,BOOL>::first>,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string,BOOL>>>,boost::mpl::vector0<mpl_::na>,boost::multi_index::detail::hashed_unique_tag>::hashed_index(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  float v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v4 + 40) = v4 + 32;
  *(_QWORD *)(*(_QWORD *)(a1 - 8) + 32) = v4 + 32;
  boost::multi_index::detail::bucket_array<std::allocator<std::pair<std::string,BOOL>>>::bucket_array(a1 + 8, a3, (_QWORD *)(*(_QWORD *)(a1 - 8) + 48), *a2);
  *(_DWORD *)(a1 + 40) = 1065353216;
  v5 = (float)*(unint64_t *)&boost::multi_index::detail::bucket_array_base<true>::sizes[8 * *(_QWORD *)(a1 + 8)];
  v6 = (unint64_t)v5;
  if (v5 >= 1.8447e19)
    v6 = -1;
  *(_QWORD *)(a1 + 48) = v6;
  return a1;
}

uint64_t _GLOBAL__sub_I_block_cache_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  return __cxa_atexit((void (*)(void *))std::shared_ptr<turi::block_cache>::~shared_ptr[abi:ne180100], &turi::bc, &dword_217E69000);
}

uint64_t *turi::fileio_impl::cache_stream_sink::cache_stream_sink(uint64_t *a1, uint64_t a2)
{
  uint64_t instance;
  uint64_t *v5;
  uint64_t v6;
  int *v7;
  file_logger *v8;
  file_logger *started;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *exception;
  __int128 v22;
  std::string v23;
  std::string v24;
  std::string v25;

  instance = turi::fileio::fixed_size_cache_manager::get_instance((turi::fileio::fixed_size_cache_manager *)a1);
  *a1 = instance;
  v5 = a1 + 1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  turi::fileio::fixed_size_cache_manager::new_cache(instance, (uint64_t)&v25, a1 + 1);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  a1[3] = 0;
  a1[4] = 0;
  v6 = a1[1];
  if (*(char *)(v6 + 79) < 0)
  {
    if (!*(_QWORD *)(v6 + 64))
      return a1;
  }
  else if (!*(_BYTE *)(v6 + 79))
  {
    return a1;
  }
  v7 = (int *)global_logger();
  if (v7[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v7))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/cache_stream_sink.cpp", "cache_stream_sink", 15, 1);
    v10 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v10 && *((_BYTE *)v10 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Writing ", 8);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v24 = *(std::string *)a2;
    v11 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v24);
    v12 = pthread_getspecific(*(_QWORD *)(v11 + 592));
    if (v12 && *((_BYTE *)v12 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)" from ", 6);
    v13 = *v5;
    if (*(char *)(*v5 + 79) < 0)
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(v13 + 56), *(_QWORD *)(v13 + 64));
    else
      v23 = *(std::string *)(v13 + 56);
    v14 = file_logger::operator<<<std::string>(v11, (uint64_t)&v23);
    v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
    if (v15)
    {
      if (*((_BYTE *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
        v16 = std::locale::use_facet((const std::locale *)&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale((std::locale *)&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v14);
        if (*(_DWORD *)(v14 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<turi::fileio_impl::general_fstream_sink,std::allocator<turi::fileio_impl::general_fstream_sink>,std::string const&,void>(*v5 + 56, &v22);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(a1 + 3), &v22);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

void sub_217FF252C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  std::locale::~locale((std::locale *)&a9);
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v31);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

void turi::fileio_impl::cache_stream_sink::~cache_stream_sink(turi::fileio_impl::cache_stream_sink *this)
{
  turi::fileio_impl::general_fstream_sink *v2;
  char *v3;

  v3 = (char *)this + 24;
  v2 = (turi::fileio_impl::general_fstream_sink *)*((_QWORD *)this + 3);
  if (v2)
    turi::fileio_impl::general_fstream_sink::close(v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void turi::fileio_impl::cache_stream_sink::close(turi::fileio_impl::cache_stream_sink *this)
{
  turi::fileio_impl::general_fstream_sink *v1;

  v1 = (turi::fileio_impl::general_fstream_sink *)*((_QWORD *)this + 3);
  if (v1)
    turi::fileio_impl::general_fstream_sink::close(v1);
}

const char *turi::fileio_impl::cache_stream_sink::write(turi::fileio_impl::cache_stream_sink *this, const char *a2, uint64_t a3)
{
  size_t v3;
  turi::fileio_impl::general_fstream_sink *v6;
  turi::fileio_impl::general_fstream_sink **v7;
  turi::fileio::cache_block *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  v3 = a3;
  v7 = (turi::fileio_impl::general_fstream_sink **)((char *)this + 24);
  v6 = (turi::fileio_impl::general_fstream_sink *)*((_QWORD *)this + 3);
  if (v6)
    return turi::fileio_impl::general_fstream_sink::write(v6, a2, a3);
  v9 = (turi::fileio::cache_block *)*((_QWORD *)this + 1);
  v10 = *((_QWORD *)v9 + 6);
  if (!v10)
    goto LABEL_9;
  v11 = *((_QWORD *)v9 + 5);
  if ((unint64_t)(v11 + a3) > *((_QWORD *)v9 + 4))
  {
    if ((turi::fileio::cache_block::extend_capacity(*((turi::fileio::cache_block **)this + 1), v11 + a3) & 1) != 0)
    {
      v11 = *((_QWORD *)v9 + 5);
      v10 = *((_QWORD *)v9 + 6);
      goto LABEL_7;
    }
    v9 = (turi::fileio::cache_block *)*((_QWORD *)this + 1);
LABEL_9:
    turi::fileio::cache_block::write_to_file(v9, (turi::fileio_impl::general_fstream_sink **)&v15);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v7, &v15);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    return turi::fileio_impl::general_fstream_sink::write(*v7, a2, v3);
  }
LABEL_7:
  memcpy((void *)(v10 + v11), a2, v3);
  *((_QWORD *)v9 + 5) += v3;
  return (const char *)v3;
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::fileio_impl::general_fstream_sink,std::allocator<turi::fileio_impl::general_fstream_sink>,std::string const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_sink>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<turi::fileio_impl::general_fstream_sink>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217FF2764(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_sink>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<turi::fileio_impl::general_fstream_sink>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D9215D8;
  a1[1] = 0;
  std::allocator<turi::fileio_impl::general_fstream_sink>::construct[abi:ne180100]<turi::fileio_impl::general_fstream_sink,std::string const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_217FF27C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_sink>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9215D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_sink>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D9215D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_sink>::__on_zero_shared(uint64_t a1)
{
  turi::fileio_impl::general_fstream_sink::~general_fstream_sink((turi::fileio_impl::general_fstream_sink *)(a1 + 24));
}

void std::allocator<turi::fileio_impl::general_fstream_sink>::construct[abi:ne180100]<turi::fileio_impl::general_fstream_sink,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::fileio_impl::general_fstream_sink::general_fstream_sink(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FF2894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_cache_stream_sink_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::fileio_impl::cache_stream_source::cache_stream_source(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t instance;
  std::__shared_weak_count *locale;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  int *v11;
  file_logger *v12;
  file_logger *started;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *exception;
  std::string __p;
  std::string v27;
  std::string v28;
  std::locale v29[2];

  *(_OWORD *)(a1 + 24) = 0u;
  v4 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = a1 + 40;
  instance = turi::fileio::fixed_size_cache_manager::get_instance((turi::fileio::fixed_size_cache_manager *)a1);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v28 = *(std::string *)a2;
  turi::fileio::fixed_size_cache_manager::get_cache(instance, (std::string::size_type)&v28, v29);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v4, (__int128 *)v29);
  locale = (std::__shared_weak_count *)v29[1].__locale_;
  if (v29[1].__locale_)
  {
    v8 = (unint64_t *)((char *)v29[1].__locale_ + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v10 = *(_QWORD **)v4;
  if (*(char *)(*(_QWORD *)v4 + 79) < 0)
  {
    if (v10[8])
      goto LABEL_13;
LABEL_21:
    *(_QWORD *)a1 = v10[6];
    *(_QWORD *)(a1 + 8) = v10[5];
    *(_QWORD *)(a1 + 16) = 0;
    return a1;
  }
  if (!*(_BYTE *)(*(_QWORD *)v4 + 79))
    goto LABEL_21;
LABEL_13:
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v11 = (int *)global_logger();
  if (v11[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v11))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/cache_stream_source.cpp", "cache_stream_source", 27, 1);
    v14 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Reading ", 8);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v27 = *(std::string *)a2;
    v15 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v27);
    v16 = pthread_getspecific(*(_QWORD *)(v15 + 592));
    if (v16 && *((_BYTE *)v16 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)" from ", 6);
    v17 = *(_QWORD *)v4;
    if (*(char *)(*(_QWORD *)v4 + 79) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v17 + 56), *(_QWORD *)(v17 + 64));
    else
      __p = *(std::string *)(v17 + 56);
    v18 = file_logger::operator<<<std::string>(v15, (uint64_t)&__p);
    v19 = pthread_getspecific(*(_QWORD *)(v18 + 592));
    if (v19)
    {
      if (*((_BYTE *)v19 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(v19[2] - 24) + 16));
        v20 = std::locale::use_facet(v29, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v29);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v18);
        if (*(_DWORD *)(v18 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<turi::fileio_impl::general_fstream_source,std::allocator<turi::fileio_impl::general_fstream_source>,std::string const&,void>(*(_QWORD *)v4 + 56, v29);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v5, (__int128 *)v29);
  v21 = (std::__shared_weak_count *)v29[1].__locale_;
  if (v29[1].__locale_)
  {
    v22 = (unint64_t *)((char *)v29[1].__locale_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return a1;
}

void sub_217FF2C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  std::locale::~locale((std::locale *)(v30 - 72));
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

size_t turi::fileio_impl::cache_stream_source::read(turi::fileio_impl::general_fstream_source **this, char *__dst, unint64_t a3)
{
  turi::fileio_impl::general_fstream_source *v4;
  size_t v5;

  if (!*this)
    return turi::fileio_impl::general_fstream_source::read(this[5], __dst, a3);
  v4 = this[2];
  if (this[1] - v4 >= a3)
    v5 = a3;
  else
    v5 = this[1] - v4;
  memcpy(__dst, (char *)v4 + (_QWORD)*this, v5);
  this[2] = (turi::fileio_impl::general_fstream_source *)((char *)this[2] + v5);
  return v5;
}

void turi::fileio_impl::cache_stream_source::close(turi::fileio_impl::cache_stream_source *this)
{
  turi::fileio_impl::general_fstream_source *v1;

  v1 = (turi::fileio_impl::general_fstream_source *)*((_QWORD *)this + 5);
  if (v1)
    turi::fileio_impl::general_fstream_source::close(v1);
}

uint64_t turi::fileio_impl::cache_stream_source::seek@<X0>(uint64_t this@<X0>, uint64_t a2@<X2>, const char *a3@<X1>, uint64_t a4@<X8>)
{
  const char *v4;
  uint64_t v5;

  if (!*(_QWORD *)this)
    return turi::fileio_impl::general_fstream_source::seek(*(turi::fileio_impl::general_fstream_source **)(this + 40), a3, a2);
  *(_QWORD *)(a4 + 128) = 0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if ((_DWORD)a2 == 2)
  {
    a3 = &a3[*(_QWORD *)(this + 8) - 1];
    *(_OWORD *)a4 = 0uLL;
    *(_OWORD *)(a4 + 16) = 0uLL;
    *(_OWORD *)(a4 + 32) = 0uLL;
    *(_OWORD *)(a4 + 48) = 0uLL;
    *(_OWORD *)(a4 + 64) = 0uLL;
    *(_OWORD *)(a4 + 80) = 0uLL;
    *(_OWORD *)(a4 + 96) = 0uLL;
    *(_OWORD *)(a4 + 112) = 0uLL;
  }
  else if ((_DWORD)a2 == 1)
  {
    v5 = *(_QWORD *)(this + 16);
    *(_OWORD *)a4 = 0uLL;
    *(_OWORD *)(a4 + 16) = 0uLL;
    *(_OWORD *)(a4 + 32) = 0uLL;
    *(_OWORD *)(a4 + 48) = 0uLL;
    *(_OWORD *)(a4 + 64) = 0uLL;
    *(_OWORD *)(a4 + 80) = 0uLL;
    *(_OWORD *)(a4 + 96) = 0uLL;
    *(_OWORD *)(a4 + 112) = 0uLL;
    a3 += v5;
  }
  else
  {
    v4 = 0;
    if ((_DWORD)a2)
      goto LABEL_10;
    *(_OWORD *)(a4 + 96) = 0uLL;
    *(_OWORD *)(a4 + 112) = 0uLL;
    *(_OWORD *)(a4 + 64) = 0uLL;
    *(_OWORD *)(a4 + 80) = 0uLL;
    *(_OWORD *)(a4 + 32) = 0uLL;
    *(_OWORD *)(a4 + 48) = 0uLL;
    *(_OWORD *)a4 = 0uLL;
    *(_OWORD *)(a4 + 16) = 0uLL;
  }
  *(_QWORD *)(a4 + 128) = a3;
  v4 = a3;
  if (((unint64_t)a3 & 0x8000000000000000) != 0)
    goto LABEL_12;
LABEL_10:
  if ((uint64_t)v4 >= *(_QWORD *)(this + 8))
LABEL_12:
    turi::fileio_impl::cache_stream_source::seek(long long,std::ios_base::seekdir)::$_0::operator()();
  *(_QWORD *)(this + 16) = v4;
  return this;
}

uint64_t turi::fileio_impl::cache_stream_source::file_size(turi::fileio_impl::cache_stream_source *this)
{
  turi::neural_net::shared_float_array **v2;

  v2 = (turi::neural_net::shared_float_array **)*((_QWORD *)this + 5);
  if (v2)
    return turi::fileio_impl::general_fstream_source::file_size(v2);
  else
    return *((_QWORD *)this + 1);
}

void turi::fileio_impl::cache_stream_source::get_underlying_stream(turi::fileio_impl::cache_stream_source *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9[3];
  uint64_t v10;
  __int128 v11;

  if (*(_QWORD *)this)
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 40);
    v9[0] = *(_QWORD *)(*((_QWORD *)this + 3) + 48);
    v10 = v4;
    std::allocate_shared[abi:ne180100]<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>,std::allocator<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>>,char *,unsigned long,void>(v9, &v10, &v11);
    *(_OWORD *)a2 = v11;
  }
  else
  {
    turi::fileio_impl::general_fstream_source::get_underlying_stream(*((_QWORD **)this + 5), &v11);
    if ((_QWORD)v11)
    {
      v5 = *((_QWORD *)&v11 + 1);
      *(_QWORD *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v5;
    }
    else
    {
      std::allocate_shared[abi:ne180100]<turi::general_ifstream,std::allocator<turi::general_ifstream>,std::string const&,void>(*((_QWORD *)this + 3) + 56, v9);
      *(_OWORD *)a2 = *(_OWORD *)v9;
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
      if (*((_QWORD *)&v11 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_217FF2EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::fileio_impl::general_fstream_source,std::allocator<turi::fileio_impl::general_fstream_source>,std::string const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_source>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<turi::fileio_impl::general_fstream_source>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217FF2F34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_source>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<turi::fileio_impl::general_fstream_source>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_24D921628;
  a1[1] = 0;
  std::allocator<turi::fileio_impl::general_fstream_source>::construct[abi:ne180100]<turi::fileio_impl::general_fstream_source,std::string const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_217FF2F94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D921628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D921628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_source>::__on_zero_shared(uint64_t a1)
{
  turi::fileio_impl::general_fstream_source::~general_fstream_source((turi::fileio_impl::general_fstream_source *)(a1 + 24));
}

void std::allocator<turi::fileio_impl::general_fstream_source>::construct[abi:ne180100]<turi::fileio_impl::general_fstream_source,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::fileio_impl::general_fstream_source::general_fstream_source(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FF3064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>,std::allocator<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>>,char *,unsigned long,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x148uLL);
  result = std::__shared_ptr_emplace<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>>::__shared_ptr_emplace[abi:ne180100]<char *,unsigned long,std::allocator<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_217FF30CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>>::__shared_ptr_emplace[abi:ne180100]<char *,unsigned long,std::allocator<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  *a1 = &unk_24D921678;
  a1[1] = 0;
  boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::stream<char *,unsigned long>(a1 + 3, a2, a3);
  return a1;
}

void sub_217FF311C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D921678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D921678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::stream<char *,unsigned long>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  std::ios_base *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  a1[19] = MEMORY[0x24BEDB898] + 16;
  v6 = (std::ios_base *)(a1 + 19);
  boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base((uint64_t)a1, (uint64_t *)&off_24D921710);
  *a1 = &unk_24D9216D0;
  a1[19] = &unk_24D9216F8;
  v7 = *a2;
  v8 = *a3;
  std::ios_base::clear(v6, 0);
  *(_QWORD *)&v10 = v7;
  *((_QWORD *)&v10 + 1) = v7 + v8;
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open_impl((uint64_t)(a1 + 2), &v10);
  return a1;
}

void sub_217FF3234(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A198F4](v1);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;

  v4 = (void *)(a1 + 16);
  std::streambuf::basic_streambuf();
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 144) = 1;
  *(_DWORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 16) = &unk_24D921848;
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = a2[3];
  v6 = a2[1];
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = a2[2];
  *(_QWORD *)(a1 + 8) = 0;
  v7 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v7, v4);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v8 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24)) = a2[3];
  return a1;
}

void sub_217FF3328(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x219A198F4](a1 + 152);
  return a1;
}

void boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x219A198F4](a1 + 152);
  JUMPOUT(0x219A19A08);
}

void `virtual thunk to'boost::iostreams::detail::stream_base<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x219A198F4);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x219A198F4](v1 + 152);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x219A198F4](a1 + 152);
  return a1;
}

void boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x219A198F4](a1 + 152);
  JUMPOUT(0x219A19A08);
}

void `virtual thunk to'boost::iostreams::stream<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>>::~stream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x219A198F4);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x219A198F4](v1 + 152);
  JUMPOUT(0x219A19A08);
}

void boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(uint64_t a1)
{
  boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(a1);
  JUMPOUT(0x219A19A08);
}

double boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::seekpos@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::seek_impl(a1, *(_QWORD *)(a2 + 128), 0, a3, a4);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::underflow(_QWORD *a1)
{
  unsigned __int8 *v2;
  std::ios_base::failure v4;

  if (!a1[12])
  {
    boost::iostreams::detail::cant_read(&v4);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v4);
  }
  v2 = (unsigned __int8 *)a1[3];
  if (!v2)
  {
    boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_get_area((uint64_t)a1);
    v2 = (unsigned __int8 *)a1[3];
  }
  if (v2 == (unsigned __int8 *)a1[13])
    return 0xFFFFFFFFLL;
  else
    return *v2;
}

void sub_217FF3644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

boost::iostreams::detail *boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::pbackfail(uint64_t a1, boost::iostreams::detail *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  std::ios_base::failure v6;

  v2 = *(_QWORD *)(a1 + 96);
  if (!v2)
  {
    boost::iostreams::detail::cant_read(&v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v6);
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    v4 = v3 == v2;
  else
    v4 = 1;
  if (v4)
  {
    boost::iostreams::detail::bad_putback(&v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v6);
  }
  *(_QWORD *)(a1 + 24) = v3 - 1;
  if ((_DWORD)this == -1)
    return 0;
  *(_BYTE *)(v3 - 1) = (_BYTE)this;
  return this;
}

void sub_217FF36D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::overflow(_QWORD *a1, uint64_t a2)
{
  _BYTE *v4;
  std::error_code v6;
  std::ios_base::failure v7;

  if (!a1[14])
  {
    *(_QWORD *)&v6.__val_ = 1;
    v6.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v7, "no write access", &v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v7);
  }
  if (!a1[6])
    boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_put_area((uint64_t)a1);
  if ((_DWORD)a2 == -1)
    return 0;
  v4 = (_BYTE *)a1[6];
  if (v4 == (_BYTE *)a1[15])
  {
    *(_QWORD *)&v6.__val_ = 1;
    v6.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v7, "write area exhausted", &v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v7);
  }
  *v4 = a2;
  ++a1[6];
  return a2;
}

void sub_217FF37BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  _Unwind_Resume(a1);
}

_QWORD *boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::close_impl(_QWORD *result, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2 == 16)
  {
    v2 = result + 14;
    if (!result[14])
      return result;
    v3 = result + 5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 48))(result);
    goto LABEL_7;
  }
  if (a2 == 8)
  {
    v2 = result + 12;
    if (result[12])
    {
      v3 = result + 2;
LABEL_7:
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      *v2 = 0;
      v2[1] = 0;
    }
  }
  return result;
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::auto_close(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 128);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::set_auto_close(uint64_t result, char a2)
{
  *(_BYTE *)(result + 128) = a2;
  return result;
}

void *boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::component_type()
{
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::~direct_streambuf(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D921930;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  return std::streambuf::~streambuf();
}

void boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::~direct_streambuf(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D921930;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  std::streambuf::~streambuf();
  JUMPOUT(0x219A19A08);
}

uint64_t boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D921848;
  if ((*(_QWORD *)(a1 + 96) || *(_QWORD *)(a1 + 112)) && *(_BYTE *)(a1 + 128))
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::basic_array_source<char>>>>((_DWORD *)a1, 8, (_DWORD *)a1, 16, a1 + 72);
  *(_QWORD *)a1 = &unk_24D921930;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  return std::streambuf::~streambuf();
}

void sub_217FF3930(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FF3904);
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::basic_array_source<char>>>>(_DWORD *a1, int a2, _DWORD *a3, int a4, uint64_t a5)
{
  uint64_t result;

  result = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>>(a1, a2, a3, a4);
  if (*(_BYTE *)(a5 + 16))
    *(_BYTE *)(a5 + 16) = 0;
  return result;
}

void sub_217FF396C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(_BYTE *)(v1 + 16))
    *(_BYTE *)(v1 + 16) = 0;
  __cxa_rethrow();
}

void sub_217FF3984(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

double boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::seek_impl@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  std::ios_base::failure v25;

  v10 = a1[12];
  if (!v10)
  {
LABEL_21:
    v15 = 0;
    v16 = -1;
    if ((a4 & 0x10) == 0)
      goto LABEL_50;
    goto LABEL_36;
  }
  v11 = a1[14];
  if (v10 != v11 && (a4 & 0x18) == 24 && v11 != 0)
  {
    boost::iostreams::detail::bad_seek(&v25);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v25);
  }
  if (v11)
    v14 = v10 == v11;
  else
    v14 = 0;
  v15 = v14;
  if (v14)
  {
    if (a1[6] || !a1[3])
      boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_get_area((uint64_t)a1);
  }
  else if ((a4 & 8) == 0)
  {
    goto LABEL_21;
  }
  v17 = a1[3];
  if (!v17)
  {
    v18 = *((_OWORD *)a1 + 6);
    a1[2] = v18;
    *(_OWORD *)(a1 + 3) = v18;
    v17 = v18;
  }
  v16 = a2;
  if (a3)
  {
    if (a3 != 1)
    {
      if (a3 != 2)
      {
        v16 = 0;
        goto LABEL_34;
      }
      v17 = a1[13];
    }
    v16 = v17 + a2 - a1[12];
  }
  if (v16 < 0)
  {
LABEL_51:
    boost::iostreams::detail::bad_seek(&v25);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v25);
  }
LABEL_34:
  v20 = a1[12];
  v19 = a1[13];
  if (v16 > v19 - v20)
    goto LABEL_51;
  a1[2] = v20;
  a1[3] = v20 + v16;
  a1[4] = v19;
  if ((a4 & 0x10) == 0)
    goto LABEL_50;
LABEL_36:
  if ((v15 & 1) != 0)
    goto LABEL_50;
  v21 = a1[14];
  if (!v21)
    goto LABEL_50;
  v22 = a1[6];
  if (!v22)
  {
    v23 = a1[15];
    a1[5] = v21;
    a1[6] = v21;
    a1[7] = v23;
    v22 = v21;
  }
  switch(a3)
  {
    case 0:
      goto LABEL_45;
    case 2:
      a2 = a2 - v21 + a1[15];
LABEL_45:
      v16 = a2;
      if (a2 < 0)
      {
LABEL_52:
        boost::iostreams::detail::bad_seek(&v25);
        boost::throw_exception<std::ios_base::failure>((uint64_t)&v25);
      }
      goto LABEL_48;
    case 1:
      a2 = a2 - v21 + v22;
      goto LABEL_45;
  }
  v16 = 0;
LABEL_48:
  if (v16 > a1[15] - v21)
    goto LABEL_52;
  a1[6] = v22 + (int)v16 + (int)v21 - (int)v22;
LABEL_50:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v16;
  return result;
}

void sub_217FF3B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

std::ios_base::failure *boost::iostreams::detail::bad_seek@<X0>(std::ios_base::failure *a1@<X8>)
{
  std::error_code v4;

  *(_QWORD *)&v4.__val_ = 1;
  v4.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "bad seek", &v4);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_get_area(uint64_t result)
{
  __int128 v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_OWORD *)(result + 96);
  *(_QWORD *)(result + 16) = v1;
  *(_OWORD *)(result + 24) = v1;
  if ((_QWORD)v1)
  {
    v2 = *(_QWORD *)(result + 112);
    if (v2)
      v3 = (_QWORD)v1 == v2;
    else
      v3 = 0;
    if (v3)
    {
      v4 = *(_QWORD *)(result + 48);
      if (v4)
      {
        *(_QWORD *)(result + 24) = v1 + (int)v4 - (int)v1;
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 40) = 0;
      }
    }
  }
  return result;
}

std::ios_base::failure *boost::iostreams::detail::cant_read@<X0>(std::ios_base::failure *a1@<X8>)
{
  std::error_code v4;

  *(_QWORD *)&v4.__val_ = 1;
  v4.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "no read access", &v4);
}

uint64_t boost::iostreams::detail::direct_streambuf<boost::iostreams::basic_array_source<char>,std::char_traits<char>>::init_put_area(uint64_t result)
{
  __int128 v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v5;

  v1 = *(_OWORD *)(result + 112);
  *(_QWORD *)(result + 40) = v1;
  *(_OWORD *)(result + 48) = v1;
  v2 = *(_QWORD *)(result + 96);
  if (v2)
    v3 = (_QWORD)v1 == 0;
  else
    v3 = 1;
  if (!v3 && v2 == (_QWORD)v1)
  {
    v5 = *(_QWORD *)(result + 24);
    if (v5)
    {
      *(_QWORD *)(result + 48) = v1 + (int)v5 - (int)v1;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 16) = 0;
    }
  }
  return result;
}

double boost::iostreams::stream_buffer<boost::iostreams::basic_array_source<char>,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open_impl(uint64_t a1, _OWORD *a2)
{
  double result;
  std::error_code v3;
  std::ios_base::failure v4;

  if (*(_QWORD *)(a1 + 96) || *(_QWORD *)(a1 + 112))
  {
    *(_QWORD *)&v3.__val_ = 1;
    v3.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v4, "already open", &v3);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v4);
  }
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *a2;
  *(_BYTE *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 72);
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) &= 0xFFFFFFF9;
  return result;
}

void sub_217FF3D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<turi::general_ifstream,std::allocator<turi::general_ifstream>,std::string const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0x188uLL);
  result = std::__shared_ptr_emplace<turi::general_ifstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<turi::general_ifstream>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_217FF3D9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_cache_stream_source_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::download_url(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  const std::string::value_type *v7;
  uint64_t v8;
  const std::string::value_type *v9;
  uint64_t v10;
  const std::string::value_type *v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  const std::string::value_type *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  int v24;
  unint64_t v25;
  std::string::size_type v26;
  const std::string::value_type *v27;
  int v28;
  std::string *v29;
  const std::string::value_type *v30;
  int v31;
  const std::string::value_type *v32;
  const std::string::value_type *v33;
  int v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  std::string::size_type v38;
  char v39;
  std::string v40;
  std::string v41;
  std::string __p;
  std::string v43;
  char v44;
  _QWORD v45[2];
  _QWORD v46[2];
  _BYTE v47[408];
  _QWORD v48[20];

  v48[19] = *MEMORY[0x24BDAC8D0];
  v4 = *(char *)(a1 + 23);
  v5 = *(const std::string::value_type **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  if (v4 >= 0)
    v7 = (const std::string::value_type *)a1;
  else
    v7 = *(const std::string::value_type **)a1;
  if (v4 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = &v7[v8];
    v10 = v8 - 1;
    v11 = v7;
    while (1)
    {
      v12 = 0;
      while (v11[v12] == asc_2187CDC6E[v12])
      {
        v13 = v12 + 1;
        if (v10 != v12 && v12++ != 2)
          continue;
        v15 = &asc_2187CDC6E[v13];
        v16 = &v11[v13];
        goto LABEL_16;
      }
      v15 = &asc_2187CDC6E[v12];
      v16 = &v11[v12];
LABEL_16:
      if (v15 == "")
        break;
      ++v11;
      --v10;
      if (v11 == v9)
        goto LABEL_40;
    }
    if (v11 != v16)
    {
      std::ifstream::basic_ifstream(v46);
      v17 = *(char *)(a1 + 23);
      v18 = *(_QWORD *)(a1 + 8);
      if (v17 >= 0)
        v18 = *(unsigned __int8 *)(a1 + 23);
      if (!v18)
        goto LABEL_32;
      v19 = 0;
      if (v17 >= 0)
        v20 = (const std::string::value_type *)a1;
      else
        v20 = *(const std::string::value_type **)a1;
      v21 = v18 - 1;
      if (v21 >= 6)
        v21 = 6;
      v22 = v21 + 1;
      do
      {
        if (v20[v19] != aFile[v19])
          goto LABEL_32;
        ++v19;
      }
      while (v22 != v19);
      if (v19 != 7)
      {
LABEL_32:
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        turi::get_temp_name((uint64_t)&__p, &v43);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
          if (!v43.__r_.__value_.__l.__size_)
            goto LABEL_36;
        }
        else if (!*((_BYTE *)&v43.__r_.__value_.__s + 23))
        {
LABEL_36:
          *(_DWORD *)a2 = -1;
          *(_BYTE *)(a2 + 4) = 0;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a2 + 8), "");
          goto LABEL_37;
        }
        v24 = *(char *)(a1 + 23);
        v25 = *(unsigned __int8 *)(a1 + 23);
        if (v24 < 0)
        {
          v27 = *(const std::string::value_type **)a1;
          v26 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          v27 = (const std::string::value_type *)a1;
          v26 = *(unsigned __int8 *)(a1 + 23);
        }
        v30 = v27 - 1;
        while (v26)
        {
          v31 = v30[v26--];
          if (v31 == 46)
            goto LABEL_66;
        }
        v26 = -1;
LABEL_66:
        if (v24 < 0)
        {
          v32 = *(const std::string::value_type **)a1;
          v25 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          v32 = (const std::string::value_type *)a1;
        }
        v33 = v32 - 1;
        while (v25)
        {
          v34 = v33[v25--];
          if (v34 == 47)
            goto LABEL_74;
        }
        v25 = -1;
LABEL_74:
        if (v26 != -1 && v26 > v25)
        {
          std::string::basic_string(&__p, (const std::string *)a1, v26, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v44);
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v35 = &v43;
          else
            v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
          if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
          else
            size = v43.__r_.__value_.__l.__size_;
          v37 = std::string::insert(&__p, 0, (const std::string::value_type *)v35, size);
          v38 = v37->__r_.__value_.__r.__words[0];
          v45[0] = v37->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v45 + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
          v39 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__r_.__value_.__l.__data_);
          v43.__r_.__value_.__r.__words[0] = v38;
          v43.__r_.__value_.__l.__size_ = v45[0];
          *(std::string::size_type *)((char *)&v43.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v45 + 7);
          *((_BYTE *)&v43.__r_.__value_.__s + 23) = v39;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          LOBYTE(v24) = *(_BYTE *)(a1 + 23);
        }
        if ((v24 & 0x80) != 0)
          std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        else
          v41 = *(std::string *)a1;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v40, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
        else
          v40 = v43;
        turi::download_url(std::string,std::string)::$_0::operator()();
      }
      std::string::basic_string(&v43, (const std::string *)a1, 7uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
      else
        __p = v43;
      boost::filesystem::detail::status(&__p, 0, v45);
      v28 = v45[0];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v28 == 3)
      {
        *(_DWORD *)a2 = 0;
        *(_BYTE *)(a2 + 4) = 0;
        v29 = (std::string *)(a2 + 8);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_53;
      }
      else
      {
        std::ifstream::open();
        if (*(_DWORD *)&v47[*(_QWORD *)(v46[0] - 24) + 16])
        {
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__r_.__value_.__l.__data_);
          goto LABEL_32;
        }
        *(_DWORD *)a2 = 0;
        *(_BYTE *)(a2 + 4) = 0;
        v29 = (std::string *)(a2 + 8);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_53:
          std::string::__init_copy_ctor_external(v29, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
LABEL_37:
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__r_.__value_.__l.__data_);
          goto LABEL_39;
        }
      }
      *v29 = v43;
LABEL_39:
      v46[0] = *MEMORY[0x24BEDB7E0];
      *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
      MEMORY[0x219A1948C](v47);
      std::istream::~istream();
      MEMORY[0x219A198F4](v48);
      return;
    }
  }
LABEL_40:
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 0;
  v23 = (std::string *)(a2 + 8);
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external(v23, v5, v6);
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 16);
  }
}

void sub_217FF42D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a34 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a38);
  _Unwind_Resume(a1);
}

void sub_217FF437C()
{
  JUMPOUT(0x217FF4374);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x219A19480](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x219A19480](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_217FF4458(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x219A198F4](v1 + 424);
  _Unwind_Resume(a1);
}

void turi::get_curl_error_string(turi *this)
{
  turi::get_curl_error_string(int)::$_0::operator()();
}

uint64_t _GLOBAL__sub_I_curl_downloader_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::file_download_cache::~file_download_cache(turi::file_download_cache *this)
{
  turi::file_download_cache::clear(this);
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 40));
  std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::~__hash_table((uint64_t)this);
}

void sub_217FF4504(void *a1)
{
  file_logger *v1;
  pthread_key_t *v2;

  __cxa_begin_catch(a1);
  if (*((int *)global_logger() + 169) <= 5)
  {
    v1 = log_stream_dispatch<true>::exec((cppipc *)5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/file_download_cache.cpp", "~file_download_cache", 24, 1);
    v2 = file_logger::operator<<((pthread_key_t *)v1, "Error clearning file download cache");
    file_logger::operator<<((uint64_t)v2, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  __cxa_end_catch();
  JUMPOUT(0x217FF44ECLL);
}

void turi::file_download_cache::clear(turi::file_download_cache *this)
{
  __int128 *i;
  std::string __p;
  std::string v4;
  std::string v5;
  void *v6;
  char v7;

  for (i = (__int128 *)*((_QWORD *)this + 2); i; i = *(__int128 **)i)
  {
    std::pair<std::string const,turi::file_download_cache::file_metadata>::pair[abi:ne180100](&v4, i + 1);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
    else
      __p = v5;
    turi::delete_temp_file((uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v7 < 0)
      operator delete(v6);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
  std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::clear((uint64_t)this);
}

void sub_217FF4624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::pair<std::string const,turi::file_download_cache::file_metadata>::~pair((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void turi::file_download_cache::get_file(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pthread_mutex_t *v6;
  unsigned __int8 *v7;
  __int128 v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  std::string __p;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v6 = (pthread_mutex_t *)(a1 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
  if (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>((_QWORD *)a1, (unsigned __int8 *)a2))
  {
    v14 = (__int128 *)a2;
    v7 = std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v14);
    if ((char)v7[63] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3, *((const std::string::value_type **)v7 + 5), *((_QWORD *)v7 + 6));
    }
    else
    {
      v8 = *(_OWORD *)(v7 + 40);
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v7 + 7);
      *(_OWORD *)a3 = v8;
    }
    pthread_mutex_unlock(v6);
  }
  else
  {
    pthread_mutex_unlock(v6);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    turi::download_url((uint64_t)&__p, (uint64_t)&v14);
    v9 = (int)v14;
    v17 = (int)v14;
    v10 = BYTE4(v14);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v15;
    *(_QWORD *)(a3 + 16) = v16;
    HIBYTE(v16) = 0;
    LOBYTE(v15) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v9)
    {
      v14 = (__int128 *)a2;
      *(_QWORD *)&v15 = &v17;
      turi::file_download_cache::get_file(std::string const&)::$_0::operator()((uint64_t)&v14);
    }
    if (v10)
    {
      pthread_mutex_lock(v6);
      v14 = (__int128 *)a2;
      v11 = std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v14);
      std::string::operator=((std::string *)(v11 + 40), (const std::string *)a3);
      v14 = (__int128 *)a2;
      v12 = std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v14);
      MEMORY[0x219A19390](v12 + 64, "");
      pthread_mutex_unlock(v6);
    }
  }
}

void sub_217FF4814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void *turi::file_download_cache::get_instance(turi::file_download_cache *this)
{
  unsigned __int8 v1;

  {
    turi::file_download_cache::file_download_cache((turi::file_download_cache *)&turi::file_download_cache::get_instance(void)::cache);
    __cxa_atexit((void (*)(void *))turi::file_download_cache::~file_download_cache, &turi::file_download_cache::get_instance(void)::cache, &dword_217E69000);
  }
  return &turi::file_download_cache::get_instance(void)::cache;
}

void sub_217FF48CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

turi::file_download_cache *turi::file_download_cache::file_download_cache(turi::file_download_cache *this)
{
  uint64_t v2;
  const char *v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 40), 0);
  assert_msg((_DWORD)v2 == 0, v3, v2);
  return this;
}

void sub_217FF493C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,turi::file_download_cache::file_metadata>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_217FF4B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::file_download_cache::file_metadata>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_217FF4C80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::file_download_cache::file_metadata>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::file_download_cache::file_metadata>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_217FF4FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217FF50A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::file_download_cache::file_metadata>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::file_download_cache::file_metadata>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void OUTLINED_FUNCTION_2_3(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  operator delete(__p);
}

uint64_t _GLOBAL__sub_I_file_download_cache_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

pthread_mutex_t *turi::fileio::file_handle_pool::get_instance(turi::fileio::file_handle_pool *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    turi::fileio::file_handle_pool::file_handle_pool(&turi::fileio::file_handle_pool::get_instance(void)::instance);
    __cxa_atexit((void (*)(void *))turi::fileio::file_handle_pool::~file_handle_pool, &turi::fileio::file_handle_pool::get_instance(void)::instance, &dword_217E69000);
  }
  return &turi::fileio::file_handle_pool::get_instance(void)::instance;
}

void sub_217FF5210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

pthread_mutex_t *turi::fileio::file_handle_pool::file_handle_pool(pthread_mutex_t *this)
{
  uint64_t v2;
  const char *v3;

  v2 = pthread_mutex_init(this, 0);
  assert_msg((_DWORD)v2 == 0, v3, v2);
  *(_QWORD *)&this[1].__opaque[16] = 0;
  *(_QWORD *)&this[1].__opaque[8] = 0;
  this[1].__sig = 0;
  *(_QWORD *)this[1].__opaque = (char *)this + 80;
  return this;
}

void turi::fileio::file_handle_pool::~file_handle_pool(turi::fileio::file_handle_pool *this)
{
  std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  turi::mutex::~mutex((pthread_mutex_t *)this);
}

uint64_t turi::fileio::file_handle_pool::register_file@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  int *v13;
  file_logger *v14;
  file_logger *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  _QWORD *exception;
  _QWORD *v44;
  BOOL v45;
  __int128 v46;
  std::string v47;
  __n128 __p;
  char v49;
  std::string v50;
  __n128 v51;
  char v52;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  turi::fileio::file_handle_pool::get_file_handle(a1, a2, a3);
  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      goto LABEL_68;
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/file_handle_pool.cpp", "register_file", 27, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"register_file_handle for file ", 30);
    if (*((char *)a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    else
      v50 = *(std::string *)a2;
    turi::sanitize_url((__n128 *)&v50, &v51);
    v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v51);
    v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
    if (v11)
    {
      if (*((_BYTE *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
        v12 = std::locale::use_facet((const std::locale *)&v46, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale((std::locale *)&v46);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v10);
        if (*(_DWORD *)(v10 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v52 < 0)
      operator delete((void *)v51.n128_u64[0]);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (*a3)
    goto LABEL_55;
  v13 = (int *)global_logger();
  if (v13[169] <= 1)
  {
    if (!cppipc::must_cancel((cppipc *)v13))
    {
      v14 = (file_logger *)global_logger();
      v15 = file_logger::start_stream(v14, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/file_handle_pool.cpp", "register_file", 31, 1);
      v16 = pthread_getspecific(*((_QWORD *)v15 + 74));
      if (v16 && *((_BYTE *)v16 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)"register_file_handle for file ", 30);
      if (*((char *)a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      else
        v47 = *(std::string *)a2;
      turi::sanitize_url((__n128 *)&v47, &__p);
      v17 = file_logger::operator<<<std::string>((uint64_t)v15, (uint64_t)&__p);
      v18 = pthread_getspecific(*(_QWORD *)(v17 + 592));
      if (v18)
      {
        if (*((_BYTE *)v18 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(v18[2] - 24) + 16));
          v19 = std::locale::use_facet((const std::locale *)&v46, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
          std::locale::~locale((std::locale *)&v46);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v17);
          if (*(_DWORD *)(v17 + 600) == 7)
          {
            __print_back_trace();
            v44 = __cxa_allocate_exception(8uLL);
            *v44 = "LOG_FATAL encountered";
            __cxa_throw(v44, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (v49 < 0)
        operator delete((void *)__p.n128_u64[0]);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
LABEL_68:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
LABEL_32:
  v20 = *((char *)a2 + 23);
  v21 = *((_QWORD *)a2 + 1);
  if (v20 >= 0)
    v21 = *((unsigned __int8 *)a2 + 23);
  if (v21)
  {
    v22 = 0;
    if (v20 >= 0)
      v23 = a2;
    else
      v23 = *(__int128 **)a2;
    v24 = v21 - 1;
    if (v24 >= 7)
      v24 = 7;
    v25 = v24 + 1;
    while (*((unsigned __int8 *)v23 + v22) == aCache[v22])
    {
      if (v25 == ++v22)
      {
        v26 = v22 == 8;
        goto LABEL_45;
      }
    }
  }
  v26 = 0;
LABEL_45:
  v45 = v26;
  std::allocate_shared[abi:ne180100]<turi::fileio::file_ownership_handle,std::allocator<turi::fileio::file_ownership_handle>,std::string const&,BOOL,void>((std::string *)a2, (std::string::value_type *)&v45, &v46);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v46);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  *(_QWORD *)&v46 = a2;
  v30 = std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 72), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v46);
  v32 = *a3;
  v31 = a3[1];
  if (v31)
  {
    v33 = (unint64_t *)(v31 + 16);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  v35 = (std::__shared_weak_count *)v30[8];
  v30[7] = v32;
  v30[8] = v31;
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
LABEL_55:
  v36 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 64) = v36;
  if ((v36 & 0x3FFF) == 0)
  {
    v37 = *(uint64_t **)(a1 + 72);
    if (v37 != (uint64_t *)(a1 + 80))
    {
      do
      {
        v38 = v37[8];
        if (!v38 || *(_QWORD *)(v38 + 8) == -1)
        {
          v40 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer((uint64_t **)(a1 + 72), v37);
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<turi::fileio::file_ownership_handle>>,0>((uint64_t)(v37 + 4));
          operator delete(v37);
        }
        else
        {
          v39 = (uint64_t *)v37[1];
          if (v39)
          {
            do
            {
              v40 = v39;
              v39 = (uint64_t *)*v39;
            }
            while (v39);
          }
          else
          {
            do
            {
              v40 = (uint64_t *)v37[2];
              v41 = *v40 == (_QWORD)v37;
              v37 = v40;
            }
            while (!v41);
          }
        }
        v37 = v40;
      }
      while (v40 != (uint64_t *)(a1 + 80));
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

void sub_217FF57BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  pthread_mutex_t *v30;
  uint64_t v31;

  std::locale::~locale(&a11);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v31);
  pthread_mutex_unlock(v30);
  _Unwind_Resume(a1);
}

void turi::fileio::file_handle_pool::get_file_handle(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t **v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 *v13;

  *a3 = 0;
  a3[1] = 0;
  v5 = (uint64_t **)(a1 + 72);
  if (a1 + 80 != std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1 + 72, (const void **)a2))
  {
    v13 = a2;
    v6 = std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (const void **)a2, (uint64_t)&std::piecewise_construct, &v13);
    v12 = 0uLL;
    v7 = (std::__shared_weak_count *)v6[8];
    if (v7)
    {
      *((_QWORD *)&v12 + 1) = std::__shared_weak_count::lock(v7);
      if (*((_QWORD *)&v12 + 1))
        *(_QWORD *)&v12 = v6[7];
    }
    v8 = *(_QWORD *)std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a3, &v12);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (!*((_QWORD *)&v12 + 1))
      goto LABEL_9;
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11)
    {
LABEL_9:
      if (v8)
        return;
      goto LABEL_10;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v8)
LABEL_10:
      std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::__erase_unique<std::string>(v5, (const void **)a2);
  }
}

void sub_217FF5964(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL turi::fileio::file_handle_pool::mark_file_for_delete(pthread_mutex_t *a1, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::locale::__imp *locale;
  int *v11;
  file_logger *v12;
  file_logger *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *exception;
  _QWORD *v24;
  std::string __p;
  std::locale v26;
  std::__shared_weak_count *v27;
  std::locale v28;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/file_handle_pool.cpp", "mark_file_for_delete", 62, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v26, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(a1);
  turi::fileio::file_handle_pool::get_file_handle((uint64_t)a1, (__int128 *)a2, &v26);
  locale = v26.__locale_;
  if (v26.__locale_)
  {
    v11 = (int *)global_logger();
    if (v11[169] <= 1)
    {
      if (cppipc::must_cancel((cppipc *)v11))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v12 = (file_logger *)global_logger();
      v13 = file_logger::start_stream(v12, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/file_handle_pool.cpp", "mark_file_for_delete", 73, 1);
      v14 = pthread_getspecific(*((_QWORD *)v13 + 74));
      if (v14 && *((_BYTE *)v14 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"mark file ", 10);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      v15 = file_logger::operator<<<std::string>((uint64_t)v13, (uint64_t)&__p);
      v16 = pthread_getspecific(*(_QWORD *)(v15 + 592));
      if (v16 && *((_BYTE *)v16 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)" for deletion ", 14);
      v17 = pthread_getspecific(*(_QWORD *)(v15 + 592));
      if (v17)
      {
        if (*((_BYTE *)v17 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[2] - 24) + 16));
          v18 = std::locale::use_facet(&v28, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
          std::locale::~locale(&v28);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v15);
          if (*(_DWORD *)(v15 + 600) == 7)
          {
            __print_back_trace();
            v24 = __cxa_allocate_exception(8uLL);
            *v24 = "LOG_FATAL encountered";
            __cxa_throw(v24, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v26.__locale_ + 24) = 1;
  }
  v19 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  pthread_mutex_unlock(a1);
  return locale != 0;
}

void sub_217FF5CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, std::locale a17)
{
  pthread_mutex_t *v17;

  std::locale::~locale(&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  pthread_mutex_unlock(v17);
  _Unwind_Resume(a1);
}

BOOL turi::fileio::file_handle_pool::unmark_file_for_delete(pthread_mutex_t *a1, uint64_t a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::locale::__imp *locale;
  int *v11;
  file_logger *v12;
  file_logger *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD *exception;
  _QWORD *v24;
  std::string __p;
  std::locale v26;
  std::__shared_weak_count *v27;
  std::locale v28;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/file_handle_pool.cpp", "unmark_file_for_delete", 81, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v26, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  pthread_mutex_lock(a1);
  turi::fileio::file_handle_pool::get_file_handle((uint64_t)a1, (__int128 *)a2, &v26);
  locale = v26.__locale_;
  if (v26.__locale_)
  {
    v11 = (int *)global_logger();
    if (v11[169] <= 1)
    {
      if (cppipc::must_cancel((cppipc *)v11))
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      v12 = (file_logger *)global_logger();
      v13 = file_logger::start_stream(v12, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/file_handle_pool.cpp", "unmark_file_for_delete", 92, 1);
      v14 = pthread_getspecific(*((_QWORD *)v13 + 74));
      if (v14 && *((_BYTE *)v14 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"unmark file ", 12);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      v15 = file_logger::operator<<<std::string>((uint64_t)v13, (uint64_t)&__p);
      v16 = pthread_getspecific(*(_QWORD *)(v15 + 592));
      if (v16 && *((_BYTE *)v16 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)" for deletion ", 14);
      v17 = pthread_getspecific(*(_QWORD *)(v15 + 592));
      if (v17)
      {
        if (*((_BYTE *)v17 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[2] - 24) + 16));
          v18 = std::locale::use_facet(&v28, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
          std::locale::~locale(&v28);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v15);
          if (*(_DWORD *)(v15 + 600) == 7)
          {
            __print_back_trace();
            v24 = __cxa_allocate_exception(8uLL);
            *v24 = "LOG_FATAL encountered";
            __cxa_throw(v24, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v26.__locale_ + 24) = 0;
  }
  v19 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  pthread_mutex_unlock(a1);
  return locale != 0;
}

void sub_217FF6088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, std::locale a17)
{
  pthread_mutex_t *v17;

  std::locale::~locale(&a17);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  pthread_mutex_unlock(v17);
  _Unwind_Resume(a1);
}

void sub_217FF6288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<turi::fileio::file_ownership_handle>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<turi::fileio::file_ownership_handle>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *std::allocate_shared[abi:ne180100]<turi::fileio::file_ownership_handle,std::allocator<turi::fileio::file_ownership_handle>,std::string const&,BOOL,void>@<X0>(std::string *a1@<X1>, std::string::value_type *a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x38uLL);
  result = std::__shared_ptr_emplace<turi::fileio::file_ownership_handle>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL,std::allocator<turi::fileio::file_ownership_handle>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_217FF63F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<turi::fileio::file_ownership_handle>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL,std::allocator<turi::fileio::file_ownership_handle>,0>(std::string *a1, std::string *__str, std::string::value_type *a3)
{
  char v5;

  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D921AD0;
  a1->__r_.__value_.__l.__size_ = 0;
  std::allocator<turi::fileio::file_ownership_handle>::construct[abi:ne180100]<turi::fileio::file_ownership_handle,std::string const&,BOOL>((int)&v5, a1 + 1, __str, a3);
  return a1;
}

void sub_217FF6454(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::fileio::file_ownership_handle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D921AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::fileio::file_ownership_handle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D921AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::fileio::file_ownership_handle>::__on_zero_shared(std::string *a1)
{
  turi::fileio::file_ownership_handle::~file_ownership_handle(a1 + 1);
}

std::string *std::allocator<turi::fileio::file_ownership_handle>::construct[abi:ne180100]<turi::fileio::file_ownership_handle,std::string const&,BOOL>(int a1, std::string *this, std::string *__str, std::string::value_type *a4)
{
  std::string::value_type v5;
  std::string *result;

  v5 = *a4;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  LOWORD(this[1].__r_.__value_.__l.__data_) = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  result = std::string::operator=(this, __str);
  this[1].__r_.__value_.__s.__data_[0] = v5;
  this[1].__r_.__value_.__s.__data_[1] = 0;
  return result;
}

void sub_217FF64FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void turi::fileio::file_ownership_handle::~file_ownership_handle(std::string *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  int *v6;
  file_logger *v7;
  file_logger *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *exception;
  _QWORD *v17;
  std::string v18;
  std::string v19;
  std::locale v20;

  if (!this[1].__r_.__value_.__s.__data_[0])
    goto LABEL_35;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this->__r_.__value_.__l.__size_)
      goto LABEL_35;
LABEL_6:
    if (this[1].__r_.__value_.__s.__data_[1])
    {
      v2 = (int *)global_logger();
      if (v2[169] > 1)
      {
LABEL_27:
        turi::fileio::delete_path_recursive((uint64_t)this);
        goto LABEL_35;
      }
      if (!cppipc::must_cancel((cppipc *)v2))
      {
        v3 = (file_logger *)global_logger();
        started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/file_ownership_handle.hpp", "~file_ownership_handle", 66, 1);
        v5 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v5 && *((_BYTE *)v5 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"deleting directory ", 19);
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v19, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
        else
          v19 = *this;
        v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v19);
        v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
        if (v11)
        {
          if (*((_BYTE *)v11 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
            v12 = std::locale::use_facet(&v20, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
            std::locale::~locale(&v20);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v10);
            if (*(_DWORD *)(v10 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
            }
          }
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        goto LABEL_27;
      }
LABEL_38:
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    v6 = (int *)global_logger();
    if (v6[169] <= 1)
    {
      if (cppipc::must_cancel((cppipc *)v6))
        goto LABEL_38;
      v7 = (file_logger *)global_logger();
      v8 = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/file_ownership_handle.hpp", "~file_ownership_handle", 69, 1);
      v9 = pthread_getspecific(*((_QWORD *)v8 + 74));
      if (v9 && *((_BYTE *)v9 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"deleting file ", 14);
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v18, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
      else
        v18 = *this;
      v13 = file_logger::operator<<<std::string>((uint64_t)v8, (uint64_t)&v18);
      v14 = pthread_getspecific(*(_QWORD *)(v13 + 592));
      if (v14)
      {
        if (*((_BYTE *)v14 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(v14[2] - 24) + 16));
          v15 = std::locale::use_facet(&v20, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale(&v20);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v13);
          if (*(_DWORD *)(v13 + 600) == 7)
          {
            __print_back_trace();
            v17 = __cxa_allocate_exception(8uLL);
            *v17 = "LOG_FATAL encountered";
            __cxa_throw(v17, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
    }
    turi::fileio::delete_path_impl((uint64_t)this, 3);
    goto LABEL_35;
  }
  if (*((_BYTE *)&this->__r_.__value_.__s + 23))
    goto LABEL_6;
LABEL_35:
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
}

void sub_217FF6860(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __int128 *v24;
  uint64_t v25;
  file_logger *v27;
  pthread_key_t *v28;
  uint64_t v29;

  std::locale::~locale((std::locale *)(v25 - 40));
  if (a17 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v27 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/file_ownership_handle.hpp", "~file_ownership_handle", 74, 1);
    v28 = file_logger::operator<<((pthread_key_t *)v27, "Exception on attempted deletion of ");
    if (*((char *)v24 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a9, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
    }
    else
    {
      a9 = *v24;
      a10 = *((_QWORD *)v24 + 2);
    }
    v29 = file_logger::operator<<<std::string>((uint64_t)v28, (uint64_t)&a9);
    file_logger::operator<<(v29, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
    if (SHIBYTE(a10) < 0)
      operator delete((void *)a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x217FF67D4);
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_217FF6A74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<turi::fileio::file_ownership_handle>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<turi::fileio::file_ownership_handle>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<turi::fileio::file_ownership_handle>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t _GLOBAL__sub_I_file_handle_pool_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *turi::fileio::get_cache_prefix@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "cache://");
}

_QWORD *turi::fileio::get_temp_cache_prefix@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "cache://tmp/");
}

uint64_t turi::fileio::check_cache_file_location(std::string *a1)
{
  std::locale::__imp *v2;
  std::locale::__imp *locale;
  __int128 v4;
  int data;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  _QWORD *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  _QWORD *exception;
  std::string v20;
  std::string v21;
  std::string v22;
  std::locale v23[3];
  _QWORD __dst[4];

  __dst[3] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x219A19828](&v22);
  LODWORD(v23[0].__locale_) = 0x4000;
  std::locale::locale(&v23[1], (const std::locale *)&v22);
  boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(a1, v23);
  std::locale::~locale(&v23[1]);
  std::locale::~locale((std::locale *)&v22);
  memset(v23, 0, sizeof(v23));
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)":";
  v22.__r_.__value_.__l.__size_ = (std::string::size_type)"";
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)&v22);
  boost::algorithm::split<std::vector<std::string>,std::string,boost::algorithm::detail::is_any_ofF<char>>((__int128 *)v23, (uint64_t)a1, __dst, 1);
  if (__dst[2] >= 0x11uLL && __dst[0])
    MEMORY[0x219A199F0](__dst[0], 0x1000C8077774924);
  locale = v23[0].__locale_;
  v2 = v23[1].__locale_;
  if (v23[1].__locale_ == v23[0].__locale_)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Value cannot be empty");
  }
  do
  {
    if (*((char *)locale + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)locale, *((_QWORD *)locale + 1));
    }
    else
    {
      v4 = *(_OWORD *)locale;
      v22.__r_.__value_.__r.__words[2] = *((_QWORD *)locale + 2);
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v4;
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v21, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      v21 = v22;
    boost::filesystem::detail::status(&v21, 0, &v20);
    data = (int)v20.__r_.__value_.__l.__data_;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (data != 3)
    {
      std::operator+<char>();
      v7 = std::string::append(&v20, "' Using path : ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v21;
      else
        v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      else
        size = v21.__r_.__value_.__l.__size_;
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)v9, size);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      v12 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v20, "Directory: ");
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v22;
      else
        v13 = (std::string *)v22.__r_.__value_.__r.__words[0];
      if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
      else
        v14 = v22.__r_.__value_.__l.__size_;
      v15 = std::string::append(&v20, (const std::string::value_type *)v13, v14);
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v17 = std::string::append(&v21, " does not exist");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v12[2] = *((_QWORD *)&v17->__r_.__value_.__l + 2);
      *(_OWORD *)v12 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    locale = (std::locale::__imp *)((char *)locale + 24);
  }
  while (locale != v2);
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  return 1;
}

void sub_217FF6E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::locale a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  void *v29;
  int v30;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      if (a28 < 0)
        operator delete(a23.__locale_);
      __p = &a29;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void turi::fileio::get_cache_file_locations(std::string *a1@<X8>)
{
  if (byte_254FF6B47 < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)turi::fileio::CACHE_FILE_LOCATIONS, *((std::string::size_type *)&turi::fileio::CACHE_FILE_LOCATIONS + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = turi::fileio::CACHE_FILE_LOCATIONS;
    a1->__r_.__value_.__r.__words[2] = unk_254FF6B40;
  }
}

std::string *turi::fileio::set_cache_file_locations(std::string *__str)
{
  return std::string::operator=((std::string *)&turi::fileio::CACHE_FILE_LOCATIONS, __str);
}

BOOL turi::fileio::set_max_remote_fs_cache_entries(uint64_t this)
{
  uint64_t instance;

  if ((this & 0x8000000000000000) == 0)
  {
    instance = turi::block_cache::get_instance((turi::block_cache *)this);
    boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::set_next(instance, this);
  }
  return this >= 0;
}

__int128 *boost::algorithm::split<std::vector<std::string>,std::string,boost::algorithm::detail::is_any_ofF<char>>(__int128 *a1, uint64_t a2, _QWORD *__src, int a4)
{
  _QWORD *v5;
  size_t v8;
  void *v9;
  size_t v10;
  void *v11;
  void **v12;
  size_t v13;
  void *v14;
  __int128 *v15;
  void *__srca[2];
  size_t __n;
  void *__dst[2];
  size_t v20;
  int v21;
  void *v22[2];
  size_t v23;
  uint64_t v24;

  v5 = __src;
  v24 = *MEMORY[0x24BDAC8D0];
  v8 = __src[2];
  __n = v8;
  __srca[0] = 0;
  if (v8 >= 0x11)
  {
    v9 = (void *)operator new[]();
    __srca[0] = v9;
    v5 = (_QWORD *)*v5;
  }
  else
  {
    v9 = __srca;
  }
  memcpy(v9, v5, v8);
  v10 = __n;
  v23 = __n;
  v22[0] = 0;
  if (__n >= 0x11)
  {
    v11 = (void *)operator new[]();
    v22[0] = v11;
    v12 = (void **)__srca[0];
  }
  else
  {
    v11 = v22;
    v12 = __srca;
  }
  memcpy(v11, v12, v10);
  v13 = v23;
  v20 = v23;
  __dst[0] = 0;
  if (v23 > 0x10)
  {
    __dst[0] = (void *)operator new[]();
    v14 = v22[0];
    memcpy(__dst[0], v22[0], v13);
    v21 = a4;
    if (v14)
      MEMORY[0x219A199F0](v14, 0x1000C8077774924);
  }
  else
  {
    memcpy(__dst, v22, v23);
    v21 = a4;
  }
  v15 = boost::algorithm::iter_split<std::vector<std::string>,std::string,boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, a2, __dst);
  if (v20 >= 0x11 && __dst[0])
    MEMORY[0x219A199F0](__dst[0], 0x1000C8077774924);
  if (v10 >= 0x11 && __srca[0])
    MEMORY[0x219A199F0](__srca[0], 0x1000C8077774924);
  return v15;
}

void sub_217FF7224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unint64_t v17;

  if (a17)
    MEMORY[0x219A199F0](a17, 0x1000C8077774924);
  if (v17 >= 0x11)
  {
    if (a10)
      MEMORY[0x219A199F0](a10, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, std::locale *a2)
{
  const std::locale *v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  unsigned __int8 *v8;
  std::locale::id *v9;
  std::string *v10;
  uint64_t v11;
  const std::locale::facet *v12;
  std::string::size_type v13;
  int locale;
  std::locale v15;
  std::locale v16;
  std::locale v17;
  int v18;
  std::locale v19;

  v4 = a2 + 1;
  LODWORD(v16.__locale_) = a2->__locale_;
  std::locale::locale(&v17, a2 + 1);
  boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(a1, &v16);
  std::locale::~locale(&v17);
  locale = (int)a2->__locale_;
  std::locale::locale(&v15, v4);
  v5 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  v18 = locale;
  std::locale::locale(&v19, &v15);
  if (size)
  {
    v8 = (unsigned __int8 *)v6 + size;
    v9 = (std::locale::id *)MEMORY[0x24BEDB350];
    v10 = v6;
    while (1)
    {
      v11 = v10->__r_.__value_.__s.__data_[0];
      v12 = std::locale::use_facet(&v19, v9);
      if ((v11 & 0x80) != 0 || (*((_DWORD *)&v12[1].~facet + v11) & v18) == 0)
        break;
      v10 = (std::string *)((char *)v10 + 1);
      if (!--size)
      {
        v10 = (std::string *)v8;
        break;
      }
    }
  }
  else
  {
    v10 = v6;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = (std::string::size_type)a1;
  else
    v13 = a1->__r_.__value_.__r.__words[0];
  std::string::erase(a1, (std::string::size_type)v6 - v13, (char *)v10 - (char *)v6);
  std::locale::~locale(&v19);
  std::locale::~locale(&v15);
}

void sub_217FF73E4(_Unwind_Exception *a1)
{
  std::locale *v1;
  std::locale *v2;

  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

__int128 *boost::algorithm::iter_split<std::vector<std::string>,std::string,boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(__int128 *a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  const void *v12;
  __int128 v13;
  std::string *v14;
  uint64_t v16[10];
  uint64_t v17[10];
  std::vector<std::string> v18;
  uint64_t v19[4];
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23[10];
  uint64_t v24[9];
  uint64_t v25[10];
  std::vector<std::string> *v26;
  _QWORD v27[2];
  unint64_t v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v5 = *(char *)(a2 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  v8 = *(unsigned __int8 *)(a2 + 23);
  if (v6)
    v8 = *(_QWORD *)(a2 + 8);
  v9 = v7 + v8;
  v10 = *((_QWORD *)a3 + 2);
  v28 = v10;
  v27[0] = 0;
  if (v10 >= 0x11)
  {
    v11 = (_QWORD *)operator new[]();
    v27[0] = v11;
    v12 = *(const void **)a3;
  }
  else
  {
    v11 = v27;
    v12 = a3;
  }
  memcpy(v11, v12, v10);
  v29 = a3[6];
  boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t)v24, v7, v9, v27);
  boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator((uint64_t)v25, v24);
  boost::function0<void>::~function0(v24);
  if (v28 >= 0x11 && v27[0])
    MEMORY[0x219A199F0](v27[0], 0x1000C8077774924);
  v19[0] = 0;
  v20 = 0u;
  v21 = 0u;
  v22 = 1;
  boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator((uint64_t)v23, v19);
  boost::function0<void>::~function0(v19);
  boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator((uint64_t)v17, v25);
  boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator((uint64_t)v16, v23);
  std::vector<std::string>::vector<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::iterators::use_default,boost::iterators::use_default>,0>(&v18, v17, v16);
  boost::function0<void>::~function0(v16);
  boost::function0<void>::~function0(v17);
  v13 = *a1;
  *a1 = *(_OWORD *)&v18.__begin_;
  *(_OWORD *)&v18.__begin_ = v13;
  v14 = (std::string *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v18.__end_cap_.__value_;
  v18.__end_cap_.__value_ = v14;
  v26 = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  boost::function0<void>::~function0(v23);
  boost::function0<void>::~function0(v25);
  return a1;
}

void sub_217FF75D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  boost::function0<void>::~function0(&a9);
  boost::function0<void>::~function0(&a19);
  boost::function0<void>::~function0(&a42);
  boost::function0<void>::~function0((uint64_t *)(v42 - 176));
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = 0;
  v4 = *a2;
  if (*a2)
  {
    *(_QWORD *)a1 = v4;
    if ((v4 & 1) != 0)
    {
      v5 = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_OWORD *)(a1 + 8) = v5;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 8, 0);
    }
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  size_t v8;
  _QWORD *v9;
  const void *v10;
  _QWORD v12[2];
  unint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)a4 + 2);
  v13 = v8;
  v12[0] = 0;
  if (v8 >= 0x11)
  {
    v9 = (_QWORD *)operator new[]();
    v12[0] = v9;
    v10 = *(const void **)a4;
  }
  else
  {
    v9 = v12;
    v10 = a4;
  }
  memcpy(v9, v10, v8);
  v14 = a4[6];
  boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t (***)())a1, v12);
  if (v13 >= 0x11 && v12[0])
    MEMORY[0x219A199F0](v12[0], 0x1000C8077774924);
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a3)
    boost::algorithm::split_iterator<std::__wrap_iter<char *>>::increment(a1);
  return a1;
}

void sub_217FF77F0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  boost::function0<void>::~function0(v1);
  _Unwind_Resume(a1);
}

uint64_t (***boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t (***a1)(), _QWORD *a2))()
{
  _QWORD *v2;
  size_t v4;
  _QWORD *v5;
  _QWORD v7[2];
  unint64_t v8;
  int v9;
  uint64_t v10;

  v2 = a2;
  v10 = *MEMORY[0x24BDAC8D0];
  v4 = a2[2];
  v8 = v4;
  v7[0] = 0;
  if (v4 >= 0x11)
  {
    v5 = (_QWORD *)operator new[]();
    v7[0] = v5;
    a2 = (_QWORD *)*v2;
  }
  else
  {
    v5 = v7;
  }
  memcpy(v5, a2, v4);
  v9 = *((_DWORD *)v2 + 6);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::function2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, v7);
  if (v8 >= 0x11 && v7[0])
    MEMORY[0x219A199F0](v7[0], 0x1000C8077774924);
  return a1;
}

void sub_217FF791C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char *>>::increment(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)a1)
  {
    result = boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::operator()((_QWORD *)a1);
    v2 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 56);
    result = v4;
  }
  v5 = result == v2 && v4 == v2;
  if (v5 && *(_QWORD *)(a1 + 40) == v2)
    *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t (***boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::function2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t (***a1)(), _QWORD *a2))()
{
  _QWORD *v2;
  size_t v4;
  _QWORD *v5;
  _QWORD v7[2];
  unint64_t v8;
  int v9;
  uint64_t v10;

  v2 = a2;
  v10 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  v4 = a2[2];
  v8 = v4;
  v7[0] = 0;
  if (v4 >= 0x11)
  {
    v5 = (_QWORD *)operator new[]();
    v7[0] = v5;
    a2 = (_QWORD *)*v2;
  }
  else
  {
    v5 = v7;
  }
  memcpy(v5, a2, v4);
  v9 = *((_DWORD *)v2 + 6);
  boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, v7);
  if (v8 >= 0x11 && v7[0])
    MEMORY[0x219A199F0](v7[0], 0x1000C8077774924);
  return a1;
}

void sub_217FF7A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t (***a1)(), _QWORD *a2)
{
  _QWORD *v2;
  size_t v4;
  _QWORD *v5;
  uint64_t result;
  int v7;
  uint64_t (**v8)();
  _QWORD v9[2];
  unint64_t v10;
  int v11;
  uint64_t v12;

  v2 = a2;
  v12 = *MEMORY[0x24BDAC8D0];
  v4 = a2[2];
  v10 = v4;
  v9[0] = 0;
  if (v4 >= 0x11)
  {
    v5 = (_QWORD *)operator new[]();
    v9[0] = v5;
    a2 = (_QWORD *)*v2;
  }
  else
  {
    v5 = v9;
  }
  memcpy(v5, a2, v4);
  v11 = *((_DWORD *)v2 + 6);
  result = boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>((uint64_t)boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>)::stored_vtable, v9, a1 + 1);
  v7 = result;
  if (v10 >= 0x11)
  {
    result = v9[0];
    if (v9[0])
      result = MEMORY[0x219A199F0](v9[0], 0x1000C8077774924);
  }
  if (v7)
    v8 = boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>)::stored_vtable;
  else
    v8 = 0;
  *a1 = v8;
  return result;
}

void sub_217FF7BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::invoke(_DWORD **a1, char *a2, char *a3)
{
  return boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>::operator()<std::__wrap_iter<char *>>(*a1, a2, a3);
}

uint64_t boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  size_t v6;
  _QWORD *v7;
  uint64_t is_any_of;
  _QWORD v10[2];
  unint64_t v11;
  int v12;
  uint64_t v13;

  v4 = a2;
  v13 = *MEMORY[0x24BDAC8D0];
  v6 = a2[2];
  v11 = v6;
  v10[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v10[0] = v7;
    a2 = (_QWORD *)*v4;
  }
  else
  {
    v7 = v10;
  }
  memcpy(v7, a2, v6);
  v12 = *((_DWORD *)v4 + 6);
  is_any_of = boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, v10, a3);
  if (v11 >= 0x11 && v10[0])
    MEMORY[0x219A199F0](v10[0], 0x1000C8077774924);
  return is_any_of;
}

{
  _QWORD *v4;
  size_t v6;
  _QWORD *v7;
  _QWORD v9[2];
  unint64_t v10;
  int v11;
  uint64_t v12;

  v4 = a2;
  v12 = *MEMORY[0x24BDAC8D0];
  v6 = a2[2];
  v10 = v6;
  v9[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v9[0] = v7;
    a2 = (_QWORD *)*v4;
  }
  else
  {
    v7 = v9;
  }
  memcpy(v7, a2, v6);
  v11 = *((_DWORD *)v4 + 6);
  boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_functor<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(a1, v9, a3);
  if (v10 >= 0x11 && v9[0])
    MEMORY[0x219A199F0](v9[0], 0x1000C8077774924);
  return 1;
}

void sub_217FF7D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  const void *v9;
  _QWORD *v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_DWORD **)result;
      v6 = (_QWORD *)operator new();
      v7 = v6;
      v8 = *((_QWORD *)v5 + 2);
      v6[2] = v8;
      *v6 = 0;
      if (v8 >= 0x11)
      {
        v6 = (_QWORD *)operator new[]();
        *v7 = v6;
        v9 = *(const void **)v5;
        v8 = v7[2];
      }
      else
      {
        v9 = v5;
      }
      result = (uint64_t)memcpy(v6, v9, v8);
      *((_DWORD *)v7 + 6) = v5[6];
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v10 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        if (v10[2] >= 0x11uLL && *v10)
          MEMORY[0x219A199F0](*v10, 0x1000C8077774924);
        result = MEMORY[0x219A19A08](v10, 0x1012C405C87E9CELL);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186D2365 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186D2365 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217FF7E9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

char *boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>::operator()<std::__wrap_iter<char *>>(_DWORD *a1, char *a2, char *a3)
{
  size_t v6;
  _QWORD *v7;
  const void *v8;
  char *v9;
  _QWORD v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 2);
  v12 = v6;
  v11[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v11[0] = v7;
    v8 = *(const void **)a1;
  }
  else
  {
    v7 = v11;
    v8 = a1;
  }
  memcpy(v7, v8, v6);
  while (a2 != a3)
  {
    if (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v11, *a2))
      goto LABEL_9;
    ++a2;
  }
  a2 = a3;
LABEL_9:
  if (v12 >= 0x11 && v11[0])
    MEMORY[0x219A199F0](v11[0], 0x1000C8077774924);
  if (a2 == a3)
    return a3;
  if (!a1[6])
  {
    v9 = a2;
    do
    {
      if (!boost::algorithm::detail::is_any_ofF<char>::operator()<char>(a1, *v9))
        break;
      ++v9;
    }
    while (v9 != a3);
  }
  return a2;
}

void sub_217FF8000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a11 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a9);
  _Unwind_Resume(exception_object);
}

BOOL boost::algorithm::detail::is_any_ofF<char>::operator()<char>(_QWORD *a1, int a2)
{
  unint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  int v6;
  unint64_t v7;

  v2 = a1[2];
  if (v2 >= 0x11)
  {
    a1 = (_QWORD *)*a1;
    v3 = (_QWORD *)((char *)a1 + v2);
  }
  else
  {
    v3 = (_QWORD *)((char *)a1 + v2);
    if (!v2)
      return a1 != v3 && *(char *)a1 <= a2;
  }
  do
  {
    v4 = (char *)a1 + (v2 >> 1);
    v6 = *v4;
    v5 = v4 + 1;
    v7 = v2 >> 1;
    v2 += ~(v2 >> 1);
    if (v6 < a2)
      a1 = v5;
    else
      v2 = v7;
  }
  while (v2);
  return a1 != v3 && *(char *)a1 <= a2;
}

void sub_217FF817C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
    boost::algorithm::detail::find_iterator_base<std::__wrap_iter<char *>>::find_iterator_base<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(&a10);
  _Unwind_Resume(exception_object);
}

void *boost::detail::function::basic_vtable2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::assign_functor<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  const void *v8;
  void *result;

  v5 = (_QWORD *)operator new();
  v6 = v5;
  v7 = *((_QWORD *)a2 + 2);
  v5[2] = v7;
  *v5 = 0;
  if (v7 >= 0x11)
  {
    v5 = (_QWORD *)operator new[]();
    *v6 = v5;
    v8 = *(const void **)a2;
    v7 = v6[2];
  }
  else
  {
    v8 = a2;
  }
  result = memcpy(v5, v8, v7);
  *((_DWORD *)v6 + 6) = a2[6];
  *a3 = v6;
  return result;
}

void sub_217FF823C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

uint64_t boost::function2<boost::iterator_range<std::__wrap_iter<char *>>,std::__wrap_iter<char *>,std::__wrap_iter<char *>>::operator()(_QWORD *a1)
{
  std::runtime_error v2;

  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&unk_24D91D228;
    boost::throw_exception<boost::bad_function_call>(&v2);
  }
  return (*(uint64_t (**)(_QWORD *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_217FF82C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

std::vector<std::string> *std::vector<std::string>::vector<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::iterators::use_default,boost::iterators::use_default>,0>(std::vector<std::string> *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6[10];
  uint64_t v7[10];

  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator((uint64_t)v7, a2);
  boost::algorithm::split_iterator<std::__wrap_iter<char *>>::split_iterator((uint64_t)v6, a3);
  std::vector<std::string>::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::iterators::use_default,boost::iterators::use_default>>(a1, (uint64_t)v7, (uint64_t)v6);
  boost::function0<void>::~function0(v6);
  boost::function0<void>::~function0(v7);
  return a1;
}

void sub_217FF833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  boost::function0<void>::~function0(&a9);
  boost::function0<void>::~function0(&a19);
  _Unwind_Resume(a1);
}

BOOL std::vector<std::string>::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::copy_iterator_rangeF<std::string,std::__wrap_iter<char *>>,boost::algorithm::split_iterator<std::__wrap_iter<char *>>,boost::iterators::use_default,boost::iterators::use_default>>(std::vector<std::string> *a1, uint64_t a2, uint64_t a3)
{
  std::allocator<std::string> *p_end_cap;
  _BOOL8 result;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  int v19;
  void *__p[2];
  std::string::size_type v21;
  std::vector<std::string> *v22;
  char v23;
  std::__split_buffer<std::string> __v;

  v22 = a1;
  v23 = 0;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  while (1)
  {
    result = boost::algorithm::split_iterator<std::__wrap_iter<char *>>::equal(a2, a3);
    if (result)
      break;
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, *(char **)(a2 + 32), *(char **)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
    end = a1->__end_;
    value = a1->__end_cap_.__value_;
    if (end >= value)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a1->__begin_) >> 3);
      v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a1->__begin_) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v14)
        v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v14);
      else
        v15 = 0;
      v16 = v15 + v11;
      __v.__first_ = v15;
      __v.__begin_ = v16;
      __v.__end_cap_.__value_ = &v15[v14];
      v17 = *(_OWORD *)__p;
      v16->__r_.__value_.__r.__words[2] = v21;
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      __p[1] = 0;
      v21 = 0;
      __p[0] = 0;
      __v.__end_ = v16 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
      v18 = a1->__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v19 = SHIBYTE(v21);
      a1->__end_ = v18;
      if (v19 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v10 = *(_OWORD *)__p;
      end->__r_.__value_.__r.__words[2] = v21;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
      a1->__end_ = end + 1;
    }
    boost::algorithm::split_iterator<std::__wrap_iter<char *>>::increment(a2);
  }
  return result;
}

void sub_217FF84E0(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, char a7, uint64_t a8, std::__split_buffer<std::string> *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, void **a15)
{
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(__p);
}

BOOL boost::algorithm::split_iterator<std::__wrap_iter<char *>>::equal(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  int v6;
  const void *v7;
  const void *v8;
  size_t v9;

  if (*(_QWORD *)a1)
    v4 = *(_BYTE *)(a1 + 64) != 0;
  else
    v4 = 1;
  if (!*(_QWORD *)a2)
  {
    v5 = 1;
    return v4 ^ v5 ^ 1;
  }
  v5 = *(_BYTE *)(a2 + 64) != 0;
  if (*(_BYTE *)(a2 + 64))
    v6 = 1;
  else
    v6 = v4;
  if (v6 == 1)
    return v4 ^ v5 ^ 1;
  v7 = *(const void **)(a1 + 32);
  v8 = *(const void **)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
  return v9 == *(_QWORD *)(a2 + 40) - (_QWORD)v8
      && !memcmp(v7, v8, v9)
      && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)
      && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

_QWORD *boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(_QWORD *__dst, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  void *v6;

  *__dst = 0;
  v4 = *(_BYTE **)a2;
  v5 = *(_BYTE **)(a2 + 8);
  __dst[2] = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x11)
  {
    v6 = (void *)operator new[]();
    *__dst = v6;
    v4 = *(_BYTE **)a2;
    v5 = *(_BYTE **)(a2 + 8);
  }
  else
  {
    v6 = __dst;
  }
  if (v5 != v4)
    memmove(v6, v4, v5 - v4);
  std::__sort<std::__less<char,char> &,char *>();
  return __dst;
}

_QWORD *std::__function::__func<BOOL (*)(std::string),std::allocator<BOOL (*)(std::string)>,BOOL ()(std::string)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D921B40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(std::string),std::allocator<BOOL (*)(std::string)>,BOOL ()(std::string)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D921B40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(std::string),std::allocator<BOOL (*)(std::string)>,BOOL ()(std::string)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<BOOL (*&)(std::string),std::string>((uint64_t (**)(void **))(a1 + 8), a2);
}

uint64_t std::__function::__func<BOOL (*)(std::string),std::allocator<BOOL (*)(std::string)>,BOOL ()(std::string)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<BOOL (*)(std::string),std::allocator<BOOL (*)(std::string)>,BOOL ()(std::string)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<BOOL (*&)(std::string),std::string>(uint64_t (**a1)(void **), uint64_t a2)
{
  uint64_t (*v2)(void **);
  uint64_t v3;
  void *__p[2];
  uint64_t v6;

  v2 = *a1;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v3 = v2(__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_217FF881C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<BOOL (*)(long long),std::allocator<BOOL (*)(long long)>,BOOL ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24D921BF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(long long),std::allocator<BOOL (*)(long long)>,BOOL ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24D921BF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(long long),std::allocator<BOOL (*)(long long)>,BOOL ()(long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<BOOL (*)(long long),std::allocator<BOOL (*)(long long)>,BOOL ()(long long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<BOOL (*)(long long),std::allocator<BOOL (*)(long long)>,BOOL ()(long long)>::target_type()
{
}

void OUTLINED_FUNCTION_0_7()
{
  JUMPOUT(0x219A199F0);
}

void _GLOBAL__sub_I_fileio_constants_cpp()
{
  void (*v0)(void *);
  void **v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  void *v27;
  void *v28;
  void **v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  qword_254FF6B08 = 0;
  unk_254FF6B10 = 0;
  turi::fileio::S3_ENDPOINT = 0;
  v0 = (void (*)(void *))MEMORY[0x24BEDACF0];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::fileio::S3_ENDPOINT, &dword_217E69000);
  qword_254FF6B20 = 0;
  unk_254FF6B28 = 0;
  turi::fileio::S3_REGION = 0;
  __cxa_atexit(v0, &turi::fileio::S3_REGION, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_MAXIMUM_CACHE_CAPACITY");
  v29 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_MAXIMUM_CACHE_CAPACITY__register__instance, __p, &turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY, 1, &v27);
  v1 = v29;
  if (v29 == &v27)
  {
    v2 = 4;
    v1 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v2 = 5;
  }
  (*((void (**)(void))*v1 + v2))();
LABEL_6:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_MAXIMUM_CACHE_CAPACITY_PER_FILE");
  v29 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_MAXIMUM_CACHE_CAPACITY_PER_FILE__register__instance, __p, &turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY_PER_FILE, 1, &v27);
  v3 = v29;
  if (v29 == &v27)
  {
    v4 = 4;
    v3 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_13;
    v4 = 5;
  }
  (*((void (**)(void))*v3 + v4))();
LABEL_13:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_READER_BUFFER_SIZE");
  v29 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_READER_BUFFER_SIZE__register__instance, __p, &turi::fileio::FILEIO_READER_BUFFER_SIZE, 0, &v27);
  v5 = v29;
  if (v29 == &v27)
  {
    v6 = 4;
    v5 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_20;
    v6 = 5;
  }
  (*((void (**)(void))*v5 + v6))();
LABEL_20:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_WRITER_BUFFER_SIZE");
  v29 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_WRITER_BUFFER_SIZE__register__instance, __p, &turi::fileio::FILEIO_WRITER_BUFFER_SIZE, 0, &v27);
  v7 = v29;
  if (v29 == &v27)
  {
    v8 = 4;
    v7 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_27;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_27:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_S3_ENDPOINT");
  v29 = 0;
  turi::globals::register_global<std::string>::register_global(&turi::fileio::__S3_ENDPOINT__register__instance, __p, &turi::fileio::S3_ENDPOINT, 1, &v27);
  v9 = v29;
  if (v29 == &v27)
  {
    v10 = 4;
    v9 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_34;
    v10 = 5;
  }
  (*((void (**)(void))*v9 + v10))();
LABEL_34:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_S3_REGION");
  v29 = 0;
  turi::globals::register_global<std::string>::register_global(&turi::fileio::__S3_REGION__register__instance, __p, &turi::fileio::S3_REGION, 1, &v27);
  v11 = v29;
  if (v29 == &v27)
  {
    v12 = 4;
    v11 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_41;
    v12 = 5;
  }
  (*((void (**)(void))*v11 + v12))();
LABEL_41:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_NUM_GPUS");
  v29 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__NUM_GPUS__register__instance, __p, &turi::fileio::NUM_GPUS, 1, &v27);
  v13 = v29;
  if (v29 == &v27)
  {
    v14 = 4;
    v13 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_48;
    v14 = 5;
  }
  (*((void (**)(void))*v13 + v14))();
LABEL_48:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&turi::fileio::CACHE_FILE_LOCATIONS, "CHANGEME");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &turi::fileio::CACHE_FILE_LOCATIONS, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::fileio::CACHE_FILE_HDFS_LOCATION, "");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::fileio::CACHE_FILE_HDFS_LOCATION, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_CACHE_FILE_LOCATIONS");
  v27 = &unk_24D921B40;
  v28 = turi::fileio::check_cache_file_location;
  v29 = &v27;
  turi::globals::register_global<std::string>::register_global(&turi::fileio::__CACHE_FILE_LOCATIONS__register__instance, __p, &turi::fileio::CACHE_FILE_LOCATIONS, 1, &v27);
  v15 = v29;
  if (v29 == &v27)
  {
    v16 = 4;
    v15 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_55;
    v16 = 5;
  }
  (*((void (**)(void))*v15 + v16))();
LABEL_55:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_DIR, "");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_DIR, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_FILE, "");
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_FILE, &dword_217E69000);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_ALTERNATIVE_SSL_CERT_FILE");
  v29 = 0;
  turi::globals::register_global<std::string>::register_global(&turi::fileio::__FILEIO_ALTERNATIVE_SSL_CERT_FILE__register__instance, __p, turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_FILE, 1, &v27);
  v17 = v29;
  if (v29 == &v27)
  {
    v18 = 4;
    v17 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_62;
    v18 = 5;
  }
  (*((void (**)(void))*v17 + v18))();
LABEL_62:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_ALTERNATIVE_SSL_CERT_DIR");
  v29 = 0;
  turi::globals::register_global<std::string>::register_global(&turi::fileio::__FILEIO_ALTERNATIVE_SSL_CERT_DIR__register__instance, __p, turi::fileio::FILEIO_ALTERNATIVE_SSL_CERT_DIR, 1, &v27);
  v19 = v29;
  if (v29 == &v27)
  {
    v20 = 4;
    v19 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_69;
    v20 = 5;
  }
  (*((void (**)(void))*v19 + v20))();
LABEL_69:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_INSECURE_SSL_CERTIFICATE_CHECKS");
  v29 = 0;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_INSECURE_SSL_CERTIFICATE_CHECKS__register__instance, __p, &turi::fileio::FILEIO_INSECURE_SSL_CERTIFICATE_CHECKS, 1, &v27);
  v21 = v29;
  if (v29 == &v27)
  {
    v22 = 4;
    v21 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_76;
    v22 = 5;
  }
  (*((void (**)(void))*v21 + v22))();
LABEL_76:
  if (v26 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "TURI_FILEIO_MAX_REMOTE_FS_CACHE_ENTRIES");
  v27 = &unk_24D921BF0;
  v28 = turi::fileio::set_max_remote_fs_cache_entries;
  v29 = &v27;
  turi::globals::register_global<long long>::register_global(&turi::fileio::__FILEIO_MAX_REMOTE_FS_CACHE_ENTRIES__register__instance, __p, &turi::fileio::FILEIO_MAX_REMOTE_FS_CACHE_ENTRIES, 1, &v27);
  v23 = v29;
  if (v29 == &v27)
  {
    v24 = 4;
    v23 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_83;
    v24 = 5;
  }
  (*((void (**)(void))*v23 + v24))();
LABEL_83:
  if (v26 < 0)
    operator delete(__p[0]);
}

void sub_217FF9014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CoreML::Specification::protobuf_Identity_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Identity_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Identity.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::_Identity_default_instance_ = (uint64_t)&off_24D921CA0;
  *(_QWORD *)algn_254FF6BA8 = 0;
  dword_254FF6BB0 = 0;
  byte_254FF6BB8 = 1;
}

void CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(CoreML::Specification::protobuf_Identity_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_Identity_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_217FF914C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Identity *CoreML::Specification::Identity::Identity(CoreML::Specification::Identity *this)
{
  *(_QWORD *)this = &off_24D921CA0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::Identity *)&CoreML::Specification::_Identity_default_instance_)
    CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_217FF91AC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Identity::~Identity(CoreML::Specification::Identity *this)
{
  *(_QWORD *)this = &off_24D921CA0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D921CA0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::Identity::default_instance(CoreML::Specification::Identity *this)
{
  CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(this);
  return &CoreML::Specification::_Identity_default_instance_;
}

CoreML::Specification::Identity *CoreML::Specification::Identity::New(CoreML::Specification::Identity *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Identity *v3;

  v3 = (CoreML::Specification::Identity *)operator new();
  CoreML::Specification::Identity::Identity(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Identity>(a2, v3);
  return v3;
}

void sub_217FF92A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Identity>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Identity>);
  return result;
}

uint64_t CoreML::Specification::Identity::MergePartialFromCodedStream(CoreML::Specification::Identity *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::Identity::ByteSizeLong(CoreML::Specification::Identity *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::Identity::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

std::string *CoreML::Specification::Identity::MergeFrom(std::string *this, const CoreML::Specification::Identity *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::Identity::IsInitialized(CoreML::Specification::Identity *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Identity::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Identity");
}

CoreML::Specification::Identity *CoreML::Specification::Identity::New(CoreML::Specification::Identity *this)
{
  return CoreML::Specification::Identity::New(this, 0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Identity>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _GLOBAL__sub_I_Identity_pb_cc()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

turi::fileio::cache_block *turi::fileio::cache_block::cache_block(turi::fileio::cache_block *this, __int128 *a2, size_t a3, uint64_t a4)
{
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)this = v7;
  }
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = a4;
  turi::fileio::cache_block::initialize_memory(this, a3);
  return this;
}

void sub_217FF9480(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  turi::fileio::cache_block::cache_block(v1);
  _Unwind_Resume(a1);
}

size_t turi::fileio::cache_block::initialize_memory(turi::fileio::cache_block *this, size_t a2)
{
  size_t result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::bad_alloc *exception;
  std::bad_alloc *v9;

  turi::fileio::cache_block::clear(this);
  if (a2 <= 0x400)
    result = a2;
  else
    result = 1024;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = result;
  *((_QWORD *)this + 5) = 0;
  if (result)
  {
    result = (size_t)malloc_type_malloc(result, 0x100004077774924uLL);
    *((_QWORD *)this + 6) = result;
    if (!result)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v9 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v9, MEMORY[0x24BEDB758], (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v5 = *((_QWORD *)this + 4);
    v6 = (unint64_t *)(*((_QWORD *)this + 10) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + v5, v6));
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
  return result;
}

uint64_t turi::fileio::cache_block::extend_capacity(turi::fileio::cache_block *this, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = *((_QWORD *)this + 6);
  if (result)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4 < a2)
      return 0;
    v5 = *((_QWORD *)this + 4);
    if (a2 <= v5)
      return 1;
    v6 = 2 * v5;
    if (2 * v5 <= a2)
      v6 = a2;
    if (v4 >= v6)
      v7 = v6;
    else
      v7 = *((_QWORD *)this + 3);
    v8 = *(_QWORD *)(*((_QWORD *)this + 10) + 8);
    if (v7 - v5 + v8 > turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY)
    {
      v7 = a2;
      if (a2 - v5 + v8 > turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY)
        return 0;
    }
    result = (uint64_t)malloc_type_realloc((void *)result, v7, 0x52224B82uLL);
    if (result)
    {
      *((_QWORD *)this + 6) = result;
      v9 = v7 - *((_QWORD *)this + 4);
      v10 = (unint64_t *)(*((_QWORD *)this + 10) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + v9, v10));
      *((_QWORD *)this + 4) = v7;
      return 1;
    }
  }
  return result;
}

double turi::fileio::cache_block::write_to_file@<D0>(turi::fileio::cache_block *this@<X0>, turi::fileio_impl::general_fstream_sink **a2@<X8>)
{
  void **v4;
  int *v5;
  file_logger *v6;
  file_logger *started;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  const char *v12;
  void *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  double result;
  _QWORD *exception;
  std::string v19;
  void *__p[2];
  char v21;
  std::string v22;

  if ((*((char *)this + 79) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 79))
      goto LABEL_3;
LABEL_15:
    turi::fileio::cache_block::write_to_file(void)::$_0::operator()();
  }
  if (*((_QWORD *)this + 8))
    goto LABEL_15;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::get_temp_name_prefer_hdfs((uint64_t)__p, &v22);
  v4 = (void **)((char *)this + 56);
  if (*((char *)this + 79) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 9) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
  *((_BYTE *)&v22.__r_.__value_.__s + 23) = 0;
  v22.__r_.__value_.__s.__data_[0] = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  v5 = (int *)global_logger();
  if (v5[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v5))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "write_to_file", 71, 1);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8 && *((_BYTE *)v8 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Flushing to ", 12);
    if (*((char *)this + 79) < 0)
    {
      std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
    }
    else
    {
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
      v19.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
    }
    v9 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v19);
    v10 = pthread_getspecific(*(_QWORD *)(v9 + 592));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet((const std::locale *)&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v9);
        if (*(_DWORD *)(v9 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  std::allocate_shared[abi:ne180100]<turi::fileio_impl::general_fstream_sink,std::allocator<turi::fileio_impl::general_fstream_sink>,std::string &,void>((uint64_t)v4, a2);
  v12 = (const char *)*((_QWORD *)this + 6);
  if (v12)
  {
    turi::fileio_impl::general_fstream_sink::write(*a2, v12, *((_QWORD *)this + 5));
    v13 = (void *)*((_QWORD *)this + 6);
    if (v13)
    {
      free(v13);
      v14 = *((_QWORD *)this + 4);
      v15 = (unint64_t *)(*((_QWORD *)this + 10) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - v14, v15));
    }
  }
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void sub_217FF987C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  std::locale::~locale(&a22);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::fileio::cache_block::write_to_file(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"filename.empty()", 16);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "operator()", 69, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::fileio::cache_block::write_to_file(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FF99C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::fileio::cache_block::clear(turi::fileio::cache_block *this)
{
  int *v2;
  file_logger *v3;
  file_logger *started;
  _QWORD *v5;
  int *v6;
  file_logger *v7;
  file_logger *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  void *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  _OWORD *v20;
  int *v21;
  file_logger *v22;
  file_logger *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *exception;
  _QWORD *v29;
  _QWORD *v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::locale v35;

  if (*((_QWORD *)this + 6))
  {
    v2 = (int *)global_logger();
    if (v2[169] > 1)
    {
LABEL_26:
      v13 = (void *)*((_QWORD *)this + 6);
      if (v13)
      {
        free(v13);
        v14 = *((_QWORD *)this + 4);
        v15 = (unint64_t *)(*((_QWORD *)this + 10) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - v14, v15));
      }
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      return;
    }
    if (!cppipc::must_cancel((cppipc *)v2))
    {
      v3 = (file_logger *)global_logger();
      started = file_logger::start_stream(v3, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "clear", 105, 1);
      v5 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v5 && *((_BYTE *)v5 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Releasing cache ID ", 19);
      if (*((char *)this + 23) < 0)
        std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
      else
        v34 = *(std::string *)this;
      v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v34);
      v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
      if (v11)
      {
        if (*((_BYTE *)v11 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
          v12 = std::locale::use_facet(&v35, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
          std::locale::~locale(&v35);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v10);
          if (*(_DWORD *)(v10 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      goto LABEL_26;
    }
LABEL_58:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  if (*((char *)this + 79) < 0)
  {
    if (!*((_QWORD *)this + 8))
      return;
  }
  else if (!*((_BYTE *)this + 79))
  {
    return;
  }
  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      goto LABEL_58;
    v7 = (file_logger *)global_logger();
    v8 = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "clear", 108, 1);
    v9 = pthread_getspecific(*((_QWORD *)v8 + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Releasing cache ID ", 19);
    if (*((char *)this + 23) < 0)
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
    else
      v33 = *(std::string *)this;
    v17 = file_logger::operator<<<std::string>((uint64_t)v8, (uint64_t)&v33);
    v18 = pthread_getspecific(*(_QWORD *)(v17 + 592));
    if (v18)
    {
      if (*((_BYTE *)v18 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(v18[2] - 24) + 16));
        v19 = std::locale::use_facet(&v35, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(&v35);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v17);
        if (*(_DWORD *)(v17 + 600) == 7)
        {
          __print_back_trace();
          v29 = __cxa_allocate_exception(8uLL);
          *v29 = "LOG_FATAL encountered";
          __cxa_throw(v29, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  v20 = (_OWORD *)((char *)this + 56);
  v21 = (int *)global_logger();
  if (v21[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v21))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v22 = (file_logger *)global_logger();
    v23 = file_logger::start_stream(v22, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "clear", 111, 1);
    v24 = pthread_getspecific(*((_QWORD *)v23 + 74));
    if (v24 && *((_BYTE *)v24 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"Deleting cached file ", 21);
    if (*((char *)this + 79) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
    }
    else
    {
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *v20;
      v32.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
    }
    v25 = file_logger::operator<<<std::string>((uint64_t)v23, (uint64_t)&v32);
    v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
    if (v26)
    {
      if (*((_BYTE *)v26 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(v26[2] - 24) + 16));
        v27 = std::locale::use_facet(&v35, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale(&v35);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v25);
        if (*(_DWORD *)(v25 + 600) == 7)
        {
          __print_back_trace();
          v30 = __cxa_allocate_exception(8uLL);
          *v30 = "LOG_FATAL encountered";
          __cxa_throw(v30, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *v20;
    v31.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
  turi::delete_temp_file((uint64_t)&v31);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (*((char *)this + 79) < 0)
  {
    **((_BYTE **)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  else
  {
    *((_BYTE *)this + 56) = 0;
    *((_BYTE *)this + 79) = 0;
  }
}

void sub_217FF9F68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  file_logger *v35;
  pthread_key_t *v36;
  uint64_t v37;

  std::locale::~locale((std::locale *)(v33 - 56));
  if (a24 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  if (*((int *)global_logger() + 169) <= 5)
  {
    v35 = log_stream_dispatch<true>::exec((cppipc *)5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "clear", 114, 1);
    v36 = file_logger::operator<<((pthread_key_t *)v35, "Failed to delete temporary file: ");
    if (*(char *)(v31 + 79) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a9, *(const std::string::value_type **)(v31 + 56), *(_QWORD *)(v31 + 64));
    }
    else
    {
      a9 = *v32;
      a10 = *((_QWORD *)v32 + 2);
    }
    v37 = file_logger::operator<<<std::string>((uint64_t)v36, (uint64_t)&a9);
    file_logger::operator<<(v37, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
    if (SHIBYTE(a10) < 0)
      operator delete((void *)a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x217FF9EACLL);
}

void sub_217FFA07C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x217FFA0BCLL);
}

void turi::fileio::cache_block::~cache_block(void **this)
{
  turi::fileio::cache_block::clear((turi::fileio::cache_block *)this);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void turi::fileio::fixed_size_cache_manager::hold_instance(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  turi::fileio::fixed_size_cache_manager *v8;

  if ((v3 & 1) == 0
  {
    v8 = (turi::fileio::fixed_size_cache_manager *)operator new();
    turi::fileio::fixed_size_cache_manager::fixed_size_cache_manager(v8);
    std::shared_ptr<turi::fileio::fixed_size_cache_manager const>::shared_ptr[abi:ne180100]<turi::fileio::fixed_size_cache_manager,void>(&turi::fileio::fixed_size_cache_manager::hold_instance(void)::instance, (uint64_t)v8);
    __cxa_atexit((void (*)(void *))std::shared_ptr<turi::fileio::fixed_size_cache_manager const>::~shared_ptr[abi:ne180100], &turi::fileio::fixed_size_cache_manager::hold_instance(void)::instance, &dword_217E69000);
  }
  if ((v4 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &turi::fileio::fixed_size_cache_manager::hold_instance(void)::mx, &dword_217E69000);
  }
  std::mutex::lock(&turi::fileio::fixed_size_cache_manager::hold_instance(void)::mx);
  v5 = unk_254FEEAF0;
  *a1 = turi::fileio::fixed_size_cache_manager::hold_instance(void)::instance;
  a1[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  std::mutex::unlock(&turi::fileio::fixed_size_cache_manager::hold_instance(void)::mx);
}

void sub_217FFA22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A0C40B396A53CLL);
  _Unwind_Resume(a1);
}

uint64_t turi::fileio::fixed_size_cache_manager::get_instance(turi::fileio::fixed_size_cache_manager *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    turi::fileio::fixed_size_cache_manager::hold_instance(&turi::fileio::fixed_size_cache_manager::get_instance(void)::instance);
    __cxa_atexit((void (*)(void *))std::shared_ptr<turi::fileio::fixed_size_cache_manager const>::~shared_ptr[abi:ne180100], &turi::fileio::fixed_size_cache_manager::get_instance(void)::instance, &dword_217E69000);
  }
  return turi::fileio::fixed_size_cache_manager::get_instance(void)::instance;
}

void sub_217FFA2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

turi::fileio::fixed_size_cache_manager *turi::fileio::fixed_size_cache_manager::fixed_size_cache_manager(turi::fileio::fixed_size_cache_manager *this)
{
  uint64_t v2;
  const char *v3;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 16), 0);
  assert_msg((_DWORD)v2 == 0, v3, v2);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  return this;
}

uint64_t turi::fileio::fixed_size_cache_manager::get_temp_cache_id@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  pthread_mutex_t *v6;
  _QWORD *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  std::string v20;
  std::string v21;
  _QWORD v22[2];
  _QWORD v23[11];
  char v24;
  uint64_t v25;

  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
  v21.__r_.__value_.__s.__data_[0] = 48;
  v7 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, (char *)&v21);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 24) = 6;
  std::ostream::operator<<();
  ++*(_QWORD *)a1;
  turi::fileio::get_temp_cache_prefix(&v20);
  std::stringbuf::str();
  if ((v19 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v9 = v19;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(&v20, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::string::append(&v21, v13, v14);
  *a3 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v22[0] = *MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v23[0] = v16;
  v23[1] = MEMORY[0x24BEDB848] + 16;
  if (v24 < 0)
    operator delete((void *)v23[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v25);
  return pthread_mutex_unlock(v6);
}

void sub_217FFA510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  pthread_mutex_t *v27;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  pthread_mutex_unlock(v27);
  _Unwind_Resume(a1);
}

void sub_217FFA57C()
{
  JUMPOUT(0x217FFA56CLL);
}

uint64_t turi::fileio::fixed_size_cache_manager::new_cache@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  pthread_mutex_t *v6;
  turi::timer *v7;
  cppipc *v8;
  float v9;
  float v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  _QWORD *v21;
  int *v22;
  file_logger *v23;
  file_logger *v24;
  _QWORD *v25;
  int *v26;
  file_logger *v27;
  file_logger *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  turi::fileio::cache_block *v45;
  unsigned __int8 *v46;
  _QWORD *exception;
  _QWORD *v49;
  _QWORD *v50;
  std::string __p;
  std::string v52;
  std::string v53;
  std::locale v54;

  v6 = (pthread_mutex_t *)(a1 + 16);
  v7 = (turi::timer *)pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v9 = turi::timer::approx_time_seconds(v7);
  v10 = *(float *)&turi::fileio::fixed_size_cache_manager::new_cache(std::string)::last_print + 5.0;
  if ((float)(*(float *)&turi::fileio::fixed_size_cache_manager::new_cache(std::string)::last_print + 5.0) <= v9)
    turi::fileio::fixed_size_cache_manager::new_cache(std::string)::last_print = LODWORD(v9);
  if (cppipc::must_cancel(v8))
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v11 = (file_logger *)global_logger();
  started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "new_cache", 163, v10 <= v9);
  v13 = pthread_getspecific(*((_QWORD *)started + 74));
  if (v13 && *((_BYTE *)v13 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Cache Utilization:", 18);
  v14 = file_logger::operator<<<unsigned long>((uint64_t)started);
  v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
  if (v15)
  {
    if (*((_BYTE *)v15 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
      v16 = std::locale::use_facet(&v54, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v54);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v14);
      if (*(_DWORD *)(v14 + 600) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  v17 = turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY;
  if (*(_QWORD *)(a1 + 8) >= (unint64_t)turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY)
  {
    turi::fileio::fixed_size_cache_manager::try_cache_evict((turi::fileio::fixed_size_cache_manager *)a1);
    v17 = turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY;
  }
  v18 = *(_QWORD *)(a1 + 8);
  v19 = v17 - v18;
  if (v17 - v18 >= turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY_PER_FILE)
    v19 = turi::fileio::FILEIO_MAXIMUM_CACHE_CAPACITY_PER_FILE;
  if (v17 <= v18)
    v20 = 0;
  else
    v20 = v19;
  v21 = (_QWORD *)(a1 + 80);
  if (std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>((_QWORD *)(a1 + 80), (unsigned __int8 *)a2))
  {
    v22 = (int *)global_logger();
    if (v22[169] > 1)
      goto LABEL_41;
    if (!cppipc::must_cancel((cppipc *)v22))
    {
      v23 = (file_logger *)global_logger();
      v24 = file_logger::start_stream(v23, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "new_cache", 186, 1);
      v25 = pthread_getspecific(*((_QWORD *)v24 + 74));
      if (v25 && *((_BYTE *)v25 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)"Overwrite cache block ", 22);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      v30 = file_logger::operator<<<std::string>((uint64_t)v24, (uint64_t)&__p);
      v31 = pthread_getspecific(*(_QWORD *)(v30 + 592));
      if (v31 && *((_BYTE *)v31 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)" Capacity = ", 12);
      v32 = file_logger::operator<<<unsigned long>(v30);
      v33 = pthread_getspecific(*(_QWORD *)(v32 + 592));
      if (v33)
      {
        if (*((_BYTE *)v33 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(v33[2] - 24) + 16));
          v34 = std::locale::use_facet(&v54, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
          std::locale::~locale(&v54);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v32);
          if (*(_DWORD *)(v32 + 600) == 7)
          {
            __print_back_trace();
            v49 = __cxa_allocate_exception(8uLL);
            *v49 = "LOG_FATAL encountered";
            __cxa_throw(v49, MEMORY[0x24BEDB718], 0);
          }
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_41:
      v35 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v21, (unsigned __int8 *)a2);
      v36 = *((_QWORD *)v35 + 5);
      *a3 = v36;
      v37 = *((_QWORD *)v35 + 6);
      a3[1] = v37;
      if (v37)
      {
        v38 = (unint64_t *)(v37 + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        v36 = *a3;
      }
      if (*(char *)(v36 + 79) < 0)
      {
        if (*(_QWORD *)(v36 + 64))
          goto LABEL_48;
      }
      else if (*(_BYTE *)(v36 + 79))
      {
LABEL_48:
        turi::fileio::cache_block::initialize_memory((turi::fileio::cache_block *)v36, v20);
        return pthread_mutex_unlock(v6);
      }
      v20 = *(_QWORD *)(v36 + 24);
      goto LABEL_48;
    }
LABEL_68:
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  v26 = (int *)global_logger();
  if (v26[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v26))
      goto LABEL_68;
    v27 = (file_logger *)global_logger();
    v28 = file_logger::start_stream(v27, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "new_cache", 179, 1);
    v29 = pthread_getspecific(*((_QWORD *)v28 + 74));
    if (v29 && *((_BYTE *)v29 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)"New cache block ", 16);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v53 = *(std::string *)a2;
    v40 = file_logger::operator<<<std::string>((uint64_t)v28, (uint64_t)&v53);
    v41 = pthread_getspecific(*(_QWORD *)(v40 + 592));
    if (v41 && *((_BYTE *)v41 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41 + 2, (uint64_t)" Capacity = ", 12);
    v42 = file_logger::operator<<<unsigned long>(v40);
    v43 = pthread_getspecific(*(_QWORD *)(v42 + 592));
    if (v43)
    {
      if (*((_BYTE *)v43 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(v43[2] - 24) + 16));
        v44 = std::locale::use_facet(&v54, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
        std::locale::~locale(&v54);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v42);
        if (*(_DWORD *)(v42 + 600) == 7)
        {
          __print_back_trace();
          v50 = __cxa_allocate_exception(8uLL);
          *v50 = "LOG_FATAL encountered";
          __cxa_throw(v50, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  v45 = (turi::fileio::cache_block *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v52 = *(std::string *)a2;
  turi::fileio::cache_block::cache_block(v45, (__int128 *)&v52, v20, a1);
  std::shared_ptr<turi::fileio::cache_block>::shared_ptr[abi:ne180100]<turi::fileio::cache_block,void>(a3, (uint64_t)v45);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  v54.__locale_ = (std::locale::__imp *)a2;
  v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 80, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v54);
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)v46 + 5, a3);
  return pthread_mutex_unlock(v6);
}

void sub_217FFABD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,std::locale a31)
{
  pthread_mutex_t *v31;
  uint64_t v32;

  MEMORY[0x219A19A08](v32, 0x1032C40A8A00B57);
  pthread_mutex_unlock(v31);
  _Unwind_Resume(a1);
}

void turi::fileio::fixed_size_cache_manager::try_cache_evict(turi::fileio::fixed_size_cache_manager *this)
{
  turi::timer *v2;
  uint64_t *v3;
  turi::fileio::cache_block *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  cppipc *v8;
  float v9;
  float v10;
  file_logger *v11;
  file_logger *started;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  turi::timer *v19;
  __n128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  cppipc *v24;
  float v25;
  float v26;
  file_logger *v27;
  file_logger *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *exception;
  _QWORD *v37;
  turi::fileio_impl::general_fstream_sink *v38;
  std::__shared_weak_count *v39;
  std::string v40;
  turi::fileio::cache_block *v41;
  std::__shared_weak_count *v42;
  std::string v43;
  std::locale v44;

  v2 = (turi::timer *)pthread_mutex_trylock((pthread_mutex_t *)((char *)this + 16));
  if (!(_DWORD)v2)
    turi::fileio::fixed_size_cache_manager::try_cache_evict(void)::$_0::operator()();
  memset(&v43, 0, sizeof(v43));
  v41 = 0;
  v42 = 0;
  v3 = (uint64_t *)*((_QWORD *)this + 12);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = v3[6];
      if (v6 && !*(_QWORD *)(v6 + 8))
      {
        v7 = v3[5];
        if (*(char *)(v7 + 79) < 0)
        {
          if (!*(_QWORD *)(v7 + 64))
          {
LABEL_10:
            if (*(_QWORD *)(v7 + 40) > v5)
            {
              std::string::operator=(&v43, (const std::string *)(v3 + 2));
              v2 = (turi::timer *)std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v41, v3 + 5);
              v4 = v41;
              v5 = *((_QWORD *)v41 + 5);
            }
          }
        }
        else if (!*(_BYTE *)(v7 + 79))
        {
          goto LABEL_10;
        }
      }
      v3 = (uint64_t *)*v3;
      if (!v3)
      {
        if (v4)
        {
          v9 = turi::timer::approx_time_seconds(v2);
          v10 = *(float *)&turi::fileio::fixed_size_cache_manager::try_cache_evict(void)::last_print + 5.0;
          if ((float)(*(float *)&turi::fileio::fixed_size_cache_manager::try_cache_evict(void)::last_print + 5.0) <= v9)
            turi::fileio::fixed_size_cache_manager::try_cache_evict(void)::last_print = LODWORD(v9);
          if (cppipc::must_cancel(v8))
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          v11 = (file_logger *)global_logger();
          started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "try_cache_evict", 245, v10 <= v9);
          v13 = pthread_getspecific(*((_QWORD *)started + 74));
          if (v13 && *((_BYTE *)v13 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Evicting ", 9);
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v40, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
          else
            v40 = v43;
          v14 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v40);
          v15 = pthread_getspecific(*(_QWORD *)(v14 + 592));
          if (v15 && *((_BYTE *)v15 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)" with size ", 11);
          v16 = file_logger::operator<<<unsigned long>(v14);
          v17 = pthread_getspecific(*(_QWORD *)(v16 + 592));
          if (v17)
          {
            if (*((_BYTE *)v17 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[2] - 24) + 16));
              v18 = std::locale::use_facet(&v44, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
              std::locale::~locale(&v44);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v16);
              if (*(_DWORD *)(v16 + 600) == 7)
              {
                __print_back_trace();
                exception = __cxa_allocate_exception(8uLL);
                *exception = "LOG_FATAL encountered";
                __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
              }
            }
          }
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          v20.n128_f64[0] = turi::fileio::cache_block::write_to_file(v41, &v38);
          v21 = v39;
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v20);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v25 = turi::timer::approx_time_seconds(v19);
          v26 = *(float *)&turi::fileio::fixed_size_cache_manager::try_cache_evict(void)::last_print + 5.0;
          if ((float)(*(float *)&turi::fileio::fixed_size_cache_manager::try_cache_evict(void)::last_print + 5.0) <= v25)
            turi::fileio::fixed_size_cache_manager::try_cache_evict(void)::last_print = LODWORD(v25);
          if (cppipc::must_cancel(v24))
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          v27 = (file_logger *)global_logger();
          v28 = file_logger::start_stream(v27, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "try_cache_evict", 248, v26 <= v25);
          v29 = pthread_getspecific(*((_QWORD *)v28 + 74));
          if (v29 && *((_BYTE *)v29 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)"Cache Utilization:", 18);
          v30 = file_logger::operator<<<unsigned long>((uint64_t)v28);
          v31 = pthread_getspecific(*(_QWORD *)(v30 + 592));
          if (v31)
          {
            if (*((_BYTE *)v31 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(v31[2] - 24) + 16));
              v32 = std::locale::use_facet(&v44, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
              std::locale::~locale(&v44);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v30);
              if (*(_DWORD *)(v30 + 600) == 7)
              {
                __print_back_trace();
                v37 = __cxa_allocate_exception(8uLL);
                *v37 = "LOG_FATAL encountered";
                __cxa_throw(v37, MEMORY[0x24BEDB718], 0);
              }
            }
          }
        }
        break;
      }
    }
  }
  v33 = v42;
  if (v42)
  {
    v34 = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
}

void sub_217FFB114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::locale::~locale((std::locale *)(v25 - 56));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t turi::fileio::fixed_size_cache_manager::free(uint64_t a1, __int128 **a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  pthread_mutex_t *v13;
  __int128 *v14;
  __int128 v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  _QWORD *exception;
  std::string __p;
  std::string v21;
  std::locale v22;

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "free", 202, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Free cache block ", 17);
    v8 = *a2;
    if (*((char *)*a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      v21.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
    }
    v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v21);
    v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
    if (v11)
    {
      if (*((_BYTE *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
        v12 = std::locale::use_facet(&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v10);
        if (*(_DWORD *)(v10 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  v13 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v14 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
  }
  else
  {
    v15 = *v14;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
  }
  v16 = (_QWORD *)(a1 + 80);
  v17 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v16, (unsigned __int8 *)&__p);
  if (!v17)
    turi::fileio::fixed_size_cache_manager::free(std::shared_ptr<turi::fileio::cache_block>)::$_0::operator()();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::remove(v16, v17, (uint64_t)&v22);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v22, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return pthread_mutex_unlock(v13);
}

void sub_217FFB3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  pthread_mutex_t *v22;

  pthread_mutex_unlock(v22);
  _Unwind_Resume(a1);
}

void turi::fileio::fixed_size_cache_manager::free(std::shared_ptr<turi::fileio::cache_block>)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"iter != cache_blocks.end()", 26);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "operator()", 206, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::fileio::fixed_size_cache_manager::free(std::shared_ptr<turi::fileio::cache_block>)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FFB504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::fileio::fixed_size_cache_manager::get_cache@<X0>(uint64_t a1@<X0>, std::string::size_type a2@<X1>, _QWORD *a3@<X8>)
{
  int *v6;
  file_logger *v7;
  file_logger *started;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  pthread_mutex_t *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::logic_error *v20;
  _QWORD *exception;
  std::string v22;
  std::string v23;

  v6 = (int *)global_logger();
  if (v6[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v6))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "get_cache", 211, 1);
    v9 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v9 && *((_BYTE *)v9 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Get cache block ", 16);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v23 = *(std::string *)a2;
    v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v23);
    v11 = pthread_getspecific(*(_QWORD *)(v10 + 592));
    if (v11)
    {
      if (*((_BYTE *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
        v12 = std::locale::use_facet((const std::locale *)&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale((std::locale *)&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v10);
        if (*(_DWORD *)(v10 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  v13 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v14 = (_QWORD *)(a1 + 80);
  if (!std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v14, (unsigned __int8 *)a2))
  {
    v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(v20, &v22);
    v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v20, (struct type_info *)off_24D916A80, (void (*)(void *))MEMORY[0x24BEDAB00]);
  }
  v22.__r_.__value_.__r.__words[0] = a2;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v14, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v22);
  v16 = *((_QWORD *)v15 + 6);
  *a3 = *((_QWORD *)v15 + 5);
  a3[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  return pthread_mutex_unlock(v13);
}

void sub_217FFB7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::locale::~locale(&a10);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::fileio::fixed_size_cache_manager::try_cache_evict(void)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!(mutex.try_lock())", 19);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fixed_size_cache_manager.cpp", "operator()", 229, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::fileio::fixed_size_cache_manager::try_cache_evict(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FFB968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void sub_217FFBB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::fileio_impl::general_fstream_sink,std::allocator<turi::fileio_impl::general_fstream_sink>,std::string &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<turi::fileio_impl::general_fstream_sink>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<turi::fileio_impl::general_fstream_sink>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217FFBC64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::fileio::fixed_size_cache_manager const>::shared_ptr[abi:ne180100]<turi::fileio::fixed_size_cache_manager,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D921D50;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217FFBCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<turi::fileio::fixed_size_cache_manager>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<turi::fileio::fixed_size_cache_manager *,std::shared_ptr<turi::fileio::fixed_size_cache_manager const>::__shared_ptr_default_delete<turi::fileio::fixed_size_cache_manager const,turi::fileio::fixed_size_cache_manager>,std::allocator<turi::fileio::fixed_size_cache_manager>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<turi::fileio::fixed_size_cache_manager>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::fileio::fixed_size_cache_manager *,std::shared_ptr<turi::fileio::fixed_size_cache_manager const>::__shared_ptr_default_delete<turi::fileio::fixed_size_cache_manager const,turi::fileio::fixed_size_cache_manager>,std::allocator<turi::fileio::fixed_size_cache_manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<turi::fileio::fixed_size_cache_manager>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = a2 + 80;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::clear(a2 + 80);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::~__hash_table(v3);
    turi::mutex::~mutex((pthread_mutex_t *)(a2 + 16));
    JUMPOUT(0x219A19A08);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<turi::unity_sarray_base>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::shared_ptr<turi::fileio::cache_block>::shared_ptr[abi:ne180100]<turi::fileio::cache_block,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D921DC8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217FFBEC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<turi::fileio::cache_block>::reset[abi:ne180100]((void ***)va, 0);
  _Unwind_Resume(a1);
}

void **std::__shared_ptr_pointer<turi::fileio::cache_block *,std::shared_ptr<turi::fileio::cache_block>::__shared_ptr_default_delete<turi::fileio::cache_block,turi::fileio::cache_block>,std::allocator<turi::fileio::cache_block>>::__on_zero_shared(uint64_t a1)
{
  void **result;

  result = *(void ***)(a1 + 24);
  if (result)
  {
    turi::fileio::cache_block::~cache_block(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::fileio::cache_block *,std::shared_ptr<turi::fileio::cache_block>::__shared_ptr_default_delete<turi::fileio::cache_block,turi::fileio::cache_block>,std::allocator<turi::fileio::cache_block>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void **std::unique_ptr<turi::fileio::cache_block>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::fileio::cache_block::~cache_block(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_217FFC208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_217FFC2A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<turi::unity_sarray_base>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<turi::fileio::cache_block>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t _GLOBAL__sub_I_fixed_size_cache_manager_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void boost::filesystem::filesystem_error::~filesystem_error(unsigned int **this)
{
  *this = (unsigned int *)&unk_24D921E70;
  boost::detail::shared_count::~shared_count(this + 8);
  boost::system::system_error::~system_error((std::runtime_error *)this);
}

{
  *this = (unsigned int *)&unk_24D921E70;
  boost::detail::shared_count::~shared_count(this + 8);
  boost::system::system_error::~system_error((std::runtime_error *)this);
  JUMPOUT(0x219A19A08);
}

void turi::fileio::get_protocol(const std::string *__s@<X0>, std::string::size_type a2@<X8>)
{
  uint64_t size;
  const std::string *v5;
  char *v6;
  std::string *v7;
  char *v8;
  std::string *v10;
  std::string::size_type v11;
  _BYTE *v12;
  int v13;
  BOOL v14;
  std::string::size_type v15;
  uint64_t v16;
  std::locale v17;
  std::string v18;

  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (const std::string *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    v5 = __s;
  }
  if (size >= 3)
  {
    v6 = (char *)v5 + size;
    v7 = (std::string *)v5;
    do
    {
      v8 = (char *)memchr(v7, 58, size - 2);
      if (!v8)
        break;
      if (*(_WORD *)v8 == 12090 && v8[2] == 47)
      {
        if (v8 == v6 || v8 - (char *)v5 == -1)
          break;
        std::string::basic_string(&v18, __s, 0, v8 - (char *)v5, (std::allocator<char> *)&v17);
        MEMORY[0x219A19828](&v17);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v18;
        else
          v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
        v11 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v11 = v18.__r_.__value_.__l.__size_;
        std::string::__init_with_sentinel[abi:ne180100]<boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>,boost::iterators::transform_iterator<boost::algorithm::detail::to_lowerF<char>,std::__wrap_iter<char const*>,boost::iterators::use_default,boost::iterators::use_default>>((std::string *)a2, (char *)v10, &v17, (char *)v10 + v11);
        std::locale::~locale(&v17);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        if (*(char *)(a2 + 23) >= 0)
          v12 = (_BYTE *)a2;
        else
          v12 = *(_BYTE **)a2;
        MEMORY[0x219A19828](&v17);
        v13 = *(char *)(a2 + 23);
        v14 = v13 < 0;
        v15 = *(_QWORD *)a2;
        if (v13 >= 0)
          v15 = a2;
        v16 = *(unsigned __int8 *)(a2 + 23);
        if (v14)
          v16 = *(_QWORD *)(a2 + 8);
        v18.__r_.__value_.__r.__words[0] = v15;
        v18.__r_.__value_.__l.__size_ = v15 + v16;
        boost::algorithm::detail::transform_range_copy<std::__wrap_iter<char *>,boost::iterator_range<std::__wrap_iter<char const*>>,boost::algorithm::detail::to_lowerF<char>>(v12, &v18.__r_.__value_.__l.__data_, &v17);
        std::locale::~locale(&v17);
        return;
      }
      v7 = (std::string *)(v8 + 1);
      size = v6 - (char *)v7;
    }
    while (v6 - (char *)v7 >= 3);
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, "");
}

void sub_217FFC630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::locale::~locale((std::locale *)&a9);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(a1);
}

void turi::fileio::get_file_status(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  stat *p_p;
  __darwin_ino64_t st_gid_high;
  BOOL v10;
  _BOOL4 v11;
  __darwin_ino64_t v12;
  uint64_t v13;
  char *v14;
  __darwin_ino64_t v15;
  turi::fileio::fixed_size_cache_manager *v16;
  uint64_t instance;
  const char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::locale v22[2];
  uint64_t v23;
  stat __p;
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::locale v28;
  _DWORD v29[2];

  *(_DWORD *)((char *)v29 + 3) = 0;
  v29[0] = 0;
  turi::fileio::get_cache_prefix(&__p);
  MEMORY[0x219A19828](&v28);
  std::locale::locale(v22, &v28);
  v4 = *(char *)(a1 + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  v7 = *(unsigned __int8 *)(a1 + 23);
  if (v5)
    v7 = *(_QWORD *)(a1 + 8);
  if ((__p.st_gid & 0x80000000) == 0)
    p_p = &__p;
  else
    p_p = *(stat **)&__p.st_dev;
  if ((__p.st_gid & 0x80000000) == 0)
    st_gid_high = HIBYTE(__p.st_gid);
  else
    st_gid_high = __p.st_ino;
  if (v7)
    v10 = st_gid_high == 0;
  else
    v10 = 1;
  if (v10)
  {
    v14 = (char *)p_p;
LABEL_18:
    v11 = v14 == (char *)p_p + st_gid_high;
  }
  else
  {
    v12 = st_gid_high - 1;
    v13 = v7 - 1;
    v14 = (char *)p_p;
    while (boost::algorithm::is_iequal::operator()<char,char>(v22, v6, v14))
    {
      ++v14;
      if (v13)
      {
        ++v6;
        v15 = v12--;
        --v13;
        if (v15)
          continue;
      }
      goto LABEL_18;
    }
    v11 = 0;
  }
  std::locale::~locale(v22);
  std::locale::~locale(&v28);
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    if (v11)
      goto LABEL_26;
LABEL_29:
    if (*(char *)(a1 + 23) >= 0)
      v18 = (const char *)a1;
    else
      v18 = *(const char **)a1;
    if (stat(v18, &__p))
    {
      std::operator+<char>();
      *(_DWORD *)a2 = 0;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)&v22[0].__locale_;
      *(_QWORD *)(a2 + 24) = v23;
    }
    else
    {
      if ((__p.st_mode & 0xF000) == 0x4000)
        *(_DWORD *)a2 = 2;
      else
        *(_DWORD *)a2 = 1;
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a2 + 8), "");
    }
    return;
  }
  if (!v11)
    goto LABEL_29;
LABEL_26:
  instance = turi::fileio::fixed_size_cache_manager::get_instance(v16);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v25 = *(std::string *)a1;
  turi::fileio::fixed_size_cache_manager::get_cache(instance, (std::string::size_type)&v25, &v26);
  v19 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = v29[0];
  *(_DWORD *)(a2 + 27) = *(_DWORD *)((char *)v29 + 3);
  *(_BYTE *)(a2 + 31) = 0;
}

void sub_217FFC8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15)
{
  _Unwind_Resume(exception_object);
}

void turi::fileio::get_directory_listing(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  std::string *p_p;
  std::string::size_type size;
  BOOL v10;
  BOOL v11;
  std::string::size_type v12;
  uint64_t v13;
  char *v14;
  std::string::size_type v15;
  const std::string *v16;
  const std::string *v17;
  const std::string *v18;
  std::string::size_type v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  std::string::size_type v42;
  uint64_t v43;
  uint64_t v44;
  std::string v45;
  const std::string *v46;
  unsigned int *v47;
  const std::string *v48;
  unsigned int *v49;
  std::string v50;
  std::string __p;
  char *v52;
  uint64_t *v53;
  _QWORD v54[5];

  v54[2] = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  turi::fileio::get_cache_prefix(&__p);
  MEMORY[0x219A19828](&v50);
  std::locale::locale((std::locale *)&v45, (const std::locale *)&v50);
  v4 = *(char *)(a1 + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  v7 = *(unsigned __int8 *)(a1 + 23);
  if (v5)
    v7 = *(_QWORD *)(a1 + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (v7)
    v10 = size == 0;
  else
    v10 = 1;
  if (v10)
  {
    v14 = (char *)p_p;
LABEL_18:
    v11 = v14 == (char *)p_p + size;
  }
  else
  {
    v12 = size - 1;
    v13 = v7 - 1;
    v14 = (char *)p_p;
    while (boost::algorithm::is_iequal::operator()<char,char>((const std::locale *)&v45, v6, v14))
    {
      ++v14;
      if (v13)
      {
        ++v6;
        v15 = v12--;
        --v13;
        if (v15)
          continue;
      }
      goto LABEL_18;
    }
    v11 = 0;
  }
  std::locale::~locale((std::locale *)&v45);
  std::locale::~locale((std::locale *)&v50);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v11)
      return;
  }
  else if (v11)
  {
    return;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      goto LABEL_32;
    }
  }
  else
  {
    v50 = *(std::string *)a1;
  }
  __p = *(std::string *)a1;
LABEL_32:
  boost::filesystem::directory_iterator::directory_iterator((boost::filesystem::directory_iterator *)&v48, (const boost::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v46 = 0;
  v47 = 0;
  v16 = v48;
  if (v48)
  {
    v17 = 0;
    do
    {
      if (v16)
      {
        v18 = v16;
        if (v17)
          goto LABEL_41;
      }
      else
      {
        v18 = v17;
        if (!v17)
          goto LABEL_41;
      }
      if (!v18[1].__r_.__value_.__r.__words[2])
        break;
LABEL_41:
      boost::filesystem::detail::status(v16, 0, &__p);
      if (LODWORD(__p.__r_.__value_.__l.__data_) == 3)
      {
        turi::fileio::convert_to_generic((uint64_t)v48, &v45);
        v54[0] = v45.__r_.__value_.__l.__size_;
        v19 = v45.__r_.__value_.__r.__words[0];
        *(_QWORD *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&v45.__r_.__value_.__r.__words[1] + 7);
        v20 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        memset(&v45, 0, sizeof(v45));
        v21 = a2[1];
        v22 = a2[2];
        if (v21 >= v22)
        {
          v29 = (uint64_t)(v21 - *a2) >> 5;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 59)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v31 = v22 - *a2;
          if (v31 >> 4 > v30)
            v30 = v31 >> 4;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFE0)
            v32 = 0x7FFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          v53 = a2 + 2;
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a2 + 2), v32);
          v34 = (std::string::size_type)&v33[32 * v29];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
          __p.__r_.__value_.__l.__size_ = v34;
          v52 = &v33[32 * v35];
          v36 = v54[0];
          *(_QWORD *)v34 = v19;
          *(_QWORD *)(v34 + 8) = v36;
          *(_QWORD *)(v34 + 15) = *(_QWORD *)((char *)v54 + 7);
          *(_BYTE *)(v34 + 23) = v20;
          *(_DWORD *)(v34 + 24) = 2;
          __p.__r_.__value_.__r.__words[2] = v34 + 32;
          std::vector<std::pair<std::string,turi::fileio::file_status>>::__swap_out_circular_buffer(a2, &__p);
LABEL_61:
          v28 = a2[1];
          std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)&__p);
          goto LABEL_62;
        }
        v23 = v54[0];
        *(_QWORD *)v21 = v19;
        *(_QWORD *)(v21 + 8) = v23;
        *(_QWORD *)(v21 + 15) = *(_QWORD *)((char *)v54 + 7);
        *(_BYTE *)(v21 + 23) = v20;
        *(_DWORD *)(v21 + 24) = 2;
      }
      else
      {
        turi::fileio::convert_to_generic((uint64_t)v48, &v45);
        v54[0] = v45.__r_.__value_.__l.__size_;
        v24 = v45.__r_.__value_.__r.__words[0];
        *(_QWORD *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&v45.__r_.__value_.__r.__words[1] + 7);
        v25 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        memset(&v45, 0, sizeof(v45));
        v21 = a2[1];
        v26 = a2[2];
        if (v21 >= v26)
        {
          v37 = (uint64_t)(v21 - *a2) >> 5;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 59)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v39 = v26 - *a2;
          if (v39 >> 4 > v38)
            v38 = v39 >> 4;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0)
            v40 = 0x7FFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          v53 = a2 + 2;
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a2 + 2), v40);
          v42 = (std::string::size_type)&v41[32 * v37];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          __p.__r_.__value_.__l.__size_ = v42;
          v52 = &v41[32 * v43];
          v44 = v54[0];
          *(_QWORD *)v42 = v24;
          *(_QWORD *)(v42 + 8) = v44;
          *(_QWORD *)(v42 + 15) = *(_QWORD *)((char *)v54 + 7);
          *(_BYTE *)(v42 + 23) = v25;
          *(_DWORD *)(v42 + 24) = 1;
          __p.__r_.__value_.__r.__words[2] = v42 + 32;
          std::vector<std::pair<std::string,turi::fileio::file_status>>::__swap_out_circular_buffer(a2, &__p);
          goto LABEL_61;
        }
        v27 = v54[0];
        *(_QWORD *)v21 = v24;
        *(_QWORD *)(v21 + 8) = v27;
        *(_QWORD *)(v21 + 15) = *(_QWORD *)((char *)v54 + 7);
        *(_BYTE *)(v21 + 23) = v25;
        *(_DWORD *)(v21 + 24) = 1;
      }
      v28 = v21 + 32;
      a2[1] = v21 + 32;
LABEL_62:
      a2[1] = v28;
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      boost::filesystem::detail::directory_iterator_increment((boost::system::detail *)&v48, 0);
      v17 = v46;
      v16 = v48;
    }
    while (v48 != v46);
  }
  boost::detail::shared_count::~shared_count(&v47);
  boost::detail::shared_count::~shared_count(&v49);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
}

void sub_217FFCDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (!a2)
    _Unwind_Resume(a1);
  if (a25 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FFCD80);
}

void turi::fileio::convert_to_generic(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = __p;
  }
}

void sub_217FFCF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::fileio::create_directory(uint64_t a1)
{
  uint64_t v2;
  const std::string::value_type *v3;
  uint64_t v4;
  std::string::size_type size;
  std::string *p_p;
  BOOL v7;
  BOOL v8;
  std::string::size_type v9;
  uint64_t v10;
  std::string *v11;
  std::string::size_type v12;
  std::string __p;
  int v15;
  void *v16;
  char v17;

  turi::fileio::get_file_status(a1, (uint64_t)&v15);
  if (v15)
  {
    v2 = 0;
    goto LABEL_32;
  }
  turi::fileio::get_cache_prefix(&__p);
  v3 = *(const std::string::value_type **)a1;
  if (*(char *)(a1 + 23) < 0)
  {
    v4 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v3 = (const std::string::value_type *)a1;
    v4 = *(unsigned __int8 *)(a1 + 23);
  }
  size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v4)
    v7 = size == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v9 = size - 1;
    v10 = v4 - 1;
    v11 = p_p;
    while (*(unsigned __int8 *)v3 == v11->__r_.__value_.__s.__data_[0])
    {
      v11 = (std::string *)((char *)v11 + 1);
      if (v10)
      {
        ++v3;
        v12 = v9--;
        --v10;
        if (v12)
          continue;
      }
      goto LABEL_17;
    }
    v8 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_25;
LABEL_18:
    if (!v8)
      goto LABEL_26;
    goto LABEL_31;
  }
  v11 = p_p;
LABEL_17:
  v8 = v11 == (std::string *)((char *)p_p + size);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_18;
LABEL_25:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8)
  {
LABEL_26:
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    boost::filesystem::detail::create_directories(&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_31:
  v2 = 1;
LABEL_32:
  if (v17 < 0)
    operator delete(v16);
  return v2;
}

void sub_217FFD0D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FFCFB4);
}

void sub_217FFD104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::fileio::create_directory_or_throw(uint64_t a1)
{
  uint64_t directory;
  _BOOL4 v3;
  int *v5;
  char *v6;
  uint64_t v7[3];
  unsigned __int16 *v8;
  void *__p;
  char v10;
  char v11;
  std::string __s;

  directory = turi::fileio::create_directory(a1);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __s = *(std::string *)a1;
  turi::fileio::get_protocol(&__s, (std::string::size_type)&v8);
  if (v10 < 0)
  {
    v3 = __p == (void *)2 && *v8 == 13171;
    operator delete(v8);
  }
  else
  {
    v3 = v10 == 2 && (unsigned __int16)v8 == 13171;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if (!v3)
      return directory;
  }
  else if (!v3)
  {
    return directory;
  }
  turi::fileio::get_file_status(a1, (uint64_t)&v8);
  if ((_DWORD)v8 != 2)
  {
    if ((_DWORD)v8)
    {
      if ((_DWORD)v8 == 1)
      {
        v7[0] = a1;
        turi::fileio::create_directory_or_throw(std::string const&)::$_1::operator()(v7);
      }
      v5 = __error();
      v6 = strerror(*v5);
      std::string::basic_string[abi:ne180100]<0>(v7, v6);
      *__error() = 0;
      turi::fileio::create_directory_or_throw(std::string const&)::$_2::operator()();
    }
    v7[0] = a1;
    v7[1] = (uint64_t)&v8;
    turi::fileio::create_directory_or_throw(std::string const&)::$_0::operator()();
  }
  if (v11 < 0)
    operator delete(__p);
  return directory;
}

void sub_217FFD28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t turi::fileio::delete_path(uint64_t a1, int a2)
{
  int locale;
  pthread_mutex_t *instance;
  _BOOL4 v6;
  BOOL v7;
  int *v8;
  file_logger *v9;
  file_logger *started;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *exception;
  std::string v18;
  __n128 __p;
  char v20;
  std::string v21;
  std::locale v22;
  void *v23;
  char v24;

  locale = a2;
  if (a2 != 3
    || (turi::fileio::get_file_status(a1, (uint64_t)&v22), locale = (int)v22.__locale_, (v24 & 0x80000000) == 0))
  {
    if (locale)
      goto LABEL_4;
    return 0;
  }
  operator delete(v23);
  if (!locale)
    return 0;
LABEL_4:
  if (locale != 1)
    return turi::fileio::delete_path_impl(a1, locale);
  instance = turi::fileio::file_handle_pool::get_instance((turi::fileio::file_handle_pool *)a1);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v21 = *(std::string *)a1;
  v6 = turi::fileio::file_handle_pool::mark_file_for_delete(instance, (uint64_t)&v21);
  v7 = v6;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if (v7)
      goto LABEL_12;
    return turi::fileio::delete_path_impl(a1, locale);
  }
  if (!v6)
    return turi::fileio::delete_path_impl(a1, locale);
LABEL_12:
  v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fs_utils.cpp", "delete_path", 332, 1);
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Attempting to delete ", 21);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v18 = *(std::string *)a1;
    turi::sanitize_url((__n128 *)&v18, &__p);
    v12 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    v13 = pthread_getspecific(*(_QWORD *)(v12 + 592));
    if (v13 && *((_BYTE *)v13 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)" but it is still in use. It will be deleted", 43);
    v14 = pthread_getspecific(*(_QWORD *)(v12 + 592));
    if (v14 && *((_BYTE *)v14 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)" when all references to the file are closed", 43);
    v15 = pthread_getspecific(*(_QWORD *)(v12 + 592));
    if (v15)
    {
      if (*((_BYTE *)v15 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(v15[2] - 24) + 16));
        v16 = std::locale::use_facet(&v22, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v22);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v12);
        if (*(_DWORD *)(v12 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v20 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_217FFD590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::locale::~locale((std::locale *)(v26 - 64));
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

uint64_t turi::fileio::delete_path_impl(uint64_t a1, int a2)
{
  int data;
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  int v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v18;
  uint64_t v19;
  char *v20;
  std::string::size_type v21;
  _BOOL4 v22;
  turi::fileio::fixed_size_cache_manager *v23;
  uint64_t instance;
  turi::fileio::fixed_size_cache_manager *cache;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *exception;
  __int128 v36;
  std::string v37;
  std::locale v38;
  std::string v39;
  __n128 v40;
  char v41;
  std::string __p;
  char v43;
  std::locale v44;

  data = a2;
  if (a2 != 3
    || (turi::fileio::get_file_status(a1, (uint64_t)&__p),
        data = (int)__p.__r_.__value_.__l.__data_,
        (v43 & 0x80000000) == 0))
  {
    if (data)
      goto LABEL_4;
    return 0;
  }
  operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (!data)
    return 0;
LABEL_4:
  v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/fs_utils.cpp", "delete_path_impl", 347, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Deleting ", 9);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v39 = *(std::string *)a1;
    turi::sanitize_url((__n128 *)&v39, &v40);
    v9 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v40);
    v10 = pthread_getspecific(*(_QWORD *)(v9 + 592));
    if (v10)
    {
      if (*((_BYTE *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(v10[2] - 24) + 16));
        v11 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v9);
        if (*(_DWORD *)(v9 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
    if (v41 < 0)
      operator delete((void *)v40.n128_u64[0]);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  turi::fileio::get_cache_prefix(&__p);
  MEMORY[0x219A19828](&v38);
  std::locale::locale(&v44, &v38);
  v12 = *(char *)(a1 + 23);
  v13 = v12 < 0;
  if (v12 >= 0)
    v14 = (char *)a1;
  else
    v14 = *(char **)a1;
  v15 = *(unsigned __int8 *)(a1 + 23);
  if (v13)
    v15 = *(_QWORD *)(a1 + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (v15 && size)
  {
    v18 = size - 1;
    v19 = v15 - 1;
    v20 = (char *)p_p;
    while (boost::algorithm::is_iequal::operator()<char,char>(&v44, v14, v20))
    {
      ++v20;
      if (v19)
      {
        ++v14;
        v21 = v18--;
        --v19;
        if (v21)
          continue;
      }
      goto LABEL_40;
    }
    v22 = 0;
  }
  else
  {
    v20 = (char *)p_p;
LABEL_40:
    v22 = v20 == (char *)p_p + size;
  }
  std::locale::~locale(&v44);
  std::locale::~locale(&v38);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v22)
      goto LABEL_44;
LABEL_47:
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    boost::filesystem::detail::remove((boost::system::detail *)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 1;
  }
  if (!v22)
    goto LABEL_47;
LABEL_44:
  instance = turi::fileio::fixed_size_cache_manager::get_instance(v23);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v37 = *(std::string *)a1;
  cache = (turi::fileio::fixed_size_cache_manager *)turi::fileio::fixed_size_cache_manager::get_cache(instance, (std::string::size_type)&v37, &__p);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v26 = turi::fileio::fixed_size_cache_manager::get_instance(cache);
  v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  turi::fileio::fixed_size_cache_manager::free(v26, (__int128 **)&v36);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v33 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return 1;
}

void sub_217FFD9F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,std::locale a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FFD6C4);
}

void sub_217FFDA94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::locale::~locale((std::locale *)(v26 - 72));
  std::locale::~locale(&a14);
  if (a26 < 0)
    JUMPOUT(0x217FFDAB4);
  JUMPOUT(0x217FFDAB8);
}

uint64_t turi::fileio::delete_path_recursive(uint64_t a1)
{
  int v2;
  BOOL v3;
  char *v4;
  uint64_t v5;
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v8;
  uint64_t v9;
  char *v10;
  std::string::size_type v11;
  BOOL v12;
  std::locale v14;
  std::string __p;
  int v16;
  void *v17;
  char v18;
  std::locale v19;

  turi::fileio::get_file_status(a1, (uint64_t)&v16);
  if (v16)
  {
    if (v16 == 1)
    {
      turi::fileio::delete_path(a1, 3);
      goto LABEL_34;
    }
    turi::fileio::get_cache_prefix(&__p);
    MEMORY[0x219A19828](&v14);
    std::locale::locale(&v19, &v14);
    v2 = *(char *)(a1 + 23);
    v3 = v2 < 0;
    if (v2 >= 0)
      v4 = (char *)a1;
    else
      v4 = *(char **)a1;
    v5 = *(unsigned __int8 *)(a1 + 23);
    if (v3)
      v5 = *(_QWORD *)(a1 + 8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (v5 && size)
    {
      v8 = size - 1;
      v9 = v5 - 1;
      v10 = (char *)p_p;
      while (boost::algorithm::is_iequal::operator()<char,char>(&v19, v4, v10))
      {
        ++v10;
        if (v9)
        {
          ++v4;
          v11 = v8--;
          --v9;
          if (v11)
            continue;
        }
        goto LABEL_23;
      }
      v12 = 0;
    }
    else
    {
      v10 = (char *)p_p;
LABEL_23:
      v12 = v10 == (char *)p_p + size;
    }
    std::locale::~locale(&v19);
    std::locale::~locale(&v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v12)
        goto LABEL_34;
    }
    else if (v12)
    {
      goto LABEL_34;
    }
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    boost::filesystem::detail::remove_all((boost::system::detail *)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_34:
  if (v18 < 0)
    operator delete(v17);
  return 1;
}

void sub_217FFDC5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FFDC2CLL);
}

void sub_217FFDC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::locale a24)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL turi::fileio::is_writable_protocol(uint64_t *a1)
{
  int v1;
  uint64_t v2;

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v1 = *((unsigned __int8 *)a1 + 23);
    if (*((_BYTE *)a1 + 23))
    {
      if (v1 != 4)
      {
        if (v1 != 5)
          return 0;
        return *(_DWORD *)a1 == 1751343459 && *((_BYTE *)a1 + 4) == 101;
      }
      if (*(_DWORD *)a1 != 1701603686)
        return 0;
    }
    return 1;
  }
  v2 = a1[1];
  if (!v2 || v2 == 4 && *(_DWORD *)*a1 == 1701603686)
    return 1;
  if (v2 != 5)
    return 0;
  a1 = (uint64_t *)*a1;
  return *(_DWORD *)a1 == 1751343459 && *((_BYTE *)a1 + 4) == 101;
}

BOOL turi::fileio::is_web_protocol(uint64_t a1)
{
  _BOOL4 is_writable_protocol;
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  is_writable_protocol = turi::fileio::is_writable_protocol((uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return !is_writable_protocol;
}

__n128 turi::fileio::remove_protocol@<Q0>(const std::string *__s@<X0>, std::string *a2@<X8>)
{
  uint64_t size;
  const std::string *v5;
  char *v6;
  std::string *v7;
  char *v8;
  __n128 result;
  char v11;

  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (const std::string *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    v5 = __s;
  }
  if (size >= 3)
  {
    v6 = (char *)v5 + size;
    v7 = (std::string *)v5;
    do
    {
      v8 = (char *)memchr(v7, 58, size - 2);
      if (!v8)
        break;
      if (*(_WORD *)v8 == 12090 && v8[2] == 47)
      {
        if (v8 != v6 && v8 - (char *)v5 != -1)
        {
          std::string::basic_string(a2, __s, v8 - (char *)v5 + 3, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v11);
          return result;
        }
        break;
      }
      v7 = (std::string *)(v8 + 1);
      size = v6 - (char *)v7;
    }
    while (v6 - (char *)v7 >= 3);
  }
  result = *(__n128 *)&__s->__r_.__value_.__l.__data_;
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = __s->__r_.__value_.__r.__words[2];
  __s->__r_.__value_.__l.__size_ = 0;
  __s->__r_.__value_.__r.__words[2] = 0;
  __s->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void turi::fileio::get_filename(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string v3;
  std::string __p;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v3 = *(std::string *)a1;
  boost::filesystem::path::filename((boost::filesystem::path *)&v3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = __p;
  }
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_217FFDF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void turi::fileio::get_dirname(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string::size_type v4;
  const std::string::value_type *v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *p_p;
  std::string::size_type size;
  std::string::size_type v10;
  uint64_t v11;
  std::string v12;
  std::string __p;
  std::string __s;
  std::string v15;
  std::string v16;
  void *v17[2];
  unsigned __int8 v18;

  v3 = a2;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v16 = *(std::string *)a1;
  turi::fileio::get_protocol(&v16, (std::string::size_type)v17);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __s = *(std::string *)a1;
  turi::fileio::remove_protocol(&__s, &v15);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if ((v18 & 0x80u) == 0)
    v4 = v18;
  else
    v4 = (std::string::size_type)v17[1];
  if (v4)
  {
    v5 = (v18 & 0x80u) == 0 ? (const std::string::value_type *)v17 : (const std::string::value_type *)v17[0];
    std::string::append(v3, v5, v4);
    std::string::basic_string[abi:ne180100]<0>(&__p, "://");
    v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(__p.__r_.__value_.__r.__words[2])
       : __p.__r_.__value_.__l.__size_;
    std::string::append(v3, (const std::string::value_type *)v6, v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    v12 = v15;
  boost::filesystem::path::parent_path((boost::filesystem::path *)&v12, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(v3, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = v3->__r_.__value_.__l.__size_;
    if (!v10)
      goto LABEL_48;
  }
  else
  {
    v10 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&v3->__r_.__value_.__s + 23))
      goto LABEL_48;
  }
  if (*std::string::at(v3, v10 - 1) == 47)
  {
    if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = v3->__r_.__value_.__l.__size_ - 1;
      v3->__r_.__value_.__l.__size_ = v11;
      v3 = (std::string *)v3->__r_.__value_.__r.__words[0];
    }
    else
    {
      v11 = HIBYTE(v3->__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&v3->__r_.__value_.__s + 23) = v11 & 0x7F;
    }
    v3->__r_.__value_.__s.__data_[v11] = 0;
  }
LABEL_48:
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(v17[0]);
}

void sub_217FFE1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 17) < 0)
    operator delete(*(void **)(v33 - 40));
  if (*(char *)(v32 + 23) < 0)
    operator delete(*(void **)v32);
  _Unwind_Resume(exception_object);
}

void turi::fileio::make_relative_path(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::__split_buffer<std::string>::pointer end_high;
  std::__split_buffer<std::string>::pointer v7;
  int v8;
  __int128 *p_p;
  uint64_t v10;
  std::__split_buffer<std::string> *p_v;
  int v12;
  int first_low;
  int v14;
  _BOOL4 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  void **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const std::vector<std::string>::value_type *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  std::vector<std::string>::const_iterator v38;
  unint64_t v39;
  std::vector<std::string>::pointer end;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::string *v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  const std::vector<std::string>::value_type *i;
  void *v50[2];
  std::string::size_type v51;
  std::vector<std::string> v52;
  __int128 v53;
  uint64_t v54;
  std::string v55;
  std::string __s;
  std::string v57;
  __int128 __p;
  uint64_t v59;
  std::string v60;
  std::string v61;
  std::__split_buffer<std::string> __v;
  _QWORD __src[3];
  _QWORD __dst[6];

  __dst[3] = *MEMORY[0x24BDAC8D0];
  turi::fileio::convert_to_generic(a1, (std::string *)&__v);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)&__v.__first_;
  *(_QWORD *)(a1 + 16) = __v.__end_;
  turi::fileio::convert_to_generic(a2, (std::string *)&__v);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = *(_OWORD *)&__v.__first_;
  *(_QWORD *)(a2 + 16) = __v.__end_;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v61 = *(std::string *)a2;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v60 = *(std::string *)a1;
  turi::fileio::get_protocol(&v60, (std::string::size_type)&__v);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v57 = *(std::string *)a2;
  turi::fileio::get_protocol(&v57, (std::string::size_type)&__p);
  if (SHIBYTE(__v.__end_) >= 0)
    end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
  else
    end_high = __v.__begin_;
  v7 = (std::__split_buffer<std::string>::pointer)HIBYTE(v59);
  v8 = SHIBYTE(v59);
  if (v59 < 0)
    v7 = (std::__split_buffer<std::string>::pointer)*((_QWORD *)&__p + 1);
  if (end_high != v7)
  {
    v15 = 1;
    if ((SHIBYTE(v59) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_40;
  }
  if (v59 >= 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  if ((HIBYTE(__v.__end_) & 0x80) != 0)
  {
    v15 = memcmp(__v.__first_, p_p, (size_t)__v.__begin_) != 0;
    if ((v8 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_40;
  }
  if (!HIBYTE(__v.__end_))
  {
    v15 = 0;
    if ((SHIBYTE(v59) & 0x80000000) == 0)
      goto LABEL_32;
LABEL_40:
    operator delete((void *)__p);
    goto LABEL_32;
  }
  v10 = HIBYTE(__v.__end_) - 1;
  p_v = &__v;
  do
  {
    first_low = LOBYTE(p_v->__first_);
    p_v = (std::__split_buffer<std::string> *)((char *)p_v + 1);
    v12 = first_low;
    v14 = *(unsigned __int8 *)p_p;
    p_p = (__int128 *)((char *)p_p + 1);
    v15 = v12 != v14;
  }
  while (v12 == v14 && v10-- != 0);
  if (SHIBYTE(v59) < 0)
    goto LABEL_40;
LABEL_32:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v60.__r_.__value_.__l.__data_);
    if (v15)
      goto LABEL_38;
  }
  else if (v15)
  {
LABEL_38:
    *a3 = v61;
    return;
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __s = *(std::string *)a1;
  turi::fileio::remove_protocol(&__s, (std::string *)&__v);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)&__v.__first_;
  *(_QWORD *)(a1 + 16) = __v.__end_;
  HIBYTE(__v.__end_) = 0;
  LOBYTE(__v.__first_) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v55 = *(std::string *)a2;
  turi::fileio::remove_protocol(&v55, (std::string *)&__v);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = *(_OWORD *)&__v.__first_;
  *(_QWORD *)(a2 + 16) = __v.__end_;
  HIBYTE(__v.__end_) = 0;
  LOBYTE(__v.__first_) = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_63;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_63;
  }
  MEMORY[0x219A19390](a1, "/");
LABEL_63:
  __p = 0uLL;
  v59 = 0;
  v53 = 0uLL;
  v54 = 0;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)"/";
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)"";
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__dst, (uint64_t)&__v);
  boost::algorithm::split<std::vector<std::string>,std::string,boost::algorithm::detail::is_any_ofF<char>>(&__p, a1, __dst, 1);
  if (__dst[2] >= 0x11uLL && __dst[0])
    MEMORY[0x219A199F0](__dst[0], 0x1000C8077774924);
  v17 = 0;
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v18 = a1;
    v19 = *(unsigned __int8 *)(a1 + 23);
  }
  v20 = v19 + v18 - 1;
  v21 = -v19;
  while (v21 != v17 && v17 != -1)
  {
    v22 = *(unsigned __int8 *)(v20 + v17);
    v23 = asc_2187C4E2A[v17--];
    if (v22 != v23)
      goto LABEL_78;
  }
  if (v17 == -1 && *((_QWORD *)&__p + 1) != (_QWORD)__p)
  {
    v24 = (void **)(*((_QWORD *)&__p + 1) - 24);
    if (*(char *)(*((_QWORD *)&__p + 1) - 1) < 0)
      operator delete(*v24);
    *((_QWORD *)&__p + 1) = v24;
  }
LABEL_78:
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_85;
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    goto LABEL_85;
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)"/";
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)"";
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<char const*>>(__src, (uint64_t)&__v);
  boost::algorithm::split<std::vector<std::string>,std::string,boost::algorithm::detail::is_any_ofF<char>>(&v53, a2, __src, 1);
  if (__src[2] >= 0x11uLL && __src[0])
    MEMORY[0x219A199F0](__src[0], 0x1000C8077774924);
LABEL_85:
  v25 = __p;
  v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
  v28 = (const std::vector<std::string>::value_type *)*((_QWORD *)&v53 + 1);
  v27 = v53;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 3) >= v26)
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
  else
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v53 + 1) - v53) >> 3);
  if (!v29)
    goto LABEL_128;
  v30 = 0;
  while (1)
  {
    v31 = (unsigned __int8 *)(v27 + 24 * v30);
    v32 = (unsigned __int8 **)(v25 + 24 * v30);
    v33 = v31[23];
    if ((v33 & 0x80u) == 0)
      v34 = (unsigned __int8 *)v31[23];
    else
      v34 = (unsigned __int8 *)*((_QWORD *)v31 + 1);
    v35 = (unsigned __int8 *)*((unsigned __int8 *)v32 + 23);
    v36 = (char)v35;
    if ((char)v35 < 0)
      v35 = v32[1];
    if (v34 != v35)
      break;
    if (v36 >= 0)
      v37 = (unsigned __int8 *)(v25 + 24 * v30);
    else
      v37 = *v32;
    if ((v33 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v31, v37, *((_QWORD *)v31 + 1)))
        break;
    }
    else if (v31[23])
    {
      while (*v31 == *v37)
      {
        ++v31;
        ++v37;
        if (!--v33)
          goto LABEL_105;
      }
      break;
    }
LABEL_105:
    if (++v30 == v29)
    {
      v30 = v29;
      break;
    }
  }
  if (v30)
  {
    v38.__i_ = 0;
    memset(&v52, 0, sizeof(v52));
    if (v30 < v26)
    {
      v39 = v30;
      do
      {
        std::string::basic_string[abi:ne180100]<0>(v50, "..");
        end = v52.__end_;
        if (v52.__end_ >= v52.__end_cap_.__value_)
        {
          v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v52.__end_ - (char *)v52.__begin_) >> 3);
          v43 = v42 + 1;
          if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v52.__end_cap_.__value_ - (char *)v52.__begin_) >> 3) > v43)
            v43 = 0x5555555555555556 * (((char *)v52.__end_cap_.__value_ - (char *)v52.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v52.__end_cap_.__value_ - (char *)v52.__begin_) >> 3) >= 0x555555555555555)
            v44 = 0xAAAAAAAAAAAAAAALL;
          else
            v44 = v43;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v52.__end_cap_;
          if (v44)
            v45 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v52.__end_cap_, v44);
          else
            v45 = 0;
          v46 = v45 + v42;
          __v.__first_ = v45;
          __v.__begin_ = v46;
          __v.__end_cap_.__value_ = &v45[v44];
          v47 = *(_OWORD *)v50;
          v46->__r_.__value_.__r.__words[2] = v51;
          *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
          v50[1] = 0;
          v51 = 0;
          v50[0] = 0;
          __v.__end_ = v46 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v52, &__v);
          v48 = v52.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v52.__end_ = v48;
          if (SHIBYTE(v51) < 0)
            operator delete(v50[0]);
        }
        else
        {
          v41 = *(_OWORD *)v50;
          v52.__end_->__r_.__value_.__r.__words[2] = v51;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v41;
          v52.__end_ = end + 1;
        }
        ++v39;
      }
      while (v39 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3));
      v28 = (const std::vector<std::string>::value_type *)*((_QWORD *)&v53 + 1);
      v27 = v53;
      v38.__i_ = v52.__end_;
    }
    for (i = (const std::vector<std::string>::value_type *)(v27 + 24 * v30); i != v28; ++i)
      v38.__i_ = std::vector<std::string>::insert(&v52, v38, i).__i_ + 1;
    boost::algorithm::join<std::vector<std::string>,char [2]>("/", (uint64_t *)&v52, (uint64_t)a3);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  else
  {
LABEL_128:
    *a3 = v61;
    memset(&v61, 0, sizeof(v61));
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
}

void sub_217FFE9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *boost::algorithm::join<std::vector<std::string>,char [2]>@<X0>(char *__s@<X1>, uint64_t *result@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  std::string::size_type v19;

  v5 = *result;
  v6 = result[1];
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v5 == v6)
    goto LABEL_10;
  v7 = *(char *)(v5 + 23);
  if (v7 >= 0)
    v8 = (char *)v5;
  else
    v8 = *(char **)v5;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  for (result = (uint64_t *)std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a3, a3, v8, &v8[v9], v9);
        ;
        result = (uint64_t *)std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a3, v16, v18, &v18[v19], v19))
  {
    v5 += 24;
LABEL_10:
    if (v5 == v6)
      break;
    v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = a3;
    else
      v11 = *(_QWORD *)a3;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a3 + 8);
    v12 = v11 + v10;
    v13 = strlen(__s);
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a3, v12, __s, &__s[v13], v13);
    v14 = *(unsigned __int8 *)(a3 + 23);
    if ((v14 & 0x80u) == 0)
      v15 = a3;
    else
      v15 = *(_QWORD *)a3;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a3 + 8);
    v16 = v15 + v14;
    v17 = *(char *)(v5 + 23);
    if (v17 >= 0)
      v18 = (char *)v5;
    else
      v18 = *(char **)v5;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v5 + 23);
    else
      v19 = *(_QWORD *)(v5 + 8);
  }
  return result;
}

void sub_217FFEC40(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void turi::fileio::make_absolute_path(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  size_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  size_t v19;
  std::string *v20;
  const void *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  _BYTE *v30;
  std::string v31;
  char v32;

  turi::fileio::convert_to_generic(a1, &v31);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v31;
  turi::fileio::convert_to_generic(a2, &v31);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v6 = 0;
  *(std::string *)a2 = v31;
  v7 = *(char *)(a1 + 23);
  v8 = *(_QWORD *)(a1 + 8);
  if (v7 >= 0)
    v9 = (char *)a1;
  else
    v9 = *(char **)a1;
  v10 = *(unsigned __int8 *)(a1 + 23);
  if (v7 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  while (-v11 != v6 && v6 != -3)
  {
    v12 = v9[v11 - 1 + v6];
    v13 = asc_2187CDC6E[v6-- + 2];
    if (v12 != v13)
      goto LABEL_16;
  }
  if (v6 == -3)
    goto LABEL_25;
LABEL_16:
  v14 = 0;
  v15 = (uint64_t)&v9[v11 - 1];
  while (-v11 != v14 && v14 != -1)
  {
    v16 = *(unsigned __int8 *)(v15 + v14);
    v17 = asc_2187C4E2A[v14--];
    if (v16 != v17)
      goto LABEL_25;
  }
  if (v14 == -1)
  {
    std::string::basic_string(&v31, (const std::string *)a1, 0, v11 - 1, (std::allocator<char> *)&v32);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
    v18 = v31.__r_.__value_.__r.__words[2];
    *(_QWORD *)(a1 + 16) = *((_QWORD *)&v31.__r_.__value_.__l + 2);
    v10 = HIBYTE(v18);
    v8 = *(_QWORD *)(a1 + 8);
    LOBYTE(v7) = v10;
  }
LABEL_25:
  if ((v7 & 0x80u) == 0)
    v19 = v10;
  else
    v19 = v8;
  v20 = &v31;
  std::string::basic_string[abi:ne180100]((uint64_t)&v31, v19 + 1);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)v31.__r_.__value_.__r.__words[0];
  if (v19)
  {
    if (*(char *)(a1 + 23) >= 0)
      v21 = (const void *)a1;
    else
      v21 = *(const void **)a1;
    memmove(v20, v21, v19);
  }
  *(_WORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 47;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v31;
  v22 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
LABEL_58:
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      return;
    }
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    goto LABEL_58;
  }
  v23 = *(_BYTE **)a2;
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(a2 + 8);
  else
    v23 = (_BYTE *)a2;
  if (v22)
  {
    v24 = v22 - 1;
    v25 = v23;
    while (1)
    {
      v26 = 0;
      while (v25[v26] == asc_2187CDC6E[v26])
      {
        v27 = v26 + 1;
        if (v24 != v26 && v26++ != 2)
          continue;
        v29 = &asc_2187CDC6E[v27];
        v30 = &v25[v27];
        goto LABEL_53;
      }
      v29 = &asc_2187CDC6E[v26];
      v30 = &v25[v26];
LABEL_53:
      if (v29 == "")
        break;
      ++v25;
      --v24;
      if (v25 == &v23[v22])
        goto LABEL_57;
    }
    if (v25 != v30)
      goto LABEL_58;
LABEL_57:
    if (*v23 == 47)
      goto LABEL_58;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, (const void **)a2, a3);
}

void turi::fileio::glob_to_regex(uint64_t a1@<X0>, std::regex_traits<char> *a2@<X8>)
{
  char v3;
  std::string::size_type v4;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string *v9;
  int v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  int v14;
  std::string *v15;
  std::string *v16;
  int v17;
  std::string __p;
  const char *v19;
  char *v20;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  size = __p.__r_.__value_.__l.__size_;
  v4 = __p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v8 = __p.__r_.__value_.__l.__size_;
  if (v8)
  {
    v9 = p_p;
    while (1)
    {
      v10 = v9->__r_.__value_.__s.__data_[0];
      v9 = (std::string *)((char *)v9 + 1);
      if (v10 == 47)
        break;
      p_p = (std::string *)((char *)p_p + 1);
      if (!--v8)
        goto LABEL_16;
    }
    v19 = "/";
    v20 = "";
    boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&__p, (uint64_t *)&v19, "\\/", "", p_p, &p_p->__r_.__value_.__s.__data_[1], "\\/", "");
    v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    v4 = __p.__r_.__value_.__r.__words[0];
    v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
LABEL_16:
  if (v3 >= 0)
    v11 = &__p;
  else
    v11 = (std::string *)v4;
  if (v3 >= 0)
    v12 = v7;
  else
    v12 = size;
  if (v12)
  {
    v13 = v11;
    while (1)
    {
      v14 = v13->__r_.__value_.__s.__data_[0];
      v13 = (std::string *)((char *)v13 + 1);
      if (v14 == 63)
        break;
      v11 = (std::string *)((char *)v11 + 1);
      if (!--v12)
        goto LABEL_28;
    }
    v19 = "?";
    v20 = "";
    boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&__p, (uint64_t *)&v19, ".", "", v11, &v11->__r_.__value_.__s.__data_[1], ".", "");
    v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    v4 = __p.__r_.__value_.__r.__words[0];
    v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
LABEL_28:
  if (v3 >= 0)
    v15 = &__p;
  else
    v15 = (std::string *)v4;
  if (v3 < 0)
    v7 = size;
  if (v7)
  {
    v16 = v15;
    while (1)
    {
      v17 = v16->__r_.__value_.__s.__data_[0];
      v16 = (std::string *)((char *)v16 + 1);
      if (v17 == 42)
        break;
      v15 = (std::string *)((char *)v15 + 1);
      if (!--v7)
        goto LABEL_39;
    }
    v19 = "*";
    v20 = "";
    boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&__p, (uint64_t *)&v19, ".*", "", v15, &v15->__r_.__value_.__s.__data_[1], ".*", "");
  }
LABEL_39:
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FFF150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::fileio::split_path_elements(uint64_t a1@<X0>, _DWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  void *v5;
  std::string v6;
  std::string __p;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;

  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  if (*a2 == 2)
  {
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v10 = *(std::string *)a1;
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)"";
    std::pair<std::string,std::string>::operator=[abi:ne180100]<std::string,char const*,(void *)0>((uint64_t)a3, (__int128 *)&v10);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      v5 = (void *)v10.__r_.__value_.__r.__words[0];
LABEL_25:
      operator delete(v5);
    }
  }
  else
  {
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v8 = *(std::string *)a1;
    turi::fileio::get_dirname((uint64_t)&v8, &v9);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v6 = *(std::string *)a1;
    turi::fileio::get_filename((uint64_t)&v6, &__p);
    v10 = v9;
    memset(&v9, 0, sizeof(v9));
    v11 = __p;
    memset(&__p, 0, sizeof(__p));
    std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v10);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      v5 = (void *)v8.__r_.__value_.__r.__words[0];
      goto LABEL_25;
    }
  }
}

void sub_217FFF300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::pair<std::string,std::string>::~pair(v29);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100]<std::string,char const*,(void *)0>(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  MEMORY[0x219A19390](a1 + 24, *((_QWORD *)a2 + 3));
  return a1;
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

void turi::fileio::get_glob_files(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::string::size_type size;
  std::string *p_p;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  std::string::size_type v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::string *v26;
  void *v27;
  std::string::size_type i;
  std::string::size_type v29;
  __int128 v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  std::string::size_type v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  std::string::size_type v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  std::string __p;
  int v59;
  std::string v60;
  uint64_t v61;
  uint64_t v62;
  std::string v63;
  int v64;
  std::__shared_weak_count *v65;
  std::string v66;
  int v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  int v72;
  void *v73;
  char v74;
  std::string v75;
  std::string v76[2];
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v75 = *(std::string *)a1;
  MEMORY[0x219A19828](&v63);
  LODWORD(v76[0].__r_.__value_.__l.__data_) = 0x4000;
  std::locale::locale((std::locale *)&v76[0].__r_.__value_.__r.__words[1], (const std::locale *)&v63);
  boost::algorithm::trim_if<std::string,boost::algorithm::detail::is_classifiedF>(&v75, (std::locale *)v76);
  std::locale::~locale((std::locale *)&v76[0].__r_.__value_.__r.__words[1]);
  std::locale::~locale((std::locale *)&v63);
  turi::fileio::get_file_status((uint64_t)&v75, (uint64_t)&v72);
  if (v72 != 1)
  {
    if (v72 == 3)
    {
      v76[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v72;
      turi::fileio::get_glob_files(std::string const&)::$_0::operator()();
    }
    turi::fileio::split_path_elements((uint64_t)&v75, &v72, v68);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (v71 < 0)
    {
      if (v70[1])
        goto LABEL_8;
    }
    else if (v71)
    {
LABEL_8:
      turi::fileio::glob_to_regex((uint64_t)v70, (std::regex_traits<char> *)&v63);
      turi::fileio::get_directory_listing((uint64_t)v68, &v61);
      v4 = v61;
      v5 = v62;
      while (v4 != v5)
      {
        if (*(char *)(v4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
        }
        else
        {
          v6 = *(_OWORD *)v4;
          v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v6;
        }
        v67 = *(_DWORD *)(v4 + 24);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v60, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
        else
          v60 = v66;
        turi::fileio::get_filename((uint64_t)&v60, &__p);
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        v77 = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        memset(v76, 0, 41);
        v9 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>((char *)p_p, (char *)p_p + size, (uint64_t)v76, (uint64_t)&v63, 0);
        if (v76[0].__r_.__value_.__r.__words[0])
        {
          v76[0].__r_.__value_.__l.__size_ = v76[0].__r_.__value_.__r.__words[0];
          operator delete(v76[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v60.__r_.__value_.__l.__data_);
          if (v9)
          {
LABEL_28:
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__p, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
            else
              __p = v66;
            v59 = v67;
            v10 = a2[1];
            v11 = a2[2];
            if (v10 >= v11)
            {
              v13 = (uint64_t)(v10 - *a2) >> 5;
              v14 = v13 + 1;
              if ((unint64_t)(v13 + 1) >> 59)
                std::vector<float>::__throw_length_error[abi:ne180100]();
              v15 = v11 - *a2;
              if (v15 >> 4 > v14)
                v14 = v15 >> 4;
              if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0)
                v16 = 0x7FFFFFFFFFFFFFFLL;
              else
                v16 = v14;
              v76[1].__r_.__value_.__l.__size_ = (std::string::size_type)(a2 + 2);
              v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a2 + 2), v16);
              v18 = (std::string::size_type)v17 + 32 * v13;
              v76[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
              v76[0].__r_.__value_.__l.__size_ = v18;
              v76[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v17 + 32 * v19;
              v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v18 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v18 = v20;
              memset(&__p, 0, sizeof(__p));
              *(_DWORD *)(v18 + 24) = v59;
              v76[0].__r_.__value_.__r.__words[2] = v18 + 32;
              std::vector<std::pair<std::string,turi::fileio::file_status>>::__swap_out_circular_buffer(a2, v76);
              v21 = a2[1];
              std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)v76);
              v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              a2[1] = v21;
              if (v22 < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            else
            {
              v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v10 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v10 = v12;
              memset(&__p, 0, sizeof(__p));
              *(_DWORD *)(v10 + 24) = v59;
              a2[1] = v10 + 32;
            }
          }
        }
        else if (v9)
        {
          goto LABEL_28;
        }
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        v4 += 32;
      }
      v76[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
      std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
      v23 = v65;
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      std::locale::~locale((std::locale *)&v63);
LABEL_77:
      v45 = a2[1];
      if (v45 == *a2)
      {
        if (*(char *)(a1 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
          v45 = a2[1];
        }
        else
        {
          v63 = *(std::string *)a1;
        }
        v64 = 0;
        v46 = a2[2];
        if (v45 >= v46)
        {
          v48 = (uint64_t)(v45 - *a2) >> 5;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 59)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v50 = v46 - *a2;
          if (v50 >> 4 > v49)
            v49 = v50 >> 4;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0)
            v51 = 0x7FFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          v76[1].__r_.__value_.__l.__size_ = (std::string::size_type)(a2 + 2);
          v52 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a2 + 2), v51);
          v53 = (std::string::size_type)v52 + 32 * v48;
          v76[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
          v76[0].__r_.__value_.__l.__size_ = v53;
          v76[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v52 + 32 * v54;
          v55 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
          *(_QWORD *)(v53 + 16) = *((_QWORD *)&v63.__r_.__value_.__l + 2);
          *(_OWORD *)v53 = v55;
          memset(&v63, 0, sizeof(v63));
          *(_DWORD *)(v53 + 24) = v64;
          v76[0].__r_.__value_.__r.__words[2] = v53 + 32;
          std::vector<std::pair<std::string,turi::fileio::file_status>>::__swap_out_circular_buffer(a2, v76);
          v56 = a2[1];
          std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)v76);
          v57 = SHIBYTE(v63.__r_.__value_.__r.__words[2]);
          a2[1] = v56;
          if (v57 < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
        }
        else
        {
          v47 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
          *(_QWORD *)(v45 + 16) = *((_QWORD *)&v63.__r_.__value_.__l + 2);
          *(_OWORD *)v45 = v47;
          memset(&v63, 0, sizeof(v63));
          *(_DWORD *)(v45 + 24) = v64;
          a2[1] = v45 + 32;
        }
      }
      if (v71 < 0)
        operator delete(v70[0]);
      if (v69 < 0)
      {
        v27 = v68[0];
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    turi::fileio::get_directory_listing((uint64_t)&v75, (uint64_t *)&__p);
    v29 = __p.__r_.__value_.__l.__size_;
    for (i = __p.__r_.__value_.__r.__words[0]; i != v29; i += 32)
    {
      if (*(char *)(i + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
      }
      else
      {
        v30 = *(_OWORD *)i;
        v63.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v30;
      }
      v31 = *(_DWORD *)(i + 24);
      v64 = v31;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v66, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
        v31 = v64;
      }
      else
      {
        v66 = v63;
      }
      v67 = v31;
      v32 = a2[1];
      v33 = a2[2];
      if (v32 >= v33)
      {
        v35 = (uint64_t)(v32 - *a2) >> 5;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 59)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v37 = v33 - *a2;
        if (v37 >> 4 > v36)
          v36 = v37 >> 4;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0)
          v38 = 0x7FFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        v76[1].__r_.__value_.__l.__size_ = (std::string::size_type)(a2 + 2);
        v39 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)(a2 + 2), v38);
        v40 = (std::string::size_type)v39 + 32 * v35;
        v76[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
        v76[0].__r_.__value_.__l.__size_ = v40;
        v76[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v39 + 32 * v41;
        v42 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
        *(_QWORD *)(v40 + 16) = *((_QWORD *)&v66.__r_.__value_.__l + 2);
        *(_OWORD *)v40 = v42;
        memset(&v66, 0, sizeof(v66));
        *(_DWORD *)(v40 + 24) = v67;
        v76[0].__r_.__value_.__r.__words[2] = v40 + 32;
        std::vector<std::pair<std::string,turi::fileio::file_status>>::__swap_out_circular_buffer(a2, v76);
        v43 = a2[1];
        std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)v76);
        v44 = SHIBYTE(v66.__r_.__value_.__r.__words[2]);
        a2[1] = v43;
        if (v44 < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
      }
      else
      {
        v34 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
        *(_QWORD *)(v32 + 16) = *((_QWORD *)&v66.__r_.__value_.__l + 2);
        *(_OWORD *)v32 = v34;
        memset(&v66, 0, sizeof(v66));
        *(_DWORD *)(v32 + 24) = v67;
        a2[1] = v32 + 32;
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
    }
    v76[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
    goto LABEL_77;
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(v76, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v76[0] = *(std::string *)a1;
  LODWORD(v76[1].__r_.__value_.__l.__data_) = 1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v63.__r_.__value_.__s.__data_[8] = 0;
  v26 = (std::string *)operator new(0x20uLL);
  *a2 = (uint64_t)v26;
  a2[1] = (uint64_t)v26;
  a2[2] = (uint64_t)&v26[1].__r_.__value_.__l.__size_;
  a2[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,turi::fileio::file_status>>,std::pair<std::string,turi::fileio::file_status> const*,std::pair<std::string,turi::fileio::file_status> const*,std::pair<std::string,turi::fileio::file_status>*>((uint64_t)(a2 + 2), (__int128 *)v76, (__int128 *)&v76[1].__r_.__value_.__r.__words[1], v26);
  if (SHIBYTE(v76[0].__r_.__value_.__r.__words[2]) < 0)
  {
    v27 = (void *)v76[0].__r_.__value_.__r.__words[0];
LABEL_95:
    operator delete(v27);
  }
LABEL_96:
  if (v74 < 0)
    operator delete(v73);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
}

void sub_217FFFBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::pair<std::string,std::string>::~pair((uint64_t)&a43);
  if (a55 < 0)
    operator delete(__p);
  if (*(char *)(v55 - 217) < 0)
    operator delete(*(void **)(v55 - 240));
  _Unwind_Resume(a1);
}

uint64_t turi::fileio::get_io_parallelism_id(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 is_web_protocol;
  std::string *v3;
  BOOL v4;
  std::string *v5;
  int data;
  int v7;
  uint64_t instance;
  char v10;
  unint64_t v11;
  std::string *v12;
  std::string::size_type size;
  unsigned __int8 *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  unsigned __int8 *v20;
  std::string *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  std::string v29;
  std::string v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  std::string __s;
  std::string v35;
  void **v36;

  v1 = a1;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __s = *(std::string *)a1;
  turi::fileio::get_protocol(&__s, (std::string::size_type)&v35);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  else
    v33 = v35;
  is_web_protocol = turi::fileio::is_web_protocol((uint64_t)&v33);
  if (is_web_protocol)
    goto LABEL_10;
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v35.__r_.__value_.__r.__words[2]) != 2)
    {
      if (HIBYTE(v35.__r_.__value_.__r.__words[2]) == 4)
      {
        v3 = &v35;
LABEL_20:
        v4 = LODWORD(v3->__r_.__value_.__l.__data_) == 1936090216;
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    if (LOWORD(v35.__r_.__value_.__l.__data_) != 13171)
      goto LABEL_22;
LABEL_10:
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    goto LABEL_25;
  }
  if (v35.__r_.__value_.__l.__size_ == 2 && *(_WORD *)v35.__r_.__value_.__l.__data_ == 13171)
    goto LABEL_10;
  if (v35.__r_.__value_.__l.__size_ == 4)
  {
    v3 = (std::string *)v35.__r_.__value_.__r.__words[0];
    goto LABEL_20;
  }
LABEL_22:
  v4 = 0;
LABEL_23:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if (v4)
      goto LABEL_25;
  }
  else if (v4)
  {
LABEL_25:
    v1 = -1;
    goto LABEL_85;
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v35.__r_.__value_.__l.__size_ != 5)
      goto LABEL_84;
    v5 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) != 5)
      goto LABEL_84;
    v5 = &v35;
  }
  data = (int)v5->__r_.__value_.__l.__data_;
  v7 = v5->__r_.__value_.__s.__data_[4];
  if (data != 1751343459 || v7 != 101)
  {
LABEL_84:
    v1 = 0;
    goto LABEL_85;
  }
  instance = turi::fileio::fixed_size_cache_manager::get_instance((turi::fileio::fixed_size_cache_manager *)is_web_protocol);
  if (*(char *)(v1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v1, *(_QWORD *)(v1 + 8));
  else
    v30 = *(std::string *)v1;
  turi::fileio::fixed_size_cache_manager::get_cache(instance, (std::string::size_type)&v30, &v31);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (!v31)
  {
    v10 = 1;
    goto LABEL_78;
  }
  if (*(char *)(v31 + 79) < 0)
  {
    if (*(_QWORD *)(v31 + 64))
    {
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v31 + 56), *(_QWORD *)(v31 + 64));
      goto LABEL_49;
    }
LABEL_74:
    v10 = 0;
    v1 = -1;
    goto LABEL_78;
  }
  if (!*(_BYTE *)(v31 + 79))
    goto LABEL_74;
  v29 = *(std::string *)(v31 + 56);
LABEL_49:
  turi::get_temp_directories((uint64_t)&v27);
  v1 = 0;
  if (v28 == v27)
  {
LABEL_71:
    v36 = (void **)&v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    v10 = 1;
    goto LABEL_78;
  }
  v11 = (v28 - v27) / 24;
  v12 = &v29;
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v29.__r_.__value_.__r.__words[0];
  size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v29.__r_.__value_.__l.__size_;
  if (v11 <= 1)
    v11 = 1;
  while (1)
  {
    v14 = (unsigned __int8 *)(v27 + 24 * v1);
    LODWORD(v15) = (char)v14[23];
    v16 = (int)v15 < 0;
    v17 = *((_QWORD *)v14 + 1);
    if ((int)v15 < 0)
      v14 = *(unsigned __int8 **)v14;
    v15 = v15;
    if (v16)
      v15 = v17;
    if (!size || !v15)
      break;
    v18 = v15 - 1;
    v19 = size - 1;
    v20 = v14;
    v21 = v12;
    while (v21->__r_.__value_.__s.__data_[0] == *v20)
    {
      ++v20;
      if (v19)
      {
        v21 = (std::string *)((char *)v21 + 1);
        v22 = v18--;
        --v19;
        if (v22)
          continue;
      }
      goto LABEL_68;
    }
LABEL_69:
    if (++v1 == v11)
    {
      v1 = v11;
      goto LABEL_71;
    }
  }
  v20 = v14;
LABEL_68:
  if (v20 != &v14[v15])
    goto LABEL_69;
  v36 = (void **)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v10 = 0;
LABEL_78:
  v23 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if ((v10 & 1) != 0)
    goto LABEL_84;
LABEL_85:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  return v1;
}

void sub_21800016C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x218000140);
}

void sub_2180001C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  _Unwind_Resume(exception_object);
}

BOOL turi::fileio::try_to_open_file(uint64_t a1)
{
  int data;
  _BOOL8 v3;
  std::string v5;
  std::string v6;
  char v7;
  _BYTE v8[160];
  void *v9;
  char v10;
  _QWORD v11[20];

  v11[19] = *MEMORY[0x24BDAC8D0];
  turi::fileio::get_file_status(a1, (uint64_t)&v6);
  data = (int)v6.__r_.__value_.__l.__data_;
  if (v7 < 0)
    operator delete((void *)v6.__r_.__value_.__l.__size_);
  if (data != 1)
    return 0;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v5 = *(std::string *)a1;
  turi::general_ifstream::general_ifstream(&v6, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  v3 = (*(_DWORD *)&v8[*(_QWORD *)(v6.__r_.__value_.__r.__words[0] - 24)] & 5) == 0;
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  v11[0] = &unk_24D91DA80;
  if (v10 < 0)
    operator delete(v9);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v6.__r_.__value_.__r.__words[2]);
  MEMORY[0x219A198F4](v11);
  return v3;
}

uint64_t turi::fileio::copy(char *a1, char *a2)
{
  char *v3;
  std::vector<char> v5;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  void *v10;
  uint64_t v11;
  void *v12;
  char v13;
  void *v14;
  std::string v15[8];
  void *v16;
  char v17;
  _QWORD v18[20];

  v3 = a1;
  v18[19] = *MEMORY[0x24BDAC8D0];
  if (a1[23] < 0)
    v3 = *(char **)a1;
  std::string::basic_string[abi:ne180100]<0>(__p, v3);
  turi::general_ifstream::general_ifstream(v15, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (a2[23] < 0)
    a2 = *(char **)a2;
  std::string::basic_string[abi:ne180100]<0>(v6, a2);
  turi::general_ofstream::general_ofstream(&v10, (uint64_t)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  std::vector<char>::vector(&v5, 0x100000uLL);
  while ((*((_BYTE *)&v15[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(v15[0].__r_.__value_.__r.__words[0] - 24)) & 5) == 0)
  {
    std::istream::read();
    std::ostream::write();
  }
  if (v5.__begin_)
  {
    v5.__end_ = v5.__begin_;
    operator delete(v5.__begin_);
  }
  v10 = &unk_24D920F98;
  v14 = &unk_24D920FC0;
  if (v13 < 0)
    operator delete(v12);
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)&v11);
  MEMORY[0x219A198F4](&v14);
  v15[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  v18[0] = &unk_24D91DA80;
  if (v17 < 0)
    operator delete(v16);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v15[0].__r_.__value_.__r.__words[2]);
  return MEMORY[0x219A198F4](v18);
}

void sub_218000550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  turi::general_ofstream::~general_ofstream((turi::general_ofstream *)&a18);
  turi::general_ifstream::~general_ifstream((turi::general_ifstream *)&a66);
  _Unwind_Resume(a1);
}

BOOL turi::fileio::change_file_mode(uint64_t a1)
{
  BOOL v2;
  _BOOL8 v3;
  int v5;
  BOOL v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  std::string v16;
  std::locale v17;
  std::string __s;
  void *v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  void *__p;
  char v24;
  std::locale v25;

  turi::fileio::get_file_status(a1, (uint64_t)&v22);
  if (!v22)
    goto LABEL_15;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __s = *(std::string *)a1;
  turi::fileio::get_protocol(&__s, (std::string::size_type)&v19);
  if ((char)v21 < 0)
  {
    v2 = v20 == 4 && *(_DWORD *)v19 == 1936090216;
    operator delete(v19);
  }
  else
  {
    v2 = v21 == 4 && (_DWORD)v19 == 1936090216;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if (v2)
      goto LABEL_15;
  }
  else if (v2)
  {
LABEL_15:
    v3 = 0;
    goto LABEL_16;
  }
  turi::fileio::get_cache_prefix(&v19);
  MEMORY[0x219A19828](&v17);
  std::locale::locale(&v25, &v17);
  v5 = *(char *)(a1 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = (char *)a1;
  else
    v7 = *(char **)a1;
  v8 = *(unsigned __int8 *)(a1 + 23);
  if (v6)
    v8 = *(_QWORD *)(a1 + 8);
  if ((v21 & 0x80u) == 0)
    v9 = (char *)&v19;
  else
    v9 = (char *)v19;
  if ((v21 & 0x80u) == 0)
    v10 = v21;
  else
    v10 = v20;
  if (v8 && v10)
  {
    v11 = v10 - 1;
    v12 = v8 - 1;
    v13 = v9;
    while (boost::algorithm::is_iequal::operator()<char,char>(&v25, v7, v13))
    {
      ++v13;
      if (v12)
      {
        ++v7;
        v14 = v11--;
        --v12;
        if (v14)
          continue;
      }
      goto LABEL_39;
    }
    v15 = 0;
  }
  else
  {
    v13 = v9;
LABEL_39:
    v15 = v13 == &v9[v10];
  }
  std::locale::~locale(&v25);
  std::locale::~locale(&v17);
  if ((char)v21 < 0)
  {
    operator delete(v19);
    if (v15)
      goto LABEL_43;
  }
  else if (v15)
  {
LABEL_43:
    v3 = 1;
    goto LABEL_16;
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v16 = *(std::string *)a1;
  turi::fileio::get_protocol(&v16, (std::string::size_type)&v19);
  if ((char)v21 < 0)
  {
    v3 = v20 == 2 && *(unsigned __int16 *)v19 == 13171;
    operator delete(v19);
  }
  else
  {
    v3 = v21 == 2 && (unsigned __int16)v19 == 13171;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_16:
  if (v24 < 0)
    operator delete(__p);
  return v3;
}

void sub_21800084C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL boost::filesystem::path::has_root_directory(boost::filesystem::path *this)
{
  _BOOL8 v1;
  std::string v3;

  boost::filesystem::path::root_directory(this, &v3);
  if ((SHIBYTE(v3.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return SHIBYTE(v3.__r_.__value_.__r.__words[2]) != 0;
  v1 = v3.__r_.__value_.__l.__size_ != 0;
  operator delete(v3.__r_.__value_.__l.__data_);
  return v1;
}

std::runtime_error *boost::filesystem::filesystem_error::what(std::runtime_error *this)
{
  const char *imp;
  std::runtime_error *v4;
  const char *v5;
  int v6;
  const char *v7;
  std::string::size_type v8;
  const char *v9;
  const char *v10;
  const std::string::value_type *v11;
  const std::string::value_type *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  const char *v16;

  imp = this[3].__imp_.__imp_;
  if (!imp)
    return boost::system::system_error::what(this);
  if (imp[71] < 0)
  {
    if (*((_QWORD *)imp + 7))
      goto LABEL_29;
  }
  else if (imp[71])
  {
    goto LABEL_29;
  }
  v4 = boost::system::system_error::what(this);
  MEMORY[0x219A19390](this[3].__imp_.__imp_ + 48, v4);
  imp = this[3].__imp_.__imp_;
  if ((imp[23] & 0x80000000) == 0)
  {
    if (!imp[23])
      goto LABEL_18;
LABEL_11:
    std::string::append((std::string *)imp + 2, ": \"");
    v5 = this[3].__imp_.__imp_;
    v6 = v5[23];
    if (v6 >= 0)
      v7 = this[3].__imp_.__imp_;
    else
      v7 = *(const char **)v5;
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)v5 + 23);
    else
      v8 = *((_QWORD *)v5 + 1);
    std::string::append((std::string *)v5 + 2, v7, v8);
    std::string::append((std::string *)this[3].__imp_.__imp_ + 2, "\"");
    imp = this[3].__imp_.__imp_;
    goto LABEL_18;
  }
  if (*((_QWORD *)imp + 1))
    goto LABEL_11;
LABEL_18:
  if ((imp[47] & 0x80000000) == 0)
  {
    if (!imp[47])
      goto LABEL_29;
LABEL_22:
    std::string::append((std::string *)imp + 2, ", \"");
    v9 = this[3].__imp_.__imp_;
    v12 = (const std::string::value_type *)*((_QWORD *)v9 + 3);
    v10 = v9 + 24;
    v11 = v12;
    v13 = v10[23];
    if (v13 >= 0)
      v14 = v10;
    else
      v14 = v11;
    if (v13 >= 0)
      v15 = *((unsigned __int8 *)v10 + 23);
    else
      v15 = *((_QWORD *)v10 + 1);
    std::string::append((std::string *)v10 + 1, v14, v15);
    std::string::append((std::string *)this[3].__imp_.__imp_ + 2, "\"");
    imp = this[3].__imp_.__imp_;
    goto LABEL_29;
  }
  if (*((_QWORD *)imp + 4))
    goto LABEL_22;
LABEL_29:
  v16 = imp + 48;
  if (imp[71] < 0)
    return *(std::runtime_error **)v16;
  return (std::runtime_error *)v16;
}

void sub_218000AAC(void *a1)
{
  std::runtime_error *v1;

  __cxa_begin_catch(a1);
  boost::system::system_error::what(v1);
  __cxa_end_catch();
  JUMPOUT(0x218000A9CLL);
}

void boost::system::system_error::~system_error(std::runtime_error *this)
{
  boost::system::system_error::~system_error(this);
  JUMPOUT(0x219A19A08);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&unk_24D921E98;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::runtime_error::~runtime_error(this);
}

std::runtime_error *boost::system::system_error::what(std::runtime_error *this)
{
  int v2;
  const char *imp;
  std::runtime_error *v4;
  const char *v5;
  void **v6;
  std::string::size_type v7;
  void *__p[2];
  unsigned __int8 v10;

  v2 = SHIBYTE(this[3].__vftable);
  if (v2 < 0)
    imp = this[2].__imp_.__imp_;
  else
    imp = (const char *)HIBYTE(this[3].__vftable);
  v4 = this + 2;
  if (!imp)
  {
    v5 = std::runtime_error::what(this);
    MEMORY[0x219A19390](&this[2], v5);
    if (SHIBYTE(this[3].__vftable) < 0)
    {
      if (!this[2].__imp_.__imp_)
        goto LABEL_12;
    }
    else if (!HIBYTE(this[3].__vftable))
    {
LABEL_12:
      (*(void (**)(void **__return_ptr, const char *, _QWORD))(*(_QWORD *)this[1].__imp_.__imp_ + 24))(__p, this[1].__imp_.__imp_, LODWORD(this[1].__vftable));
      if ((v10 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v7 = v10;
      else
        v7 = (std::string::size_type)__p[1];
      std::string::append((std::string *)&this[2], (const std::string::value_type *)v6, v7);
      if ((char)v10 < 0)
        operator delete(__p[0]);
      if ((HIBYTE(this[3].__vftable) & 0x80) != 0)
        return (std::runtime_error *)v4->__vftable;
      return v4;
    }
    std::string::append((std::string *)&this[2], ": ");
    goto LABEL_12;
  }
  if ((v2 & 0x80) != 0)
    return (std::runtime_error *)v4->__vftable;
  return v4;
}

void sub_218000BDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  const std::runtime_error *v15;

  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  std::runtime_error::what(v15);
  __cxa_end_catch();
  JUMPOUT(0x218000BC4);
}

boost::filesystem::directory_iterator *boost::filesystem::directory_iterator::directory_iterator(boost::filesystem::directory_iterator *this, const boost::filesystem::path *a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 28) = 0xFFFFLL;
  *(_DWORD *)(v4 + 36) = 0xFFFF;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  v5 = boost::shared_ptr<boost::filesystem::detail::dir_itr_imp>::shared_ptr<boost::filesystem::detail::dir_itr_imp>((uint64_t *)this, v4);
  boost::filesystem::detail::directory_iterator_construct((boost::system::detail *)v5, (uint64_t)a2, 0);
  return this;
}

void sub_218000CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::filesystem::detail::dir_itr_imp>::shared_ptr<boost::filesystem::detail::dir_itr_imp>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::filesystem::detail::dir_itr_imp>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_218000D38(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::filesystem::detail::dir_itr_imp>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D921EC0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_218000DAC(void *a1)
{
  boost::filesystem::detail::dir_itr_imp *v1;
  uint64_t v2;
  void **v3;

  __cxa_begin_catch(a1);
  boost::checked_delete<boost::filesystem::detail::dir_itr_imp>(v1, v2, v3);
  __cxa_rethrow();
}

void sub_218000DC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

boost::filesystem::detail::dir_itr_imp *boost::checked_delete<boost::filesystem::detail::dir_itr_imp>(boost::filesystem::detail::dir_itr_imp *result, uint64_t a2, void **a3)
{
  if (result)
  {
    boost::filesystem::detail::dir_itr_imp::~dir_itr_imp(result, a2, a3);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

boost::filesystem::detail::dir_itr_imp *boost::detail::sp_counted_impl_p<boost::filesystem::detail::dir_itr_imp>::dispose(uint64_t a1, uint64_t a2, void **a3)
{
  boost::filesystem::detail::dir_itr_imp *result;

  result = *(boost::filesystem::detail::dir_itr_imp **)(a1 + 16);
  if (result)
  {
    boost::filesystem::detail::dir_itr_imp::~dir_itr_imp(result, a2, a3);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void boost::filesystem::detail::dir_itr_imp::~dir_itr_imp(boost::filesystem::detail::dir_itr_imp *this, uint64_t a2, void **a3)
{
  boost::filesystem::detail::dir_itr_close((DIR **)this + 5, (void **)this + 6, a3);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t std::vector<std::pair<std::string,turi::fileio::file_status>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,turi::fileio::file_status>>,std::reverse_iterator<std::pair<std::string,turi::fileio::file_status>*>,std::reverse_iterator<std::pair<std::string,turi::fileio::file_status>*>,std::reverse_iterator<std::pair<std::string,turi::fileio::file_status>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,turi::fileio::file_status>>,std::reverse_iterator<std::pair<std::string,turi::fileio::file_status>*>,std::reverse_iterator<std::pair<std::string,turi::fileio::file_status>*>,std::reverse_iterator<std::pair<std::string,turi::fileio::file_status>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,turi::fileio::file_status>>,std::reverse_iterator<std::pair<std::string,turi::fileio::file_status>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,turi::fileio::file_status>>,std::reverse_iterator<std::pair<std::string,turi::fileio::file_status>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::reverse_iterator<std::pair<std::string,unsigned long>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_BYTE *boost::algorithm::detail::transform_range_copy<std::__wrap_iter<char *>,boost::iterator_range<std::__wrap_iter<char const*>>,boost::algorithm::detail::to_lowerF<char>>(_BYTE *a1, char **a2, std::locale *this)
{
  _BYTE *v3;
  char *v4;
  char *v5;
  _BYTE *v7;
  std::locale::id *v8;
  unsigned int v9;
  const std::locale::facet *v10;

  v3 = a1;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v7 = a1;
    v3 = (_BYTE *)(&v5[(_QWORD)a1] - v4);
    v8 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v9 = *v4++;
      v10 = std::locale::use_facet(this, v8);
      *v7++ = ((uint64_t (*)(const std::locale::facet *, _QWORD))v10->__vftable[1].__on_zero_shared)(v10, v9);
    }
    while (v4 != v5);
  }
  return v3;
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::const_reference __x)
{
  std::string *i;
  std::vector<std::string>::pointer end;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *value;
  std::vector<std::string>::pointer begin;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::__split_buffer<std::string> __v;

  i = (std::string *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    begin = this->__begin_;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)begin) >> 3);
    v14 = 2 * v13;
    if (2 * v13 <= v11)
      v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v13 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v14;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v15)
      v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v15);
    else
      v16 = 0;
    __v.__first_ = v16;
    __v.__begin_ = v16 + v12;
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v16[v15];
    std::__split_buffer<std::string>::push_back[abi:ne180100]((uint64_t)&__v, (__int128 *)__x);
    i = std::vector<std::string>::__swap_out_circular_buffer(this, &__v, i);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else if (__position.__i_ == end)
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this, (__int128 *)__x);
  }
  else
  {
    std::vector<std::string>::__move_range(this, (std::vector<std::string>::pointer)__position.__i_, end, (std::vector<std::string>::pointer)&__position.__i_[1]);
    if (i <= __x)
      __x += this->__end_ > __x;
    std::string::operator=(i, __x);
  }
  return (std::vector<std::string>::iterator)i;
}

void sub_2180011AC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::push_back[abi:ne180100](uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  std::string *v27;
  __int128 v28;
  std::__split_buffer<std::string> v29;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == *(_QWORD *)(a1 + 24))
  {
    v5 = *(__int128 **)(a1 + 8);
    if ((unint64_t)v5 <= *(_QWORD *)a1)
    {
      v11 = v4 - *(_QWORD *)a1;
      v10 = v11 == 0;
      v12 = 0x5555555555555556 * (v11 >> 3);
      if (v10)
        v13 = 1;
      else
        v13 = v12;
      v14 = v13 >> 2;
      v15 = *(_QWORD *)(a1 + 32);
      v29.__end_cap_.__value_ = *(std::allocator<std::string> **)(a1 + 32);
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v15, v13);
      v18 = &v16[24 * v14];
      v19 = *(_QWORD *)(a1 + 8);
      v20 = *(_QWORD *)(a1 + 16) - v19;
      if (v20)
      {
        v21 = v20 / 24;
        v22 = &v18[24 * v21];
        v23 = 24 * v21;
        v24 = &v16[24 * v14];
        do
        {
          v25 = *(_OWORD *)v19;
          *((_QWORD *)v24 + 2) = *(_QWORD *)(v19 + 16);
          *(_OWORD *)v24 = v25;
          v24 += 24;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)v19 = 0;
          v19 += 24;
          v23 -= 24;
        }
        while (v23);
        v26 = *(int64x2_t *)(a1 + 8);
      }
      else
      {
        v26 = vdupq_n_s64(v19);
        v22 = &v16[24 * v14];
      }
      v29.__first_ = *(std::__split_buffer<std::string>::pointer *)a1;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v18;
      *(int64x2_t *)&v29.__begin_ = v26;
      v27 = *(std::string **)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 24) = &v16[24 * v17];
      v29.__end_cap_.__value_ = v27;
      std::__split_buffer<std::string>::~__split_buffer(&v29);
      v4 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v29, v5, (__int128 *)v4, (uint64_t)v5 - 24 * (v7 >> 1));
      v4 = v9;
      *(_QWORD *)(a1 + 8) += 8 * v8;
      *(_QWORD *)(a1 + 16) = v9;
    }
  }
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v28 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v28;
  }
  *(_QWORD *)(a1 + 16) += 24;
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(std::regex_traits<char> *a1, uint64_t a2, int a3)
{
  std::regex_traits<char> *v6;
  uint64_t v7;
  std::basic_regex<char> *v8;

  v6 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::basic_regex<char> *)a2;
  else
    v8 = *(std::basic_regex<char> **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if ((std::basic_regex<char> *)((char *)v8 + v7) != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v6, v8, (std::basic_regex<char> *)((char *)v8 + v7)))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_2180013C4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x219A19828]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x24BEDB4B0]);
  return this;
}

void sub_218001428(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_24D921F20;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_218001590(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_2180015E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *first;
  std::__owns_one_state<char> *v11;
  unsigned __int8 *v12;
  std::__node<char> *v13;
  std::__owns_one_state<char> *v14;
  std::__node<char> *v15;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
  {
    v8 = (std::__node<char> *)operator new();
    v9 = a1->__end_;
    first = v9->__first_;
    v8[1].__vftable = (std::__node<char>_vtbl *)first;
    v9->__first_ = v8;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v7 == (unsigned __int8 *)a3)
    return a3;
  while (*v7 == 124)
  {
    v11 = a1->__end_;
    v12 = v7 + 1;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, v7 + 1, a3);
    if (v12 == v7)
    {
      v13 = (std::__node<char> *)operator new();
      v14 = a1->__end_;
      v15 = v14->__first_;
      v13[1].__vftable = (std::__node<char>_vtbl *)v15;
      v14->__first_ = v13;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v11);
    if (v7 == (unsigned __int8 *)a3)
      return a3;
  }
  return (char *)v7;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_24D922098;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_24D9220E0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), a3);
    if (v8 + 1 == v10)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_218001C5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x219A19A08);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

_QWORD *std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D921F78;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_218001CF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__empty_state<char>::~__empty_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x219A19A08);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v5;

  do
  {
    v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, (char *)a2, a3);
  }
  while (v5 != a2);
  return v5;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&unk_24D922560;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&unk_24D9225A8;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v14;
  int v16;
  BOOL v17;
  unsigned int marked_count;
  std::basic_regex<char> v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        v7 = a2[2];
        if (v7 == 33)
        {
          std::regex_traits<char>::regex_traits(&v19.__traits_);
          memset(&v19.__flags_, 0, 40);
          v19.__flags_ = this->__flags_;
          v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v19, v3 + 3, a3);
          marked_count = v19.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v19, 1, this->__marked_count_);
          this->__marked_count_ += marked_count;
          if (v8 == a3 || *v8 != 41)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          goto LABEL_27;
        }
        if (v7 == 61)
        {
          std::regex_traits<char>::regex_traits(&v19.__traits_);
          memset(&v19.__flags_, 0, 40);
          v19.__flags_ = this->__flags_;
          v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v19, v3 + 3, a3);
          v9 = v19.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v19, 0, this->__marked_count_);
          this->__marked_count_ += v9;
          if (v8 == a3 || *v8 != 41)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
          v3 = v8 + 1;
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v19.__start_);
          std::locale::~locale(&v19.__traits_.__loc_);
          return v3;
        }
      }
      return v3;
    }
    v10 = operator new();
    v11 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_17:
    *(_QWORD *)v10 = v14 + 16;
    *(_QWORD *)(v10 + 8) = first;
    *(_BYTE *)(v10 + 16) = v11;
    end->__first_ = (std::__node<char> *)v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v10 = operator new();
    v11 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_17;
  }
  if (a2 + 1 != a3)
  {
    v16 = a2[1];
    if (v16 == 66)
    {
      v17 = 1;
    }
    else
    {
      if (v16 != 98)
        return v3;
      v17 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v17);
    v3 += 2;
  }
  return v3;
}

void sub_218002254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  _BYTE *v11;
  char *v12;
  unsigned int marked_count;
  char *v14;
  char *v15;

  v3 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    v6 = (char)*a2;
    if (v6 <= 62)
    {
      if (v6 == 40)
      {
        v11 = a2 + 1;
        if (a2 + 1 != (unsigned __int8 *)a3)
        {
          if (a2 + 2 != (unsigned __int8 *)a3 && *v11 == 63 && a2[2] == 58)
          {
            ++this->__open_count_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 3, a3);
            if (v12 != a3 && *v12 == 41)
            {
              --this->__open_count_;
              return (unsigned __int8 *)(v12 + 1);
            }
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
            marked_count = this->__marked_count_;
            ++this->__open_count_;
            v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, v11, a3);
            if (v14 != a3)
            {
              v15 = v14;
              if (*v14 == 41)
              {
                std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
                --this->__open_count_;
                return (unsigned __int8 *)(v15 + 1);
              }
            }
          }
        }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if (v6 == 46)
      {
        v7 = (std::__node<char> *)operator new();
        end = this->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_24D9221B8;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return ++v3;
      }
      if ((v6 - 42) >= 2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
LABEL_28:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, a2, (unsigned __int8 *)a3);
      if (v6 == 123)
        goto LABEL_28;
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, a3);
      if (v6 == 63)
        goto LABEL_28;
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    v13 = a2;
    if (v12 != 123)
      return v13;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a1, a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v10, v23, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  v13 = a2;
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &unk_24D922128;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  std::__node<char> *v8;

  v8 = (std::__node<char> *)operator new();
  std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100]((uint64_t)v8, (uint64_t)a2, a3, (uint64_t)this->__end_->__first_, a4);
  this->__end_->__first_ = v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_218002874(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_2180028D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24D922128;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24D922128;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_24D922170;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24D922170;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24D922170;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x219A19A08);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  const char *v6;
  BOOL v7;
  char v8;
  std::sub_match<const char *> *begin;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::sub_match<const char *> *v15;
  uint64_t v16;
  std::vector<std::csub_match> __p;
  std::vector<std::csub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::csub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const char **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)v16 = v15->std::pair<const char *, const char *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_218002E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  std::match_results<const char *>::value_type *p_unmatched;

  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos)
    this->__position_start_ = __f;
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  const char *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  std::vector<std::csub_match>::value_type __x;
  _OWORD *v41;
  _OWORD *v42;
  unint64_t v43;

  v41 = 0;
  v42 = 0;
  v43 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    v12 = v42;
    *((_QWORD *)v42 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = (const char *)*((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (_QWORD *)v42 - 12);
          v42 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v42;
          if ((unint64_t)v42 >= v43)
          {
            v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v42 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v42 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v42;
          ++v13;
          if (v41 != v42)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_2180032C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3;
  BOOL v4;
  std::vector<std::csub_match>::size_type v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v4 = __sz >= v3;
  v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_218003578(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_2180035C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_218003710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::__state<char>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (_QWORD *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::__compressed_pair<std::csub_match *> *p_end_cap;
  std::sub_match<const char *> *v7;
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::sub_match<const char *> *v15;
  std::vector<std::csub_match>::size_type v16;
  std::pair<const char *, const char *> v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> *v21;
  std::pair<const char *, const char *> v22;
  std::sub_match<const char *> *v23;
  std::sub_match<const char *> *end;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v26;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      v15 = &v9[__n];
      v16 = 24 * __n;
      do
      {
        v17 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&v9->matched = *(_QWORD *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    v19 = &v18[__n];
    v20 = 24 * __n;
    v21 = v18;
    do
    {
      v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      *v21 = v22;
      v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v26 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v18[-1].matched = *(_QWORD *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::__compressed_pair<std::pair<unsigned long, const char *> *, std::allocator<std::pair<unsigned long, const char *>>> *p_end_cap;
  std::pair<unsigned long, const char *> *v5;
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = (char *)v7 - (char *)this->__begin_;
    v9 = __n + (v8 >> 4);
    if (v9 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)p_end_cap, v12);
    else
      v13 = 0;
    v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    v16 = &v14[__n];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_218003C94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_218003D04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
  if (v5 == result)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(a1, (char *)a2 + 1, (char *)a3);
    if (v5 == result)
    {
      result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (v5 == result)
        return a2;
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v5, a3, v7);
    }
    while (v8 != v5);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &unk_24D9223F8;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &unk_24D922440;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21800406C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_218004128(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  int v6;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a2;
    v5 = v4 - 48;
    if (v4 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return ++v3;
    }
    if ((v4 - 49) > 8)
      return v3;
    if (++v3 == a3)
    {
      v3 = a3;
    }
    else
    {
      while (1)
      {
        v6 = *v3;
        if ((v6 - 48) > 9)
          break;
        if (v5 >= 0x19999999)
          goto LABEL_16;
        ++v3;
        v5 = v6 + 10 * v5 - 48;
        if (v3 == a3)
        {
          v3 = a3;
          break;
        }
      }
      if (!v5)
        goto LABEL_16;
    }
    if (v5 <= a1->__marked_count_)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
      return v3;
    }
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v8;
  BOOL v9;
  std::__bracket_expression<char, std::regex_traits<char>> *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  char v6;
  std::string *v7;
  std::basic_regex<char>::value_type locale;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  std::string::value_type v16;
  unsigned int v17;
  std::string::value_type v18;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v7 = a4;
            locale = 10;
            goto LABEL_52;
          }
          locale = 10;
          goto LABEL_61;
        case 'r':
          if (a4)
          {
            v7 = a4;
            locale = 13;
            goto LABEL_52;
          }
          locale = 13;
          goto LABEL_61;
        case 't':
          if (a4)
          {
            v7 = a4;
            locale = 9;
            goto LABEL_52;
          }
          locale = 9;
          goto LABEL_61;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_66;
          v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_66;
          v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_66;
          v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_66;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_66;
          v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_66;
          v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_66;
          v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_66;
          v15 = -87;
LABEL_35:
          v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4)
            std::string::operator=(a4, v16);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            v7 = a4;
            locale = 11;
            goto LABEL_52;
          }
          locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_47;
      }
      goto LABEL_61;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v7 = a4;
        locale = 0;
        goto LABEL_52;
      }
      locale = 0;
LABEL_61:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v7 = a4;
          locale = 12;
LABEL_52:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_61;
      }
LABEL_47:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v7 = a4;
          goto LABEL_52;
        }
        goto LABEL_61;
      }
LABEL_66:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_66;
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65)
      goto LABEL_66;
    v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v17 >= 0x5B && (v17 - 97) > 0x19u)
      goto LABEL_66;
    v18 = v17 & 0x1F;
    if (a4)
      std::string::operator=(a4, v18);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](v8, (uint64_t)this, v2, (uint64_t)this->__end_->__first_);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_24D922248;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_24D922290;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_218004698(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_2180046F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_24D922368;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_24D922200;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_218004870(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24D922200;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24D922200;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24D922248;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24D922248;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24D9222D8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24D9222D8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24D922320;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24D922320;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = *(unsigned __int8 **)(a2 + 16);
      v10 = v6;
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v9++;
        if (v11 != v13)
          break;
        if (!--v10)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x219A19A08);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  std::__bracket_expression<char, std::regex_traits<char>> *v4;

  v4 = (std::__bracket_expression<char, std::regex_traits<char>> *)operator new();
  std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v4, (uint64_t)this, (uint64_t)this->__end_->__first_, __negate, this->__flags_ & 1, (this->__flags_ & 8) != 0);
  this->__end_->__first_ = v4;
  this->__end_ = v4;
  return v4;
}

void sub_218004FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_218005308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x219A19A08](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  signed __int8 v6;
  signed __int8 v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  size_t size;
  std::vector<std::pair<std::string, std::string>>::pointer v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  size_t v30;
  std::string *data;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  _BOOL4 negate;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  std::vector<char>::pointer v40;
  unint64_t v41;
  int v42;
  std::regex_traits<char>::char_class_type v43;
  int v44;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v46;
  char *v47;
  std::vector<std::pair<std::string, std::string>>::pointer v48;
  std::vector<std::pair<std::string, std::string>>::pointer v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  const void *v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  size_t v58;
  std::vector<std::pair<std::string, std::string>>::pointer v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  int v63;
  size_t v64;
  std::string *v65;
  size_t v66;
  int v67;
  BOOL v68;
  std::vector<std::string>::pointer v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  size_t v75;
  size_t v76;
  uint64_t v77;
  BOOL v78;
  std::string *v79;
  std::string::size_type v80;
  int v81;
  std::string *v82;
  void **v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  std::regex_traits<char>::char_class_type v87;
  int v88;
  std::vector<std::string>::pointer v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  void *v95;
  size_t v96;
  uint64_t v97;
  BOOL v98;
  std::string *v99;
  std::string::size_type v100;
  int v101;
  std::string *v102;
  void **v103;
  uint64_t v104;
  int v105;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v108;
  std::regex_traits<char>::char_class_type neg_mask;
  int v110;
  std::__node<char> *first;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  _BOOL4 v116;
  _BOOL4 v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *__p;
  size_t v123;
  char v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v37 = 0;
    negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_58;
  v6 = *current;
  v125 = *current;
  v7 = current[1];
  v126 = v7;
  if (this->__icase_)
  {
    v125 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    v126 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124)
      goto LABEL_8;
LABEL_58:
    negate = 0;
    v37 = 1;
    goto LABEL_59;
  }
  v38 = v123;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second)
        goto LABEL_218;
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    v14 = this->__ranges_.__begin_;
    v15 = v124;
    v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      v17 = 0;
      v18 = v16 / 48;
      v113 = v124;
      if (v124 >= 0)
        v19 = v124;
      else
        v19 = v123;
      if (v124 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v18 <= 1)
        v21 = 1;
      else
        v21 = v16 / 48;
      v22 = 1;
      while (1)
      {
        v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0)
          size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        else
          size = v14->first.__r_.__value_.__l.__size_;
        if (v23 >= 0)
          v25 = v14;
        else
          v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        if (size >= v19)
          v26 = v19;
        else
          v26 = size;
        v27 = memcmp(p_p, v25, v26);
        v28 = v19 >= size;
        if (v27)
          v28 = v27 >= 0;
        if (v28)
        {
          v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0)
            v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          else
            v30 = v14->second.__r_.__value_.__l.__size_;
          if (v29 >= 0)
            data = &v14->second;
          else
            data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          if (v19 >= v30)
            v32 = v30;
          else
            v32 = v19;
          v33 = memcmp(data, p_p, v32);
          v34 = v30 >= v19;
          if (v33)
            v34 = v33 >= 0;
          if (v34)
            break;
        }
        v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          v35 = 0;
          negate = 0;
          goto LABEL_162;
        }
      }
      negate = 1;
      v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      v15 = v113;
    }
    else
    {
      v22 = 0;
      v35 = 0;
      negate = 0;
    }
    if (v15 < 0)
      operator delete(__p);
    if (v22)
      goto LABEL_195;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_200;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  v89 = this->__equivalences_.__begin_;
  v90 = v124;
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    v92 = 0;
    v93 = v91 / 24;
    v95 = __p;
    v94 = v123;
    if (v124 >= 0)
      v96 = v124;
    else
      v96 = v123;
    if (v93 <= 1)
      v97 = 1;
    else
      v97 = v91 / 24;
    v98 = 1;
    while (1)
    {
      v99 = &v89[v92];
      v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      v101 = (char)v100;
      if ((v100 & 0x80u) != 0)
        v100 = v99->__r_.__value_.__l.__size_;
      if (v96 == v100)
      {
        if (v101 >= 0)
          v102 = &v89[v92];
        else
          v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        if ((v90 & 0x80) == 0)
        {
          if ((_DWORD)v90)
          {
            v103 = &__p;
            v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0])
                goto LABEL_188;
              v103 = (void **)((char *)v103 + 1);
              v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            negate = 1;
            v35 = 5;
            goto LABEL_192;
          }
          negate = 1;
          if (v98)
            goto LABEL_220;
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_mask = this->__neg_mask_;
            goto LABEL_213;
          }
          mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_mask = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0)
                goto LABEL_217;
              v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0)
                goto LABEL_217;
LABEL_219:
              negate = v110;
LABEL_220:
              v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          v110 = 1;
          goto LABEL_219;
        }
        v118 = v93;
        v121 = v90;
        v105 = memcmp(v95, v102, v94);
        v93 = v118;
        v90 = v121;
        if (!v105)
          break;
      }
LABEL_188:
      v98 = ++v92 < v93;
      if (v92 == v97)
        goto LABEL_191;
    }
    v35 = 5;
    negate = 1;
    goto LABEL_193;
  }
  v98 = 0;
LABEL_191:
  v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0)
LABEL_193:
    operator delete(__p);
  if (!v98)
    goto LABEL_200;
LABEL_195:
  if (v35)
    goto LABEL_220;
  v37 = 2;
LABEL_59:
  v39 = *a2->__current_;
  v125 = v39;
  if (this->__icase_)
  {
    v39 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    v125 = v39;
  }
  v40 = this->__chars_.__begin_;
  v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_66;
    }
LABEL_77:
    negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    end = this->__neg_chars_.__end_;
    v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end)
      goto LABEL_77;
  }
  v49 = this->__ranges_.__begin_;
  v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      v49 = this->__ranges_.__begin_;
      v48 = this->__ranges_.__end_;
    }
    else
    {
      v124 = 1;
      LOWORD(__p) = v39;
    }
    v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      v119 = v37;
      v116 = negate;
      v51 = 0;
      v52 = v50 / 48;
      v114 = v124;
      if (v124 >= 0)
        v53 = v124;
      else
        v53 = v123;
      if (v124 >= 0)
        v54 = &__p;
      else
        v54 = __p;
      if (v52 <= 1)
        v55 = 1;
      else
        v55 = v50 / 48;
      v56 = 1;
      while (1)
      {
        v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0)
          v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        else
          v58 = v49->first.__r_.__value_.__l.__size_;
        if (v57 >= 0)
          v59 = v49;
        else
          v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        if (v58 >= v53)
          v60 = v53;
        else
          v60 = v58;
        v61 = memcmp(v54, v59, v60);
        v62 = v53 >= v58;
        if (v61)
          v62 = v61 >= 0;
        if (v62)
        {
          v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0)
            v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          else
            v64 = v49->second.__r_.__value_.__l.__size_;
          if (v63 >= 0)
            v65 = &v49->second;
          else
            v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          if (v53 >= v64)
            v66 = v64;
          else
            v66 = v53;
          v67 = memcmp(v65, v54, v66);
          v68 = v64 >= v53;
          if (v67)
            v68 = v67 >= 0;
          if (v68)
            break;
        }
        v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          negate = v116;
          goto LABEL_123;
        }
      }
      negate = 1;
LABEL_123:
      v37 = v119;
      if ((v114 & 0x80) == 0)
        goto LABEL_125;
    }
    else
    {
      v56 = 0;
      if ((v124 & 0x80) == 0)
        goto LABEL_125;
    }
    operator delete(__p);
LABEL_125:
    if (v56)
      goto LABEL_221;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_154;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  v69 = this->__equivalences_.__begin_;
  v70 = v124;
  v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    v120 = v37;
    v72 = 0;
    v73 = v71 / 24;
    v74 = __p;
    v75 = v123;
    if (v124 >= 0)
      v76 = v124;
    else
      v76 = v123;
    if (v73 <= 1)
      v77 = 1;
    else
      v77 = v71 / 24;
    v78 = 1;
    while (1)
    {
      v79 = &v69[v72];
      v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      v81 = (char)v80;
      if ((v80 & 0x80u) != 0)
        v80 = v79->__r_.__value_.__l.__size_;
      if (v76 == v80)
      {
        if (v81 >= 0)
          v82 = &v69[v72];
        else
          v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        if ((v70 & 0x80) != 0)
        {
          v117 = negate;
          v85 = v73;
          v115 = v77;
          v86 = memcmp(v74, v82, v75);
          v77 = v115;
          v73 = v85;
          negate = v117;
          if (!v86)
          {
            negate = 1;
            v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!(_DWORD)v70)
          {
            negate = 1;
            v37 = v120;
            if (!v78)
              goto LABEL_154;
            goto LABEL_221;
          }
          v83 = &__p;
          v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            v83 = (void **)((char *)v83 + 1);
            v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        v37 = v120;
        if ((v70 & 0x80) == 0)
          goto LABEL_153;
        goto LABEL_152;
      }
    }
  }
  v78 = 0;
  if (v124 < 0)
LABEL_152:
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0)
      goto LABEL_221;
    v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v125 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_221;
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_218005F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_21800608C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_218006198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_2180061EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  int v5;
  uint64_t v6;
  int v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  std::string *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  std::string::size_type size;
  char v21;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
LABEL_38:
      v6 = (uint64_t)v10;
      v21 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = v19;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_40;
LABEL_25:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    v21 = 1;
    v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = v18;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if ((_DWORD)v17 == 92)
    {
      if (v11)
        v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v17) = *v17;
  }
  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v21 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v21 & 1) != 0)
    return v4;
  return (char *)v6;
}

void sub_21800654C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *i;
  int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  for (i = a2; ; v8 = i)
  {
    v10 = *i++;
    if (v10 == 61 && *i == 93)
      break;
    if (a2 == v6)
      goto LABEL_33;
    ++v7;
    --v6;
  }
  if (v8 == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, v7, (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    v11 = v22;
    if (v22)
    {
      v12 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = v21;
  if (!v21)
    goto LABEL_34;
  v12 = (char *)v20;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v12, &v12[v11], (uint64_t)__p);
  v13 = v19;
  if ((v19 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v13)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v14 = v22;
    if ((v22 & 0x80u) != 0)
      v14 = v21;
    if (v14 == 2)
    {
      v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v16 = (char *)v20;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v15 = (char *)v20;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v15);
    }
  }
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v22 < 0)
    operator delete(v20);
  return v7 + 2;
}

void sub_218006768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  int v10;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 58 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_11;
    ++v6;
    --v5;
  }
  if (v7 == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v10 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    ++v6;
    --v5;
  }
  if (v7 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_218006FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_218007254(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_2180072E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_218007390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_21800772C(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::string, std::string>> *)&a10);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_218007778(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &unk_24D922488;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&unk_24D922518;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_218007B78(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_218007C74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_218007CC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24D9224E8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24D9224E8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x219A19A08);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24D9224E8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24D9224E8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x219A19A08);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(_QWORD *)(v7 - 8) = v5;
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x219A19A08);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_24D9224E8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x219A19A08);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  do
  {
    v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x219A19330](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_218008130(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v12;
  uint64_t v13;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    v9 = (uint64_t)v6;
    if (*a2 == 92)
      v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    if ((char *)v9 == a2)
    {
      if (*a2 == 92)
      {
        v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, a2[1]);
        v13 = 2;
        if (!v12)
          v13 = 0;
        return &a2[v13];
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      marked_count = a1->__marked_count_;
      v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (uint64_t)a3);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v7 = v11 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 2, a3, &v25);
      if (v13 == v14)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_24D9225F0;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_24D9225F0;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int locale_low;
  uint64_t v5;

  v3 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    v5 = (locale_low - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (a1->__open_count_)
        return v3;
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2)
        return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  char v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      v5 = *v4;
      v6 = *v4;
      v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (v7 && (v5 - 123) >= 3)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
        {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
        }
        else
        {
          v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
          v10 = 2;
          if (!v9)
            v10 = 0;
          v3 += v10;
        }
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
        v3 += 2;
      }
    }
  }
  return v3;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,turi::fileio::file_status>>,std::pair<std::string,turi::fileio::file_status> const*,std::pair<std::string,turi::fileio::file_status> const*,std::pair<std::string,turi::fileio::file_status>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,turi::fileio::file_status>>,std::pair<std::string,turi::fileio::file_status>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_218008B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,turi::fileio::file_status>>,std::pair<std::string,turi::fileio::file_status>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,turi::fileio::file_status>>,std::pair<std::string,turi::fileio::file_status>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(char *__f, char *__l, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  int v9;
  uint64_t result;
  std::match_results<const char *> __p;

  v5 = a5;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, __f, __l, &__p, a5 | 0x1040u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)a3, (uint64_t)__f, (std::sub_match<std::__wrap_iter<const char *>> *)__l, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v9)
    return 0;
  if (!*(_BYTE *)(a3 + 88))
    return 1;
  result = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  return result;
}

void sub_218008C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  int v9;
  std::match_results<const char *>::value_type *p_unmatched;
  const char *first;
  const char *second;
  uint64_t result;
  int v14;
  const char *v15;
  int v16;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_)
      p_unmatched = &this->__unmatched_;
    else
      p_unmatched = this->__matches_.__begin_;
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begin = this->__matches_.__begin_;
        end = this->__matches_.__end_;
        if (v16)
          break;
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l)
          goto LABEL_14;
      }
      if (end == begin)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_)
        p_unmatched = &this->__unmatched_;
      else
        p_unmatched = this->__matches_.__begin_;
      goto LABEL_8;
    }
  }
  result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  std::vector<std::ssub_match>::pointer begin;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  std::vector<std::ssub_match>::pointer end;
  std::sub_match<std::__wrap_iter<const char *>> *v23;

  v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  begin = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    v12 = 0;
    v13 = 0;
    v15 = *a4;
    v14 = a4[1];
    do
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      v17 = (_QWORD *)(v15 + v12 * 24);
      if (v16 <= v13)
        v18 = a4 + 3;
      else
        v18 = v17;
      begin[v12].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13)
        v19 = a4 + 3;
      else
        v19 = (uint64_t *)(*a4 + v12 * 24);
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + v19[1] - v10);
      v15 = *a4;
      v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13)
        v20 = a4 + 3;
      else
        v20 = (uint64_t *)(*a4 + v12 * 24);
      v21 = *((_BYTE *)v20 + 16);
      begin = a1->__begin_;
      end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  v23 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    a1[4].__end_ = v23;
  LOBYTE(a1[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            std::deque<std::__state<char>>::pop_back(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v59);
  return v6;
}

void sub_218009524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  const char *v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  const char *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  const char *v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v50[40];
  __int128 v51;
  void *v52[6];
  _OWORD *v53;
  _OWORD *v54;
  _QWORD v55[3];

  v53 = 0;
  v54 = 0;
  v55[0] = 0;
  *(_DWORD *)v50 = 0;
  memset(&v50[8], 0, 32);
  v51 = 0u;
  memset(v52, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v54;
  *((_DWORD *)v54 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v54 - 40), *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = (const char *)(a3 - a2);
  v14 = v54;
  *((_QWORD *)v54 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = (const char *)*((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = &v19[-*((_QWORD *)v14 - 11)];
        v27 = v42;
        if ((v43 & ((uint64_t)v42 >= (uint64_t)v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v50 = *(_OWORD *)v18;
          *(_OWORD *)&v50[16] = v28;
          if (v50 != v18)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v50[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v52, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v52[3] + 5) = *(void **)((char *)v14 - 11);
          v52[3] = v29;
          v27 = v26;
        }
        v30 = v54;
        if (v27 == v13)
        {
          v31 = (uint64_t)v53;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, v30);
          }
          v54 = (_OWORD *)v31;
          v43 = 1;
          v42 = (const char *)(a3 - a2);
        }
        else
        {
          v42 = v27;
          v32 = v54 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
          v54 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v54 - 6;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
        v54 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v54;
        if ((unint64_t)v54 >= v55[0])
        {
          v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v54 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v54 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v14 = v54;
  }
  while (v53 != v54);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = &v42[(_QWORD)a2];
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v51 != *(_QWORD *)&v50[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)&v50[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v50[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (*(_QWORD *)&v50[32])
  {
    *(_QWORD *)&v51 = *(_QWORD *)&v50[32];
    operator delete(*(void **)&v50[32]);
  }
  *(_QWORD *)v50 = &v53;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  return v39;
}

void sub_218009A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_2186CA050);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21800A014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<char *>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<char *>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<char *>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<char *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_21800A3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::string>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __sz)
{
  std::vector<std::ssub_match>::size_type v2;
  BOOL v3;
  std::vector<std::ssub_match>::size_type v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::__compressed_pair<std::ssub_match *> *p_end_cap;
  std::sub_match<std::__wrap_iter<const char *>> *v5;
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::size_type v17;
  std::sub_match<std::__wrap_iter<const char *>> *v18;
  std::sub_match<std::__wrap_iter<const char *>> *v19;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &v7[__n];
      v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    v15 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v8];
    v16 = &v15[__n];
    v17 = 24 * __n;
    v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    v19 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v11];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v15[-1].matched = *(_QWORD *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
      operator delete(end);
  }
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_21800AA28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_3_6()
{
  uint64_t v0;

  operator delete(*(void **)(v0 - 64));
}

void OUTLINED_FUNCTION_5_2()
{
  uint64_t v0;

  operator delete(*(void **)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_10_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return file_logger::operator<<<std::string>(v2, a2);
}

void *OUTLINED_FUNCTION_14_2()
{
  return __cxa_allocate_exception(0x38uLL);
}

std::string *OUTLINED_FUNCTION_15_3(std::string *a1, uint64_t a2, const std::string::value_type *a3)
{
  return std::string::insert(a1, 0, a3);
}

_QWORD *OUTLINED_FUNCTION_18_1(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

__n128 OUTLINED_FUNCTION_20_2(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *a1;
  *(_QWORD *)(v1 - 48) = a1[1].n128_u64[0];
  *(__n128 *)(v1 - 64) = result;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

double OUTLINED_FUNCTION_22_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, uint64_t a10, __n128 a11)
{
  double result;

  *(_QWORD *)&result = turi::sanitize_url(&a9, &a11).n128_u64[0];
  return result;
}

void OUTLINED_FUNCTION_23_1(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::string::__init_copy_ctor_external((std::string *)&a9, a2, a3);
}

double OUTLINED_FUNCTION_24_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __n128 a15, uint64_t a16, uint64_t a17, __n128 a18)
{
  double result;

  *(_QWORD *)&result = turi::sanitize_url(&a15, &a18).n128_u64[0];
  return result;
}

void OUTLINED_FUNCTION_25_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_26_0()
{
  uint64_t v0;

  operator delete(*(void **)(v0 - 128));
}

void OUTLINED_FUNCTION_27_2(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string::__init_copy_ctor_external((std::string *)&a8, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
}

uint64_t _GLOBAL__sub_I_fs_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

_QWORD *boost::iostreams::stream<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>>::stream<std::string>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::string __p;
  _BYTE v10[56];

  v6 = (_QWORD *)boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base((uint64_t)a1, a2 + 1);
  v7 = *a2;
  *v6 = *a2;
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v7 - 24)) = a2[5];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::fileio_impl::general_fstream_source::general_fstream_source(v10, &__p);
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), 0);
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open((uint64_t)(a1 + 2), (uint64_t)v10, 0xFFFFFFFFFFFFFFFFLL, -1);
  turi::fileio_impl::general_fstream_source::~general_fstream_source((turi::fileio_impl::general_fstream_source *)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21800ABF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v15 + 16);
  _Unwind_Resume(a1);
}

std::string *turi::general_ifstream::general_ifstream(std::string *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  a1[9].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB898] + 16;
  boost::iostreams::stream<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>>::stream<std::string>(a1, (uint64_t *)off_24D91DA98, a2);
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  a1[9].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA80;
  v4 = a1 + 8;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)a2;
    a1[8].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_21800ACE0(void *a1, int a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v17;
  char *exception_ptr;
  __int128 v19;

  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v14 + 16);
  MEMORY[0x219A198F4](v13);
  if (a2 == 3)
  {
    v17 = __cxa_begin_catch(a1);
    *(_QWORD *)&a11 = v12;
    *((_QWORD *)&a11 + 1) = v17;
    turi::general_ifstream::general_ifstream(std::string)::$_2::operator()();
  }
  if (a2 == 2)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    if (exception_ptr[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a11, *(const std::string::value_type **)exception_ptr, *((_QWORD *)exception_ptr + 1));
    }
    else
    {
      v19 = *(_OWORD *)exception_ptr;
      a12 = *((_QWORD *)exception_ptr + 2);
      a11 = v19;
    }
    __cxa_begin_catch(a1);
    turi::general_ifstream::general_ifstream(std::string)::$_1::operator()();
  }
  __cxa_begin_catch(a1);
  *(_QWORD *)&a11 = v12;
  turi::general_ifstream::general_ifstream(std::string)::$_0::operator()();
}

void sub_21800ADA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *boost::iostreams::stream<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>>::stream<std::string,BOOL>(_QWORD *a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  _QWORD *v8;
  uint64_t v9;
  std::string __p;
  _BYTE v12[56];

  v8 = (_QWORD *)boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base((uint64_t)a1, a2 + 1);
  v9 = *a2;
  *v8 = *a2;
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v9 - 24)) = a2[5];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::fileio_impl::general_fstream_source::general_fstream_source(v12, &__p, *a4);
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), 0);
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open((uint64_t)(a1 + 2), (uint64_t)v12, 0xFFFFFFFFFFFFFFFFLL, -1);
  turi::fileio_impl::general_fstream_source::~general_fstream_source((turi::fileio_impl::general_fstream_source *)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21800AEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v15 + 16);
  _Unwind_Resume(a1);
}

std::string *turi::general_ifstream::general_ifstream(std::string *a1, uint64_t a2, unsigned __int8 a3)
{
  std::string *v5;
  __int128 v6;
  unsigned __int8 v8;

  v8 = a3;
  a1[9].__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB898] + 16;
  boost::iostreams::stream<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>>::stream<std::string,BOOL>(a1, (uint64_t *)off_24D91DA98, a2, &v8);
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  a1[9].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA80;
  v5 = a1 + 8;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)a2;
    a1[8].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_21800AFA4(void *a1, int a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v17;
  char *exception_ptr;
  __int128 v19;

  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v14 + 16);
  MEMORY[0x219A198F4](v13);
  if (a2 == 3)
  {
    v17 = __cxa_begin_catch(a1);
    *(_QWORD *)&a11 = v12;
    *((_QWORD *)&a11 + 1) = v17;
    turi::general_ifstream::general_ifstream(std::string,BOOL)::$_2::operator()();
  }
  if (a2 == 2)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    if (exception_ptr[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a11, *(const std::string::value_type **)exception_ptr, *((_QWORD *)exception_ptr + 1));
    }
    else
    {
      v19 = *(_OWORD *)exception_ptr;
      a12 = *((_QWORD *)exception_ptr + 2);
      a11 = v19;
    }
    __cxa_begin_catch(a1);
    turi::general_ifstream::general_ifstream(std::string,BOOL)::$_1::operator()();
  }
  __cxa_begin_catch(a1);
  *(_QWORD *)&a11 = v12;
  turi::general_ifstream::general_ifstream(std::string,BOOL)::$_0::operator()();
}

void sub_21800B064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t turi::general_ifstream::file_size(turi::neural_net::shared_float_array **this)
{
  return turi::fileio_impl::general_fstream_source::file_size(this + 11);
}

uint64_t turi::general_ifstream::get_bytes_read(turi::general_ifstream *this)
{
  return turi::fileio_impl::general_fstream_source::get_bytes_read((turi::general_ifstream *)((char *)this + 88));
}

_QWORD *boost::iostreams::stream<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>>::stream<std::string>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::string __p;
  _BYTE v10[80];

  v6 = (_QWORD *)boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::stream_base((uint64_t)a1, a2 + 1);
  v7 = *a2;
  *v6 = *a2;
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v7 - 24)) = a2[5];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::fileio_impl::general_fstream_sink::general_fstream_sink(v10, &__p);
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), 0);
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open((uint64_t)(a1 + 1), (uint64_t)v10, -1);
  turi::fileio_impl::general_fstream_sink::~general_fstream_sink((turi::fileio_impl::general_fstream_sink *)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21800B178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v16 + 8);
  _Unwind_Resume(a1);
}

_QWORD *turi::general_ofstream::general_ofstream(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  a1[29] = MEMORY[0x24BEDB898] + 16;
  boost::iostreams::stream<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>>::stream<std::string>(a1, (uint64_t *)off_24D920FD8, a2);
  *a1 = &unk_24D920F98;
  a1[29] = &unk_24D920FC0;
  v4 = (std::string *)(a1 + 26);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)a2;
    a1[28] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_21800B268(void *a1, int a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v17;
  char *exception_ptr;
  __int128 v19;

  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v14 + 8);
  MEMORY[0x219A198F4](v13);
  switch(a2)
  {
    case 4:
      __cxa_begin_catch(a1);
      __cxa_rethrow();
    case 3:
      v17 = __cxa_begin_catch(a1);
      *(_QWORD *)&a11 = v12;
      *((_QWORD *)&a11 + 1) = v17;
      turi::general_ofstream::general_ofstream(std::string)::$_2::operator()();
    case 2:
      exception_ptr = (char *)__cxa_get_exception_ptr(a1);
      if (exception_ptr[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&a11, *(const std::string::value_type **)exception_ptr, *((_QWORD *)exception_ptr + 1));
      }
      else
      {
        v19 = *(_OWORD *)exception_ptr;
        a12 = *((_QWORD *)exception_ptr + 2);
        a11 = v19;
      }
      __cxa_begin_catch(a1);
      turi::general_ofstream::general_ofstream(std::string)::$_1::operator()();
  }
  __cxa_begin_catch(a1);
  *(_QWORD *)&a11 = v12;
  turi::general_ofstream::general_ofstream(std::string)::$_0::operator()();
}

void sub_21800B340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *boost::iostreams::stream<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>>::stream<std::string,BOOL>(_QWORD *a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  _QWORD *v8;
  uint64_t v9;
  std::string __p;
  _BYTE v12[80];

  v8 = (_QWORD *)boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::stream_base((uint64_t)a1, a2 + 1);
  v9 = *a2;
  *v8 = *a2;
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v9 - 24)) = a2[5];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  turi::fileio_impl::general_fstream_sink::general_fstream_sink(v12, &__p, *a4);
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), 0);
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open((uint64_t)(a1 + 1), (uint64_t)v12, -1);
  turi::fileio_impl::general_fstream_sink::~general_fstream_sink((turi::fileio_impl::general_fstream_sink *)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21800B458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v16 + 8);
  _Unwind_Resume(a1);
}

_QWORD *turi::general_ofstream::general_ofstream(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  std::string *v5;
  __int128 v6;
  unsigned __int8 v8;

  v8 = a3;
  a1[29] = MEMORY[0x24BEDB898] + 16;
  boost::iostreams::stream<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>>::stream<std::string,BOOL>(a1, (uint64_t *)off_24D920FD8, a2, &v8);
  *a1 = &unk_24D920F98;
  a1[29] = &unk_24D920FC0;
  v5 = (std::string *)(a1 + 26);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)a2;
    a1[28] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_21800B550(void *a1, int a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 *a10, __int128 a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *exception_ptr;
  __int128 v18;

  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v14 + 8);
  MEMORY[0x219A198F4](v13);
  if (a2 == 3)
  {
    __cxa_get_exception_ptr(a1);
    a9 = MEMORY[0x24BEDB8F0] + 16;
    __cxa_begin_catch(a1);
    *(_QWORD *)&a11 = v12;
    *((_QWORD *)&a11 + 1) = &a9;
    turi::general_ofstream::general_ofstream(std::string,BOOL)::$_2::operator()();
  }
  if (a2 == 2)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    if (exception_ptr[23] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a11, *(const std::string::value_type **)exception_ptr, *((_QWORD *)exception_ptr + 1));
    }
    else
    {
      v18 = *(_OWORD *)exception_ptr;
      a12 = *((_QWORD *)exception_ptr + 2);
      a11 = v18;
    }
    __cxa_begin_catch(a1);
    a9 = v12;
    a10 = &a11;
    turi::general_ofstream::general_ofstream(std::string,BOOL)::$_1::operator()();
  }
  __cxa_begin_catch(a1);
  *(_QWORD *)&a11 = v12;
  turi::general_ofstream::general_ofstream(std::string,BOOL)::$_0::operator()();
}

void sub_21800B62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL turi::general_ofstream::good(turi::general_ofstream *this)
{
  return *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) == 0;
}

BOOL turi::general_ofstream::fail(turi::general_ofstream *this)
{
  return (*((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) & 5) != 0;
}

uint64_t boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,std::istream>::stream_base(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;

  v4 = (void *)(a1 + 16);
  std::streambuf::basic_streambuf();
  *(_DWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 4;
  *(_QWORD *)(a1 + 16) = &unk_24D91DC48;
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = a2[3];
  v6 = a2[1];
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = a2[2];
  *(_QWORD *)(a1 + 8) = 0;
  v7 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v7, v4);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v8 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24)) = a2[3];
  return a1;
}

void sub_21800B774(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v1);
  _Unwind_Resume(a1);
}

void boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[6];
  char v14;

  v4 = *(_QWORD *)(a2 + 8);
  v13[0] = *(_QWORD *)a2;
  v13[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 24);
  v13[2] = *(_QWORD *)(a2 + 16);
  v13[3] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = *(_QWORD *)(a2 + 40);
  v13[4] = *(_QWORD *)(a2 + 32);
  v13[5] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v14 = *(_BYTE *)(a2 + 48);
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open_impl(a1, (uint64_t)v13, a3, a4);
  turi::fileio_impl::general_fstream_source::~general_fstream_source((turi::fileio_impl::general_fstream_source *)v13);
}

void sub_21800B820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::fileio_impl::general_fstream_source::~general_fstream_source((turi::fileio_impl::general_fstream_source *)va);
  _Unwind_Resume(a1);
}

void boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open_impl(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  std::error_code v4;
  std::ios_base::failure v5;

  if ((*(_BYTE *)(a1 + 168) & 1) != 0)
  {
    *(_QWORD *)&v4.__val_ = 1;
    v4.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v5, "already open", &v4);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v5);
  }
  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open(a1, a2, a3, a4);
}

void sub_21800B888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  _Unwind_Resume(a1);
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::open(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[6];
  char v22;

  v6 = turi::fileio::FILEIO_READER_BUFFER_SIZE;
  if (a3 != -1)
    v6 = a3;
  v7 = 2;
  if (a4 > 2)
    v7 = a4;
  if (a4 == -1)
    v7 = 4;
  *(_QWORD *)(a1 + 160) = v7;
  if (v6 <= 1)
    LODWORD(v6) = 1;
  v8 = v6 + v7;
  if (*(_QWORD *)(a1 + 152) != v8)
  {
    v9 = v8;
    v10 = operator new(v8);
    v11 = *(void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v10;
    *(_QWORD *)(a1 + 152) = v9;
    if (v11)
      operator delete(v11);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  v12 = *(_QWORD *)(a2 + 8);
  v21[0] = *(_QWORD *)a2;
  v21[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_QWORD *)(a2 + 24);
  v21[2] = *(_QWORD *)(a2 + 16);
  v21[3] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(_QWORD *)(a2 + 40);
  v21[4] = *(_QWORD *)(a2 + 32);
  v21[5] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v22 = *(_BYTE *)(a2 + 48);
  boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>::reset((turi::fileio_impl::general_fstream_source *)(a1 + 72), (uint64_t)v21);
  turi::fileio_impl::general_fstream_source::~general_fstream_source((turi::fileio_impl::general_fstream_source *)v21);
  *(_DWORD *)(a1 + 168) |= 1u;
  *(_DWORD *)(a1 + 64) &= 0xFFFFFFF8;
}

void sub_21800B9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::fileio_impl::general_fstream_source::~general_fstream_source((turi::fileio_impl::general_fstream_source *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>::reset(turi::fileio_impl::general_fstream_source *a1, uint64_t a2)
{
  uint64_t result;

  if (*((_BYTE *)a1 + 56))
  {
    turi::fileio_impl::general_fstream_source::~general_fstream_source(a1);
    *((_BYTE *)a1 + 56) = 0;
  }
  result = turi::fileio_impl::general_fstream_source::general_fstream_source((uint64_t)a1, a2);
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t turi::fileio_impl::general_fstream_source::general_fstream_source(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 24) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_BYTE *)(result + 48) = *(_BYTE *)(a2 + 48);
  return result;
}

uint64_t boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,std::ostream>::stream_base(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;

  v4 = (void *)(a1 + 8);
  std::streambuf::basic_streambuf();
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 4;
  *(_QWORD *)(a1 + 8) = &unk_24D921188;
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = a2[3];
  v6 = a2[1];
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = a2[2];
  v7 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v7, v4);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v8 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24)) = a2[3];
  return a1;
}

void sub_21800BB5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer(v1);
  _Unwind_Resume(a1);
}

void boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[80];

  turi::fileio_impl::general_fstream_sink::general_fstream_sink((uint64_t)v5, a2);
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open_impl(a1, (uint64_t)v5, a3);
  turi::fileio_impl::general_fstream_sink::~general_fstream_sink((turi::fileio_impl::general_fstream_sink *)v5);
}

void sub_21800BBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::fileio_impl::general_fstream_sink::~general_fstream_sink((turi::fileio_impl::general_fstream_sink *)&a9);
  _Unwind_Resume(a1);
}

void boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open_impl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::error_code v3;
  std::ios_base::failure v4;

  if ((*(_BYTE *)(a1 + 192) & 1) != 0)
  {
    *(_QWORD *)&v3.__val_ = 1;
    v3.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v4, "already open", &v3);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v4);
  }
  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open(a1, a2, a3);
}

void sub_21800BC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  _Unwind_Resume(a1);
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::open(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  _BYTE v9[80];

  if (a3 == -1)
    v5 = turi::fileio::FILEIO_WRITER_BUFFER_SIZE;
  else
    v5 = a3;
  if (v5)
  {
    if (*(_QWORD *)(a1 + 176) != (int)v5)
    {
      v6 = operator new((int)v5);
      v7 = *(void **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v6;
      *(_QWORD *)(a1 + 176) = (int)v5;
      if (v7)
        operator delete(v7);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  turi::fileio_impl::general_fstream_sink::general_fstream_sink((uint64_t)v9, a2);
  boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>::reset((turi::fileio_impl::general_fstream_sink *)(a1 + 72), (uint64_t)v9);
  turi::fileio_impl::general_fstream_sink::~general_fstream_sink((turi::fileio_impl::general_fstream_sink *)v9);
  if (v5 <= 1)
    v8 = 1;
  else
    v8 = 3;
  *(_DWORD *)(a1 + 192) |= v8;
  *(_DWORD *)(a1 + 64) &= 0xFFFFFFF8;
}

void sub_21800BD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::fileio_impl::general_fstream_sink::~general_fstream_sink((turi::fileio_impl::general_fstream_sink *)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>::reset(turi::fileio_impl::general_fstream_sink *a1, uint64_t a2)
{
  uint64_t result;

  if (*((_BYTE *)a1 + 80))
  {
    turi::fileio_impl::general_fstream_sink::~general_fstream_sink(a1);
    *((_BYTE *)a1 + 80) = 0;
  }
  result = turi::fileio_impl::general_fstream_sink::general_fstream_sink((uint64_t)a1, a2);
  *(_BYTE *)(result + 80) = 1;
  return result;
}

uint64_t turi::fileio_impl::general_fstream_sink::general_fstream_sink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::string *v12;
  __int128 v13;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return a1;
}

{
  int v4;
  uint64_t v5;
  const std::string::value_type *v6;
  uint64_t v7;
  int v8;
  int v9;
  _BOOL4 v10;
  std::string __p;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  v4 = *(char *)(a2 + 23);
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    LOBYTE(v4) = *(_BYTE *)(a2 + 23);
  }
  else
  {
    __p = *(std::string *)a2;
  }
  v5 = 0;
  v6 = *(const std::string::value_type **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
  {
    v6 = (const std::string::value_type *)a2;
    v7 = v4;
  }
  while (-v7 != v5 && v5 != -3)
  {
    v8 = v6[v7 - 1 + v5];
    v9 = aGz[v5-- + 2];
    if (v8 != v9)
    {
      v10 = 0;
      goto LABEL_11;
    }
  }
  v10 = v5 == -3;
LABEL_11:
  turi::fileio_impl::general_fstream_sink::open_file(a1, (uint64_t)&__p, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21800BE28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *OUTLINED_FUNCTION_1_3(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_7(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 16))(*(_QWORD *)(v1 + 8));
}

__n128 OUTLINED_FUNCTION_4_3(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *a1;
  *(_QWORD *)(v1 - 80) = a1[1].n128_u64[0];
  *(__n128 *)(v1 - 96) = result;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  uint64_t v0;
  uint64_t v1;

  return file_logger::operator<<<std::string>(v0, v1 - 64);
}

__n128 OUTLINED_FUNCTION_15_4(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

__n128 OUTLINED_FUNCTION_16_1(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_17_2()
{
  uint64_t v0;
  uint64_t v1;

  return turi::error::io_error::io_error(v0, v1 - 96);
}

std::string *OUTLINED_FUNCTION_18_2(uint64_t a1, const std::string::value_type *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::string *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  return std::string::append((std::string *)&a23, a2);
}

uint64_t OUTLINED_FUNCTION_20_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return turi::error::io_error::io_error(v2, a2);
}

__n128 OUTLINED_FUNCTION_28_1(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

__n128 OUTLINED_FUNCTION_29_0@<Q0>(uint64_t a1@<X8>)
{
  return *(__n128 *)a1;
}

__n128 OUTLINED_FUNCTION_30_1@<Q0>(uint64_t a1@<X8>)
{
  return *(__n128 *)a1;
}

void OUTLINED_FUNCTION_31_0()
{
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

std::string *OUTLINED_FUNCTION_32_0(uint64_t a1, const std::string::value_type *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::string *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return std::string::append((std::string *)&a19, a2);
}

std::string *OUTLINED_FUNCTION_35(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::string *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  return std::string::append((std::string *)&a23, a2, a3);
}

std::string *OUTLINED_FUNCTION_36_0(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  uint64_t v3;

  return std::string::append((std::string *)(v3 - 96), a2, a3);
}

std::string *OUTLINED_FUNCTION_37_0(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v2;

  return std::string::append((std::string *)(v2 - 96), a2);
}

const char *OUTLINED_FUNCTION_39(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  return std::exception::what(*(const std::exception **)(v1 + 8));
}

void OUTLINED_FUNCTION_44()
{
  log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
}

uint64_t _GLOBAL__sub_I_general_fstream_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_21800C0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 79) < 0)
    operator delete(*v15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void turi::fileio_impl::general_fstream_sink::open_file(uint64_t a1, uint64_t a2, int a3)
{
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  std::string v17;
  __n128 v18;
  uint64_t v19;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  turi::sanitize_url((__n128 *)&v17, &v18);
  v6 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v6);
  *(__n128 *)v6 = v18;
  *(_QWORD *)(a1 + 72) = v19;
  HIBYTE(v19) = 0;
  v18.n128_u8[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v16 = 20;
  std::allocate_shared[abi:ne180100]<turi::union_fstream,std::allocator<turi::union_fstream>,std::string &,unsigned int,void>(a2, &v16, &v18);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1, (__int128 *)&v18);
  v7 = (std::__shared_weak_count *)v18.n128_u64[1];
  if (v18.n128_u64[1])
  {
    v8 = (unint64_t *)(v18.n128_u64[1] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_BYTE *)(a1 + 48) = a3;
  if (a3)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN5boost9iostreams21basic_gzip_compressorINS_9allocatorIcEEEENS4_IS6_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v18);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 16, (__int128 *)&v18);
    v10 = (std::__shared_weak_count *)v18.n128_u64[1];
    if (v18.n128_u64[1])
    {
      v11 = (unint64_t *)(v18.n128_u64[1] + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  turi::union_fstream::get_ostream(*(_QWORD *)a1, &v18);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 32, (__int128 *)&v18);
  v13 = (std::__shared_weak_count *)v18.n128_u64[1];
  if (v18.n128_u64[1])
  {
    v14 = (unint64_t *)(v18.n128_u64[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_21800C2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::fileio_impl::general_fstream_sink::general_fstream_sink(uint64_t a1, uint64_t a2, int a3)
{
  std::string __p;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::fileio_impl::general_fstream_sink::open_file(a1, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21800C384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 79) < 0)
    operator delete(*v15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

const char *turi::fileio_impl::general_fstream_sink::write(turi::fileio_impl::general_fstream_sink *this, const char *a2, uint64_t a3)
{
  if (*((_BYTE *)this + 48))
    return boost::iostreams::basic_gzip_compressor<std::allocator<char>>::write<std::ostream>(*((_QWORD *)this + 2), *((_QWORD **)this + 4), a2, a3);
  std::ostream::write();
  if ((*(_BYTE *)(*((_QWORD *)this + 4) + *(_QWORD *)(**((_QWORD **)this + 4) - 24) + 32) & 5) != 0)
    return 0;
  else
    return (const char *)a3;
}

const char *boost::iostreams::basic_gzip_compressor<std::allocator<char>>::write<std::ostream>(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
    return boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::write<std::ostream>((uint64_t *)a1, a2, a3, a4);
  if (*(char *)(a1 + 39) < 0)
  {
    v10 = *(_QWORD *)(a1 + 64);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v8 = a1 + 16;
    v9 = *(unsigned __int8 *)(a1 + 39);
    v10 = *(_QWORD *)(a1 + 64);
  }
  v11 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 40);
  v12 = *(_QWORD *)(a1 + 64)
      + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 96))(v11, v8 + v10, v9 - v10);
  *(_QWORD *)(a1 + 64) = v12;
  if (*(char *)(a1 + 39) < 0)
    v13 = *(_QWORD *)(a1 + 24);
  else
    v13 = *(unsigned __int8 *)(a1 + 39);
  if (v12 == v13)
  {
    *(_DWORD *)(a1 + 72) |= 1u;
    return boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::write<std::ostream>((uint64_t *)a1, a2, a3, a4);
  }
  return 0;
}

void turi::fileio_impl::general_fstream_sink::~general_fstream_sink(turi::fileio_impl::general_fstream_sink *this)
{
  uint64_t v2;

  if (*(_QWORD *)this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
    {
      if (!*(_QWORD *)(v2 + 8))
        turi::fileio_impl::general_fstream_sink::close(this);
    }
  }
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void sub_21800C58C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, uint64_t a10)
{
  uint64_t v10;
  file_logger *v11;
  pthread_key_t *v12;
  pthread_key_t *v13;
  pthread_key_t *v14;

  __cxa_begin_catch(a1);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/fileio/general_fstream_sink.cpp", "~general_fstream_sink", 75, 1);
    v12 = file_logger::operator<<((pthread_key_t *)v11, "Exception occured on closing ");
    if (*(char *)(v10 + 79) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)(v10 + 56), *(_QWORD *)(v10 + 64));
    }
    else
    {
      __p = *(_OWORD *)(v10 + 56);
      a10 = *(_QWORD *)(v10 + 72);
    }
    v13 = (pthread_key_t *)file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    v14 = file_logger::operator<<(v13, ". The file may not be properly written");
    file_logger::operator<<((uint64_t)v14, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
    if (SHIBYTE(a10) < 0)
      operator delete((void *)__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x21800C554);
}

void turi::fileio_impl::general_fstream_sink::close(turi::fileio_impl::general_fstream_sink *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 16);
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    boost::iostreams::basic_gzip_compressor<std::allocator<char>>::close<std::ostream>(v2, *((uint64_t **)this + 4), 16);
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](v3);
  }
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)this + 4);
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](this);
}

uint64_t boost::iostreams::basic_gzip_compressor<std::allocator<char>>::close<std::ostream>(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t result;

  if (a3 == 16 && (*(_BYTE *)(a1 + 72) & 1) == 0)
    boost::iostreams::basic_gzip_compressor<std::allocator<char>>::write<std::ostream>(a1, a2, 0, 0);
  result = boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::close<std::ostream>((uint64_t **)a1, a2, a3);
  if (a3 == 16 && (*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    boost::iostreams::basic_gzip_compressor<std::allocator<char>>::write_long<std::ostream>(*(_DWORD *)(*(_QWORD *)a1 + 12), a2);
    result = (uint64_t)boost::iostreams::basic_gzip_compressor<std::allocator<char>>::write_long<std::ostream>(*(_DWORD *)(*(_QWORD *)a1 + 20), a2);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    **(_BYTE **)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 63) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

void sub_21800C740(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 63) < 0)
  {
    **(_BYTE **)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 48) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 40) = 0;
    *(_BYTE *)(v1 + 63) = 0;
  }
  *(_QWORD *)(v1 + 64) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  __cxa_rethrow();
}

void sub_21800C774(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::union_fstream,std::allocator<turi::union_fstream>,std::string &,unsigned int,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<turi::union_fstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,unsigned int,std::allocator<turi::union_fstream>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_21800C7D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::union_fstream>::__shared_ptr_emplace[abi:ne180100]<std::string &,unsigned int,std::allocator<turi::union_fstream>,0>(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_24D922638;
  a1[1] = 0;
  std::allocator<turi::union_fstream>::construct[abi:ne180100]<turi::union_fstream,std::string &,unsigned int>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_21800C838(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::union_fstream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D922638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::union_fstream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D922638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::union_fstream>::__on_zero_shared(uint64_t a1)
{
  turi::union_fstream::~union_fstream((turi::union_fstream *)(a1 + 24));
}

void std::allocator<turi::union_fstream>::construct[abi:ne180100]<turi::union_fstream,std::string &,unsigned int>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  void *__p[2];
  char v8;
  std::string v9;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v9 = *(std::string *)a3;
  v6 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::union_fstream::union_fstream(a2, &v9, v6, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_21800C938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN5boost9iostreams21basic_gzip_compressorINS_9allocatorIcEEEENS4_IS6_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x68uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN5boost9iostreams21basic_gzip_compressorINS_9allocatorIcEEEENS4_IS6_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_21800C9A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN5boost9iostreams21basic_gzip_compressorINS_9allocatorIcEEEENS4_IS6_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(_QWORD *a1)
{
  char v3;

  a1[2] = 0;
  *a1 = &unk_24D922688;
  a1[1] = 0;
  std::allocator<boost::iostreams::basic_gzip_compressor<std::allocator<char>>>::construct[abi:ne180100]<boost::iostreams::basic_gzip_compressor<std::allocator<char>>>((uint64_t)&v3, (uint64_t)(a1 + 3));
  return a1;
}

void sub_21800C9FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<boost::iostreams::basic_gzip_compressor<std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D922688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<boost::iostreams::basic_gzip_compressor<std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D922688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<boost::iostreams::basic_gzip_compressor<std::allocator<char>>>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<boost::iostreams::basic_gzip_compressor<std::allocator<char>>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<boost::iostreams::basic_gzip_compressor<std::allocator<char>>>::construct[abi:ne180100]<boost::iostreams::basic_gzip_compressor<std::allocator<char>>>(uint64_t a1, uint64_t a2)
{
  void *v3[2];
  char v4;
  void *v5[2];
  char v6;
  __int128 v7;
  void *v8;
  char v9;
  void *__p;
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v5, "");
  std::string::basic_string[abi:ne180100]<0>(v3, "");
  boost::iostreams::gzip_params::gzip_params((uint64_t)&v7, -1, 8, 15, 8, 0, (__int128 *)v5, (__int128 *)v3, 0);
  boost::iostreams::basic_gzip_compressor<std::allocator<char>>::basic_gzip_compressor(a2, &v7, 0x1000uLL);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
  if (v4 < 0)
    operator delete(v3[0]);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_21800CB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23)
{
  boost::iostreams::gzip_params::~gzip_params(&a23);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

void boost::iostreams::gzip_params::~gzip_params(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t boost::iostreams::gzip_params::gzip_params(uint64_t a1, int a2, int a3, int a4, int a5, int a6, __int128 *a7, __int128 *a8, uint64_t a9)
{
  __int128 v11;
  std::string *v12;
  __int128 v13;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_DWORD *)(a1 + 16) = a6;
  *(_WORD *)(a1 + 20) = 0;
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v11 = *a7;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a7 + 2);
    *(_OWORD *)(a1 + 24) = v11;
  }
  v12 = (std::string *)(a1 + 48);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v13 = *a8;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a8 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *(_QWORD *)(a1 + 72) = a9;
  return a1;
}

void sub_21800CC70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t boost::iostreams::basic_gzip_compressor<std::allocator<char>>::basic_gzip_compressor(uint64_t a1, __int128 *a2, size_t a3)
{
  const std::string::value_type *v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  char v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  __int128 v21;
  uint64_t v22;
  std::string v23;
  std::string v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  std::string v28;
  void *__p[2];
  std::string::size_type v30;
  uint64_t v31;

  v21 = *a2;
  v22 = *((_QWORD *)a2 + 2);
  v6 = (char *)a2 + 24;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    v23.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  }
  if (*((char *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&v24, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  else
    v24 = *(std::string *)((_BYTE *)a2 + 2);
  v25 = *((_QWORD *)a2 + 9);
  WORD2(v22) = 257;
  v26 = v21;
  v27 = v22;
  v28 = v23;
  memset(&v23, 0, sizeof(v23));
  *(_OWORD *)__p = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  v7 = v24.__r_.__value_.__r.__words[2];
  memset(&v24, 0, sizeof(v24));
  v30 = v7;
  v31 = v25;
  boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::symmetric_filter<boost::iostreams::zlib_params>((uint64_t *)a1, a3, (uint64_t)&v26);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  if (*((char *)a2 + 47) >= 0)
    v8 = *((unsigned __int8 *)a2 + 47);
  else
    v8 = *((_QWORD *)a2 + 4);
  if (*((char *)a2 + 71) >= 0)
    v9 = *((unsigned __int8 *)a2 + 71);
  else
    v9 = *((_QWORD *)a2 + 7);
  v10 = v8 + 11;
  if (!v8)
    v10 = 10;
  if (v9)
    v11 = v9 + 1;
  else
    v11 = 0;
  v12 = *(_DWORD *)a2 == 9;
  v13 = *(_DWORD *)a2 == 1;
  std::string::reserve((std::string *)(a1 + 16), v11 + v10);
  std::string::push_back((std::string *)(a1 + 16), 31);
  std::string::push_back((std::string *)(a1 + 16), -117);
  std::string::push_back((std::string *)(a1 + 16), 8);
  std::string::push_back((std::string *)(a1 + 16), (8 * (v8 != 0)) | (16 * (v9 != 0)));
  std::string::push_back((std::string *)(a1 + 16), *((_BYTE *)a2 + 72));
  std::string::push_back((std::string *)(a1 + 16), *((_BYTE *)a2 + 73));
  std::string::push_back((std::string *)(a1 + 16), *((_BYTE *)a2 + 74));
  std::string::push_back((std::string *)(a1 + 16), *((_BYTE *)a2 + 75));
  std::string::push_back((std::string *)(a1 + 16), (2 * v12) | (4 * v13));
  std::string::push_back((std::string *)(a1 + 16), -1);
  if (v8)
  {
    v14 = *((char *)a2 + 47);
    if (v14 >= 0)
      v15 = v6;
    else
      v15 = (const std::string::value_type *)*((_QWORD *)a2 + 3);
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)a2 + 47);
    else
      v16 = *((_QWORD *)a2 + 4);
    std::string::append((std::string *)(a1 + 16), v15, v16);
    std::string::push_back((std::string *)(a1 + 16), 0);
  }
  if (v9)
  {
    v17 = *((_BYTE *)a2 + 71);
    if (v17 >= 0)
      v18 = (const std::string::value_type *)(a2 + 3);
    else
      v18 = (const std::string::value_type *)*((_QWORD *)a2 + 6);
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)a2 + 71);
    else
      v19 = *((_QWORD *)a2 + 7);
    std::string::append((std::string *)(a1 + 16), v18, v19);
    std::string::push_back((std::string *)(a1 + 16), 0);
  }
  return a1;
}

void sub_21800CF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::symmetric_filter<boost::iostreams::zlib_params>(uint64_t *a1, size_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl::impl<boost::iostreams::zlib_params>(v6, a2, a3);
  return boost::shared_ptr<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl>::shared_ptr<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(a1, v6);
}

void sub_21800D024(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1090C401D1B96A4);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl::impl<boost::iostreams::zlib_params>(uint64_t a1, size_t a2, uint64_t a3)
{
  boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>::zlib_compressor_impl((boost::iostreams::detail::zlib_base *)a1, a3);
  *(_QWORD *)(a1 + 32) = operator new(a2);
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_21800D084(_Unwind_Exception *a1)
{
  z_stream **v1;

  boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>::~zlib_compressor_impl(v1);
  _Unwind_Resume(a1);
}

boost::iostreams::detail::zlib_base *boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>::zlib_compressor_impl(boost::iostreams::detail::zlib_base *a1, uint64_t a2)
{
  boost::iostreams::detail::zlib_base *v4;

  v4 = boost::iostreams::detail::zlib_base::zlib_base(a1);
  boost::iostreams::detail::zlib_base::do_init((uint64_t)v4, a2, 1, 0, 0, v4);
  return a1;
}

void sub_21800D0D8(_Unwind_Exception *a1)
{
  boost::iostreams::detail::zlib_base *v1;

  boost::iostreams::detail::zlib_base::~zlib_base(v1);
  _Unwind_Resume(a1);
}

void boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>::~zlib_compressor_impl(z_stream **a1)
{
  boost::iostreams::detail::zlib_base::reset(a1, 1, 0);
  boost::iostreams::detail::zlib_base::~zlib_base((boost::iostreams::detail::zlib_base *)a1);
}

uint64_t *boost::shared_ptr<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl>::shared_ptr<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_21800D170(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D9226D8;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_21800D1E4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  boost::checked_delete<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(v1);
  __cxa_rethrow();
}

void sub_21800D1F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::checked_delete<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(uint64_t result)
{
  z_stream **v1;
  void *v2;

  if (result)
  {
    v1 = (z_stream **)result;
    v2 = *(void **)(result + 32);
    if (v2)
      operator delete(v2);
    boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>::~zlib_compressor_impl(v1);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::impl>::dispose(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(void **)(v1 + 32);
    if (v2)
      operator delete(v2);
    boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>::~zlib_compressor_impl((z_stream **)v1);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

void std::allocator<boost::iostreams::basic_gzip_compressor<std::allocator<char>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  boost::detail::shared_count::~shared_count((unsigned int **)(a2 + 8));
}

const char *boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::write<std::ostream>(uint64_t *a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  const char *v14;

  v7 = *a1;
  v8 = *(_DWORD *)(*a1 + 64);
  if ((v8 & 2) == 0)
  {
    *(_DWORD *)(v7 + 64) = v8 | 2;
    v9 = *(_QWORD *)(v7 + 32);
    v10 = v9 + *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v7 + 48) = v9;
    *(_QWORD *)(v7 + 56) = v10;
  }
  v14 = a3;
  v11 = &a3[a4];
  while (v14 != v11)
  {
    v12 = *(char **)(v7 + 56);
    if (*(char **)(v7 + 48) == v12)
    {
      if (!boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::flush<std::ostream>(a1, a2))return (const char *)(v14 - a3);
      v12 = *(char **)(v7 + 56);
    }
    if (!boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>::filter((uint64_t *)*a1, &v14, v11, (char **)(v7 + 48), v12, 0))
    {
      boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::flush<std::ostream>(a1, a2);
      return (const char *)(v14 - a3);
    }
  }
  return (const char *)(v14 - a3);
}

BOOL boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>::filter(uint64_t *a1, const char **a2, const char *a3, char **a4, char *a5, int a6)
{
  int *v10;
  uint64_t v11;

  boost::iostreams::detail::zlib_base::before(a1, a2, a3, a4, a5);
  v10 = (int *)&boost::iostreams::zlib::finish;
  if (!a6)
    v10 = (int *)&boost::iostreams::zlib::no_flush;
  v11 = boost::iostreams::detail::zlib_base::xdeflate((z_streamp *)a1, *v10);
  boost::iostreams::detail::zlib_base::after((uLong)a1, (const Bytef **)a2, (const Bytef **)a4, 1);
  boost::iostreams::zlib_error::check(v11);
  return (_DWORD)v11 != 1;
}

BOOL boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::flush<std::ostream>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 48) - v3;
  v5 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 40);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, v3, v4);
  v7 = v6;
  v9 = v4 <= v6;
  v8 = v4 - v6;
  v9 = v9 || v6 < 1;
  if (!v9)
    memmove(*(void **)(*a1 + 32), (const void *)(*(_QWORD *)(*a1 + 32) + v6), v8);
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 32);
  v12 = v11 + *(_QWORD *)(*a1 + 40);
  *(_QWORD *)(v10 + 48) = v11 + v8;
  *(_QWORD *)(v10 + 56) = v12;
  return v7 != 0;
}

uint64_t boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::close<std::ostream>(uint64_t **a1, _QWORD *a2, int a3)
{
  uint64_t *v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  const char *v15;
  char v16;

  v3 = *a1;
  if (a3 == 16)
  {
    v6 = *((_DWORD *)v3 + 16);
    if ((v6 & 2) == 0)
    {
      *((_DWORD *)v3 + 16) = v6 | 2;
      v7 = v3[4];
      v8 = v7 + v3[5];
      v3[6] = v7;
      v3[7] = v8;
    }
    v16 = 0;
    v15 = &v16;
    do
    {
      v9 = (char *)v3[7];
      v10 = (char *)v3[6] == v9
         || boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>::filter(*a1, &v15, v15, (char **)v3 + 6, v9, 1);
      boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_compressor_impl<std::allocator<char>>,std::allocator<char>>::flush<std::ostream>((uint64_t *)a1, a2);
    }
    while (v10);
    v11 = *a1;
    *((_DWORD *)v11 + 16) = 0;
    v12 = v11[4];
    v11[6] = v12;
    v11[7] = v12;
    return boost::iostreams::detail::zlib_base::reset((z_stream **)v11, 1, 1);
  }
  else
  {
    *((_DWORD *)v3 + 16) = 0;
    v14 = v3[4];
    v3[6] = v14;
    v3[7] = v14;
    return boost::iostreams::detail::zlib_base::reset((z_stream **)v3, 1, 1);
  }
}

void sub_21800D5C8(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)(v2 + 64) = 0;
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 48) = v3;
  *(_QWORD *)(v2 + 56) = v3;
  boost::iostreams::detail::zlib_base::reset((z_stream **)v2, 1, 1);
  __cxa_rethrow();
}

void sub_21800D5FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *boost::iostreams::basic_gzip_compressor<std::allocator<char>>::write_long<std::ostream>(int a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  _QWORD *v7;
  _BYTE *v8;
  _QWORD *v9;
  _BYTE *v10;
  _QWORD *result;
  _BYTE *v12;

  v4 = *a2;
  v5 = *(_QWORD **)((char *)a2 + *(_QWORD *)(*a2 - 24) + 40);
  v6 = (_BYTE *)v5[6];
  if (v6 == (_BYTE *)v5[7])
  {
    (*(void (**)(_QWORD *, _QWORD))(*v5 + 104))(v5, a1);
    v4 = *a2;
  }
  else
  {
    v5[6] = v6 + 1;
    *v6 = a1;
  }
  v7 = *(_QWORD **)((char *)a2 + *(_QWORD *)(v4 - 24) + 40);
  v8 = (_BYTE *)v7[6];
  if (v8 == (_BYTE *)v7[7])
  {
    (*(void (**)(_QWORD *, _QWORD))(*v7 + 104))(v7, BYTE1(a1));
    v4 = *a2;
  }
  else
  {
    v7[6] = v8 + 1;
    *v8 = BYTE1(a1);
  }
  v9 = *(_QWORD **)((char *)a2 + *(_QWORD *)(v4 - 24) + 40);
  v10 = (_BYTE *)v9[6];
  if (v10 == (_BYTE *)v9[7])
  {
    (*(void (**)(_QWORD *, _QWORD))(*v9 + 104))(v9, BYTE2(a1));
    v4 = *a2;
  }
  else
  {
    v9[6] = v10 + 1;
    *v10 = BYTE2(a1);
  }
  result = *(_QWORD **)((char *)a2 + *(_QWORD *)(v4 - 24) + 40);
  v12 = (_BYTE *)result[6];
  if (v12 == (_BYTE *)result[7])
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 104))(result, HIBYTE(a1));
  result[6] = v12 + 1;
  *v12 = HIBYTE(a1);
  return result;
}

uint64_t _GLOBAL__sub_I_general_fstream_sink_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::fileio_impl::general_fstream_source::general_fstream_source(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const std::string::value_type *v6;
  uint64_t v7;
  int v8;
  int v9;
  _BOOL4 v10;
  std::string __p;

  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = *(char *)(a2 + 23);
  if (v4 < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    LOBYTE(v4) = *(_BYTE *)(a2 + 23);
  }
  else
  {
    __p = *(std::string *)a2;
  }
  v5 = 0;
  v6 = *(const std::string::value_type **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
  {
    v6 = (const std::string::value_type *)a2;
    v7 = v4;
  }
  while (-v7 != v5 && v5 != -3)
  {
    v8 = v6[v7 - 1 + v5];
    v9 = aGz[v5-- + 2];
    if (v8 != v9)
    {
      v10 = 0;
      goto LABEL_11;
    }
  }
  v10 = v5 == -3;
LABEL_11:
  turi::fileio_impl::general_fstream_source::open_file(a1, (uint64_t)&__p, v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21800D860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void turi::fileio_impl::general_fstream_source::open_file(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  __int128 v15;

  v14 = 12;
  std::allocate_shared[abi:ne180100]<turi::union_fstream,std::allocator<turi::union_fstream>,std::string &,unsigned int,void>(a2, &v14, &v15);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1, &v15);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_BYTE *)(a1 + 48) = a3;
  if (a3)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN5boost9iostreams23basic_gzip_decompressorINS_9allocatorIcEEEENS4_IS6_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v15);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 16, &v15);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  turi::union_fstream::get_istream(*(_QWORD *)a1, &v15);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 32, &v15);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

uint64_t turi::fileio_impl::general_fstream_source::general_fstream_source(uint64_t a1, uint64_t a2, int a3)
{
  std::string __p;

  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::fileio_impl::general_fstream_source::open_file(a1, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21800DA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

uint64_t turi::fileio_impl::general_fstream_source::read(turi::fileio_impl::general_fstream_source *this, char *a2, uint64_t a3)
{
  if (*((_BYTE *)this + 48))
    return boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::read<std::istream>(*((uint64_t **)this + 2), *((_QWORD *)this + 4), (uint64_t)a2, a3);
  std::istream::read();
  return *(_QWORD *)(*((_QWORD *)this + 4) + 8);
}

uint64_t boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::read<std::istream>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base::failure_vtbl *p_p;
  std::string::size_type imp;
  int64_t v19;
  int64_t size;
  std::ios_base::failure __p;
  uint64_t v23;
  std::string v24;
  std::string::size_type __n1;

  v7 = a1 + 14;
  v23 = a2;
  if (*((char *)a1 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, (const std::string::value_type *)a1[14], a1[15]);
  }
  else
  {
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    v24.__r_.__value_.__r.__words[2] = a1[16];
  }
  __n1 = 0;
  if (a4 >= 1)
  {
    v8 = 0;
    while (1)
    {
      v9 = *((_DWORD *)a1 + 34);
      if (v9 == 1)
      {
        *((_DWORD *)a1 + 34) = 2;
        boost::iostreams::detail::gzip_header::reset((boost::iostreams::detail::gzip_header *)(a1 + 2));
        boost::iostreams::detail::gzip_footer::reset((boost::iostreams::detail::gzip_footer *)(a1 + 12));
        v9 = *((_DWORD *)a1 + 34);
      }
      else if (v9 == 5)
      {
        goto LABEL_37;
      }
      if (v9 == 3)
        break;
      if (v9 == 2)
      {
        v10 = boost::iostreams::detail::read_device_impl<boost::iostreams::input>::get<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>>((uint64_t)&v23);
        if (v10 == -2)
          goto LABEL_37;
        if (v10 == -1)
        {
          boost::iostreams::gzip_error::gzip_error(&__p, 4);
          boost::throw_exception<boost::iostreams::gzip_error>(&__p);
        }
        boost::iostreams::detail::gzip_header::process((boost::iostreams::detail::gzip_header *)(a1 + 2), (char)v10);
        if (*((_DWORD *)a1 + 21) != 13)
          goto LABEL_36;
        v11 = 3;
        goto LABEL_35;
      }
      v13 = boost::iostreams::detail::read_device_impl<boost::iostreams::input>::get<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>>((uint64_t)&v23);
      if (v13 == -2)
        goto LABEL_37;
      if (v13 == -1)
      {
        boost::iostreams::gzip_error::gzip_error(&__p, 5);
        boost::throw_exception<boost::iostreams::gzip_error>(&__p);
      }
      boost::iostreams::detail::gzip_footer::process((_DWORD *)a1 + 24, v13);
      if (*((_DWORD *)a1 + 26) != 3)
        goto LABEL_36;
      if (*((_DWORD *)a1 + 24) != *(_DWORD *)(*a1 + 12))
      {
        boost::iostreams::gzip_error::gzip_error(&__p, 2);
        boost::throw_exception<boost::iostreams::gzip_error>(&__p);
      }
      v14 = boost::iostreams::detail::read_device_impl<boost::iostreams::input>::get<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>>((uint64_t)&v23);
      if (v14 == -1)
      {
        v11 = 5;
LABEL_35:
        *((_DWORD *)a1 + 34) = v11;
        goto LABEL_36;
      }
      boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>::putback((uint64_t)&v23, v14);
      v15 = *a1;
      *(_DWORD *)(v15 + 64) = 0;
      v16 = *(_QWORD *)(v15 + 32);
      *(_QWORD *)(v15 + 48) = v16;
      *(_QWORD *)(v15 + 56) = v16;
      *(_BYTE *)(v15 + 28) = 0;
      boost::iostreams::detail::zlib_base::reset((z_stream **)v15, 0, 1);
      *((_DWORD *)a1 + 34) = 1;
      boost::iostreams::detail::gzip_header::reset((boost::iostreams::detail::gzip_header *)(a1 + 2));
      boost::iostreams::detail::gzip_footer::reset((boost::iostreams::detail::gzip_footer *)(a1 + 12));
LABEL_36:
      if (v8 >= a4)
      {
LABEL_37:
        v19 = __n1;
        goto LABEL_39;
      }
    }
    v12 = boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::read<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>>((uLong *)a1, (uint64_t)&v23, (char *)(a3 + v8), a4 - v8);
    if (v12 != -1)
    {
      v8 += v12;
      if (v12 < a4 - v8)
        goto LABEL_37;
      goto LABEL_36;
    }
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, *(char **)(*a1 + 48), *(char **)(*a1 + 56), *(_QWORD *)(*a1 + 56) - *(_QWORD *)(*a1 + 48));
    if (*((char *)&__p.__ec_.__val_ + 7) >= 0)
      p_p = (std::ios_base::failure_vtbl *)&__p;
    else
      p_p = __p.__vftable;
    if (*((char *)&__p.__ec_.__val_ + 7) >= 0)
      imp = *((unsigned __int8 *)&__p.__ec_.__val_ + 7);
    else
      imp = (std::string::size_type)__p.__imp_.__imp_;
    std::string::replace(&v24, 0, __n1, (const std::string::value_type *)p_p, imp);
    __n1 = 0;
    if (*((char *)&__p.__ec_.__val_ + 7) < 0)
      operator delete(__p.__vftable);
    v11 = 4;
    goto LABEL_35;
  }
  v19 = 0;
  v8 = 0;
LABEL_39:
  size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v24.__r_.__value_.__l.__size_;
  if (v19 >= size)
  {
    if (*((char *)a1 + 135) < 0)
    {
      *(_BYTE *)a1[14] = 0;
      a1[15] = 0;
      if (v8)
        goto LABEL_52;
    }
    else
    {
      *((_BYTE *)a1 + 112) = 0;
      *((_BYTE *)a1 + 135) = 0;
      if (v8)
        goto LABEL_52;
    }
    goto LABEL_50;
  }
  boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>::unconsumed_input((uint64_t)&v23, (std::string *)&__p);
  if (*((char *)a1 + 135) < 0)
    operator delete((void *)*v7);
  *(std::runtime_error *)v7 = __p.std::runtime_error;
  v7[2] = *(_QWORD *)&__p.__ec_.__val_;
  if (!v8)
  {
LABEL_50:
    if (*((_DWORD *)a1 + 34) == 5)
      v8 = -1;
  }
LABEL_52:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v8;
}

void sub_21800DE4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error __p, int a10, __int16 a11, char a12, char a13)
{
  std::runtime_error::~runtime_error(&__p);
  JUMPOUT(0x21800DEECLL);
}

void sub_21800DEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  __cxa_end_catch();
  JUMPOUT(0x21800DEECLL);
}

void sub_21800DEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::fileio_impl::general_fstream_source::~general_fstream_source(turi::fileio_impl::general_fstream_source *this)
{
  turi::fileio_impl::general_fstream_source::close(this);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void sub_21800DF38(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21800DF18);
}

void turi::fileio_impl::general_fstream_source::close(turi::fileio_impl::general_fstream_source *this)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)((char *)this + 16);
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::close<std::istream>(v2, *((_QWORD *)this + 4), 8);
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](v3);
  }
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)this + 4);
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](this);
}

uint64_t boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::close<std::istream>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v6;
  std::ios_base::failure v7;

  result = boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::close<std::istream>((uLong *)a1, a2, a3);
  if (a3 == 16)
  {
    v6 = *(_DWORD *)(a1 + 136);
    if (v6 == 4)
    {
      if (*(_DWORD *)(a1 + 104) != 3)
      {
        boost::iostreams::gzip_error::gzip_error(&v7, 5);
        boost::throw_exception<boost::iostreams::gzip_error>(&v7);
      }
      if (*(_DWORD *)(a1 + 96) != *(_DWORD *)(*(_QWORD *)a1 + 12))
      {
        boost::iostreams::gzip_error::gzip_error(&v7, 2);
        boost::throw_exception<boost::iostreams::gzip_error>(&v7);
      }
    }
    else
    {
      if ((v6 - 1) < 2)
      {
        boost::iostreams::gzip_error::gzip_error(&v7, 4);
        boost::throw_exception<boost::iostreams::gzip_error>(&v7);
      }
      if (v6 == 3)
      {
        boost::iostreams::gzip_error::gzip_error(&v7, 5);
        boost::throw_exception<boost::iostreams::gzip_error>(&v7);
      }
    }
  }
  *(_DWORD *)(a1 + 136) = 1;
  return result;
}

void sub_21800E070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  std::runtime_error::~runtime_error(&a10);
  _Unwind_Resume(a1);
}

void sub_21800E0C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  std::runtime_error::~runtime_error(&a10);
  __cxa_end_catch();
  JUMPOUT(0x21800E0D8);
}

uint64_t turi::fileio_impl::general_fstream_source::seek(turi::fileio_impl::general_fstream_source *this, const char *a2, uint64_t a3)
{
  if (*((_QWORD *)this + 2))
    assert_msg(0, a2, a3);
  std::ios_base::clear((std::ios_base *)(*((_QWORD *)this + 4) + *(_QWORD *)(**((_QWORD **)this + 4) - 24)), 0);
  std::istream::seekg();
  return std::istream::tellg();
}

void assert_msg(uint64_t a1, const char *a2, ...)
{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Attempting to seek in a compressed file. Fail!";
  v2[0] = (uint64_t *)&v4;
  v2[1] = (uint64_t *)&v3;
  vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
}

{
  uint64_t *v2[2];
  va_list v3;
  const char *v4;
  va_list va;

  va_start(va, a2);
  va_copy(v3, va);
  v4 = "Uninitialized tokenizer.";
  v2[0] = (uint64_t *)&v4;
  v2[1] = (uint64_t *)&v3;
  vassert_msg(BOOL,char const*,char *)::{lambda(void)#1}::operator()(v2);
}

uint64_t turi::fileio_impl::general_fstream_source::file_size(turi::neural_net::shared_float_array **this)
{
  turi::neural_net::shared_float_array *v1;

  v1 = *this;
  if (v1)
    return turi::neural_net::shared_float_array::shape(v1);
  else
    return -1;
}

uint64_t turi::fileio_impl::general_fstream_source::get_bytes_read(turi::fileio_impl::general_fstream_source *this)
{
  uint64_t v2;

  if (!*((_QWORD *)this + 4))
    return -1;
  std::istream::tellg();
  return v2;
}

_QWORD *turi::fileio_impl::general_fstream_source::get_underlying_stream@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  if (this[2])
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v2 = this[5];
    *a2 = this[4];
    a2[1] = v2;
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
  }
  return this;
}

void sub_21800E388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN5boost9iostreams23basic_gzip_decompressorINS_9allocatorIcEEEENS4_IS6_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xA8uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN5boost9iostreams23basic_gzip_decompressorINS_9allocatorIcEEEENS4_IS6_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_21800E450(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN5boost9iostreams23basic_gzip_decompressorINS_9allocatorIcEEEENS4_IS6_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D922738;
  a1[1] = 0;
  boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::basic_gzip_decompressor((uint64_t)(a1 + 3), 15, 0x1000uLL);
  return a1;
}

void sub_21800E4A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D922738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D922738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

uint64_t boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::basic_gzip_decompressor(uint64_t a1, int a2, size_t a3)
{
  _BYTE v6[24];
  void *v7;
  char v8;
  void *__p;
  char v10;

  boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::make_params(a2, (uint64_t)v6);
  boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::symmetric_filter<boost::iostreams::zlib_params>((uint64_t *)a1, a3, (uint64_t)v6);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  boost::iostreams::detail::gzip_header::gzip_header((boost::iostreams::detail::gzip_header *)(a1 + 16));
  boost::iostreams::detail::gzip_footer::reset((boost::iostreams::detail::gzip_footer *)(a1 + 96));
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 1;
  return a1;
}

void sub_21800E5B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  std::pair<std::string,std::string>::~pair(v3);
  boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 8));
  _Unwind_Resume(a1);
}

void boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::make_params(int a1@<W0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  boost::iostreams::gzip_params::gzip_params(a2, -1, 8, 15, 8, 0, (__int128 *)v6, (__int128 *)__p, 0);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  *(_DWORD *)(a2 + 8) = a1;
  *(_WORD *)(a2 + 20) = 257;
}

void sub_21800E6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t *boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::symmetric_filter<boost::iostreams::zlib_params>(uint64_t *a1, size_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl::impl<boost::iostreams::zlib_params>(v6, a2, a3);
  return boost::shared_ptr<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl>::shared_ptr<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(a1, v6);
}

void sub_21800E738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1090C400B4FC0A9);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl::impl<boost::iostreams::zlib_params>(uint64_t a1, size_t a2, uint64_t a3)
{
  boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>::zlib_decompressor_impl((boost::iostreams::detail::zlib_base *)a1, a3);
  *(_QWORD *)(a1 + 32) = operator new(a2);
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_21800E798(_Unwind_Exception *a1)
{
  z_stream **v1;

  boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>::~zlib_decompressor_impl(v1);
  _Unwind_Resume(a1);
}

boost::iostreams::detail::zlib_base *boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>::zlib_decompressor_impl(boost::iostreams::detail::zlib_base *a1, uint64_t a2)
{
  boost::iostreams::detail::zlib_base *v4;

  v4 = boost::iostreams::detail::zlib_base::zlib_base(a1);
  *((_BYTE *)v4 + 28) = 0;
  boost::iostreams::detail::zlib_base::do_init((uint64_t)v4, a2, 0, 0, 0, v4);
  return a1;
}

void sub_21800E7F0(_Unwind_Exception *a1)
{
  boost::iostreams::detail::zlib_base *v1;

  boost::iostreams::detail::zlib_base::~zlib_base(v1);
  _Unwind_Resume(a1);
}

void boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>::~zlib_decompressor_impl(z_stream **a1)
{
  boost::iostreams::detail::zlib_base::reset(a1, 0, 0);
  boost::iostreams::detail::zlib_base::~zlib_base((boost::iostreams::detail::zlib_base *)a1);
}

uint64_t *boost::shared_ptr<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl>::shared_ptr<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_21800E888(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D922788;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_21800E8FC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  boost::checked_delete<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(v1);
  __cxa_rethrow();
}

void sub_21800E910(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::checked_delete<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl>(uint64_t result)
{
  z_stream **v1;
  void *v2;

  if (result)
  {
    v1 = (z_stream **)result;
    v2 = *(void **)(result + 32);
    if (v2)
      operator delete(v2);
    boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>::~zlib_decompressor_impl(v1);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::impl>::dispose(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(void **)(v1 + 32);
    if (v2)
      operator delete(v2);
    boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>::~zlib_decompressor_impl((z_stream **)v1);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

boost::iostreams::detail::gzip_header *boost::iostreams::detail::gzip_header::gzip_header(boost::iostreams::detail::gzip_header *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  boost::iostreams::detail::gzip_header::reset(this);
  return this;
}

void sub_21800E9EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  turi::fileio::cache_block::cache_block(v1);
  _Unwind_Resume(a1);
}

void std::allocator<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 135) < 0)
    operator delete(*(void **)(a2 + 112));
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  boost::detail::shared_count::~shared_count((unsigned int **)(a2 + 8));
}

void boost::throw_exception<boost::iostreams::gzip_error>(const std::runtime_error *a1)
{
  void *exception;
  std::runtime_error_vtbl *v3;
  std::runtime_error v4[2];
  std::runtime_error_vtbl *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  exception = __cxa_allocate_exception(0x58uLL);
  std::runtime_error::runtime_error(v4, a1);
  v10 = -1;
  v4[0].__vftable = (std::runtime_error_vtbl *)&unk_24D922930;
  v4[1] = a1[1];
  v3 = a1[2].__vftable;
  v8 = 0;
  v9 = 0;
  v5 = v3;
  v6 = &unk_24D922958;
  v7 = 0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::clone_impl((uint64_t)exception, (uint64_t)v4);
}

void sub_21800EAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;
  int v15;

  a13 = &unk_24D918C48;
  if (a14 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a14 + 32))(a14))
    a14 = 0;
  std::runtime_error::~runtime_error(&a9);
  if (v15)
    __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

std::ios_base::failure *boost::iostreams::gzip_error::gzip_error(std::ios_base::failure *this, int a2)
{
  std::ios_base::failure *result;
  std::error_code v5;

  *(_QWORD *)&v5.__val_ = 1;
  v5.__cat_ = std::iostream_category();
  result = std::ios_base::failure::failure(this, "gzip error", &v5);
  this->__vftable = (std::ios_base::failure_vtbl *)&unk_24D922978;
  LODWORD(this[1].__vftable) = a2;
  HIDWORD(this[1].__vftable) = 0;
  return result;
}

uint64_t boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::read<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>>(uLong *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uLong v7;
  int v8;
  uint64_t v9;
  int v10;
  char *v11;
  const char *v12;
  const char *v13;
  _BOOL4 v15;
  const char *v18;
  char *v19;

  v7 = *a1;
  v8 = *(_DWORD *)(*a1 + 64);
  if ((v8 & 1) == 0)
  {
    v8 |= 1u;
    *(_DWORD *)(v7 + 64) = v8;
    v9 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v7 + 48) = v9;
    *(_QWORD *)(v7 + 56) = v9;
  }
  if ((v8 & 4) != 0)
    v10 = 4;
  else
    v10 = 5;
  v19 = a3;
  v11 = &a3[a4];
  while (1)
  {
    v13 = *(const char **)(v7 + 48);
    v12 = *(const char **)(v7 + 56);
    if (v13 != v12 || v10 == 4)
    {
      v18 = *(const char **)(v7 + 48);
      v15 = boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>::filter(*a1, &v18, v12, &v19, v11);
      v13 = v18;
      *(_QWORD *)(v7 + 48) = v18;
      if (!v15)
        break;
    }
    if (v10 == 6)
    {
      if (v13 == *(const char **)(v7 + 56) || v19 == v11)
      {
        v11 = v19;
        return v11 - a3;
      }
    }
    else
    {
      if (v19 == v11)
        return v11 - a3;
      if (v10 == 5)
        v10 = boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::fill<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>>((uint64_t *)a1, a2);
    }
  }
  if (v19 == a3)
    return -1;
  else
    return v19 - a3;
}

std::ios_base::failure *boost::iostreams::gzip_error::gzip_error(uint64_t a1, uint64_t a2)
{
  std::ios_base::failure *result;
  std::error_code v5;

  *(_QWORD *)&v5.__val_ = 1;
  v5.__cat_ = std::iostream_category();
  result = std::ios_base::failure::failure((std::ios_base::failure *)a1, "gzip error", &v5);
  *(_QWORD *)a1 = &unk_24D922978;
  *(_DWORD *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>::putback(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::ios_base::failure v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
  {
    boost::iostreams::detail::bad_putback(&v6);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v6);
  }
  v3 = (_QWORD *)(a1 + 8);
  v4 = v2 - 1;
  *(_QWORD *)(a1 + 32) = v4;
  if (*(char *)(a1 + 31) < 0)
    v3 = (_QWORD *)*v3;
  *((_BYTE *)v3 + v4) = a2;
  return 1;
}

void sub_21800ED80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

std::string *boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>::unconsumed_input@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  char v6;

  if (*(char *)(a1 + 31) < 0)
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = *(unsigned __int8 *)(a1 + 31);
  return std::string::basic_string(a2, (const std::string *)(a1 + 8), *(_QWORD *)(a1 + 32), v4 - *(_QWORD *)(a1 + 32), (std::allocator<char> *)&v6);
}

uint64_t boost::iostreams::detail::read_device_impl<boost::iostreams::input>::get<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>>(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 __dst;

  __dst = 0;
  v1 = boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>::read(a1, (char *)&__dst, 1);
  if (v1 == -1)
    return 0xFFFFFFFFLL;
  if (v1 == 1)
    return __dst;
  return 4294967294;
}

uint64_t boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>::read(uint64_t a1, char *__dst, int64_t a3)
{
  int64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  BOOL v10;
  int64_t v11;
  size_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v6 = (_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    v9 = (uint64_t *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 16);
    v10 = v13 <= v8;
    v14 = v13 - v8;
    if (!v10)
    {
      if (v14 >= a3)
        v12 = a3;
      else
        v12 = v14;
      v6 = (_QWORD *)*v6;
      if (v12)
        goto LABEL_7;
      goto LABEL_8;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 31);
    v9 = (uint64_t *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = v7 <= v8;
    v11 = v7 - v8;
    if (!v10)
    {
      if (v11 >= a3)
        v12 = a3;
      else
        v12 = v11;
      if (v12)
      {
LABEL_7:
        memmove(__dst, (char *)v6 + v8, v12);
        v8 = *v9;
      }
LABEL_8:
      *v9 = v8 + v12;
      if (v12 == v3)
        return v3;
      goto LABEL_17;
    }
  }
  v12 = 0;
LABEL_17:
  v15 = *(_QWORD *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24) + 40);
  v16 = (*(uint64_t (**)(uint64_t, char *, size_t))(*(_QWORD *)v15 + 64))(v15, &__dst[v12], v3 - v12);
  if (v16)
    v17 = v16;
  else
    v17 = -1;
  if (v12)
    v18 = v12;
  else
    v18 = -1;
  if (v17 == -1)
    return v18;
  else
    return v17 + v12;
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 40) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 40) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 80) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D922978;
  v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 40) = &unk_24D918C48;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  *(_QWORD *)a1 = &unk_24D922890;
  *(_QWORD *)(a1 + 40) = &unk_24D9228C8;
  *(_QWORD *)(a1 + 80) = &unk_24D922900;
  boost::exception_detail::copy_boost_exception(a1 + 40, a2 + 40);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 80) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D922978;
  v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
  v4[2].__imp_.__imp_ = (const char *)&unk_24D918C48;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v6;
  *(_QWORD *)a1 = &unk_24D922890;
  *(_QWORD *)(a1 + 40) = &unk_24D9228C8;
  *(_QWORD *)(a1 + 80) = &unk_24D922900;
  return a1;
}

void sub_21800F040(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_21800F104(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C405780E14DLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x58uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_21800F164(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::~clone_impl(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 5);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::~clone_impl(a1 - 40);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 5) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 6);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 40) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 48));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::iostreams::gzip_error>::~error_info_injector(a1 - 40);
}

void boost::iostreams::gzip_error::~gzip_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x219A19A08);
}

void sub_21800F358(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

BOOL boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>::filter(uLong a1, const char **a2, const char *a3, char **a4, char *a5)
{
  uint64_t v8;
  _BOOL8 result;

  boost::iostreams::detail::zlib_base::before((uint64_t *)a1, a2, a3, a4, a5);
  v8 = boost::iostreams::detail::zlib_base::xinflate((z_streamp *)a1, 2);
  boost::iostreams::detail::zlib_base::after(a1, (const Bytef **)a2, (const Bytef **)a4, 0);
  boost::iostreams::zlib_error::check(v8);
  result = (_DWORD)v8 != 1;
  *(_BYTE *)(a1 + 28) = (_DWORD)v8 == 1;
  return result;
}

uint64_t boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::fill<boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = boost::iostreams::basic_gzip_decompressor<std::allocator<char>>::peekable_source<std::istream>::read(a2, *(char **)(*a1 + 32), *(_QWORD *)(*a1 + 40));
  v4 = *a1;
  if (v3 == -1)
  {
    *(_DWORD *)(v4 + 64) |= 4u;
    return 4;
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v4 + 48) = v5;
    *(_QWORD *)(v4 + 56) = v5 + v3;
    if (v3)
      return 5;
    else
      return 6;
  }
}

uint64_t boost::iostreams::symmetric_filter<boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>,std::allocator<char>>::close<std::istream>(uLong *a1, uint64_t a2, int a3)
{
  uLong v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uLong v9;
  uint64_t v10;
  uint64_t v12;
  const char *v13;
  char v14;

  v3 = *a1;
  if (a3 == 16)
  {
    v5 = *(_DWORD *)(v3 + 64);
    if ((v5 & 2) == 0)
    {
      *(_DWORD *)(v3 + 64) = v5 | 2;
      v6 = *(_QWORD *)(v3 + 32);
      v7 = v6 + *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 48) = v6;
      *(_QWORD *)(v3 + 56) = v7;
    }
    v14 = 0;
    v13 = &v14;
    do
    {
      do
        v8 = *(char **)(v3 + 56);
      while (*(char **)(v3 + 48) == v8);
    }
    while (boost::iostreams::detail::zlib_decompressor_impl<std::allocator<char>>::filter(*a1, &v13, v13, (char **)(v3 + 48), v8));
    v9 = *a1;
    *(_DWORD *)(v9 + 64) = 0;
    v10 = *(_QWORD *)(v9 + 32);
    *(_QWORD *)(v9 + 48) = v10;
    *(_QWORD *)(v9 + 56) = v10;
    *(_BYTE *)(v9 + 28) = 0;
    return boost::iostreams::detail::zlib_base::reset((z_stream **)v9, 0, 1);
  }
  else
  {
    *(_DWORD *)(v3 + 64) = 0;
    v12 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v3 + 48) = v12;
    *(_QWORD *)(v3 + 56) = v12;
    *(_BYTE *)(v3 + 28) = 0;
    return boost::iostreams::detail::zlib_base::reset((z_stream **)v3, 0, 1);
  }
}

void sub_21800F530(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)(v2 + 64) = 0;
  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 48) = v3;
  *(_QWORD *)(v2 + 56) = v3;
  *(_BYTE *)(v2 + 28) = 0;
  boost::iostreams::detail::zlib_base::reset((z_stream **)v2, 0, 1);
  __cxa_rethrow();
}

void sub_21800F568(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_general_fstream_source_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t *CoreML::Specification::protobuf_NeuralNetwork_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_NeuralNetwork_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal *v4;
  CoreML::Specification::protobuf_DataStructures_2eproto *v5;
  CoreML::Specification::protobuf_Parameters_2eproto *v6;
  uint64_t *result;

  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/NeuralNetwork.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(v6);
  CoreML::Specification::_NeuralNetwork_default_instance_ = (uint64_t)&off_24D9229A0;
  CoreML::Specification::_NeuralNetworkImageScaler_default_instance_ = (uint64_t)&off_24D922A38;
  unk_254FF6C28 = 0u;
  unk_254FF6C38 = 0u;
  byte_254FF6C48 = 1;
  CoreML::Specification::_NeuralNetworkMeanImage_default_instance_ = (uint64_t)&off_24D922AD0;
  *(_QWORD *)algn_254FF6C58 = 0;
  qword_254FF6C60 = 0;
  unk_254FF6C68 = 0;
  dword_254FF6C74 = 0;
  byte_254FF6C78 = 1;
  CoreML::Specification::_NeuralNetworkPreprocessing_default_instance_ = (uint64_t)&off_24D922B68;
  *(_QWORD *)algn_254FF6C88 = 0;
  qword_254FF6C90 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FF6CA0 = 0;
  byte_254FF6CA8 = 1;
  CoreML::Specification::_ActivationReLU_default_instance_ = (uint64_t)&off_24D922C00;
  qword_254FF6CC8 = 0;
  dword_254FF6CD0 = 0;
  byte_254FF6CD8 = 1;
  CoreML::Specification::_ActivationLeakyReLU_default_instance_ = (uint64_t)&off_24D922C98;
  qword_254FF6CE8 = 0;
  qword_254FF6CF0 = 0;
  byte_254FF6CF8 = 1;
  CoreML::Specification::_ActivationTanh_default_instance_ = (uint64_t)&off_24D922D30;
  qword_254FF6D08 = 0;
  dword_254FF6D10 = 0;
  byte_254FF6D18 = 1;
  dword_254FF6D38 = 0;
  CoreML::Specification::_ActivationScaledTanh_default_instance_ = (uint64_t)&off_24D922DC8;
  *(_QWORD *)algn_254FF6D28 = 0;
  qword_254FF6D30 = 0;
  byte_254FF6D40 = 1;
  CoreML::Specification::_ActivationSigmoid_default_instance_ = (uint64_t)&off_24D922E60;
  qword_254FF6D50 = 0;
  dword_254FF6D58 = 0;
  byte_254FF6D60 = 1;
  qword_254FF6D70 = 0;
  unk_254FF6D78 = 0;
  CoreML::Specification::_ActivationLinear_default_instance_ = (uint64_t)&off_24D922EF8;
  dword_254FF6D80 = 0;
  byte_254FF6D88 = 1;
  qword_254FF6D98 = 0;
  unk_254FF6DA0 = 0;
  CoreML::Specification::_ActivationSigmoidHard_default_instance_ = (uint64_t)&off_24D922F90;
  dword_254FF6DA8 = 0;
  byte_254FF6DB0 = 1;
  CoreML::Specification::_ActivationELU_default_instance_ = (uint64_t)&off_24D9230C0;
  qword_254FF6DE8 = 0;
  qword_254FF6DF0 = 0;
  byte_254FF6DF8 = 1;
  qword_254FF6E08 = 0;
  *(_QWORD *)&dword_254FF6E10 = 0;
  CoreML::Specification::_ActivationThresholdedReLU_default_instance_ = (uint64_t)&off_24D923158;
  byte_254FF6E18 = 1;
  CoreML::Specification::_ActivationSoftsign_default_instance_ = (uint64_t)&off_24D9231F0;
  qword_254FF6E28 = 0;
  dword_254FF6E30 = 0;
  byte_254FF6E38 = 1;
  CoreML::Specification::_ActivationSoftplus_default_instance_ = (uint64_t)&off_24D923288;
  qword_254FF6E48 = 0;
  dword_254FF6E50 = 0;
  byte_254FF6E58 = 1;
  CoreML::Specification::_ActivationParametricSoftplus_default_instance_ = (uint64_t)&off_24D923320;
  CoreML::Specification::_ActivationParams_default_instance_ = (uint64_t)&off_24D9233B8;
  CoreML::Specification::_Tensor_default_instance_ = (uint64_t)&off_24D923450;
  *(_QWORD *)algn_254FF6F28 = 0;
  qword_254FF6F30 = 0;
  unk_254FF6F38 = 0;
  unk_254FF6F44 = 0;
  byte_254FF6F50 = 1;
  CoreML::Specification::_NeuralNetworkLayer_default_instance_ = (uint64_t)&off_24D9234E8;
  unk_254FF6FB0 = 0u;
  unk_254FF6FA0 = 0u;
  unk_254FF6F90 = 0u;
  unk_254FF6F80 = 0u;
  unk_254FF6F70 = 0u;
  unk_254FF6F60 = 0u;
  qword_254FF6FC0 = 0;
  unk_254FF6FC8 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  byte_254FF6FD0 = 0;
  qword_254FF6FE0 = 0;
  byte_254FF6FE8 = 1;
  CoreML::Specification::_BranchLayerParams_default_instance_ = (uint64_t)&off_24D923580;
  CoreML::Specification::_LoopLayerParams_default_instance_ = (uint64_t)&off_24D923618;
  CoreML::Specification::_LoopBreakLayerParams_default_instance_ = (uint64_t)&off_24D9236B0;
  qword_254FF7558 = 0;
  dword_254FF7560 = 0;
  byte_254FF7568 = 1;
  CoreML::Specification::_LoopContinueLayerParams_default_instance_ = (uint64_t)&off_24D923748;
  qword_254FF7578 = 0;
  dword_254FF7580 = 0;
  byte_254FF7588 = 1;
  CoreML::Specification::_CopyLayerParams_default_instance_ = (uint64_t)&off_24D9237E0;
  qword_254FF7598 = 0;
  dword_254FF75A0 = 0;
  byte_254FF75A8 = 1;
  qword_254FF75B8 = 0;
  unk_254FF75C0 = 0;
  CoreML::Specification::_GreaterThanLayerParams_default_instance_ = (uint64_t)&off_24D923878;
  byte_254FF75C8 = 1;
  qword_254FF75D8 = 0;
  unk_254FF75E0 = 0;
  CoreML::Specification::_GreaterEqualLayerParams_default_instance_ = (uint64_t)&off_24D923910;
  byte_254FF75E8 = 1;
  qword_254FF75F8 = 0;
  unk_254FF7600 = 0;
  CoreML::Specification::_LessThanLayerParams_default_instance_ = (uint64_t)&off_24D9239A8;
  byte_254FF7608 = 1;
  qword_254FF7618 = 0;
  unk_254FF7620 = 0;
  CoreML::Specification::_LessEqualLayerParams_default_instance_ = (uint64_t)&off_24D923A40;
  byte_254FF7628 = 1;
  qword_254FF7638 = 0;
  unk_254FF7640 = 0;
  CoreML::Specification::_EqualLayerParams_default_instance_ = (uint64_t)&off_24D923AD8;
  byte_254FF7648 = 1;
  qword_254FF7658 = 0;
  unk_254FF7660 = 0;
  CoreML::Specification::_NotEqualLayerParams_default_instance_ = (uint64_t)&off_24D923B70;
  byte_254FF7668 = 1;
  CoreML::Specification::_LogicalAndLayerParams_default_instance_ = (uint64_t)&off_24D923C08;
  qword_254FF7678 = 0;
  dword_254FF7680 = 0;
  byte_254FF7688 = 1;
  CoreML::Specification::_LogicalOrLayerParams_default_instance_ = (uint64_t)&off_24D923CA0;
  qword_254FF7698 = 0;
  dword_254FF76A0 = 0;
  byte_254FF76A8 = 1;
  CoreML::Specification::_LogicalXorLayerParams_default_instance_ = (uint64_t)&off_24D923D38;
  qword_254FF76B8 = 0;
  dword_254FF76C0 = 0;
  byte_254FF76C8 = 1;
  CoreML::Specification::_LogicalNotLayerParams_default_instance_ = (uint64_t)&off_24D923DD0;
  qword_254FF76D8 = 0;
  dword_254FF76E0 = 0;
  byte_254FF76E8 = 1;
  CoreML::Specification::_BorderAmounts_EdgeSizes_default_instance_ = (uint64_t)&off_24D923E68;
  *(_QWORD *)algn_254FF76F8 = 0;
  dword_254FF7710 = 0;
  qword_254FF7700 = 0;
  unk_254FF7708 = 0;
  byte_254FF7718 = 1;
  CoreML::Specification::_BorderAmounts_default_instance_ = (uint64_t)&off_24D923F00;
  dword_254FF7748 = 0;
  unk_254FF7738 = 0u;
  unk_254FF7728 = 0u;
  byte_254FF7750 = 1;
  qword_254FF7760 = 0;
  qword_254FF7768 = 0;
  CoreML::Specification::_ValidPadding_default_instance_ = (uint64_t)&off_24D923F98;
  dword_254FF7770 = 0;
  byte_254FF7778 = 1;
  qword_254FF7788 = 0;
  *(_QWORD *)&dword_254FF7790 = 0;
  CoreML::Specification::_SamePadding_default_instance_ = (uint64_t)&off_24D924030;
  byte_254FF7798 = 1;
  qword_254FF77A8 = 0;
  unk_254FF77B0 = 0;
  CoreML::Specification::_SamplingMode_default_instance_ = (uint64_t)&off_24D9240C8;
  byte_254FF77B8 = 1;
  qword_254FF77C8 = 0;
  unk_254FF77D0 = 0;
  CoreML::Specification::_BoxCoordinatesMode_default_instance_ = (uint64_t)&off_24D924160;
  byte_254FF77D8 = 1;
  CoreML::Specification::_WeightParams_default_instance_ = (uint64_t)&off_24D9241F8;
  *(_QWORD *)algn_254FF77E8 = 0;
  qword_254FF77F0 = 0;
  unk_254FF77F8 = 0;
  qword_254FF7808 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FF7810 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  byte_254FF7828 = 0;
  qword_254FF7818 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FF7820 = 0;
  dword_254FF782C = 0;
  byte_254FF7830 = 1;
  qword_254FF7858 = 0;
  qword_254FF7840 = 0;
  unk_254FF7848 = 0;
  CoreML::Specification::_QuantizationParams_default_instance_ = (uint64_t)&off_24D924290;
  byte_254FF7860 = 1;
  qword_254FF78A0 = 0;
  unk_254FF78A8 = 0;
  CoreML::Specification::_LinearQuantizationParams_default_instance_ = (uint64_t)&off_24D924328;
  unk_254FF7880 = 0;
  qword_254FF7888 = 0;
  unk_254FF7890 = 0;
  dword_254FF78B4 = 0;
  byte_254FF78B8 = 1;
  CoreML::Specification::_LookUpTableQuantizationParams_default_instance_ = (uint64_t)&off_24D9243C0;
  *(_QWORD *)algn_254FF78C8 = 0;
  qword_254FF78D0 = 0;
  unk_254FF78D8 = 0;
  dword_254FF78E4 = 0;
  byte_254FF78E8 = 1;
  qword_254FF7918 = 0;
  unk_254FF7920 = 0;
  qword_254FF7930 = 0;
  unk_254FF7938 = 0;
  qword_254FF7948 = 0;
  unk_254FF7950 = 0;
  CoreML::Specification::_ConvolutionLayerParams_default_instance_ = (uint64_t)&off_24D924458;
  *(_QWORD *)algn_254FF78F8 = 0;
  qword_254FF7900 = 0;
  unk_254FF7908 = 0;
  unk_254FF797A = 0u;
  xmmword_254FF7960 = 0u;
  unk_254FF7970 = 0u;
  qword_254FF7998 = 0;
  byte_254FF79A0 = 1;
  CoreML::Specification::_Convolution3DLayerParams_default_instance_ = (uint64_t)&off_24D9244F0;
  unk_254FF79C0 = 0;
  qword_254FF79C8 = 0;
  unk_254FF79D0 = 0;
  dword_254FF7A40 = 0;
  unk_254FF7A30 = 0u;
  unk_254FF7A20 = 0u;
  unk_254FF7A10 = 0u;
  unk_254FF7A00 = 0u;
  unk_254FF79F0 = 0u;
  *(_OWORD *)&qword_254FF79E0 = 0u;
  byte_254FF7A48 = 1;
  CoreML::Specification::_InnerProductLayerParams_default_instance_ = (uint64_t)&off_24D924588;
  dword_254FF7A84 = 0;
  *(_OWORD *)((char *)&xmmword_254FF7A68 + 10) = 0u;
  xmmword_254FF7A68 = 0u;
  *(_OWORD *)algn_254FF7A58 = 0u;
  byte_254FF7A88 = 1;
  CoreML::Specification::_EmbeddingLayerParams_default_instance_ = (uint64_t)&off_24D924620;
  dword_254FF7AC4 = 0;
  *(_OWORD *)((char *)&xmmword_254FF7AA8 + 9) = 0u;
  xmmword_254FF7AA8 = 0u;
  *(_OWORD *)algn_254FF7A98 = 0u;
  byte_254FF7AC8 = 1;
  CoreML::Specification::_EmbeddingNDLayerParams_default_instance_ = (uint64_t)&off_24D9246B8;
  dword_254FF7B04 = 0;
  *(_OWORD *)((char *)&xmmword_254FF7AE8 + 9) = 0u;
  xmmword_254FF7AE8 = 0u;
  *(_OWORD *)algn_254FF7AD8 = 0u;
  byte_254FF7B08 = 1;
  CoreML::Specification::_BatchnormLayerParams_default_instance_ = (uint64_t)&off_24D924750;
  CoreML::Specification::_PoolingLayerParams_ValidCompletePadding_default_instance_ = (uint64_t)&off_24D9247E8;
  *(_QWORD *)algn_254FF7B68 = 0;
  qword_254FF7B70 = 0;
  unk_254FF7B78 = 0;
  dword_254FF7B84 = 0;
  byte_254FF7B88 = 1;
  qword_254FF7BB8 = 0;
  unk_254FF7BC0 = 0;
  CoreML::Specification::_PoolingLayerParams_default_instance_ = (uint64_t)&off_24D924880;
  *(_QWORD *)algn_254FF7B98 = 0;
  qword_254FF7BA0 = 0;
  unk_254FF7BA8 = 0;
  word_254FF7BD0 = 0;
  dword_254FF7BCC = 0;
  qword_254FF7BE0 = 0;
  byte_254FF7BE8 = 1;
  CoreML::Specification::_Pooling3DLayerParams_default_instance_ = (uint64_t)&off_24D924918;
  qword_254FF7C50 = 0;
  unk_254FF7C40 = 0u;
  unk_254FF7C30 = 0u;
  unk_254FF7C20 = 0u;
  unk_254FF7C10 = 0u;
  byte_254FF7C58 = 1;
  qword_254FF7C68 = 0;
  unk_254FF7C70 = 0;
  CoreML::Specification::_GlobalPooling3DLayerParams_default_instance_ = (uint64_t)&off_24D9249B0;
  byte_254FF7C78 = 1;
  qword_254FF7C88 = 0;
  *(_QWORD *)&dword_254FF7C90 = 0;
  CoreML::Specification::_PaddingLayerParams_PaddingConstant_default_instance_ = (uint64_t)&off_24D924A48;
  byte_254FF7C98 = 1;
  CoreML::Specification::_PaddingLayerParams_PaddingReflection_default_instance_ = (uint64_t)&off_24D924AE0;
  qword_254FF7CA8 = 0;
  dword_254FF7CB0 = 0;
  byte_254FF7CB8 = 1;
  CoreML::Specification::_PaddingLayerParams_PaddingReplication_default_instance_ = (uint64_t)&off_24D924B78;
  qword_254FF7CC8 = 0;
  dword_254FF7CD0 = 0;
  byte_254FF7CD8 = 1;
  CoreML::Specification::_PaddingLayerParams_default_instance_ = (uint64_t)&off_24D924C10;
  CoreML::Specification::_ConcatLayerParams_default_instance_ = (uint64_t)&off_24D924CA8;
  unk_254FF7D30 = 0;
  byte_254FF7D38 = 0;
  dword_254FF7D3C = 0;
  byte_254FF7D40 = 1;
  CoreML::Specification::_LRNLayerParams_default_instance_ = (uint64_t)&off_24D924D40;
  unk_254FF7D60 = 0u;
  unk_254FF7D50 = 0u;
  byte_254FF7D70 = 1;
  CoreML::Specification::_SoftmaxLayerParams_default_instance_ = (uint64_t)&off_24D924DD8;
  qword_254FF7D80 = 0;
  dword_254FF7D88 = 0;
  byte_254FF7D90 = 1;
  qword_254FF7DA0 = 0;
  unk_254FF7DA8 = 0;
  CoreML::Specification::_SplitLayerParams_default_instance_ = (uint64_t)&off_24D924E70;
  dword_254FF7DB0 = 0;
  byte_254FF7DB8 = 1;
  qword_254FF7DC8 = 0;
  unk_254FF7DD0 = 0;
  CoreML::Specification::_AddLayerParams_default_instance_ = (uint64_t)&off_24D924F08;
  byte_254FF7DD8 = 1;
  qword_254FF7DE8 = 0;
  unk_254FF7DF0 = 0;
  CoreML::Specification::_MultiplyLayerParams_default_instance_ = (uint64_t)&off_24D924FA0;
  byte_254FF7DF8 = 1;
  CoreML::Specification::_UnaryFunctionLayerParams_default_instance_ = (uint64_t)&off_24D925038;
  unk_254FF7E18 = 0u;
  unk_254FF7E08 = 0u;
  byte_254FF7E28 = 1;
  qword_254FF7E58 = 0;
  unk_254FF7E60 = 0;
  CoreML::Specification::_UpsampleLayerParams_default_instance_ = (uint64_t)&off_24D9250D0;
  *(_QWORD *)algn_254FF7E38 = 0;
  qword_254FF7E40 = 0;
  unk_254FF7E48 = 0;
  unk_254FF7E6C = 0;
  dword_254FF7E74 = 0;
  byte_254FF7E78 = 1;
  CoreML::Specification::_ResizeBilinearLayerParams_default_instance_ = (uint64_t)&off_24D925168;
  CoreML::Specification::_CropResizeLayerParams_default_instance_ = (uint64_t)&off_24D925200;
  CoreML::Specification::_BiasLayerParams_default_instance_ = (uint64_t)&off_24D925298;
  CoreML::Specification::_ScaleLayerParams_default_instance_ = (uint64_t)&off_24D925330;
  CoreML::Specification::_LoadConstantLayerParams_default_instance_ = (uint64_t)&off_24D9253C8;
  qword_254FF7FF8 = 0;
  unk_254FF8000 = 0;
  CoreML::Specification::_L2NormalizeLayerParams_default_instance_ = (uint64_t)&off_24D925460;
  byte_254FF8008 = 1;
  qword_254FF8018 = 0;
  unk_254FF8020 = 0;
  CoreML::Specification::_FlattenLayerParams_default_instance_ = (uint64_t)&off_24D9254F8;
  byte_254FF8028 = 1;
  qword_254FF8040 = 0;
  unk_254FF8048 = 0;
  CoreML::Specification::_ReshapeLayerParams_default_instance_ = (uint64_t)&off_24D925590;
  *(_QWORD *)algn_254FF8038 = 0;
  unk_254FF8054 = 0;
  byte_254FF8060 = 1;
  qword_254FF8078 = 0;
  unk_254FF8080 = 0;
  CoreML::Specification::_PermuteLayerParams_default_instance_ = (uint64_t)&off_24D925628;
  unk_254FF8070 = 0;
  dword_254FF808C = 0;
  byte_254FF8090 = 1;
  qword_254FF80A8 = 0;
  unk_254FF80B0 = 0;
  CoreML::Specification::_ReorganizeDataLayerParams_default_instance_ = (uint64_t)&off_24D9256C0;
  unk_254FF80A0 = 0;
  byte_254FF80B8 = 1;
  CoreML::Specification::_SliceLayerParams_default_instance_ = (uint64_t)&off_24D925758;
  qword_254FF80E8 = 0;
  unk_254FF80D8 = 0u;
  unk_254FF80C8 = 0u;
  byte_254FF80F0 = 1;
  qword_254FF8108 = 0;
  unk_254FF8110 = 0;
  CoreML::Specification::_ReduceLayerParams_default_instance_ = (uint64_t)&off_24D9257F0;
  unk_254FF8100 = 0;
  byte_254FF8118 = 1;
  CoreML::Specification::_CropLayerParams_default_instance_ = (uint64_t)&off_24D925888;
  CoreML::Specification::_AverageLayerParams_default_instance_ = (uint64_t)&off_24D925920;
  qword_254FF8168 = 0;
  dword_254FF8170 = 0;
  byte_254FF8178 = 1;
  CoreML::Specification::_MaxLayerParams_default_instance_ = (uint64_t)&off_24D9259B8;
  qword_254FF8188 = 0;
  dword_254FF8190 = 0;
  byte_254FF8198 = 1;
  CoreML::Specification::_MinLayerParams_default_instance_ = (uint64_t)&off_24D925A50;
  qword_254FF81A8 = 0;
  dword_254FF81B0 = 0;
  byte_254FF81B8 = 1;
  CoreML::Specification::_DotProductLayerParams_default_instance_ = (uint64_t)&off_24D925AE8;
  *(_QWORD *)algn_254FF81C8 = 0;
  byte_254FF81D0 = 0;
  dword_254FF81D4 = 0;
  byte_254FF81D8 = 1;
  dword_254FF81F8 = 0;
  qword_254FF81E8 = 0;
  unk_254FF81F0 = 0;
  CoreML::Specification::_MeanVarianceNormalizeLayerParams_default_instance_ = (uint64_t)&off_24D925B80;
  byte_254FF8200 = 1;
  dword_254FF8220 = 0;
  qword_254FF8210 = 0;
  unk_254FF8218 = 0;
  CoreML::Specification::_SequenceRepeatLayerParams_default_instance_ = (uint64_t)&off_24D925C18;
  byte_254FF8228 = 1;
  CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_ = (uint64_t)&off_24D925CB0;
  CoreML::Specification::_GRULayerParams_default_instance_ = (uint64_t)&off_24D925D48;
  CoreML::Specification::_LSTMParams_default_instance_ = (uint64_t)&off_24D925DE0;
  CoreML::Specification::_LSTMWeightParams_default_instance_ = (uint64_t)&off_24D925E78;
  CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_ = (uint64_t)&off_24D925F10;
  CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_ = (uint64_t)&off_24D925FA8;
  CoreML::Specification::_CustomLayerParams_CustomLayerParamValue_default_instance_ = (uint64_t)&off_24D926040;
  CoreML::Specification::_CustomLayerParams_ParametersEntry_default_instance_ = (uint64_t)&unk_24D92B530;
  qword_254FF8500 = 0;
  CoreML::Specification::_ActivationPReLU_default_instance_ = (uint64_t)&off_24D923028;
  unk_254FF6DC0 = 0;
  *(_OWORD *)algn_254FF6BC8 = 0u;
  *(_OWORD *)&algn_254FF6BC8[16] = 0u;
  *(_OWORD *)&algn_254FF6BC8[32] = 0u;
  *(_OWORD *)&algn_254FF6BC8[48] = 0u;
  *(_OWORD *)((char *)&qword_254FF6C00 + 4) = 0u;
  byte_254FF6C18 = 1;
  qword_254FF6DC8 = 0;
  dword_254FF6DD0 = 0;
  qword_254FF7520 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FF7528 = 0;
  dword_254FF7540 = 0;
  qword_254FF7530 = 0;
  unk_254FF7538 = 0;
  byte_254FF7548 = 1;
  qword_254FF74E8 = 0;
  qword_254FF74F0 = 0;
  dword_254FF7500 = 0;
  qword_254FF74F8 = 0;
  byte_254FF7508 = 1;
  qword_254FF7518 = 0;
  byte_254FF6DD8 = 1;
  qword_254FF6E68 = 0;
  qword_254FF6E70 = 0;
  dword_254FF6E80 = 0;
  qword_254FF6E78 = 0;
  byte_254FF6E88 = 1;
  qword_254FF6E98 = 0;
  qword_254FF6EA8 = 0;
  byte_254FF6EB0 = 1;
  *(_OWORD *)((char *)xmmword_254FF7B38 + 12) = 0u;
  xmmword_254FF7B38[0] = 0u;
  unk_254FF7B28 = 0u;
  *(_OWORD *)algn_254FF7B18 = 0u;
  byte_254FF7B58 = 1;
  qword_254FF7D00 = 0;
  qword_254FF7CE8 = 0;
  qword_254FF7CF0 = 0;
  byte_254FF7D08 = 1;
  qword_254FF7E88 = 0;
  unk_254FF7E90 = 0;
  qword_254FF7E98 = 0;
  qword_254FF7EA8 = 0;
  dword_254FF7EB0 = 0;
  byte_254FF7EB8 = 1;
  qword_254FF7EC8 = 0;
  unk_254FF7ED0 = 0;
  qword_254FF7ED8 = 0;
  qword_254FF7EE8 = 0;
  qword_254FF7EF0 = 0;
  dword_254FF7F00 = 0;
  qword_254FF7EF8 = 0;
  byte_254FF7F08 = 1;
  qword_254FF7F18 = 0;
  unk_254FF7F20 = 0;
  qword_254FF7F28 = 0;
  qword_254FF7F38 = 0;
  dword_254FF7F40 = 0;
  byte_254FF7F48 = 1;
  qword_254FF7F78 = 0;
  unk_254FF7F80 = 0;
  qword_254FF7F58 = 0;
  unk_254FF7F60 = 0;
  qword_254FF7F68 = 0;
  qword_254FF7F90 = 0;
  unk_254FF7F98 = 0;
  byte_254FF7FA0 = 0;
  dword_254FF7FA4 = 0;
  byte_254FF7FA8 = 1;
  qword_254FF7FC0 = 0;
  unk_254FF7FC8 = 0;
  qword_254FF7FB8 = 0;
  qword_254FF7FD8 = 0;
  dword_254FF7FE0 = 0;
  byte_254FF7FE8 = 1;
  qword_254FF8130 = 0;
  unk_254FF8138 = 0;
  qword_254FF8128 = 0;
  qword_254FF8148 = 0;
  dword_254FF8150 = 0;
  byte_254FF8158 = 1;
  dword_254FF8274 = 0;
  *(_OWORD *)((char *)&xmmword_254FF8258 + 11) = 0u;
  xmmword_254FF8258 = 0u;
  unk_254FF8248 = 0u;
  *(_OWORD *)algn_254FF8238 = 0u;
  byte_254FF8278 = 1;
  dword_254FF8304 = 0;
  unk_254FF82F3 = 0u;
  *(_OWORD *)&qword_254FF82E8 = 0u;
  *(_OWORD *)&qword_254FF82D8 = 0u;
  *(_OWORD *)&qword_254FF82C8 = 0u;
  *(_OWORD *)&qword_254FF82B8 = 0u;
  *(_OWORD *)&qword_254FF82A8 = 0u;
  unk_254FF8298 = 0u;
  unk_254FF8288 = 0u;
  byte_254FF8308 = 1;
  dword_254FF832C = 0;
  qword_254FF8318 = 0;
  unk_254FF8320 = 0;
  byte_254FF8328 = 0;
  byte_254FF8330 = 1;
  dword_254FF83C0 = 0;
  unk_254FF83B0 = 0u;
  unk_254FF83A0 = 0u;
  unk_254FF8390 = 0u;
  unk_254FF8380 = 0u;
  unk_254FF8370 = 0u;
  unk_254FF8360 = 0u;
  unk_254FF8350 = 0u;
  unk_254FF8340 = 0u;
  byte_254FF83C8 = 1;
  dword_254FF841C = 0;
  byte_254FF8418 = 0;
  unk_254FF8408 = 0u;
  *(_OWORD *)&qword_254FF83F8 = 0u;
  unk_254FF83E8 = 0u;
  unk_254FF83D8 = 0u;
  byte_254FF8420 = 1;
  *(_OWORD *)&algn_254FF8488[4] = 0u;
  *(_OWORD *)&qword_254FF8480 = 0u;
  *(_OWORD *)&algn_254FF8430[64] = 0u;
  *(_OWORD *)&algn_254FF8430[48] = 0u;
  *(_OWORD *)&algn_254FF8430[32] = 0u;
  *(_OWORD *)&algn_254FF8430[16] = 0u;
  *(_OWORD *)algn_254FF8430 = 0u;
  byte_254FF84A0 = 1;
  qword_254FF84B0 = 0;
  qword_254FF84C0 = 0;
  byte_254FF84C8 = 1;
  qword_254FF8510 = 0;
  unk_254FF8518 = 0;
  qword_254FF8508 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF8520 = 0;
  byte_254FF8528 = 1;
  *((_BYTE *)CoreML::Specification::CustomLayerParams::CustomLayerParams((CoreML::Specification::CustomLayerParams *)&CoreML::Specification::_CustomLayerParams_default_instance_)
  + 96) = 1;
  qword_254FF6DC8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF7768 = (uint64_t)&CoreML::Specification::_BorderAmounts_default_instance_;
  qword_254FF7820 = (uint64_t)&CoreML::Specification::_QuantizationParams_default_instance_;
  qword_254FF7CF0 = (uint64_t)&CoreML::Specification::_BorderAmounts_default_instance_;
  qword_254FF74F0 = (uint64_t)&CoreML::Specification::_NeuralNetwork_default_instance_;
  CoreML::Specification::_TransposeLayerParams_default_instance_ = (uint64_t)&off_24D926170;
  unk_254FF85A0 = 0;
  qword_254FF85A8 = 0;
  unk_254FF85B0 = 0;
  dword_254FF85BC = 0;
  byte_254FF85C0 = 1;
  CoreML::Specification::_BatchedMatMulLayerParams_default_instance_ = (uint64_t)&off_24D926208;
  CoreML::Specification::_ConcatNDLayerParams_default_instance_ = (uint64_t)&off_24D9262A0;
  unk_254FF8610 = 0;
  dword_254FF8624 = 0;
  qword_254FF8618 = 0;
  byte_254FF8620 = 0;
  byte_254FF8628 = 1;
  CoreML::Specification::_SoftmaxNDLayerParams_default_instance_ = (uint64_t)&off_24D926338;
  *(_QWORD *)algn_254FF8638 = 0;
  qword_254FF8640 = 0;
  dword_254FF8648 = 0;
  byte_254FF8650 = 1;
  CoreML::Specification::_ReverseLayerParams_default_instance_ = (uint64_t)&off_24D9263D0;
  unk_254FF8660 = 0;
  qword_254FF8668 = 0;
  unk_254FF8670 = 0;
  dword_254FF867C = 0;
  byte_254FF8680 = 1;
  CoreML::Specification::_ReverseSeqLayerParams_default_instance_ = (uint64_t)&off_24D926468;
  unk_254FF8690 = 0;
  dword_254FF86A8 = 0;
  qword_254FF8698 = 0;
  unk_254FF86A0 = 0;
  byte_254FF86B0 = 1;
  CoreML::Specification::_FillLikeLayerParams_default_instance_ = (uint64_t)&off_24D926598;
  unk_254FF8700 = 0;
  qword_254FF8708 = 0;
  byte_254FF8710 = 1;
  CoreML::Specification::_FillStaticLayerParams_default_instance_ = (uint64_t)&off_24D926630;
  unk_254FF8720 = 0;
  qword_254FF8728 = 0;
  unk_254FF8730 = 0;
  unk_254FF873C = 0;
  byte_254FF8748 = 1;
  CoreML::Specification::_FillDynamicLayerParams_default_instance_ = (uint64_t)&off_24D9266C8;
  *(_QWORD *)algn_254FF8758 = 0;
  qword_254FF8760 = 0;
  byte_254FF8768 = 1;
  CoreML::Specification::_WhereBroadcastableLayerParams_default_instance_ = (uint64_t)&off_24D926760;
  qword_254FF8778 = 0;
  dword_254FF8780 = 0;
  byte_254FF8788 = 1;
  CoreML::Specification::_SinLayerParams_default_instance_ = (uint64_t)&off_24D9267F8;
  qword_254FF8798 = 0;
  dword_254FF87A0 = 0;
  byte_254FF87A8 = 1;
  CoreML::Specification::_CosLayerParams_default_instance_ = (uint64_t)&off_24D926890;
  qword_254FF87B8 = 0;
  dword_254FF87C0 = 0;
  byte_254FF87C8 = 1;
  CoreML::Specification::_TanLayerParams_default_instance_ = (uint64_t)&off_24D926928;
  qword_254FF87D8 = 0;
  dword_254FF87E0 = 0;
  byte_254FF87E8 = 1;
  CoreML::Specification::_AsinLayerParams_default_instance_ = (uint64_t)&off_24D9269C0;
  qword_254FF87F8 = 0;
  dword_254FF8800 = 0;
  byte_254FF8808 = 1;
  CoreML::Specification::_AcosLayerParams_default_instance_ = (uint64_t)&off_24D926A58;
  qword_254FF8818 = 0;
  dword_254FF8820 = 0;
  byte_254FF8828 = 1;
  CoreML::Specification::_AtanLayerParams_default_instance_ = (uint64_t)&off_24D926AF0;
  qword_254FF8838 = 0;
  dword_254FF8840 = 0;
  byte_254FF8848 = 1;
  CoreML::Specification::_SinhLayerParams_default_instance_ = (uint64_t)&off_24D926B88;
  qword_254FF8858 = 0;
  dword_254FF8860 = 0;
  byte_254FF8868 = 1;
  CoreML::Specification::_CoshLayerParams_default_instance_ = (uint64_t)&off_24D926C20;
  qword_254FF8878 = 0;
  dword_254FF8880 = 0;
  byte_254FF8888 = 1;
  CoreML::Specification::_TanhLayerParams_default_instance_ = (uint64_t)&off_24D926CB8;
  qword_254FF8898 = 0;
  dword_254FF88A0 = 0;
  byte_254FF88A8 = 1;
  CoreML::Specification::_AsinhLayerParams_default_instance_ = (uint64_t)&off_24D926D50;
  qword_254FF88B8 = 0;
  dword_254FF88C0 = 0;
  byte_254FF88C8 = 1;
  CoreML::Specification::_AcoshLayerParams_default_instance_ = (uint64_t)&off_24D926DE8;
  qword_254FF88D8 = 0;
  dword_254FF88E0 = 0;
  byte_254FF88E8 = 1;
  CoreML::Specification::_AtanhLayerParams_default_instance_ = (uint64_t)&off_24D926E80;
  qword_254FF88F8 = 0;
  dword_254FF8900 = 0;
  byte_254FF8908 = 1;
  CoreML::Specification::_PowBroadcastableLayerParams_default_instance_ = (uint64_t)&off_24D926F18;
  qword_254FF8918 = 0;
  dword_254FF8920 = 0;
  byte_254FF8928 = 1;
  CoreML::Specification::_Exp2LayerParams_default_instance_ = (uint64_t)&off_24D926FB0;
  qword_254FF8938 = 0;
  dword_254FF8940 = 0;
  byte_254FF8948 = 1;
  CoreML::Specification::_WhereNonZeroLayerParams_default_instance_ = (uint64_t)&off_24D927048;
  qword_254FF8958 = 0;
  dword_254FF8960 = 0;
  byte_254FF8968 = 1;
  CoreML::Specification::_MatrixBandPartLayerParams_default_instance_ = (uint64_t)&off_24D9270E0;
  *(_QWORD *)algn_254FF8978 = 0;
  dword_254FF8990 = 0;
  qword_254FF8980 = 0;
  unk_254FF8988 = 0;
  byte_254FF8998 = 1;
  CoreML::Specification::_UpperTriangularLayerParams_default_instance_ = (uint64_t)&off_24D927178;
  *(_QWORD *)algn_254FF89A8 = 0;
  dword_254FF89B8 = 0;
  qword_254FF89B0 = 0;
  byte_254FF89C0 = 1;
  CoreML::Specification::_LowerTriangularLayerParams_default_instance_ = (uint64_t)&off_24D927210;
  unk_254FF89D0 = 0;
  dword_254FF89E0 = 0;
  qword_254FF89D8 = 0;
  byte_254FF89E8 = 1;
  CoreML::Specification::_BroadcastToLikeLayerParams_default_instance_ = (uint64_t)&off_24D9272A8;
  qword_254FF89F8 = 0;
  dword_254FF8A00 = 0;
  byte_254FF8A08 = 1;
  CoreML::Specification::_BroadcastToStaticLayerParams_default_instance_ = (uint64_t)&off_24D927340;
  *(_QWORD *)algn_254FF8A18 = 0;
  qword_254FF8A20 = 0;
  unk_254FF8A28 = 0;
  dword_254FF8A34 = 0;
  byte_254FF8A38 = 1;
  CoreML::Specification::_BroadcastToDynamicLayerParams_default_instance_ = (uint64_t)&off_24D9273D8;
  qword_254FF8A48 = 0;
  dword_254FF8A50 = 0;
  byte_254FF8A58 = 1;
  CoreML::Specification::_AddBroadcastableLayerParams_default_instance_ = (uint64_t)&off_24D927470;
  qword_254FF8A68 = 0;
  dword_254FF8A70 = 0;
  byte_254FF8A78 = 1;
  CoreML::Specification::_MaxBroadcastableLayerParams_default_instance_ = (uint64_t)&off_24D927508;
  qword_254FF8A88 = 0;
  dword_254FF8A90 = 0;
  byte_254FF8A98 = 1;
  CoreML::Specification::_MinBroadcastableLayerParams_default_instance_ = (uint64_t)&off_24D9275A0;
  qword_254FF8AA8 = 0;
  dword_254FF8AB0 = 0;
  byte_254FF8AB8 = 1;
  CoreML::Specification::_ModBroadcastableLayerParams_default_instance_ = (uint64_t)&off_24D927638;
  qword_254FF8AC8 = 0;
  dword_254FF8AD0 = 0;
  byte_254FF8AD8 = 1;
  CoreML::Specification::_FloorDivBroadcastableLayerParams_default_instance_ = (uint64_t)&off_24D9276D0;
  qword_254FF8AE8 = 0;
  dword_254FF8AF0 = 0;
  byte_254FF8AF8 = 1;
  CoreML::Specification::_SubtractBroadcastableLayerParams_default_instance_ = (uint64_t)&off_24D927768;
  qword_254FF8B08 = 0;
  dword_254FF8B10 = 0;
  byte_254FF8B18 = 1;
  CoreML::Specification::_MultiplyBroadcastableLayerParams_default_instance_ = (uint64_t)&off_24D927800;
  qword_254FF8B28 = 0;
  dword_254FF8B30 = 0;
  byte_254FF8B38 = 1;
  CoreML::Specification::_DivideBroadcastableLayerParams_default_instance_ = (uint64_t)&off_24D927898;
  qword_254FF8B48 = 0;
  dword_254FF8B50 = 0;
  byte_254FF8B58 = 1;
  CoreML::Specification::_GatherLayerParams_default_instance_ = (uint64_t)&off_24D927930;
  *(_QWORD *)algn_254FF8B68 = 0;
  dword_254FF8B78 = 0;
  qword_254FF8B70 = 0;
  byte_254FF8B80 = 1;
  CoreML::Specification::_ScatterLayerParams_default_instance_ = (uint64_t)&off_24D9279C8;
  unk_254FF8B90 = 0;
  qword_254FF8B98 = 0;
  unk_254FF8BA0 = 0;
  byte_254FF8BA8 = 1;
  CoreML::Specification::_GatherNDLayerParams_default_instance_ = (uint64_t)&off_24D927A60;
  qword_254FF8BB8 = 0;
  dword_254FF8BC0 = 0;
  byte_254FF8BC8 = 1;
  CoreML::Specification::_ScatterNDLayerParams_default_instance_ = (uint64_t)&off_24D927AF8;
  *(_QWORD *)algn_254FF8BD8 = 0;
  qword_254FF8BE0 = 0;
  byte_254FF8BE8 = 1;
  CoreML::Specification::_GatherAlongAxisLayerParams_default_instance_ = (uint64_t)&off_24D927B90;
  *(_QWORD *)algn_254FF8BF8 = 0;
  dword_254FF8C08 = 0;
  qword_254FF8C00 = 0;
  byte_254FF8C10 = 1;
  CoreML::Specification::_ScatterAlongAxisLayerParams_default_instance_ = (uint64_t)&off_24D927C28;
  unk_254FF8C20 = 0;
  qword_254FF8C28 = 0;
  unk_254FF8C30 = 0;
  byte_254FF8C38 = 1;
  CoreML::Specification::_StackLayerParams_default_instance_ = (uint64_t)&off_24D927CC0;
  *(_QWORD *)algn_254FF8C48 = 0;
  dword_254FF8C58 = 0;
  qword_254FF8C50 = 0;
  byte_254FF8C60 = 1;
  CoreML::Specification::_RankPreservingReshapeLayerParams_default_instance_ = (uint64_t)&off_24D927D58;
  unk_254FF8C70 = 0;
  qword_254FF8C78 = 0;
  unk_254FF8C80 = 0;
  dword_254FF8C8C = 0;
  byte_254FF8C90 = 1;
  CoreML::Specification::_ConstantPaddingLayerParams_default_instance_ = (uint64_t)&off_24D927DF0;
  unk_254FF8CA0 = 0;
  qword_254FF8CA8 = 0;
  unk_254FF8CB0 = 0;
  byte_254FF8CC0 = 0;
  dword_254FF8CBC = 0;
  dword_254FF8CC4 = 0;
  byte_254FF8CC8 = 1;
  CoreML::Specification::_RandomNormalLikeLayerParams_default_instance_ = (uint64_t)&off_24D927E88;
  *(_QWORD *)algn_254FF8CD8 = 0;
  dword_254FF8CF0 = 0;
  qword_254FF8CE0 = 0;
  unk_254FF8CE8 = 0;
  byte_254FF8CF8 = 1;
  CoreML::Specification::_RandomNormalStaticLayerParams_default_instance_ = (uint64_t)&off_24D927F20;
  *(_QWORD *)algn_254FF8D08 = 0;
  qword_254FF8D10 = 0;
  unk_254FF8D18 = 0;
  qword_254FF8D28 = 0;
  unk_254FF8D30 = 0;
  dword_254FF8D38 = 0;
  byte_254FF8D40 = 1;
  CoreML::Specification::_RandomNormalDynamicLayerParams_default_instance_ = (uint64_t)&off_24D927FB8;
  unk_254FF8D50 = 0;
  dword_254FF8D68 = 0;
  qword_254FF8D58 = 0;
  unk_254FF8D60 = 0;
  byte_254FF8D70 = 1;
  CoreML::Specification::_RandomUniformLikeLayerParams_default_instance_ = (uint64_t)&off_24D928050;
  unk_254FF8D80 = 0;
  dword_254FF8D98 = 0;
  qword_254FF8D88 = 0;
  unk_254FF8D90 = 0;
  byte_254FF8DA0 = 1;
  CoreML::Specification::_RandomUniformStaticLayerParams_default_instance_ = (uint64_t)&off_24D9280E8;
  CoreML::Specification::_RandomUniformDynamicLayerParams_default_instance_ = (uint64_t)&off_24D928180;
  CoreML::Specification::_RandomBernoulliLikeLayerParams_default_instance_ = (uint64_t)&off_24D928218;
  CoreML::Specification::_RandomBernoulliStaticLayerParams_default_instance_ = (uint64_t)&off_24D9282B0;
  CoreML::Specification::_RandomBernoulliDynamicLayerParams_default_instance_ = (uint64_t)&off_24D928348;
  CoreML::Specification::_ReduceL1LayerParams_default_instance_ = (uint64_t)&off_24D928478;
  CoreML::Specification::_SqueezeLayerParams_default_instance_ = (uint64_t)&off_24D928D60;
  CoreML::Specification::_SplitNDLayerParams_default_instance_ = (uint64_t)&off_24D928FC0;
  unk_254FF92A0 = 0;
  qword_254FF92C0 = 0;
  unk_254FF92C8 = 0;
  dword_254FF92D0 = 0;
  qword_254FF92A8 = 0;
  unk_254FF92B0 = 0;
  CoreML::Specification::_ArgMinLayerParams_default_instance_ = (uint64_t)&off_24D928F28;
  *(_QWORD *)algn_254FF9278 = 0;
  dword_254FF928C = 0;
  byte_254FF9290 = 1;
  qword_254FF9280 = 0;
  byte_254FF9288 = 0;
  CoreML::Specification::_ArgMaxLayerParams_default_instance_ = (uint64_t)&off_24D928E90;
  unk_254FF9250 = 0;
  qword_254FF9258 = 0;
  byte_254FF9260 = 0;
  byte_254FF9268 = 1;
  dword_254FF9264 = 0;
  byte_254FF9238 = 0;
  qword_254FF9228 = 0;
  unk_254FF9230 = 0;
  byte_254FF9240 = 1;
  CoreML::Specification::_TopKLayerParams_default_instance_ = (uint64_t)&off_24D928DF8;
  unk_254FF9220 = 0;
  dword_254FF923C = 0;
  byte_254FF9210 = 1;
  qword_254FF91F0 = 0;
  unk_254FF91F8 = 0;
  qword_254FF91E8 = 0;
  byte_254FF9204 = 0;
  dword_254FF9208 = 0;
  CoreML::Specification::_ReduceLogSumExpLayerParams_default_instance_ = (uint64_t)&off_24D9289D0;
  CoreML::Specification::_ReshapeDynamicLayerParams_default_instance_ = (uint64_t)&off_24D928CC8;
  qword_254FF91C8 = 0;
  dword_254FF91D0 = 0;
  byte_254FF91D8 = 1;
  CoreML::Specification::_ReshapeLikeLayerParams_default_instance_ = (uint64_t)&off_24D928C30;
  qword_254FF91A8 = 0;
  dword_254FF91B0 = 0;
  byte_254FF91B8 = 1;
  CoreML::Specification::_ReshapeStaticLayerParams_default_instance_ = (uint64_t)&off_24D928B98;
  *(_QWORD *)algn_254FF9178 = 0;
  dword_254FF9194 = 0;
  byte_254FF9198 = 1;
  qword_254FF9180 = 0;
  unk_254FF9188 = 0;
  CoreML::Specification::_FlattenTo2DLayerParams_default_instance_ = (uint64_t)&off_24D928B00;
  unk_254FF9150 = 0;
  dword_254FF9160 = 0;
  byte_254FF9168 = 1;
  qword_254FF9158 = 0;
  CoreML::Specification::_ExpandDimsLayerParams_default_instance_ = (uint64_t)&off_24D928A68;
  unk_254FF9120 = 0;
  qword_254FF9128 = 0;
  unk_254FF9130 = 0;
  dword_254FF913C = 0;
  byte_254FF9140 = 1;
  qword_254FF90F0 = 0;
  unk_254FF90F8 = 0;
  qword_254FF90E8 = 0;
  word_254FF9104 = 0;
  dword_254FF9108 = 0;
  byte_254FF9110 = 1;
  CoreML::Specification::_ReduceLogSumLayerParams_default_instance_ = (uint64_t)&off_24D9288A0;
  *(_QWORD *)algn_254FF9078 = 0;
  word_254FF90CC = 0;
  dword_254FF90D0 = 0;
  byte_254FF90D8 = 1;
  CoreML::Specification::_ReduceSumSquareLayerParams_default_instance_ = (uint64_t)&off_24D928938;
  unk_254FF90B0 = 0;
  qword_254FF90B8 = 0;
  unk_254FF90C0 = 0;
  byte_254FF90A0 = 1;
  qword_254FF9080 = 0;
  unk_254FF9088 = 0;
  word_254FF9094 = 0;
  dword_254FF9098 = 0;
  CoreML::Specification::_ReduceMinLayerParams_default_instance_ = (uint64_t)&off_24D928640;
  CoreML::Specification::_ReduceMeanLayerParams_default_instance_ = (uint64_t)&off_24D928808;
  unk_254FF9040 = 0;
  word_254FF905C = 0;
  dword_254FF9060 = 0;
  byte_254FF9068 = 1;
  qword_254FF9048 = 0;
  unk_254FF9050 = 0;
  CoreML::Specification::_ReduceProdLayerParams_default_instance_ = (uint64_t)&off_24D928770;
  *(_QWORD *)algn_254FF9008 = 0;
  qword_254FF9010 = 0;
  unk_254FF9018 = 0;
  word_254FF9024 = 0;
  dword_254FF9028 = 0;
  byte_254FF9030 = 1;
  byte_254FF8FF8 = 1;
  CoreML::Specification::_ReduceSumLayerParams_default_instance_ = (uint64_t)&off_24D9286D8;
  unk_254FF8FD0 = 0;
  qword_254FF8FD8 = 0;
  unk_254FF8FE0 = 0;
  word_254FF8FEC = 0;
  dword_254FF8FF0 = 0;
  qword_254FF8FA0 = 0;
  unk_254FF8FA8 = 0;
  qword_254FF8F98 = 0;
  word_254FF8FB4 = 0;
  dword_254FF8FB8 = 0;
  byte_254FF8FC0 = 1;
  CoreML::Specification::_ReduceL2LayerParams_default_instance_ = (uint64_t)&off_24D928510;
  *(_QWORD *)algn_254FF8F28 = 0;
  word_254FF8F7C = 0;
  dword_254FF8F80 = 0;
  byte_254FF8F88 = 1;
  CoreML::Specification::_ReduceMaxLayerParams_default_instance_ = (uint64_t)&off_24D9285A8;
  unk_254FF8F60 = 0;
  qword_254FF8F68 = 0;
  unk_254FF8F70 = 0;
  dword_254FF8F48 = 0;
  byte_254FF8F50 = 1;
  qword_254FF8F30 = 0;
  unk_254FF8F38 = 0;
  word_254FF8F44 = 0;
  byte_254FF8F18 = 1;
  qword_254FF8EF8 = 0;
  unk_254FF8F00 = 0;
  qword_254FF8EF0 = 0;
  word_254FF8F0C = 0;
  dword_254FF8F10 = 0;
  qword_254FF8E98 = 0;
  unk_254FF8EA0 = 0;
  qword_254FF8E90 = 0;
  byte_254FF8EA8 = 1;
  unk_254FF8EB8 = 0u;
  byte_254FF8EE0 = 1;
  CoreML::Specification::_CategoricalDistributionLayerParams_default_instance_ = (uint64_t)&off_24D9283E0;
  qword_254FF8ED8 = 0;
  unk_254FF8EC8 = 0u;
  qword_254FF8E30 = 0;
  unk_254FF8E38 = 0;
  qword_254FF8E28 = 0;
  qword_254FF8E50 = 0;
  unk_254FF8E58 = 0;
  qword_254FF8E70 = 0;
  unk_254FF8E78 = 0;
  byte_254FF8E80 = 1;
  byte_254FF8E40 = 1;
  qword_254FF8E60 = 0;
  qword_254FF8DB8 = 0;
  unk_254FF8DC0 = 0;
  qword_254FF8DB0 = 0;
  qword_254FF8DD0 = 0;
  unk_254FF8DD8 = 0;
  dword_254FF8DE0 = 0;
  qword_254FF8DF8 = 0;
  unk_254FF8E00 = 0;
  byte_254FF8E18 = 1;
  byte_254FF8DE8 = 1;
  qword_254FF8E08 = 0;
  dword_254FF8E10 = 0;
  byte_254FF92D8 = 1;
  CoreML::Specification::_CeilLayerParams_default_instance_ = (uint64_t)&off_24D929058;
  qword_254FF92E8 = 0;
  dword_254FF92F0 = 0;
  byte_254FF92F8 = 1;
  CoreML::Specification::_RoundLayerParams_default_instance_ = (uint64_t)&off_24D9290F0;
  qword_254FF9308 = 0;
  dword_254FF9310 = 0;
  byte_254FF9318 = 1;
  CoreML::Specification::_FloorLayerParams_default_instance_ = (uint64_t)&off_24D929188;
  qword_254FF9328 = 0;
  dword_254FF9330 = 0;
  byte_254FF9338 = 1;
  CoreML::Specification::_SignLayerParams_default_instance_ = (uint64_t)&off_24D929220;
  qword_254FF9348 = 0;
  dword_254FF9350 = 0;
  byte_254FF9358 = 1;
  CoreML::Specification::_ClipLayerParams_default_instance_ = (uint64_t)&off_24D9292B8;
  *(_QWORD *)algn_254FF9368 = 0;
  dword_254FF9378 = 0;
  qword_254FF9370 = 0;
  byte_254FF9380 = 1;
  CoreML::Specification::_SliceStaticLayerParams_default_instance_ = (uint64_t)&off_24D929350;
  unk_254FF9390 = 0;
  qword_254FF93B0 = 0;
  unk_254FF93B8 = 0;
  qword_254FF93C8 = 0;
  unk_254FF93D0 = 0;
  qword_254FF93E0 = 0;
  unk_254FF93E8 = 0;
  qword_254FF93F8 = 0;
  unk_254FF9400 = 0;
  qword_254FF9410 = 0;
  unk_254FF9418 = 0;
  qword_254FF9398 = 0;
  unk_254FF93A0 = 0;
  dword_254FF9424 = 0;
  byte_254FF9428 = 1;
  CoreML::Specification::_SliceDynamicLayerParams_default_instance_ = (uint64_t)&off_24D9293E8;
  *(_QWORD *)algn_254FF9438 = 0;
  qword_254FF9458 = 0;
  unk_254FF9460 = 0;
  qword_254FF9470 = 0;
  unk_254FF9478 = 0;
  qword_254FF9488 = 0;
  unk_254FF9490 = 0;
  qword_254FF94A0 = 0;
  unk_254FF94A8 = 0;
  qword_254FF9440 = 0;
  unk_254FF9448 = 0;
  dword_254FF94B4 = 0;
  byte_254FF94B8 = 1;
  CoreML::Specification::_TileLayerParams_default_instance_ = (uint64_t)&off_24D929480;
  *(_QWORD *)algn_254FF94C8 = 0;
  qword_254FF94D0 = 0;
  unk_254FF94D8 = 0;
  dword_254FF94E4 = 0;
  byte_254FF94E8 = 1;
  CoreML::Specification::_GetShapeLayerParams_default_instance_ = (uint64_t)&off_24D929518;
  qword_254FF94F8 = 0;
  dword_254FF9500 = 0;
  byte_254FF9508 = 1;
  CoreML::Specification::_ErfLayerParams_default_instance_ = (uint64_t)&off_24D9295B0;
  qword_254FF9518 = 0;
  dword_254FF9520 = 0;
  byte_254FF9528 = 1;
  CoreML::Specification::_GeluLayerParams_default_instance_ = (uint64_t)&off_24D929648;
  *(_QWORD *)algn_254FF9538 = 0;
  qword_254FF9540 = 0;
  byte_254FF9548 = 1;
  CoreML::Specification::_RangeStaticLayerParams_default_instance_ = (uint64_t)&off_24D9296E0;
  *(_QWORD *)algn_254FF9558 = 0;
  qword_254FF9560 = 0;
  unk_254FF9568 = 0;
  byte_254FF9570 = 1;
  CoreML::Specification::_RangeDynamicLayerParams_default_instance_ = (uint64_t)&off_24D929778;
  unk_254FF9580 = 0;
  dword_254FF9590 = 0;
  qword_254FF9588 = 0;
  byte_254FF9598 = 1;
  CoreML::Specification::_SlidingWindowsLayerParams_default_instance_ = (uint64_t)&off_24D929810;
  dword_254FF95C8 = 0;
  unk_254FF95B8 = 0u;
  unk_254FF95A8 = 0u;
  byte_254FF95D0 = 1;
  CoreML::Specification::_LayerNormalizationLayerParams_default_instance_ = (uint64_t)&off_24D9298A8;
  CoreML::Specification::_NonMaximumSuppressionLayerParams_default_instance_ = (uint64_t)&off_24D929940;
  *(_QWORD *)algn_254FF9628 = 0;
  dword_254FF9644 = 0;
  byte_254FF9640 = 0;
  qword_254FF9630 = 0;
  unk_254FF9638 = 0;
  byte_254FF9648 = 1;
  CoreML::Specification::_ClampedReLULayerParams_default_instance_ = (uint64_t)&off_24D9299D8;
  *(_QWORD *)algn_254FF9658 = 0;
  dword_254FF9668 = 0;
  qword_254FF9660 = 0;
  byte_254FF9670 = 1;
  CoreML::Specification::_ArgSortLayerParams_default_instance_ = (uint64_t)&off_24D929A70;
  unk_254FF9680 = 0;
  dword_254FF9694 = 0;
  qword_254FF9688 = 0;
  byte_254FF9690 = 0;
  byte_254FF9698 = 1;
  CoreML::Specification::_SliceBySizeLayerParams_default_instance_ = (uint64_t)&off_24D929B08;
  *(_QWORD *)algn_254FF96A8 = 0;
  dword_254FF96C0 = 0;
  qword_254FF96B0 = 0;
  unk_254FF96B8 = 0;
  byte_254FF96C8 = 1;
  CoreML::Specification::_NeuralNetworkClassifier_default_instance_ = (uint64_t)&off_24D929BA0;
  CoreML::Specification::_OneHotLayerParams_default_instance_ = (uint64_t)&off_24D929C38;
  dword_254FF9778 = 0;
  unk_254FF9768 = 0u;
  unk_254FF9758 = 0u;
  byte_254FF9780 = 1;
  CoreML::Specification::_CumSumLayerParams_default_instance_ = (uint64_t)&off_24D929CD0;
  unk_254FF9790 = 0;
  dword_254FF97A4 = 0;
  qword_254FF9798 = 0;
  word_254FF97A0 = 0;
  byte_254FF97A8 = 1;
  CoreML::Specification::_NeuralNetworkRegressor_default_instance_ = (uint64_t)&off_24D929D68;
  CoreML::Specification::_NetworkUpdateParameters_default_instance_ = (uint64_t)&off_24D929E00;
  CoreML::Specification::_LossLayer_default_instance_ = (uint64_t)&off_24D929E98;
  unk_254FF9870 = 0;
  qword_254FF9878 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FF9888 = 0;
  byte_254FF9890 = 1;
  CoreML::Specification::_CategoricalCrossEntropyLossLayer_default_instance_ = (uint64_t)&off_24D929F30;
  unk_254FF98B0 = 0;
  qword_254FF98B8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FF98C0 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_254FF98C8 = 0;
  byte_254FF98D0 = 1;
  qword_254FF9710 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_254FF98E8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_254FF98F0 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  CoreML::Specification::_MeanSquaredErrorLossLayer_default_instance_ = (uint64_t)&off_24D929FC8;
  unk_254FF98E0 = 0;
  dword_254FF98F8 = 0;
  byte_254FF9900 = 1;
  CoreML::Specification::_Optimizer_default_instance_ = (uint64_t)&off_24D92A060;
  CoreML::Specification::_SGDOptimizer_default_instance_ = (uint64_t)&off_24D92A0F8;
  CoreML::Specification::_AdamOptimizer_default_instance_ = (uint64_t)&off_24D92A190;
  byte_254FF8600 = 1;
  byte_254FF86F0 = 1;
  byte_254FF9618 = 1;
  byte_254FF9738 = 1;
  byte_254FF9808 = 1;
  byte_254FF9860 = 1;
  byte_254FF9928 = 1;
  byte_254FF9970 = 1;
  byte_254FF99B8 = 1;
  qword_254FF74F8 = (uint64_t)&CoreML::Specification::_NeuralNetwork_default_instance_;
  qword_254FF7528 = (uint64_t)&CoreML::Specification::_NeuralNetwork_default_instance_;
  qword_254FF7530 = (uint64_t)&CoreML::Specification::_NeuralNetwork_default_instance_;
  qword_254FF6C00 = (uint64_t)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  qword_254FF6E70 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF6E78 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  *(_QWORD *)&xmmword_254FF7960 = &CoreML::Specification::_WeightParams_default_instance_;
  *((_QWORD *)&xmmword_254FF7960 + 1) = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF79E0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF79E8 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF7A60 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  *(_QWORD *)&xmmword_254FF7A68 = &CoreML::Specification::_WeightParams_default_instance_;
  CoreML::Specification::_LoadConstantNDLayerParams_default_instance_ = (uint64_t)&off_24D926500;
  unk_254FF86C0 = 0;
  qword_254FF9708 = 0;
  unk_254FF85D0 = 0u;
  xmmword_254FF85E0[0] = 0u;
  xmmword_254FF85E0[1] = 0u;
  qword_254FF86C8 = 0;
  unk_254FF86D0 = 0;
  dword_254FF86E8 = 0;
  qword_254FF95E8 = 0;
  unk_254FF95F0 = 0;
  qword_254FF95E0 = 0;
  qword_254FF9610 = 0;
  unk_254FF96F8 = 0u;
  unk_254FF96E8 = 0u;
  unk_254FF96D8 = 0u;
  unk_254FF9720 = 0;
  qword_254FF9730 = 0;
  *(_OWORD *)((char *)&qword_254FF97F0 + 4) = 0u;
  unk_254FF97E8 = 0u;
  unk_254FF97D8 = 0u;
  unk_254FF97C8 = 0u;
  unk_254FF97B8 = 0u;
  dword_254FF9858 = 0;
  unk_254FF9828 = 0u;
  unk_254FF9818 = 0u;
  qword_254FF9910 = 0;
  qword_254FF9920 = 0;
  dword_254FF9968 = 0;
  *(_OWORD *)algn_254FF9948 = 0u;
  dword_254FF99B0 = 0;
  unk_254FF9980 = 0u;
  qword_254FF7AA0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  *(_QWORD *)&xmmword_254FF7AA8 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF7AE0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  *(_QWORD *)&xmmword_254FF7AE8 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF7B20 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF7B28 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF7B30 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  *(_QWORD *)&xmmword_254FF7B38[0] = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF7EA8 = (uint64_t)&CoreML::Specification::_SamplingMode_default_instance_;
  qword_254FF7EE8 = (uint64_t)&CoreML::Specification::_SamplingMode_default_instance_;
  qword_254FF7EF0 = (uint64_t)&CoreML::Specification::_BoxCoordinatesMode_default_instance_;
  qword_254FF7F38 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF7F90 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF7F98 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF7FD8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF8148 = (uint64_t)&CoreML::Specification::_BorderAmounts_default_instance_;
  qword_254FF8240 = (uint64_t)&CoreML::Specification::_ActivationParams_default_instance_;
  unk_254FF8248 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF8250 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  *(_QWORD *)&xmmword_254FF8258 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF82A8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF82B0 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF82B8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF82C0 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF82C8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF82D0 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF82D8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF82E0 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF82E8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF8348 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF8350 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF8358 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF8360 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF8368 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF8370 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF8378 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF8380 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF8388 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF8390 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF8398 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF83A0 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF83A8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF83B0 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF83B8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF83F8 = (uint64_t)&CoreML::Specification::_LSTMParams_default_instance_;
  unk_254FF8400 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
  qword_254FF8480 = (uint64_t)&CoreML::Specification::_LSTMParams_default_instance_;
  result = &CoreML::Specification::_CustomLayerParams_ParametersEntry_default_instance_;
  qword_254FF8500 = (uint64_t)&CoreML::Specification::_CustomLayerParams_ParametersEntry_default_instance_;
  qword_254FF8510 = (uint64_t)&CoreML::Specification::_CustomLayerParams_CustomLayerParamValue_default_instance_;
  qword_254FF85D8 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  *(_QWORD *)&xmmword_254FF85E0[0] = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF86E0 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF9600 = (uint64_t)&CoreML::Specification::_WeightParams_default_instance_;
  unk_254FF9608 = &CoreML::Specification::_WeightParams_default_instance_;
  qword_254FF9718 = (uint64_t)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  qword_254FF97F0 = (uint64_t)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  qword_254FF9838 = (uint64_t)&CoreML::Specification::_Optimizer_default_instance_;
  unk_254FF9840 = &CoreML::Specification::_Int64Parameter_default_instance_;
  qword_254FF9848 = (uint64_t)&CoreML::Specification::_BoolParameter_default_instance_;
  unk_254FF9850 = &CoreML::Specification::_Int64Parameter_default_instance_;
  qword_254FF9950 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  unk_254FF9958 = &CoreML::Specification::_Int64Parameter_default_instance_;
  qword_254FF9960 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  qword_254FF9988 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  unk_254FF9990 = &CoreML::Specification::_Int64Parameter_default_instance_;
  qword_254FF9998 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  unk_254FF99A0 = &CoreML::Specification::_DoubleParameter_default_instance_;
  qword_254FF99A8 = (uint64_t)&CoreML::Specification::_DoubleParameter_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(CoreML::Specification::protobuf_NeuralNetwork_2eproto *this)
{
  unint64_t v1;
  _QWORD v2[2];
  char v3;

  v1 = atomic_load(&CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &off_24D93BCB0;
    v2[1] = CoreML::Specification::protobuf_NeuralNetwork_2eproto::TableStruct::InitDefaultsImpl;
    v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2180112E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::NeuralNetwork *CoreML::Specification::NeuralNetwork::NeuralNetwork(CoreML::Specification::NeuralNetwork *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_QWORD *)this = &off_24D9229A0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 7) = 0;
  if (this != (CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  return this;
}

void sub_21801136C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NeuralNetwork::~NeuralNetwork(CoreML::Specification::NeuralNetwork *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D9229A0;
  if (this != (CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_)
  {
    v2 = *((_QWORD *)this + 8);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::NeuralNetwork::~NeuralNetwork(this);
  JUMPOUT(0x219A19A08);
}

uint64_t *CoreML::Specification::NeuralNetwork::default_instance(CoreML::Specification::NeuralNetwork *this)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  return &CoreML::Specification::_NeuralNetwork_default_instance_;
}

CoreML::Specification::NeuralNetwork *CoreML::Specification::NeuralNetwork::New(CoreML::Specification::NeuralNetwork *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::NeuralNetwork *v3;

  v3 = (CoreML::Specification::NeuralNetwork *)operator new();
  CoreML::Specification::NeuralNetwork::NeuralNetwork(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetwork>(a2, v3);
  return v3;
}

void sub_2180114A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40280AC348);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetwork>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetwork>);
  return result;
}

uint64_t CoreML::Specification::NeuralNetwork::Clear(CoreML::Specification::NeuralNetwork *this)
{
  uint64_t v2;
  CoreML::Specification::NeuralNetworkLayer **v3;
  CoreML::Specification::NeuralNetworkLayer *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;

  v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    v3 = (CoreML::Specification::NeuralNetworkLayer **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      CoreML::Specification::NeuralNetworkLayer::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v5 = *((unsigned int *)this + 12);
  if ((int)v5 >= 1)
  {
    v6 = (uint64_t *)(*((_QWORD *)this + 7) + 8);
    do
    {
      v7 = *v6++;
      CoreML::Specification::NeuralNetworkPreprocessing::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 12) = 0;
  }
  v10 = *((_QWORD *)this + 8);
  v9 = (_QWORD *)((char *)this + 64);
  result = v10;
  if (v10)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *v9 = 0;
  v9[1] = 0;
  return result;
}

uint64_t CoreML::Specification::NeuralNetwork::MergePartialFromCodedStream(CoreML::Specification::NeuralNetwork *this, char **a2, unsigned int a3)
{
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int TagFallback;
  CoreML::Specification::NeuralNetworkLayer *v12;
  char *v13;
  int VarintSizeAsIntFallback;
  CoreML::Specification::NeuralNetworkPreprocessing *v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  CoreML::Specification::NetworkUpdateParameters *v22;
  char *v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t result;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t Varint32Fallback;
  uint64_t v34;

  v5 = (char *)this + 40;
  v6 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      v7 = *a2;
      if (*a2 < a2[1])
        break;
      v8 = 0;
LABEL_7:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_8;
LABEL_14:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_8;
          v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>((uint64_t)v6);
          v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v13;
            *a2 = v13 + 1;
          }
          v25 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v25 & 0x8000000000000000) != 0)
            return 0;
          v27 = v25;
          result = CoreML::Specification::NeuralNetworkLayer::MergePartialFromCodedStream(v12, (_tc_google::protobuf::io::CodedInputStream *)a2, v26);
          if (!(_DWORD)result)
            return result;
          goto LABEL_48;
        case 2u:
          if (v9 != 18)
            goto LABEL_8;
          v15 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((uint64_t)v5);
          v16 = *a2;
          if (*a2 >= a2[1] || *v16 < 0)
          {
            v17 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v17 < 0)
              return 0;
          }
          else
          {
            v17 = *v16;
            *a2 = v16 + 1;
          }
          v29 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17);
          if ((v29 & 0x8000000000000000) != 0)
            return 0;
          v27 = v29;
          result = CoreML::Specification::NeuralNetworkPreprocessing::MergePartialFromCodedStream(v15, a2, v30);
          if (!(_DWORD)result)
            return result;
          goto LABEL_48;
        case 5u:
          if (v9 != 40)
            goto LABEL_8;
          v18 = *a2;
          if (*a2 >= a2[1])
          {
            v19 = 0;
          }
          else
          {
            v19 = *v18;
            if ((*v18 & 0x80000000) == 0)
            {
              *a2 = v18 + 1;
              goto LABEL_52;
            }
          }
          Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v19);
          v19 = Varint32Fallback;
          if (Varint32Fallback < 0)
            return 0;
LABEL_52:
          *((_DWORD *)this + 18) = v19;
          continue;
        case 6u:
          if (v9 != 48)
            goto LABEL_8;
          v20 = *a2;
          if (*a2 >= a2[1])
          {
            v21 = 0;
          }
          else
          {
            v21 = *v20;
            if ((*v20 & 0x80000000) == 0)
            {
              *a2 = v20 + 1;
              goto LABEL_55;
            }
          }
          v34 = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v21);
          v21 = v34;
          if (v34 < 0)
            return 0;
LABEL_55:
          *((_DWORD *)this + 19) = v21;
          break;
        case 0xAu:
          if (v9 != 82)
            goto LABEL_8;
          v22 = (CoreML::Specification::NetworkUpdateParameters *)*((_QWORD *)this + 8);
          if (!v22)
          {
            v22 = (CoreML::Specification::NetworkUpdateParameters *)operator new();
            CoreML::Specification::NetworkUpdateParameters::NetworkUpdateParameters(v22);
            *((_QWORD *)this + 8) = v22;
          }
          v23 = *a2;
          if (*a2 >= a2[1] || *v23 < 0)
          {
            v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v24 < 0)
              return 0;
          }
          else
          {
            v24 = *v23;
            *a2 = v23 + 1;
          }
          v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v24);
          if ((v31 & 0x8000000000000000) != 0)
            return 0;
          v27 = v31;
          result = CoreML::Specification::NetworkUpdateParameters::MergePartialFromCodedStream(v22, (_tc_google::protobuf::io::CodedInputStream *)a2, v32);
          if (!(_DWORD)result)
            return result;
LABEL_48:
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v27))return 0;
          continue;
        default:
          goto LABEL_8;
      }
    }
    v8 = *v7;
    if (*v7 < 1)
      goto LABEL_7;
    *a2 = v7 + 1;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_14;
LABEL_8:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
  }
}

void sub_21801186C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40A49539A5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NeuralNetwork::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  int i;
  int v8;
  int j;
  signed int v10;
  signed int v11;
  uint64_t v12;

  v5 = this;
  v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(*(_QWORD *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  v8 = *(_DWORD *)(v5 + 48);
  if (v8)
  {
    for (j = 0; j != v8; ++j)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * j + 8), a2, a4);
  }
  v10 = *(_DWORD *)(v5 + 72);
  if (v10)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(5, v10, a2, a4);
  v11 = *(_DWORD *)(v5 + 76);
  if (v11)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(6, v11, a2, a4);
  if ((uint64_t *)v5 != &CoreML::Specification::_NeuralNetwork_default_instance_)
  {
    v12 = *(_QWORD *)(v5 + 64);
    if (v12)
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, v12, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::NeuralNetwork::ByteSizeLong(CoreML::Specification::NeuralNetwork *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  CoreML::Specification::NetworkUpdateParameters *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 6);
    do
    {
      v5 = CoreML::Specification::NeuralNetworkLayer::ByteSizeLong(*(CoreML::Specification::NeuralNetworkLayer **)(*((_QWORD *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    v4 = 0;
  }
  v6 = *((unsigned int *)this + 12);
  v7 = v4 + v6;
  if ((_DWORD)v6)
  {
    v8 = 0;
    do
    {
      v9 = CoreML::Specification::NeuralNetworkPreprocessing::ByteSizeLong(*(CoreML::Specification::NeuralNetworkPreprocessing **)(*((_QWORD *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while ((_DWORD)v6 != v8);
  }
  if (this != (CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_)
  {
    v10 = (CoreML::Specification::NetworkUpdateParameters *)*((_QWORD *)this + 8);
    if (v10)
    {
      v11 = CoreML::Specification::NetworkUpdateParameters::ByteSizeLong(v10);
      v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v12 = 11;
  v13 = *((_DWORD *)this + 18);
  v14 = *((_DWORD *)this + 19);
  v15 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v13 >= 0)
    v12 = v15;
  v16 = v12 + v7;
  if (!v13)
    v16 = v7;
  v17 = 11;
  v18 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v14 >= 0)
    v17 = v18;
  v19 = v17 + v16;
  if (v14)
    result = v19;
  else
    result = v16;
  *((_DWORD *)this + 20) = result;
  return result;
}

void CoreML::Specification::NeuralNetwork::MergeFrom(CoreML::Specification::NeuralNetwork *this, const CoreML::Specification::NeuralNetwork *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::NeuralNetworkLayer **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  signed int v10;
  CoreML::Specification::NeuralNetworkPreprocessing **v11;
  unsigned int *v12;
  int v13;
  int *v14;
  const CoreML::Specification::NetworkUpdateParameters *v15;
  CoreML::Specification::NetworkUpdateParameters *v16;
  const CoreML::Specification::NetworkUpdateParameters *v17;
  int v18;
  int v19;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::NeuralNetworkLayer **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::NeuralNetwork *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkLayer>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::NeuralNetworkLayer **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    v11 = (CoreML::Specification::NeuralNetworkPreprocessing **)(*((_QWORD *)a2 + 7) + 8);
    v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::NeuralNetwork *)((char *)this + 40), *((_DWORD *)a2 + 12));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::NeuralNetworkPreprocessing>::TypeHandler>((_tc_google::protobuf::Arena **)this + 5, (CoreML::Specification::NeuralNetworkPreprocessing **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    v14 = (int *)*((_QWORD *)this + 7);
    if (*v14 < v13)
      *v14 = v13;
  }
  if (a2 != (const CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_)
  {
    v15 = (const CoreML::Specification::NetworkUpdateParameters *)*((_QWORD *)a2 + 8);
    if (v15)
    {
      v16 = (CoreML::Specification::NetworkUpdateParameters *)*((_QWORD *)this + 8);
      if (!v16)
      {
        v16 = (CoreML::Specification::NetworkUpdateParameters *)operator new();
        CoreML::Specification::NetworkUpdateParameters::NetworkUpdateParameters(v16);
        *((_QWORD *)this + 8) = v16;
        v15 = (const CoreML::Specification::NetworkUpdateParameters *)*((_QWORD *)a2 + 8);
      }
      if (v15)
        v17 = v15;
      else
        v17 = (const CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      CoreML::Specification::NetworkUpdateParameters::MergeFrom(v16, v17);
    }
  }
  v18 = *((_DWORD *)a2 + 18);
  if (v18)
    *((_DWORD *)this + 18) = v18;
  v19 = *((_DWORD *)a2 + 19);
  if (v19)
    *((_DWORD *)this + 19) = v19;
}

void sub_218011C6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40A49539A5);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NetworkUpdateParameters::MergeFrom(CoreML::Specification::NetworkUpdateParameters *this, const CoreML::Specification::NetworkUpdateParameters *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::LossLayer **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  const CoreML::Specification::Optimizer *v10;
  CoreML::Specification::Optimizer *v11;
  const CoreML::Specification::Optimizer *v12;
  const CoreML::Specification::Int64Parameter *v13;
  CoreML::Specification::Int64Parameter *v14;
  const CoreML::Specification::Int64Parameter *v15;
  const CoreML::Specification::DotProductLayerParams *v16;
  CoreML::Specification::BoolParameter *v17;
  const CoreML::Specification::DotProductLayerParams *v18;
  const CoreML::Specification::Int64Parameter *v19;
  CoreML::Specification::Int64Parameter *v20;
  const CoreML::Specification::Int64Parameter *v21;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::LossLayer **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::NetworkUpdateParameters *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::LossLayer>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::LossLayer **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  if (a2 != (const CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_)
  {
    v10 = (const CoreML::Specification::Optimizer *)*((_QWORD *)a2 + 5);
    if (v10)
    {
      v11 = (CoreML::Specification::Optimizer *)*((_QWORD *)this + 5);
      if (!v11)
      {
        v11 = (CoreML::Specification::Optimizer *)operator new();
        CoreML::Specification::Optimizer::Optimizer(v11);
        *((_QWORD *)this + 5) = v11;
        v10 = (const CoreML::Specification::Optimizer *)*((_QWORD *)a2 + 5);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const CoreML::Specification::Optimizer *)&CoreML::Specification::_Optimizer_default_instance_;
      CoreML::Specification::Optimizer::MergeFrom((std::string *)v11, v12);
    }
    v13 = (const CoreML::Specification::Int64Parameter *)*((_QWORD *)a2 + 6);
    if (v13)
    {
      v14 = (CoreML::Specification::Int64Parameter *)*((_QWORD *)this + 6);
      if (!v14)
      {
        v14 = (CoreML::Specification::Int64Parameter *)operator new();
        CoreML::Specification::Int64Parameter::Int64Parameter(v14);
        *((_QWORD *)this + 6) = v14;
        v13 = (const CoreML::Specification::Int64Parameter *)*((_QWORD *)a2 + 6);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (const CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_;
      CoreML::Specification::Int64Parameter::MergeFrom((std::string *)v14, v15);
    }
    v16 = (const CoreML::Specification::DotProductLayerParams *)*((_QWORD *)a2 + 7);
    if (v16)
    {
      v17 = (CoreML::Specification::BoolParameter *)*((_QWORD *)this + 7);
      if (!v17)
      {
        v17 = (CoreML::Specification::BoolParameter *)operator new();
        CoreML::Specification::BoolParameter::BoolParameter(v17);
        *((_QWORD *)this + 7) = v17;
        v16 = (const CoreML::Specification::DotProductLayerParams *)*((_QWORD *)a2 + 7);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (const CoreML::Specification::DotProductLayerParams *)&CoreML::Specification::_BoolParameter_default_instance_;
      CoreML::Specification::DotProductLayerParams::MergeFrom((std::string *)v17, v18);
    }
    v19 = (const CoreML::Specification::Int64Parameter *)*((_QWORD *)a2 + 8);
    if (v19)
    {
      v20 = (CoreML::Specification::Int64Parameter *)*((_QWORD *)this + 8);
      if (!v20)
      {
        v20 = (CoreML::Specification::Int64Parameter *)operator new();
        CoreML::Specification::Int64Parameter::Int64Parameter(v20);
        *((_QWORD *)this + 8) = v20;
        v19 = (const CoreML::Specification::Int64Parameter *)*((_QWORD *)a2 + 8);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (const CoreML::Specification::Int64Parameter *)&CoreML::Specification::_Int64Parameter_default_instance_;
      CoreML::Specification::Int64Parameter::MergeFrom((std::string *)v20, v21);
    }
  }
}

void sub_218011E90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NeuralNetwork::IsInitialized(CoreML::Specification::NeuralNetwork *this)
{
  return 1;
}

uint64_t CoreML::Specification::NeuralNetwork::Swap(uint64_t this, CoreML::Specification::NeuralNetwork *a2)
{
  if (a2 != (CoreML::Specification::NeuralNetwork *)this)
    return CoreML::Specification::NeuralNetwork::InternalSwap(this, a2);
  return this;
}

uint64_t CoreML::Specification::NeuralNetwork::InternalSwap(uint64_t this, CoreML::Specification::NeuralNetwork *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v2;
  LODWORD(v2) = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v2;
  LODWORD(v2) = *(_DWORD *)(this + 28);
  *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v2;
  v3 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v3;
  LODWORD(v3) = *(_DWORD *)(this + 48);
  *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v3;
  LODWORD(v3) = *(_DWORD *)(this + 52);
  *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  v4 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 72);
  *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 76);
  *(_DWORD *)(this + 76) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 80);
  *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  return this;
}

_QWORD *CoreML::Specification::NeuralNetwork::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NeuralNetwork");
}

CoreML::Specification::NeuralNetworkImageScaler *CoreML::Specification::NeuralNetworkImageScaler::NeuralNetworkImageScaler(CoreML::Specification::NeuralNetworkImageScaler *this)
{
  *(_QWORD *)this = &off_24D922A38;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::NeuralNetworkImageScaler *)&CoreML::Specification::_NeuralNetworkImageScaler_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_218012004(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NeuralNetworkImageScaler::~NeuralNetworkImageScaler(CoreML::Specification::NeuralNetworkImageScaler *this)
{
  *(_QWORD *)this = &off_24D922A38;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D922A38;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::NeuralNetworkImageScaler *CoreML::Specification::NeuralNetworkImageScaler::New(CoreML::Specification::NeuralNetworkImageScaler *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::NeuralNetworkImageScaler *v3;

  v3 = (CoreML::Specification::NeuralNetworkImageScaler *)operator new();
  CoreML::Specification::NeuralNetworkImageScaler::NeuralNetworkImageScaler(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetworkImageScaler>(a2, v3);
  return v3;
}

void sub_2180120D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40825B58B5);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetworkImageScaler>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkImageScaler>);
  return result;
}

uint64_t CoreML::Specification::NeuralNetworkImageScaler::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreML::Specification::NeuralNetworkImageScaler::MergePartialFromCodedStream(CoreML::Specification::NeuralNetworkImageScaler *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int TagFallback;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v26;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *(unsigned __int8 **)a2;
        v6 = *((_QWORD *)a2 + 1);
        if (*(_QWORD *)a2 >= v6)
        {
          v8 = 0;
LABEL_18:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
          v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v9 & 0x100000000) == 0)
            goto LABEL_8;
          goto LABEL_19;
        }
        v7 = v5 + 1;
        v8 = *v5;
        if ((char)*v5 < 1)
        {
          if ((unint64_t)v7 < v6)
          {
            v10 = *v7;
            if ((v8 & ~v10) >= 0x80)
            {
              *(_QWORD *)a2 = v5 + 2;
              v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
              goto LABEL_19;
            }
          }
          goto LABEL_18;
        }
        *(_QWORD *)a2 = v7;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_8;
LABEL_19:
        v14 = v9 >> 3;
        if (v9 >> 3 <= 0x14)
          break;
        if (v14 == 21)
        {
          if (v9 != 173)
            goto LABEL_8;
          v26 = 0;
          v19 = *(unsigned int **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 4)
          {
            if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v26))
              return 0;
            v20 = v26;
          }
          else
          {
            v20 = *v19;
            *(_QWORD *)a2 = v19 + 1;
          }
          *((_DWORD *)this + 7) = v20;
        }
        else if (v14 == 22)
        {
          if (v9 != 181)
            goto LABEL_8;
          v26 = 0;
          v21 = *(unsigned int **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 4)
          {
            if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v26))
              return 0;
            v22 = v26;
          }
          else
          {
            v22 = *v21;
            *(_QWORD *)a2 = v21 + 1;
          }
          *((_DWORD *)this + 8) = v22;
        }
        else
        {
          if (v14 != 30 || v9 != 245)
            goto LABEL_8;
          v26 = 0;
          v15 = *(unsigned int **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 4)
          {
            if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v26))
              return 0;
            v16 = v26;
          }
          else
          {
            v16 = *v15;
            *(_QWORD *)a2 = v15 + 1;
          }
          *((_DWORD *)this + 4) = v16;
        }
      }
      if (v14 == 10)
        break;
      if (v14 == 20 && v9 == 165)
      {
        v26 = 0;
        v17 = *(unsigned int **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) < 4)
        {
          if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v26))
            return 0;
          v18 = v26;
        }
        else
        {
          v18 = *v17;
          *(_QWORD *)a2 = v17 + 1;
        }
        *((_DWORD *)this + 6) = v18;
      }
      else
      {
LABEL_8:
        if ((_DWORD)v9)
          v11 = (v9 & 7) == 4;
        else
          v11 = 1;
        v12 = v11;
        if (v11
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)
        {
          return v12;
        }
      }
    }
    if (v9 != 85)
      goto LABEL_8;
    v26 = 0;
    v23 = *(unsigned int **)a2;
    if ((int)(*((_DWORD *)a2 + 2) - *(_QWORD *)a2) >= 4)
    {
      v24 = *v23;
      *(_QWORD *)a2 = v23 + 1;
      goto LABEL_44;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v26))
      return 0;
    v24 = v26;
LABEL_44:
    *((_DWORD *)this + 5) = v24;
  }
}

float *CoreML::Specification::NeuralNetworkImageScaler::SerializeWithCachedSizes(float *this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v4 = this;
  v5 = this[5];
  if (v5 != 0.0)
    this = (float *)_tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)0xA, a2, v5, a3);
  v6 = v4[6];
  if (v6 != 0.0)
    this = (float *)_tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)0x14, a2, v6, a3);
  v7 = v4[7];
  if (v7 != 0.0)
    this = (float *)_tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)0x15, a2, v7, a3);
  v8 = v4[8];
  if (v8 != 0.0)
    this = (float *)_tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)0x16, a2, v8, a3);
  v9 = v4[4];
  if (v9 != 0.0)
    return (float *)_tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)0x1E, a2, v9, a3);
  return this;
}

uint64_t CoreML::Specification::NeuralNetworkImageScaler::ByteSizeLong(CoreML::Specification::NeuralNetworkImageScaler *this)
{
  uint64_t v1;

  v1 = 6;
  if (*((float *)this + 4) == 0.0)
    v1 = 0;
  if (*((float *)this + 5) != 0.0)
    v1 += 5;
  if (*((float *)this + 6) != 0.0)
    v1 += 6;
  if (*((float *)this + 7) != 0.0)
    v1 += 6;
  if (*((float *)this + 8) != 0.0)
    v1 += 6;
  *((_DWORD *)this + 9) = v1;
  return v1;
}

std::string *CoreML::Specification::NeuralNetworkImageScaler::MergeFrom(std::string *this, const CoreML::Specification::NeuralNetworkImageScaler *a2)
{
  float *v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v3 = (float *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((float *)a2 + 4);
  if (v5 != 0.0)
    v3[4] = v5;
  v6 = *((float *)a2 + 5);
  if (v6 != 0.0)
    v3[5] = v6;
  v7 = *((float *)a2 + 6);
  if (v7 != 0.0)
    v3[6] = v7;
  v8 = *((float *)a2 + 7);
  if (v8 != 0.0)
    v3[7] = v8;
  v9 = *((float *)a2 + 8);
  if (v9 != 0.0)
    v3[8] = v9;
  return this;
}

uint64_t CoreML::Specification::NeuralNetworkImageScaler::IsInitialized(CoreML::Specification::NeuralNetworkImageScaler *this)
{
  return 1;
}

_QWORD *CoreML::Specification::NeuralNetworkImageScaler::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NeuralNetworkImageScaler");
}

CoreML::Specification::NeuralNetworkMeanImage *CoreML::Specification::NeuralNetworkMeanImage::NeuralNetworkMeanImage(CoreML::Specification::NeuralNetworkMeanImage *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D922AD0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::NeuralNetworkMeanImage *)&CoreML::Specification::_NeuralNetworkMeanImage_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_21801259C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NeuralNetworkMeanImage::~NeuralNetworkMeanImage(CoreML::Specification::NeuralNetworkMeanImage *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D922AD0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::NeuralNetworkMeanImage::~NeuralNetworkMeanImage(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::NeuralNetworkMeanImage *CoreML::Specification::NeuralNetworkMeanImage::New(CoreML::Specification::NeuralNetworkMeanImage *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::NeuralNetworkMeanImage *v3;

  v3 = (CoreML::Specification::NeuralNetworkMeanImage *)operator new();
  CoreML::Specification::NeuralNetworkMeanImage::NeuralNetworkMeanImage(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetworkMeanImage>(a2, v3);
  return v3;
}

void sub_218012684(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetworkMeanImage>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkMeanImage>);
  return result;
}

uint64_t CoreML::Specification::NeuralNetworkMeanImage::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::NeuralNetworkMeanImage::MergePartialFromCodedStream(CoreML::Specification::NeuralNetworkMeanImage *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v10;
  unsigned int VarintSizeAsIntFallback;
  BOOL v12;
  signed int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  signed int v21;
  uint64_t v22;
  _BOOL8 result;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;

  v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v6 = *a2;
          if (*a2 < a2[1])
            break;
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_8;
LABEL_14:
          if ((_DWORD)v8)
            v12 = (v8 & 7) == 4;
          else
            v12 = 1;
          if (v12)
            return 1;
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_14;
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8)
          goto LABEL_14;
        if (v8 != 13)
          break;
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(_tc_google::protobuf::internal::WireFormatLite::FieldType)2>(1, 0xAu, (unsigned int **)a2, (uint64_t)v5))return 0;
      }
      if (v8 != 10)
        goto LABEL_14;
      v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 3) != 0)
        return 0;
      v13 = *v5;
      v14 = VarintSizeAsIntFallback >> 2;
      v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      if (v15 == -1)
        v17 = v16;
      if (v17 >= (uint64_t)VarintSizeAsIntFallback)
        break;
      if (VarintSizeAsIntFallback >= 4)
      {
        if (v14 <= 1)
          v18 = 1;
        else
          v18 = VarintSizeAsIntFallback >> 2;
        do
        {
          v28 = 0;
          v19 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v28);
            if (!result)
              return result;
            v20 = v28;
          }
          else
          {
            v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<float>::Reserve(v5, v21 + 1);
            v21 = *v5;
          }
          v22 = *((_QWORD *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(_DWORD *)(v22 + 4 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      v25 = *((_QWORD *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<float>::Reserve(v5, v13 + v14);
      v25 = *((_QWORD *)this + 3);
      v26 = 4 * v24 - 4 * *((int *)this + 4);
      if (v26 >= 1)
        bzero((void *)(v25 + 8 + 4 * *((int *)this + 4)), 4 * (((unint64_t)v26 >> 2) - ((unint64_t)v26 > 3)) + 4);
    }
    *v5 = v24;
    v27 = v25 + 8;
    if (!v25)
      v27 = 0;
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 4 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    result = 0;
    *v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::NeuralNetworkMeanImage::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _tc_google::protobuf::internal::WireFormatLite *v14;

  if (*(int *)(this + 16) >= 1)
  {
    v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 10;
      v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
      if (v7 < 0x80)
      {
        v10 = *(_DWORD *)(v5 + 32);
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v9 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *v9 = v10;
      v12 = (_DWORD)v9 - v8 + 1;
      *((_QWORD *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    v13 = *(_QWORD *)(v5 + 24);
    if (v13)
      v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    else
      v14 = 0;
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloatArray(v14, (const float *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::NeuralNetworkMeanImage::ByteSizeLong(CoreML::Specification::NeuralNetworkMeanImage *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((unsigned int *)this + 4);
  v2 = 4 * v1;
  if ((_DWORD)v1)
  {
    if ((v2 & 0x80000000) != 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::NeuralNetworkMeanImage::IsInitialized(CoreML::Specification::NeuralNetworkMeanImage *this)
{
  return 1;
}

_QWORD *CoreML::Specification::NeuralNetworkMeanImage::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NeuralNetworkMeanImage");
}

CoreML::Specification::NeuralNetworkPreprocessing *CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing(CoreML::Specification::NeuralNetworkPreprocessing *this)
{
  *(_QWORD *)this = &off_24D922B68;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::NeuralNetworkPreprocessing *)&CoreML::Specification::_NeuralNetworkPreprocessing_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_218012B28(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing(CoreML::Specification::NeuralNetworkPreprocessing *this)
{
  *(_QWORD *)this = &off_24D922B68;
  CoreML::Specification::NeuralNetworkPreprocessing::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::NeuralNetworkPreprocessing::~NeuralNetworkPreprocessing(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::NeuralNetworkPreprocessing::SharedDtor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  if (*(_DWORD *)(v1 + 36))
    return CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor(v1);
  return this;
}

uint64_t CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 36);
  if (v2 == 11 || v2 == 10)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

CoreML::Specification::NeuralNetworkPreprocessing *CoreML::Specification::NeuralNetworkPreprocessing::New(CoreML::Specification::NeuralNetworkPreprocessing *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::NeuralNetworkPreprocessing *v3;

  v3 = (CoreML::Specification::NeuralNetworkPreprocessing *)operator new();
  CoreML::Specification::NeuralNetworkPreprocessing::NeuralNetworkPreprocessing(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetworkPreprocessing>(a2, v3);
  return v3;
}

void sub_218012CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetworkPreprocessing>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkPreprocessing>);
  return result;
}

uint64_t CoreML::Specification::NeuralNetworkPreprocessing::Clear(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  return CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor(this);
}

uint64_t CoreML::Specification::NeuralNetworkPreprocessing::MergePartialFromCodedStream(CoreML::Specification::NeuralNetworkPreprocessing *this, char **a2, unsigned int a3)
{
  std::string **v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  unsigned int v10;
  std::string *v12;
  uint64_t result;
  std::string *v14;
  const char *size;
  CoreML::Specification::NeuralNetworkMeanImage *v16;
  CoreML::Specification::NeuralNetworkImageScaler *v17;
  char *v19;
  int VarintSizeAsIntFallback;
  char *v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;

  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_26;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_26;
LABEL_8:
        v10 = v8 >> 3;
        if (v8 >> 3 == 11)
        {
          if (v8 != 90)
            goto LABEL_26;
          if (*((_DWORD *)this + 9) == 11)
          {
            v16 = (CoreML::Specification::NeuralNetworkMeanImage *)*((_QWORD *)this + 3);
          }
          else
          {
            CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor((uint64_t)this);
            *((_DWORD *)this + 9) = 11;
            v16 = (CoreML::Specification::NeuralNetworkMeanImage *)operator new();
            CoreML::Specification::NeuralNetworkMeanImage::NeuralNetworkMeanImage(v16);
            *((_QWORD *)this + 3) = v16;
          }
          v19 = *a2;
          if (*a2 >= a2[1] || *v19 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v19;
            *a2 = v19 + 1;
          }
          v23 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v23 & 0x8000000000000000) != 0)
            return 0;
          v25 = v23;
          result = CoreML::Specification::NeuralNetworkMeanImage::MergePartialFromCodedStream(v16, a2, v24);
          if (!(_DWORD)result)
            return result;
          goto LABEL_47;
        }
        if (v10 != 10)
          break;
        if (v8 != 82)
          goto LABEL_26;
        if (*((_DWORD *)this + 9) == 10)
        {
          v17 = (CoreML::Specification::NeuralNetworkImageScaler *)*((_QWORD *)this + 3);
        }
        else
        {
          CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor((uint64_t)this);
          *((_DWORD *)this + 9) = 10;
          v17 = (CoreML::Specification::NeuralNetworkImageScaler *)operator new();
          CoreML::Specification::NeuralNetworkImageScaler::NeuralNetworkImageScaler(v17);
          *((_QWORD *)this + 3) = v17;
        }
        v21 = *a2;
        if (*a2 >= a2[1] || *v21 < 0)
        {
          v22 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v22 < 0)
            return 0;
        }
        else
        {
          v22 = *v21;
          *a2 = v21 + 1;
        }
        v26 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22);
        if ((v26 & 0x8000000000000000) != 0)
          return 0;
        v25 = v26;
        result = CoreML::Specification::NeuralNetworkImageScaler::MergePartialFromCodedStream(v17, (_tc_google::protobuf::io::CodedInputStream *)a2, v27);
        if (!(_DWORD)result)
          return result;
LABEL_47:
        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v25))return 0;
      }
      if (v10 != 1 || v8 != 10)
        break;
      v12 = *v5;
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
        v12 = *v5;
      }
      result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, v12);
      if (!(_DWORD)result)
        return result;
      v14 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
        size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v14, size, 0, (uint64_t)"CoreML.Specification.NeuralNetworkPreprocessing.featureName"))return 0;
    }
LABEL_26:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

void sub_218012FCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40825B58B5);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NeuralNetworkPreprocessing::SerializeWithCachedSizes(CoreML::Specification::NeuralNetworkPreprocessing *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t result;
  const char *v7;
  int v8;

  result = *((_QWORD *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    v7 = *(const char **)(result + 8);
    if (!v7)
      goto LABEL_7;
    result = *(_QWORD *)result;
    goto LABEL_6;
  }
  v7 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(_BYTE *)(result + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v7, 1, (uint64_t)"CoreML.Specification.NeuralNetworkPreprocessing.featureName");
    result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v8 = *((_DWORD *)this + 9);
  if (v8 == 10)
  {
    result = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, *((_QWORD *)this + 3), a2, a4);
    v8 = *((_DWORD *)this + 9);
  }
  if (v8 == 11)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xB, *((_QWORD *)this + 3), a2, a4);
  return result;
}

uint64_t CoreML::Specification::NeuralNetworkPreprocessing::ByteSizeLong(CoreML::Specification::NeuralNetworkPreprocessing *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v5 = *((_DWORD *)this + 9);
  if (v5 == 11)
  {
    v10 = (unsigned int *)*((_QWORD *)this + 3);
    v11 = v10[4];
    v12 = 4 * v11;
    if ((_DWORD)v11)
    {
      if ((v12 & 0x80000000) != 0)
        v13 = 11;
      else
        v13 = ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v13 = 0;
    }
    v14 = v13 + v12;
    v10[8] = v12;
    v10[9] = v14;
    v8 = (9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6;
    v9 = v4 + v14;
LABEL_27:
    v4 = v9 + v8 + 1;
    goto LABEL_28;
  }
  if (v5 == 10)
  {
    v6 = *((_QWORD *)this + 3);
    v7 = 6;
    if (*(float *)(v6 + 16) == 0.0)
      v7 = 0;
    if (*(float *)(v6 + 20) != 0.0)
      v7 += 5;
    if (*(float *)(v6 + 24) != 0.0)
      v7 += 6;
    if (*(float *)(v6 + 28) != 0.0)
      v7 += 6;
    if (*(float *)(v6 + 32) != 0.0)
      v7 += 6;
    *(_DWORD *)(v6 + 36) = v7;
    v8 = (9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6;
    v9 = v4 + v7;
    goto LABEL_27;
  }
LABEL_28:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void CoreML::Specification::NeuralNetworkPreprocessing::MergeFrom(CoreML::Specification::NeuralNetworkPreprocessing *this, const CoreML::Specification::NeuralNetworkPreprocessing *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  CoreML::Specification::NeuralNetworkImageScaler *v8;
  CoreML::Specification::NeuralNetworkMeanImage *v9;
  CoreML::Specification::NeuralNetworkImageScaler *v10;
  const CoreML::Specification::NeuralNetworkImageScaler *v11;
  CoreML::Specification::NeuralNetworkMeanImage *v12;
  const CoreML::Specification::V5::TensorValue_RepeatedFloats *v13;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  v7 = *((_DWORD *)a2 + 9);
  if (v7 == 11)
  {
    if (*((_DWORD *)this + 9) == 11)
    {
      v9 = (CoreML::Specification::NeuralNetworkMeanImage *)*((_QWORD *)this + 3);
    }
    else
    {
      CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor((uint64_t)this);
      *((_DWORD *)this + 9) = 11;
      v9 = (CoreML::Specification::NeuralNetworkMeanImage *)operator new();
      v12 = CoreML::Specification::NeuralNetworkMeanImage::NeuralNetworkMeanImage(v9);
      *((_QWORD *)this + 3) = v9;
      if (*((_DWORD *)a2 + 9) != 11)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v12);
        v13 = (const CoreML::Specification::V5::TensorValue_RepeatedFloats *)&CoreML::Specification::_NeuralNetworkMeanImage_default_instance_;
        goto LABEL_25;
      }
    }
    v13 = (const CoreML::Specification::V5::TensorValue_RepeatedFloats *)*((_QWORD *)a2 + 3);
LABEL_25:
    CoreML::Specification::V5::TensorValue_RepeatedFloats::MergeFrom((uint64_t *)v9, v13);
    return;
  }
  if (v7 == 10)
  {
    if (*((_DWORD *)this + 9) == 10)
    {
      v8 = (CoreML::Specification::NeuralNetworkImageScaler *)*((_QWORD *)this + 3);
    }
    else
    {
      CoreML::Specification::NeuralNetworkPreprocessing::clear_preprocessor((uint64_t)this);
      *((_DWORD *)this + 9) = 10;
      v8 = (CoreML::Specification::NeuralNetworkImageScaler *)operator new();
      v10 = CoreML::Specification::NeuralNetworkImageScaler::NeuralNetworkImageScaler(v8);
      *((_QWORD *)this + 3) = v8;
      if (*((_DWORD *)a2 + 9) != 10)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v10);
        v11 = (const CoreML::Specification::NeuralNetworkImageScaler *)&CoreML::Specification::_NeuralNetworkImageScaler_default_instance_;
        goto LABEL_23;
      }
    }
    v11 = (const CoreML::Specification::NeuralNetworkImageScaler *)*((_QWORD *)a2 + 3);
LABEL_23:
    CoreML::Specification::NeuralNetworkImageScaler::MergeFrom((std::string *)v8, v11);
  }
}

void sub_2180133A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::NeuralNetworkPreprocessing::IsInitialized(CoreML::Specification::NeuralNetworkPreprocessing *this)
{
  return 1;
}

_QWORD *CoreML::Specification::NeuralNetworkPreprocessing::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.NeuralNetworkPreprocessing");
}

CoreML::Specification::ActivationReLU *CoreML::Specification::ActivationReLU::ActivationReLU(CoreML::Specification::ActivationReLU *this)
{
  *(_QWORD *)this = &off_24D922C00;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationReLU *)&CoreML::Specification::_ActivationReLU_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_218013444(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationReLU::~ActivationReLU(CoreML::Specification::ActivationReLU *this)
{
  *(_QWORD *)this = &off_24D922C00;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D922C00;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationReLU *CoreML::Specification::ActivationReLU::New(CoreML::Specification::ActivationReLU *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationReLU *v3;

  v3 = (CoreML::Specification::ActivationReLU *)operator new();
  CoreML::Specification::ActivationReLU::ActivationReLU(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationReLU>(a2, v3);
  return v3;
}

void sub_21801351C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationReLU>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationReLU>);
  return result;
}

uint64_t CoreML::Specification::ActivationReLU::MergePartialFromCodedStream(CoreML::Specification::ActivationReLU *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::ActivationReLU::ByteSizeLong(CoreML::Specification::ActivationReLU *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::ActivationReLU::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::ActivationReLU::IsInitialized(CoreML::Specification::ActivationReLU *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationReLU::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationReLU");
}

CoreML::Specification::ActivationLeakyReLU *CoreML::Specification::ActivationLeakyReLU::ActivationLeakyReLU(CoreML::Specification::ActivationLeakyReLU *this)
{
  *(_QWORD *)this = &off_24D922C98;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationLeakyReLU *)&CoreML::Specification::_ActivationLeakyReLU_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_21801365C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationLeakyReLU::~ActivationLeakyReLU(CoreML::Specification::ActivationLeakyReLU *this)
{
  *(_QWORD *)this = &off_24D922C98;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D922C98;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationLeakyReLU *CoreML::Specification::ActivationLeakyReLU::New(CoreML::Specification::ActivationLeakyReLU *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationLeakyReLU *v3;

  v3 = (CoreML::Specification::ActivationLeakyReLU *)operator new();
  CoreML::Specification::ActivationLeakyReLU::ActivationLeakyReLU(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationLeakyReLU>(a2, v3);
  return v3;
}

void sub_218013730(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationLeakyReLU>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationLeakyReLU>);
  return result;
}

uint64_t CoreML::Specification::ActivationLeakyReLU::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ActivationLeakyReLU::MergePartialFromCodedStream(CoreML::Specification::ActivationLeakyReLU *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v15;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 < a2[1])
        break;
      v6 = 0;
LABEL_6:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_11:
      if ((_DWORD)v7)
        v10 = (v7 & 7) == 4;
      else
        v10 = 1;
      v11 = v10;
      if (v10
        || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      {
        return v11;
      }
    }
    v6 = *v5;
    if (*v5 < 1)
      goto LABEL_6;
    *a2 = v5 + 1;
    v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) == 0)
      goto LABEL_11;
LABEL_7:
    if (v7 != 13 || (v7 & 0xFFFFFFF8) != 8)
      goto LABEL_11;
    v15 = 0;
    v12 = (unsigned int *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 4)
    {
      v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_22;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v15))
      return 0;
    v13 = v15;
LABEL_22:
    *((_DWORD *)this + 4) = v13;
  }
}

uint64_t CoreML::Specification::ActivationLeakyReLU::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  float v3;

  v3 = *(float *)(this + 16);
  if (v3 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v3, a3);
  return this;
}

uint64_t CoreML::Specification::ActivationLeakyReLU::ByteSizeLong(CoreML::Specification::ActivationLeakyReLU *this)
{
  uint64_t v1;

  v1 = 5;
  if (*((float *)this + 4) == 0.0)
    v1 = 0;
  *((_DWORD *)this + 5) = v1;
  return v1;
}

std::string *CoreML::Specification::ActivationLeakyReLU::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  float v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((float *)a2 + 4);
  if (v5 != 0.0)
    *(float *)&v3->__r_.__value_.__r.__words[2] = v5;
  return this;
}

uint64_t CoreML::Specification::ActivationLeakyReLU::IsInitialized(CoreML::Specification::ActivationLeakyReLU *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationLeakyReLU::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationLeakyReLU");
}

CoreML::Specification::ActivationTanh *CoreML::Specification::ActivationTanh::ActivationTanh(CoreML::Specification::ActivationTanh *this)
{
  *(_QWORD *)this = &off_24D922D30;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationTanh *)&CoreML::Specification::_ActivationTanh_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_218013950(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationTanh::~ActivationTanh(CoreML::Specification::ActivationTanh *this)
{
  *(_QWORD *)this = &off_24D922D30;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D922D30;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationTanh *CoreML::Specification::ActivationTanh::New(CoreML::Specification::ActivationTanh *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationTanh *v3;

  v3 = (CoreML::Specification::ActivationTanh *)operator new();
  CoreML::Specification::ActivationTanh::ActivationTanh(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationTanh>(a2, v3);
  return v3;
}

void sub_218013A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationTanh>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationTanh>);
  return result;
}

uint64_t CoreML::Specification::ActivationTanh::MergePartialFromCodedStream(CoreML::Specification::ActivationTanh *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::ActivationTanh::ByteSizeLong(CoreML::Specification::ActivationTanh *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::ActivationTanh::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::ActivationTanh::IsInitialized(CoreML::Specification::ActivationTanh *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationTanh::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationTanh");
}

CoreML::Specification::ActivationScaledTanh *CoreML::Specification::ActivationScaledTanh::ActivationScaledTanh(CoreML::Specification::ActivationScaledTanh *this)
{
  *(_QWORD *)this = &off_24D922DC8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationScaledTanh *)&CoreML::Specification::_ActivationScaledTanh_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_218013B6C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationScaledTanh::~ActivationScaledTanh(CoreML::Specification::ActivationScaledTanh *this)
{
  *(_QWORD *)this = &off_24D922DC8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D922DC8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationScaledTanh *CoreML::Specification::ActivationScaledTanh::New(CoreML::Specification::ActivationScaledTanh *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationScaledTanh *v3;

  v3 = (CoreML::Specification::ActivationScaledTanh *)operator new();
  CoreML::Specification::ActivationScaledTanh::ActivationScaledTanh(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationScaledTanh>(a2, v3);
  return v3;
}

void sub_218013C40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationScaledTanh>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationScaledTanh>);
  return result;
}

uint64_t CoreML::Specification::ActivationScaledTanh::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ActivationScaledTanh::MergePartialFromCodedStream(CoreML::Specification::ActivationScaledTanh *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 < a2[1])
          break;
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0)
          goto LABEL_7;
LABEL_20:
        if ((_DWORD)v7)
          v14 = (v7 & 7) == 4;
        else
          v14 = 1;
        v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_20;
LABEL_7:
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 != 1 || v7 != 13)
        goto LABEL_20;
      v18 = 0;
      v10 = (unsigned int *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v18))
          return 0;
        v11 = v18;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_DWORD *)this + 4) = v11;
    }
    if (v7 != 21)
      goto LABEL_20;
    v17 = 0;
    v12 = (unsigned int *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 4)
    {
      v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v17))
      return 0;
    v13 = v17;
LABEL_19:
    *((_DWORD *)this + 5) = v13;
  }
}

uint64_t CoreML::Specification::ActivationScaledTanh::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  float v5;
  float v6;

  v4 = this;
  v5 = *(float *)(this + 16);
  if (v5 != 0.0)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  v6 = *(float *)(v4 + 20);
  if (v6 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  return this;
}

uint64_t CoreML::Specification::ActivationScaledTanh::ByteSizeLong(CoreML::Specification::ActivationScaledTanh *this)
{
  uint64_t v1;

  v1 = 5;
  if (*((float *)this + 4) == 0.0)
    v1 = 0;
  if (*((float *)this + 5) != 0.0)
    v1 += 5;
  *((_DWORD *)this + 6) = v1;
  return v1;
}

std::string *CoreML::Specification::ActivationScaledTanh::MergeFrom(std::string *this, const CoreML::Specification::ActivationScaledTanh *a2)
{
  std::string *v3;
  uint64_t v4;
  float v5;
  float v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((float *)a2 + 4);
  if (v5 != 0.0)
    *(float *)&v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((float *)a2 + 5);
  if (v6 != 0.0)
    *((float *)&v3->__r_.__value_.__r.__words[2] + 1) = v6;
  return this;
}

uint64_t CoreML::Specification::ActivationScaledTanh::IsInitialized(CoreML::Specification::ActivationScaledTanh *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationScaledTanh::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationScaledTanh");
}

CoreML::Specification::ActivationSigmoid *CoreML::Specification::ActivationSigmoid::ActivationSigmoid(CoreML::Specification::ActivationSigmoid *this)
{
  *(_QWORD *)this = &off_24D922E60;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationSigmoid *)&CoreML::Specification::_ActivationSigmoid_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_218013F14(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationSigmoid::~ActivationSigmoid(CoreML::Specification::ActivationSigmoid *this)
{
  *(_QWORD *)this = &off_24D922E60;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D922E60;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationSigmoid *CoreML::Specification::ActivationSigmoid::New(CoreML::Specification::ActivationSigmoid *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationSigmoid *v3;

  v3 = (CoreML::Specification::ActivationSigmoid *)operator new();
  CoreML::Specification::ActivationSigmoid::ActivationSigmoid(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationSigmoid>(a2, v3);
  return v3;
}

void sub_218013FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationSigmoid>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationSigmoid>);
  return result;
}

uint64_t CoreML::Specification::ActivationSigmoid::MergePartialFromCodedStream(CoreML::Specification::ActivationSigmoid *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::ActivationSigmoid::ByteSizeLong(CoreML::Specification::ActivationSigmoid *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::ActivationSigmoid::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::ActivationSigmoid::IsInitialized(CoreML::Specification::ActivationSigmoid *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationSigmoid::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationSigmoid");
}

CoreML::Specification::ActivationLinear *CoreML::Specification::ActivationLinear::ActivationLinear(CoreML::Specification::ActivationLinear *this)
{
  *(_QWORD *)this = &off_24D922EF8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationLinear *)&CoreML::Specification::_ActivationLinear_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_218014130(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationLinear::~ActivationLinear(CoreML::Specification::ActivationLinear *this)
{
  *(_QWORD *)this = &off_24D922EF8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D922EF8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationLinear *CoreML::Specification::ActivationLinear::New(CoreML::Specification::ActivationLinear *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationLinear *v3;

  v3 = (CoreML::Specification::ActivationLinear *)operator new();
  CoreML::Specification::ActivationLinear::ActivationLinear(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationLinear>(a2, v3);
  return v3;
}

void sub_218014204(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationLinear>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationLinear>);
  return result;
}

uint64_t CoreML::Specification::ActivationLinear::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ActivationLinear::MergePartialFromCodedStream(CoreML::Specification::ActivationLinear *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 < a2[1])
          break;
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0)
          goto LABEL_7;
LABEL_20:
        if ((_DWORD)v7)
          v14 = (v7 & 7) == 4;
        else
          v14 = 1;
        v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_20;
LABEL_7:
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 != 1 || v7 != 13)
        goto LABEL_20;
      v18 = 0;
      v10 = (unsigned int *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v18))
          return 0;
        v11 = v18;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_DWORD *)this + 4) = v11;
    }
    if (v7 != 21)
      goto LABEL_20;
    v17 = 0;
    v12 = (unsigned int *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 4)
    {
      v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v17))
      return 0;
    v13 = v17;
LABEL_19:
    *((_DWORD *)this + 5) = v13;
  }
}

uint64_t CoreML::Specification::ActivationLinear::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  float v5;
  float v6;

  v4 = this;
  v5 = *(float *)(this + 16);
  if (v5 != 0.0)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  v6 = *(float *)(v4 + 20);
  if (v6 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  return this;
}

uint64_t CoreML::Specification::ActivationLinear::ByteSizeLong(CoreML::Specification::ActivationLinear *this)
{
  uint64_t v1;

  v1 = 5;
  if (*((float *)this + 4) == 0.0)
    v1 = 0;
  if (*((float *)this + 5) != 0.0)
    v1 += 5;
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::ActivationLinear::IsInitialized(CoreML::Specification::ActivationLinear *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationLinear::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationLinear");
}

CoreML::Specification::ActivationSigmoidHard *CoreML::Specification::ActivationSigmoidHard::ActivationSigmoidHard(CoreML::Specification::ActivationSigmoidHard *this)
{
  *(_QWORD *)this = &off_24D922F90;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationSigmoidHard *)&CoreML::Specification::_ActivationSigmoidHard_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_218014488(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationSigmoidHard::~ActivationSigmoidHard(CoreML::Specification::ActivationSigmoidHard *this)
{
  *(_QWORD *)this = &off_24D922F90;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D922F90;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationSigmoidHard *CoreML::Specification::ActivationSigmoidHard::New(CoreML::Specification::ActivationSigmoidHard *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationSigmoidHard *v3;

  v3 = (CoreML::Specification::ActivationSigmoidHard *)operator new();
  CoreML::Specification::ActivationSigmoidHard::ActivationSigmoidHard(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationSigmoidHard>(a2, v3);
  return v3;
}

void sub_21801455C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationSigmoidHard>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationSigmoidHard>);
  return result;
}

uint64_t CoreML::Specification::ActivationSigmoidHard::Clear(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ActivationSigmoidHard::MergePartialFromCodedStream(CoreML::Specification::ActivationSigmoidHard *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;

  while (1)
  {
    while (1)
    {
      while (1)
      {
        v5 = *a2;
        if (*a2 < a2[1])
          break;
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0)
          goto LABEL_7;
LABEL_20:
        if ((_DWORD)v7)
          v14 = (v7 & 7) == 4;
        else
          v14 = 1;
        v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_20;
LABEL_7:
      if (v7 >> 3 == 2)
        break;
      if (v7 >> 3 != 1 || v7 != 13)
        goto LABEL_20;
      v18 = 0;
      v10 = (unsigned int *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v18))
          return 0;
        v11 = v18;
      }
      else
      {
        v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((_DWORD *)this + 4) = v11;
    }
    if (v7 != 21)
      goto LABEL_20;
    v17 = 0;
    v12 = (unsigned int *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 4)
    {
      v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v17))
      return 0;
    v13 = v17;
LABEL_19:
    *((_DWORD *)this + 5) = v13;
  }
}

uint64_t CoreML::Specification::ActivationSigmoidHard::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  float v5;
  float v6;

  v4 = this;
  v5 = *(float *)(this + 16);
  if (v5 != 0.0)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  v6 = *(float *)(v4 + 20);
  if (v6 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  return this;
}

uint64_t CoreML::Specification::ActivationSigmoidHard::ByteSizeLong(CoreML::Specification::ActivationSigmoidHard *this)
{
  uint64_t v1;

  v1 = 5;
  if (*((float *)this + 4) == 0.0)
    v1 = 0;
  if (*((float *)this + 5) != 0.0)
    v1 += 5;
  *((_DWORD *)this + 6) = v1;
  return v1;
}

uint64_t CoreML::Specification::ActivationSigmoidHard::IsInitialized(CoreML::Specification::ActivationSigmoidHard *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationSigmoidHard::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationSigmoidHard");
}

CoreML::Specification::ActivationPReLU *CoreML::Specification::ActivationPReLU::ActivationPReLU(CoreML::Specification::ActivationPReLU *this)
{
  *(_QWORD *)this = &off_24D923028;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationPReLU *)&CoreML::Specification::_ActivationPReLU_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_2180147E0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationPReLU::~ActivationPReLU(CoreML::Specification::ActivationPReLU *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24D923028;
  if (this != (CoreML::Specification::ActivationPReLU *)&CoreML::Specification::_ActivationPReLU_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ActivationPReLU::~ActivationPReLU(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationPReLU *CoreML::Specification::ActivationPReLU::New(CoreML::Specification::ActivationPReLU *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationPReLU *v3;

  v3 = (CoreML::Specification::ActivationPReLU *)operator new();
  CoreML::Specification::ActivationPReLU::ActivationPReLU(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationPReLU>(a2, v3);
  return v3;
}

void sub_2180148C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationPReLU>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationPReLU>);
  return result;
}

uint64_t CoreML::Specification::ActivationPReLU::Clear(CoreML::Specification::ActivationPReLU *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

BOOL CoreML::Specification::ActivationPReLU::MergePartialFromCodedStream(CoreML::Specification::ActivationPReLU *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::WeightParams *v11;
  char *v12;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  _BOOL8 result;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          break;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        break;
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8)
        break;
      v11 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
      if (!v11)
      {
        v11 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v11);
        *((_QWORD *)this + 2) = v11;
      }
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::WeightParams::MergePartialFromCodedStream(v11, (_tc_google::protobuf::io::CodedInputStream *)a2, v15);
        if (!result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_218014A7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::ActivationPReLU::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;

  if (this != &CoreML::Specification::_ActivationPReLU_default_instance_)
  {
    v5 = this[2];
    if (v5)
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

CoreML::Specification::WeightParams *CoreML::Specification::ActivationPReLU::ByteSizeLong(CoreML::Specification::ActivationPReLU *this)
{
  CoreML::Specification::WeightParams *result;
  uint64_t v3;

  if (this == (CoreML::Specification::ActivationPReLU *)&CoreML::Specification::_ActivationPReLU_default_instance_)
  {
    result = 0;
  }
  else
  {
    result = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
    if (result)
    {
      v3 = CoreML::Specification::WeightParams::ByteSizeLong(result);
      result = (CoreML::Specification::WeightParams *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = (_DWORD)result;
  return result;
}

void CoreML::Specification::ActivationPReLU::MergeFrom(CoreML::Specification::ActivationPReLU *this, const CoreML::Specification::ActivationPReLU *a2)
{
  uint64_t v4;
  const CoreML::Specification::WeightParams *v5;
  CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::ActivationPReLU *)&CoreML::Specification::_ActivationPReLU_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
    if (!v7)
    {
      v7 = (CoreML::Specification::WeightParams *)operator new();
      CoreML::Specification::WeightParams::WeightParams(v7);
      *((_QWORD *)this + 2) = v7;
      v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
    CoreML::Specification::WeightParams::MergeFrom(v7, v8);
  }
}

void sub_218014BD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::WeightParams::MergeFrom(CoreML::Specification::WeightParams *this, const CoreML::Specification::WeightParams *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  const CoreML::Specification::QuantizationParams *v12;
  CoreML::Specification::QuantizationParams *v13;
  const CoreML::Specification::QuantizationParams *v14;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve((unsigned int *)this + 4, *((_DWORD *)this + 4) + v5);
    memcpy((void *)(*((_QWORD *)this + 3) + 4 * *((int *)this + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 4 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 6);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v8);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v8);
  }
LABEL_21:
  v10 = *((_QWORD *)a2 + 7);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_29;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_29;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 7);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, v10);
    else
      std::string::operator=(*((std::string **)this + 7), (const std::string *)v10);
  }
LABEL_29:
  if (a2 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
  {
    v12 = (const CoreML::Specification::QuantizationParams *)*((_QWORD *)a2 + 8);
    if (v12)
    {
      v13 = (CoreML::Specification::QuantizationParams *)*((_QWORD *)this + 8);
      if (!v13)
      {
        v13 = (CoreML::Specification::QuantizationParams *)operator new();
        CoreML::Specification::QuantizationParams::QuantizationParams(v13);
        *((_QWORD *)this + 8) = v13;
        v12 = (const CoreML::Specification::QuantizationParams *)*((_QWORD *)a2 + 8);
      }
      if (v12)
        v14 = v12;
      else
        v14 = (const CoreML::Specification::QuantizationParams *)&CoreML::Specification::_QuantizationParams_default_instance_;
      CoreML::Specification::QuantizationParams::MergeFrom((std::string *)v13, v14);
    }
  }
  if (*((_BYTE *)a2 + 72))
    *((_BYTE *)this + 72) = 1;
}

void sub_218014DE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ActivationPReLU::IsInitialized(CoreML::Specification::ActivationPReLU *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationPReLU::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationPReLU");
}

CoreML::Specification::ActivationELU *CoreML::Specification::ActivationELU::ActivationELU(CoreML::Specification::ActivationELU *this)
{
  *(_QWORD *)this = &off_24D9230C0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationELU *)&CoreML::Specification::_ActivationELU_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_218014E70(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationELU::~ActivationELU(CoreML::Specification::ActivationELU *this)
{
  *(_QWORD *)this = &off_24D9230C0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D9230C0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationELU *CoreML::Specification::ActivationELU::New(CoreML::Specification::ActivationELU *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationELU *v3;

  v3 = (CoreML::Specification::ActivationELU *)operator new();
  CoreML::Specification::ActivationELU::ActivationELU(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationELU>(a2, v3);
  return v3;
}

void sub_218014F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationELU>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationELU>);
  return result;
}

uint64_t CoreML::Specification::ActivationELU::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ActivationELU::MergePartialFromCodedStream(CoreML::Specification::ActivationELU *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v15;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 < a2[1])
        break;
      v6 = 0;
LABEL_6:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_11:
      if ((_DWORD)v7)
        v10 = (v7 & 7) == 4;
      else
        v10 = 1;
      v11 = v10;
      if (v10
        || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      {
        return v11;
      }
    }
    v6 = *v5;
    if (*v5 < 1)
      goto LABEL_6;
    *a2 = v5 + 1;
    v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) == 0)
      goto LABEL_11;
LABEL_7:
    if (v7 != 13 || (v7 & 0xFFFFFFF8) != 8)
      goto LABEL_11;
    v15 = 0;
    v12 = (unsigned int *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 4)
    {
      v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_22;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v15))
      return 0;
    v13 = v15;
LABEL_22:
    *((_DWORD *)this + 4) = v13;
  }
}

uint64_t CoreML::Specification::ActivationELU::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  float v3;

  v3 = *(float *)(this + 16);
  if (v3 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v3, a3);
  return this;
}

uint64_t CoreML::Specification::ActivationELU::ByteSizeLong(CoreML::Specification::ActivationELU *this)
{
  uint64_t v1;

  v1 = 5;
  if (*((float *)this + 4) == 0.0)
    v1 = 0;
  *((_DWORD *)this + 5) = v1;
  return v1;
}

std::string *CoreML::Specification::ActivationELU::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  float v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((float *)a2 + 4);
  if (v5 != 0.0)
    *(float *)&v3->__r_.__value_.__r.__words[2] = v5;
  return this;
}

uint64_t CoreML::Specification::ActivationELU::IsInitialized(CoreML::Specification::ActivationELU *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationELU::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationELU");
}

CoreML::Specification::ActivationThresholdedReLU *CoreML::Specification::ActivationThresholdedReLU::ActivationThresholdedReLU(CoreML::Specification::ActivationThresholdedReLU *this)
{
  *(_QWORD *)this = &off_24D923158;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationThresholdedReLU *)&CoreML::Specification::_ActivationThresholdedReLU_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  return this;
}

void sub_218015164(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationThresholdedReLU::~ActivationThresholdedReLU(CoreML::Specification::ActivationThresholdedReLU *this)
{
  *(_QWORD *)this = &off_24D923158;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D923158;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationThresholdedReLU *CoreML::Specification::ActivationThresholdedReLU::New(CoreML::Specification::ActivationThresholdedReLU *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationThresholdedReLU *v3;

  v3 = (CoreML::Specification::ActivationThresholdedReLU *)operator new();
  CoreML::Specification::ActivationThresholdedReLU::ActivationThresholdedReLU(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationThresholdedReLU>(a2, v3);
  return v3;
}

void sub_218015238(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationThresholdedReLU>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationThresholdedReLU>);
  return result;
}

uint64_t CoreML::Specification::ActivationThresholdedReLU::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ActivationThresholdedReLU::MergePartialFromCodedStream(CoreML::Specification::ActivationThresholdedReLU *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  BOOL v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v15;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 < a2[1])
        break;
      v6 = 0;
LABEL_6:
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
      v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v7 & 0x100000000) != 0)
        goto LABEL_7;
LABEL_11:
      if ((_DWORD)v7)
        v10 = (v7 & 7) == 4;
      else
        v10 = 1;
      v11 = v10;
      if (v10
        || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
      {
        return v11;
      }
    }
    v6 = *v5;
    if (*v5 < 1)
      goto LABEL_6;
    *a2 = v5 + 1;
    v7 = v6 | 0x100000000;
    if ((v7 & 0x100000000) == 0)
      goto LABEL_11;
LABEL_7:
    if (v7 != 13 || (v7 & 0xFFFFFFF8) != 8)
      goto LABEL_11;
    v15 = 0;
    v12 = (unsigned int *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 4)
    {
      v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_22;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v15))
      return 0;
    v13 = v15;
LABEL_22:
    *((_DWORD *)this + 4) = v13;
  }
}

uint64_t CoreML::Specification::ActivationThresholdedReLU::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  float v3;

  v3 = *(float *)(this + 16);
  if (v3 != 0.0)
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v3, a3);
  return this;
}

uint64_t CoreML::Specification::ActivationThresholdedReLU::ByteSizeLong(CoreML::Specification::ActivationThresholdedReLU *this)
{
  uint64_t v1;

  v1 = 5;
  if (*((float *)this + 4) == 0.0)
    v1 = 0;
  *((_DWORD *)this + 5) = v1;
  return v1;
}

std::string *CoreML::Specification::ActivationThresholdedReLU::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  std::string *v3;
  uint64_t v4;
  float v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((float *)a2 + 4);
  if (v5 != 0.0)
    *(float *)&v3->__r_.__value_.__r.__words[2] = v5;
  return this;
}

uint64_t CoreML::Specification::ActivationThresholdedReLU::IsInitialized(CoreML::Specification::ActivationThresholdedReLU *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationThresholdedReLU::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationThresholdedReLU");
}

CoreML::Specification::ActivationSoftsign *CoreML::Specification::ActivationSoftsign::ActivationSoftsign(CoreML::Specification::ActivationSoftsign *this)
{
  *(_QWORD *)this = &off_24D9231F0;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationSoftsign *)&CoreML::Specification::_ActivationSoftsign_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_218015458(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationSoftsign::~ActivationSoftsign(CoreML::Specification::ActivationSoftsign *this)
{
  *(_QWORD *)this = &off_24D9231F0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D9231F0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationSoftsign *CoreML::Specification::ActivationSoftsign::New(CoreML::Specification::ActivationSoftsign *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationSoftsign *v3;

  v3 = (CoreML::Specification::ActivationSoftsign *)operator new();
  CoreML::Specification::ActivationSoftsign::ActivationSoftsign(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationSoftsign>(a2, v3);
  return v3;
}

void sub_21801552C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationSoftsign>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationSoftsign>);
  return result;
}

uint64_t CoreML::Specification::ActivationSoftsign::MergePartialFromCodedStream(CoreML::Specification::ActivationSoftsign *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::ActivationSoftsign::ByteSizeLong(CoreML::Specification::ActivationSoftsign *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::ActivationSoftsign::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::ActivationSoftsign::IsInitialized(CoreML::Specification::ActivationSoftsign *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationSoftsign::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationSoftsign");
}

CoreML::Specification::ActivationSoftplus *CoreML::Specification::ActivationSoftplus::ActivationSoftplus(CoreML::Specification::ActivationSoftplus *this)
{
  *(_QWORD *)this = &off_24D923288;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationSoftplus *)&CoreML::Specification::_ActivationSoftplus_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_21801566C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationSoftplus::~ActivationSoftplus(CoreML::Specification::ActivationSoftplus *this)
{
  *(_QWORD *)this = &off_24D923288;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24D923288;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationSoftplus *CoreML::Specification::ActivationSoftplus::New(CoreML::Specification::ActivationSoftplus *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationSoftplus *v3;

  v3 = (CoreML::Specification::ActivationSoftplus *)operator new();
  CoreML::Specification::ActivationSoftplus::ActivationSoftplus(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationSoftplus>(a2, v3);
  return v3;
}

void sub_218015740(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationSoftplus>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationSoftplus>);
  return result;
}

uint64_t CoreML::Specification::ActivationSoftplus::MergePartialFromCodedStream(CoreML::Specification::ActivationSoftplus *this, char **a2, unsigned int a3)
{
  char *v4;
  unint64_t TagFallback;
  BOOL v6;
  uint64_t v7;

  do
  {
    v4 = *a2;
    if (*a2 >= a2[1])
    {
      TagFallback = 0;
    }
    else
    {
      TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if ((_DWORD)TagFallback)
      v6 = (TagFallback & 7) == 4;
    else
      v6 = 1;
    v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::ActivationSoftplus::ByteSizeLong(CoreML::Specification::ActivationSoftplus *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::ActivationSoftplus::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 1) != 0)
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

uint64_t CoreML::Specification::ActivationSoftplus::IsInitialized(CoreML::Specification::ActivationSoftplus *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationSoftplus::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationSoftplus");
}

CoreML::Specification::ActivationParametricSoftplus *CoreML::Specification::ActivationParametricSoftplus::ActivationParametricSoftplus(CoreML::Specification::ActivationParametricSoftplus *this)
{
  *(_QWORD *)this = &off_24D923320;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationParametricSoftplus *)&CoreML::Specification::_ActivationParametricSoftplus_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_218015884(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationParametricSoftplus::~ActivationParametricSoftplus(CoreML::Specification::ActivationParametricSoftplus *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24D923320;
  if (this != (CoreML::Specification::ActivationParametricSoftplus *)&CoreML::Specification::_ActivationParametricSoftplus_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ActivationParametricSoftplus::~ActivationParametricSoftplus(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::ActivationParametricSoftplus *CoreML::Specification::ActivationParametricSoftplus::New(CoreML::Specification::ActivationParametricSoftplus *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationParametricSoftplus *v3;

  v3 = (CoreML::Specification::ActivationParametricSoftplus *)operator new();
  CoreML::Specification::ActivationParametricSoftplus::ActivationParametricSoftplus(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationParametricSoftplus>(a2, v3);
  return v3;
}

void sub_21801597C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationParametricSoftplus>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationParametricSoftplus>);
  return result;
}

uint64_t CoreML::Specification::ActivationParametricSoftplus::Clear(CoreML::Specification::ActivationParametricSoftplus *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

BOOL CoreML::Specification::ActivationParametricSoftplus::MergePartialFromCodedStream(CoreML::Specification::ActivationParametricSoftplus *this, char **a2, unsigned int a3)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int TagFallback;
  CoreML::Specification::WeightParams *v10;
  char *v11;
  int VarintSizeAsIntFallback;
  unint64_t v14;
  unsigned int v15;
  int v16;
  _BOOL8 result;

  while (1)
  {
    while (1)
    {
      v5 = *a2;
      if (*a2 >= a2[1])
      {
        v6 = 0;
LABEL_6:
        TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0)
          goto LABEL_21;
        goto LABEL_7;
      }
      v6 = *v5;
      if (*v5 < 1)
        goto LABEL_6;
      *a2 = v5 + 1;
      v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0)
        goto LABEL_21;
LABEL_7:
      if (v7 >> 3 != 2)
        break;
      if (v7 != 18)
        goto LABEL_21;
      v10 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v10);
        *((_QWORD *)this + 3) = v10;
      }
LABEL_18:
      v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0)
          return 0;
      }
      else
      {
        VarintSizeAsIntFallback = *v11;
        *a2 = v11 + 1;
      }
      v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        v16 = v14;
        result = CoreML::Specification::WeightParams::MergePartialFromCodedStream(v10, (_tc_google::protobuf::io::CodedInputStream *)a2, v15);
        if (!result)
          return result;
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      v10 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
      if (!v10)
      {
        v10 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v10);
        *((_QWORD *)this + 2) = v10;
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0;
  }
}

void sub_218015B90(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::ActivationParametricSoftplus::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (this != &CoreML::Specification::_ActivationParametricSoftplus_default_instance_)
  {
    v5 = this;
    v6 = this[2];
    if (v6)
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    v7 = v5[3];
    if (v7)
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ActivationParametricSoftplus::ByteSizeLong(CoreML::Specification::ActivationParametricSoftplus *this)
{
  CoreML::Specification::WeightParams *v2;
  uint64_t v3;
  uint64_t v4;
  CoreML::Specification::WeightParams *v5;
  uint64_t v6;

  if (this == (CoreML::Specification::ActivationParametricSoftplus *)&CoreML::Specification::_ActivationParametricSoftplus_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = CoreML::Specification::WeightParams::ByteSizeLong(v2);
      v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      v4 = 0;
    }
    v5 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = CoreML::Specification::WeightParams::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

void CoreML::Specification::ActivationParametricSoftplus::MergeFrom(CoreML::Specification::ActivationParametricSoftplus *this, const CoreML::Specification::ActivationParametricSoftplus *a2)
{
  uint64_t v4;
  const CoreML::Specification::WeightParams *v5;
  CoreML::Specification::WeightParams *v6;
  const CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;
  CoreML::Specification::WeightParams *v9;
  const CoreML::Specification::WeightParams *v10;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::ActivationParametricSoftplus *)&CoreML::Specification::_ActivationParametricSoftplus_default_instance_)
  {
    v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v9, v10);
    }
  }
}

void sub_218015DAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ActivationParametricSoftplus::IsInitialized(CoreML::Specification::ActivationParametricSoftplus *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationParametricSoftplus::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationParametricSoftplus");
}

CoreML::Specification::ActivationParams *CoreML::Specification::ActivationParams::ActivationParams(CoreML::Specification::ActivationParams *this)
{
  *(_QWORD *)this = &off_24D9233B8;
  *((_QWORD *)this + 1) = 0;
  if (this != (CoreML::Specification::ActivationParams *)&CoreML::Specification::_ActivationParams_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_218015E38(_Unwind_Exception *a1)
{
  uint64_t *v1;

  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ActivationParams::~ActivationParams(CoreML::Specification::ActivationParams *this)
{
  *(_QWORD *)this = &off_24D9233B8;
  if (*((_DWORD *)this + 7))
    CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::ActivationParams::~ActivationParams(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::ActivationParams::clear_NonlinearityType(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 <= 30)
  {
    if (v2 > 19)
    {
      if (v2 != 20 && v2 != 25 && v2 != 30)
        goto LABEL_24;
    }
    else if (v2 != 5 && v2 != 10 && v2 != 15)
    {
      goto LABEL_24;
    }
  }
  else if (v2 <= 49)
  {
    if (v2 != 31 && v2 != 40 && v2 != 41)
      goto LABEL_24;
  }
  else if (v2 > 69)
  {
    if (v2 != 70 && v2 != 71)
      goto LABEL_24;
  }
  else if (v2 != 50 && v2 != 60)
  {
    goto LABEL_24;
  }
  this = *(_QWORD *)(this + 16);
  if (this)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
LABEL_24:
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

uint64_t *CoreML::Specification::ActivationParams::default_instance(CoreML::Specification::ActivationParams *this)
{
  CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  return &CoreML::Specification::_ActivationParams_default_instance_;
}

CoreML::Specification::ActivationParams *CoreML::Specification::ActivationParams::New(CoreML::Specification::ActivationParams *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::ActivationParams *v3;

  v3 = (CoreML::Specification::ActivationParams *)operator new();
  CoreML::Specification::ActivationParams::ActivationParams(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationParams>(a2, v3);
  return v3;
}

void sub_218015FFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ActivationParams>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ActivationParams>);
  return result;
}

uint64_t CoreML::Specification::ActivationParams::MergePartialFromCodedStream(CoreML::Specification::ActivationParams *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int TagFallback;
  unsigned int v13;
  CoreML::Specification::ActivationSoftsign *v14;
  char *v15;
  int v16;
  CoreML::Specification::ActivationLeakyReLU *v17;
  CoreML::Specification::ActivationSigmoidHard *v18;
  CoreML::Specification::ActivationTanh *v19;
  char *v20;
  int v21;
  CoreML::Specification::ActivationParametricSoftplus *v22;
  CoreML::Specification::ActivationELU *v23;
  CoreML::Specification::ActivationLinear *v24;
  CoreML::Specification::ActivationReLU *v25;
  char *v26;
  int v27;
  CoreML::Specification::ActivationScaledTanh *v28;
  CoreML::Specification::ActivationSigmoid *v29;
  char *v30;
  int VarintSizeAsIntFallback;
  CoreML::Specification::ActivationThresholdedReLU *v32;
  CoreML::Specification::ActivationPReLU *v33;
  CoreML::Specification::ActivationSoftplus *v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  char *v39;
  int v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  char *v45;
  int v46;
  char *v47;
  int v48;
  char *v49;
  int v50;
  char *v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t result;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unsigned int v64;
  _tc_google::protobuf::io::CodedInputStream *v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int v77;
  unint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unsigned int v81;
  unint64_t v82;
  unsigned int v83;

  while (1)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      if (*(_QWORD *)a2 >= v6)
      {
        v8 = 0;
      }
      else
      {
        v7 = v5 + 1;
        v8 = *v5;
        if ((char)*v5 >= 1)
        {
          *(_QWORD *)a2 = v7;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_8;
          goto LABEL_16;
        }
        if ((unint64_t)v7 < v6)
        {
          v10 = *v7;
          if ((v8 & ~v10) >= 0x80)
          {
            *(_QWORD *)a2 = v5 + 2;
            v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
            goto LABEL_16;
          }
        }
      }
      TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_8;
LABEL_16:
      v13 = v9 >> 3;
      if (v9 >> 3 <= 0x1E)
        break;
      if (v9 >> 3 <= 0x31)
      {
        if (v13 != 31)
        {
          if (v13 == 40)
          {
            if (v9 == 66)
            {
              if (*((_DWORD *)this + 7) != 40)
              {
                CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
                *((_DWORD *)this + 7) = 40;
                v29 = (CoreML::Specification::ActivationSigmoid *)operator new();
                CoreML::Specification::ActivationSigmoid::ActivationSigmoid(v29);
                *((_QWORD *)this + 2) = v29;
              }
              v30 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v30 < 0)
              {
                VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (VarintSizeAsIntFallback < 0)
                  return 0;
              }
              else
              {
                VarintSizeAsIntFallback = *v30;
                *(_QWORD *)a2 = v30 + 1;
              }
              v61 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
              if ((v61 & 0x8000000000000000) != 0)
                return 0;
              v55 = v61;
              result = CoreML::Specification::ActivationSigmoid::MergePartialFromCodedStream((CoreML::Specification::ActivationSigmoid *)v61, (char **)a2, v62);
              if (!(_DWORD)result)
                return result;
              goto LABEL_138;
            }
            goto LABEL_8;
          }
          if (v13 != 41 || v9 != 74)
            goto LABEL_8;
          if (*((_DWORD *)this + 7) == 41)
          {
            v18 = (CoreML::Specification::ActivationSigmoidHard *)*((_QWORD *)this + 2);
          }
          else
          {
            CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
            *((_DWORD *)this + 7) = 41;
            v18 = (CoreML::Specification::ActivationSigmoidHard *)operator new();
            CoreML::Specification::ActivationSigmoidHard::ActivationSigmoidHard(v18);
            *((_QWORD *)this + 2) = v18;
          }
          v39 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v39 < 0)
          {
            v40 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v40 < 0)
              return 0;
          }
          else
          {
            v40 = *v39;
            *(_QWORD *)a2 = v39 + 1;
          }
          v70 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v40);
          if ((v70 & 0x8000000000000000) != 0)
            return 0;
          v69 = v70;
          result = CoreML::Specification::ActivationSigmoidHard::MergePartialFromCodedStream(v18, (char **)a2, v71);
          if (!(_DWORD)result)
            return result;
          goto LABEL_170;
        }
        if (v9 == 250)
        {
          if (*((_DWORD *)this + 7) == 31)
          {
            v28 = (CoreML::Specification::ActivationScaledTanh *)*((_QWORD *)this + 2);
          }
          else
          {
            CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
            *((_DWORD *)this + 7) = 31;
            v28 = (CoreML::Specification::ActivationScaledTanh *)operator new();
            CoreML::Specification::ActivationScaledTanh::ActivationScaledTanh(v28);
            *((_QWORD *)this + 2) = v28;
          }
          v47 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v47 < 0)
          {
            v48 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v48 < 0)
              return 0;
          }
          else
          {
            v48 = *v47;
            *(_QWORD *)a2 = v47 + 1;
          }
          v78 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v48);
          if ((v78 & 0x8000000000000000) != 0)
            return 0;
          v69 = v78;
          result = CoreML::Specification::ActivationScaledTanh::MergePartialFromCodedStream(v28, (char **)a2, v79);
          if (!(_DWORD)result)
            return result;
          goto LABEL_170;
        }
        goto LABEL_8;
      }
      if (v9 >> 3 > 0x45)
      {
        if (v13 == 70)
        {
          if (v9 == 50)
          {
            if (*((_DWORD *)this + 7) != 70)
            {
              CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
              *((_DWORD *)this + 7) = 70;
              v34 = (CoreML::Specification::ActivationSoftplus *)operator new();
              CoreML::Specification::ActivationSoftplus::ActivationSoftplus(v34);
              *((_QWORD *)this + 2) = v34;
            }
            v35 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v35 < 0)
            {
              v36 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v36 < 0)
                return 0;
            }
            else
            {
              v36 = *v35;
              *(_QWORD *)a2 = v35 + 1;
            }
            v63 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v36);
            if ((v63 & 0x8000000000000000) != 0)
              return 0;
            v55 = v63;
            result = CoreML::Specification::ActivationSoftplus::MergePartialFromCodedStream((CoreML::Specification::ActivationSoftplus *)v63, (char **)a2, v64);
            if (!(_DWORD)result)
              return result;
            goto LABEL_138;
          }
          goto LABEL_8;
        }
        if (v13 != 71 || v9 != 58)
          goto LABEL_8;
        if (*((_DWORD *)this + 7) == 71)
        {
          v22 = (CoreML::Specification::ActivationParametricSoftplus *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
          *((_DWORD *)this + 7) = 71;
          v22 = (CoreML::Specification::ActivationParametricSoftplus *)operator new();
          CoreML::Specification::ActivationParametricSoftplus::ActivationParametricSoftplus(v22);
          *((_QWORD *)this + 2) = v22;
        }
        v41 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v41 < 0)
        {
          v42 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v42 < 0)
            return 0;
        }
        else
        {
          v42 = *v41;
          *(_QWORD *)a2 = v41 + 1;
        }
        v72 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v42);
        if ((v72 & 0x8000000000000000) != 0)
          return 0;
        v69 = v72;
        result = CoreML::Specification::ActivationParametricSoftplus::MergePartialFromCodedStream(v22, (char **)a2, v73);
        if (!(_DWORD)result)
          return result;
        goto LABEL_170;
      }
      if (v13 == 50)
      {
        if (v9 == 146)
        {
          if (*((_DWORD *)this + 7) == 50)
          {
            v23 = (CoreML::Specification::ActivationELU *)*((_QWORD *)this + 2);
          }
          else
          {
            CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
            *((_DWORD *)this + 7) = 50;
            v23 = (CoreML::Specification::ActivationELU *)operator new();
            CoreML::Specification::ActivationELU::ActivationELU(v23);
            *((_QWORD *)this + 2) = v23;
          }
          v43 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v43 < 0)
          {
            v44 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v44 < 0)
              return 0;
          }
          else
          {
            v44 = *v43;
            *(_QWORD *)a2 = v43 + 1;
          }
          v74 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v44);
          if ((v74 & 0x8000000000000000) != 0)
            return 0;
          v69 = v74;
          result = CoreML::Specification::ActivationELU::MergePartialFromCodedStream(v23, (char **)a2, v75);
          if (!(_DWORD)result)
            return result;
          goto LABEL_170;
        }
        goto LABEL_8;
      }
      if (v13 != 60 || v9 != 226)
        goto LABEL_8;
      if (*((_DWORD *)this + 7) != 60)
      {
        CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
        *((_DWORD *)this + 7) = 60;
        v14 = (CoreML::Specification::ActivationSoftsign *)operator new();
        CoreML::Specification::ActivationSoftsign::ActivationSoftsign(v14);
        *((_QWORD *)this + 2) = v14;
      }
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v15 < 0)
      {
        v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v16 < 0)
          return 0;
      }
      else
      {
        v16 = *v15;
        *(_QWORD *)a2 = v15 + 1;
      }
      v53 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v16);
      if ((v53 & 0x8000000000000000) != 0)
        return 0;
      v55 = v53;
      result = CoreML::Specification::ActivationSoftsign::MergePartialFromCodedStream((CoreML::Specification::ActivationSoftsign *)v53, (char **)a2, v54);
      if (!(_DWORD)result)
        return result;
LABEL_138:
      v65 = a2;
      v66 = v55;
LABEL_171:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v65, v66))
        return 0;
    }
    if (v9 >> 3 > 0x13)
    {
      if (v13 == 20)
      {
        if (v9 == 162)
        {
          if (*((_DWORD *)this + 7) == 20)
          {
            v32 = (CoreML::Specification::ActivationThresholdedReLU *)*((_QWORD *)this + 2);
          }
          else
          {
            CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
            *((_DWORD *)this + 7) = 20;
            v32 = (CoreML::Specification::ActivationThresholdedReLU *)operator new();
            CoreML::Specification::ActivationThresholdedReLU::ActivationThresholdedReLU(v32);
            *((_QWORD *)this + 2) = v32;
          }
          v49 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v49 < 0)
          {
            v50 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v50 < 0)
              return 0;
          }
          else
          {
            v50 = *v49;
            *(_QWORD *)a2 = v49 + 1;
          }
          v80 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v50);
          if ((v80 & 0x8000000000000000) != 0)
            return 0;
          v69 = v80;
          result = CoreML::Specification::ActivationThresholdedReLU::MergePartialFromCodedStream(v32, (char **)a2, v81);
          if (!(_DWORD)result)
            return result;
          goto LABEL_170;
        }
      }
      else if (v13 == 25)
      {
        if (v9 == 202)
        {
          if (*((_DWORD *)this + 7) == 25)
          {
            v33 = (CoreML::Specification::ActivationPReLU *)*((_QWORD *)this + 2);
          }
          else
          {
            CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
            *((_DWORD *)this + 7) = 25;
            v33 = (CoreML::Specification::ActivationPReLU *)operator new();
            CoreML::Specification::ActivationPReLU::ActivationPReLU(v33);
            *((_QWORD *)this + 2) = v33;
          }
          v51 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v51 < 0)
          {
            v52 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v52 < 0)
              return 0;
          }
          else
          {
            v52 = *v51;
            *(_QWORD *)a2 = v51 + 1;
          }
          v82 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v52);
          if ((v82 & 0x8000000000000000) != 0)
            return 0;
          v69 = v82;
          result = CoreML::Specification::ActivationPReLU::MergePartialFromCodedStream(v33, (char **)a2, v83);
          if (!(_DWORD)result)
            return result;
          goto LABEL_170;
        }
      }
      else if (v13 == 30 && v9 == 242)
      {
        if (*((_DWORD *)this + 7) != 30)
        {
          CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
          *((_DWORD *)this + 7) = 30;
          v19 = (CoreML::Specification::ActivationTanh *)operator new();
          CoreML::Specification::ActivationTanh::ActivationTanh(v19);
          *((_QWORD *)this + 2) = v19;
        }
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v20 < 0)
        {
          v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v21 < 0)
            return 0;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v57 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v21);
        if ((v57 & 0x8000000000000000) != 0)
          return 0;
        v55 = v57;
        result = CoreML::Specification::ActivationTanh::MergePartialFromCodedStream((CoreML::Specification::ActivationTanh *)v57, (char **)a2, v58);
        if (!(_DWORD)result)
          return result;
        goto LABEL_138;
      }
      goto LABEL_8;
    }
    if (v13 != 5)
    {
      if (v13 == 10)
      {
        if (v9 == 82)
        {
          if (*((_DWORD *)this + 7) != 10)
          {
            CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
            *((_DWORD *)this + 7) = 10;
            v25 = (CoreML::Specification::ActivationReLU *)operator new();
            CoreML::Specification::ActivationReLU::ActivationReLU(v25);
            *((_QWORD *)this + 2) = v25;
          }
          v26 = *(char **)a2;
          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v26 < 0)
          {
            v27 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v27 < 0)
              return 0;
          }
          else
          {
            v27 = *v26;
            *(_QWORD *)a2 = v26 + 1;
          }
          v59 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v27);
          if ((v59 & 0x8000000000000000) != 0)
            return 0;
          v55 = v59;
          result = CoreML::Specification::ActivationReLU::MergePartialFromCodedStream((CoreML::Specification::ActivationReLU *)v59, (char **)a2, v60);
          if (!(_DWORD)result)
            return result;
          goto LABEL_138;
        }
        goto LABEL_8;
      }
      if (v13 != 15 || v9 != 122)
        goto LABEL_8;
      if (*((_DWORD *)this + 7) == 15)
      {
        v17 = (CoreML::Specification::ActivationLeakyReLU *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
        *((_DWORD *)this + 7) = 15;
        v17 = (CoreML::Specification::ActivationLeakyReLU *)operator new();
        CoreML::Specification::ActivationLeakyReLU::ActivationLeakyReLU(v17);
        *((_QWORD *)this + 2) = v17;
      }
      v37 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v37 < 0)
      {
        v38 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v38 < 0)
          return 0;
      }
      else
      {
        v38 = *v37;
        *(_QWORD *)a2 = v37 + 1;
      }
      v67 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v38);
      if ((v67 & 0x8000000000000000) != 0)
        return 0;
      v69 = v67;
      result = CoreML::Specification::ActivationLeakyReLU::MergePartialFromCodedStream(v17, (char **)a2, v68);
      if (!(_DWORD)result)
        return result;
LABEL_170:
      v65 = a2;
      v66 = v69;
      goto LABEL_171;
    }
    if (v9 == 42)
    {
      if (*((_DWORD *)this + 7) == 5)
      {
        v24 = (CoreML::Specification::ActivationLinear *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
        *((_DWORD *)this + 7) = 5;
        v24 = (CoreML::Specification::ActivationLinear *)operator new();
        CoreML::Specification::ActivationLinear::ActivationLinear(v24);
        *((_QWORD *)this + 2) = v24;
      }
      v45 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v45 < 0)
      {
        v46 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v46 < 0)
          return 0;
      }
      else
      {
        v46 = *v45;
        *(_QWORD *)a2 = v45 + 1;
      }
      v76 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v46);
      if ((v76 & 0x8000000000000000) != 0)
        return 0;
      v69 = v76;
      result = CoreML::Specification::ActivationLinear::MergePartialFromCodedStream(v24, (char **)a2, v77);
      if (!(_DWORD)result)
        return result;
      goto LABEL_170;
    }
LABEL_8:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0;
  }
}

void sub_218016A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ActivationParams::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 28);
  if (v6 == 5)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(this + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 10)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 15)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xF, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 20)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x14, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 25)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x19, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 30)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1E, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 31)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 40)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x28, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 41)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x29, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 50)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x32, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 60)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x3C, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 70)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x46, *(_QWORD *)(v5 + 16), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 71)
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x47, *(_QWORD *)(v5 + 16), a2, a4);
  return this;
}

uint64_t CoreML::Specification::ActivationParams::ByteSizeLong(CoreML::Specification::ActivationParams *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CoreML::Specification::WeightParams *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = 0;
  v3 = *((_DWORD *)this + 7);
  if (v3 <= 30)
  {
    if (v3 <= 19)
    {
      switch(v3)
      {
        case 5:
          v10 = *((_QWORD *)this + 2);
          v11 = 5;
          if (*(float *)(v10 + 16) == 0.0)
            v11 = 0;
          if (*(float *)(v10 + 20) != 0.0)
            v11 += 5;
          *(_DWORD *)(v10 + 24) = v11;
          result = v11 + 2;
          break;
        case 10:
          *(_DWORD *)(*((_QWORD *)this + 2) + 16) = 0;
          result = 2;
          break;
        case 15:
          v4 = *((_QWORD *)this + 2);
          v5 = 5;
          if (*(float *)(v4 + 16) == 0.0)
            v5 = 0;
          *(_DWORD *)(v4 + 20) = v5;
          result = v5 | 2;
          break;
      }
      goto LABEL_42;
    }
    if (v3 == 20)
    {
LABEL_30:
      v9 = *((_QWORD *)this + 2);
      v7 = 5;
      if (*(float *)(v9 + 16) == 0.0)
        v7 = 0;
      *(_DWORD *)(v9 + 20) = v7;
LABEL_33:
      result = v7 + 3;
      goto LABEL_42;
    }
    if (v3 == 25)
    {
      v8 = CoreML::Specification::ActivationPReLU::ByteSizeLong(*((CoreML::Specification::ActivationPReLU **)this + 2));
      goto LABEL_41;
    }
    if (v3 != 30)
      goto LABEL_42;
    goto LABEL_29;
  }
  if (v3 <= 49)
  {
    if (v3 != 31)
    {
      if (v3 == 40)
        goto LABEL_29;
      if (v3 != 41)
        goto LABEL_42;
    }
    v6 = *((_QWORD *)this + 2);
    v7 = 5;
    if (*(float *)(v6 + 16) == 0.0)
      v7 = 0;
    if (*(float *)(v6 + 20) != 0.0)
      v7 += 5;
    *(_DWORD *)(v6 + 24) = v7;
    goto LABEL_33;
  }
  if (v3 <= 69)
  {
    if (v3 != 50)
    {
      if (v3 != 60)
        goto LABEL_42;
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  if (v3 == 70)
  {
LABEL_29:
    *(_DWORD *)(*((_QWORD *)this + 2) + 16) = 0;
    result = 3;
    goto LABEL_42;
  }
  if (v3 == 71)
  {
    v8 = (CoreML::Specification::WeightParams *)CoreML::Specification::ActivationParametricSoftplus::ByteSizeLong(*((CoreML::Specification::ActivationParametricSoftplus **)this + 2));
LABEL_41:
    result = (uint64_t)v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_42:
  *((_DWORD *)this + 6) = result;
  return result;
}

void CoreML::Specification::ActivationParams::MergeFrom(CoreML::Specification::ActivationParams *this, const CoreML::Specification::ActivationParams *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  CoreML::Specification::ActivationSoftsign *v7;
  uint64_t *v8;
  uint64_t v9;
  CoreML::Specification::ActivationLeakyReLU *v10;
  uint64_t *v11;
  CoreML::Specification::ActivationSigmoidHard *v12;
  CoreML::Specification::ActivationTanh *v13;
  CoreML::Specification::ActivationParametricSoftplus *v14;
  CoreML::Specification::ActivationELU *v15;
  CoreML::Specification::ActivationLinear *v16;
  CoreML::Specification::ActivationReLU *v17;
  CoreML::Specification::ActivationScaledTanh *v18;
  CoreML::Specification::ActivationSigmoid *v19;
  uint64_t v20;
  float v21;
  CoreML::Specification::ActivationPReLU *v22;
  uint64_t v23;
  CoreML::Specification::ActivationSigmoidHard *v24;
  uint64_t *v25;
  CoreML::Specification::ActivationParametricSoftplus *v26;
  const CoreML::Specification::ActivationParametricSoftplus *v27;
  CoreML::Specification::ActivationLinear *v28;
  CoreML::Specification::ActivationScaledTanh *v29;
  CoreML::Specification::ActivationThresholdedReLU *v30;
  CoreML::Specification::ActivationPReLU *v31;
  const CoreML::Specification::ActivationPReLU *v32;
  CoreML::Specification::ActivationSoftplus *v33;
  std::string *v34;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 7);
  if (v5 > 30)
  {
    if (v5 > 49)
    {
      if (v5 <= 69)
      {
        if (v5 != 50)
        {
          if (v5 != 60)
            return;
          if (*((_DWORD *)this + 7) != 60)
          {
            CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
            *((_DWORD *)this + 7) = 60;
            v6 = (uint64_t *)operator new();
            v7 = CoreML::Specification::ActivationSoftsign::ActivationSoftsign((CoreML::Specification::ActivationSoftsign *)v6);
            *((_QWORD *)this + 2) = v6;
            if (*((_DWORD *)a2 + 7) != 60)
            {
              CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v7);
              v8 = &CoreML::Specification::_ActivationSoftsign_default_instance_;
              goto LABEL_58;
            }
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        if (*((_DWORD *)this + 7) != 50)
        {
          CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
          *((_DWORD *)this + 7) = 50;
          v9 = operator new();
          v15 = CoreML::Specification::ActivationELU::ActivationELU((CoreML::Specification::ActivationELU *)v9);
          *((_QWORD *)this + 2) = v9;
          if (*((_DWORD *)a2 + 7) != 50)
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v15);
            v11 = &CoreML::Specification::_ActivationELU_default_instance_;
            goto LABEL_49;
          }
LABEL_48:
          v11 = (uint64_t *)*((_QWORD *)a2 + 2);
          goto LABEL_49;
        }
LABEL_47:
        v9 = *((_QWORD *)this + 2);
        goto LABEL_48;
      }
      if (v5 != 70)
      {
        if (v5 != 71)
          return;
        if (*((_DWORD *)this + 7) == 71)
        {
          v14 = (CoreML::Specification::ActivationParametricSoftplus *)*((_QWORD *)this + 2);
        }
        else
        {
          CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
          *((_DWORD *)this + 7) = 71;
          v14 = (CoreML::Specification::ActivationParametricSoftplus *)operator new();
          v26 = CoreML::Specification::ActivationParametricSoftplus::ActivationParametricSoftplus(v14);
          *((_QWORD *)this + 2) = v14;
          if (*((_DWORD *)a2 + 7) != 71)
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v26);
            v27 = (const CoreML::Specification::ActivationParametricSoftplus *)&CoreML::Specification::_ActivationParametricSoftplus_default_instance_;
            goto LABEL_79;
          }
        }
        v27 = (const CoreML::Specification::ActivationParametricSoftplus *)*((_QWORD *)a2 + 2);
LABEL_79:
        CoreML::Specification::ActivationParametricSoftplus::MergeFrom(v14, v27);
        return;
      }
      if (*((_DWORD *)this + 7) != 70)
      {
        CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
        *((_DWORD *)this + 7) = 70;
        v6 = (uint64_t *)operator new();
        v33 = CoreML::Specification::ActivationSoftplus::ActivationSoftplus((CoreML::Specification::ActivationSoftplus *)v6);
        *((_QWORD *)this + 2) = v6;
        if (*((_DWORD *)a2 + 7) != 70)
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v33);
          v8 = &CoreML::Specification::_ActivationSoftplus_default_instance_;
LABEL_58:
          v23 = v8[1];
          if ((v23 & 1) != 0)
            _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v6 + 1, v23 & 0xFFFFFFFFFFFFFFFELL);
          return;
        }
LABEL_57:
        v8 = (uint64_t *)*((_QWORD *)a2 + 2);
        goto LABEL_58;
      }
LABEL_56:
      v6 = (uint64_t *)*((_QWORD *)this + 2);
      goto LABEL_57;
    }
    if (v5 != 31)
    {
      if (v5 == 40)
      {
        if (*((_DWORD *)this + 7) != 40)
        {
          CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
          *((_DWORD *)this + 7) = 40;
          v6 = (uint64_t *)operator new();
          v19 = CoreML::Specification::ActivationSigmoid::ActivationSigmoid((CoreML::Specification::ActivationSigmoid *)v6);
          *((_QWORD *)this + 2) = v6;
          if (*((_DWORD *)a2 + 7) != 40)
          {
            CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v19);
            v8 = &CoreML::Specification::_ActivationSigmoid_default_instance_;
            goto LABEL_58;
          }
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v5 != 41)
        return;
      if (*((_DWORD *)this + 7) == 41)
      {
        v12 = (CoreML::Specification::ActivationSigmoidHard *)*((_QWORD *)this + 2);
      }
      else
      {
        CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
        *((_DWORD *)this + 7) = 41;
        v12 = (CoreML::Specification::ActivationSigmoidHard *)operator new();
        v24 = CoreML::Specification::ActivationSigmoidHard::ActivationSigmoidHard(v12);
        *((_QWORD *)this + 2) = v12;
        if (*((_DWORD *)a2 + 7) != 41)
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v24);
          v25 = &CoreML::Specification::_ActivationSigmoidHard_default_instance_;
          goto LABEL_76;
        }
      }
      v25 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_76:
      v34 = (std::string *)v12;
LABEL_77:
      CoreML::Specification::ActivationScaledTanh::MergeFrom(v34, (const CoreML::Specification::ActivationScaledTanh *)v25);
      return;
    }
    if (*((_DWORD *)this + 7) == 31)
    {
      v18 = (CoreML::Specification::ActivationScaledTanh *)*((_QWORD *)this + 2);
    }
    else
    {
      CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
      *((_DWORD *)this + 7) = 31;
      v18 = (CoreML::Specification::ActivationScaledTanh *)operator new();
      v29 = CoreML::Specification::ActivationScaledTanh::ActivationScaledTanh(v18);
      *((_QWORD *)this + 2) = v18;
      if (*((_DWORD *)a2 + 7) != 31)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v29);
        v25 = &CoreML::Specification::_ActivationScaledTanh_default_instance_;
        goto LABEL_83;
      }
    }
    v25 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_83:
    v34 = (std::string *)v18;
    goto LABEL_77;
  }
  if (v5 > 19)
  {
    if (v5 == 20)
    {
      if (*((_DWORD *)this + 7) != 20)
      {
        CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
        *((_DWORD *)this + 7) = 20;
        v9 = operator new();
        v30 = CoreML::Specification::ActivationThresholdedReLU::ActivationThresholdedReLU((CoreML::Specification::ActivationThresholdedReLU *)v9);
        *((_QWORD *)this + 2) = v9;
        if (*((_DWORD *)a2 + 7) != 20)
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v30);
          v11 = &CoreML::Specification::_ActivationThresholdedReLU_default_instance_;
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      goto LABEL_47;
    }
    if (v5 != 25)
    {
      if (v5 != 30)
        return;
      if (*((_DWORD *)this + 7) != 30)
      {
        CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
        *((_DWORD *)this + 7) = 30;
        v6 = (uint64_t *)operator new();
        v13 = CoreML::Specification::ActivationTanh::ActivationTanh((CoreML::Specification::ActivationTanh *)v6);
        *((_QWORD *)this + 2) = v6;
        if (*((_DWORD *)a2 + 7) != 30)
        {
          CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v13);
          v8 = &CoreML::Specification::_ActivationTanh_default_instance_;
          goto LABEL_58;
        }
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    if (*((_DWORD *)this + 7) == 25)
    {
      v22 = (CoreML::Specification::ActivationPReLU *)*((_QWORD *)this + 2);
    }
    else
    {
      CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
      *((_DWORD *)this + 7) = 25;
      v22 = (CoreML::Specification::ActivationPReLU *)operator new();
      v31 = CoreML::Specification::ActivationPReLU::ActivationPReLU(v22);
      *((_QWORD *)this + 2) = v22;
      if (*((_DWORD *)a2 + 7) != 25)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v31);
        v32 = (const CoreML::Specification::ActivationPReLU *)&CoreML::Specification::_ActivationPReLU_default_instance_;
        goto LABEL_85;
      }
    }
    v32 = (const CoreML::Specification::ActivationPReLU *)*((_QWORD *)a2 + 2);
LABEL_85:
    CoreML::Specification::ActivationPReLU::MergeFrom(v22, v32);
    return;
  }
  if (v5 == 5)
  {
    if (*((_DWORD *)this + 7) == 5)
    {
      v16 = (CoreML::Specification::ActivationLinear *)*((_QWORD *)this + 2);
    }
    else
    {
      CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
      *((_DWORD *)this + 7) = 5;
      v16 = (CoreML::Specification::ActivationLinear *)operator new();
      v28 = CoreML::Specification::ActivationLinear::ActivationLinear(v16);
      *((_QWORD *)this + 2) = v16;
      if (*((_DWORD *)a2 + 7) != 5)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v28);
        v25 = &CoreML::Specification::_ActivationLinear_default_instance_;
        goto LABEL_81;
      }
    }
    v25 = (uint64_t *)*((_QWORD *)a2 + 2);
LABEL_81:
    v34 = (std::string *)v16;
    goto LABEL_77;
  }
  if (v5 == 10)
  {
    if (*((_DWORD *)this + 7) != 10)
    {
      CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
      *((_DWORD *)this + 7) = 10;
      v6 = (uint64_t *)operator new();
      v17 = CoreML::Specification::ActivationReLU::ActivationReLU((CoreML::Specification::ActivationReLU *)v6);
      *((_QWORD *)this + 2) = v6;
      if (*((_DWORD *)a2 + 7) != 10)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v17);
        v8 = &CoreML::Specification::_ActivationReLU_default_instance_;
        goto LABEL_58;
      }
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (v5 != 15)
    return;
  if (*((_DWORD *)this + 7) == 15)
    goto LABEL_47;
  CoreML::Specification::ActivationParams::clear_NonlinearityType((uint64_t)this);
  *((_DWORD *)this + 7) = 15;
  v9 = operator new();
  v10 = CoreML::Specification::ActivationLeakyReLU::ActivationLeakyReLU((CoreML::Specification::ActivationLeakyReLU *)v9);
  *((_QWORD *)this + 2) = v9;
  if (*((_DWORD *)a2 + 7) == 15)
    goto LABEL_48;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v10);
  v11 = &CoreML::Specification::_ActivationLeakyReLU_default_instance_;
LABEL_49:
  v20 = v11[1];
  if ((v20 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v9 + 8), v20 & 0xFFFFFFFFFFFFFFFELL);
  v21 = *((float *)v11 + 4);
  if (v21 != 0.0)
    *(float *)(v9 + 16) = v21;
}

void sub_21801748C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ActivationParams::IsInitialized(CoreML::Specification::ActivationParams *this)
{
  return 1;
}

_QWORD *CoreML::Specification::ActivationParams::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ActivationParams");
}

CoreML::Specification::Tensor *CoreML::Specification::Tensor::Tensor(CoreML::Specification::Tensor *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_24D923450;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (this != (CoreML::Specification::Tensor *)&CoreML::Specification::_Tensor_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_218017598(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = *(_QWORD **)(v2 + 24);
  if (v4)
  {
    if (!*v4)
      operator delete(v4);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Tensor::~Tensor(CoreML::Specification::Tensor *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_24D923450;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 && !*v2)
    operator delete(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::Tensor::~Tensor(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Specification::Tensor *CoreML::Specification::Tensor::New(CoreML::Specification::Tensor *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::Tensor *v3;

  v3 = (CoreML::Specification::Tensor *)operator new();
  CoreML::Specification::Tensor::Tensor(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::Tensor>(a2, v3);
  return v3;
}

void sub_218017680(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40EA59D502);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Tensor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Tensor>);
  return result;
}

uint64_t CoreML::Specification::Tensor::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::Tensor::MergePartialFromCodedStream(CoreML::Specification::Tensor *this, char **a2, unsigned int a3)
{
  unsigned int *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int TagFallback;
  char *v12;
  int VarintSizeAsIntFallback;
  char *v14;
  int v15;
  int v16;
  char *v17;
  unint64_t v18;
  unint64_t Varint64Fallback;
  char v20;
  signed int v21;
  uint64_t v22;
  uint64_t Varint32Fallback;

  v5 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = *a2;
        if (*a2 >= a2[1])
        {
          v7 = 0;
LABEL_7:
          TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0)
            goto LABEL_13;
          goto LABEL_8;
        }
        v7 = *v6;
        if (*v6 < 1)
          goto LABEL_7;
        *a2 = v6 + 1;
        v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0)
          goto LABEL_13;
LABEL_8:
        if (v8 >> 3 != 2)
          break;
        if (v8 == 16)
        {
          if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0x12u, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0;
        }
        else
        {
          if (v8 != 18)
            goto LABEL_13;
          v12 = *a2;
          if (*a2 >= a2[1] || *v12 < 0)
          {
            VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0)
              return 0;
          }
          else
          {
            VarintSizeAsIntFallback = *v12;
            *a2 = v12 + 1;
          }
          v16 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
          {
            do
            {
              v17 = *a2;
              if (*a2 >= a2[1] || *v17 < 0)
              {
                Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
                if ((v20 & 1) == 0)
                  return 0;
                v18 = Varint64Fallback;
              }
              else
              {
                v18 = *v17;
                *a2 = v17 + 1;
              }
              v21 = *((_DWORD *)this + 4);
              if (v21 == *((_DWORD *)this + 5))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
                v21 = *v5;
              }
              v22 = *((_QWORD *)this + 3);
              *((_DWORD *)this + 4) = v21 + 1;
              *(_QWORD *)(v22 + 8 * v21 + 8) = v18;
            }
            while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
          }
          _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v16);
        }
      }
      if (v8 >> 3 != 1 || v8 != 8)
        break;
      v14 = *a2;
      if (*a2 >= a2[1])
      {
        v15 = 0;
        goto LABEL_41;
      }
      v15 = *v14;
      if (*v14 < 0)
      {
LABEL_41:
        Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v15);
        *((_DWORD *)this + 9) = Varint32Fallback;
        if (Varint32Fallback < 0)
          return 0;
      }
      else
      {
        *((_DWORD *)this + 9) = v15;
        *a2 = v14 + 1;
      }
    }
LABEL_13:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0;
  }
}

uint64_t CoreML::Specification::Tensor::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if (v6)
    this = _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  if (*(int *)(v5 + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      v7 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)a2 + 1))++ = 18;
      v7 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v7;
    }
    v8 = *(_DWORD *)(v5 + 32);
    if (v7 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v8);
    }
    else
    {
      v9 = *((_QWORD *)a2 + 1);
      if (v8 < 0x80)
      {
        v11 = *(_DWORD *)(v5 + 32);
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
      }
      else
      {
        v10 = (_BYTE *)*((_QWORD *)a2 + 1);
        do
        {
          *v10++ = v8 | 0x80;
          v11 = v8 >> 7;
          v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
      }
      *v10 = v11;
      v13 = (_DWORD)v10 - v9 + 1;
      *((_QWORD *)a2 + 1) += v13;
      *((_DWORD *)a2 + 4) -= v13;
    }
    v14 = *(unsigned int *)(v5 + 16);
    if ((int)v14 >= 1)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v16);
        }
        else
        {
          v17 = *((_QWORD *)a2 + 1);
          if (v16 < 0x80)
          {
            v19 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * i + 8);
            v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          }
          else
          {
            v18 = (_BYTE *)*((_QWORD *)a2 + 1);
            do
            {
              *v18++ = v16 | 0x80;
              v19 = v16 >> 7;
              v20 = v16 >> 14;
              v16 >>= 7;
            }
            while (v20);
          }
          *v18 = v19;
          v21 = (_DWORD)v18 - v17 + 1;
          *((_QWORD *)a2 + 1) += v21;
          *((_DWORD *)a2 + 4) -= v21;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::Tensor::ByteSizeLong(CoreML::Specification::Tensor *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    v2 = 0;
LABEL_8:
    v5 = 0;
    goto LABEL_10;
  }
  v2 = 0;
  v3 = (uint64_t *)(*((_QWORD *)this + 3) + 8);
  do
  {
    v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2)
    goto LABEL_8;
  if ((v2 & 0x80000000) != 0)
    v5 = 11;
  else
    v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_10:
  *((_DWORD *)this + 8) = v2;
  v6 = v5 + v2;
  v7 = *((_DWORD *)this + 9);
  if (v7)
    v6 += ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  *((_DWORD *)this + 10) = v6;
  return v6;
}

uint64_t *CoreML::Specification::Tensor::MergeFrom(uint64_t *this, const CoreML::Specification::Tensor *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 9);
  if (v6)
    v3[9] = v6;
  return this;
}

uint64_t CoreML::Specification::Tensor::IsInitialized(CoreML::Specification::Tensor *this)
{
  return 1;
}

_QWORD *CoreML::Specification::Tensor::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Tensor");
}

CoreML::Specification::NeuralNetworkLayer *CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer(CoreML::Specification::NeuralNetworkLayer *this)
{
  *(_QWORD *)this = &off_24D9234E8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 13) = 0;
  if (this != (CoreML::Specification::NeuralNetworkLayer *)&CoreML::Specification::_NeuralNetworkLayer_default_instance_)
    CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(this);
  *((_QWORD *)this + 14) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 17) = 0;
  return this;
}

void sub_218017C64(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v4);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::ConvolutionLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_convolution(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ConvolutionLayerParams *v2;

  if (*((_DWORD *)this + 35) == 100)
    return (CoreML::Specification::ConvolutionLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 100;
  v2 = (CoreML::Specification::ConvolutionLayerParams *)operator new();
  CoreML::Specification::ConvolutionLayerParams::ConvolutionLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218017D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C407928EB6DLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ConvolutionLayerParams::MergeFrom(CoreML::Specification::ConvolutionLayerParams *this, const CoreML::Specification::ConvolutionLayerParams *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  const CoreML::Specification::WeightParams *v9;
  CoreML::Specification::WeightParams *v10;
  const CoreML::Specification::WeightParams *v11;
  const CoreML::Specification::WeightParams *v12;
  CoreML::Specification::WeightParams *v13;
  const CoreML::Specification::WeightParams *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  CoreML::Specification::ValidPadding *v19;
  uint64_t v20;
  CoreML::Specification::ValidPadding *v21;
  const CoreML::Specification::ValidPadding *v22;
  CoreML::Specification::SamePadding *v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 4, *((_DWORD *)this + 4) + v5);
    memcpy((void *)(*((_QWORD *)this + 3) + 8 * *((int *)this + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 10, *((_DWORD *)this + 10) + v6);
    memcpy((void *)(*((_QWORD *)this + 6) + 8 * *((int *)this + 10) + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
  }
  v7 = *((_DWORD *)a2 + 16);
  if (v7)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 16, *((_DWORD *)this + 16) + v7);
    memcpy((void *)(*((_QWORD *)this + 9) + 8 * *((int *)this + 16) + 8), (const void *)(*((_QWORD *)a2 + 9) + 8), 8 * *((int *)a2 + 16));
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
  }
  v8 = *((_DWORD *)a2 + 22);
  if (v8)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 22, *((_DWORD *)this + 22) + v8);
    memcpy((void *)(*((_QWORD *)this + 12) + 8 * *((int *)this + 22) + 8), (const void *)(*((_QWORD *)a2 + 12) + 8), 8 * *((int *)a2 + 22));
    *((_DWORD *)this + 22) += *((_DWORD *)a2 + 22);
  }
  if (a2 != (const CoreML::Specification::ConvolutionLayerParams *)&CoreML::Specification::_ConvolutionLayerParams_default_instance_)
  {
    v9 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 14);
    if (v9)
    {
      v10 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 14);
      if (!v10)
      {
        v10 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v10);
        *((_QWORD *)this + 14) = v10;
        v9 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 14);
      }
      if (v9)
        v11 = v9;
      else
        v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v10, v11);
    }
    v12 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 15);
    if (v12)
    {
      v13 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 15);
      if (!v13)
      {
        v13 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v13);
        *((_QWORD *)this + 15) = v13;
        v12 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 15);
      }
      if (v12)
        v14 = v12;
      else
        v14 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v13, v14);
    }
  }
  v15 = *((_QWORD *)a2 + 16);
  if (v15)
    *((_QWORD *)this + 16) = v15;
  v16 = *((_QWORD *)a2 + 17);
  if (v16)
    *((_QWORD *)this + 17) = v16;
  v17 = *((_QWORD *)a2 + 18);
  if (v17)
    *((_QWORD *)this + 18) = v17;
  if (*((_BYTE *)a2 + 152))
    *((_BYTE *)this + 152) = 1;
  if (*((_BYTE *)a2 + 153))
    *((_BYTE *)this + 153) = 1;
  v18 = *((_DWORD *)a2 + 43);
  if (v18 != 51)
  {
    if (v18 != 50)
      return;
    if (*((_DWORD *)this + 43) == 50)
    {
      v19 = (CoreML::Specification::ValidPadding *)*((_QWORD *)this + 20);
    }
    else
    {
      CoreML::Specification::ConvolutionLayerParams::clear_ConvolutionPaddingType((uint64_t)this);
      *((_DWORD *)this + 43) = 50;
      v19 = (CoreML::Specification::ValidPadding *)operator new();
      v21 = CoreML::Specification::ValidPadding::ValidPadding(v19);
      *((_QWORD *)this + 20) = v19;
      if (*((_DWORD *)a2 + 43) != 50)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v21);
        v22 = (const CoreML::Specification::ValidPadding *)&CoreML::Specification::_ValidPadding_default_instance_;
        goto LABEL_47;
      }
    }
    v22 = (const CoreML::Specification::ValidPadding *)*((_QWORD *)a2 + 20);
LABEL_47:
    CoreML::Specification::ValidPadding::MergeFrom((std::string *)v19, v22);
    return;
  }
  if (*((_DWORD *)this + 43) == 51)
  {
    v20 = *((_QWORD *)this + 20);
  }
  else
  {
    CoreML::Specification::ConvolutionLayerParams::clear_ConvolutionPaddingType((uint64_t)this);
    *((_DWORD *)this + 43) = 51;
    v20 = operator new();
    v23 = CoreML::Specification::SamePadding::SamePadding((CoreML::Specification::SamePadding *)v20);
    *((_QWORD *)this + 20) = v20;
    if (*((_DWORD *)a2 + 43) != 51)
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v23);
      v24 = &CoreML::Specification::_SamePadding_default_instance_;
      goto LABEL_49;
    }
  }
  v24 = (uint64_t *)*((_QWORD *)a2 + 20);
LABEL_49:
  v25 = v24[1];
  if ((v25 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v20 + 8), v25 & 0xFFFFFFFFFFFFFFFELL);
  v26 = *((_DWORD *)v24 + 4);
  if (v26)
    *(_DWORD *)(v20 + 16) = v26;
}

void sub_2180180B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::PoolingLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_pooling(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::PoolingLayerParams *v2;

  if (*((_DWORD *)this + 35) == 120)
    return (CoreML::Specification::PoolingLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 120;
  v2 = (CoreML::Specification::PoolingLayerParams *)operator new();
  CoreML::Specification::PoolingLayerParams::PoolingLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218018174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40A643CE47);
  _Unwind_Resume(a1);
}

void CoreML::Specification::PoolingLayerParams::MergeFrom(CoreML::Specification::PoolingLayerParams *this, const CoreML::Specification::PoolingLayerParams *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  CoreML::Specification::ValidPadding *v9;
  CoreML::Specification::PoolingLayerParams_ValidCompletePadding *v10;
  uint64_t v11;
  CoreML::Specification::ValidPadding *v12;
  const CoreML::Specification::ValidPadding *v13;
  CoreML::Specification::PoolingLayerParams_ValidCompletePadding *v14;
  const CoreML::Specification::GLMRegressor_DoubleArray *v15;
  CoreML::Specification::SamePadding *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 4, *((_DWORD *)this + 4) + v5);
    memcpy((void *)(*((_QWORD *)this + 3) + 8 * *((int *)this + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 10, *((_DWORD *)this + 10) + v6);
    memcpy((void *)(*((_QWORD *)this + 6) + 8 * *((int *)this + 10) + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
  }
  v7 = *((_DWORD *)a2 + 15);
  if (v7)
    *((_DWORD *)this + 15) = v7;
  if (*((_BYTE *)a2 + 64))
    *((_BYTE *)this + 64) = 1;
  if (*((_BYTE *)a2 + 65))
    *((_BYTE *)this + 65) = 1;
  v8 = *((_DWORD *)a2 + 21);
  if (v8 == 32)
  {
    if (*((_DWORD *)this + 21) == 32)
    {
      v10 = (CoreML::Specification::PoolingLayerParams_ValidCompletePadding *)*((_QWORD *)this + 9);
    }
    else
    {
      CoreML::Specification::PoolingLayerParams::clear_PoolingPaddingType((uint64_t)this);
      *((_DWORD *)this + 21) = 32;
      v10 = (CoreML::Specification::PoolingLayerParams_ValidCompletePadding *)operator new();
      v14 = CoreML::Specification::PoolingLayerParams_ValidCompletePadding::PoolingLayerParams_ValidCompletePadding(v10);
      *((_QWORD *)this + 9) = v10;
      if (*((_DWORD *)a2 + 21) != 32)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v14);
        v15 = (const CoreML::Specification::GLMRegressor_DoubleArray *)&CoreML::Specification::_PoolingLayerParams_ValidCompletePadding_default_instance_;
        goto LABEL_31;
      }
    }
    v15 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((_QWORD *)a2 + 9);
LABEL_31:
    CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom((uint64_t *)v10, v15);
    return;
  }
  if (v8 != 31)
  {
    if (v8 != 30)
      return;
    if (*((_DWORD *)this + 21) == 30)
    {
      v9 = (CoreML::Specification::ValidPadding *)*((_QWORD *)this + 9);
    }
    else
    {
      CoreML::Specification::PoolingLayerParams::clear_PoolingPaddingType((uint64_t)this);
      *((_DWORD *)this + 21) = 30;
      v9 = (CoreML::Specification::ValidPadding *)operator new();
      v12 = CoreML::Specification::ValidPadding::ValidPadding(v9);
      *((_QWORD *)this + 9) = v9;
      if (*((_DWORD *)a2 + 21) != 30)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v12);
        v13 = (const CoreML::Specification::ValidPadding *)&CoreML::Specification::_ValidPadding_default_instance_;
        goto LABEL_29;
      }
    }
    v13 = (const CoreML::Specification::ValidPadding *)*((_QWORD *)a2 + 9);
LABEL_29:
    CoreML::Specification::ValidPadding::MergeFrom((std::string *)v9, v13);
    return;
  }
  if (*((_DWORD *)this + 21) == 31)
  {
    v11 = *((_QWORD *)this + 9);
  }
  else
  {
    CoreML::Specification::PoolingLayerParams::clear_PoolingPaddingType((uint64_t)this);
    *((_DWORD *)this + 21) = 31;
    v11 = operator new();
    v16 = CoreML::Specification::SamePadding::SamePadding((CoreML::Specification::SamePadding *)v11);
    *((_QWORD *)this + 9) = v11;
    if (*((_DWORD *)a2 + 21) != 31)
    {
      CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v16);
      v17 = &CoreML::Specification::_SamePadding_default_instance_;
      goto LABEL_33;
    }
  }
  v17 = (uint64_t *)*((_QWORD *)a2 + 9);
LABEL_33:
  v18 = v17[1];
  if ((v18 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v11 + 8), v18 & 0xFFFFFFFFFFFFFFFELL);
  v19 = *((_DWORD *)v17 + 4);
  if (v19)
    *(_DWORD *)(v11 + 16) = v19;
}

void sub_21801843C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::ActivationParams *CoreML::Specification::NeuralNetworkLayer::mutable_activation(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ActivationParams *v2;

  if (*((_DWORD *)this + 35) == 130)
    return (CoreML::Specification::ActivationParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 130;
  v2 = (CoreML::Specification::ActivationParams *)operator new();
  CoreML::Specification::ActivationParams::ActivationParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_2180184F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::InnerProductLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_innerproduct(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::InnerProductLayerParams *v2;

  if (*((_DWORD *)this + 35) == 140)
    return (CoreML::Specification::InnerProductLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 140;
  v2 = (CoreML::Specification::InnerProductLayerParams *)operator new();
  CoreML::Specification::InnerProductLayerParams::InnerProductLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218018584(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C404A0E3968);
  _Unwind_Resume(a1);
}

void CoreML::Specification::InnerProductLayerParams::MergeFrom(CoreML::Specification::InnerProductLayerParams *this, const CoreML::Specification::InnerProductLayerParams *a2)
{
  uint64_t v4;
  const CoreML::Specification::WeightParams *v5;
  CoreML::Specification::WeightParams *v6;
  const CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;
  CoreML::Specification::WeightParams *v9;
  const CoreML::Specification::WeightParams *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::InnerProductLayerParams *)&CoreML::Specification::_InnerProductLayerParams_default_instance_)
  {
    v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v9, v10);
    }
  }
  v11 = *((_QWORD *)a2 + 4);
  if (v11)
    *((_QWORD *)this + 4) = v11;
  v12 = *((_QWORD *)a2 + 5);
  if (v12)
    *((_QWORD *)this + 5) = v12;
  if (*((_BYTE *)a2 + 48))
    *((_BYTE *)this + 48) = 1;
  if (*((_BYTE *)a2 + 49))
    *((_BYTE *)this + 49) = 1;
}

void sub_2180186C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::EmbeddingLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_embedding(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::EmbeddingLayerParams *v2;

  if (*((_DWORD *)this + 35) == 150)
    return (CoreML::Specification::EmbeddingLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 150;
  v2 = (CoreML::Specification::EmbeddingLayerParams *)operator new();
  CoreML::Specification::EmbeddingLayerParams::EmbeddingLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218018754(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4055BE373CLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::EmbeddingLayerParams::MergeFrom(CoreML::Specification::EmbeddingLayerParams *this, const CoreML::Specification::EmbeddingLayerParams *a2)
{
  uint64_t v4;
  const CoreML::Specification::WeightParams *v5;
  CoreML::Specification::WeightParams *v6;
  const CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;
  CoreML::Specification::WeightParams *v9;
  const CoreML::Specification::WeightParams *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::EmbeddingLayerParams *)&CoreML::Specification::_EmbeddingLayerParams_default_instance_)
  {
    v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v9, v10);
    }
  }
  v11 = *((_QWORD *)a2 + 4);
  if (v11)
    *((_QWORD *)this + 4) = v11;
  v12 = *((_QWORD *)a2 + 5);
  if (v12)
    *((_QWORD *)this + 5) = v12;
  if (*((_BYTE *)a2 + 48))
    *((_BYTE *)this + 48) = 1;
}

void sub_218018884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::BatchnormLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_batchnorm(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::BatchnormLayerParams *v2;

  if (*((_DWORD *)this + 35) == 160)
    return (CoreML::Specification::BatchnormLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 160;
  v2 = (CoreML::Specification::BatchnormLayerParams *)operator new();
  CoreML::Specification::BatchnormLayerParams::BatchnormLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218018914(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40F35C4FACLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BatchnormLayerParams::MergeFrom(CoreML::Specification::BatchnormLayerParams *this, const CoreML::Specification::BatchnormLayerParams *a2)
{
  uint64_t v4;
  const CoreML::Specification::WeightParams *v5;
  CoreML::Specification::WeightParams *v6;
  const CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;
  CoreML::Specification::WeightParams *v9;
  const CoreML::Specification::WeightParams *v10;
  const CoreML::Specification::WeightParams *v11;
  CoreML::Specification::WeightParams *v12;
  const CoreML::Specification::WeightParams *v13;
  const CoreML::Specification::WeightParams *v14;
  CoreML::Specification::WeightParams *v15;
  const CoreML::Specification::WeightParams *v16;
  uint64_t v17;
  float v18;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::BatchnormLayerParams *)&CoreML::Specification::_BatchnormLayerParams_default_instance_)
  {
    v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v9, v10);
    }
    v11 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v12);
        *((_QWORD *)this + 4) = v12;
        v11 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v12, v13);
    }
    v14 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v15);
        *((_QWORD *)this + 5) = v15;
        v14 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v15, v16);
    }
  }
  v17 = *((_QWORD *)a2 + 6);
  if (v17)
    *((_QWORD *)this + 6) = v17;
  if (*((_BYTE *)a2 + 56))
    *((_BYTE *)this + 56) = 1;
  if (*((_BYTE *)a2 + 57))
    *((_BYTE *)this + 57) = 1;
  v18 = *((float *)a2 + 15);
  if (v18 != 0.0)
    *((float *)this + 15) = v18;
}

void sub_218018AE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MeanVarianceNormalizeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_mvn(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::MeanVarianceNormalizeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 165)
    return (CoreML::Specification::MeanVarianceNormalizeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 165;
  v2 = (CoreML::Specification::MeanVarianceNormalizeLayerParams *)operator new();
  CoreML::Specification::MeanVarianceNormalizeLayerParams::MeanVarianceNormalizeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218018B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C408CDDB221);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::MeanVarianceNormalizeLayerParams::MergeFrom(std::string *this, const CoreML::Specification::MeanVarianceNormalizeLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  float v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    v3->__r_.__value_.__s.__data_[16] = 1;
  if (*((_BYTE *)a2 + 17))
    v3->__r_.__value_.__s.__data_[17] = 1;
  v5 = *((float *)a2 + 5);
  if (v5 != 0.0)
    *((float *)&v3->__r_.__value_.__r.__words[2] + 1) = v5;
  return this;
}

CoreML::Specification::L2NormalizeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_l2normalize(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::L2NormalizeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 170)
    return (CoreML::Specification::L2NormalizeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 170;
  v2 = (CoreML::Specification::L2NormalizeLayerParams *)operator new();
  CoreML::Specification::L2NormalizeLayerParams::L2NormalizeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218018C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::L2NormalizeLayerParams::MergeFrom(std::string *this, const CoreML::Specification::L2NormalizeLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  float v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((float *)a2 + 4);
  if (v5 != 0.0)
    *(float *)&v3->__r_.__value_.__r.__words[2] = v5;
  return this;
}

CoreML::Specification::SoftmaxLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_softmax(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SoftmaxLayerParams *v2;

  if (*((_DWORD *)this + 35) == 175)
    return (CoreML::Specification::SoftmaxLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 175;
  v2 = (CoreML::Specification::SoftmaxLayerParams *)operator new();
  CoreML::Specification::SoftmaxLayerParams::SoftmaxLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218018D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::LRNLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_lrn(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LRNLayerParams *v2;

  if (*((_DWORD *)this + 35) == 180)
    return (CoreML::Specification::LRNLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 180;
  v2 = (CoreML::Specification::LRNLayerParams *)operator new();
  CoreML::Specification::LRNLayerParams::LRNLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218018DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40825B58B5);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::LRNLayerParams::MergeFrom(std::string *this, const CoreML::Specification::LRNLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  float v5;
  float v6;
  std::string::size_type v7;
  float v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((float *)a2 + 4);
  if (v5 != 0.0)
    *(float *)&v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((float *)a2 + 5);
  if (v6 != 0.0)
    *((float *)&v3->__r_.__value_.__r.__words[2] + 1) = v6;
  v7 = *((_QWORD *)a2 + 3);
  if (v7)
    v3[1].__r_.__value_.__r.__words[0] = v7;
  v8 = *((float *)a2 + 8);
  if (v8 != 0.0)
    *(float *)&v3[1].__r_.__value_.__r.__words[1] = v8;
  return this;
}

CoreML::Specification::CropLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_crop(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::CropLayerParams *v2;

  if (*((_DWORD *)this + 35) == 190)
    return (CoreML::Specification::CropLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 190;
  v2 = (CoreML::Specification::CropLayerParams *)operator new();
  CoreML::Specification::CropLayerParams::CropLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218018EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40E853882FLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::CropLayerParams::MergeFrom(std::string *this, const CoreML::Specification::CropLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  const CoreML::Specification::BorderAmounts *v6;
  CoreML::Specification::BorderAmounts *v7;
  const CoreML::Specification::BorderAmounts *v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)&v3->__r_.__value_.__r.__words[2], LODWORD(v3->__r_.__value_.__r.__words[2]) + v5);
    this = (std::string *)memcpy((void *)(v3[1].__r_.__value_.__r.__words[0]+ 8 * SLODWORD(v3->__r_.__value_.__r.__words[2])+ 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    LODWORD(v3->__r_.__value_.__r.__words[2]) += *((_DWORD *)a2 + 4);
  }
  if (a2 != (const CoreML::Specification::CropLayerParams *)&CoreML::Specification::_CropLayerParams_default_instance_)
  {
    v6 = (const CoreML::Specification::BorderAmounts *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (CoreML::Specification::BorderAmounts *)v3[1].__r_.__value_.__r.__words[2];
      if (!v7)
      {
        v7 = (CoreML::Specification::BorderAmounts *)operator new();
        CoreML::Specification::BorderAmounts::BorderAmounts(v7);
        v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
        v6 = (const CoreML::Specification::BorderAmounts *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const CoreML::Specification::BorderAmounts *)&CoreML::Specification::_BorderAmounts_default_instance_;
      return CoreML::Specification::BorderAmounts::MergeFrom((std::string *)v7, v8);
    }
  }
  return this;
}

void sub_218018FE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

CoreML::Specification::PaddingLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_padding(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::PaddingLayerParams *v2;

  if (*((_DWORD *)this + 35) == 200)
    return (CoreML::Specification::PaddingLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 200;
  v2 = (CoreML::Specification::PaddingLayerParams *)operator new();
  CoreML::Specification::PaddingLayerParams::PaddingLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218019070(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::PaddingLayerParams::MergeFrom(CoreML::Specification::PaddingLayerParams *this, const CoreML::Specification::PaddingLayerParams *a2)
{
  uint64_t v4;
  const CoreML::Specification::BorderAmounts *v5;
  CoreML::Specification::BorderAmounts *v7;
  const CoreML::Specification::BorderAmounts *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  CoreML::Specification::PaddingLayerParams_PaddingReplication *v12;
  uint64_t *v13;
  uint64_t v14;
  CoreML::Specification::PaddingLayerParams_PaddingReflection *v15;
  CoreML::Specification::PaddingLayerParams_PaddingConstant *v16;
  uint64_t *v17;
  uint64_t v18;
  float v19;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = (const CoreML::Specification::BorderAmounts *)*((_QWORD *)a2 + 2);
  if (a2 != (const CoreML::Specification::PaddingLayerParams *)&CoreML::Specification::_PaddingLayerParams_default_instance_
    && v5 != 0)
  {
    v7 = (CoreML::Specification::BorderAmounts *)*((_QWORD *)this + 2);
    if (!v7)
    {
      v7 = (CoreML::Specification::BorderAmounts *)operator new();
      CoreML::Specification::BorderAmounts::BorderAmounts(v7);
      *((_QWORD *)this + 2) = v7;
      v5 = (const CoreML::Specification::BorderAmounts *)*((_QWORD *)a2 + 2);
    }
    if (v5)
      v8 = v5;
    else
      v8 = (const CoreML::Specification::BorderAmounts *)&CoreML::Specification::_BorderAmounts_default_instance_;
    CoreML::Specification::BorderAmounts::MergeFrom((std::string *)v7, v8);
  }
  v9 = *((_DWORD *)a2 + 9);
  if (v9 == 3)
  {
    if (*((_DWORD *)this + 9) != 3)
    {
      CoreML::Specification::PaddingLayerParams::clear_PaddingType((uint64_t)this);
      *((_DWORD *)this + 9) = 3;
      v11 = (uint64_t *)operator new();
      v12 = CoreML::Specification::PaddingLayerParams_PaddingReplication::PaddingLayerParams_PaddingReplication((CoreML::Specification::PaddingLayerParams_PaddingReplication *)v11);
      *((_QWORD *)this + 3) = v11;
      if (*((_DWORD *)a2 + 9) != 3)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v12);
        v13 = &CoreML::Specification::_PaddingLayerParams_PaddingReplication_default_instance_;
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v9 != 2)
  {
    if (v9 != 1)
      return;
    if (*((_DWORD *)this + 9) == 1)
    {
      v10 = *((_QWORD *)this + 3);
    }
    else
    {
      CoreML::Specification::PaddingLayerParams::clear_PaddingType((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      v10 = operator new();
      v16 = CoreML::Specification::PaddingLayerParams_PaddingConstant::PaddingLayerParams_PaddingConstant((CoreML::Specification::PaddingLayerParams_PaddingConstant *)v10);
      *((_QWORD *)this + 3) = v10;
      if (*((_DWORD *)a2 + 9) != 1)
      {
        CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v16);
        v17 = &CoreML::Specification::_PaddingLayerParams_PaddingConstant_default_instance_;
        goto LABEL_31;
      }
    }
    v17 = (uint64_t *)*((_QWORD *)a2 + 3);
LABEL_31:
    v18 = v17[1];
    if ((v18 & 1) != 0)
      _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v10 + 8), v18 & 0xFFFFFFFFFFFFFFFELL);
    v19 = *((float *)v17 + 4);
    if (v19 != 0.0)
      *(float *)(v10 + 16) = v19;
    return;
  }
  if (*((_DWORD *)this + 9) == 2)
  {
LABEL_22:
    v11 = (uint64_t *)*((_QWORD *)this + 3);
LABEL_23:
    v13 = (uint64_t *)*((_QWORD *)a2 + 3);
    goto LABEL_24;
  }
  CoreML::Specification::PaddingLayerParams::clear_PaddingType((uint64_t)this);
  *((_DWORD *)this + 9) = 2;
  v11 = (uint64_t *)operator new();
  v15 = CoreML::Specification::PaddingLayerParams_PaddingReflection::PaddingLayerParams_PaddingReflection((CoreML::Specification::PaddingLayerParams_PaddingReflection *)v11);
  *((_QWORD *)this + 3) = v11;
  if (*((_DWORD *)a2 + 9) == 2)
    goto LABEL_23;
  CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v15);
  v13 = &CoreML::Specification::_PaddingLayerParams_PaddingReflection_default_instance_;
LABEL_24:
  v14 = v13[1];
  if ((v14 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v11 + 1, v14 & 0xFFFFFFFFFFFFFFFELL);
}

void sub_2180192B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::UpsampleLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_upsample(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::UpsampleLayerParams *v2;

  if (*((_DWORD *)this + 35) == 210)
    return (CoreML::Specification::UpsampleLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 210;
  v2 = (CoreML::Specification::UpsampleLayerParams *)operator new();
  CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218019378(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40BDAE892FLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::UpsampleLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::UpsampleLayerParams *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    _tc_google::protobuf::RepeatedField<float>::Reserve(v3 + 10, v3[10] + v6);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 6) + 4 * (int)v3[10] + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 4 * *((int *)a2 + 10));
    v3[10] += *((_DWORD *)a2 + 10);
  }
  v7 = *((_DWORD *)a2 + 15);
  if (v7)
    v3[15] = v7;
  v8 = *((_DWORD *)a2 + 16);
  if (v8)
    v3[16] = v8;
  return this;
}

CoreML::Specification::ResizeBilinearLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_resizebilinear(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ResizeBilinearLayerParams *v2;

  if (*((_DWORD *)this + 35) == 211)
    return (CoreML::Specification::ResizeBilinearLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 211;
  v2 = (CoreML::Specification::ResizeBilinearLayerParams *)operator new();
  CoreML::Specification::ResizeBilinearLayerParams::ResizeBilinearLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_2180194F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40E853882FLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::ResizeBilinearLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::ResizeBilinearLayerParams *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)v3 + 4, *((_DWORD *)v3 + 4) + v5);
    this = (uint64_t *)memcpy((void *)(v3[3] + 8 * *((int *)v3 + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)v3 + 4) += *((_DWORD *)a2 + 4);
  }
  if (a2 != (const CoreML::Specification::ResizeBilinearLayerParams *)&CoreML::Specification::_ResizeBilinearLayerParams_default_instance_)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = v3[5];
      if (!v7)
      {
        v7 = operator new();
        this = (uint64_t *)CoreML::Specification::SamplingMode::SamplingMode((CoreML::Specification::SamplingMode *)v7);
        v3[5] = v7;
        v6 = (uint64_t *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = &CoreML::Specification::_SamplingMode_default_instance_;
      v9 = v8[1];
      if ((v9 & 1) != 0)
        this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v7 + 8), v9 & 0xFFFFFFFFFFFFFFFELL);
      v10 = *((_DWORD *)v8 + 4);
      if (v10)
        *(_DWORD *)(v7 + 16) = v10;
    }
  }
  return this;
}

void sub_218019620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::CropResizeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_cropresize(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::CropResizeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 212)
    return (CoreML::Specification::CropResizeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 212;
  v2 = (CoreML::Specification::CropResizeLayerParams *)operator new();
  CoreML::Specification::CropResizeLayerParams::CropResizeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_2180196AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C405E24942CLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::CropResizeLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::CropResizeLayerParams *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  float v16;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)v3 + 4, *((_DWORD *)v3 + 4) + v5);
    this = (uint64_t *)memcpy((void *)(v3[3] + 8 * *((int *)v3 + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)v3 + 4) += *((_DWORD *)a2 + 4);
  }
  if (a2 != (const CoreML::Specification::CropResizeLayerParams *)&CoreML::Specification::_CropResizeLayerParams_default_instance_)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = v3[5];
      if (!v7)
      {
        v7 = operator new();
        this = (uint64_t *)CoreML::Specification::SamplingMode::SamplingMode((CoreML::Specification::SamplingMode *)v7);
        v3[5] = v7;
        v6 = (uint64_t *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = &CoreML::Specification::_SamplingMode_default_instance_;
      v9 = v8[1];
      if ((v9 & 1) != 0)
        this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v7 + 8), v9 & 0xFFFFFFFFFFFFFFFELL);
      v10 = *((_DWORD *)v8 + 4);
      if (v10)
        *(_DWORD *)(v7 + 16) = v10;
    }
    v11 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v11)
    {
      v12 = v3[6];
      if (!v12)
      {
        v12 = operator new();
        this = (uint64_t *)CoreML::Specification::BoxCoordinatesMode::BoxCoordinatesMode((CoreML::Specification::BoxCoordinatesMode *)v12);
        v3[6] = v12;
        v11 = (uint64_t *)*((_QWORD *)a2 + 6);
      }
      if (v11)
        v13 = v11;
      else
        v13 = &CoreML::Specification::_BoxCoordinatesMode_default_instance_;
      v14 = v13[1];
      if ((v14 & 1) != 0)
        this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)(v12 + 8), v14 & 0xFFFFFFFFFFFFFFFELL);
      v15 = *((_DWORD *)v13 + 4);
      if (v15)
        *(_DWORD *)(v12 + 16) = v15;
    }
  }
  if (*((_BYTE *)a2 + 56))
    *((_BYTE *)v3 + 56) = 1;
  v16 = *((float *)a2 + 15);
  if (v16 != 0.0)
    *((float *)v3 + 15) = v16;
  return this;
}

void sub_21801985C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::UnaryFunctionLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_unary(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::UnaryFunctionLayerParams *v2;

  if (*((_DWORD *)this + 35) == 220)
    return (CoreML::Specification::UnaryFunctionLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 220;
  v2 = (CoreML::Specification::UnaryFunctionLayerParams *)operator new();
  CoreML::Specification::UnaryFunctionLayerParams::UnaryFunctionLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_2180198EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40825B58B5);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::UnaryFunctionLayerParams::MergeFrom(std::string *this, const CoreML::Specification::UnaryFunctionLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  v6 = *((float *)a2 + 5);
  if (v6 != 0.0)
    *((float *)&v3->__r_.__value_.__r.__words[2] + 1) = v6;
  v7 = *((float *)a2 + 6);
  if (v7 != 0.0)
    *(float *)&v3[1].__r_.__value_.__l.__data_ = v7;
  v8 = *((float *)a2 + 7);
  if (v8 != 0.0)
    *((float *)v3[1].__r_.__value_.__r.__words + 1) = v8;
  v9 = *((float *)a2 + 8);
  if (v9 != 0.0)
    *(float *)&v3[1].__r_.__value_.__r.__words[1] = v9;
  return this;
}

CoreML::Specification::AddLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_add(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::AddLayerParams *v2;

  if (*((_DWORD *)this + 35) == 230)
    return (CoreML::Specification::AddLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 230;
  v2 = (CoreML::Specification::AddLayerParams *)operator new();
  CoreML::Specification::AddLayerParams::AddLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_2180199F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MultiplyLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_multiply(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::MultiplyLayerParams *v2;

  if (*((_DWORD *)this + 35) == 231)
    return (CoreML::Specification::MultiplyLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 231;
  v2 = (CoreML::Specification::MultiplyLayerParams *)operator new();
  CoreML::Specification::MultiplyLayerParams::MultiplyLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218019A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::AverageLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_average(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::AverageLayerParams *v2;

  if (*((_DWORD *)this + 35) == 240)
    return (CoreML::Specification::AverageLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 240;
  v2 = (CoreML::Specification::AverageLayerParams *)operator new();
  CoreML::Specification::AverageLayerParams::AverageLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218019B10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::ScaleLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_scale(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ScaleLayerParams *v2;

  if (*((_DWORD *)this + 35) == 245)
    return (CoreML::Specification::ScaleLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 245;
  v2 = (CoreML::Specification::ScaleLayerParams *)operator new();
  CoreML::Specification::ScaleLayerParams::ScaleLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218019B9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40771A4C38);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ScaleLayerParams::MergeFrom(CoreML::Specification::ScaleLayerParams *this, const CoreML::Specification::ScaleLayerParams *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  const CoreML::Specification::WeightParams *v7;
  CoreML::Specification::WeightParams *v8;
  const CoreML::Specification::WeightParams *v9;
  const CoreML::Specification::WeightParams *v10;
  CoreML::Specification::WeightParams *v11;
  const CoreML::Specification::WeightParams *v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 4, *((_DWORD *)this + 4) + v5);
    memcpy((void *)(*((_QWORD *)this + 3) + 8 * *((int *)this + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 10, *((_DWORD *)this + 10) + v6);
    memcpy((void *)(*((_QWORD *)this + 6) + 8 * *((int *)this + 10) + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
  }
  if (a2 != (const CoreML::Specification::ScaleLayerParams *)&CoreML::Specification::_ScaleLayerParams_default_instance_)
  {
    v7 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 8);
    if (v7)
    {
      v8 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 8);
      if (!v8)
      {
        v8 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v8);
        *((_QWORD *)this + 8) = v8;
        v7 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 8);
      }
      if (v7)
        v9 = v7;
      else
        v9 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v8, v9);
    }
    v10 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 9);
    if (v10)
    {
      v11 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 9);
      if (!v11)
      {
        v11 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v11);
        *((_QWORD *)this + 9) = v11;
        v10 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 9);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v11, v12);
    }
  }
  if (*((_BYTE *)a2 + 80))
    *((_BYTE *)this + 80) = 1;
}

void sub_218019D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::BiasLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_bias(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::BiasLayerParams *v2;

  if (*((_DWORD *)this + 35) == 250)
    return (CoreML::Specification::BiasLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 250;
  v2 = (CoreML::Specification::BiasLayerParams *)operator new();
  CoreML::Specification::BiasLayerParams::BiasLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218019DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40E853882FLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BiasLayerParams::MergeFrom(CoreML::Specification::BiasLayerParams *this, const CoreML::Specification::BiasLayerParams *a2)
{
  uint64_t v4;
  int v5;
  const CoreML::Specification::WeightParams *v6;
  CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 4, *((_DWORD *)this + 4) + v5);
    memcpy((void *)(*((_QWORD *)this + 3) + 8 * *((int *)this + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  if (a2 != (const CoreML::Specification::BiasLayerParams *)&CoreML::Specification::_BiasLayerParams_default_instance_)
  {
    v6 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v7);
        *((_QWORD *)this + 5) = v7;
        v6 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v7, v8);
    }
  }
}

void sub_218019F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::MaxLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_max(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::MaxLayerParams *v2;

  if (*((_DWORD *)this + 35) == 260)
    return (CoreML::Specification::MaxLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 260;
  v2 = (CoreML::Specification::MaxLayerParams *)operator new();
  CoreML::Specification::MaxLayerParams::MaxLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218019F8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::MinLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_min(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::MinLayerParams *v2;

  if (*((_DWORD *)this + 35) == 261)
    return (CoreML::Specification::MinLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 261;
  v2 = (CoreML::Specification::MinLayerParams *)operator new();
  CoreML::Specification::MinLayerParams::MinLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A018(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::DotProductLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_dot(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::DotProductLayerParams *v2;

  if (*((_DWORD *)this + 35) == 270)
    return (CoreML::Specification::DotProductLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 270;
  v2 = (CoreML::Specification::DotProductLayerParams *)operator new();
  CoreML::Specification::DotProductLayerParams::DotProductLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A0A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::DotProductLayerParams::MergeFrom(std::string *this, const CoreML::Specification::DotProductLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (*((_BYTE *)a2 + 16))
    v3->__r_.__value_.__s.__data_[16] = 1;
  return this;
}

CoreML::Specification::ReduceLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reduce(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceLayerParams *v2;

  if (*((_DWORD *)this + 35) == 280)
    return (CoreML::Specification::ReduceLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 280;
  v2 = (CoreML::Specification::ReduceLayerParams *)operator new();
  CoreML::Specification::ReduceLayerParams::ReduceLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::ReduceLayerParams::MergeFrom(std::string *this, const CoreML::Specification::ReduceLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  float v6;
  int v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  v6 = *((float *)a2 + 5);
  if (v6 != 0.0)
    *((float *)&v3->__r_.__value_.__r.__words[2] + 1) = v6;
  v7 = *((_DWORD *)a2 + 6);
  if (v7)
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v7;
  return this;
}

CoreML::Specification::LoadConstantLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_loadconstant(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LoadConstantLayerParams *v2;

  if (*((_DWORD *)this + 35) == 290)
    return (CoreML::Specification::LoadConstantLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 290;
  v2 = (CoreML::Specification::LoadConstantLayerParams *)operator new();
  CoreML::Specification::LoadConstantLayerParams::LoadConstantLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A25C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40E853882FLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LoadConstantLayerParams::MergeFrom(CoreML::Specification::LoadConstantLayerParams *this, const CoreML::Specification::LoadConstantLayerParams *a2)
{
  uint64_t v4;
  int v5;
  const CoreML::Specification::WeightParams *v6;
  CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 4, *((_DWORD *)this + 4) + v5);
    memcpy((void *)(*((_QWORD *)this + 3) + 8 * *((int *)this + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  if (a2 != (const CoreML::Specification::LoadConstantLayerParams *)&CoreML::Specification::_LoadConstantLayerParams_default_instance_)
  {
    v6 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v7);
        *((_QWORD *)this + 5) = v7;
        v6 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v7, v8);
    }
  }
}

void sub_21801A378(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReshapeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reshape(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReshapeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 300)
    return (CoreML::Specification::ReshapeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 300;
  v2 = (CoreML::Specification::ReshapeLayerParams *)operator new();
  CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A404(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40EA59D502);
  _Unwind_Resume(a1);
}

CoreML::Specification::FlattenLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_flatten(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::FlattenLayerParams *v2;

  if (*((_DWORD *)this + 35) == 301)
    return (CoreML::Specification::FlattenLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 301;
  v2 = (CoreML::Specification::FlattenLayerParams *)operator new();
  CoreML::Specification::FlattenLayerParams::FlattenLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A490(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::FlattenLayerParams::MergeFrom(std::string *this, const CoreML::Specification::FlattenLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  return this;
}

CoreML::Specification::PermuteLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_permute(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::PermuteLayerParams *v2;

  if (*((_DWORD *)this + 35) == 310)
    return (CoreML::Specification::PermuteLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 310;
  v2 = (CoreML::Specification::PermuteLayerParams *)operator new();
  CoreML::Specification::PermuteLayerParams::PermuteLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A55C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::ConcatLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_concat(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ConcatLayerParams *v2;

  if (*((_DWORD *)this + 35) == 320)
    return (CoreML::Specification::ConcatLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 320;
  v2 = (CoreML::Specification::ConcatLayerParams *)operator new();
  CoreML::Specification::ConcatLayerParams::ConcatLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A5E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

CoreML::Specification::SplitLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_split(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SplitLayerParams *v2;

  if (*((_DWORD *)this + 35) == 330)
    return (CoreML::Specification::SplitLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 330;
  v2 = (CoreML::Specification::SplitLayerParams *)operator new();
  CoreML::Specification::SplitLayerParams::SplitLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A674(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::SplitLayerParams::MergeFrom(std::string *this, const CoreML::Specification::SplitLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  return this;
}

CoreML::Specification::SequenceRepeatLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_sequencerepeat(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SequenceRepeatLayerParams *v2;

  if (*((_DWORD *)this + 35) == 340)
    return (CoreML::Specification::SequenceRepeatLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 340;
  v2 = (CoreML::Specification::SequenceRepeatLayerParams *)operator new();
  CoreML::Specification::SequenceRepeatLayerParams::SequenceRepeatLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A740(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReorganizeDataLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reorganizedata(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReorganizeDataLayerParams *v2;

  if (*((_DWORD *)this + 35) == 345)
    return (CoreML::Specification::ReorganizeDataLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 345;
  v2 = (CoreML::Specification::ReorganizeDataLayerParams *)operator new();
  CoreML::Specification::ReorganizeDataLayerParams::ReorganizeDataLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A7CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::ReorganizeDataLayerParams::MergeFrom(std::string *this, const CoreML::Specification::ReorganizeDataLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  int v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v6;
  return this;
}

CoreML::Specification::SliceLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_slice(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SliceLayerParams *v2;

  if (*((_DWORD *)this + 35) == 350)
    return (CoreML::Specification::SliceLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 350;
  v2 = (CoreML::Specification::SliceLayerParams *)operator new();
  CoreML::Specification::SliceLayerParams::SliceLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A8A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40DAA165ECLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::SliceLayerParams::MergeFrom(std::string *this, const CoreML::Specification::SliceLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  int v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((_QWORD *)a2 + 3);
  if (v6)
    v3[1].__r_.__value_.__r.__words[0] = v6;
  v7 = *((_QWORD *)a2 + 4);
  if (v7)
    v3[1].__r_.__value_.__l.__size_ = v7;
  v8 = *((_DWORD *)a2 + 10);
  if (v8)
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) = v8;
  return this;
}

CoreML::Specification::SimpleRecurrentLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_simplerecurrent(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SimpleRecurrentLayerParams *v2;

  if (*((_DWORD *)this + 35) == 400)
    return (CoreML::Specification::SimpleRecurrentLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 400;
  v2 = (CoreML::Specification::SimpleRecurrentLayerParams *)operator new();
  CoreML::Specification::SimpleRecurrentLayerParams::SimpleRecurrentLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801A994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4089F1CBADLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SimpleRecurrentLayerParams::MergeFrom(CoreML::Specification::SimpleRecurrentLayerParams *this, const CoreML::Specification::SimpleRecurrentLayerParams *a2)
{
  uint64_t v4;
  const CoreML::Specification::ActivationParams *v5;
  CoreML::Specification::ActivationParams *v6;
  const CoreML::Specification::ActivationParams *v7;
  const CoreML::Specification::WeightParams *v8;
  CoreML::Specification::WeightParams *v9;
  const CoreML::Specification::WeightParams *v10;
  const CoreML::Specification::WeightParams *v11;
  CoreML::Specification::WeightParams *v12;
  const CoreML::Specification::WeightParams *v13;
  const CoreML::Specification::WeightParams *v14;
  CoreML::Specification::WeightParams *v15;
  const CoreML::Specification::WeightParams *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::SimpleRecurrentLayerParams *)&CoreML::Specification::_SimpleRecurrentLayerParams_default_instance_)
  {
    v5 = (const CoreML::Specification::ActivationParams *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::ActivationParams *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::ActivationParams *)operator new();
        CoreML::Specification::ActivationParams::ActivationParams(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::ActivationParams *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::ActivationParams *)&CoreML::Specification::_ActivationParams_default_instance_;
      CoreML::Specification::ActivationParams::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v9, v10);
    }
    v11 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v12);
        *((_QWORD *)this + 4) = v12;
        v11 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v12, v13);
    }
    v14 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v15);
        *((_QWORD *)this + 5) = v15;
        v14 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v15, v16);
    }
  }
  v17 = *((_QWORD *)a2 + 6);
  if (v17)
    *((_QWORD *)this + 6) = v17;
  v18 = *((_QWORD *)a2 + 7);
  if (v18)
    *((_QWORD *)this + 7) = v18;
  if (*((_BYTE *)a2 + 64))
    *((_BYTE *)this + 64) = 1;
  if (*((_BYTE *)a2 + 65))
    *((_BYTE *)this + 65) = 1;
  if (*((_BYTE *)a2 + 66))
    *((_BYTE *)this + 66) = 1;
}

void sub_21801AB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::GRULayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_gru(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::GRULayerParams *v2;

  if (*((_DWORD *)this + 35) == 410)
    return (CoreML::Specification::GRULayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 410;
  v2 = (CoreML::Specification::GRULayerParams *)operator new();
  CoreML::Specification::GRULayerParams::GRULayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801AC24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C409E07629ELL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::GRULayerParams::MergeFrom(CoreML::Specification::GRULayerParams *this, const CoreML::Specification::GRULayerParams *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::ActivationParams **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  const CoreML::Specification::WeightParams *v10;
  CoreML::Specification::WeightParams *v11;
  const CoreML::Specification::WeightParams *v12;
  const CoreML::Specification::WeightParams *v13;
  CoreML::Specification::WeightParams *v14;
  const CoreML::Specification::WeightParams *v15;
  const CoreML::Specification::WeightParams *v16;
  CoreML::Specification::WeightParams *v17;
  const CoreML::Specification::WeightParams *v18;
  const CoreML::Specification::WeightParams *v19;
  CoreML::Specification::WeightParams *v20;
  const CoreML::Specification::WeightParams *v21;
  const CoreML::Specification::WeightParams *v22;
  CoreML::Specification::WeightParams *v23;
  const CoreML::Specification::WeightParams *v24;
  const CoreML::Specification::WeightParams *v25;
  CoreML::Specification::WeightParams *v26;
  const CoreML::Specification::WeightParams *v27;
  const CoreML::Specification::WeightParams *v28;
  CoreML::Specification::WeightParams *v29;
  const CoreML::Specification::WeightParams *v30;
  const CoreML::Specification::WeightParams *v31;
  CoreML::Specification::WeightParams *v32;
  const CoreML::Specification::WeightParams *v33;
  const CoreML::Specification::WeightParams *v34;
  CoreML::Specification::WeightParams *v35;
  const CoreML::Specification::WeightParams *v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::ActivationParams **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::GRULayerParams *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::ActivationParams **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  if (a2 != (const CoreML::Specification::GRULayerParams *)&CoreML::Specification::_GRULayerParams_default_instance_)
  {
    v10 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
    if (v10)
    {
      v11 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 5);
      if (!v11)
      {
        v11 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v11);
        *((_QWORD *)this + 5) = v11;
        v10 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v11, v12);
    }
    v13 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 6);
    if (v13)
    {
      v14 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 6);
      if (!v14)
      {
        v14 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v14);
        *((_QWORD *)this + 6) = v14;
        v13 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 6);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v14, v15);
    }
    v16 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 7);
    if (v16)
    {
      v17 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 7);
      if (!v17)
      {
        v17 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v17);
        *((_QWORD *)this + 7) = v17;
        v16 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 7);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v17, v18);
    }
    v19 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 8);
    if (v19)
    {
      v20 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 8);
      if (!v20)
      {
        v20 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v20);
        *((_QWORD *)this + 8) = v20;
        v19 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 8);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v20, v21);
    }
    v22 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 9);
    if (v22)
    {
      v23 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 9);
      if (!v23)
      {
        v23 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v23);
        *((_QWORD *)this + 9) = v23;
        v22 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 9);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v23, v24);
    }
    v25 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 10);
    if (v25)
    {
      v26 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 10);
      if (!v26)
      {
        v26 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v26);
        *((_QWORD *)this + 10) = v26;
        v25 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 10);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v26, v27);
    }
    v28 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 11);
    if (v28)
    {
      v29 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 11);
      if (!v29)
      {
        v29 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v29);
        *((_QWORD *)this + 11) = v29;
        v28 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 11);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v29, v30);
    }
    v31 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 12);
    if (v31)
    {
      v32 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 12);
      if (!v32)
      {
        v32 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v32);
        *((_QWORD *)this + 12) = v32;
        v31 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 12);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v32, v33);
    }
    v34 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 13);
    if (v34)
    {
      v35 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 13);
      if (!v35)
      {
        v35 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v35);
        *((_QWORD *)this + 13) = v35;
        v34 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 13);
      }
      if (v34)
        v36 = v34;
      else
        v36 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v35, v36);
    }
  }
  v37 = *((_QWORD *)a2 + 14);
  if (v37)
    *((_QWORD *)this + 14) = v37;
  v38 = *((_QWORD *)a2 + 15);
  if (v38)
    *((_QWORD *)this + 15) = v38;
  if (*((_BYTE *)a2 + 128))
    *((_BYTE *)this + 128) = 1;
  if (*((_BYTE *)a2 + 129))
    *((_BYTE *)this + 129) = 1;
  if (*((_BYTE *)a2 + 130))
    *((_BYTE *)this + 130) = 1;
}

void sub_21801AFD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::UniDirectionalLSTMLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_unidirectionallstm(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::UniDirectionalLSTMLayerParams *v2;

  if (*((_DWORD *)this + 35) == 420)
    return (CoreML::Specification::UniDirectionalLSTMLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 420;
  v2 = (CoreML::Specification::UniDirectionalLSTMLayerParams *)operator new();
  CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801B084(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B3944273);
  _Unwind_Resume(a1);
}

void CoreML::Specification::UniDirectionalLSTMLayerParams::MergeFrom(CoreML::Specification::UniDirectionalLSTMLayerParams *this, const CoreML::Specification::UniDirectionalLSTMLayerParams *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::ActivationParams **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  const CoreML::Specification::LSTMParams *v10;
  CoreML::Specification::LSTMParams *v11;
  const CoreML::Specification::LSTMParams *v12;
  const CoreML::Specification::LSTMWeightParams *v13;
  CoreML::Specification::LSTMWeightParams *v14;
  const CoreML::Specification::LSTMWeightParams *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::ActivationParams **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::UniDirectionalLSTMLayerParams *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::ActivationParams **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  if (a2 != (const CoreML::Specification::UniDirectionalLSTMLayerParams *)&CoreML::Specification::_UniDirectionalLSTMLayerParams_default_instance_)
  {
    v10 = (const CoreML::Specification::LSTMParams *)*((_QWORD *)a2 + 5);
    if (v10)
    {
      v11 = (CoreML::Specification::LSTMParams *)*((_QWORD *)this + 5);
      if (!v11)
      {
        v11 = (CoreML::Specification::LSTMParams *)operator new();
        CoreML::Specification::LSTMParams::LSTMParams(v11);
        *((_QWORD *)this + 5) = v11;
        v10 = (const CoreML::Specification::LSTMParams *)*((_QWORD *)a2 + 5);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
      CoreML::Specification::LSTMParams::MergeFrom((std::string *)v11, v12);
    }
    v13 = (const CoreML::Specification::LSTMWeightParams *)*((_QWORD *)a2 + 6);
    if (v13)
    {
      v14 = (CoreML::Specification::LSTMWeightParams *)*((_QWORD *)this + 6);
      if (!v14)
      {
        v14 = (CoreML::Specification::LSTMWeightParams *)operator new();
        CoreML::Specification::LSTMWeightParams::LSTMWeightParams(v14);
        *((_QWORD *)this + 6) = v14;
        v13 = (const CoreML::Specification::LSTMWeightParams *)*((_QWORD *)a2 + 6);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (const CoreML::Specification::LSTMWeightParams *)&CoreML::Specification::_LSTMWeightParams_default_instance_;
      CoreML::Specification::LSTMWeightParams::MergeFrom(v14, v15);
    }
  }
  v16 = *((_QWORD *)a2 + 7);
  if (v16)
    *((_QWORD *)this + 7) = v16;
  v17 = *((_QWORD *)a2 + 8);
  if (v17)
    *((_QWORD *)this + 8) = v17;
  if (*((_BYTE *)a2 + 72))
    *((_BYTE *)this + 72) = 1;
}

void sub_21801B228(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C405455452ELL);
  _Unwind_Resume(a1);
}

CoreML::Specification::BiDirectionalLSTMLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_bidirectionallstm(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::BiDirectionalLSTMLayerParams *v2;

  if (*((_DWORD *)this + 35) == 430)
    return (CoreML::Specification::BiDirectionalLSTMLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 430;
  v2 = (CoreML::Specification::BiDirectionalLSTMLayerParams *)operator new();
  CoreML::Specification::BiDirectionalLSTMLayerParams::BiDirectionalLSTMLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801B2D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C402A225981);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BiDirectionalLSTMLayerParams::MergeFrom(CoreML::Specification::BiDirectionalLSTMLayerParams *this, const CoreML::Specification::BiDirectionalLSTMLayerParams *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::ActivationParams **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  signed int v10;
  CoreML::Specification::ActivationParams **v11;
  unsigned int *v12;
  int v13;
  int *v14;
  signed int v15;
  CoreML::Specification::LSTMWeightParams **v16;
  unsigned int *v17;
  int v18;
  int *v19;
  const CoreML::Specification::LSTMParams *v20;
  CoreML::Specification::LSTMParams *v21;
  const CoreML::Specification::LSTMParams *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::ActivationParams **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::BiDirectionalLSTMLayerParams *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::ActivationParams **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    v11 = (CoreML::Specification::ActivationParams **)(*((_QWORD *)a2 + 7) + 8);
    v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::BiDirectionalLSTMLayerParams *)((char *)this + 40), *((_DWORD *)a2 + 12));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ActivationParams>::TypeHandler>((_tc_google::protobuf::Arena **)this + 5, (CoreML::Specification::ActivationParams **)v12, v11, v10, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    v13 = *((_DWORD *)this + 12) + v10;
    *((_DWORD *)this + 12) = v13;
    v14 = (int *)*((_QWORD *)this + 7);
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    v16 = (CoreML::Specification::LSTMWeightParams **)(*((_QWORD *)a2 + 10) + 8);
    v17 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::BiDirectionalLSTMLayerParams *)((char *)this + 64), *((_DWORD *)a2 + 18));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::LSTMWeightParams>::TypeHandler>((_tc_google::protobuf::Arena **)this + 8, (CoreML::Specification::LSTMWeightParams **)v17, v16, v15, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    v18 = *((_DWORD *)this + 18) + v15;
    *((_DWORD *)this + 18) = v18;
    v19 = (int *)*((_QWORD *)this + 10);
    if (*v19 < v18)
      *v19 = v18;
  }
  if (a2 != (const CoreML::Specification::BiDirectionalLSTMLayerParams *)&CoreML::Specification::_BiDirectionalLSTMLayerParams_default_instance_)
  {
    v20 = (const CoreML::Specification::LSTMParams *)*((_QWORD *)a2 + 11);
    if (v20)
    {
      v21 = (CoreML::Specification::LSTMParams *)*((_QWORD *)this + 11);
      if (!v21)
      {
        v21 = (CoreML::Specification::LSTMParams *)operator new();
        CoreML::Specification::LSTMParams::LSTMParams(v21);
        *((_QWORD *)this + 11) = v21;
        v20 = (const CoreML::Specification::LSTMParams *)*((_QWORD *)a2 + 11);
      }
      if (v20)
        v22 = v20;
      else
        v22 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
      CoreML::Specification::LSTMParams::MergeFrom((std::string *)v21, v22);
    }
  }
  v23 = *((_QWORD *)a2 + 12);
  if (v23)
    *((_QWORD *)this + 12) = v23;
  v24 = *((_QWORD *)a2 + 13);
  if (v24)
    *((_QWORD *)this + 13) = v24;
}

void sub_21801B4DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E45386B4);
  _Unwind_Resume(a1);
}

CoreML::Specification::CustomLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_custom(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::CustomLayerParams *v2;

  if (*((_DWORD *)this + 35) == 500)
    return (CoreML::Specification::CustomLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 500;
  v2 = (CoreML::Specification::CustomLayerParams *)operator new();
  CoreML::Specification::CustomLayerParams::CustomLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801B568(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B612A46ELL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CustomLayerParams::MergeFrom(CoreML::Specification::CustomLayerParams *this, const CoreML::Specification::CustomLayerParams *a2)
{
  uint64_t v4;
  signed int v5;
  CoreML::Specification::WeightParams **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::string *v13;
  std::string **v14;
  std::string *v15;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    v6 = (CoreML::Specification::WeightParams **)(*((_QWORD *)a2 + 4) + 8);
    v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::CustomLayerParams *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::WeightParams>::TypeHandler>((_tc_google::protobuf::Arena **)this + 2, (CoreML::Specification::WeightParams **)v7, v6, v5, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    v8 = *((_DWORD *)this + 6) + v5;
    *((_DWORD *)this + 6) = v8;
    v9 = (int *)*((_QWORD *)this + 4);
    if (*v9 < v8)
      *v9 = v8;
  }
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::CustomLayerParams_CustomLayerParamValue,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t)this + 40, (uint64_t)a2 + 40);
  v10 = *((_QWORD *)a2 + 9);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_14;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 9);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, v10);
    else
      std::string::operator=(*((std::string **)this + 9), (const std::string *)v10);
  }
LABEL_14:
  v12 = *((_QWORD *)a2 + 10);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      return;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    return;
  }
  v15 = (std::string *)*((_QWORD *)this + 10);
  v14 = (std::string **)((char *)this + 80);
  v13 = v15;
  if (v15 != (std::string *)v12)
  {
    if (v13 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v14, v12);
    else
      std::string::operator=(v13, (const std::string *)v12);
  }
}

CoreML::Specification::CopyLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_copy(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::CopyLayerParams *v2;

  if (*((_DWORD *)this + 35) == 600)
    return (CoreML::Specification::CopyLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 600;
  v2 = (CoreML::Specification::CopyLayerParams *)operator new();
  CoreML::Specification::CopyLayerParams::CopyLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801B760(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::BranchLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_branch(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::BranchLayerParams *v2;

  if (*((_DWORD *)this + 35) == 605)
    return (CoreML::Specification::BranchLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 605;
  v2 = (CoreML::Specification::BranchLayerParams *)operator new();
  CoreML::Specification::BranchLayerParams::BranchLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801B7EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::BranchLayerParams::MergeFrom(std::string *this, const CoreML::Specification::BranchLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  const CoreML::Specification::NeuralNetwork *v5;
  CoreML::Specification::NeuralNetwork *v6;
  const CoreML::Specification::NeuralNetwork *v7;
  const CoreML::Specification::NeuralNetwork *v8;
  CoreML::Specification::NeuralNetwork *data;
  const CoreML::Specification::NeuralNetwork *v10;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::BranchLayerParams *)&CoreML::Specification::_BranchLayerParams_default_instance_)
  {
    v5 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::NeuralNetwork *)v3->__r_.__value_.__r.__words[2];
      if (!v6)
      {
        v6 = (CoreML::Specification::NeuralNetwork *)operator new();
        CoreML::Specification::NeuralNetwork::NeuralNetwork(v6);
        v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v6;
        v5 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_;
      this = (std::string *)CoreML::Specification::NeuralNetwork::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      data = (CoreML::Specification::NeuralNetwork *)v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (CoreML::Specification::NeuralNetwork *)operator new();
        CoreML::Specification::NeuralNetwork::NeuralNetwork(data);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
        v8 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_;
      return (std::string *)CoreML::Specification::NeuralNetwork::MergeFrom(data, v10);
    }
  }
  return this;
}

void sub_21801B900(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40280AC348);
  _Unwind_Resume(a1);
}

CoreML::Specification::LoopLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_loop(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LoopLayerParams *v2;

  if (*((_DWORD *)this + 35) == 615)
    return (CoreML::Specification::LoopLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 615;
  v2 = (CoreML::Specification::LoopLayerParams *)operator new();
  CoreML::Specification::LoopLayerParams::LoopLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801B990(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40FB89D240);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LoopLayerParams::MergeFrom(CoreML::Specification::LoopLayerParams *this, const CoreML::Specification::LoopLayerParams *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  const CoreML::Specification::NeuralNetwork *v7;
  CoreML::Specification::NeuralNetwork *v8;
  const CoreML::Specification::NeuralNetwork *v9;
  const CoreML::Specification::NeuralNetwork *v10;
  CoreML::Specification::NeuralNetwork *v11;
  const CoreML::Specification::NeuralNetwork *v12;
  uint64_t v13;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v5 + 23))
  {
    goto LABEL_11;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 2);
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string)
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v5);
  }
LABEL_11:
  if (a2 != (const CoreML::Specification::LoopLayerParams *)&CoreML::Specification::_LoopLayerParams_default_instance_)
  {
    v7 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 3);
    if (v7)
    {
      v8 = (CoreML::Specification::NeuralNetwork *)*((_QWORD *)this + 3);
      if (!v8)
      {
        v8 = (CoreML::Specification::NeuralNetwork *)operator new();
        CoreML::Specification::NeuralNetwork::NeuralNetwork(v8);
        *((_QWORD *)this + 3) = v8;
        v7 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 3);
      }
      if (v7)
        v9 = v7;
      else
        v9 = (const CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_;
      CoreML::Specification::NeuralNetwork::MergeFrom(v8, v9);
    }
    v10 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (CoreML::Specification::NeuralNetwork *)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (CoreML::Specification::NeuralNetwork *)operator new();
        CoreML::Specification::NeuralNetwork::NeuralNetwork(v11);
        *((_QWORD *)this + 4) = v11;
        v10 = (const CoreML::Specification::NeuralNetwork *)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const CoreML::Specification::NeuralNetwork *)&CoreML::Specification::_NeuralNetwork_default_instance_;
      CoreML::Specification::NeuralNetwork::MergeFrom(v11, v12);
    }
  }
  v13 = *((_QWORD *)a2 + 5);
  if (v13)
    *((_QWORD *)this + 5) = v13;
}

void sub_21801BAF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40280AC348);
  _Unwind_Resume(a1);
}

CoreML::Specification::LoopBreakLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_loopbreak(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LoopBreakLayerParams *v2;

  if (*((_DWORD *)this + 35) == 620)
    return (CoreML::Specification::LoopBreakLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 620;
  v2 = (CoreML::Specification::LoopBreakLayerParams *)operator new();
  CoreML::Specification::LoopBreakLayerParams::LoopBreakLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801BB84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::LoopContinueLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_loopcontinue(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LoopContinueLayerParams *v2;

  if (*((_DWORD *)this + 35) == 625)
    return (CoreML::Specification::LoopContinueLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 625;
  v2 = (CoreML::Specification::LoopContinueLayerParams *)operator new();
  CoreML::Specification::LoopContinueLayerParams::LoopContinueLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801BC10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::RangeStaticLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_rangestatic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RangeStaticLayerParams *v2;

  if (*((_DWORD *)this + 35) == 635)
    return (CoreML::Specification::RangeStaticLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 635;
  v2 = (CoreML::Specification::RangeStaticLayerParams *)operator new();
  CoreML::Specification::RangeStaticLayerParams::RangeStaticLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801BC9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::RangeStaticLayerParams::MergeFrom(std::string *this, const CoreML::Specification::RangeStaticLayerParams *a2)
{
  float *v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;

  v3 = (float *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((float *)a2 + 4);
  if (v5 != 0.0)
    v3[4] = v5;
  v6 = *((float *)a2 + 5);
  if (v6 != 0.0)
    v3[5] = v6;
  v7 = *((float *)a2 + 6);
  if (v7 != 0.0)
    v3[6] = v7;
  return this;
}

CoreML::Specification::RangeDynamicLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_rangedynamic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RangeDynamicLayerParams *v2;

  if (*((_DWORD *)this + 35) == 640)
    return (CoreML::Specification::RangeDynamicLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 640;
  v2 = (CoreML::Specification::RangeDynamicLayerParams *)operator new();
  CoreML::Specification::RangeDynamicLayerParams::RangeDynamicLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801BD8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::ClipLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_clip(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ClipLayerParams *v2;

  if (*((_DWORD *)this + 35) == 660)
    return (CoreML::Specification::ClipLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 660;
  v2 = (CoreML::Specification::ClipLayerParams *)operator new();
  CoreML::Specification::ClipLayerParams::ClipLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801BE18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::CeilLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_ceil(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::CeilLayerParams *v2;

  if (*((_DWORD *)this + 35) == 665)
    return (CoreML::Specification::CeilLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 665;
  v2 = (CoreML::Specification::CeilLayerParams *)operator new();
  CoreML::Specification::CeilLayerParams::CeilLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801BEA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::FloorLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_floor(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::FloorLayerParams *v2;

  if (*((_DWORD *)this + 35) == 670)
    return (CoreML::Specification::FloorLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 670;
  v2 = (CoreML::Specification::FloorLayerParams *)operator new();
  CoreML::Specification::FloorLayerParams::FloorLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801BF30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::SignLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_sign(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SignLayerParams *v2;

  if (*((_DWORD *)this + 35) == 680)
    return (CoreML::Specification::SignLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 680;
  v2 = (CoreML::Specification::SignLayerParams *)operator new();
  CoreML::Specification::SignLayerParams::SignLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801BFBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::RoundLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_round(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RoundLayerParams *v2;

  if (*((_DWORD *)this + 35) == 685)
    return (CoreML::Specification::RoundLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 685;
  v2 = (CoreML::Specification::RoundLayerParams *)operator new();
  CoreML::Specification::RoundLayerParams::RoundLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::Exp2LayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_exp2(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::Exp2LayerParams *v2;

  if (*((_DWORD *)this + 35) == 700)
    return (CoreML::Specification::Exp2LayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 700;
  v2 = (CoreML::Specification::Exp2LayerParams *)operator new();
  CoreML::Specification::Exp2LayerParams::Exp2LayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::SinLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_sin(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SinLayerParams *v2;

  if (*((_DWORD *)this + 35) == 710)
    return (CoreML::Specification::SinLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 710;
  v2 = (CoreML::Specification::SinLayerParams *)operator new();
  CoreML::Specification::SinLayerParams::SinLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C160(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::CosLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_cos(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::CosLayerParams *v2;

  if (*((_DWORD *)this + 35) == 715)
    return (CoreML::Specification::CosLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 715;
  v2 = (CoreML::Specification::CosLayerParams *)operator new();
  CoreML::Specification::CosLayerParams::CosLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C1EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::TanLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_tan(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::TanLayerParams *v2;

  if (*((_DWORD *)this + 35) == 720)
    return (CoreML::Specification::TanLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 720;
  v2 = (CoreML::Specification::TanLayerParams *)operator new();
  CoreML::Specification::TanLayerParams::TanLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C278(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::AsinLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_asin(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::AsinLayerParams *v2;

  if (*((_DWORD *)this + 35) == 730)
    return (CoreML::Specification::AsinLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 730;
  v2 = (CoreML::Specification::AsinLayerParams *)operator new();
  CoreML::Specification::AsinLayerParams::AsinLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C304(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::AcosLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_acos(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::AcosLayerParams *v2;

  if (*((_DWORD *)this + 35) == 735)
    return (CoreML::Specification::AcosLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 735;
  v2 = (CoreML::Specification::AcosLayerParams *)operator new();
  CoreML::Specification::AcosLayerParams::AcosLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C390(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::AtanLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_atan(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::AtanLayerParams *v2;

  if (*((_DWORD *)this + 35) == 740)
    return (CoreML::Specification::AtanLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 740;
  v2 = (CoreML::Specification::AtanLayerParams *)operator new();
  CoreML::Specification::AtanLayerParams::AtanLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C41C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::SinhLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_sinh(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SinhLayerParams *v2;

  if (*((_DWORD *)this + 35) == 750)
    return (CoreML::Specification::SinhLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 750;
  v2 = (CoreML::Specification::SinhLayerParams *)operator new();
  CoreML::Specification::SinhLayerParams::SinhLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C4A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoshLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_cosh(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::CoshLayerParams *v2;

  if (*((_DWORD *)this + 35) == 755)
    return (CoreML::Specification::CoshLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 755;
  v2 = (CoreML::Specification::CoshLayerParams *)operator new();
  CoreML::Specification::CoshLayerParams::CoshLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C534(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::TanhLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_tanh(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::TanhLayerParams *v2;

  if (*((_DWORD *)this + 35) == 760)
    return (CoreML::Specification::TanhLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 760;
  v2 = (CoreML::Specification::TanhLayerParams *)operator new();
  CoreML::Specification::TanhLayerParams::TanhLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C5C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::AsinhLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_asinh(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::AsinhLayerParams *v2;

  if (*((_DWORD *)this + 35) == 770)
    return (CoreML::Specification::AsinhLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 770;
  v2 = (CoreML::Specification::AsinhLayerParams *)operator new();
  CoreML::Specification::AsinhLayerParams::AsinhLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C64C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::AcoshLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_acosh(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::AcoshLayerParams *v2;

  if (*((_DWORD *)this + 35) == 775)
    return (CoreML::Specification::AcoshLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 775;
  v2 = (CoreML::Specification::AcoshLayerParams *)operator new();
  CoreML::Specification::AcoshLayerParams::AcoshLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C6D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::AtanhLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_atanh(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::AtanhLayerParams *v2;

  if (*((_DWORD *)this + 35) == 780)
    return (CoreML::Specification::AtanhLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 780;
  v2 = (CoreML::Specification::AtanhLayerParams *)operator new();
  CoreML::Specification::AtanhLayerParams::AtanhLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::ErfLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_erf(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ErfLayerParams *v2;

  if (*((_DWORD *)this + 35) == 790)
    return (CoreML::Specification::ErfLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 790;
  v2 = (CoreML::Specification::ErfLayerParams *)operator new();
  CoreML::Specification::ErfLayerParams::ErfLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C7F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::GeluLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_gelu(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::GeluLayerParams *v2;

  if (*((_DWORD *)this + 35) == 795)
    return (CoreML::Specification::GeluLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 795;
  v2 = (CoreML::Specification::GeluLayerParams *)operator new();
  CoreML::Specification::GeluLayerParams::GeluLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C87C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::EqualLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_equal(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::EqualLayerParams *v2;

  if (*((_DWORD *)this + 35) == 815)
    return (CoreML::Specification::EqualLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 815;
  v2 = (CoreML::Specification::EqualLayerParams *)operator new();
  CoreML::Specification::EqualLayerParams::EqualLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C908(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::NotEqualLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_notequal(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::NotEqualLayerParams *v2;

  if (*((_DWORD *)this + 35) == 820)
    return (CoreML::Specification::NotEqualLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 820;
  v2 = (CoreML::Specification::NotEqualLayerParams *)operator new();
  CoreML::Specification::NotEqualLayerParams::NotEqualLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801C994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::LessThanLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_lessthan(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LessThanLayerParams *v2;

  if (*((_DWORD *)this + 35) == 825)
    return (CoreML::Specification::LessThanLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 825;
  v2 = (CoreML::Specification::LessThanLayerParams *)operator new();
  CoreML::Specification::LessThanLayerParams::LessThanLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CA20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::LessEqualLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_lessequal(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LessEqualLayerParams *v2;

  if (*((_DWORD *)this + 35) == 827)
    return (CoreML::Specification::LessEqualLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 827;
  v2 = (CoreML::Specification::LessEqualLayerParams *)operator new();
  CoreML::Specification::LessEqualLayerParams::LessEqualLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CAAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::GreaterThanLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_greaterthan(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::GreaterThanLayerParams *v2;

  if (*((_DWORD *)this + 35) == 830)
    return (CoreML::Specification::GreaterThanLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 830;
  v2 = (CoreML::Specification::GreaterThanLayerParams *)operator new();
  CoreML::Specification::GreaterThanLayerParams::GreaterThanLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CB38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::GreaterEqualLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_greaterequal(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::GreaterEqualLayerParams *v2;

  if (*((_DWORD *)this + 35) == 832)
    return (CoreML::Specification::GreaterEqualLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 832;
  v2 = (CoreML::Specification::GreaterEqualLayerParams *)operator new();
  CoreML::Specification::GreaterEqualLayerParams::GreaterEqualLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CBC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::LogicalOrLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_logicalor(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LogicalOrLayerParams *v2;

  if (*((_DWORD *)this + 35) == 840)
    return (CoreML::Specification::LogicalOrLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 840;
  v2 = (CoreML::Specification::LogicalOrLayerParams *)operator new();
  CoreML::Specification::LogicalOrLayerParams::LogicalOrLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CC50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::LogicalXorLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_logicalxor(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LogicalXorLayerParams *v2;

  if (*((_DWORD *)this + 35) == 845)
    return (CoreML::Specification::LogicalXorLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 845;
  v2 = (CoreML::Specification::LogicalXorLayerParams *)operator new();
  CoreML::Specification::LogicalXorLayerParams::LogicalXorLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CCDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::LogicalNotLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_logicalnot(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LogicalNotLayerParams *v2;

  if (*((_DWORD *)this + 35) == 850)
    return (CoreML::Specification::LogicalNotLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 850;
  v2 = (CoreML::Specification::LogicalNotLayerParams *)operator new();
  CoreML::Specification::LogicalNotLayerParams::LogicalNotLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CD68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::LogicalAndLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_logicaland(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LogicalAndLayerParams *v2;

  if (*((_DWORD *)this + 35) == 855)
    return (CoreML::Specification::LogicalAndLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 855;
  v2 = (CoreML::Specification::LogicalAndLayerParams *)operator new();
  CoreML::Specification::LogicalAndLayerParams::LogicalAndLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CDF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::ModBroadcastableLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_modbroadcastable(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ModBroadcastableLayerParams *v2;

  if (*((_DWORD *)this + 35) == 865)
    return (CoreML::Specification::ModBroadcastableLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 865;
  v2 = (CoreML::Specification::ModBroadcastableLayerParams *)operator new();
  CoreML::Specification::ModBroadcastableLayerParams::ModBroadcastableLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CE80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::MinBroadcastableLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_minbroadcastable(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::MinBroadcastableLayerParams *v2;

  if (*((_DWORD *)this + 35) == 870)
    return (CoreML::Specification::MinBroadcastableLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 870;
  v2 = (CoreML::Specification::MinBroadcastableLayerParams *)operator new();
  CoreML::Specification::MinBroadcastableLayerParams::MinBroadcastableLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CF0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::MaxBroadcastableLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_maxbroadcastable(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::MaxBroadcastableLayerParams *v2;

  if (*((_DWORD *)this + 35) == 875)
    return (CoreML::Specification::MaxBroadcastableLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 875;
  v2 = (CoreML::Specification::MaxBroadcastableLayerParams *)operator new();
  CoreML::Specification::MaxBroadcastableLayerParams::MaxBroadcastableLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801CF98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::AddBroadcastableLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_addbroadcastable(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::AddBroadcastableLayerParams *v2;

  if (*((_DWORD *)this + 35) == 880)
    return (CoreML::Specification::AddBroadcastableLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 880;
  v2 = (CoreML::Specification::AddBroadcastableLayerParams *)operator new();
  CoreML::Specification::AddBroadcastableLayerParams::AddBroadcastableLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D024(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::PowBroadcastableLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_powbroadcastable(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::PowBroadcastableLayerParams *v2;

  if (*((_DWORD *)this + 35) == 885)
    return (CoreML::Specification::PowBroadcastableLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 885;
  v2 = (CoreML::Specification::PowBroadcastableLayerParams *)operator new();
  CoreML::Specification::PowBroadcastableLayerParams::PowBroadcastableLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D0B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::DivideBroadcastableLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_dividebroadcastable(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::DivideBroadcastableLayerParams *v2;

  if (*((_DWORD *)this + 35) == 890)
    return (CoreML::Specification::DivideBroadcastableLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 890;
  v2 = (CoreML::Specification::DivideBroadcastableLayerParams *)operator new();
  CoreML::Specification::DivideBroadcastableLayerParams::DivideBroadcastableLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D13C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::FloorDivBroadcastableLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_floordivbroadcastable(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::FloorDivBroadcastableLayerParams *v2;

  if (*((_DWORD *)this + 35) == 895)
    return (CoreML::Specification::FloorDivBroadcastableLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 895;
  v2 = (CoreML::Specification::FloorDivBroadcastableLayerParams *)operator new();
  CoreML::Specification::FloorDivBroadcastableLayerParams::FloorDivBroadcastableLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D1C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::MultiplyBroadcastableLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_multiplybroadcastable(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::MultiplyBroadcastableLayerParams *v2;

  if (*((_DWORD *)this + 35) == 900)
    return (CoreML::Specification::MultiplyBroadcastableLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 900;
  v2 = (CoreML::Specification::MultiplyBroadcastableLayerParams *)operator new();
  CoreML::Specification::MultiplyBroadcastableLayerParams::MultiplyBroadcastableLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D254(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::SubtractBroadcastableLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_subtractbroadcastable(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SubtractBroadcastableLayerParams *v2;

  if (*((_DWORD *)this + 35) == 905)
    return (CoreML::Specification::SubtractBroadcastableLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 905;
  v2 = (CoreML::Specification::SubtractBroadcastableLayerParams *)operator new();
  CoreML::Specification::SubtractBroadcastableLayerParams::SubtractBroadcastableLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D2E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::TileLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_tile(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::TileLayerParams *v2;

  if (*((_DWORD *)this + 35) == 920)
    return (CoreML::Specification::TileLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 920;
  v2 = (CoreML::Specification::TileLayerParams *)operator new();
  CoreML::Specification::TileLayerParams::TileLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D36C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::StackLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_stack(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::StackLayerParams *v2;

  if (*((_DWORD *)this + 35) == 925)
    return (CoreML::Specification::StackLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 925;
  v2 = (CoreML::Specification::StackLayerParams *)operator new();
  CoreML::Specification::StackLayerParams::StackLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D3F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::GatherLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_gather(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::GatherLayerParams *v2;

  if (*((_DWORD *)this + 35) == 930)
    return (CoreML::Specification::GatherLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 930;
  v2 = (CoreML::Specification::GatherLayerParams *)operator new();
  CoreML::Specification::GatherLayerParams::GatherLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D484(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::ScatterLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_scatter(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ScatterLayerParams *v2;

  if (*((_DWORD *)this + 35) == 935)
    return (CoreML::Specification::ScatterLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 935;
  v2 = (CoreML::Specification::ScatterLayerParams *)operator new();
  CoreML::Specification::ScatterLayerParams::ScatterLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D510(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

CoreML::Specification::GatherNDLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_gathernd(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::GatherNDLayerParams *v2;

  if (*((_DWORD *)this + 35) == 940)
    return (CoreML::Specification::GatherNDLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 940;
  v2 = (CoreML::Specification::GatherNDLayerParams *)operator new();
  CoreML::Specification::GatherNDLayerParams::GatherNDLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D59C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::ScatterNDLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_scatternd(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ScatterNDLayerParams *v2;

  if (*((_DWORD *)this + 35) == 945)
    return (CoreML::Specification::ScatterNDLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 945;
  v2 = (CoreML::Specification::ScatterNDLayerParams *)operator new();
  CoreML::Specification::ScatterNDLayerParams::ScatterNDLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D628(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::SoftmaxNDLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_softmaxnd(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SoftmaxNDLayerParams *v2;

  if (*((_DWORD *)this + 35) == 950)
    return (CoreML::Specification::SoftmaxNDLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 950;
  v2 = (CoreML::Specification::SoftmaxNDLayerParams *)operator new();
  CoreML::Specification::SoftmaxNDLayerParams::SoftmaxNDLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D6B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::GatherAlongAxisLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_gatheralongaxis(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::GatherAlongAxisLayerParams *v2;

  if (*((_DWORD *)this + 35) == 952)
    return (CoreML::Specification::GatherAlongAxisLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 952;
  v2 = (CoreML::Specification::GatherAlongAxisLayerParams *)operator new();
  CoreML::Specification::GatherAlongAxisLayerParams::GatherAlongAxisLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D740(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::ScatterAlongAxisLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_scatteralongaxis(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ScatterAlongAxisLayerParams *v2;

  if (*((_DWORD *)this + 35) == 954)
    return (CoreML::Specification::ScatterAlongAxisLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 954;
  v2 = (CoreML::Specification::ScatterAlongAxisLayerParams *)operator new();
  CoreML::Specification::ScatterAlongAxisLayerParams::ScatterAlongAxisLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D7CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReverseLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reverse(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReverseLayerParams *v2;

  if (*((_DWORD *)this + 35) == 960)
    return (CoreML::Specification::ReverseLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 960;
  v2 = (CoreML::Specification::ReverseLayerParams *)operator new();
  CoreML::Specification::ReverseLayerParams::ReverseLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D858(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReverseSeqLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reverseseq(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReverseSeqLayerParams *v2;

  if (*((_DWORD *)this + 35) == 965)
    return (CoreML::Specification::ReverseSeqLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 965;
  v2 = (CoreML::Specification::ReverseSeqLayerParams *)operator new();
  CoreML::Specification::ReverseSeqLayerParams::ReverseSeqLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D8E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::ReverseSeqLayerParams::MergeFrom(std::string *this, const CoreML::Specification::ReverseSeqLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((_QWORD *)a2 + 3);
  if (v6)
    v3[1].__r_.__value_.__r.__words[0] = v6;
  return this;
}

CoreML::Specification::SplitNDLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_splitnd(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SplitNDLayerParams *v2;

  if (*((_DWORD *)this + 35) == 975)
    return (CoreML::Specification::SplitNDLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 975;
  v2 = (CoreML::Specification::SplitNDLayerParams *)operator new();
  CoreML::Specification::SplitNDLayerParams::SplitNDLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801D9BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C7CBD27BLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::SplitNDLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::SplitNDLayerParams *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((_QWORD *)a2 + 5);
  if (v6)
    *((_QWORD *)v3 + 5) = v6;
  v7 = *((_QWORD *)a2 + 6);
  if (v7)
    *((_QWORD *)v3 + 6) = v7;
  return this;
}

CoreML::Specification::ConcatNDLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_concatnd(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ConcatNDLayerParams *v2;

  if (*((_DWORD *)this + 35) == 980)
    return (CoreML::Specification::ConcatNDLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 980;
  v2 = (CoreML::Specification::ConcatNDLayerParams *)operator new();
  CoreML::Specification::ConcatNDLayerParams::ConcatNDLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801DAEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E45386B4);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::ConcatNDLayerParams::MergeFrom(std::string *this, const CoreML::Specification::ConcatNDLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  if (*((_BYTE *)a2 + 24))
    v3[1].__r_.__value_.__s.__data_[0] = 1;
  return this;
}

CoreML::Specification::TransposeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_transpose(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::TransposeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 985)
    return (CoreML::Specification::TransposeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 985;
  v2 = (CoreML::Specification::TransposeLayerParams *)operator new();
  CoreML::Specification::TransposeLayerParams::TransposeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801DBC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::SliceStaticLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_slicestatic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SliceStaticLayerParams *v2;

  if (*((_DWORD *)this + 35) == 995)
    return (CoreML::Specification::SliceStaticLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 995;
  v2 = (CoreML::Specification::SliceStaticLayerParams *)operator new();
  CoreML::Specification::SliceStaticLayerParams::SliceStaticLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801DC54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40B7792B36);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::SliceStaticLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::SliceStaticLayerParams *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int *v11;
  int v12;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v3 + 10, v3[10] + v6);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 6) + (int)v3[10] + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), *((int *)a2 + 10));
    v3[10] += *((_DWORD *)a2 + 10);
  }
  v7 = *((_DWORD *)a2 + 16);
  if (v7)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 16, v3[16] + v7);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 9) + 8 * (int)v3[16] + 8), (const void *)(*((_QWORD *)a2 + 9) + 8), 8 * *((int *)a2 + 16));
    v3[16] += *((_DWORD *)a2 + 16);
  }
  v8 = *((_DWORD *)a2 + 22);
  if (v8)
  {
    _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v3 + 22, v3[22] + v8);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 12) + (int)v3[22] + 8), (const void *)(*((_QWORD *)a2 + 12) + 8), *((int *)a2 + 22));
    v3[22] += *((_DWORD *)a2 + 22);
  }
  v9 = *((_DWORD *)a2 + 28);
  if (v9)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 28, v3[28] + v9);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 15) + 8 * (int)v3[28] + 8), (const void *)(*((_QWORD *)a2 + 15) + 8), 8 * *((int *)a2 + 28));
    v3[28] += *((_DWORD *)a2 + 28);
  }
  v10 = *((_DWORD *)a2 + 34);
  if (v10)
  {
    v12 = v3[34];
    v11 = v3 + 34;
    _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v11, v12 + v10);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v11 + 1) + (int)*v11 + 8), (const void *)(*((_QWORD *)a2 + 18) + 8), *((int *)a2 + 34));
    *v11 += *((_DWORD *)a2 + 34);
  }
  return this;
}

CoreML::Specification::SliceDynamicLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_slicedynamic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SliceDynamicLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1000)
    return (CoreML::Specification::SliceDynamicLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1000;
  v2 = (CoreML::Specification::SliceDynamicLayerParams *)operator new();
  CoreML::Specification::SliceDynamicLayerParams::SliceDynamicLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801DEEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4014994198);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::SliceDynamicLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::SliceDynamicLayerParams *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int *v10;
  int v11;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 10, v3[10] + v6);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 6) + 8 * (int)v3[10] + 8), (const void *)(*((_QWORD *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    v3[10] += *((_DWORD *)a2 + 10);
  }
  v7 = *((_DWORD *)a2 + 16);
  if (v7)
  {
    _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v3 + 16, v3[16] + v7);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 9) + (int)v3[16] + 8), (const void *)(*((_QWORD *)a2 + 9) + 8), *((int *)a2 + 16));
    v3[16] += *((_DWORD *)a2 + 16);
  }
  v8 = *((_DWORD *)a2 + 22);
  if (v8)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 22, v3[22] + v8);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 12) + 8 * (int)v3[22] + 8), (const void *)(*((_QWORD *)a2 + 12) + 8), 8 * *((int *)a2 + 22));
    v3[22] += *((_DWORD *)a2 + 22);
  }
  v9 = *((_DWORD *)a2 + 28);
  if (v9)
  {
    v11 = v3[28];
    v10 = v3 + 28;
    _tc_google::protobuf::RepeatedField<BOOL>::Reserve(v10, v11 + v9);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v10 + 1) + (int)*v10 + 8), (const void *)(*((_QWORD *)a2 + 15) + 8), *((int *)a2 + 28));
    *v10 += *((_DWORD *)a2 + 28);
  }
  return this;
}

CoreML::Specification::SlidingWindowsLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_slidingwindows(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SlidingWindowsLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1005)
    return (CoreML::Specification::SlidingWindowsLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1005;
  v2 = (CoreML::Specification::SlidingWindowsLayerParams *)operator new();
  CoreML::Specification::SlidingWindowsLayerParams::SlidingWindowsLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801E134(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40594C3D85);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::SlidingWindowsLayerParams::MergeFrom(std::string *this, const CoreML::Specification::SlidingWindowsLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((_QWORD *)a2 + 3);
  if (v6)
    v3[1].__r_.__value_.__r.__words[0] = v6;
  v7 = *((_QWORD *)a2 + 4);
  if (v7)
    v3[1].__r_.__value_.__l.__size_ = v7;
  return this;
}

CoreML::Specification::TopKLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_topk(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::TopKLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1015)
    return (CoreML::Specification::TopKLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1015;
  v2 = (CoreML::Specification::TopKLayerParams *)operator new();
  CoreML::Specification::TopKLayerParams::TopKLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801E218(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40A90F680CLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::TopKLayerParams::MergeFrom(std::string *this, const CoreML::Specification::TopKLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((_QWORD *)a2 + 3);
  if (v6)
    v3[1].__r_.__value_.__r.__words[0] = v6;
  if (*((_BYTE *)a2 + 32))
    v3[1].__r_.__value_.__s.__data_[8] = 1;
  return this;
}

CoreML::Specification::ArgMinLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_argmin(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ArgMinLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1020)
    return (CoreML::Specification::ArgMinLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1020;
  v2 = (CoreML::Specification::ArgMinLayerParams *)operator new();
  CoreML::Specification::ArgMinLayerParams::ArgMinLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801E300(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E45386B4);
  _Unwind_Resume(a1);
}

CoreML::Specification::ArgMaxLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_argmax(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ArgMaxLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1025)
    return (CoreML::Specification::ArgMaxLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1025;
  v2 = (CoreML::Specification::ArgMaxLayerParams *)operator new();
  CoreML::Specification::ArgMaxLayerParams::ArgMaxLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801E38C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E45386B4);
  _Unwind_Resume(a1);
}

CoreML::Specification::EmbeddingNDLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_embeddingnd(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::EmbeddingNDLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1040)
    return (CoreML::Specification::EmbeddingNDLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1040;
  v2 = (CoreML::Specification::EmbeddingNDLayerParams *)operator new();
  CoreML::Specification::EmbeddingNDLayerParams::EmbeddingNDLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801E418(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4055BE373CLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::EmbeddingNDLayerParams::MergeFrom(CoreML::Specification::EmbeddingNDLayerParams *this, const CoreML::Specification::EmbeddingNDLayerParams *a2)
{
  uint64_t v4;
  const CoreML::Specification::WeightParams *v5;
  CoreML::Specification::WeightParams *v6;
  const CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;
  CoreML::Specification::WeightParams *v9;
  const CoreML::Specification::WeightParams *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::EmbeddingNDLayerParams *)&CoreML::Specification::_EmbeddingNDLayerParams_default_instance_)
  {
    v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v9, v10);
    }
  }
  v11 = *((_QWORD *)a2 + 4);
  if (v11)
    *((_QWORD *)this + 4) = v11;
  v12 = *((_QWORD *)a2 + 5);
  if (v12)
    *((_QWORD *)this + 5) = v12;
  if (*((_BYTE *)a2 + 48))
    *((_BYTE *)this + 48) = 1;
}

void sub_21801E548(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::BatchedMatMulLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_batchedmatmul(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::BatchedMatMulLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1045)
    return (CoreML::Specification::BatchedMatMulLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1045;
  v2 = (CoreML::Specification::BatchedMatMulLayerParams *)operator new();
  CoreML::Specification::BatchedMatMulLayerParams::BatchedMatMulLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801E5D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40A7ADAA20);
  _Unwind_Resume(a1);
}

void CoreML::Specification::BatchedMatMulLayerParams::MergeFrom(CoreML::Specification::BatchedMatMulLayerParams *this, const CoreML::Specification::BatchedMatMulLayerParams *a2)
{
  uint64_t v4;
  const CoreML::Specification::WeightParams *v5;
  CoreML::Specification::WeightParams *v6;
  const CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;
  CoreML::Specification::WeightParams *v9;
  const CoreML::Specification::WeightParams *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 != (const CoreML::Specification::BatchedMatMulLayerParams *)&CoreML::Specification::_BatchedMatMulLayerParams_default_instance_)
  {
    v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 2);
      if (!v6)
      {
        v6 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v6);
        *((_QWORD *)this + 2) = v6;
        v5 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 2);
      }
      if (v5)
        v7 = v5;
      else
        v7 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v6, v7);
    }
    v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v9);
        *((_QWORD *)this + 3) = v9;
        v8 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v9, v10);
    }
  }
  v11 = *((_QWORD *)a2 + 4);
  if (v11)
    *((_QWORD *)this + 4) = v11;
  v12 = *((_QWORD *)a2 + 5);
  if (v12)
    *((_QWORD *)this + 5) = v12;
  if (*((_BYTE *)a2 + 48))
    *((_BYTE *)this + 48) = 1;
  if (*((_BYTE *)a2 + 49))
    *((_BYTE *)this + 49) = 1;
  if (*((_BYTE *)a2 + 50))
    *((_BYTE *)this + 50) = 1;
  if (*((_BYTE *)a2 + 51))
    *((_BYTE *)this + 51) = 1;
}

void sub_21801E738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::GetShapeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_getshape(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::GetShapeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1065)
    return (CoreML::Specification::GetShapeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1065;
  v2 = (CoreML::Specification::GetShapeLayerParams *)operator new();
  CoreML::Specification::GetShapeLayerParams::GetShapeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801E7C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::LoadConstantNDLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_loadconstantnd(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LoadConstantNDLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1070)
    return (CoreML::Specification::LoadConstantNDLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1070;
  v2 = (CoreML::Specification::LoadConstantNDLayerParams *)operator new();
  CoreML::Specification::LoadConstantNDLayerParams::LoadConstantNDLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801E854(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40E853882FLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LoadConstantNDLayerParams::MergeFrom(CoreML::Specification::LoadConstantNDLayerParams *this, const CoreML::Specification::LoadConstantNDLayerParams *a2)
{
  uint64_t v4;
  int v5;
  const CoreML::Specification::WeightParams *v6;
  CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 4, *((_DWORD *)this + 4) + v5);
    memcpy((void *)(*((_QWORD *)this + 3) + 8 * *((int *)this + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  if (a2 != (const CoreML::Specification::LoadConstantNDLayerParams *)&CoreML::Specification::_LoadConstantNDLayerParams_default_instance_)
  {
    v6 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v7);
        *((_QWORD *)this + 5) = v7;
        v6 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v7, v8);
    }
  }
}

void sub_21801E970(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::FillLikeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_filllike(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::FillLikeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1080)
    return (CoreML::Specification::FillLikeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1080;
  v2 = (CoreML::Specification::FillLikeLayerParams *)operator new();
  CoreML::Specification::FillLikeLayerParams::FillLikeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801E9FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::FillStaticLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_fillstatic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::FillStaticLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1085)
    return (CoreML::Specification::FillStaticLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1085;
  v2 = (CoreML::Specification::FillStaticLayerParams *)operator new();
  CoreML::Specification::FillStaticLayerParams::FillStaticLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801EA88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40EA59D502);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::FillStaticLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::FillStaticLayerParams *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  float v6;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((float *)a2 + 9);
  if (v6 != 0.0)
    *((float *)v3 + 9) = v6;
  return this;
}

CoreML::Specification::FillDynamicLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_filldynamic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::FillDynamicLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1090)
    return (CoreML::Specification::FillDynamicLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1090;
  v2 = (CoreML::Specification::FillDynamicLayerParams *)operator new();
  CoreML::Specification::FillDynamicLayerParams::FillDynamicLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801EBB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::BroadcastToLikeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_broadcasttolike(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::BroadcastToLikeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1100)
    return (CoreML::Specification::BroadcastToLikeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1100;
  v2 = (CoreML::Specification::BroadcastToLikeLayerParams *)operator new();
  CoreML::Specification::BroadcastToLikeLayerParams::BroadcastToLikeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801EC3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::BroadcastToStaticLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_broadcasttostatic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::BroadcastToStaticLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1105)
    return (CoreML::Specification::BroadcastToStaticLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1105;
  v2 = (CoreML::Specification::BroadcastToStaticLayerParams *)operator new();
  CoreML::Specification::BroadcastToStaticLayerParams::BroadcastToStaticLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801ECC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::BroadcastToDynamicLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_broadcasttodynamic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::BroadcastToDynamicLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1110)
    return (CoreML::Specification::BroadcastToDynamicLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1110;
  v2 = (CoreML::Specification::BroadcastToDynamicLayerParams *)operator new();
  CoreML::Specification::BroadcastToDynamicLayerParams::BroadcastToDynamicLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801ED54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::SqueezeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_squeeze(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SqueezeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1120)
    return (CoreML::Specification::SqueezeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1120;
  v2 = (CoreML::Specification::SqueezeLayerParams *)operator new();
  CoreML::Specification::SqueezeLayerParams::SqueezeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801EDE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4095A926F0);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::SqueezeLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::SqueezeLayerParams *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  if (*((_BYTE *)a2 + 36))
    *((_BYTE *)v3 + 36) = 1;
  return this;
}

CoreML::Specification::ExpandDimsLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_expanddims(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ExpandDimsLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1125)
    return (CoreML::Specification::ExpandDimsLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1125;
  v2 = (CoreML::Specification::ExpandDimsLayerParams *)operator new();
  CoreML::Specification::ExpandDimsLayerParams::ExpandDimsLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801EF08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::FlattenTo2DLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_flattento2d(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::FlattenTo2DLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1130)
    return (CoreML::Specification::FlattenTo2DLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1130;
  v2 = (CoreML::Specification::FlattenTo2DLayerParams *)operator new();
  CoreML::Specification::FlattenTo2DLayerParams::FlattenTo2DLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801EF94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReshapeLikeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reshapelike(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReshapeLikeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1135)
    return (CoreML::Specification::ReshapeLikeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1135;
  v2 = (CoreML::Specification::ReshapeLikeLayerParams *)operator new();
  CoreML::Specification::ReshapeLikeLayerParams::ReshapeLikeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F020(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReshapeStaticLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reshapestatic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReshapeStaticLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1140)
    return (CoreML::Specification::ReshapeStaticLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1140;
  v2 = (CoreML::Specification::ReshapeStaticLayerParams *)operator new();
  CoreML::Specification::ReshapeStaticLayerParams::ReshapeStaticLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F0AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReshapeDynamicLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reshapedynamic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReshapeDynamicLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1145)
    return (CoreML::Specification::ReshapeDynamicLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1145;
  v2 = (CoreML::Specification::ReshapeDynamicLayerParams *)operator new();
  CoreML::Specification::ReshapeDynamicLayerParams::ReshapeDynamicLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F138(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::RankPreservingReshapeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_rankpreservingreshape(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RankPreservingReshapeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1150)
    return (CoreML::Specification::RankPreservingReshapeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1150;
  v2 = (CoreML::Specification::RankPreservingReshapeLayerParams *)operator new();
  CoreML::Specification::RankPreservingReshapeLayerParams::RankPreservingReshapeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F1C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

CoreML::Specification::ConstantPaddingLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_constantpad(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ConstantPaddingLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1155)
    return (CoreML::Specification::ConstantPaddingLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1155;
  v2 = (CoreML::Specification::ConstantPaddingLayerParams *)operator new();
  CoreML::Specification::ConstantPaddingLayerParams::ConstantPaddingLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F250(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C404456B134);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::ConstantPaddingLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::ConstantPaddingLayerParams *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  float v6;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((float *)a2 + 9);
  if (v6 != 0.0)
    *((float *)v3 + 9) = v6;
  if (*((_BYTE *)a2 + 40))
    *((_BYTE *)v3 + 40) = 1;
  return this;
}

CoreML::Specification::RandomNormalLikeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_randomnormallike(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RandomNormalLikeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1170)
    return (CoreML::Specification::RandomNormalLikeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1170;
  v2 = (CoreML::Specification::RandomNormalLikeLayerParams *)operator new();
  CoreML::Specification::RandomNormalLikeLayerParams::RandomNormalLikeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F388(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::RandomNormalLikeLayerParams::MergeFrom(std::string *this, const CoreML::Specification::RandomNormalLikeLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  float v6;
  float v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((float *)a2 + 6);
  if (v6 != 0.0)
    *(float *)&v3[1].__r_.__value_.__l.__data_ = v6;
  v7 = *((float *)a2 + 7);
  if (v7 != 0.0)
    *((float *)v3[1].__r_.__value_.__r.__words + 1) = v7;
  return this;
}

CoreML::Specification::RandomNormalStaticLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_randomnormalstatic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RandomNormalStaticLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1175)
    return (CoreML::Specification::RandomNormalStaticLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1175;
  v2 = (CoreML::Specification::RandomNormalStaticLayerParams *)operator new();
  CoreML::Specification::RandomNormalStaticLayerParams::RandomNormalStaticLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F474(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C7CBD27BLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::RandomNormalStaticLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::RandomNormalStaticLayerParams *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float v7;
  float v8;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((_QWORD *)a2 + 5);
  if (v6)
    *((_QWORD *)v3 + 5) = v6;
  v7 = *((float *)a2 + 12);
  if (v7 != 0.0)
    *((float *)v3 + 12) = v7;
  v8 = *((float *)a2 + 13);
  if (v8 != 0.0)
    *((float *)v3 + 13) = v8;
  return this;
}

CoreML::Specification::RandomNormalDynamicLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_randomnormaldynamic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RandomNormalDynamicLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1180)
    return (CoreML::Specification::RandomNormalDynamicLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1180;
  v2 = (CoreML::Specification::RandomNormalDynamicLayerParams *)operator new();
  CoreML::Specification::RandomNormalDynamicLayerParams::RandomNormalDynamicLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F5B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

CoreML::Specification::RandomUniformLikeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_randomuniformlike(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RandomUniformLikeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1190)
    return (CoreML::Specification::RandomUniformLikeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1190;
  v2 = (CoreML::Specification::RandomUniformLikeLayerParams *)operator new();
  CoreML::Specification::RandomUniformLikeLayerParams::RandomUniformLikeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F644(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

CoreML::Specification::RandomUniformStaticLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_randomuniformstatic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RandomUniformStaticLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1195)
    return (CoreML::Specification::RandomUniformStaticLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1195;
  v2 = (CoreML::Specification::RandomUniformStaticLayerParams *)operator new();
  CoreML::Specification::RandomUniformStaticLayerParams::RandomUniformStaticLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40C7CBD27BLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::RandomUniformDynamicLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_randomuniformdynamic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RandomUniformDynamicLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1200)
    return (CoreML::Specification::RandomUniformDynamicLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1200;
  v2 = (CoreML::Specification::RandomUniformDynamicLayerParams *)operator new();
  CoreML::Specification::RandomUniformDynamicLayerParams::RandomUniformDynamicLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F75C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

CoreML::Specification::RandomBernoulliLikeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_randombernoullilike(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RandomBernoulliLikeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1210)
    return (CoreML::Specification::RandomBernoulliLikeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1210;
  v2 = (CoreML::Specification::RandomBernoulliLikeLayerParams *)operator new();
  CoreML::Specification::RandomBernoulliLikeLayerParams::RandomBernoulliLikeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F7E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::RandomBernoulliLikeLayerParams::MergeFrom(std::string *this, const CoreML::Specification::RandomBernoulliLikeLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  float v6;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((float *)a2 + 6);
  if (v6 != 0.0)
    *(float *)&v3[1].__r_.__value_.__l.__data_ = v6;
  return this;
}

CoreML::Specification::RandomBernoulliStaticLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_randombernoullistatic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RandomBernoulliStaticLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1215)
    return (CoreML::Specification::RandomBernoulliStaticLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1215;
  v2 = (CoreML::Specification::RandomBernoulliStaticLayerParams *)operator new();
  CoreML::Specification::RandomBernoulliStaticLayerParams::RandomBernoulliStaticLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F8C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403321297FLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::RandomBernoulliStaticLayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::RandomBernoulliStaticLayerParams *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  float v7;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  v6 = *((_QWORD *)a2 + 5);
  if (v6)
    *((_QWORD *)v3 + 5) = v6;
  v7 = *((float *)a2 + 12);
  if (v7 != 0.0)
    *((float *)v3 + 12) = v7;
  return this;
}

CoreML::Specification::RandomBernoulliDynamicLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_randombernoullidynamic(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::RandomBernoulliDynamicLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1220)
    return (CoreML::Specification::RandomBernoulliDynamicLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1220;
  v2 = (CoreML::Specification::RandomBernoulliDynamicLayerParams *)operator new();
  CoreML::Specification::RandomBernoulliDynamicLayerParams::RandomBernoulliDynamicLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801F9F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C404FE48876);
  _Unwind_Resume(a1);
}

CoreML::Specification::CategoricalDistributionLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_categoricaldistribution(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::CategoricalDistributionLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1230)
    return (CoreML::Specification::CategoricalDistributionLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1230;
  v2 = (CoreML::Specification::CategoricalDistributionLayerParams *)operator new();
  CoreML::Specification::CategoricalDistributionLayerParams::CategoricalDistributionLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801FA84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C4067988C7FLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::CategoricalDistributionLayerParams::MergeFrom(std::string *this, const CoreML::Specification::CategoricalDistributionLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;
  float v7;
  float v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((_QWORD *)a2 + 3);
  if (v6)
    v3[1].__r_.__value_.__r.__words[0] = v6;
  if (*((_BYTE *)a2 + 32))
    v3[1].__r_.__value_.__s.__data_[8] = 1;
  v7 = *((float *)a2 + 9);
  if (v7 != 0.0)
    *((float *)&v3[1].__r_.__value_.__r.__words[1] + 1) = v7;
  v8 = *((float *)a2 + 10);
  if (v8 != 0.0)
    *(float *)&v3[1].__r_.__value_.__r.__words[2] = v8;
  return this;
}

CoreML::Specification::ReduceL1LayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reducel1(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceL1LayerParams *v2;

  if (*((_DWORD *)this + 35) == 1250)
    return (CoreML::Specification::ReduceL1LayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1250;
  v2 = (CoreML::Specification::ReduceL1LayerParams *)operator new();
  CoreML::Specification::ReduceL1LayerParams::ReduceL1LayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801FB8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::ReduceL1LayerParams::MergeFrom(uint64_t *this, const CoreML::Specification::ReduceL1LayerParams *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int v5;

  v3 = (unsigned int *)this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = (uint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (uint64_t *)memcpy((void *)(*((_QWORD *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  if (*((_BYTE *)a2 + 36))
    *((_BYTE *)v3 + 36) = 1;
  if (*((_BYTE *)a2 + 37))
    *((_BYTE *)v3 + 37) = 1;
  return this;
}

CoreML::Specification::ReduceL2LayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reducel2(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceL2LayerParams *v2;

  if (*((_DWORD *)this + 35) == 1255)
    return (CoreML::Specification::ReduceL2LayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1255;
  v2 = (CoreML::Specification::ReduceL2LayerParams *)operator new();
  CoreML::Specification::ReduceL2LayerParams::ReduceL2LayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801FCC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReduceMaxLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reducemax(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceMaxLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1260)
    return (CoreML::Specification::ReduceMaxLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1260;
  v2 = (CoreML::Specification::ReduceMaxLayerParams *)operator new();
  CoreML::Specification::ReduceMaxLayerParams::ReduceMaxLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801FD50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReduceMinLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reducemin(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceMinLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1265)
    return (CoreML::Specification::ReduceMinLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1265;
  v2 = (CoreML::Specification::ReduceMinLayerParams *)operator new();
  CoreML::Specification::ReduceMinLayerParams::ReduceMinLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801FDDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReduceSumLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reducesum(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceSumLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1270)
    return (CoreML::Specification::ReduceSumLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1270;
  v2 = (CoreML::Specification::ReduceSumLayerParams *)operator new();
  CoreML::Specification::ReduceSumLayerParams::ReduceSumLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801FE68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReduceProdLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reduceprod(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceProdLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1275)
    return (CoreML::Specification::ReduceProdLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1275;
  v2 = (CoreML::Specification::ReduceProdLayerParams *)operator new();
  CoreML::Specification::ReduceProdLayerParams::ReduceProdLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801FEF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReduceMeanLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reducemean(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceMeanLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1280)
    return (CoreML::Specification::ReduceMeanLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1280;
  v2 = (CoreML::Specification::ReduceMeanLayerParams *)operator new();
  CoreML::Specification::ReduceMeanLayerParams::ReduceMeanLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21801FF80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReduceLogSumLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reducelogsum(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceLogSumLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1285)
    return (CoreML::Specification::ReduceLogSumLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1285;
  v2 = (CoreML::Specification::ReduceLogSumLayerParams *)operator new();
  CoreML::Specification::ReduceLogSumLayerParams::ReduceLogSumLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21802000C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReduceSumSquareLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reducesumsquare(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceSumSquareLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1290)
    return (CoreML::Specification::ReduceSumSquareLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1290;
  v2 = (CoreML::Specification::ReduceSumSquareLayerParams *)operator new();
  CoreML::Specification::ReduceSumSquareLayerParams::ReduceSumSquareLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020098(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

CoreML::Specification::ReduceLogSumExpLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_reducelogsumexp(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ReduceLogSumExpLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1295)
    return (CoreML::Specification::ReduceLogSumExpLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1295;
  v2 = (CoreML::Specification::ReduceLogSumExpLayerParams *)operator new();
  CoreML::Specification::ReduceLogSumExpLayerParams::ReduceLogSumExpLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020124(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4024E920E0);
  _Unwind_Resume(a1);
}

CoreML::Specification::WhereNonZeroLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_wherenonzero(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::WhereNonZeroLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1313)
    return (CoreML::Specification::WhereNonZeroLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1313;
  v2 = (CoreML::Specification::WhereNonZeroLayerParams *)operator new();
  CoreML::Specification::WhereNonZeroLayerParams::WhereNonZeroLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_2180201B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::MatrixBandPartLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_matrixbandpart(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::MatrixBandPartLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1315)
    return (CoreML::Specification::MatrixBandPartLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1315;
  v2 = (CoreML::Specification::MatrixBandPartLayerParams *)operator new();
  CoreML::Specification::MatrixBandPartLayerParams::MatrixBandPartLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21802023C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

CoreML::Specification::LowerTriangularLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_lowertriangular(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LowerTriangularLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1320)
    return (CoreML::Specification::LowerTriangularLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1320;
  v2 = (CoreML::Specification::LowerTriangularLayerParams *)operator new();
  CoreML::Specification::LowerTriangularLayerParams::LowerTriangularLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_2180202C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::UpperTriangularLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_uppertriangular(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::UpperTriangularLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1325)
    return (CoreML::Specification::UpperTriangularLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1325;
  v2 = (CoreML::Specification::UpperTriangularLayerParams *)operator new();
  CoreML::Specification::UpperTriangularLayerParams::UpperTriangularLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020354(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::WhereBroadcastableLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_wherebroadcastable(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::WhereBroadcastableLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1330)
    return (CoreML::Specification::WhereBroadcastableLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1330;
  v2 = (CoreML::Specification::WhereBroadcastableLayerParams *)operator new();
  CoreML::Specification::WhereBroadcastableLayerParams::WhereBroadcastableLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_2180203E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

CoreML::Specification::LayerNormalizationLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_layernormalization(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::LayerNormalizationLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1350)
    return (CoreML::Specification::LayerNormalizationLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1350;
  v2 = (CoreML::Specification::LayerNormalizationLayerParams *)operator new();
  CoreML::Specification::LayerNormalizationLayerParams::LayerNormalizationLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_21802046C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4054F75DDDLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::LayerNormalizationLayerParams::MergeFrom(CoreML::Specification::LayerNormalizationLayerParams *this, const CoreML::Specification::LayerNormalizationLayerParams *a2)
{
  uint64_t v4;
  int v5;
  const CoreML::Specification::WeightParams *v6;
  CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;
  const CoreML::Specification::WeightParams *v9;
  CoreML::Specification::WeightParams *v10;
  const CoreML::Specification::WeightParams *v11;
  float v12;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 4, *((_DWORD *)this + 4) + v5);
    memcpy((void *)(*((_QWORD *)this + 3) + 8 * *((int *)this + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  if (a2 != (const CoreML::Specification::LayerNormalizationLayerParams *)&CoreML::Specification::_LayerNormalizationLayerParams_default_instance_)
  {
    v6 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v7);
        *((_QWORD *)this + 5) = v7;
        v6 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v7, v8);
    }
    v9 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 6);
    if (v9)
    {
      v10 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 6);
      if (!v10)
      {
        v10 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v10);
        *((_QWORD *)this + 6) = v10;
        v9 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 6);
      }
      if (v9)
        v11 = v9;
      else
        v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v10, v11);
    }
  }
  v12 = *((float *)a2 + 14);
  if (v12 != 0.0)
    *((float *)this + 14) = v12;
}

void sub_2180205D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::NonMaximumSuppressionLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_nonmaximumsuppression(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::NonMaximumSuppressionLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1400)
    return (CoreML::Specification::NonMaximumSuppressionLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1400;
  v2 = (CoreML::Specification::NonMaximumSuppressionLayerParams *)operator new();
  CoreML::Specification::NonMaximumSuppressionLayerParams::NonMaximumSuppressionLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020664(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40A90F680CLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::NonMaximumSuppressionLayerParams::MergeFrom(std::string *this, const CoreML::Specification::NonMaximumSuppressionLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  float v5;
  float v6;
  std::string::size_type v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((float *)a2 + 4);
  if (v5 != 0.0)
    *(float *)&v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((float *)a2 + 5);
  if (v6 != 0.0)
    *((float *)&v3->__r_.__value_.__r.__words[2] + 1) = v6;
  v7 = *((_QWORD *)a2 + 3);
  if (v7)
    v3[1].__r_.__value_.__r.__words[0] = v7;
  if (*((_BYTE *)a2 + 32))
    v3[1].__r_.__value_.__s.__data_[8] = 1;
  return this;
}

CoreML::Specification::OneHotLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_onehot(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::OneHotLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1450)
    return (CoreML::Specification::OneHotLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1450;
  v2 = (CoreML::Specification::OneHotLayerParams *)operator new();
  CoreML::Specification::OneHotLayerParams::OneHotLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020760(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40594C3D85);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::OneHotLayerParams::MergeFrom(std::string *this, const CoreML::Specification::OneHotLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;
  float v7;
  float v8;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  v6 = *((_QWORD *)a2 + 3);
  if (v6)
    v3[1].__r_.__value_.__r.__words[0] = v6;
  v7 = *((float *)a2 + 8);
  if (v7 != 0.0)
    *(float *)&v3[1].__r_.__value_.__r.__words[1] = v7;
  v8 = *((float *)a2 + 9);
  if (v8 != 0.0)
    *((float *)&v3[1].__r_.__value_.__r.__words[1] + 1) = v8;
  return this;
}

CoreML::Specification::CumSumLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_cumsum(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::CumSumLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1455)
    return (CoreML::Specification::CumSumLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1455;
  v2 = (CoreML::Specification::CumSumLayerParams *)operator new();
  CoreML::Specification::CumSumLayerParams::CumSumLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020858(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C400751EDB2);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::CumSumLayerParams::MergeFrom(std::string *this, const CoreML::Specification::CumSumLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    v3->__r_.__value_.__r.__words[2] = v5;
  if (*((_BYTE *)a2 + 24))
    v3[1].__r_.__value_.__s.__data_[0] = 1;
  if (*((_BYTE *)a2 + 25))
    v3[1].__r_.__value_.__s.__data_[1] = 1;
  return this;
}

CoreML::Specification::ClampedReLULayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_clampedrelu(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ClampedReLULayerParams *v2;

  if (*((_DWORD *)this + 35) == 1460)
    return (CoreML::Specification::ClampedReLULayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1460;
  v2 = (CoreML::Specification::ClampedReLULayerParams *)operator new();
  CoreML::Specification::ClampedReLULayerParams::ClampedReLULayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E1DA5700);
  _Unwind_Resume(a1);
}

CoreML::Specification::ArgSortLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_argsort(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::ArgSortLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1461)
    return (CoreML::Specification::ArgSortLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1461;
  v2 = (CoreML::Specification::ArgSortLayerParams *)operator new();
  CoreML::Specification::ArgSortLayerParams::ArgSortLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_2180209D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40E45386B4);
  _Unwind_Resume(a1);
}

CoreML::Specification::Pooling3DLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_pooling3d(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::Pooling3DLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1465)
    return (CoreML::Specification::Pooling3DLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1465;
  v2 = (CoreML::Specification::Pooling3DLayerParams *)operator new();
  CoreML::Specification::Pooling3DLayerParams::Pooling3DLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40004337BDLL);
  _Unwind_Resume(a1);
}

std::string *CoreML::Specification::Pooling3DLayerParams::MergeFrom(std::string *this, const CoreML::Specification::Pooling3DLayerParams *a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v3 = this;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  v6 = *((_DWORD *)a2 + 5);
  if (v6)
    HIDWORD(v3->__r_.__value_.__r.__words[2]) = v6;
  v7 = *((_DWORD *)a2 + 6);
  if (v7)
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v7;
  v8 = *((_DWORD *)a2 + 7);
  if (v8)
    HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = v8;
  v9 = *((_DWORD *)a2 + 8);
  if (v9)
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v9;
  v10 = *((_DWORD *)a2 + 9);
  if (v10)
    HIDWORD(v3[1].__r_.__value_.__r.__words[1]) = v10;
  v11 = *((_DWORD *)a2 + 10);
  if (v11)
    LODWORD(v3[1].__r_.__value_.__r.__words[2]) = v11;
  v12 = *((_DWORD *)a2 + 11);
  if (v12)
    HIDWORD(v3[1].__r_.__value_.__r.__words[2]) = v12;
  v13 = *((_DWORD *)a2 + 12);
  if (v13)
    LODWORD(v3[2].__r_.__value_.__l.__data_) = v13;
  v14 = *((_DWORD *)a2 + 13);
  if (v14)
    HIDWORD(v3[2].__r_.__value_.__r.__words[0]) = v14;
  v15 = *((_DWORD *)a2 + 14);
  if (v15)
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = v15;
  v16 = *((_DWORD *)a2 + 15);
  if (v16)
    HIDWORD(v3[2].__r_.__value_.__r.__words[1]) = v16;
  v17 = *((_DWORD *)a2 + 16);
  if (v17)
    LODWORD(v3[2].__r_.__value_.__r.__words[2]) = v17;
  if (*((_BYTE *)a2 + 68))
    v3[2].__r_.__value_.__s.__data_[20] = 1;
  v18 = *((_DWORD *)a2 + 18);
  if (v18)
    LODWORD(v3[3].__r_.__value_.__l.__data_) = v18;
  return this;
}

CoreML::Specification::GlobalPooling3DLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_globalpooling3d(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::GlobalPooling3DLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1466)
    return (CoreML::Specification::GlobalPooling3DLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1466;
  v2 = (CoreML::Specification::GlobalPooling3DLayerParams *)operator new();
  CoreML::Specification::GlobalPooling3DLayerParams::GlobalPooling3DLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

CoreML::Specification::SliceBySizeLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_slicebysize(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::SliceBySizeLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1470)
    return (CoreML::Specification::SliceBySizeLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1470;
  v2 = (CoreML::Specification::SliceBySizeLayerParams *)operator new();
  CoreML::Specification::SliceBySizeLayerParams::SliceBySizeLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020C60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

CoreML::Specification::Convolution3DLayerParams *CoreML::Specification::NeuralNetworkLayer::mutable_convolution3d(CoreML::Specification::NeuralNetworkLayer *this)
{
  CoreML::Specification::Convolution3DLayerParams *v2;

  if (*((_DWORD *)this + 35) == 1471)
    return (CoreML::Specification::Convolution3DLayerParams *)*((_QWORD *)this + 16);
  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
  *((_DWORD *)this + 35) = 1471;
  v2 = (CoreML::Specification::Convolution3DLayerParams *)operator new();
  CoreML::Specification::Convolution3DLayerParams::Convolution3DLayerParams(v2);
  *((_QWORD *)this + 16) = v2;
  return v2;
}

void sub_218020CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40381DED69);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Convolution3DLayerParams::MergeFrom(CoreML::Specification::Convolution3DLayerParams *this, const CoreML::Specification::Convolution3DLayerParams *a2)
{
  uint64_t v4;
  int v5;
  const CoreML::Specification::WeightParams *v6;
  CoreML::Specification::WeightParams *v7;
  const CoreML::Specification::WeightParams *v8;
  const CoreML::Specification::WeightParams *v9;
  CoreML::Specification::WeightParams *v10;
  const CoreML::Specification::WeightParams *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;

  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)this + 4, *((_DWORD *)this + 4) + v5);
    memcpy((void *)(*((_QWORD *)this + 3) + 8 * *((int *)this + 4) + 8), (const void *)(*((_QWORD *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) += *((_DWORD *)a2 + 4);
  }
  if (a2 != (const CoreML::Specification::Convolution3DLayerParams *)&CoreML::Specification::_Convolution3DLayerParams_default_instance_)
  {
    v6 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v7);
        *((_QWORD *)this + 5) = v7;
        v6 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v7, v8);
    }
    v9 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 6);
    if (v9)
    {
      v10 = (CoreML::Specification::WeightParams *)*((_QWORD *)this + 6);
      if (!v10)
      {
        v10 = (CoreML::Specification::WeightParams *)operator new();
        CoreML::Specification::WeightParams::WeightParams(v10);
        *((_QWORD *)this + 6) = v10;
        v9 = (const CoreML::Specification::WeightParams *)*((_QWORD *)a2 + 6);
      }
      if (v9)
        v11 = v9;
      else
        v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
      CoreML::Specification::WeightParams::MergeFrom(v10, v11);
    }
  }
  v12 = *((_DWORD *)a2 + 14);
  if (v12)
    *((_DWORD *)this + 14) = v12;
  v13 = *((_DWORD *)a2 + 15);
  if (v13)
    *((_DWORD *)this + 15) = v13;
  v14 = *((_DWORD *)a2 + 16);
  if (v14)
    *((_DWORD *)this + 16) = v14;
  v15 = *((_DWORD *)a2 + 17);
  if (v15)
    *((_DWORD *)this + 17) = v15;
  v16 = *((_DWORD *)a2 + 18);
  if (v16)
    *((_DWORD *)this + 18) = v16;
  v17 = *((_DWORD *)a2 + 19);
  if (v17)
    *((_DWORD *)this + 19) = v17;
  v18 = *((_DWORD *)a2 + 20);
  if (v18)
    *((_DWORD *)this + 20) = v18;
  v19 = *((_DWORD *)a2 + 21);
  if (v19)
    *((_DWORD *)this + 21) = v19;
  v20 = *((_DWORD *)a2 + 22);
  if (v20)
    *((_DWORD *)this + 22) = v20;
  v21 = *((_DWORD *)a2 + 23);
  if (v21)
    *((_DWORD *)this + 23) = v21;
  v22 = *((_DWORD *)a2 + 24);
  if (v22)
    *((_DWORD *)this + 24) = v22;
  v23 = *((_DWORD *)a2 + 25);
  if (v23)
    *((_DWORD *)this + 25) = v23;
  if (*((_BYTE *)a2 + 104))
    *((_BYTE *)this + 104) = 1;
  if (*((_BYTE *)a2 + 105))
    *((_BYTE *)this + 105) = 1;
  v24 = *((_DWORD *)a2 + 27);
  if (v24)
    *((_DWORD *)this + 27) = v24;
  v25 = *((_DWORD *)a2 + 28);
  if (v25)
    *((_DWORD *)this + 28) = v25;
  v26 = *((_DWORD *)a2 + 29);
  if (v26)
    *((_DWORD *)this + 29) = v26;
  v27 = *((_DWORD *)a2 + 30);
  if (v27)
    *((_DWORD *)this + 30) = v27;
  v28 = *((_DWORD *)a2 + 31);
  if (v28)
    *((_DWORD *)this + 31) = v28;
  v29 = *((_DWORD *)a2 + 32);
  if (v29)
    *((_DWORD *)this + 32) = v29;
  v30 = *((_DWORD *)a2 + 33);
  if (v30)
    *((_DWORD *)this + 33) = v30;
}

void sub_218020F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C403937033FLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::NeuralNetworkLayer::~NeuralNetworkLayer(CoreML::Specification::NeuralNetworkLayer *this)
{
  *(_QWORD *)this = &off_24D9234E8;
  CoreML::Specification::NeuralNetworkLayer::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 11);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((_QWORD *)this + 8);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((_QWORD *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  CoreML::Specification::NeuralNetworkLayer::~NeuralNetworkLayer(this);
  JUMPOUT(0x219A19A08);
}

uint64_t CoreML::Specification::NeuralNetworkLayer::SharedDtor(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  v2 = *(_QWORD *)(this + 112);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    this = MEMORY[0x219A19A08](v2, 0x1012C40EC159624);
  }
  if (*(_DWORD *)(v1 + 140))
    return CoreML::Specification::NeuralNetworkLayer::clear_layer(v1);
  return this;
}

uint64_t CoreML::Specification::NeuralNetworkLayer::clear_layer(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 140);
  if (v2 > 879)
  {
    if (v2 > 1139)
    {
      if (v2 <= 1274)
      {
        if (v2 <= 1199)
        {
          if (v2 <= 1169)
          {
            if (v2 > 1149)
            {
              if (v2 != 1150 && v2 != 1155)
                goto LABEL_78;
            }
            else if (v2 != 1140 && v2 != 1145)
            {
              goto LABEL_78;
            }
          }
          else if (v2 <= 1179)
          {
            if (v2 != 1170 && v2 != 1175)
              goto LABEL_78;
          }
          else if (v2 != 1180 && v2 != 1190 && v2 != 1195)
          {
            goto LABEL_78;
          }
        }
        else if (v2 > 1249)
        {
          if (v2 <= 1259)
          {
            if (v2 != 1250 && v2 != 1255)
              goto LABEL_78;
          }
          else if (v2 != 1260 && v2 != 1265 && v2 != 1270)
          {
            goto LABEL_78;
          }
        }
        else if (v2 <= 1214)
        {
          if (v2 != 1200 && v2 != 1210)
            goto LABEL_78;
        }
        else if (v2 != 1215 && v2 != 1220 && v2 != 1230)
        {
          goto LABEL_78;
        }
        goto LABEL_76;
      }
      if (v2 <= 1349)
      {
        if (v2 > 1312)
        {
          if (v2 <= 1319)
          {
            if (v2 != 1313 && v2 != 1315)
              goto LABEL_78;
          }
          else if (v2 != 1320 && v2 != 1325 && v2 != 1330)
          {
            goto LABEL_78;
          }
        }
        else if (v2 <= 1284)
        {
          if (v2 != 1275 && v2 != 1280)
            goto LABEL_78;
        }
        else if (v2 != 1285 && v2 != 1290 && v2 != 1295)
        {
          goto LABEL_78;
        }
        goto LABEL_76;
      }
      if (v2 <= 1454)
      {
        if (v2 != 1350 && v2 != 1400 && v2 != 1450)
          goto LABEL_78;
        goto LABEL_76;
      }
      switch(v2)
      {
        case 1455:
        case 1460:
        case 1461:
        case 1465:
        case 1466:
        case 1470:
        case 1471:
          goto LABEL_76;
        default:
          break;
      }
    }
    else
    {
      if (v2 > 994)
      {
        if (v2 > 1079)
        {
          if (v2 > 1109)
          {
            if (v2 <= 1124)
            {
              if (v2 != 1110 && v2 != 1120)
                goto LABEL_78;
            }
            else if (v2 != 1125 && v2 != 1130 && v2 != 1135)
            {
              goto LABEL_78;
            }
          }
          else if (v2 <= 1089)
          {
            if (v2 != 1080 && v2 != 1085)
              goto LABEL_78;
          }
          else if (v2 != 1090 && v2 != 1100 && v2 != 1105)
          {
            goto LABEL_78;
          }
        }
        else if (v2 > 1024)
        {
          if (v2 <= 1044)
          {
            if (v2 != 1025 && v2 != 1040)
              goto LABEL_78;
          }
          else if (v2 != 1045 && v2 != 1065 && v2 != 1070)
          {
            goto LABEL_78;
          }
        }
        else if (v2 <= 1004)
        {
          if (v2 != 995 && v2 != 1000)
            goto LABEL_78;
        }
        else if (v2 != 1005 && v2 != 1015 && v2 != 1020)
        {
          goto LABEL_78;
        }
        goto LABEL_76;
      }
      if (v2 <= 939)
      {
        if (v2 > 904)
        {
          if (v2 <= 924)
          {
            if (v2 != 905 && v2 != 920)
              goto LABEL_78;
          }
          else if (v2 != 925 && v2 != 930 && v2 != 935)
          {
            goto LABEL_78;
          }
        }
        else if (v2 <= 889)
        {
          if (v2 != 880 && v2 != 885)
            goto LABEL_78;
        }
        else if (v2 != 890 && v2 != 895 && v2 != 900)
        {
          goto LABEL_78;
        }
        goto LABEL_76;
      }
      if (v2 > 959)
      {
        if (v2 <= 974)
        {
          if (v2 != 960 && v2 != 965)
            goto LABEL_78;
        }
        else if (v2 != 975 && v2 != 980 && v2 != 985)
        {
          goto LABEL_78;
        }
        goto LABEL_76;
      }
      switch(v2)
      {
        case 945:
        case 950:
        case 952:
        case 954:
          goto LABEL_76;
        case 946:
        case 947:
        case 948:
        case 949:
        case 951:
        case 953:
          break;
        default:
          if (v2 == 940)
            goto LABEL_76;
          break;
      }
    }
  }
  else
  {
    if (v2 <= 604)
    {
      if (v2 > 249)
      {
        if (v2 > 329)
        {
          if (v2 > 409)
          {
            if (v2 <= 429)
            {
              if (v2 != 410 && v2 != 420)
                goto LABEL_78;
            }
            else if (v2 != 430 && v2 != 500 && v2 != 600)
            {
              goto LABEL_78;
            }
          }
          else if (v2 <= 344)
          {
            if (v2 != 330 && v2 != 340)
              goto LABEL_78;
          }
          else if (v2 != 345 && v2 != 350 && v2 != 400)
          {
            goto LABEL_78;
          }
        }
        else if (v2 > 289)
        {
          if (v2 <= 300)
          {
            if (v2 != 290 && v2 != 300)
              goto LABEL_78;
          }
          else if (v2 != 301 && v2 != 310 && v2 != 320)
          {
            goto LABEL_78;
          }
        }
        else if (v2 <= 260)
        {
          if (v2 != 250 && v2 != 260)
            goto LABEL_78;
        }
        else if (v2 != 261 && v2 != 270 && v2 != 280)
        {
          goto LABEL_78;
        }
      }
      else if (v2 > 189)
      {
        if (v2 > 219)
        {
          if (v2 <= 230)
          {
            if (v2 != 220 && v2 != 230)
              goto LABEL_78;
          }
          else if (v2 != 231 && v2 != 240 && v2 != 245)
          {
            goto LABEL_78;
          }
        }
        else if (v2 <= 209)
        {
          if (v2 != 190 && v2 != 200)
            goto LABEL_78;
        }
        else if (v2 != 210 && v2 != 211 && v2 != 212)
        {
          goto LABEL_78;
        }
      }
      else if (v2 > 159)
      {
        if (v2 <= 169)
        {
          if (v2 != 160 && v2 != 165)
            goto LABEL_78;
        }
        else if (v2 != 170 && v2 != 175 && v2 != 180)
        {
          goto LABEL_78;
        }
      }
      else if (v2 <= 129)
      {
        if (v2 != 100 && v2 != 120)
          goto LABEL_78;
      }
      else if (v2 != 130 && v2 != 140 && v2 != 150)
      {
        goto LABEL_78;
      }
LABEL_76:
      this = *(_QWORD *)(this + 128);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      goto LABEL_78;
    }
    if (v2 <= 759)
    {
      if (v2 > 684)
      {
        if (v2 > 729)
        {
          if (v2 <= 739)
          {
            if (v2 != 730 && v2 != 735)
              goto LABEL_78;
          }
          else if (v2 != 740 && v2 != 750 && v2 != 755)
          {
            goto LABEL_78;
          }
        }
        else if (v2 <= 709)
        {
          if (v2 != 685 && v2 != 700)
            goto LABEL_78;
        }
        else if (v2 != 710 && v2 != 715 && v2 != 720)
        {
          goto LABEL_78;
        }
      }
      else if (v2 > 639)
      {
        if (v2 <= 664)
        {
          if (v2 != 640 && v2 != 660)
            goto LABEL_78;
        }
        else if (v2 != 665 && v2 != 670 && v2 != 680)
        {
          goto LABEL_78;
        }
      }
      else if (v2 <= 619)
      {
        if (v2 != 605 && v2 != 615)
          goto LABEL_78;
      }
      else if (v2 != 620 && v2 != 625 && v2 != 635)
      {
        goto LABEL_78;
      }
      goto LABEL_76;
    }
    if (v2 <= 824)
    {
      if (v2 > 789)
      {
        if (v2 > 814)
        {
          if (v2 != 815 && v2 != 820)
            goto LABEL_78;
        }
        else if (v2 != 790 && v2 != 795)
        {
          goto LABEL_78;
        }
      }
      else if (v2 > 774)
      {
        if (v2 != 775 && v2 != 780)
          goto LABEL_78;
      }
      else if (v2 != 760 && v2 != 770)
      {
        goto LABEL_78;
      }
      goto LABEL_76;
    }
    if (v2 > 849)
    {
      if (v2 <= 864)
      {
        if (v2 != 850 && v2 != 855)
          goto LABEL_78;
      }
      else if (v2 != 865 && v2 != 870 && v2 != 875)
      {
        goto LABEL_78;
      }
      goto LABEL_76;
    }
    switch(v2)
    {
      case 825:
      case 827:
      case 830:
      case 832:
        goto LABEL_76;
      case 826:
      case 828:
      case 829:
      case 831:
        break;
      default:
        if (v2 == 840 || v2 == 845)
          goto LABEL_76;
        break;
    }
  }
LABEL_78:
  *(_DWORD *)(v1 + 140) = 0;
  return this;
}

CoreML::Specification::NeuralNetworkLayer *CoreML::Specification::NeuralNetworkLayer::New(CoreML::Specification::NeuralNetworkLayer *this, _tc_google::protobuf::Arena *a2)
{
  CoreML::Specification::NeuralNetworkLayer *v3;

  v3 = (CoreML::Specification::NeuralNetworkLayer *)operator new();
  CoreML::Specification::NeuralNetworkLayer::NeuralNetworkLayer(v3);
  if (a2)
    _tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetworkLayer>(a2, v3);
  return v3;
}

void sub_2180218A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40665201BALL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::NeuralNetworkLayer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::NeuralNetworkLayer>);
  return result;
}

uint64_t CoreML::Specification::NeuralNetworkLayer::Clear(CoreML::Specification::NeuralNetworkLayer *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
  v2 = *((unsigned int *)this + 18);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*((_QWORD *)this + 10) + 8);
    do
    {
      v4 = *v3++;
      *(_DWORD *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 36) = 0;
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 18) = 0;
  }
  v5 = *((unsigned int *)this + 24);
  if ((int)v5 >= 1)
  {
    v6 = (uint64_t *)(*((_QWORD *)this + 13) + 8);
    do
    {
      v7 = *v6++;
      *(_DWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 36) = 0;
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 24) = 0;
  }
  v8 = *((_QWORD *)this + 14);
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
    }
  }
  *((_BYTE *)this + 120) = 0;
  return CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
}

uint64_t CoreML::Specification::NeuralNetworkLayer::MergePartialFromCodedStream(CoreML::Specification::NeuralNetworkLayer *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  _DWORD *v5;
  CoreML::Specification::CategoricalDistributionLayerParams **v6;
  char *v7;
  unsigned int *v8;
  unsigned int *v9;
  std::string **v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int TagFallback;
  unsigned int v19;
  std::string *v20;
  uint64_t result;
  unsigned __int8 *v22;
  const char *size;
  CoreML::Specification::MultiplyBroadcastableLayerParams *v24;
  char *v25;
  int v26;
  CoreML::Specification::SinLayerParams *v27;
  char *v28;
  int v29;
  CoreML::Specification::CumSumLayerParams *v30;
  CoreML::Specification::ScaleLayerParams *v31;
  CoreML::Specification::SlidingWindowsLayerParams *v32;
  CoreML::Specification::TanhLayerParams *v33;
  char *v34;
  int v35;
  CoreML::Specification::RankPreservingReshapeLayerParams *v36;
  CoreML::Specification::LRNLayerParams *v37;
  CoreML::Specification::ScatterNDLayerParams *v38;
  CoreML::Specification::CopyLayerParams *v39;
  char *v40;
  int v41;
  CoreML::Specification::ReduceSumSquareLayerParams *v42;
  CoreML::Specification::ConcatLayerParams *v43;
  CoreML::Specification::FillDynamicLayerParams *v44;
  CoreML::Specification::LessThanLayerParams *v45;
  CoreML::Specification::RandomBernoulliDynamicLayerParams *v46;
  CoreML::Specification::EmbeddingLayerParams *v47;
  CoreML::Specification::PowBroadcastableLayerParams *v48;
  char *v49;
  int v50;
  CoreML::Specification::SignLayerParams *v51;
  char *v52;
  int v53;
  CoreML::Specification::ReduceLayerParams *v54;
  CoreML::Specification::BatchedMatMulLayerParams *v55;
  CoreML::Specification::GeluLayerParams *v56;
  CoreML::Specification::RandomUniformLikeLayerParams *v57;
  CoreML::Specification::CropResizeLayerParams *v58;
  CoreML::Specification::RangeStaticLayerParams *v59;
  CoreML::Specification::UpperTriangularLayerParams *v60;
  CoreML::Specification::SimpleRecurrentLayerParams *v61;
  CoreML::Specification::ExpandDimsLayerParams *v62;
  CoreML::Specification::ReduceMinLayerParams *v63;
  CoreML::Specification::NonMaximumSuppressionLayerParams *v64;
  CoreML::Specification::LogicalXorLayerParams *v65;
  char *v66;
  int v67;
  CoreML::Specification::GatherNDLayerParams *v68;
  char *v69;
  int v70;
  CoreML::Specification::StackLayerParams *v71;
  CoreML::Specification::AsinLayerParams *v72;
  char *v73;
  int v74;
  CoreML::Specification::SplitNDLayerParams *v75;
  CoreML::Specification::AddLayerParams *v76;
  CoreML::Specification::TransposeLayerParams *v77;
  CoreML::Specification::AtanLayerParams *v78;
  char *v79;
  int v80;
  CoreML::Specification::ReshapeLikeLayerParams *v81;
  char *v82;
  int v83;
  CoreML::Specification::MeanVarianceNormalizeLayerParams *v84;
  CoreML::Specification::UniDirectionalLSTMLayerParams *v85;
  CoreML::Specification::ReduceProdLayerParams *v86;
  CoreML::Specification::ReshapeLayerParams *v87;
  CoreML::Specification::LoadConstantNDLayerParams *v88;
  CoreML::Specification::NotEqualLayerParams *v89;
  CoreML::Specification::RandomUniformDynamicLayerParams *v90;
  CoreML::Specification::PoolingLayerParams *v91;
  CoreML::Specification::MinBroadcastableLayerParams *v92;
  char *v93;
  int v94;
  CoreML::Specification::ClipLayerParams *v95;
  CoreML::Specification::MaxLayerParams *v96;
  char *v97;
  int v98;
  CoreML::Specification::ArgMinLayerParams *v99;
  CoreML::Specification::AcoshLayerParams *v100;
  char *v101;
  int v102;
  CoreML::Specification::RandomNormalLikeLayerParams *v103;
  CoreML::Specification::PaddingLayerParams *v104;
  CoreML::Specification::LoopLayerParams *v105;
  CoreML::Specification::WhereNonZeroLayerParams *v106;
  char *v107;
  int v108;
  CoreML::Specification::SequenceRepeatLayerParams *v109;
  CoreML::Specification::BroadcastToStaticLayerParams *v110;
  CoreML::Specification::ReduceL1LayerParams *v111;
  CoreML::Specification::LogicalAndLayerParams *v112;
  char *v113;
  int v114;
  CoreML::Specification::WhereBroadcastableLayerParams *v115;
  char *v116;
  int v117;
  CoreML::Specification::LayerNormalizationLayerParams *v118;
  CoreML::Specification::LessEqualLayerParams *v119;
  CoreML::Specification::GreaterThanLayerParams *v120;
  CoreML::Specification::GreaterEqualLayerParams *v121;
  int *v122;
  uint64_t v123;
  int v124;
  std::string *Aligned;
  int *v126;
  uint64_t v127;
  int v128;
  std::string *v129;
  uint64_t v130;
  CoreML::Specification::Tensor *v131;
  char *v132;
  int v133;
  char *v134;
  unint64_t Varint64Fallback;
  CoreML::Specification::SoftmaxNDLayerParams *v136;
  CoreML::Specification::GatherAlongAxisLayerParams *v137;
  CoreML::Specification::ScatterAlongAxisLayerParams *v138;
  CoreML::Specification::DivideBroadcastableLayerParams *v139;
  char *v140;
  int v141;
  CoreML::Specification::FloorDivBroadcastableLayerParams *v142;
  char *v143;
  int v144;
  CoreML::Specification::RoundLayerParams *v145;
  char *v146;
  int v147;
  CoreML::Specification::Exp2LayerParams *v148;
  char *v149;
  int v150;
  CoreML::Specification::MultiplyLayerParams *v151;
  CoreML::Specification::AverageLayerParams *v152;
  char *v153;
  int v154;
  CoreML::Specification::SliceStaticLayerParams *v155;
  CoreML::Specification::SliceDynamicLayerParams *v156;
  CoreML::Specification::SinhLayerParams *v157;
  char *v158;
  int v159;
  CoreML::Specification::CoshLayerParams *v160;
  char *v161;
  int v162;
  CoreML::Specification::ReshapeStaticLayerParams *v163;
  CoreML::Specification::ReshapeDynamicLayerParams *v164;
  char *v165;
  int v166;
  CoreML::Specification::L2NormalizeLayerParams *v167;
  CoreML::Specification::SoftmaxLayerParams *v168;
  char *v169;
  int v170;
  CoreML::Specification::BiDirectionalLSTMLayerParams *v171;
  CoreML::Specification::CustomLayerParams *v172;
  CoreML::Specification::ReduceMeanLayerParams *v173;
  CoreML::Specification::ReduceLogSumLayerParams *v174;
  CoreML::Specification::FlattenLayerParams *v175;
  CoreML::Specification::PermuteLayerParams *v176;
  CoreML::Specification::FillLikeLayerParams *v177;
  CoreML::Specification::FillStaticLayerParams *v178;
  CoreML::Specification::RandomBernoulliLikeLayerParams *v179;
  CoreML::Specification::RandomBernoulliStaticLayerParams *v180;
  CoreML::Specification::ActivationParams *v181;
  CoreML::Specification::InnerProductLayerParams *v182;
  CoreML::Specification::MaxBroadcastableLayerParams *v183;
  char *v184;
  int v185;
  CoreML::Specification::AddBroadcastableLayerParams *v186;
  char *v187;
  int v188;
  CoreML::Specification::CeilLayerParams *v189;
  char *v190;
  int v191;
  CoreML::Specification::FloorLayerParams *v192;
  char *v193;
  int v194;
  CoreML::Specification::MinLayerParams *v195;
  char *v196;
  int v197;
  CoreML::Specification::DotProductLayerParams *v198;
  CoreML::Specification::ArgMaxLayerParams *v199;
  CoreML::Specification::EmbeddingNDLayerParams *v200;
  CoreML::Specification::AtanhLayerParams *v201;
  char *v202;
  int v203;
  CoreML::Specification::ErfLayerParams *v204;
  char *v205;
  int v206;
  CoreML::Specification::RandomNormalStaticLayerParams *v207;
  CoreML::Specification::RandomNormalDynamicLayerParams *v208;
  CoreML::Specification::UpsampleLayerParams *v209;
  CoreML::Specification::ResizeBilinearLayerParams *v210;
  CoreML::Specification::LoopBreakLayerParams *v211;
  char *v212;
  int v213;
  CoreML::Specification::LoopContinueLayerParams *v214;
  char *v215;
  int v216;
  CoreML::Specification::MatrixBandPartLayerParams *v217;
  CoreML::Specification::LowerTriangularLayerParams *v218;
  CoreML::Specification::ReorganizeDataLayerParams *v219;
  CoreML::Specification::SliceLayerParams *v220;
  CoreML::Specification::BroadcastToDynamicLayerParams *v221;
  char *v222;
  int v223;
  CoreML::Specification::SqueezeLayerParams *v224;
  CoreML::Specification::ReduceL2LayerParams *v225;
  CoreML::Specification::ReduceMaxLayerParams *v226;
  CoreML::Specification::LogicalOrLayerParams *v227;
  char *v228;
  int v229;
  CoreML::Specification::GatherLayerParams *v230;
  CoreML::Specification::ScatterLayerParams *v231;
  CoreML::Specification::SubtractBroadcastableLayerParams *v232;
  char *v233;
  int v234;
  CoreML::Specification::TileLayerParams *v235;
  CoreML::Specification::CosLayerParams *v236;
  char *v237;
  int v238;
  CoreML::Specification::TanLayerParams *v239;
  char *v240;
  int v241;
  CoreML::Specification::ReverseLayerParams *v242;
  CoreML::Specification::ReverseSeqLayerParams *v243;
  CoreML::Specification::UnaryFunctionLayerParams *v244;
  CoreML::Specification::ConcatNDLayerParams *v245;
  CoreML::Specification::AcosLayerParams *v246;
  char *v247;
  int v248;
  CoreML::Specification::FlattenTo2DLayerParams *v249;
  CoreML::Specification::BatchnormLayerParams *v250;
  CoreML::Specification::GRULayerParams *v251;
  CoreML::Specification::ReduceSumLayerParams *v252;
  CoreML::Specification::LoadConstantLayerParams *v253;
  CoreML::Specification::GetShapeLayerParams *v254;
  char *v255;
  int v256;
  CoreML::Specification::RandomUniformStaticLayerParams *v257;
  CoreML::Specification::ConvolutionLayerParams *v258;
  CoreML::Specification::ModBroadcastableLayerParams *v259;
  char *v260;
  int v261;
  CoreML::Specification::RangeDynamicLayerParams *v262;
  CoreML::Specification::BiasLayerParams *v263;
  CoreML::Specification::TopKLayerParams *v264;
  CoreML::Specification::AsinhLayerParams *v265;
  char *v266;
  int v267;
  CoreML::Specification::ConstantPaddingLayerParams *v268;
  CoreML::Specification::CropLayerParams *v269;
  CoreML::Specification::BranchLayerParams *v270;
  CoreML::Specification::ReduceLogSumExpLayerParams *v271;
  CoreML::Specification::SplitLayerParams *v272;
  CoreML::Specification::BroadcastToLikeLayerParams *v273;
  char *v274;
  int v275;
  CoreML::Specification::CategoricalDistributionLayerParams *v276;
  CoreML::Specification::LogicalNotLayerParams *v277;
  char *v278;
  int v279;
  CoreML::Specification::EqualLayerParams *v280;
  CoreML::Specification::OneHotLayerParams *v281;
  CoreML::Specification::ClampedReLULayerParams *v282;
  CoreML::Specification::ArgSortLayerParams *v283;
  CoreML::Specification::Pooling3DLayerParams *v284;
  CoreML::Specification::GlobalPooling3DLayerParams *v285;
  CoreML::Specification::SliceBySizeLayerParams *v286;
  CoreML::Specification::Convolution3DLayerParams *v287;
  unint64_t v288;
  unsigned int v289;
  int v290;
  char *v291;
  int v292;
  char *v293;
  int v294;
  char *v295;
  int v296;
  char *v297;
  int v298;
  char *v299;
  int v300;
  char *v301;
  int v302;
  char *v303;
  int v304;
  char *v305;
  int v306;
  char *v307;
  int v308;
  char *v309;
  int v310;
  char *v311;
  int v312;
  char *v313;
  int v314;
  char *v315;
  int v316;
  char *v317;
  int v318;
  char *v319;
  int v320;
  char *v321;
  int v322;
  char *v323;
  int v324;
  char *v325;
  int v326;
  char *v327;
  int v328;
  char *v329;
  int v330;
  char *v331;
  int v332;
  char *v333;
  int v334;
  char *v335;
  int v336;
  char *v337;
  int v338;
  char *v339;
  int v340;
  char *v341;
  int v342;
  char *v343;
  int v344;
  char *v345;
  int v346;
  char *v347;
  int v348;
  char *v349;
  int v350;
  char *v351;
  int v352;
  char *v353;
  int v354;
  char *v355;
  int v356;
  char *v357;
  int v358;
  char *v359;
  int v360;
  char *v361;
  int v362;
  char *v363;
  int v364;
  char *v365;
  int v366;
  char *v367;
  int v368;
  char *v369;
  int v370;
  char *v371;
  int v372;
  char *v373;
  int v374;
  char *v375;
  int v376;
  char *v377;
  int v378;
  char *v379;
  int v380;
  char *v381;
  int v382;
  char *v383;
  int v384;
  char *v385;
  int v386;
  char *v387;
  int v388;
  char *v389;
  int v390;
  char *v391;
  int v392;
  char *v393;
  int v394;
  char *v395;
  int v396;
  char *v397;
  int v398;
  char *v399;
  int v400;
  char *v401;
  int v402;
  char *v403;
  int v404;
  char *v405;
  int v406;
  char *v407;
  int v408;
  char *v409;
  int v410;
  char *v411;
  int v412;
  char *v413;
  int v414;
  char *v415;
  int v416;
  char *v417;
  int v418;
  char *v419;
  int v420;
  char *v421;
  int v422;
  char *v423;
  int v424;
  char *v425;
  int v426;
  char *v427;
  int v428;
  char *v429;
  int v430;
  char *v431;
  int v432;
  char *v433;
  int v434;
  char *v435;
  int v436;
  char *v437;
  int v438;
  char *v439;
  int v440;
  char *v441;
  int v442;
  char *v443;
  int v444;
  char *v445;
  int v446;
  char *v447;
  int v448;
  char *v449;
  int v450;
  char *v451;
  int v452;
  char *v453;
  int v454;
  char *v455;
  int v456;
  char *v457;
  int v458;
  char *v459;
  int v460;
  char *v461;
  int v462;
  char *v463;
  int v464;
  char *v465;
  int v466;
  char *v467;
  int v468;
  char *v469;
  int v470;
  char *v471;
  int v472;
  char *v473;
  int v474;
  char *v475;
  int v476;
  char *v477;
  int v478;
  char *v479;
  int v480;
  char *v481;
  int v482;
  char *v483;
  int v484;
  char *v485;
  int v486;
  char *v487;
  int v488;
  char *v489;
  int v490;
  char *v491;
  int v492;
  char *v493;
  int VarintSizeAsIntFallback;
  unint64_t v495;
  unsigned int v496;
  int v497;
  unint64_t v498;
  unsigned int v499;
  int v500;
  unint64_t v501;
  unsigned int v502;
  int v503;
  char *v504;
  int v505;
  char *v506;
  int v507;
  char *v508;
  int v509;
  char *v510;
  int v511;
  char *v512;
  int v513;
  char *v514;
  int v515;
  char *v516;
  int v517;
  char *v518;
  int v519;
  char *v520;
  int v521;
  char *v522;
  int v523;
  unint64_t v524;
  unsigned int v525;
  int v526;
  unint64_t v527;
  unsigned int v528;
  int v529;
  unint64_t v530;
  unsigned int v531;
  int v532;
  unint64_t v533;
  unsigned int v534;
  int v535;
  char v536;
  unint64_t v537;
  unsigned int v538;
  int v539;
  unint64_t v540;
  unsigned int v541;
  int v542;
  unint64_t v543;
  unsigned int v544;
  int v545;
  unint64_t v546;
  unsigned int v547;
  int v548;
  const char *v549;
  unint64_t v550;
  unsigned int v551;
  int v552;
  unint64_t v553;
  unsigned int v554;
  int v555;
  unint64_t v556;
  unsigned int v557;
  int v558;
  unint64_t v559;
  unsigned int v560;
  int v561;
  unint64_t v562;
  unsigned int v563;
  int v564;
  unint64_t v565;
  unsigned int v566;
  int v567;
  unint64_t v568;
  unsigned int v569;
  int v570;
  unint64_t v571;
  unsigned int v572;
  int v573;
  unint64_t v574;
  unsigned int v575;
  int v576;
  unint64_t v577;
  unsigned int v578;
  int v579;
  unint64_t v580;
  unsigned int v581;
  int v582;
  unint64_t v583;
  unsigned int v584;
  int v585;
  unint64_t v586;
  unsigned int v587;
  int v588;
  unint64_t v589;
  unsigned int v590;
  int v591;
  unint64_t v592;
  unsigned int v593;
  int v594;
  unint64_t v595;
  unsigned int v596;
  int v597;
  unint64_t v598;
  unsigned int v599;
  int v600;
  unint64_t v601;
  unsigned int v602;
  int v603;
  unint64_t v604;
  unsigned int v605;
  int v606;
  unint64_t v607;
  unsigned int v608;
  int v609;
  unint64_t v610;
  unsigned int v611;
  int v612;
  unint64_t v613;
  unsigned int v614;
  int v615;
  unint64_t v616;
  unsigned int v617;
  int v618;
  unint64_t v619;
  unsigned int v620;
  int v621;
  unint64_t v622;
  unsigned int v623;
  unint64_t v624;
  unsigned int v625;
  int v626;
  unint64_t v627;
  unsigned int v628;
  int v629;
  unint64_t v630;
  unsigned int v631;
  int v632;
  unint64_t v633;
  unsigned int v634;
  int v635;
  unint64_t v636;
  unsigned int v637;
  int v638;
  unint64_t v639;
  unsigned int v640;
  int v641;
  unint64_t v642;
  unsigned int v643;
  int v644;
  unint64_t v645;
  unsigned int v646;
  int v647;
  unint64_t v648;
  unsigned int v649;
  int v650;
  unint64_t v651;
  unsigned int v652;
  int v653;
  unint64_t v654;
  unsigned int v655;
  int v656;
  unint64_t v657;
  unsigned int v658;
  int v659;
  unint64_t v660;
  unsigned int v661;
  int v662;
  unint64_t v663;
  unsigned int v664;
  int v665;
  unint64_t v666;
  unsigned int v667;
  int v668;
  unint64_t v669;
  unsigned int v670;
  int v671;
  unint64_t v672;
  unsigned int v673;
  int v674;
  unint64_t v675;
  unsigned int v676;
  int v677;
  unint64_t v678;
  unsigned int v679;
  int v680;
  unint64_t v681;
  unsigned int v682;
  int v683;
  unint64_t v684;
  unsigned int v685;
  int v686;
  unint64_t v687;
  unsigned int v688;
  int v689;
  unint64_t v690;
  unsigned int v691;
  int v692;
  unint64_t v693;
  unsigned int v694;
  int v695;
  unint64_t v696;
  unsigned int v697;
  int v698;
  unint64_t v699;
  unsigned int v700;
  int v701;
  unint64_t v702;
  unsigned int v703;
  int v704;
  unint64_t v705;
  unsigned int v706;
  int v707;
  unint64_t v708;
  unsigned int v709;
  unint64_t v710;
  unsigned int v711;
  int v712;
  unint64_t v713;
  unsigned int v714;
  int v715;
  unint64_t v716;
  unsigned int v717;
  int v718;
  unint64_t v719;
  unsigned int v720;
  int v721;
  unint64_t v722;
  unsigned int v723;
  int v724;
  unint64_t v725;
  unsigned int v726;
  int v727;
  unint64_t v728;
  unsigned int v729;
  int v730;
  unint64_t v731;
  unsigned int v732;
  int v733;
  unint64_t v734;
  unsigned int v735;
  int v736;
  unint64_t v737;
  unsigned int v738;
  int v739;
  unint64_t v740;
  unsigned int v741;
  int v742;
  unint64_t v743;
  unsigned int v744;
  int v745;
  unint64_t v746;
  unsigned int v747;
  int v748;
  unint64_t v749;
  unsigned int v750;
  int v751;
  unint64_t v752;
  unsigned int v753;
  unint64_t v754;
  unsigned int v755;
  int v756;
  unint64_t v757;
  unsigned int v758;
  int v759;
  unint64_t v760;
  unsigned int v761;
  int v762;
  unint64_t v763;
  unsigned int v764;
  int v765;
  unint64_t v766;
  unsigned int v767;
  int v768;
  unint64_t v769;
  unsigned int v770;
  unint64_t v771;
  unsigned int v772;
  int v773;
  unint64_t v774;
  unsigned int v775;
  int v776;
  unint64_t v777;
  unsigned int v778;
  int v779;
  unint64_t v780;
  unsigned int v781;
  int v782;
  unint64_t v783;
  unsigned int v784;
  int v785;
  unint64_t v786;
  unsigned int v787;
  int v788;
  unint64_t v789;
  unsigned int v790;
  int v791;
  unint64_t v792;
  unsigned int v793;
  int v794;
  unint64_t v795;
  unsigned int v796;
  int v797;
  unint64_t v798;
  unsigned int v799;
  int v800;
  unint64_t v801;
  unsigned int v802;
  int v803;
  unint64_t v804;
  unsigned int v805;
  int v806;
  unint64_t v807;
  unsigned int v808;
  unint64_t v809;
  unsigned int v810;
  int v811;
  unint64_t v812;
  unsigned int v813;
  int v814;
  unint64_t v815;
  unsigned int v816;
  int v817;
  unint64_t v818;
  unsigned int v819;
  int v820;
  unint64_t v821;
  unsigned int v822;
  int v823;
  unint64_t v824;
  unsigned int v825;
  int v826;
  unint64_t v827;
  unsigned int v828;
  int v829;
  unint64_t v830;
  unsigned int v831;
  int v832;
  unint64_t v833;
  unsigned int v834;
  int v835;
  unint64_t v836;
  unsigned int v837;
  int v838;
  unint64_t v839;
  unsigned int v840;
  unint64_t v841;
  unsigned int v842;
  unint64_t v843;
  unsigned int v844;
  int v845;
  unint64_t v846;
  unsigned int v847;
  int v848;
  unint64_t v849;
  unsigned int v850;
  int v851;
  unint64_t v852;
  unsigned int v853;
  int v854;
  unint64_t v855;
  unsigned int v856;
  int v857;
  unint64_t v858;
  unsigned int v859;
  int v860;
  unint64_t v861;
  unsigned int v862;
  int v863;
  unint64_t v864;
  unsigned int v865;
  int v866;
  unint64_t v867;
  unsigned int v868;
  int v869;
  unint64_t v870;
  unsigned int v871;
  int v872;
  unint64_t v873;
  unsigned int v874;
  int v875;
  unint64_t v876;
  unsigned int v877;
  int v878;
  unint64_t v879;
  unsigned int v880;
  int v881;
  unint64_t v882;
  unsigned int v883;
  int v884;
  unint64_t v885;
  unsigned int v886;
  int v887;
  unint64_t v888;
  unsigned int v889;
  int v890;
  unint64_t v891;
  unsigned int v892;
  int v893;
  unint64_t v894;
  unsigned int v895;
  int v896;
  unint64_t v897;
  unsigned int v898;
  int v899;
  unint64_t v900;
  unsigned int v901;
  int v902;
  unint64_t v903;
  unsigned int v904;
  int v905;
  unint64_t v906;
  unsigned int v907;
  int v908;
  unint64_t v909;
  unsigned int v910;
  unint64_t v911;
  unsigned int v912;
  int v913;
  unint64_t v914;
  unsigned int v915;
  int v916;
  unint64_t v917;
  unsigned int v918;
  int v919;
  unint64_t v920;
  unsigned int v921;
  int v922;
  unint64_t v923;
  unsigned int v924;
  unint64_t v925;
  unsigned int v926;
  int v927;
  unint64_t v928;
  unsigned int v929;
  int v930;
  unint64_t v931;
  unsigned int v932;
  int v933;
  unint64_t v934;
  unsigned int v935;
  int v936;
  unint64_t v937;
  unsigned int v938;
  int v939;
  unint64_t v940;
  unsigned int v941;
  int v942;
  unint64_t v943;
  unsigned int v944;
  int v945;
  unint64_t v946;
  unsigned int v947;
  int v948;
  unint64_t v949;
  unsigned int v950;
  int v951;
  unint64_t v952;
  unsigned int v953;
  int v954;
  unint64_t v955;
  unsigned int v956;
  int v957;
  unint64_t v958;
  unsigned int v959;
  int v960;
  unint64_t v961;
  unsigned int v962;
  int v963;
  unint64_t v964;
  unsigned int v965;
  int v966;
  unint64_t v967;
  unsigned int v968;
  int v969;
  unint64_t v970;
  unsigned int v971;
  int v972;
  unint64_t v973;
  unsigned int v974;
  int v975;
  unint64_t v976;
  unsigned int v977;
  int v978;
  unint64_t v979;
  unsigned int v980;
  int v981;
  _tc_google::protobuf::Arena *v982;
  _tc_google::protobuf::Arena *v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  char *v990;

  v5 = (_DWORD *)((char *)this + 140);
  v6 = (CoreML::Specification::CategoricalDistributionLayerParams **)((char *)this + 128);
  v990 = (char *)this + 88;
  v7 = (char *)this + 64;
  v8 = (unsigned int *)((char *)this + 40);
  v9 = (unsigned int *)((char *)this + 16);
  v10 = (std::string **)((char *)this + 112);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
LABEL_2:
                v11 = *(unsigned __int8 **)a2;
                v12 = *((_QWORD *)a2 + 1);
                if (*(_QWORD *)a2 >= v12)
                {
                  v14 = 0;
                }
                else
                {
                  v13 = v11 + 1;
                  v14 = *v11;
                  if ((char)*v11 >= 1)
                  {
                    *(_QWORD *)a2 = v13;
                    v15 = v14 | 0x100000000;
                    if ((v15 & 0x100000000) == 0)
                      goto LABEL_9;
                    goto LABEL_17;
                  }
                  if ((unint64_t)v13 < v12)
                  {
                    v16 = *v13;
                    if ((v14 & ~v16) >= 0x80)
                    {
                      *(_QWORD *)a2 = v11 + 2;
                      v15 = (v14 + (v16 << 7) - 128) | 0x100000000;
                      goto LABEL_17;
                    }
                  }
                }
                TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v14);
                v15 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
                if ((v15 & 0x100000000) == 0)
                  goto LABEL_9;
LABEL_17:
                v19 = v15 >> 3;
                if (v15 >> 3 <= 0x360)
                  break;
                if (v15 >> 3 > 0x469)
                {
                  if (v15 >> 3 <= 0x4F5)
                  {
                    if (v15 >> 3 > 0x4AA)
                    {
                      if (v15 >> 3 > 0x4CD)
                      {
                        if (v15 >> 3 <= 0x4E6)
                        {
                          if (v19 == 1230)
                          {
                            if (v15 != 114)
                              goto LABEL_9;
                            if (*v5 == 1230)
                            {
                              v276 = *v6;
                            }
                            else
                            {
                              CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                              *((_DWORD *)this + 35) = 1230;
                              v276 = (CoreML::Specification::CategoricalDistributionLayerParams *)operator new();
                              CoreML::Specification::CategoricalDistributionLayerParams::CategoricalDistributionLayerParams(v276);
                              *v6 = v276;
                            }
                            v493 = *(char **)a2;
                            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v493 < 0)
                            {
                              VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                              if (VarintSizeAsIntFallback < 0)
                                return 0;
                            }
                            else
                            {
                              VarintSizeAsIntFallback = *v493;
                              *(_QWORD *)a2 = v493 + 1;
                            }
                            v949 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
                            if ((v949 & 0x8000000000000000) != 0)
                              return 0;
                            v951 = v949;
                            result = CoreML::Specification::CategoricalDistributionLayerParams::MergePartialFromCodedStream(v276, (char **)a2, v950);
                            if (!(_DWORD)result)
                              return result;
                            if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v951))return 0;
                          }
                          else
                          {
                            if (v19 != 1250 || v15 != 18)
                              goto LABEL_9;
                            if (*v5 == 1250)
                            {
                              v111 = *v6;
                            }
                            else
                            {
                              CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                              *((_DWORD *)this + 35) = 1250;
                              v111 = (CoreML::Specification::ReduceL1LayerParams *)operator new();
                              CoreML::Specification::ReduceL1LayerParams::ReduceL1LayerParams(v111);
                              *v6 = v111;
                            }
                            v385 = *(char **)a2;
                            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v385 < 0)
                            {
                              v386 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                              if (v386 < 0)
                                return 0;
                            }
                            else
                            {
                              v386 = *v385;
                              *(_QWORD *)a2 = v385 + 1;
                            }
                            v792 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v386);
                            if ((v792 & 0x8000000000000000) != 0)
                              return 0;
                            v794 = v792;
                            result = CoreML::Specification::ReduceL1LayerParams::MergePartialFromCodedStream(v111, (char **)a2, v793);
                            if (!(_DWORD)result)
                              return result;
                            if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v794))return 0;
                          }
                        }
                        else if (v19 == 1255)
                        {
                          if (v15 != 58)
                            goto LABEL_9;
                          if (*v5 == 1255)
                          {
                            v225 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1255;
                            v225 = (CoreML::Specification::ReduceL2LayerParams *)operator new();
                            CoreML::Specification::ReduceL2LayerParams::ReduceL2LayerParams(v225);
                            *v6 = v225;
                          }
                          v445 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v445 < 0)
                          {
                            v446 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v446 < 0)
                              return 0;
                          }
                          else
                          {
                            v446 = *v445;
                            *(_QWORD *)a2 = v445 + 1;
                          }
                          v879 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v446);
                          if ((v879 & 0x8000000000000000) != 0)
                            return 0;
                          v881 = v879;
                          result = CoreML::Specification::ReduceL2LayerParams::MergePartialFromCodedStream(v225, (char **)a2, v880);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v881))
                            return 0;
                        }
                        else if (v19 == 1260)
                        {
                          if (v15 != 98)
                            goto LABEL_9;
                          if (*v5 == 1260)
                          {
                            v226 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1260;
                            v226 = (CoreML::Specification::ReduceMaxLayerParams *)operator new();
                            CoreML::Specification::ReduceMaxLayerParams::ReduceMaxLayerParams(v226);
                            *v6 = v226;
                          }
                          v447 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v447 < 0)
                          {
                            v448 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v448 < 0)
                              return 0;
                          }
                          else
                          {
                            v448 = *v447;
                            *(_QWORD *)a2 = v447 + 1;
                          }
                          v882 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v448);
                          if ((v882 & 0x8000000000000000) != 0)
                            return 0;
                          v884 = v882;
                          result = CoreML::Specification::ReduceMaxLayerParams::MergePartialFromCodedStream(v226, (char **)a2, v883);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v884))
                            return 0;
                        }
                        else
                        {
                          if (v19 != 1265 || v15 != 138)
                            goto LABEL_9;
                          if (*v5 == 1265)
                          {
                            v63 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1265;
                            v63 = (CoreML::Specification::ReduceMinLayerParams *)operator new();
                            CoreML::Specification::ReduceMinLayerParams::ReduceMinLayerParams(v63);
                            *v6 = v63;
                          }
                          v347 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v347 < 0)
                          {
                            v348 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v348 < 0)
                              return 0;
                          }
                          else
                          {
                            v348 = *v347;
                            *(_QWORD *)a2 = v347 + 1;
                          }
                          v737 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v348);
                          if ((v737 & 0x8000000000000000) != 0)
                            return 0;
                          v739 = v737;
                          result = CoreML::Specification::ReduceMinLayerParams::MergePartialFromCodedStream(v63, (char **)a2, v738);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v739))
                            return 0;
                        }
                      }
                      else if (v15 >> 3 <= 0x4B9)
                      {
                        if (v19 == 1195)
                        {
                          if (v15 != 90)
                            goto LABEL_9;
                          if (*v5 == 1195)
                          {
                            v257 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1195;
                            v257 = (CoreML::Specification::RandomUniformStaticLayerParams *)operator new();
                            CoreML::Specification::RandomUniformStaticLayerParams::RandomUniformStaticLayerParams(v257);
                            *v6 = v257;
                          }
                          v473 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v473 < 0)
                          {
                            v474 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v474 < 0)
                              return 0;
                          }
                          else
                          {
                            v474 = *v473;
                            *(_QWORD *)a2 = v473 + 1;
                          }
                          v920 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v474);
                          if ((v920 & 0x8000000000000000) != 0)
                            return 0;
                          v922 = v920;
                          result = CoreML::Specification::RandomUniformStaticLayerParams::MergePartialFromCodedStream(v257, (char **)a2, v921);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v922))
                            return 0;
                        }
                        else
                        {
                          if (v19 != 1200 || v15 != 130)
                            goto LABEL_9;
                          if (*v5 == 1200)
                          {
                            v90 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1200;
                            v90 = (CoreML::Specification::RandomUniformDynamicLayerParams *)operator new();
                            CoreML::Specification::RandomUniformDynamicLayerParams::RandomUniformDynamicLayerParams(v90);
                            *v6 = v90;
                          }
                          v367 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v367 < 0)
                          {
                            v368 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v368 < 0)
                              return 0;
                          }
                          else
                          {
                            v368 = *v367;
                            *(_QWORD *)a2 = v367 + 1;
                          }
                          v766 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v368);
                          if ((v766 & 0x8000000000000000) != 0)
                            return 0;
                          v768 = v766;
                          result = CoreML::Specification::RandomUniformDynamicLayerParams::MergePartialFromCodedStream(v90, (char **)a2, v767);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v768))
                            return 0;
                        }
                      }
                      else if (v19 == 1210)
                      {
                        if (v15 != 210)
                          goto LABEL_9;
                        if (*v5 == 1210)
                        {
                          v179 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1210;
                          v179 = (CoreML::Specification::RandomBernoulliLikeLayerParams *)operator new();
                          CoreML::Specification::RandomBernoulliLikeLayerParams::RandomBernoulliLikeLayerParams(v179);
                          *v6 = v179;
                        }
                        v413 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v413 < 0)
                        {
                          v414 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v414 < 0)
                            return 0;
                        }
                        else
                        {
                          v414 = *v413;
                          *(_QWORD *)a2 = v413 + 1;
                        }
                        v833 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v414);
                        if ((v833 & 0x8000000000000000) != 0)
                          return 0;
                        v835 = v833;
                        result = CoreML::Specification::RandomBernoulliLikeLayerParams::MergePartialFromCodedStream(v179, (char **)a2, v834);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v835))
                          return 0;
                      }
                      else if (v19 == 1215)
                      {
                        if (v15 != 250)
                          goto LABEL_9;
                        if (*v5 == 1215)
                        {
                          v180 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1215;
                          v180 = (CoreML::Specification::RandomBernoulliStaticLayerParams *)operator new();
                          CoreML::Specification::RandomBernoulliStaticLayerParams::RandomBernoulliStaticLayerParams(v180);
                          *v6 = v180;
                        }
                        v415 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v415 < 0)
                        {
                          v416 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v416 < 0)
                            return 0;
                        }
                        else
                        {
                          v416 = *v415;
                          *(_QWORD *)a2 = v415 + 1;
                        }
                        v836 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v416);
                        if ((v836 & 0x8000000000000000) != 0)
                          return 0;
                        v838 = v836;
                        result = CoreML::Specification::RandomBernoulliStaticLayerParams::MergePartialFromCodedStream(v180, (char **)a2, v837);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v838))
                          return 0;
                      }
                      else
                      {
                        if (v19 != 1220 || v15 != 34)
                          goto LABEL_9;
                        if (*v5 == 1220)
                        {
                          v46 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1220;
                          v46 = (CoreML::Specification::RandomBernoulliDynamicLayerParams *)operator new();
                          CoreML::Specification::RandomBernoulliDynamicLayerParams::RandomBernoulliDynamicLayerParams(v46);
                          *v6 = v46;
                        }
                        v325 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v325 < 0)
                        {
                          v326 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v326 < 0)
                            return 0;
                        }
                        else
                        {
                          v326 = *v325;
                          *(_QWORD *)a2 = v325 + 1;
                        }
                        v705 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v326);
                        if ((v705 & 0x8000000000000000) != 0)
                          return 0;
                        v707 = v705;
                        result = CoreML::Specification::RandomBernoulliDynamicLayerParams::MergePartialFromCodedStream(v46, (char **)a2, v706);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v707))
                          return 0;
                      }
                    }
                    else if (v15 >> 3 > 0x482)
                    {
                      if (v15 >> 3 <= 0x496)
                      {
                        if (v19 == 1155)
                        {
                          if (v15 != 26)
                            goto LABEL_9;
                          if (*v5 == 1155)
                          {
                            v268 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1155;
                            v268 = (CoreML::Specification::ConstantPaddingLayerParams *)operator new();
                            CoreML::Specification::ConstantPaddingLayerParams::ConstantPaddingLayerParams(v268);
                            *v6 = v268;
                          }
                          v483 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v483 < 0)
                          {
                            v484 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v484 < 0)
                              return 0;
                          }
                          else
                          {
                            v484 = *v483;
                            *(_QWORD *)a2 = v483 + 1;
                          }
                          v934 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v484);
                          if ((v934 & 0x8000000000000000) != 0)
                            return 0;
                          v936 = v934;
                          result = CoreML::Specification::ConstantPaddingLayerParams::MergePartialFromCodedStream(v268, (char **)a2, v935);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v936))
                            return 0;
                        }
                        else
                        {
                          if (v19 != 1170 || v15 != 146)
                            goto LABEL_9;
                          if (*v5 == 1170)
                          {
                            v103 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1170;
                            v103 = (CoreML::Specification::RandomNormalLikeLayerParams *)operator new();
                            CoreML::Specification::RandomNormalLikeLayerParams::RandomNormalLikeLayerParams(v103);
                            *v6 = v103;
                          }
                          v375 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v375 < 0)
                          {
                            v376 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v376 < 0)
                              return 0;
                          }
                          else
                          {
                            v376 = *v375;
                            *(_QWORD *)a2 = v375 + 1;
                          }
                          v777 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v376);
                          if ((v777 & 0x8000000000000000) != 0)
                            return 0;
                          v779 = v777;
                          result = CoreML::Specification::RandomNormalLikeLayerParams::MergePartialFromCodedStream(v103, (char **)a2, v778);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v779))
                            return 0;
                        }
                      }
                      else if (v19 == 1175)
                      {
                        if (v15 != 186)
                          goto LABEL_9;
                        if (*v5 == 1175)
                        {
                          v207 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1175;
                          v207 = (CoreML::Specification::RandomNormalStaticLayerParams *)operator new();
                          CoreML::Specification::RandomNormalStaticLayerParams::RandomNormalStaticLayerParams(v207);
                          *v6 = v207;
                        }
                        v427 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v427 < 0)
                        {
                          v428 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v428 < 0)
                            return 0;
                        }
                        else
                        {
                          v428 = *v427;
                          *(_QWORD *)a2 = v427 + 1;
                        }
                        v852 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v428);
                        if ((v852 & 0x8000000000000000) != 0)
                          return 0;
                        v854 = v852;
                        result = CoreML::Specification::RandomNormalStaticLayerParams::MergePartialFromCodedStream(v207, (char **)a2, v853);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v854))
                          return 0;
                      }
                      else if (v19 == 1180)
                      {
                        if (v15 != 226)
                          goto LABEL_9;
                        if (*v5 == 1180)
                        {
                          v208 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1180;
                          v208 = (CoreML::Specification::RandomNormalDynamicLayerParams *)operator new();
                          CoreML::Specification::RandomNormalDynamicLayerParams::RandomNormalDynamicLayerParams(v208);
                          *v6 = v208;
                        }
                        v429 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v429 < 0)
                        {
                          v430 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v430 < 0)
                            return 0;
                        }
                        else
                        {
                          v430 = *v429;
                          *(_QWORD *)a2 = v429 + 1;
                        }
                        v855 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v430);
                        if ((v855 & 0x8000000000000000) != 0)
                          return 0;
                        v857 = v855;
                        result = CoreML::Specification::RandomNormalDynamicLayerParams::MergePartialFromCodedStream(v208, (char **)a2, v856);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v857))
                          return 0;
                      }
                      else
                      {
                        if (v19 != 1190 || v15 != 50)
                          goto LABEL_9;
                        if (*v5 == 1190)
                        {
                          v57 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1190;
                          v57 = (CoreML::Specification::RandomUniformLikeLayerParams *)operator new();
                          CoreML::Specification::RandomUniformLikeLayerParams::RandomUniformLikeLayerParams(v57);
                          *v6 = v57;
                        }
                        v335 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v335 < 0)
                        {
                          v336 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v336 < 0)
                            return 0;
                        }
                        else
                        {
                          v336 = *v335;
                          *(_QWORD *)a2 = v335 + 1;
                        }
                        v719 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v336);
                        if ((v719 & 0x8000000000000000) != 0)
                          return 0;
                        v721 = v719;
                        result = CoreML::Specification::RandomUniformLikeLayerParams::MergePartialFromCodedStream(v57, (char **)a2, v720);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v721))
                          return 0;
                      }
                    }
                    else if (v15 >> 3 <= 0x473)
                    {
                      if (v19 == 1130)
                      {
                        if (v15 != 82)
                          goto LABEL_9;
                        if (*v5 == 1130)
                        {
                          v249 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1130;
                          v249 = (CoreML::Specification::FlattenTo2DLayerParams *)operator new();
                          CoreML::Specification::FlattenTo2DLayerParams::FlattenTo2DLayerParams(v249);
                          *v6 = v249;
                        }
                        v463 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v463 < 0)
                        {
                          v464 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v464 < 0)
                            return 0;
                        }
                        else
                        {
                          v464 = *v463;
                          *(_QWORD *)a2 = v463 + 1;
                        }
                        v906 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v464);
                        if ((v906 & 0x8000000000000000) != 0)
                          return 0;
                        v908 = v906;
                        result = CoreML::Specification::FlattenTo2DLayerParams::MergePartialFromCodedStream(v249, (char **)a2, v907);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v908))
                          return 0;
                      }
                      else
                      {
                        if (v19 != 1135 || v15 != 122)
                          goto LABEL_9;
                        if (*v5 != 1135)
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1135;
                          v81 = (CoreML::Specification::ReshapeLikeLayerParams *)operator new();
                          CoreML::Specification::ReshapeLikeLayerParams::ReshapeLikeLayerParams(v81);
                          *v6 = v81;
                        }
                        v82 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v82 < 0)
                        {
                          v83 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v83 < 0)
                            return 0;
                        }
                        else
                        {
                          v83 = *v82;
                          *(_QWORD *)a2 = v82 + 1;
                        }
                        v580 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v83);
                        if ((v580 & 0x8000000000000000) != 0)
                          return 0;
                        v582 = v580;
                        result = CoreML::Specification::ReshapeLikeLayerParams::MergePartialFromCodedStream((CoreML::Specification::ReshapeLikeLayerParams *)v580, (char **)a2, v581);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v582))
                          return 0;
                      }
                    }
                    else if (v19 == 1140)
                    {
                      if (v15 != 162)
                        goto LABEL_9;
                      if (*v5 == 1140)
                      {
                        v163 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1140;
                        v163 = (CoreML::Specification::ReshapeStaticLayerParams *)operator new();
                        CoreML::Specification::ReshapeStaticLayerParams::ReshapeStaticLayerParams(v163);
                        *v6 = v163;
                      }
                      v393 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v393 < 0)
                      {
                        v394 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v394 < 0)
                          return 0;
                      }
                      else
                      {
                        v394 = *v393;
                        *(_QWORD *)a2 = v393 + 1;
                      }
                      v804 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v394);
                      if ((v804 & 0x8000000000000000) != 0)
                        return 0;
                      v806 = v804;
                      result = CoreML::Specification::ReshapeStaticLayerParams::MergePartialFromCodedStream(v163, (char **)a2, v805);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v806))
                        return 0;
                    }
                    else if (v19 == 1145)
                    {
                      if (v15 != 202)
                        goto LABEL_9;
                      if (*v5 != 1145)
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1145;
                        v164 = (CoreML::Specification::ReshapeDynamicLayerParams *)operator new();
                        CoreML::Specification::ReshapeDynamicLayerParams::ReshapeDynamicLayerParams(v164);
                        *v6 = v164;
                      }
                      v165 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v165 < 0)
                      {
                        v166 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v166 < 0)
                          return 0;
                      }
                      else
                      {
                        v166 = *v165;
                        *(_QWORD *)a2 = v165 + 1;
                      }
                      v619 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v166);
                      if ((v619 & 0x8000000000000000) != 0)
                        return 0;
                      v621 = v619;
                      result = CoreML::Specification::ReshapeDynamicLayerParams::MergePartialFromCodedStream((CoreML::Specification::ReshapeDynamicLayerParams *)v619, (char **)a2, v620);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v621))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 1150 || v15 != 242)
                        goto LABEL_9;
                      if (*v5 == 1150)
                      {
                        v36 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1150;
                        v36 = (CoreML::Specification::RankPreservingReshapeLayerParams *)operator new();
                        CoreML::Specification::RankPreservingReshapeLayerParams::RankPreservingReshapeLayerParams(v36);
                        *v6 = v36;
                      }
                      v315 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v315 < 0)
                      {
                        v316 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v316 < 0)
                          return 0;
                      }
                      else
                      {
                        v316 = *v315;
                        *(_QWORD *)a2 = v315 + 1;
                      }
                      v690 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v316);
                      if ((v690 & 0x8000000000000000) != 0)
                        return 0;
                      v692 = v690;
                      result = CoreML::Specification::RankPreservingReshapeLayerParams::MergePartialFromCodedStream(v36, (char **)a2, v691);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v692))
                        return 0;
                    }
                  }
                  else if (v15 >> 3 <= 0x531)
                  {
                    if (v15 >> 3 > 0x50E)
                    {
                      if (v15 >> 3 <= 0x522)
                      {
                        if (v19 == 1295)
                        {
                          if (v15 != 122)
                            goto LABEL_9;
                          if (*v5 == 1295)
                          {
                            v271 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1295;
                            v271 = (CoreML::Specification::ReduceLogSumExpLayerParams *)operator new();
                            CoreML::Specification::ReduceLogSumExpLayerParams::ReduceLogSumExpLayerParams(v271);
                            *v6 = v271;
                          }
                          v489 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v489 < 0)
                          {
                            v490 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v490 < 0)
                              return 0;
                          }
                          else
                          {
                            v490 = *v489;
                            *(_QWORD *)a2 = v489 + 1;
                          }
                          v943 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v490);
                          if ((v943 & 0x8000000000000000) != 0)
                            return 0;
                          v945 = v943;
                          result = CoreML::Specification::ReduceLogSumExpLayerParams::MergePartialFromCodedStream(v271, (char **)a2, v944);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v945))
                            return 0;
                        }
                        else
                        {
                          if (v19 != 1313 || v15 != 10)
                            goto LABEL_9;
                          if (*v5 != 1313)
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1313;
                            v106 = (CoreML::Specification::WhereNonZeroLayerParams *)operator new();
                            CoreML::Specification::WhereNonZeroLayerParams::WhereNonZeroLayerParams(v106);
                            *v6 = v106;
                          }
                          v107 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v107 < 0)
                          {
                            v108 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v108 < 0)
                              return 0;
                          }
                          else
                          {
                            v108 = *v107;
                            *(_QWORD *)a2 = v107 + 1;
                          }
                          v592 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v108);
                          if ((v592 & 0x8000000000000000) != 0)
                            return 0;
                          v594 = v592;
                          result = CoreML::Specification::WhereNonZeroLayerParams::MergePartialFromCodedStream((CoreML::Specification::WhereNonZeroLayerParams *)v592, (char **)a2, v593);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v594))
                            return 0;
                        }
                      }
                      else if (v19 == 1315)
                      {
                        if (v15 != 26)
                          goto LABEL_9;
                        if (*v5 == 1315)
                        {
                          v217 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1315;
                          v217 = (CoreML::Specification::MatrixBandPartLayerParams *)operator new();
                          CoreML::Specification::MatrixBandPartLayerParams::MatrixBandPartLayerParams(v217);
                          *v6 = v217;
                        }
                        v435 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v435 < 0)
                        {
                          v436 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v436 < 0)
                            return 0;
                        }
                        else
                        {
                          v436 = *v435;
                          *(_QWORD *)a2 = v435 + 1;
                        }
                        v864 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v436);
                        if ((v864 & 0x8000000000000000) != 0)
                          return 0;
                        v866 = v864;
                        result = CoreML::Specification::MatrixBandPartLayerParams::MergePartialFromCodedStream(v217, (char **)a2, v865);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v866))
                          return 0;
                      }
                      else if (v19 == 1320)
                      {
                        if (v15 != 66)
                          goto LABEL_9;
                        if (*v5 == 1320)
                        {
                          v218 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1320;
                          v218 = (CoreML::Specification::LowerTriangularLayerParams *)operator new();
                          CoreML::Specification::LowerTriangularLayerParams::LowerTriangularLayerParams(v218);
                          *v6 = v218;
                        }
                        v437 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v437 < 0)
                        {
                          v438 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v438 < 0)
                            return 0;
                        }
                        else
                        {
                          v438 = *v437;
                          *(_QWORD *)a2 = v437 + 1;
                        }
                        v867 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v438);
                        if ((v867 & 0x8000000000000000) != 0)
                          return 0;
                        v869 = v867;
                        result = CoreML::Specification::LowerTriangularLayerParams::MergePartialFromCodedStream(v218, (char **)a2, v868);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v869))
                          return 0;
                      }
                      else
                      {
                        if (v19 != 1325 || v15 != 106)
                          goto LABEL_9;
                        if (*v5 == 1325)
                        {
                          v60 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1325;
                          v60 = (CoreML::Specification::UpperTriangularLayerParams *)operator new();
                          CoreML::Specification::UpperTriangularLayerParams::UpperTriangularLayerParams(v60);
                          *v6 = v60;
                        }
                        v341 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v341 < 0)
                        {
                          v342 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v342 < 0)
                            return 0;
                        }
                        else
                        {
                          v342 = *v341;
                          *(_QWORD *)a2 = v341 + 1;
                        }
                        v728 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v342);
                        if ((v728 & 0x8000000000000000) != 0)
                          return 0;
                        v730 = v728;
                        result = CoreML::Specification::UpperTriangularLayerParams::MergePartialFromCodedStream(v60, (char **)a2, v729);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v730))
                          return 0;
                      }
                    }
                    else if (v15 >> 3 <= 0x4FF)
                    {
                      if (v19 == 1270)
                      {
                        if (v15 != 178)
                          goto LABEL_9;
                        if (*v5 == 1270)
                        {
                          v252 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1270;
                          v252 = (CoreML::Specification::ReduceSumLayerParams *)operator new();
                          CoreML::Specification::ReduceSumLayerParams::ReduceSumLayerParams(v252);
                          *v6 = v252;
                        }
                        v469 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v469 < 0)
                        {
                          v470 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v470 < 0)
                            return 0;
                        }
                        else
                        {
                          v470 = *v469;
                          *(_QWORD *)a2 = v469 + 1;
                        }
                        v914 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v470);
                        if ((v914 & 0x8000000000000000) != 0)
                          return 0;
                        v916 = v914;
                        result = CoreML::Specification::ReduceSumLayerParams::MergePartialFromCodedStream(v252, (char **)a2, v915);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v916))
                          return 0;
                      }
                      else
                      {
                        if (v19 != 1275 || v15 != 218)
                          goto LABEL_9;
                        if (*v5 == 1275)
                        {
                          v86 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1275;
                          v86 = (CoreML::Specification::ReduceProdLayerParams *)operator new();
                          CoreML::Specification::ReduceProdLayerParams::ReduceProdLayerParams(v86);
                          *v6 = v86;
                        }
                        v361 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v361 < 0)
                        {
                          v362 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v362 < 0)
                            return 0;
                        }
                        else
                        {
                          v362 = *v361;
                          *(_QWORD *)a2 = v361 + 1;
                        }
                        v757 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v362);
                        if ((v757 & 0x8000000000000000) != 0)
                          return 0;
                        v759 = v757;
                        result = CoreML::Specification::ReduceProdLayerParams::MergePartialFromCodedStream(v86, (char **)a2, v758);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v759))
                          return 0;
                      }
                    }
                    else if (v19 == 1280)
                    {
                      if (v15 != 2)
                        goto LABEL_9;
                      if (*v5 == 1280)
                      {
                        v173 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1280;
                        v173 = (CoreML::Specification::ReduceMeanLayerParams *)operator new();
                        CoreML::Specification::ReduceMeanLayerParams::ReduceMeanLayerParams(v173);
                        *v6 = v173;
                      }
                      v401 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v401 < 0)
                      {
                        v402 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v402 < 0)
                          return 0;
                      }
                      else
                      {
                        v402 = *v401;
                        *(_QWORD *)a2 = v401 + 1;
                      }
                      v815 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v402);
                      if ((v815 & 0x8000000000000000) != 0)
                        return 0;
                      v817 = v815;
                      result = CoreML::Specification::ReduceMeanLayerParams::MergePartialFromCodedStream(v173, (char **)a2, v816);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v817))
                        return 0;
                    }
                    else if (v19 == 1285)
                    {
                      if (v15 != 42)
                        goto LABEL_9;
                      if (*v5 == 1285)
                      {
                        v174 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1285;
                        v174 = (CoreML::Specification::ReduceLogSumLayerParams *)operator new();
                        CoreML::Specification::ReduceLogSumLayerParams::ReduceLogSumLayerParams(v174);
                        *v6 = v174;
                      }
                      v403 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v403 < 0)
                      {
                        v404 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v404 < 0)
                          return 0;
                      }
                      else
                      {
                        v404 = *v403;
                        *(_QWORD *)a2 = v403 + 1;
                      }
                      v818 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v404);
                      if ((v818 & 0x8000000000000000) != 0)
                        return 0;
                      v820 = v818;
                      result = CoreML::Specification::ReduceLogSumLayerParams::MergePartialFromCodedStream(v174, (char **)a2, v819);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v820))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 1290 || v15 != 82)
                        goto LABEL_9;
                      if (*v5 == 1290)
                      {
                        v42 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1290;
                        v42 = (CoreML::Specification::ReduceSumSquareLayerParams *)operator new();
                        CoreML::Specification::ReduceSumSquareLayerParams::ReduceSumSquareLayerParams(v42);
                        *v6 = v42;
                      }
                      v319 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v319 < 0)
                      {
                        v320 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v320 < 0)
                          return 0;
                      }
                      else
                      {
                        v320 = *v319;
                        *(_QWORD *)a2 = v319 + 1;
                      }
                      v696 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v320);
                      if ((v696 & 0x8000000000000000) != 0)
                        return 0;
                      v698 = v696;
                      result = CoreML::Specification::ReduceSumSquareLayerParams::MergePartialFromCodedStream(v42, (char **)a2, v697);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v698))
                        return 0;
                    }
                  }
                  else
                  {
                    if (v15 >> 3 > 0x5A9)
                    {
                      switch(v19)
                      {
                        case 0x5AFu:
                          if (v15 != 122)
                            goto LABEL_9;
                          if (*v5 == 1455)
                          {
                            v30 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1455;
                            v30 = (CoreML::Specification::CumSumLayerParams *)operator new();
                            CoreML::Specification::CumSumLayerParams::CumSumLayerParams(v30);
                            *v6 = v30;
                          }
                          v508 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v508 < 0)
                          {
                            v509 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v509 < 0)
                              return 0;
                          }
                          else
                          {
                            v509 = *v508;
                            *(_QWORD *)a2 = v508 + 1;
                          }
                          v958 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v509);
                          if ((v958 & 0x8000000000000000) != 0)
                            return 0;
                          v960 = v958;
                          result = CoreML::Specification::CumSumLayerParams::MergePartialFromCodedStream(v30, (char **)a2, v959);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v960))
                            return 0;
                          continue;
                        case 0x5B0u:
                        case 0x5B1u:
                        case 0x5B2u:
                        case 0x5B3u:
                        case 0x5B6u:
                        case 0x5B7u:
                        case 0x5B8u:
                        case 0x5BBu:
                        case 0x5BCu:
                        case 0x5BDu:
                          goto LABEL_9;
                        case 0x5B4u:
                          if (v15 != 162)
                            goto LABEL_9;
                          if (*v5 == 1460)
                          {
                            v282 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1460;
                            v282 = (CoreML::Specification::ClampedReLULayerParams *)operator new();
                            CoreML::Specification::ClampedReLULayerParams::ClampedReLULayerParams(v282);
                            *v6 = v282;
                          }
                          v510 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v510 < 0)
                          {
                            v511 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v511 < 0)
                              return 0;
                          }
                          else
                          {
                            v511 = *v510;
                            *(_QWORD *)a2 = v510 + 1;
                          }
                          v961 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v511);
                          if ((v961 & 0x8000000000000000) != 0)
                            return 0;
                          v963 = v961;
                          result = CoreML::Specification::ClampedReLULayerParams::MergePartialFromCodedStream(v282, (char **)a2, v962);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v963))
                            return 0;
                          continue;
                        case 0x5B5u:
                          if (v15 != 170)
                            goto LABEL_9;
                          if (*v5 == 1461)
                          {
                            v283 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1461;
                            v283 = (CoreML::Specification::ArgSortLayerParams *)operator new();
                            CoreML::Specification::ArgSortLayerParams::ArgSortLayerParams(v283);
                            *v6 = v283;
                          }
                          v512 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v512 < 0)
                          {
                            v513 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v513 < 0)
                              return 0;
                          }
                          else
                          {
                            v513 = *v512;
                            *(_QWORD *)a2 = v512 + 1;
                          }
                          v964 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v513);
                          if ((v964 & 0x8000000000000000) != 0)
                            return 0;
                          v966 = v964;
                          result = CoreML::Specification::ArgSortLayerParams::MergePartialFromCodedStream(v283, (char **)a2, v965);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v966))
                            return 0;
                          continue;
                        case 0x5B9u:
                          if (v15 != 202)
                            goto LABEL_9;
                          if (*v5 == 1465)
                          {
                            v284 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1465;
                            v284 = (CoreML::Specification::Pooling3DLayerParams *)operator new();
                            CoreML::Specification::Pooling3DLayerParams::Pooling3DLayerParams(v284);
                            *v6 = v284;
                          }
                          v514 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v514 < 0)
                          {
                            v515 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v515 < 0)
                              return 0;
                          }
                          else
                          {
                            v515 = *v514;
                            *(_QWORD *)a2 = v514 + 1;
                          }
                          v967 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v515);
                          if ((v967 & 0x8000000000000000) != 0)
                            return 0;
                          v969 = v967;
                          result = CoreML::Specification::Pooling3DLayerParams::MergePartialFromCodedStream(v284, (char **)a2, v968);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v969))
                            return 0;
                          continue;
                        case 0x5BAu:
                          if (v15 != 210)
                            goto LABEL_9;
                          if (*v5 == 1466)
                          {
                            v285 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1466;
                            v285 = (CoreML::Specification::GlobalPooling3DLayerParams *)operator new();
                            CoreML::Specification::GlobalPooling3DLayerParams::GlobalPooling3DLayerParams(v285);
                            *v6 = v285;
                          }
                          v516 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v516 < 0)
                          {
                            v517 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v517 < 0)
                              return 0;
                          }
                          else
                          {
                            v517 = *v516;
                            *(_QWORD *)a2 = v516 + 1;
                          }
                          v970 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v517);
                          if ((v970 & 0x8000000000000000) != 0)
                            return 0;
                          v972 = v970;
                          result = CoreML::Specification::GlobalPooling3DLayerParams::MergePartialFromCodedStream(v285, (char **)a2, v971);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v972))
                            return 0;
                          continue;
                        case 0x5BEu:
                          if (v15 != 242)
                            goto LABEL_9;
                          if (*v5 == 1470)
                          {
                            v286 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1470;
                            v286 = (CoreML::Specification::SliceBySizeLayerParams *)operator new();
                            CoreML::Specification::SliceBySizeLayerParams::SliceBySizeLayerParams(v286);
                            *v6 = v286;
                          }
                          v518 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v518 < 0)
                          {
                            v519 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v519 < 0)
                              return 0;
                          }
                          else
                          {
                            v519 = *v518;
                            *(_QWORD *)a2 = v518 + 1;
                          }
                          v973 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v519);
                          if ((v973 & 0x8000000000000000) != 0)
                            return 0;
                          v975 = v973;
                          result = CoreML::Specification::SliceBySizeLayerParams::MergePartialFromCodedStream(v286, (char **)a2, v974);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v975))
                            return 0;
                          continue;
                        case 0x5BFu:
                          if (v15 != 250)
                            goto LABEL_9;
                          if (*v5 == 1471)
                          {
                            v287 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1471;
                            v287 = (CoreML::Specification::Convolution3DLayerParams *)operator new();
                            CoreML::Specification::Convolution3DLayerParams::Convolution3DLayerParams(v287);
                            *v6 = v287;
                          }
                          v520 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v520 < 0)
                          {
                            v521 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v521 < 0)
                              return 0;
                          }
                          else
                          {
                            v521 = *v520;
                            *(_QWORD *)a2 = v520 + 1;
                          }
                          v976 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v521);
                          if ((v976 & 0x8000000000000000) != 0)
                            return 0;
                          v978 = v976;
                          result = CoreML::Specification::Convolution3DLayerParams::MergePartialFromCodedStream(v287, a2, v977);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v978))
                            return 0;
                          continue;
                        default:
                          if (v19 != 1450 || v15 != 82)
                            goto LABEL_9;
                          if (*v5 == 1450)
                          {
                            v281 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1450;
                            v281 = (CoreML::Specification::OneHotLayerParams *)operator new();
                            CoreML::Specification::OneHotLayerParams::OneHotLayerParams(v281);
                            *v6 = v281;
                          }
                          v522 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v522 < 0)
                          {
                            v523 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v523 < 0)
                              return 0;
                          }
                          else
                          {
                            v523 = *v522;
                            *(_QWORD *)a2 = v522 + 1;
                          }
                          v979 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v523);
                          if ((v979 & 0x8000000000000000) != 0)
                            return 0;
                          v981 = v979;
                          result = CoreML::Specification::OneHotLayerParams::MergePartialFromCodedStream(v281, (char **)a2, v980);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v981))
                            return 0;
                          continue;
                      }
                    }
                    if (v19 == 1330)
                    {
                      if (v15 != 146)
                        goto LABEL_9;
                      if (*v5 != 1330)
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1330;
                        v115 = (CoreML::Specification::WhereBroadcastableLayerParams *)operator new();
                        CoreML::Specification::WhereBroadcastableLayerParams::WhereBroadcastableLayerParams(v115);
                        *v6 = v115;
                      }
                      v116 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v116 < 0)
                      {
                        v117 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v117 < 0)
                          return 0;
                      }
                      else
                      {
                        v117 = *v116;
                        *(_QWORD *)a2 = v116 + 1;
                      }
                      v495 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v117);
                      if ((v495 & 0x8000000000000000) != 0)
                        return 0;
                      v497 = v495;
                      result = CoreML::Specification::WhereBroadcastableLayerParams::MergePartialFromCodedStream((CoreML::Specification::WhereBroadcastableLayerParams *)v495, (char **)a2, v496);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v497))
                        return 0;
                    }
                    else if (v19 == 1350)
                    {
                      if (v15 != 50)
                        goto LABEL_9;
                      if (*v5 == 1350)
                      {
                        v118 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1350;
                        v118 = (CoreML::Specification::LayerNormalizationLayerParams *)operator new();
                        CoreML::Specification::LayerNormalizationLayerParams::LayerNormalizationLayerParams(v118);
                        *v6 = v118;
                      }
                      v293 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v293 < 0)
                      {
                        v294 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v294 < 0)
                          return 0;
                      }
                      else
                      {
                        v294 = *v293;
                        *(_QWORD *)a2 = v293 + 1;
                      }
                      v501 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v294);
                      if ((v501 & 0x8000000000000000) != 0)
                        return 0;
                      v503 = v501;
                      result = CoreML::Specification::LayerNormalizationLayerParams::MergePartialFromCodedStream(v118, (char **)a2, v502);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v503))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 1400 || v15 != 194)
                        goto LABEL_9;
                      if (*v5 == 1400)
                      {
                        v64 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1400;
                        v64 = (CoreML::Specification::NonMaximumSuppressionLayerParams *)operator new();
                        CoreML::Specification::NonMaximumSuppressionLayerParams::NonMaximumSuppressionLayerParams(v64);
                        *v6 = v64;
                      }
                      v291 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v291 < 0)
                      {
                        v292 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v292 < 0)
                          return 0;
                      }
                      else
                      {
                        v292 = *v291;
                        *(_QWORD *)a2 = v291 + 1;
                      }
                      v498 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v292);
                      if ((v498 & 0x8000000000000000) != 0)
                        return 0;
                      v500 = v498;
                      result = CoreML::Specification::NonMaximumSuppressionLayerParams::MergePartialFromCodedStream(v64, (char **)a2, v499);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v500))
                        return 0;
                    }
                  }
                }
                else if (v15 >> 3 > 0x3D3)
                {
                  if (v15 >> 3 > 0x428)
                  {
                    if (v15 >> 3 > 0x44B)
                    {
                      if (v15 >> 3 <= 0x455)
                      {
                        if (v19 == 1100)
                        {
                          if (v15 != 98)
                            goto LABEL_9;
                          if (*v5 != 1100)
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1100;
                            v273 = (CoreML::Specification::BroadcastToLikeLayerParams *)operator new();
                            CoreML::Specification::BroadcastToLikeLayerParams::BroadcastToLikeLayerParams(v273);
                            *v6 = v273;
                          }
                          v274 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v274 < 0)
                          {
                            v275 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v275 < 0)
                              return 0;
                          }
                          else
                          {
                            v275 = *v274;
                            *(_QWORD *)a2 = v274 + 1;
                          }
                          v678 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v275);
                          if ((v678 & 0x8000000000000000) != 0)
                            return 0;
                          v680 = v678;
                          result = CoreML::Specification::BroadcastToLikeLayerParams::MergePartialFromCodedStream((CoreML::Specification::BroadcastToLikeLayerParams *)v678, (char **)a2, v679);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v680))
                            return 0;
                        }
                        else
                        {
                          if (v19 != 1105 || v15 != 138)
                            goto LABEL_9;
                          if (*v5 == 1105)
                          {
                            v110 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 1105;
                            v110 = (CoreML::Specification::BroadcastToStaticLayerParams *)operator new();
                            CoreML::Specification::BroadcastToStaticLayerParams::BroadcastToStaticLayerParams(v110);
                            *v6 = v110;
                          }
                          v383 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v383 < 0)
                          {
                            v384 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v384 < 0)
                              return 0;
                          }
                          else
                          {
                            v384 = *v383;
                            *(_QWORD *)a2 = v383 + 1;
                          }
                          v789 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v384);
                          if ((v789 & 0x8000000000000000) != 0)
                            return 0;
                          v791 = v789;
                          result = CoreML::Specification::BroadcastToStaticLayerParams::MergePartialFromCodedStream(v110, (char **)a2, v790);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v791))
                            return 0;
                        }
                      }
                      else if (v19 == 1110)
                      {
                        if (v15 != 178)
                          goto LABEL_9;
                        if (*v5 != 1110)
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1110;
                          v221 = (CoreML::Specification::BroadcastToDynamicLayerParams *)operator new();
                          CoreML::Specification::BroadcastToDynamicLayerParams::BroadcastToDynamicLayerParams(v221);
                          *v6 = v221;
                        }
                        v222 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v222 < 0)
                        {
                          v223 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v223 < 0)
                            return 0;
                        }
                        else
                        {
                          v223 = *v222;
                          *(_QWORD *)a2 = v222 + 1;
                        }
                        v651 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v223);
                        if ((v651 & 0x8000000000000000) != 0)
                          return 0;
                        v653 = v651;
                        result = CoreML::Specification::BroadcastToDynamicLayerParams::MergePartialFromCodedStream((CoreML::Specification::BroadcastToDynamicLayerParams *)v651, (char **)a2, v652);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v653))
                          return 0;
                      }
                      else if (v19 == 1120)
                      {
                        if (v15 != 2)
                          goto LABEL_9;
                        if (*v5 == 1120)
                        {
                          v224 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1120;
                          v224 = (CoreML::Specification::SqueezeLayerParams *)operator new();
                          CoreML::Specification::SqueezeLayerParams::SqueezeLayerParams(v224);
                          *v6 = v224;
                        }
                        v443 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v443 < 0)
                        {
                          v444 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v444 < 0)
                            return 0;
                        }
                        else
                        {
                          v444 = *v443;
                          *(_QWORD *)a2 = v443 + 1;
                        }
                        v876 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v444);
                        if ((v876 & 0x8000000000000000) != 0)
                          return 0;
                        v878 = v876;
                        result = CoreML::Specification::SqueezeLayerParams::MergePartialFromCodedStream(v224, (char **)a2, v877);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v878))
                          return 0;
                      }
                      else
                      {
                        if (v19 != 1125 || v15 != 42)
                          goto LABEL_9;
                        if (*v5 == 1125)
                        {
                          v62 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1125;
                          v62 = (CoreML::Specification::ExpandDimsLayerParams *)operator new();
                          CoreML::Specification::ExpandDimsLayerParams::ExpandDimsLayerParams(v62);
                          *v6 = v62;
                        }
                        v345 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v345 < 0)
                        {
                          v346 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v346 < 0)
                            return 0;
                        }
                        else
                        {
                          v346 = *v345;
                          *(_QWORD *)a2 = v345 + 1;
                        }
                        v734 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v346);
                        if ((v734 & 0x8000000000000000) != 0)
                          return 0;
                        v736 = v734;
                        result = CoreML::Specification::ExpandDimsLayerParams::MergePartialFromCodedStream(v62, (char **)a2, v735);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v736))
                          return 0;
                      }
                    }
                    else if (v15 >> 3 <= 0x437)
                    {
                      if (v19 == 1065)
                      {
                        if (v15 != 74)
                          goto LABEL_9;
                        if (*v5 != 1065)
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1065;
                          v254 = (CoreML::Specification::GetShapeLayerParams *)operator new();
                          CoreML::Specification::GetShapeLayerParams::GetShapeLayerParams(v254);
                          *v6 = v254;
                        }
                        v255 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v255 < 0)
                        {
                          v256 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v256 < 0)
                            return 0;
                        }
                        else
                        {
                          v256 = *v255;
                          *(_QWORD *)a2 = v255 + 1;
                        }
                        v669 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v256);
                        if ((v669 & 0x8000000000000000) != 0)
                          return 0;
                        v671 = v669;
                        result = CoreML::Specification::GetShapeLayerParams::MergePartialFromCodedStream((CoreML::Specification::GetShapeLayerParams *)v669, (char **)a2, v670);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v671))
                          return 0;
                      }
                      else
                      {
                        if (v19 != 1070 || v15 != 114)
                          goto LABEL_9;
                        if (*v5 == 1070)
                        {
                          v88 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1070;
                          v88 = (CoreML::Specification::LoadConstantNDLayerParams *)operator new();
                          CoreML::Specification::LoadConstantNDLayerParams::LoadConstantNDLayerParams(v88);
                          *v6 = v88;
                        }
                        v365 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v365 < 0)
                        {
                          v366 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v366 < 0)
                            return 0;
                        }
                        else
                        {
                          v366 = *v365;
                          *(_QWORD *)a2 = v365 + 1;
                        }
                        v763 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v366);
                        if ((v763 & 0x8000000000000000) != 0)
                          return 0;
                        v765 = v763;
                        result = CoreML::Specification::LoadConstantNDLayerParams::MergePartialFromCodedStream(v88, (char **)a2, v764);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v765))
                          return 0;
                      }
                    }
                    else if (v19 == 1080)
                    {
                      if (v15 != 194)
                        goto LABEL_9;
                      if (*v5 == 1080)
                      {
                        v177 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1080;
                        v177 = (CoreML::Specification::FillLikeLayerParams *)operator new();
                        CoreML::Specification::FillLikeLayerParams::FillLikeLayerParams(v177);
                        *v6 = v177;
                      }
                      v409 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v409 < 0)
                      {
                        v410 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v410 < 0)
                          return 0;
                      }
                      else
                      {
                        v410 = *v409;
                        *(_QWORD *)a2 = v409 + 1;
                      }
                      v827 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v410);
                      if ((v827 & 0x8000000000000000) != 0)
                        return 0;
                      v829 = v827;
                      result = CoreML::Specification::FillLikeLayerParams::MergePartialFromCodedStream(v177, (char **)a2, v828);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v829))
                        return 0;
                    }
                    else if (v19 == 1085)
                    {
                      if (v15 != 234)
                        goto LABEL_9;
                      if (*v5 == 1085)
                      {
                        v178 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1085;
                        v178 = (CoreML::Specification::FillStaticLayerParams *)operator new();
                        CoreML::Specification::FillStaticLayerParams::FillStaticLayerParams(v178);
                        *v6 = v178;
                      }
                      v411 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v411 < 0)
                      {
                        v412 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v412 < 0)
                          return 0;
                      }
                      else
                      {
                        v412 = *v411;
                        *(_QWORD *)a2 = v411 + 1;
                      }
                      v830 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v412);
                      if ((v830 & 0x8000000000000000) != 0)
                        return 0;
                      v832 = v830;
                      result = CoreML::Specification::FillStaticLayerParams::MergePartialFromCodedStream(v178, (char **)a2, v831);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v832))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 1090 || v15 != 18)
                        goto LABEL_9;
                      if (*v5 == 1090)
                      {
                        v44 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1090;
                        v44 = (CoreML::Specification::FillDynamicLayerParams *)operator new();
                        CoreML::Specification::FillDynamicLayerParams::FillDynamicLayerParams(v44);
                        *v6 = v44;
                      }
                      v323 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v323 < 0)
                      {
                        v324 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v324 < 0)
                          return 0;
                      }
                      else
                      {
                        v324 = *v323;
                        *(_QWORD *)a2 = v323 + 1;
                      }
                      v702 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v324);
                      if ((v702 & 0x8000000000000000) != 0)
                        return 0;
                      v704 = v702;
                      result = CoreML::Specification::FillDynamicLayerParams::MergePartialFromCodedStream(v44, (char **)a2, v703);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v704))
                        return 0;
                    }
                  }
                  else if (v15 >> 3 > 0x3F6)
                  {
                    if (v15 >> 3 <= 0x400)
                    {
                      if (v19 == 1015)
                      {
                        if (v15 != 186)
                          goto LABEL_9;
                        if (*v5 == 1015)
                        {
                          v264 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1015;
                          v264 = (CoreML::Specification::TopKLayerParams *)operator new();
                          CoreML::Specification::TopKLayerParams::TopKLayerParams(v264);
                          *v6 = v264;
                        }
                        v481 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v481 < 0)
                        {
                          v482 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v482 < 0)
                            return 0;
                        }
                        else
                        {
                          v482 = *v481;
                          *(_QWORD *)a2 = v481 + 1;
                        }
                        v931 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v482);
                        if ((v931 & 0x8000000000000000) != 0)
                          return 0;
                        v933 = v931;
                        result = CoreML::Specification::TopKLayerParams::MergePartialFromCodedStream(v264, (char **)a2, v932);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v933))
                          return 0;
                      }
                      else
                      {
                        if (v19 != 1020 || v15 != 226)
                          goto LABEL_9;
                        if (*v5 == 1020)
                        {
                          v99 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 1020;
                          v99 = (CoreML::Specification::ArgMinLayerParams *)operator new();
                          CoreML::Specification::ArgMinLayerParams::ArgMinLayerParams(v99);
                          *v6 = v99;
                        }
                        v373 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v373 < 0)
                        {
                          v374 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v374 < 0)
                            return 0;
                        }
                        else
                        {
                          v374 = *v373;
                          *(_QWORD *)a2 = v373 + 1;
                        }
                        v774 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v374);
                        if ((v774 & 0x8000000000000000) != 0)
                          return 0;
                        v776 = v774;
                        result = CoreML::Specification::ArgMinLayerParams::MergePartialFromCodedStream(v99, (char **)a2, v775);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v776))
                          return 0;
                      }
                    }
                    else if (v19 == 1025)
                    {
                      if (v15 != 10)
                        goto LABEL_9;
                      if (*v5 == 1025)
                      {
                        v199 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1025;
                        v199 = (CoreML::Specification::ArgMaxLayerParams *)operator new();
                        CoreML::Specification::ArgMaxLayerParams::ArgMaxLayerParams(v199);
                        *v6 = v199;
                      }
                      v423 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v423 < 0)
                      {
                        v424 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v424 < 0)
                          return 0;
                      }
                      else
                      {
                        v424 = *v423;
                        *(_QWORD *)a2 = v423 + 1;
                      }
                      v846 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v424);
                      if ((v846 & 0x8000000000000000) != 0)
                        return 0;
                      v848 = v846;
                      result = CoreML::Specification::ArgMaxLayerParams::MergePartialFromCodedStream(v199, (char **)a2, v847);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v848))
                        return 0;
                    }
                    else if (v19 == 1040)
                    {
                      if (v15 != 130)
                        goto LABEL_9;
                      if (*v5 == 1040)
                      {
                        v200 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1040;
                        v200 = (CoreML::Specification::EmbeddingNDLayerParams *)operator new();
                        CoreML::Specification::EmbeddingNDLayerParams::EmbeddingNDLayerParams(v200);
                        *v6 = v200;
                      }
                      v425 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v425 < 0)
                      {
                        v426 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v426 < 0)
                          return 0;
                      }
                      else
                      {
                        v426 = *v425;
                        *(_QWORD *)a2 = v425 + 1;
                      }
                      v849 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v426);
                      if ((v849 & 0x8000000000000000) != 0)
                        return 0;
                      v851 = v849;
                      result = CoreML::Specification::EmbeddingNDLayerParams::MergePartialFromCodedStream(v200, a2, v850);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v851))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 1045 || v15 != 170)
                        goto LABEL_9;
                      if (*v5 == 1045)
                      {
                        v55 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 1045;
                        v55 = (CoreML::Specification::BatchedMatMulLayerParams *)operator new();
                        CoreML::Specification::BatchedMatMulLayerParams::BatchedMatMulLayerParams(v55);
                        *v6 = v55;
                      }
                      v331 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v331 < 0)
                      {
                        v332 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v332 < 0)
                          return 0;
                      }
                      else
                      {
                        v332 = *v331;
                        *(_QWORD *)a2 = v331 + 1;
                      }
                      v713 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v332);
                      if ((v713 & 0x8000000000000000) != 0)
                        return 0;
                      v715 = v713;
                      result = CoreML::Specification::BatchedMatMulLayerParams::MergePartialFromCodedStream(v55, (char **)a2, v714);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v715))
                        return 0;
                    }
                  }
                  else if (v15 >> 3 <= 0x3E2)
                  {
                    if (v19 == 980)
                    {
                      if (v15 != 162)
                        goto LABEL_9;
                      if (*v5 == 980)
                      {
                        v245 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 980;
                        v245 = (CoreML::Specification::ConcatNDLayerParams *)operator new();
                        CoreML::Specification::ConcatNDLayerParams::ConcatNDLayerParams(v245);
                        *v6 = v245;
                      }
                      v461 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v461 < 0)
                      {
                        v462 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v462 < 0)
                          return 0;
                      }
                      else
                      {
                        v462 = *v461;
                        *(_QWORD *)a2 = v461 + 1;
                      }
                      v903 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v462);
                      if ((v903 & 0x8000000000000000) != 0)
                        return 0;
                      v905 = v903;
                      result = CoreML::Specification::ConcatNDLayerParams::MergePartialFromCodedStream(v245, (char **)a2, v904);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v905))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 985 || v15 != 202)
                        goto LABEL_9;
                      if (*v5 == 985)
                      {
                        v77 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 985;
                        v77 = (CoreML::Specification::TransposeLayerParams *)operator new();
                        CoreML::Specification::TransposeLayerParams::TransposeLayerParams(v77);
                        *v6 = v77;
                      }
                      v355 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v355 < 0)
                      {
                        v356 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v356 < 0)
                          return 0;
                      }
                      else
                      {
                        v356 = *v355;
                        *(_QWORD *)a2 = v355 + 1;
                      }
                      v749 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v356);
                      if ((v749 & 0x8000000000000000) != 0)
                        return 0;
                      v751 = v749;
                      result = CoreML::Specification::TransposeLayerParams::MergePartialFromCodedStream(v77, (char **)a2, v750);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v751))
                        return 0;
                    }
                  }
                  else if (v19 == 995)
                  {
                    if (v15 != 26)
                      goto LABEL_9;
                    if (*v5 == 995)
                    {
                      v155 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 995;
                      v155 = (CoreML::Specification::SliceStaticLayerParams *)operator new();
                      CoreML::Specification::SliceStaticLayerParams::SliceStaticLayerParams(v155);
                      *v6 = v155;
                    }
                    v389 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v389 < 0)
                    {
                      v390 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v390 < 0)
                        return 0;
                    }
                    else
                    {
                      v390 = *v389;
                      *(_QWORD *)a2 = v389 + 1;
                    }
                    v798 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v390);
                    if ((v798 & 0x8000000000000000) != 0)
                      return 0;
                    v800 = v798;
                    result = CoreML::Specification::SliceStaticLayerParams::MergePartialFromCodedStream(v155, (char **)a2, v799);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v800))
                      return 0;
                  }
                  else if (v19 == 1000)
                  {
                    if (v15 != 66)
                      goto LABEL_9;
                    if (*v5 == 1000)
                    {
                      v156 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 1000;
                      v156 = (CoreML::Specification::SliceDynamicLayerParams *)operator new();
                      CoreML::Specification::SliceDynamicLayerParams::SliceDynamicLayerParams(v156);
                      *v6 = v156;
                    }
                    v391 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v391 < 0)
                    {
                      v392 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v392 < 0)
                        return 0;
                    }
                    else
                    {
                      v392 = *v391;
                      *(_QWORD *)a2 = v391 + 1;
                    }
                    v801 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v392);
                    if ((v801 & 0x8000000000000000) != 0)
                      return 0;
                    v803 = v801;
                    result = CoreML::Specification::SliceDynamicLayerParams::MergePartialFromCodedStream(v156, (char **)a2, v802);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v803))
                      return 0;
                  }
                  else
                  {
                    if (v19 != 1005 || v15 != 106)
                      goto LABEL_9;
                    if (*v5 == 1005)
                    {
                      v32 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 1005;
                      v32 = (CoreML::Specification::SlidingWindowsLayerParams *)operator new();
                      CoreML::Specification::SlidingWindowsLayerParams::SlidingWindowsLayerParams(v32);
                      *v6 = v32;
                    }
                    v313 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v313 < 0)
                    {
                      v314 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v314 < 0)
                        return 0;
                    }
                    else
                    {
                      v314 = *v313;
                      *(_QWORD *)a2 = v313 + 1;
                    }
                    v687 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v314);
                    if ((v687 & 0x8000000000000000) != 0)
                      return 0;
                    v689 = v687;
                    result = CoreML::Specification::SlidingWindowsLayerParams::MergePartialFromCodedStream(v32, (char **)a2, v688);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v689))
                      return 0;
                  }
                }
                else if (v15 >> 3 > 0x3A1)
                {
                  if (v15 >> 3 <= 0x3B0)
                  {
                    if (v19 == 930)
                    {
                      if (v15 != 18)
                        goto LABEL_9;
                      if (*v5 == 930)
                      {
                        v230 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 930;
                        v230 = (CoreML::Specification::GatherLayerParams *)operator new();
                        CoreML::Specification::GatherLayerParams::GatherLayerParams(v230);
                        *v6 = v230;
                      }
                      v449 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v449 < 0)
                      {
                        v450 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v450 < 0)
                          return 0;
                      }
                      else
                      {
                        v450 = *v449;
                        *(_QWORD *)a2 = v449 + 1;
                      }
                      v885 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v450);
                      if ((v885 & 0x8000000000000000) != 0)
                        return 0;
                      v887 = v885;
                      result = CoreML::Specification::GatherLayerParams::MergePartialFromCodedStream(v230, (char **)a2, v886);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v887))
                        return 0;
                    }
                    else if (v19 == 935)
                    {
                      if (v15 != 58)
                        goto LABEL_9;
                      if (*v5 == 935)
                      {
                        v231 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 935;
                        v231 = (CoreML::Specification::ScatterLayerParams *)operator new();
                        CoreML::Specification::ScatterLayerParams::ScatterLayerParams(v231);
                        *v6 = v231;
                      }
                      v451 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v451 < 0)
                      {
                        v452 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v452 < 0)
                          return 0;
                      }
                      else
                      {
                        v452 = *v451;
                        *(_QWORD *)a2 = v451 + 1;
                      }
                      v888 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v452);
                      if ((v888 & 0x8000000000000000) != 0)
                        return 0;
                      v890 = v888;
                      result = CoreML::Specification::ScatterLayerParams::MergePartialFromCodedStream(v231, (char **)a2, v889);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v890))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 940 || v15 != 98)
                        goto LABEL_9;
                      if (*v5 != 940)
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 940;
                        v68 = (CoreML::Specification::GatherNDLayerParams *)operator new();
                        CoreML::Specification::GatherNDLayerParams::GatherNDLayerParams(v68);
                        *v6 = v68;
                      }
                      v69 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v69 < 0)
                      {
                        v70 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v70 < 0)
                          return 0;
                      }
                      else
                      {
                        v70 = *v69;
                        *(_QWORD *)a2 = v69 + 1;
                      }
                      v571 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v70);
                      if ((v571 & 0x8000000000000000) != 0)
                        return 0;
                      v573 = v571;
                      result = CoreML::Specification::GatherNDLayerParams::MergePartialFromCodedStream((CoreML::Specification::GatherNDLayerParams *)v571, (char **)a2, v572);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v573))
                        return 0;
                    }
                  }
                  else
                  {
                    if (v15 >> 3 <= 0x3BF)
                    {
                      switch(v19)
                      {
                        case 0x3B1u:
                          if (v15 != 138)
                            goto LABEL_9;
                          if (*v5 == 945)
                          {
                            v38 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 945;
                            v38 = (CoreML::Specification::ScatterNDLayerParams *)operator new();
                            CoreML::Specification::ScatterNDLayerParams::ScatterNDLayerParams(v38);
                            *v6 = v38;
                          }
                          v303 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v303 < 0)
                          {
                            v304 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v304 < 0)
                              return 0;
                          }
                          else
                          {
                            v304 = *v303;
                            *(_QWORD *)a2 = v303 + 1;
                          }
                          v537 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v304);
                          if ((v537 & 0x8000000000000000) != 0)
                            return 0;
                          v539 = v537;
                          result = CoreML::Specification::ScatterNDLayerParams::MergePartialFromCodedStream(v38, (char **)a2, v538);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v539))
                            return 0;
                          continue;
                        case 0x3B6u:
                          if (v15 != 178)
                            goto LABEL_9;
                          if (*v5 == 950)
                          {
                            v136 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 950;
                            v136 = (CoreML::Specification::SoftmaxNDLayerParams *)operator new();
                            CoreML::Specification::SoftmaxNDLayerParams::SoftmaxNDLayerParams(v136);
                            *v6 = v136;
                          }
                          v305 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v305 < 0)
                          {
                            v306 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v306 < 0)
                              return 0;
                          }
                          else
                          {
                            v306 = *v305;
                            *(_QWORD *)a2 = v305 + 1;
                          }
                          v540 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v306);
                          if ((v540 & 0x8000000000000000) != 0)
                            return 0;
                          v542 = v540;
                          result = CoreML::Specification::SoftmaxNDLayerParams::MergePartialFromCodedStream(v136, (char **)a2, v541);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v542))
                            return 0;
                          continue;
                        case 0x3B8u:
                          if (v15 != 194)
                            goto LABEL_9;
                          if (*v5 == 952)
                          {
                            v137 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 952;
                            v137 = (CoreML::Specification::GatherAlongAxisLayerParams *)operator new();
                            CoreML::Specification::GatherAlongAxisLayerParams::GatherAlongAxisLayerParams(v137);
                            *v6 = v137;
                          }
                          v307 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v307 < 0)
                          {
                            v308 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v308 < 0)
                              return 0;
                          }
                          else
                          {
                            v308 = *v307;
                            *(_QWORD *)a2 = v307 + 1;
                          }
                          v543 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v308);
                          if ((v543 & 0x8000000000000000) != 0)
                            return 0;
                          v545 = v543;
                          result = CoreML::Specification::GatherAlongAxisLayerParams::MergePartialFromCodedStream(v137, (char **)a2, v544);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v545))
                            return 0;
                          continue;
                        case 0x3BAu:
                          if (v15 != 210)
                            goto LABEL_9;
                          if (*v5 == 954)
                          {
                            v138 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 954;
                            v138 = (CoreML::Specification::ScatterAlongAxisLayerParams *)operator new();
                            CoreML::Specification::ScatterAlongAxisLayerParams::ScatterAlongAxisLayerParams(v138);
                            *v6 = v138;
                          }
                          v309 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v309 < 0)
                          {
                            v310 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v310 < 0)
                              return 0;
                          }
                          else
                          {
                            v310 = *v309;
                            *(_QWORD *)a2 = v309 + 1;
                          }
                          v546 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v310);
                          if ((v546 & 0x8000000000000000) != 0)
                            return 0;
                          v548 = v546;
                          result = CoreML::Specification::ScatterAlongAxisLayerParams::MergePartialFromCodedStream(v138, (char **)a2, v547);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v548))
                            return 0;
                          continue;
                        default:
                          goto LABEL_9;
                      }
                    }
                    if (v19 == 960)
                    {
                      if (v15 != 2)
                        goto LABEL_9;
                      if (*v5 == 960)
                      {
                        v242 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 960;
                        v242 = (CoreML::Specification::ReverseLayerParams *)operator new();
                        CoreML::Specification::ReverseLayerParams::ReverseLayerParams(v242);
                        *v6 = v242;
                      }
                      v455 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v455 < 0)
                      {
                        v456 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v456 < 0)
                          return 0;
                      }
                      else
                      {
                        v456 = *v455;
                        *(_QWORD *)a2 = v455 + 1;
                      }
                      v894 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v456);
                      if ((v894 & 0x8000000000000000) != 0)
                        return 0;
                      v896 = v894;
                      result = CoreML::Specification::ReverseLayerParams::MergePartialFromCodedStream(v242, (char **)a2, v895);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v896))
                        return 0;
                    }
                    else if (v19 == 965)
                    {
                      if (v15 != 42)
                        goto LABEL_9;
                      if (*v5 == 965)
                      {
                        v243 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 965;
                        v243 = (CoreML::Specification::ReverseSeqLayerParams *)operator new();
                        CoreML::Specification::ReverseSeqLayerParams::ReverseSeqLayerParams(v243);
                        *v6 = v243;
                      }
                      v457 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v457 < 0)
                      {
                        v458 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v458 < 0)
                          return 0;
                      }
                      else
                      {
                        v458 = *v457;
                        *(_QWORD *)a2 = v457 + 1;
                      }
                      v897 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v458);
                      if ((v897 & 0x8000000000000000) != 0)
                        return 0;
                      v899 = v897;
                      result = CoreML::Specification::ReverseSeqLayerParams::MergePartialFromCodedStream(v243, (char **)a2, v898);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v899))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 975 || v15 != 122)
                        goto LABEL_9;
                      if (*v5 == 975)
                      {
                        v75 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 975;
                        v75 = (CoreML::Specification::SplitNDLayerParams *)operator new();
                        CoreML::Specification::SplitNDLayerParams::SplitNDLayerParams(v75);
                        *v6 = v75;
                      }
                      v351 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v351 < 0)
                      {
                        v352 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v352 < 0)
                          return 0;
                      }
                      else
                      {
                        v352 = *v351;
                        *(_QWORD *)a2 = v351 + 1;
                      }
                      v743 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v352);
                      if ((v743 & 0x8000000000000000) != 0)
                        return 0;
                      v745 = v743;
                      result = CoreML::Specification::SplitNDLayerParams::MergePartialFromCodedStream(v75, (char **)a2, v744);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v745))
                        return 0;
                    }
                  }
                }
                else if (v15 >> 3 <= 0x379)
                {
                  if (v15 >> 3 <= 0x36A)
                  {
                    if (v19 == 865)
                    {
                      if (v15 != 10)
                        goto LABEL_9;
                      if (*v5 != 865)
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 865;
                        v259 = (CoreML::Specification::ModBroadcastableLayerParams *)operator new();
                        CoreML::Specification::ModBroadcastableLayerParams::ModBroadcastableLayerParams(v259);
                        *v6 = v259;
                      }
                      v260 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v260 < 0)
                      {
                        v261 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v261 < 0)
                          return 0;
                      }
                      else
                      {
                        v261 = *v260;
                        *(_QWORD *)a2 = v260 + 1;
                      }
                      v672 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v261);
                      if ((v672 & 0x8000000000000000) != 0)
                        return 0;
                      v674 = v672;
                      result = CoreML::Specification::ModBroadcastableLayerParams::MergePartialFromCodedStream((CoreML::Specification::ModBroadcastableLayerParams *)v672, (char **)a2, v673);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v674))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 870 || v15 != 50)
                        goto LABEL_9;
                      if (*v5 != 870)
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 870;
                        v92 = (CoreML::Specification::MinBroadcastableLayerParams *)operator new();
                        CoreML::Specification::MinBroadcastableLayerParams::MinBroadcastableLayerParams(v92);
                        *v6 = v92;
                      }
                      v93 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v93 < 0)
                      {
                        v94 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v94 < 0)
                          return 0;
                      }
                      else
                      {
                        v94 = *v93;
                        *(_QWORD *)a2 = v93 + 1;
                      }
                      v583 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v94);
                      if ((v583 & 0x8000000000000000) != 0)
                        return 0;
                      v585 = v583;
                      result = CoreML::Specification::MinBroadcastableLayerParams::MergePartialFromCodedStream((CoreML::Specification::MinBroadcastableLayerParams *)v583, (char **)a2, v584);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v585))
                        return 0;
                    }
                  }
                  else if (v19 == 875)
                  {
                    if (v15 != 90)
                      goto LABEL_9;
                    if (*v5 != 875)
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 875;
                      v183 = (CoreML::Specification::MaxBroadcastableLayerParams *)operator new();
                      CoreML::Specification::MaxBroadcastableLayerParams::MaxBroadcastableLayerParams(v183);
                      *v6 = v183;
                    }
                    v184 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v184 < 0)
                    {
                      v185 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v185 < 0)
                        return 0;
                    }
                    else
                    {
                      v185 = *v184;
                      *(_QWORD *)a2 = v184 + 1;
                    }
                    v624 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v185);
                    if ((v624 & 0x8000000000000000) != 0)
                      return 0;
                    v626 = v624;
                    result = CoreML::Specification::MaxBroadcastableLayerParams::MergePartialFromCodedStream((CoreML::Specification::MaxBroadcastableLayerParams *)v624, (char **)a2, v625);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v626))
                      return 0;
                  }
                  else if (v19 == 880)
                  {
                    if (v15 != 130)
                      goto LABEL_9;
                    if (*v5 != 880)
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 880;
                      v186 = (CoreML::Specification::AddBroadcastableLayerParams *)operator new();
                      CoreML::Specification::AddBroadcastableLayerParams::AddBroadcastableLayerParams(v186);
                      *v6 = v186;
                    }
                    v187 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v187 < 0)
                    {
                      v188 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v188 < 0)
                        return 0;
                    }
                    else
                    {
                      v188 = *v187;
                      *(_QWORD *)a2 = v187 + 1;
                    }
                    v627 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v188);
                    if ((v627 & 0x8000000000000000) != 0)
                      return 0;
                    v629 = v627;
                    result = CoreML::Specification::AddBroadcastableLayerParams::MergePartialFromCodedStream((CoreML::Specification::AddBroadcastableLayerParams *)v627, (char **)a2, v628);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v629))
                      return 0;
                  }
                  else
                  {
                    if (v19 != 885 || v15 != 170)
                      goto LABEL_9;
                    if (*v5 != 885)
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 885;
                      v48 = (CoreML::Specification::PowBroadcastableLayerParams *)operator new();
                      CoreML::Specification::PowBroadcastableLayerParams::PowBroadcastableLayerParams(v48);
                      *v6 = v48;
                    }
                    v49 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v49 < 0)
                    {
                      v50 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v50 < 0)
                        return 0;
                    }
                    else
                    {
                      v50 = *v49;
                      *(_QWORD *)a2 = v49 + 1;
                    }
                    v562 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v50);
                    if ((v562 & 0x8000000000000000) != 0)
                      return 0;
                    v564 = v562;
                    result = CoreML::Specification::PowBroadcastableLayerParams::MergePartialFromCodedStream((CoreML::Specification::PowBroadcastableLayerParams *)v562, (char **)a2, v563);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v564))
                      return 0;
                  }
                }
                else if (v15 >> 3 > 0x388)
                {
                  if (v19 == 905)
                  {
                    if (v15 != 74)
                      goto LABEL_9;
                    if (*v5 != 905)
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 905;
                      v232 = (CoreML::Specification::SubtractBroadcastableLayerParams *)operator new();
                      CoreML::Specification::SubtractBroadcastableLayerParams::SubtractBroadcastableLayerParams(v232);
                      *v6 = v232;
                    }
                    v233 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v233 < 0)
                    {
                      v234 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v234 < 0)
                        return 0;
                    }
                    else
                    {
                      v234 = *v233;
                      *(_QWORD *)a2 = v233 + 1;
                    }
                    v657 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v234);
                    if ((v657 & 0x8000000000000000) != 0)
                      return 0;
                    v659 = v657;
                    result = CoreML::Specification::SubtractBroadcastableLayerParams::MergePartialFromCodedStream((CoreML::Specification::SubtractBroadcastableLayerParams *)v657, (char **)a2, v658);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v659))
                      return 0;
                  }
                  else if (v19 == 920)
                  {
                    if (v15 != 194)
                      goto LABEL_9;
                    if (*v5 == 920)
                    {
                      v235 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 920;
                      v235 = (CoreML::Specification::TileLayerParams *)operator new();
                      CoreML::Specification::TileLayerParams::TileLayerParams(v235);
                      *v6 = v235;
                    }
                    v453 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v453 < 0)
                    {
                      v454 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v454 < 0)
                        return 0;
                    }
                    else
                    {
                      v454 = *v453;
                      *(_QWORD *)a2 = v453 + 1;
                    }
                    v891 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v454);
                    if ((v891 & 0x8000000000000000) != 0)
                      return 0;
                    v893 = v891;
                    result = CoreML::Specification::TileLayerParams::MergePartialFromCodedStream(v235, (char **)a2, v892);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v893))
                      return 0;
                  }
                  else
                  {
                    if (v19 != 925 || v15 != 234)
                      goto LABEL_9;
                    if (*v5 == 925)
                    {
                      v71 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 925;
                      v71 = (CoreML::Specification::StackLayerParams *)operator new();
                      CoreML::Specification::StackLayerParams::StackLayerParams(v71);
                      *v6 = v71;
                    }
                    v349 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v349 < 0)
                    {
                      v350 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v350 < 0)
                        return 0;
                    }
                    else
                    {
                      v350 = *v349;
                      *(_QWORD *)a2 = v349 + 1;
                    }
                    v740 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v350);
                    if ((v740 & 0x8000000000000000) != 0)
                      return 0;
                    v742 = v740;
                    result = CoreML::Specification::StackLayerParams::MergePartialFromCodedStream(v71, (char **)a2, v741);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v742))
                      return 0;
                  }
                }
                else if (v19 == 890)
                {
                  if (v15 != 210)
                    goto LABEL_9;
                  if (*v5 != 890)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 890;
                    v139 = (CoreML::Specification::DivideBroadcastableLayerParams *)operator new();
                    CoreML::Specification::DivideBroadcastableLayerParams::DivideBroadcastableLayerParams(v139);
                    *v6 = v139;
                  }
                  v140 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v140 < 0)
                  {
                    v141 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v141 < 0)
                      return 0;
                  }
                  else
                  {
                    v141 = *v140;
                    *(_QWORD *)a2 = v140 + 1;
                  }
                  v598 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v141);
                  if ((v598 & 0x8000000000000000) != 0)
                    return 0;
                  v600 = v598;
                  result = CoreML::Specification::DivideBroadcastableLayerParams::MergePartialFromCodedStream((CoreML::Specification::DivideBroadcastableLayerParams *)v598, (char **)a2, v599);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v600))
                    return 0;
                }
                else if (v19 == 895)
                {
                  if (v15 != 250)
                    goto LABEL_9;
                  if (*v5 != 895)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 895;
                    v142 = (CoreML::Specification::FloorDivBroadcastableLayerParams *)operator new();
                    CoreML::Specification::FloorDivBroadcastableLayerParams::FloorDivBroadcastableLayerParams(v142);
                    *v6 = v142;
                  }
                  v143 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v143 < 0)
                  {
                    v144 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v144 < 0)
                      return 0;
                  }
                  else
                  {
                    v144 = *v143;
                    *(_QWORD *)a2 = v143 + 1;
                  }
                  v601 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v144);
                  if ((v601 & 0x8000000000000000) != 0)
                    return 0;
                  v603 = v601;
                  result = CoreML::Specification::FloorDivBroadcastableLayerParams::MergePartialFromCodedStream((CoreML::Specification::FloorDivBroadcastableLayerParams *)v601, (char **)a2, v602);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v603))
                    return 0;
                }
                else
                {
                  if (v19 != 900 || v15 != 34)
                    goto LABEL_9;
                  if (*v5 != 900)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 900;
                    v24 = (CoreML::Specification::MultiplyBroadcastableLayerParams *)operator new();
                    CoreML::Specification::MultiplyBroadcastableLayerParams::MultiplyBroadcastableLayerParams(v24);
                    *v6 = v24;
                  }
                  v25 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v25 < 0)
                  {
                    v26 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v26 < 0)
                      return 0;
                  }
                  else
                  {
                    v26 = *v25;
                    *(_QWORD *)a2 = v25 + 1;
                  }
                  v550 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v26);
                  if ((v550 & 0x8000000000000000) != 0)
                    return 0;
                  v552 = v550;
                  result = CoreML::Specification::MultiplyBroadcastableLayerParams::MergePartialFromCodedStream((CoreML::Specification::MultiplyBroadcastableLayerParams *)v550, (char **)a2, v551);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v552))
                    return 0;
                }
              }
              if (v15 >> 3 <= 0x199)
                break;
              if (v15 >> 3 > 0x2DE)
              {
                if (v15 >> 3 > 0x32E)
                {
                  if (v15 >> 3 > 0x347)
                  {
                    if (v15 >> 3 > 0x351)
                    {
                      if (v19 == 850)
                      {
                        if (v15 != 146)
                          goto LABEL_9;
                        if (*v5 != 850)
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 850;
                          v277 = (CoreML::Specification::LogicalNotLayerParams *)operator new();
                          CoreML::Specification::LogicalNotLayerParams::LogicalNotLayerParams(v277);
                          *v6 = v277;
                        }
                        v278 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v278 < 0)
                        {
                          v279 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v279 < 0)
                            return 0;
                        }
                        else
                        {
                          v279 = *v278;
                          *(_QWORD *)a2 = v278 + 1;
                        }
                        v681 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v279);
                        if ((v681 & 0x8000000000000000) != 0)
                          return 0;
                        v683 = v681;
                        result = CoreML::Specification::LogicalNotLayerParams::MergePartialFromCodedStream((CoreML::Specification::LogicalNotLayerParams *)v681, (char **)a2, v682);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v683))
                          return 0;
                      }
                      else
                      {
                        if (v19 != 855 || v15 != 186)
                          goto LABEL_9;
                        if (*v5 != 855)
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 855;
                          v112 = (CoreML::Specification::LogicalAndLayerParams *)operator new();
                          CoreML::Specification::LogicalAndLayerParams::LogicalAndLayerParams(v112);
                          *v6 = v112;
                        }
                        v113 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v113 < 0)
                        {
                          v114 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v114 < 0)
                            return 0;
                        }
                        else
                        {
                          v114 = *v113;
                          *(_QWORD *)a2 = v113 + 1;
                        }
                        v595 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v114);
                        if ((v595 & 0x8000000000000000) != 0)
                          return 0;
                        v597 = v595;
                        result = CoreML::Specification::LogicalAndLayerParams::MergePartialFromCodedStream((CoreML::Specification::LogicalAndLayerParams *)v595, (char **)a2, v596);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v597))
                          return 0;
                      }
                    }
                    else if (v19 == 840)
                    {
                      if (v15 != 66)
                        goto LABEL_9;
                      if (*v5 != 840)
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 840;
                        v227 = (CoreML::Specification::LogicalOrLayerParams *)operator new();
                        CoreML::Specification::LogicalOrLayerParams::LogicalOrLayerParams(v227);
                        *v6 = v227;
                      }
                      v228 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v228 < 0)
                      {
                        v229 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v229 < 0)
                          return 0;
                      }
                      else
                      {
                        v229 = *v228;
                        *(_QWORD *)a2 = v228 + 1;
                      }
                      v654 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v229);
                      if ((v654 & 0x8000000000000000) != 0)
                        return 0;
                      v656 = v654;
                      result = CoreML::Specification::LogicalOrLayerParams::MergePartialFromCodedStream((CoreML::Specification::LogicalOrLayerParams *)v654, (char **)a2, v655);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v656))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 845 || v15 != 106)
                        goto LABEL_9;
                      if (*v5 != 845)
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 845;
                        v65 = (CoreML::Specification::LogicalXorLayerParams *)operator new();
                        CoreML::Specification::LogicalXorLayerParams::LogicalXorLayerParams(v65);
                        *v6 = v65;
                      }
                      v66 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v66 < 0)
                      {
                        v67 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v67 < 0)
                          return 0;
                      }
                      else
                      {
                        v67 = *v66;
                        *(_QWORD *)a2 = v66 + 1;
                      }
                      v568 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v67);
                      if ((v568 & 0x8000000000000000) != 0)
                        return 0;
                      v570 = v568;
                      result = CoreML::Specification::LogicalXorLayerParams::MergePartialFromCodedStream((CoreML::Specification::LogicalXorLayerParams *)v568, (char **)a2, v569);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v570))
                        return 0;
                    }
                  }
                  else
                  {
                    switch(v19)
                    {
                      case 0x339u:
                        if (v15 != 202)
                          goto LABEL_9;
                        if (*v5 == 825)
                        {
                          v45 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 825;
                          v45 = (CoreML::Specification::LessThanLayerParams *)operator new();
                          CoreML::Specification::LessThanLayerParams::LessThanLayerParams(v45);
                          *v6 = v45;
                        }
                        v295 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v295 < 0)
                        {
                          v296 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v296 < 0)
                            return 0;
                        }
                        else
                        {
                          v296 = *v295;
                          *(_QWORD *)a2 = v295 + 1;
                        }
                        v524 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v296);
                        if ((v524 & 0x8000000000000000) != 0)
                          return 0;
                        v526 = v524;
                        result = CoreML::Specification::LessThanLayerParams::MergePartialFromCodedStream(v45, (char **)a2, v525);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v526))
                          return 0;
                        goto LABEL_2;
                      case 0x33Au:
                      case 0x33Cu:
                      case 0x33Du:
                      case 0x33Fu:
                        goto LABEL_9;
                      case 0x33Bu:
                        if (v15 != 218)
                          goto LABEL_9;
                        if (*v5 == 827)
                        {
                          v119 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 827;
                          v119 = (CoreML::Specification::LessEqualLayerParams *)operator new();
                          CoreML::Specification::LessEqualLayerParams::LessEqualLayerParams(v119);
                          *v6 = v119;
                        }
                        v297 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v297 < 0)
                        {
                          v298 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v298 < 0)
                            return 0;
                        }
                        else
                        {
                          v298 = *v297;
                          *(_QWORD *)a2 = v297 + 1;
                        }
                        v527 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v298);
                        if ((v527 & 0x8000000000000000) != 0)
                          return 0;
                        v529 = v527;
                        result = CoreML::Specification::LessEqualLayerParams::MergePartialFromCodedStream(v119, (char **)a2, v528);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v529))
                          return 0;
                        goto LABEL_2;
                      case 0x33Eu:
                        if (v15 != 242)
                          goto LABEL_9;
                        if (*v5 == 830)
                        {
                          v120 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 830;
                          v120 = (CoreML::Specification::GreaterThanLayerParams *)operator new();
                          CoreML::Specification::GreaterThanLayerParams::GreaterThanLayerParams(v120);
                          *v6 = v120;
                        }
                        v299 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v299 < 0)
                        {
                          v300 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v300 < 0)
                            return 0;
                        }
                        else
                        {
                          v300 = *v299;
                          *(_QWORD *)a2 = v299 + 1;
                        }
                        v530 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v300);
                        if ((v530 & 0x8000000000000000) != 0)
                          return 0;
                        v532 = v530;
                        result = CoreML::Specification::GreaterThanLayerParams::MergePartialFromCodedStream(v120, (char **)a2, v531);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v532))
                          return 0;
                        goto LABEL_2;
                      case 0x340u:
                        if (v15 != 2)
                          goto LABEL_9;
                        if (*v5 == 832)
                        {
                          v121 = *v6;
                        }
                        else
                        {
                          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                          *((_DWORD *)this + 35) = 832;
                          v121 = (CoreML::Specification::GreaterEqualLayerParams *)operator new();
                          CoreML::Specification::GreaterEqualLayerParams::GreaterEqualLayerParams(v121);
                          *v6 = v121;
                        }
                        v301 = *(char **)a2;
                        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v301 < 0)
                        {
                          v302 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                          if (v302 < 0)
                            return 0;
                        }
                        else
                        {
                          v302 = *v301;
                          *(_QWORD *)a2 = v301 + 1;
                        }
                        v533 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v302);
                        if ((v533 & 0x8000000000000000) != 0)
                          return 0;
                        v535 = v533;
                        result = CoreML::Specification::GreaterEqualLayerParams::MergePartialFromCodedStream(v121, (char **)a2, v534);
                        if (!(_DWORD)result)
                          return result;
                        if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v535))
                          return 0;
                        goto LABEL_2;
                      default:
                        if (v19 == 815)
                        {
                          if (v15 != 122)
                            goto LABEL_9;
                          if (*v5 == 815)
                          {
                            v280 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 815;
                            v280 = (CoreML::Specification::EqualLayerParams *)operator new();
                            CoreML::Specification::EqualLayerParams::EqualLayerParams(v280);
                            *v6 = v280;
                          }
                          v506 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v506 < 0)
                          {
                            v507 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v507 < 0)
                              return 0;
                          }
                          else
                          {
                            v507 = *v506;
                            *(_QWORD *)a2 = v506 + 1;
                          }
                          v955 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v507);
                          if ((v955 & 0x8000000000000000) != 0)
                            return 0;
                          v957 = v955;
                          result = CoreML::Specification::EqualLayerParams::MergePartialFromCodedStream(v280, (char **)a2, v956);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v957))
                            return 0;
                        }
                        else
                        {
                          if (v19 != 820 || v15 != 162)
                            goto LABEL_9;
                          if (*v5 == 820)
                          {
                            v89 = *v6;
                          }
                          else
                          {
                            CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                            *((_DWORD *)this + 35) = 820;
                            v89 = (CoreML::Specification::NotEqualLayerParams *)operator new();
                            CoreML::Specification::NotEqualLayerParams::NotEqualLayerParams(v89);
                            *v6 = v89;
                          }
                          v504 = *(char **)a2;
                          if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v504 < 0)
                          {
                            v505 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                            if (v505 < 0)
                              return 0;
                          }
                          else
                          {
                            v505 = *v504;
                            *(_QWORD *)a2 = v504 + 1;
                          }
                          v952 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v505);
                          if ((v952 & 0x8000000000000000) != 0)
                            return 0;
                          v954 = v952;
                          result = CoreML::Specification::NotEqualLayerParams::MergePartialFromCodedStream(v89, (char **)a2, v953);
                          if (!(_DWORD)result)
                            return result;
                          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v954))
                            return 0;
                        }
                        break;
                    }
                  }
                }
                else if (v15 >> 3 > 0x301)
                {
                  if (v15 >> 3 <= 0x30B)
                  {
                    if (v19 == 770)
                    {
                      if (v15 != 18)
                        goto LABEL_9;
                      if (*v5 != 770)
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 770;
                        v265 = (CoreML::Specification::AsinhLayerParams *)operator new();
                        CoreML::Specification::AsinhLayerParams::AsinhLayerParams(v265);
                        *v6 = v265;
                      }
                      v266 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v266 < 0)
                      {
                        v267 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v267 < 0)
                          return 0;
                      }
                      else
                      {
                        v267 = *v266;
                        *(_QWORD *)a2 = v266 + 1;
                      }
                      v675 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v267);
                      if ((v675 & 0x8000000000000000) != 0)
                        return 0;
                      v677 = v675;
                      result = CoreML::Specification::AsinhLayerParams::MergePartialFromCodedStream((CoreML::Specification::AsinhLayerParams *)v675, (char **)a2, v676);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v677))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 775 || v15 != 58)
                        goto LABEL_9;
                      if (*v5 != 775)
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 775;
                        v100 = (CoreML::Specification::AcoshLayerParams *)operator new();
                        CoreML::Specification::AcoshLayerParams::AcoshLayerParams(v100);
                        *v6 = v100;
                      }
                      v101 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v101 < 0)
                      {
                        v102 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v102 < 0)
                          return 0;
                      }
                      else
                      {
                        v102 = *v101;
                        *(_QWORD *)a2 = v101 + 1;
                      }
                      v589 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v102);
                      if ((v589 & 0x8000000000000000) != 0)
                        return 0;
                      v591 = v589;
                      result = CoreML::Specification::AcoshLayerParams::MergePartialFromCodedStream((CoreML::Specification::AcoshLayerParams *)v589, (char **)a2, v590);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v591))
                        return 0;
                    }
                  }
                  else if (v19 == 780)
                  {
                    if (v15 != 98)
                      goto LABEL_9;
                    if (*v5 != 780)
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 780;
                      v201 = (CoreML::Specification::AtanhLayerParams *)operator new();
                      CoreML::Specification::AtanhLayerParams::AtanhLayerParams(v201);
                      *v6 = v201;
                    }
                    v202 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v202 < 0)
                    {
                      v203 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v203 < 0)
                        return 0;
                    }
                    else
                    {
                      v203 = *v202;
                      *(_QWORD *)a2 = v202 + 1;
                    }
                    v639 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v203);
                    if ((v639 & 0x8000000000000000) != 0)
                      return 0;
                    v641 = v639;
                    result = CoreML::Specification::AtanhLayerParams::MergePartialFromCodedStream((CoreML::Specification::AtanhLayerParams *)v639, (char **)a2, v640);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v641))
                      return 0;
                  }
                  else if (v19 == 790)
                  {
                    if (v15 != 178)
                      goto LABEL_9;
                    if (*v5 != 790)
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 790;
                      v204 = (CoreML::Specification::ErfLayerParams *)operator new();
                      CoreML::Specification::ErfLayerParams::ErfLayerParams(v204);
                      *v6 = v204;
                    }
                    v205 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v205 < 0)
                    {
                      v206 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v206 < 0)
                        return 0;
                    }
                    else
                    {
                      v206 = *v205;
                      *(_QWORD *)a2 = v205 + 1;
                    }
                    v642 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v206);
                    if ((v642 & 0x8000000000000000) != 0)
                      return 0;
                    v644 = v642;
                    result = CoreML::Specification::ErfLayerParams::MergePartialFromCodedStream((CoreML::Specification::ErfLayerParams *)v642, (char **)a2, v643);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v644))
                      return 0;
                  }
                  else
                  {
                    if (v19 != 795 || v15 != 218)
                      goto LABEL_9;
                    if (*v5 == 795)
                    {
                      v56 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 795;
                      v56 = (CoreML::Specification::GeluLayerParams *)operator new();
                      CoreML::Specification::GeluLayerParams::GeluLayerParams(v56);
                      *v6 = v56;
                    }
                    v333 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v333 < 0)
                    {
                      v334 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v334 < 0)
                        return 0;
                    }
                    else
                    {
                      v334 = *v333;
                      *(_QWORD *)a2 = v333 + 1;
                    }
                    v716 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v334);
                    if ((v716 & 0x8000000000000000) != 0)
                      return 0;
                    v718 = v716;
                    result = CoreML::Specification::GeluLayerParams::MergePartialFromCodedStream(v56, (char **)a2, v717);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v718))
                      return 0;
                  }
                }
                else if (v15 >> 3 <= 0x2ED)
                {
                  if (v19 == 735)
                  {
                    if (v15 != 250)
                      goto LABEL_9;
                    if (*v5 != 735)
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 735;
                      v246 = (CoreML::Specification::AcosLayerParams *)operator new();
                      CoreML::Specification::AcosLayerParams::AcosLayerParams(v246);
                      *v6 = v246;
                    }
                    v247 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v247 < 0)
                    {
                      v248 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v248 < 0)
                        return 0;
                    }
                    else
                    {
                      v248 = *v247;
                      *(_QWORD *)a2 = v247 + 1;
                    }
                    v666 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v248);
                    if ((v666 & 0x8000000000000000) != 0)
                      return 0;
                    v668 = v666;
                    result = CoreML::Specification::AcosLayerParams::MergePartialFromCodedStream((CoreML::Specification::AcosLayerParams *)v666, (char **)a2, v667);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v668))
                      return 0;
                  }
                  else
                  {
                    if (v19 != 740 || v15 != 34)
                      goto LABEL_9;
                    if (*v5 != 740)
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 740;
                      v78 = (CoreML::Specification::AtanLayerParams *)operator new();
                      CoreML::Specification::AtanLayerParams::AtanLayerParams(v78);
                      *v6 = v78;
                    }
                    v79 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v79 < 0)
                    {
                      v80 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v80 < 0)
                        return 0;
                    }
                    else
                    {
                      v80 = *v79;
                      *(_QWORD *)a2 = v79 + 1;
                    }
                    v577 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v80);
                    if ((v577 & 0x8000000000000000) != 0)
                      return 0;
                    v579 = v577;
                    result = CoreML::Specification::AtanLayerParams::MergePartialFromCodedStream((CoreML::Specification::AtanLayerParams *)v577, (char **)a2, v578);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v579))
                      return 0;
                  }
                }
                else if (v19 == 750)
                {
                  if (v15 != 114)
                    goto LABEL_9;
                  if (*v5 != 750)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 750;
                    v157 = (CoreML::Specification::SinhLayerParams *)operator new();
                    CoreML::Specification::SinhLayerParams::SinhLayerParams(v157);
                    *v6 = v157;
                  }
                  v158 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v158 < 0)
                  {
                    v159 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v159 < 0)
                      return 0;
                  }
                  else
                  {
                    v159 = *v158;
                    *(_QWORD *)a2 = v158 + 1;
                  }
                  v613 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v159);
                  if ((v613 & 0x8000000000000000) != 0)
                    return 0;
                  v615 = v613;
                  result = CoreML::Specification::SinhLayerParams::MergePartialFromCodedStream((CoreML::Specification::SinhLayerParams *)v613, (char **)a2, v614);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v615))
                    return 0;
                }
                else if (v19 == 755)
                {
                  if (v15 != 154)
                    goto LABEL_9;
                  if (*v5 != 755)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 755;
                    v160 = (CoreML::Specification::CoshLayerParams *)operator new();
                    CoreML::Specification::CoshLayerParams::CoshLayerParams(v160);
                    *v6 = v160;
                  }
                  v161 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v161 < 0)
                  {
                    v162 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v162 < 0)
                      return 0;
                  }
                  else
                  {
                    v162 = *v161;
                    *(_QWORD *)a2 = v161 + 1;
                  }
                  v616 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v162);
                  if ((v616 & 0x8000000000000000) != 0)
                    return 0;
                  v618 = v616;
                  result = CoreML::Specification::CoshLayerParams::MergePartialFromCodedStream((CoreML::Specification::CoshLayerParams *)v616, (char **)a2, v617);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v618))
                    return 0;
                }
                else
                {
                  if (v19 != 760 || v15 != 194)
                    goto LABEL_9;
                  if (*v5 != 760)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 760;
                    v33 = (CoreML::Specification::TanhLayerParams *)operator new();
                    CoreML::Specification::TanhLayerParams::TanhLayerParams(v33);
                    *v6 = v33;
                  }
                  v34 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v34 < 0)
                  {
                    v35 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v35 < 0)
                      return 0;
                  }
                  else
                  {
                    v35 = *v34;
                    *(_QWORD *)a2 = v34 + 1;
                  }
                  v556 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v35);
                  if ((v556 & 0x8000000000000000) != 0)
                    return 0;
                  v558 = v556;
                  result = CoreML::Specification::TanhLayerParams::MergePartialFromCodedStream((CoreML::Specification::TanhLayerParams *)v556, (char **)a2, v557);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v558))
                    return 0;
                }
              }
              else if (v15 >> 3 <= 0x27F)
              {
                if (v15 >> 3 > 0x25C)
                {
                  if (v15 >> 3 <= 0x26B)
                  {
                    if (v19 == 605)
                    {
                      if (v15 != 234)
                        goto LABEL_9;
                      if (*v5 == 605)
                      {
                        v270 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 605;
                        v270 = (CoreML::Specification::BranchLayerParams *)operator new();
                        CoreML::Specification::BranchLayerParams::BranchLayerParams(v270);
                        *v6 = v270;
                      }
                      v487 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v487 < 0)
                      {
                        v488 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v488 < 0)
                          return 0;
                      }
                      else
                      {
                        v488 = *v487;
                        *(_QWORD *)a2 = v487 + 1;
                      }
                      v940 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v488);
                      if ((v940 & 0x8000000000000000) != 0)
                        return 0;
                      v942 = v940;
                      result = CoreML::Specification::BranchLayerParams::MergePartialFromCodedStream(v270, (char **)a2, v941);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v942))
                        return 0;
                    }
                    else
                    {
                      if (v19 != 615 || v15 != 58)
                        goto LABEL_9;
                      if (*v5 == 615)
                      {
                        v105 = *v6;
                      }
                      else
                      {
                        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                        *((_DWORD *)this + 35) = 615;
                        v105 = (CoreML::Specification::LoopLayerParams *)operator new();
                        CoreML::Specification::LoopLayerParams::LoopLayerParams(v105);
                        *v6 = v105;
                      }
                      v379 = *(char **)a2;
                      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v379 < 0)
                      {
                        v380 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                        if (v380 < 0)
                          return 0;
                      }
                      else
                      {
                        v380 = *v379;
                        *(_QWORD *)a2 = v379 + 1;
                      }
                      v783 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v380);
                      if ((v783 & 0x8000000000000000) != 0)
                        return 0;
                      v785 = v783;
                      result = CoreML::Specification::LoopLayerParams::MergePartialFromCodedStream(v105, (char **)a2, v784);
                      if (!(_DWORD)result)
                        return result;
                      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v785))
                        return 0;
                    }
                  }
                  else if (v19 == 620)
                  {
                    if (v15 != 98)
                      goto LABEL_9;
                    if (*v5 != 620)
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 620;
                      v211 = (CoreML::Specification::LoopBreakLayerParams *)operator new();
                      CoreML::Specification::LoopBreakLayerParams::LoopBreakLayerParams(v211);
                      *v6 = v211;
                    }
                    v212 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v212 < 0)
                    {
                      v213 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v213 < 0)
                        return 0;
                    }
                    else
                    {
                      v213 = *v212;
                      *(_QWORD *)a2 = v212 + 1;
                    }
                    v645 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v213);
                    if ((v645 & 0x8000000000000000) != 0)
                      return 0;
                    v647 = v645;
                    result = CoreML::Specification::LoopBreakLayerParams::MergePartialFromCodedStream((CoreML::Specification::LoopBreakLayerParams *)v645, (char **)a2, v646);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v647))
                      return 0;
                  }
                  else if (v19 == 625)
                  {
                    if (v15 != 138)
                      goto LABEL_9;
                    if (*v5 != 625)
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 625;
                      v214 = (CoreML::Specification::LoopContinueLayerParams *)operator new();
                      CoreML::Specification::LoopContinueLayerParams::LoopContinueLayerParams(v214);
                      *v6 = v214;
                    }
                    v215 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v215 < 0)
                    {
                      v216 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v216 < 0)
                        return 0;
                    }
                    else
                    {
                      v216 = *v215;
                      *(_QWORD *)a2 = v215 + 1;
                    }
                    v648 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v216);
                    if ((v648 & 0x8000000000000000) != 0)
                      return 0;
                    v650 = v648;
                    result = CoreML::Specification::LoopContinueLayerParams::MergePartialFromCodedStream((CoreML::Specification::LoopContinueLayerParams *)v648, (char **)a2, v649);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v650))
                      return 0;
                  }
                  else
                  {
                    if (v19 != 635 || v15 != 218)
                      goto LABEL_9;
                    if (*v5 == 635)
                    {
                      v59 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 635;
                      v59 = (CoreML::Specification::RangeStaticLayerParams *)operator new();
                      CoreML::Specification::RangeStaticLayerParams::RangeStaticLayerParams(v59);
                      *v6 = v59;
                    }
                    v339 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v339 < 0)
                    {
                      v340 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v340 < 0)
                        return 0;
                    }
                    else
                    {
                      v340 = *v339;
                      *(_QWORD *)a2 = v339 + 1;
                    }
                    v725 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v340);
                    if ((v725 & 0x8000000000000000) != 0)
                      return 0;
                    v727 = v725;
                    result = CoreML::Specification::RangeStaticLayerParams::MergePartialFromCodedStream(v59, (char **)a2, v726);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v727))
                      return 0;
                  }
                }
                else if (v15 >> 3 <= 0x1AD)
                {
                  if (v19 == 410)
                  {
                    if (v15 != 210)
                      goto LABEL_9;
                    if (*v5 == 410)
                    {
                      v251 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 410;
                      v251 = (CoreML::Specification::GRULayerParams *)operator new();
                      CoreML::Specification::GRULayerParams::GRULayerParams(v251);
                      *v6 = v251;
                    }
                    v467 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v467 < 0)
                    {
                      v468 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v468 < 0)
                        return 0;
                    }
                    else
                    {
                      v468 = *v467;
                      *(_QWORD *)a2 = v467 + 1;
                    }
                    v911 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v468);
                    if ((v911 & 0x8000000000000000) != 0)
                      return 0;
                    v913 = v911;
                    result = CoreML::Specification::GRULayerParams::MergePartialFromCodedStream(v251, a2, v912);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v913))
                      return 0;
                  }
                  else
                  {
                    if (v19 != 420 || v15 != 34)
                      goto LABEL_9;
                    if (*v5 == 420)
                    {
                      v85 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 420;
                      v85 = (CoreML::Specification::UniDirectionalLSTMLayerParams *)operator new();
                      CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams(v85);
                      *v6 = v85;
                    }
                    v359 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v359 < 0)
                    {
                      v360 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v360 < 0)
                        return 0;
                    }
                    else
                    {
                      v360 = *v359;
                      *(_QWORD *)a2 = v359 + 1;
                    }
                    v754 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v360);
                    if ((v754 & 0x8000000000000000) != 0)
                      return 0;
                    v756 = v754;
                    result = CoreML::Specification::UniDirectionalLSTMLayerParams::MergePartialFromCodedStream(v85, a2, v755);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v756))
                      return 0;
                  }
                }
                else if (v19 == 430)
                {
                  if (v15 != 114)
                    goto LABEL_9;
                  if (*v5 == 430)
                  {
                    v171 = *v6;
                  }
                  else
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 430;
                    v171 = (CoreML::Specification::BiDirectionalLSTMLayerParams *)operator new();
                    CoreML::Specification::BiDirectionalLSTMLayerParams::BiDirectionalLSTMLayerParams(v171);
                    *v6 = v171;
                  }
                  v397 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v397 < 0)
                  {
                    v398 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v398 < 0)
                      return 0;
                  }
                  else
                  {
                    v398 = *v397;
                    *(_QWORD *)a2 = v397 + 1;
                  }
                  v809 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v398);
                  if ((v809 & 0x8000000000000000) != 0)
                    return 0;
                  v811 = v809;
                  result = CoreML::Specification::BiDirectionalLSTMLayerParams::MergePartialFromCodedStream(v171, a2, v810);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v811))
                    return 0;
                }
                else if (v19 == 500)
                {
                  if (v15 != 162)
                    goto LABEL_9;
                  if (*v5 == 500)
                  {
                    v172 = *v6;
                  }
                  else
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 500;
                    v172 = (CoreML::Specification::CustomLayerParams *)operator new();
                    CoreML::Specification::CustomLayerParams::CustomLayerParams(v172);
                    *v6 = v172;
                  }
                  v399 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v399 < 0)
                  {
                    v400 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v400 < 0)
                      return 0;
                  }
                  else
                  {
                    v400 = *v399;
                    *(_QWORD *)a2 = v399 + 1;
                  }
                  v812 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v400);
                  if ((v812 & 0x8000000000000000) != 0)
                    return 0;
                  v814 = v812;
                  result = CoreML::Specification::CustomLayerParams::MergePartialFromCodedStream(v172, a2, v813);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v814))
                    return 0;
                }
                else
                {
                  if (v19 != 600 || v15 != 194)
                    goto LABEL_9;
                  if (*v5 != 600)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 600;
                    v39 = (CoreML::Specification::CopyLayerParams *)operator new();
                    CoreML::Specification::CopyLayerParams::CopyLayerParams(v39);
                    *v6 = v39;
                  }
                  v40 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v40 < 0)
                  {
                    v41 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v41 < 0)
                      return 0;
                  }
                  else
                  {
                    v41 = *v40;
                    *(_QWORD *)a2 = v40 + 1;
                  }
                  v559 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v41);
                  if ((v559 & 0x8000000000000000) != 0)
                    return 0;
                  v561 = v559;
                  result = CoreML::Specification::CopyLayerParams::MergePartialFromCodedStream((CoreML::Specification::CopyLayerParams *)v559, (char **)a2, v560);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v561))
                    return 0;
                }
              }
              else if (v15 >> 3 <= 0x2AC)
              {
                if (v15 >> 3 <= 0x298)
                {
                  if (v19 == 640)
                  {
                    if (v15 != 2)
                      goto LABEL_9;
                    if (*v5 == 640)
                    {
                      v262 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 640;
                      v262 = (CoreML::Specification::RangeDynamicLayerParams *)operator new();
                      CoreML::Specification::RangeDynamicLayerParams::RangeDynamicLayerParams(v262);
                      *v6 = v262;
                    }
                    v477 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v477 < 0)
                    {
                      v478 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v478 < 0)
                        return 0;
                    }
                    else
                    {
                      v478 = *v477;
                      *(_QWORD *)a2 = v477 + 1;
                    }
                    v925 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v478);
                    if ((v925 & 0x8000000000000000) != 0)
                      return 0;
                    v927 = v925;
                    result = CoreML::Specification::RangeDynamicLayerParams::MergePartialFromCodedStream(v262, (char **)a2, v926);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v927))
                      return 0;
                  }
                  else
                  {
                    if (v19 != 660 || v15 != 162)
                      goto LABEL_9;
                    if (*v5 == 660)
                    {
                      v95 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 660;
                      v95 = (CoreML::Specification::ClipLayerParams *)operator new();
                      CoreML::Specification::ClipLayerParams::ClipLayerParams(v95);
                      *v6 = v95;
                    }
                    v371 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v371 < 0)
                    {
                      v372 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v372 < 0)
                        return 0;
                    }
                    else
                    {
                      v372 = *v371;
                      *(_QWORD *)a2 = v371 + 1;
                    }
                    v771 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v372);
                    if ((v771 & 0x8000000000000000) != 0)
                      return 0;
                    v773 = v771;
                    result = CoreML::Specification::ClipLayerParams::MergePartialFromCodedStream(v95, (char **)a2, v772);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v773))
                      return 0;
                  }
                }
                else if (v19 == 665)
                {
                  if (v15 != 202)
                    goto LABEL_9;
                  if (*v5 != 665)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 665;
                    v189 = (CoreML::Specification::CeilLayerParams *)operator new();
                    CoreML::Specification::CeilLayerParams::CeilLayerParams(v189);
                    *v6 = v189;
                  }
                  v190 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v190 < 0)
                  {
                    v191 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v191 < 0)
                      return 0;
                  }
                  else
                  {
                    v191 = *v190;
                    *(_QWORD *)a2 = v190 + 1;
                  }
                  v630 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v191);
                  if ((v630 & 0x8000000000000000) != 0)
                    return 0;
                  v632 = v630;
                  result = CoreML::Specification::CeilLayerParams::MergePartialFromCodedStream((CoreML::Specification::CeilLayerParams *)v630, (char **)a2, v631);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v632))
                    return 0;
                }
                else if (v19 == 670)
                {
                  if (v15 != 242)
                    goto LABEL_9;
                  if (*v5 != 670)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 670;
                    v192 = (CoreML::Specification::FloorLayerParams *)operator new();
                    CoreML::Specification::FloorLayerParams::FloorLayerParams(v192);
                    *v6 = v192;
                  }
                  v193 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v193 < 0)
                  {
                    v194 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v194 < 0)
                      return 0;
                  }
                  else
                  {
                    v194 = *v193;
                    *(_QWORD *)a2 = v193 + 1;
                  }
                  v633 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v194);
                  if ((v633 & 0x8000000000000000) != 0)
                    return 0;
                  v635 = v633;
                  result = CoreML::Specification::FloorLayerParams::MergePartialFromCodedStream((CoreML::Specification::FloorLayerParams *)v633, (char **)a2, v634);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v635))
                    return 0;
                }
                else
                {
                  if (v19 != 680 || v15 != 66)
                    goto LABEL_9;
                  if (*v5 != 680)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 680;
                    v51 = (CoreML::Specification::SignLayerParams *)operator new();
                    CoreML::Specification::SignLayerParams::SignLayerParams(v51);
                    *v6 = v51;
                  }
                  v52 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v52 < 0)
                  {
                    v53 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v53 < 0)
                      return 0;
                  }
                  else
                  {
                    v53 = *v52;
                    *(_QWORD *)a2 = v52 + 1;
                  }
                  v565 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v53);
                  if ((v565 & 0x8000000000000000) != 0)
                    return 0;
                  v567 = v565;
                  result = CoreML::Specification::SignLayerParams::MergePartialFromCodedStream((CoreML::Specification::SignLayerParams *)v565, (char **)a2, v566);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v567))
                    return 0;
                }
              }
              else if (v15 >> 3 > 0x2CA)
              {
                if (v19 == 715)
                {
                  if (v15 != 90)
                    goto LABEL_9;
                  if (*v5 != 715)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 715;
                    v236 = (CoreML::Specification::CosLayerParams *)operator new();
                    CoreML::Specification::CosLayerParams::CosLayerParams(v236);
                    *v6 = v236;
                  }
                  v237 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v237 < 0)
                  {
                    v238 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v238 < 0)
                      return 0;
                  }
                  else
                  {
                    v238 = *v237;
                    *(_QWORD *)a2 = v237 + 1;
                  }
                  v660 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v238);
                  if ((v660 & 0x8000000000000000) != 0)
                    return 0;
                  v662 = v660;
                  result = CoreML::Specification::CosLayerParams::MergePartialFromCodedStream((CoreML::Specification::CosLayerParams *)v660, (char **)a2, v661);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v662))
                    return 0;
                }
                else if (v19 == 720)
                {
                  if (v15 != 130)
                    goto LABEL_9;
                  if (*v5 != 720)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 720;
                    v239 = (CoreML::Specification::TanLayerParams *)operator new();
                    CoreML::Specification::TanLayerParams::TanLayerParams(v239);
                    *v6 = v239;
                  }
                  v240 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v240 < 0)
                  {
                    v241 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v241 < 0)
                      return 0;
                  }
                  else
                  {
                    v241 = *v240;
                    *(_QWORD *)a2 = v240 + 1;
                  }
                  v663 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v241);
                  if ((v663 & 0x8000000000000000) != 0)
                    return 0;
                  v665 = v663;
                  result = CoreML::Specification::TanLayerParams::MergePartialFromCodedStream((CoreML::Specification::TanLayerParams *)v663, (char **)a2, v664);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v665))
                    return 0;
                }
                else
                {
                  if (v19 != 730 || v15 != 210)
                    goto LABEL_9;
                  if (*v5 != 730)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 730;
                    v72 = (CoreML::Specification::AsinLayerParams *)operator new();
                    CoreML::Specification::AsinLayerParams::AsinLayerParams(v72);
                    *v6 = v72;
                  }
                  v73 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v73 < 0)
                  {
                    v74 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v74 < 0)
                      return 0;
                  }
                  else
                  {
                    v74 = *v73;
                    *(_QWORD *)a2 = v73 + 1;
                  }
                  v574 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v74);
                  if ((v574 & 0x8000000000000000) != 0)
                    return 0;
                  v576 = v574;
                  result = CoreML::Specification::AsinLayerParams::MergePartialFromCodedStream((CoreML::Specification::AsinLayerParams *)v574, (char **)a2, v575);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v576))
                    return 0;
                }
              }
              else if (v19 == 685)
              {
                if (v15 != 106)
                  goto LABEL_9;
                if (*v5 != 685)
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 685;
                  v145 = (CoreML::Specification::RoundLayerParams *)operator new();
                  CoreML::Specification::RoundLayerParams::RoundLayerParams(v145);
                  *v6 = v145;
                }
                v146 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v146 < 0)
                {
                  v147 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v147 < 0)
                    return 0;
                }
                else
                {
                  v147 = *v146;
                  *(_QWORD *)a2 = v146 + 1;
                }
                v604 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v147);
                if ((v604 & 0x8000000000000000) != 0)
                  return 0;
                v606 = v604;
                result = CoreML::Specification::RoundLayerParams::MergePartialFromCodedStream((CoreML::Specification::RoundLayerParams *)v604, (char **)a2, v605);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v606))
                  return 0;
              }
              else if (v19 == 700)
              {
                if (v15 != 226)
                  goto LABEL_9;
                if (*v5 != 700)
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 700;
                  v148 = (CoreML::Specification::Exp2LayerParams *)operator new();
                  CoreML::Specification::Exp2LayerParams::Exp2LayerParams(v148);
                  *v6 = v148;
                }
                v149 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v149 < 0)
                {
                  v150 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v150 < 0)
                    return 0;
                }
                else
                {
                  v150 = *v149;
                  *(_QWORD *)a2 = v149 + 1;
                }
                v607 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v150);
                if ((v607 & 0x8000000000000000) != 0)
                  return 0;
                v609 = v607;
                result = CoreML::Specification::Exp2LayerParams::MergePartialFromCodedStream((CoreML::Specification::Exp2LayerParams *)v607, (char **)a2, v608);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v609))
                  return 0;
              }
              else
              {
                if (v19 != 710 || v15 != 50)
                  goto LABEL_9;
                if (*v5 != 710)
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 710;
                  v27 = (CoreML::Specification::SinLayerParams *)operator new();
                  CoreML::Specification::SinLayerParams::SinLayerParams(v27);
                  *v6 = v27;
                }
                v28 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v28 < 0)
                {
                  v29 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v29 < 0)
                    return 0;
                }
                else
                {
                  v29 = *v28;
                  *(_QWORD *)a2 = v28 + 1;
                }
                v553 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v29);
                if ((v553 & 0x8000000000000000) != 0)
                  return 0;
                v555 = v553;
                result = CoreML::Specification::SinLayerParams::MergePartialFromCodedStream((CoreML::Specification::SinLayerParams *)v553, (char **)a2, v554);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v555))
                  return 0;
              }
            }
            if (v15 >> 3 <= 0xDB)
              break;
            if (v15 >> 3 > 0x121)
            {
              if (v15 >> 3 > 0x149)
              {
                if (v15 >> 3 <= 0x158)
                {
                  if (v19 == 330)
                  {
                    if (v15 != 82)
                      goto LABEL_9;
                    if (*v5 == 330)
                    {
                      v272 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 330;
                      v272 = (CoreML::Specification::SplitLayerParams *)operator new();
                      CoreML::Specification::SplitLayerParams::SplitLayerParams(v272);
                      *v6 = v272;
                    }
                    v491 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v491 < 0)
                    {
                      v492 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v492 < 0)
                        return 0;
                    }
                    else
                    {
                      v492 = *v491;
                      *(_QWORD *)a2 = v491 + 1;
                    }
                    v946 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v492);
                    if ((v946 & 0x8000000000000000) != 0)
                      return 0;
                    v948 = v946;
                    result = CoreML::Specification::SplitLayerParams::MergePartialFromCodedStream(v272, (char **)a2, v947);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v948))
                      return 0;
                  }
                  else
                  {
                    if (v19 != 340 || v15 != 162)
                      goto LABEL_9;
                    if (*v5 == 340)
                    {
                      v109 = *v6;
                    }
                    else
                    {
                      CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                      *((_DWORD *)this + 35) = 340;
                      v109 = (CoreML::Specification::SequenceRepeatLayerParams *)operator new();
                      CoreML::Specification::SequenceRepeatLayerParams::SequenceRepeatLayerParams(v109);
                      *v6 = v109;
                    }
                    v381 = *(char **)a2;
                    if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v381 < 0)
                    {
                      v382 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                      if (v382 < 0)
                        return 0;
                    }
                    else
                    {
                      v382 = *v381;
                      *(_QWORD *)a2 = v381 + 1;
                    }
                    v786 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v382);
                    if ((v786 & 0x8000000000000000) != 0)
                      return 0;
                    v788 = v786;
                    result = CoreML::Specification::SequenceRepeatLayerParams::MergePartialFromCodedStream(v109, (char **)a2, v787);
                    if (!(_DWORD)result)
                      return result;
                    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v788))
                      return 0;
                  }
                }
                else if (v19 == 345)
                {
                  if (v15 != 202)
                    goto LABEL_9;
                  if (*v5 == 345)
                  {
                    v219 = *v6;
                  }
                  else
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 345;
                    v219 = (CoreML::Specification::ReorganizeDataLayerParams *)operator new();
                    CoreML::Specification::ReorganizeDataLayerParams::ReorganizeDataLayerParams(v219);
                    *v6 = v219;
                  }
                  v439 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v439 < 0)
                  {
                    v440 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v440 < 0)
                      return 0;
                  }
                  else
                  {
                    v440 = *v439;
                    *(_QWORD *)a2 = v439 + 1;
                  }
                  v870 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v440);
                  if ((v870 & 0x8000000000000000) != 0)
                    return 0;
                  v872 = v870;
                  result = CoreML::Specification::ReorganizeDataLayerParams::MergePartialFromCodedStream(v219, (char **)a2, v871);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v872))
                    return 0;
                }
                else if (v19 == 350)
                {
                  if (v15 != 242)
                    goto LABEL_9;
                  if (*v5 == 350)
                  {
                    v220 = *v6;
                  }
                  else
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 350;
                    v220 = (CoreML::Specification::SliceLayerParams *)operator new();
                    CoreML::Specification::SliceLayerParams::SliceLayerParams(v220);
                    *v6 = v220;
                  }
                  v441 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v441 < 0)
                  {
                    v442 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v442 < 0)
                      return 0;
                  }
                  else
                  {
                    v442 = *v441;
                    *(_QWORD *)a2 = v441 + 1;
                  }
                  v873 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v442);
                  if ((v873 & 0x8000000000000000) != 0)
                    return 0;
                  v875 = v873;
                  result = CoreML::Specification::SliceLayerParams::MergePartialFromCodedStream(v220, (char **)a2, v874);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v875))
                    return 0;
                }
                else
                {
                  if (v19 != 400 || v15 != 130)
                    goto LABEL_9;
                  if (*v5 == 400)
                  {
                    v61 = *v6;
                  }
                  else
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 400;
                    v61 = (CoreML::Specification::SimpleRecurrentLayerParams *)operator new();
                    CoreML::Specification::SimpleRecurrentLayerParams::SimpleRecurrentLayerParams(v61);
                    *v6 = v61;
                  }
                  v343 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v343 < 0)
                  {
                    v344 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v344 < 0)
                      return 0;
                  }
                  else
                  {
                    v344 = *v343;
                    *(_QWORD *)a2 = v343 + 1;
                  }
                  v731 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v344);
                  if ((v731 & 0x8000000000000000) != 0)
                    return 0;
                  v733 = v731;
                  result = CoreML::Specification::SimpleRecurrentLayerParams::MergePartialFromCodedStream(v61, a2, v732);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v733))
                    return 0;
                }
              }
              else if (v15 >> 3 <= 0x12C)
              {
                if (v19 == 290)
                {
                  if (v15 != 18)
                    goto LABEL_9;
                  if (*v5 == 290)
                  {
                    v253 = *v6;
                  }
                  else
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 290;
                    v253 = (CoreML::Specification::LoadConstantLayerParams *)operator new();
                    CoreML::Specification::LoadConstantLayerParams::LoadConstantLayerParams(v253);
                    *v6 = v253;
                  }
                  v471 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v471 < 0)
                  {
                    v472 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v472 < 0)
                      return 0;
                  }
                  else
                  {
                    v472 = *v471;
                    *(_QWORD *)a2 = v471 + 1;
                  }
                  v917 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v472);
                  if ((v917 & 0x8000000000000000) != 0)
                    return 0;
                  v919 = v917;
                  result = CoreML::Specification::LoadConstantLayerParams::MergePartialFromCodedStream(v253, (char **)a2, v918);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v919))
                    return 0;
                }
                else
                {
                  if (v19 != 300 || v15 != 98)
                    goto LABEL_9;
                  if (*v5 == 300)
                  {
                    v87 = *v6;
                  }
                  else
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 300;
                    v87 = (CoreML::Specification::ReshapeLayerParams *)operator new();
                    CoreML::Specification::ReshapeLayerParams::ReshapeLayerParams(v87);
                    *v6 = v87;
                  }
                  v363 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v363 < 0)
                  {
                    v364 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v364 < 0)
                      return 0;
                  }
                  else
                  {
                    v364 = *v363;
                    *(_QWORD *)a2 = v363 + 1;
                  }
                  v760 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v364);
                  if ((v760 & 0x8000000000000000) != 0)
                    return 0;
                  v762 = v760;
                  result = CoreML::Specification::ReshapeLayerParams::MergePartialFromCodedStream(v87, (char **)a2, v761);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v762))
                    return 0;
                }
              }
              else if (v19 == 301)
              {
                if (v15 != 106)
                  goto LABEL_9;
                if (*v5 == 301)
                {
                  v175 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 301;
                  v175 = (CoreML::Specification::FlattenLayerParams *)operator new();
                  CoreML::Specification::FlattenLayerParams::FlattenLayerParams(v175);
                  *v6 = v175;
                }
                v405 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v405 < 0)
                {
                  v406 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v406 < 0)
                    return 0;
                }
                else
                {
                  v406 = *v405;
                  *(_QWORD *)a2 = v405 + 1;
                }
                v821 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v406);
                if ((v821 & 0x8000000000000000) != 0)
                  return 0;
                v823 = v821;
                result = CoreML::Specification::FlattenLayerParams::MergePartialFromCodedStream(v175, (char **)a2, v822);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v823))
                  return 0;
              }
              else if (v19 == 310)
              {
                if (v15 != 178)
                  goto LABEL_9;
                if (*v5 == 310)
                {
                  v176 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 310;
                  v176 = (CoreML::Specification::PermuteLayerParams *)operator new();
                  CoreML::Specification::PermuteLayerParams::PermuteLayerParams(v176);
                  *v6 = v176;
                }
                v407 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v407 < 0)
                {
                  v408 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v408 < 0)
                    return 0;
                }
                else
                {
                  v408 = *v407;
                  *(_QWORD *)a2 = v407 + 1;
                }
                v824 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v408);
                if ((v824 & 0x8000000000000000) != 0)
                  return 0;
                v826 = v824;
                result = CoreML::Specification::PermuteLayerParams::MergePartialFromCodedStream(v176, (char **)a2, v825);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v826))
                  return 0;
              }
              else
              {
                if (v19 != 320 || v15 != 2)
                  goto LABEL_9;
                if (*v5 == 320)
                {
                  v43 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 320;
                  v43 = (CoreML::Specification::ConcatLayerParams *)operator new();
                  CoreML::Specification::ConcatLayerParams::ConcatLayerParams(v43);
                  *v6 = v43;
                }
                v321 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v321 < 0)
                {
                  v322 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v322 < 0)
                    return 0;
                }
                else
                {
                  v322 = *v321;
                  *(_QWORD *)a2 = v321 + 1;
                }
                v699 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v322);
                if ((v699 & 0x8000000000000000) != 0)
                  return 0;
                v701 = v699;
                result = CoreML::Specification::ConcatLayerParams::MergePartialFromCodedStream(v43, a2, v700);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v701))
                  return 0;
              }
            }
            else if (v15 >> 3 > 0xF9)
            {
              if (v15 >> 3 <= 0x104)
              {
                if (v19 == 250)
                {
                  if (v15 != 210)
                    goto LABEL_9;
                  if (*v5 == 250)
                  {
                    v263 = *v6;
                  }
                  else
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 250;
                    v263 = (CoreML::Specification::BiasLayerParams *)operator new();
                    CoreML::Specification::BiasLayerParams::BiasLayerParams(v263);
                    *v6 = v263;
                  }
                  v479 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v479 < 0)
                  {
                    v480 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v480 < 0)
                      return 0;
                  }
                  else
                  {
                    v480 = *v479;
                    *(_QWORD *)a2 = v479 + 1;
                  }
                  v928 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v480);
                  if ((v928 & 0x8000000000000000) != 0)
                    return 0;
                  v930 = v928;
                  result = CoreML::Specification::BiasLayerParams::MergePartialFromCodedStream(v263, (char **)a2, v929);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v930))
                    return 0;
                }
                else
                {
                  if (v19 != 260 || v15 != 34)
                    goto LABEL_9;
                  if (*v5 != 260)
                  {
                    CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                    *((_DWORD *)this + 35) = 260;
                    v96 = (CoreML::Specification::MaxLayerParams *)operator new();
                    CoreML::Specification::MaxLayerParams::MaxLayerParams(v96);
                    *v6 = v96;
                  }
                  v97 = *(char **)a2;
                  if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v97 < 0)
                  {
                    v98 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                    if (v98 < 0)
                      return 0;
                  }
                  else
                  {
                    v98 = *v97;
                    *(_QWORD *)a2 = v97 + 1;
                  }
                  v586 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v98);
                  if ((v586 & 0x8000000000000000) != 0)
                    return 0;
                  v588 = v586;
                  result = CoreML::Specification::MaxLayerParams::MergePartialFromCodedStream((CoreML::Specification::MaxLayerParams *)v586, (char **)a2, v587);
                  if (!(_DWORD)result)
                    return result;
                  if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v588))
                    return 0;
                }
              }
              else if (v19 == 261)
              {
                if (v15 != 42)
                  goto LABEL_9;
                if (*v5 != 261)
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 261;
                  v195 = (CoreML::Specification::MinLayerParams *)operator new();
                  CoreML::Specification::MinLayerParams::MinLayerParams(v195);
                  *v6 = v195;
                }
                v196 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v196 < 0)
                {
                  v197 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v197 < 0)
                    return 0;
                }
                else
                {
                  v197 = *v196;
                  *(_QWORD *)a2 = v196 + 1;
                }
                v636 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v197);
                if ((v636 & 0x8000000000000000) != 0)
                  return 0;
                v638 = v636;
                result = CoreML::Specification::MinLayerParams::MergePartialFromCodedStream((CoreML::Specification::MinLayerParams *)v636, (char **)a2, v637);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v638))
                  return 0;
              }
              else if (v19 == 270)
              {
                if (v15 != 114)
                  goto LABEL_9;
                if (*v5 == 270)
                {
                  v198 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 270;
                  v198 = (CoreML::Specification::DotProductLayerParams *)operator new();
                  CoreML::Specification::DotProductLayerParams::DotProductLayerParams(v198);
                  *v6 = v198;
                }
                v421 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v421 < 0)
                {
                  v422 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v422 < 0)
                    return 0;
                }
                else
                {
                  v422 = *v421;
                  *(_QWORD *)a2 = v421 + 1;
                }
                v843 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v422);
                if ((v843 & 0x8000000000000000) != 0)
                  return 0;
                v845 = v843;
                result = CoreML::Specification::DotProductLayerParams::MergePartialFromCodedStream(v198, (char **)a2, v844);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v845))
                  return 0;
              }
              else
              {
                if (v19 != 280 || v15 != 194)
                  goto LABEL_9;
                if (*v5 == 280)
                {
                  v54 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 280;
                  v54 = (CoreML::Specification::ReduceLayerParams *)operator new();
                  CoreML::Specification::ReduceLayerParams::ReduceLayerParams(v54);
                  *v6 = v54;
                }
                v329 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v329 < 0)
                {
                  v330 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v330 < 0)
                    return 0;
                }
                else
                {
                  v330 = *v329;
                  *(_QWORD *)a2 = v329 + 1;
                }
                v710 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v330);
                if ((v710 & 0x8000000000000000) != 0)
                  return 0;
                v712 = v710;
                result = CoreML::Specification::ReduceLayerParams::MergePartialFromCodedStream(v54, (char **)a2, v711);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v712))
                  return 0;
              }
            }
            else if (v15 >> 3 <= 0xE6)
            {
              if (v19 == 220)
              {
                if (v15 != 226)
                  goto LABEL_9;
                if (*v5 == 220)
                {
                  v244 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 220;
                  v244 = (CoreML::Specification::UnaryFunctionLayerParams *)operator new();
                  CoreML::Specification::UnaryFunctionLayerParams::UnaryFunctionLayerParams(v244);
                  *v6 = v244;
                }
                v459 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v459 < 0)
                {
                  v460 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v460 < 0)
                    return 0;
                }
                else
                {
                  v460 = *v459;
                  *(_QWORD *)a2 = v459 + 1;
                }
                v900 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v460);
                if ((v900 & 0x8000000000000000) != 0)
                  return 0;
                v902 = v900;
                result = CoreML::Specification::UnaryFunctionLayerParams::MergePartialFromCodedStream(v244, (char **)a2, v901);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v902))
                  return 0;
              }
              else
              {
                if (v19 != 230 || v15 != 50)
                  goto LABEL_9;
                if (*v5 == 230)
                {
                  v76 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 230;
                  v76 = (CoreML::Specification::AddLayerParams *)operator new();
                  CoreML::Specification::AddLayerParams::AddLayerParams(v76);
                  *v6 = v76;
                }
                v353 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v353 < 0)
                {
                  v354 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v354 < 0)
                    return 0;
                }
                else
                {
                  v354 = *v353;
                  *(_QWORD *)a2 = v353 + 1;
                }
                v746 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v354);
                if ((v746 & 0x8000000000000000) != 0)
                  return 0;
                v748 = v746;
                result = CoreML::Specification::AddLayerParams::MergePartialFromCodedStream(v76, (char **)a2, v747);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v748))
                  return 0;
              }
            }
            else if (v19 == 231)
            {
              if (v15 != 58)
                goto LABEL_9;
              if (*v5 == 231)
              {
                v151 = *v6;
              }
              else
              {
                CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                *((_DWORD *)this + 35) = 231;
                v151 = (CoreML::Specification::MultiplyLayerParams *)operator new();
                CoreML::Specification::MultiplyLayerParams::MultiplyLayerParams(v151);
                *v6 = v151;
              }
              v387 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v387 < 0)
              {
                v388 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v388 < 0)
                  return 0;
              }
              else
              {
                v388 = *v387;
                *(_QWORD *)a2 = v387 + 1;
              }
              v795 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v388);
              if ((v795 & 0x8000000000000000) != 0)
                return 0;
              v797 = v795;
              result = CoreML::Specification::MultiplyLayerParams::MergePartialFromCodedStream(v151, (char **)a2, v796);
              if (!(_DWORD)result)
                return result;
              if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v797))
                return 0;
            }
            else if (v19 == 240)
            {
              if (v15 != 130)
                goto LABEL_9;
              if (*v5 != 240)
              {
                CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                *((_DWORD *)this + 35) = 240;
                v152 = (CoreML::Specification::AverageLayerParams *)operator new();
                CoreML::Specification::AverageLayerParams::AverageLayerParams(v152);
                *v6 = v152;
              }
              v153 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v153 < 0)
              {
                v154 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v154 < 0)
                  return 0;
              }
              else
              {
                v154 = *v153;
                *(_QWORD *)a2 = v153 + 1;
              }
              v610 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v154);
              if ((v610 & 0x8000000000000000) != 0)
                return 0;
              v612 = v610;
              result = CoreML::Specification::AverageLayerParams::MergePartialFromCodedStream((CoreML::Specification::AverageLayerParams *)v610, (char **)a2, v611);
              if (!(_DWORD)result)
                return result;
              if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v612))
                return 0;
            }
            else
            {
              if (v19 != 245 || v15 != 170)
                goto LABEL_9;
              if (*v5 == 245)
              {
                v31 = *v6;
              }
              else
              {
                CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                *((_DWORD *)this + 35) = 245;
                v31 = (CoreML::Specification::ScaleLayerParams *)operator new();
                CoreML::Specification::ScaleLayerParams::ScaleLayerParams(v31);
                *v6 = v31;
              }
              v311 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v311 < 0)
              {
                v312 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v312 < 0)
                  return 0;
              }
              else
              {
                v312 = *v311;
                *(_QWORD *)a2 = v311 + 1;
              }
              v684 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v312);
              if ((v684 & 0x8000000000000000) != 0)
                return 0;
              v686 = v684;
              result = CoreML::Specification::ScaleLayerParams::MergePartialFromCodedStream(v31, (char **)a2, v685);
              if (!(_DWORD)result)
                return result;
              if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v686))
                return 0;
            }
          }
          if (v15 >> 3 <= 0x9F)
            break;
          if (v15 >> 3 > 0xBD)
          {
            if (v15 >> 3 <= 0xD1)
            {
              if (v19 == 190)
              {
                if (v15 != 242)
                  goto LABEL_9;
                if (*v5 == 190)
                {
                  v269 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 190;
                  v269 = (CoreML::Specification::CropLayerParams *)operator new();
                  CoreML::Specification::CropLayerParams::CropLayerParams(v269);
                  *v6 = v269;
                }
                v485 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v485 < 0)
                {
                  v486 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v486 < 0)
                    return 0;
                }
                else
                {
                  v486 = *v485;
                  *(_QWORD *)a2 = v485 + 1;
                }
                v937 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v486);
                if ((v937 & 0x8000000000000000) != 0)
                  return 0;
                v939 = v937;
                result = CoreML::Specification::CropLayerParams::MergePartialFromCodedStream(v269, (char **)a2, v938);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v939))
                  return 0;
              }
              else
              {
                if (v19 != 200 || v15 != 66)
                  goto LABEL_9;
                if (*v5 == 200)
                {
                  v104 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 200;
                  v104 = (CoreML::Specification::PaddingLayerParams *)operator new();
                  CoreML::Specification::PaddingLayerParams::PaddingLayerParams(v104);
                  *v6 = v104;
                }
                v377 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v377 < 0)
                {
                  v378 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v378 < 0)
                    return 0;
                }
                else
                {
                  v378 = *v377;
                  *(_QWORD *)a2 = v377 + 1;
                }
                v780 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v378);
                if ((v780 & 0x8000000000000000) != 0)
                  return 0;
                v782 = v780;
                result = CoreML::Specification::PaddingLayerParams::MergePartialFromCodedStream(v104, (char **)a2, v781);
                if (!(_DWORD)result)
                  return result;
                if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v782))
                  return 0;
              }
            }
            else if (v19 == 210)
            {
              if (v15 != 146)
                goto LABEL_9;
              if (*v5 == 210)
              {
                v209 = *v6;
              }
              else
              {
                CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                *((_DWORD *)this + 35) = 210;
                v209 = (CoreML::Specification::UpsampleLayerParams *)operator new();
                CoreML::Specification::UpsampleLayerParams::UpsampleLayerParams(v209);
                *v6 = v209;
              }
              v431 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v431 < 0)
              {
                v432 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v432 < 0)
                  return 0;
              }
              else
              {
                v432 = *v431;
                *(_QWORD *)a2 = v431 + 1;
              }
              v858 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v432);
              if ((v858 & 0x8000000000000000) != 0)
                return 0;
              v860 = v858;
              result = CoreML::Specification::UpsampleLayerParams::MergePartialFromCodedStream(v209, (char **)a2, v859);
              if (!(_DWORD)result)
                return result;
              if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v860))
                return 0;
            }
            else if (v19 == 211)
            {
              if (v15 != 154)
                goto LABEL_9;
              if (*v5 == 211)
              {
                v210 = *v6;
              }
              else
              {
                CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                *((_DWORD *)this + 35) = 211;
                v210 = (CoreML::Specification::ResizeBilinearLayerParams *)operator new();
                CoreML::Specification::ResizeBilinearLayerParams::ResizeBilinearLayerParams(v210);
                *v6 = v210;
              }
              v433 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v433 < 0)
              {
                v434 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v434 < 0)
                  return 0;
              }
              else
              {
                v434 = *v433;
                *(_QWORD *)a2 = v433 + 1;
              }
              v861 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v434);
              if ((v861 & 0x8000000000000000) != 0)
                return 0;
              v863 = v861;
              result = CoreML::Specification::ResizeBilinearLayerParams::MergePartialFromCodedStream(v210, (char **)a2, v862);
              if (!(_DWORD)result)
                return result;
              if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v863))
                return 0;
            }
            else
            {
              if (v19 != 212 || v15 != 162)
                goto LABEL_9;
              if (*v5 == 212)
              {
                v58 = *v6;
              }
              else
              {
                CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                *((_DWORD *)this + 35) = 212;
                v58 = (CoreML::Specification::CropResizeLayerParams *)operator new();
                CoreML::Specification::CropResizeLayerParams::CropResizeLayerParams(v58);
                *v6 = v58;
              }
              v337 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v337 < 0)
              {
                v338 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v338 < 0)
                  return 0;
              }
              else
              {
                v338 = *v337;
                *(_QWORD *)a2 = v337 + 1;
              }
              v722 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v338);
              if ((v722 & 0x8000000000000000) != 0)
                return 0;
              v724 = v722;
              result = CoreML::Specification::CropResizeLayerParams::MergePartialFromCodedStream(v58, (char **)a2, v723);
              if (!(_DWORD)result)
                return result;
              if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v724))
                return 0;
            }
          }
          else
          {
            if (v15 >> 3 <= 0xA9)
            {
              if (v19 == 160)
              {
                if (v15 != 2)
                  goto LABEL_9;
                if (*v5 == 160)
                {
                  v250 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 160;
                  v250 = (CoreML::Specification::BatchnormLayerParams *)operator new();
                  CoreML::Specification::BatchnormLayerParams::BatchnormLayerParams(v250);
                  *v6 = v250;
                }
                v465 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v465 < 0)
                {
                  v466 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v466 < 0)
                    return 0;
                }
                else
                {
                  v466 = *v465;
                  *(_QWORD *)a2 = v465 + 1;
                }
                v909 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v466);
                if ((v909 & 0x8000000000000000) != 0)
                  return 0;
                v290 = v909;
                result = CoreML::Specification::BatchnormLayerParams::MergePartialFromCodedStream(v250, a2, v910);
                if (!(_DWORD)result)
                  return result;
              }
              else
              {
                if (v19 != 165 || v15 != 42)
                  goto LABEL_9;
                if (*v5 == 165)
                {
                  v84 = *v6;
                }
                else
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 165;
                  v84 = (CoreML::Specification::MeanVarianceNormalizeLayerParams *)operator new();
                  CoreML::Specification::MeanVarianceNormalizeLayerParams::MeanVarianceNormalizeLayerParams(v84);
                  *v6 = v84;
                }
                v357 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v357 < 0)
                {
                  v358 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v358 < 0)
                    return 0;
                }
                else
                {
                  v358 = *v357;
                  *(_QWORD *)a2 = v357 + 1;
                }
                v752 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v358);
                if ((v752 & 0x8000000000000000) != 0)
                  return 0;
                v290 = v752;
                result = CoreML::Specification::MeanVarianceNormalizeLayerParams::MergePartialFromCodedStream(v84, (char **)a2, v753);
                if (!(_DWORD)result)
                  return result;
              }
              goto LABEL_2002;
            }
            if (v19 == 170)
            {
              if (v15 != 82)
                goto LABEL_9;
              if (*v5 == 170)
              {
                v167 = *v6;
              }
              else
              {
                CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                *((_DWORD *)this + 35) = 170;
                v167 = (CoreML::Specification::L2NormalizeLayerParams *)operator new();
                CoreML::Specification::L2NormalizeLayerParams::L2NormalizeLayerParams(v167);
                *v6 = v167;
              }
              v395 = *(char **)a2;
              if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v395 < 0)
              {
                v396 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                if (v396 < 0)
                  return 0;
              }
              else
              {
                v396 = *v395;
                *(_QWORD *)a2 = v395 + 1;
              }
              v807 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v396);
              if ((v807 & 0x8000000000000000) != 0)
                return 0;
              v290 = v807;
              result = CoreML::Specification::L2NormalizeLayerParams::MergePartialFromCodedStream(v167, (char **)a2, v808);
              if (!(_DWORD)result)
                return result;
              goto LABEL_2002;
            }
            if (v19 == 175)
            {
              if (v15 == 122)
              {
                if (*v5 != 175)
                {
                  CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
                  *((_DWORD *)this + 35) = 175;
                  v168 = (CoreML::Specification::SoftmaxLayerParams *)operator new();
                  CoreML::Specification::SoftmaxLayerParams::SoftmaxLayerParams(v168);
                  *v6 = v168;
                }
                v169 = *(char **)a2;
                if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v169 < 0)
                {
                  v170 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
                  if (v170 < 0)
                    return 0;
                }
                else
                {
                  v170 = *v169;
                  *(_QWORD *)a2 = v169 + 1;
                }
                v622 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v170);
                if ((v622 & 0x8000000000000000) != 0)
                  return 0;
                v290 = v622;
                result = CoreML::Specification::SoftmaxLayerParams::MergePartialFromCodedStream((CoreML::Specification::SoftmaxLayerParams *)v622, (char **)a2, v623);
                if (!(_DWORD)result)
                  return result;
                goto LABEL_2002;
              }
              goto LABEL_9;
            }
            if (v19 != 180 || v15 != 162)
              goto LABEL_9;
            if (*v5 == 180)
            {
              v37 = *v6;
            }
            else
            {
              CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
              *((_DWORD *)this + 35) = 180;
              v37 = (CoreML::Specification::LRNLayerParams *)operator new();
              CoreML::Specification::LRNLayerParams::LRNLayerParams(v37);
              *v6 = v37;
            }
            v317 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v317 < 0)
            {
              v318 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v318 < 0)
                return 0;
            }
            else
            {
              v318 = *v317;
              *(_QWORD *)a2 = v317 + 1;
            }
            v693 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v318);
            if ((v693 & 0x8000000000000000) != 0)
              return 0;
            v695 = v693;
            result = CoreML::Specification::LRNLayerParams::MergePartialFromCodedStream(v37, (char **)a2, v694);
            if (!(_DWORD)result)
              return result;
            if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v695))
              return 0;
          }
        }
        if (v15 >> 3 > 0x63)
          break;
        switch(v19)
        {
          case 1u:
            if (v15 != 10)
              goto LABEL_9;
            v20 = *v10;
            if (*v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
            {
              _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string);
              v20 = *v10;
            }
            result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v20);
            if (!(_DWORD)result)
              return result;
            v22 = (unsigned __int8 *)*v10;
            if (SHIBYTE((*v10)->__r_.__value_.__r.__words[2]) < 0)
            {
              v22 = *(unsigned __int8 **)v22;
              size = (const char *)(*v10)->__r_.__value_.__l.__size_;
            }
            else
            {
              size = (const char *)HIBYTE((*v10)->__r_.__value_.__r.__words[2]);
            }
            v549 = "CoreML.Specification.NeuralNetworkLayer.name";
            goto LABEL_2121;
          case 2u:
            if (v15 != 18)
              goto LABEL_9;
            v122 = (int *)*((_QWORD *)this + 4);
            if (!v122)
            {
              v124 = *((_DWORD *)this + 7);
LABEL_2100:
              _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v124 + 1);
              v122 = (int *)*((_QWORD *)this + 4);
              v124 = *v122;
              goto LABEL_2101;
            }
            v123 = *((int *)this + 6);
            v124 = *v122;
            if ((int)v123 < *v122)
            {
              *((_DWORD *)this + 6) = v123 + 1;
              Aligned = *(std::string **)&v122[2 * v123 + 2];
              goto LABEL_2109;
            }
            if (v124 == *((_DWORD *)this + 7))
              goto LABEL_2100;
LABEL_2101:
            *v122 = v124 + 1;
            v982 = *(_tc_google::protobuf::Arena **)v9;
            if (*(_QWORD *)v9)
            {
              Aligned->__r_.__value_.__l.__size_ = 0;
              Aligned->__r_.__value_.__r.__words[2] = 0;
              Aligned->__r_.__value_.__r.__words[0] = 0;
              _tc_google::protobuf::Arena::AddListNode(v982, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              Aligned = (std::string *)operator new();
              Aligned->__r_.__value_.__l.__size_ = 0;
              Aligned->__r_.__value_.__r.__words[2] = 0;
              Aligned->__r_.__value_.__r.__words[0] = 0;
            }
            v984 = *((_QWORD *)this + 4);
            v985 = *((int *)this + 6);
            *((_DWORD *)this + 6) = v985 + 1;
            *(_QWORD *)(v984 + 8 * v985 + 8) = Aligned;
LABEL_2109:
            result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, Aligned);
            if (!(_DWORD)result)
              return result;
            v986 = *((_QWORD *)this + 4);
            v22 = *(unsigned __int8 **)(v986 + 8 * *((int *)this + 6));
            if ((char)v22[23] < 0)
            {
              v22 = *(unsigned __int8 **)v22;
              size = *(const char **)(*(_QWORD *)(v986 + 8 * *((int *)this + 6)) + 8);
            }
            else
            {
              size = (const char *)v22[23];
            }
            v549 = "CoreML.Specification.NeuralNetworkLayer.input";
            goto LABEL_2121;
          case 3u:
            if (v15 != 26)
              goto LABEL_9;
            v126 = (int *)*((_QWORD *)this + 7);
            if (!v126)
            {
              v128 = *((_DWORD *)this + 13);
LABEL_2104:
              _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v128 + 1);
              v126 = (int *)*((_QWORD *)this + 7);
              v128 = *v126;
              goto LABEL_2105;
            }
            v127 = *((int *)this + 12);
            v128 = *v126;
            if ((int)v127 < *v126)
            {
              *((_DWORD *)this + 12) = v127 + 1;
              v129 = *(std::string **)&v126[2 * v127 + 2];
              goto LABEL_2116;
            }
            if (v128 == *((_DWORD *)this + 13))
              goto LABEL_2104;
LABEL_2105:
            *v126 = v128 + 1;
            v983 = *(_tc_google::protobuf::Arena **)v8;
            if (*(_QWORD *)v8)
            {
              v129->__r_.__value_.__l.__size_ = 0;
              v129->__r_.__value_.__r.__words[2] = 0;
              v129->__r_.__value_.__r.__words[0] = 0;
              _tc_google::protobuf::Arena::AddListNode(v983, v129, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              v129 = (std::string *)operator new();
              v129->__r_.__value_.__l.__size_ = 0;
              v129->__r_.__value_.__r.__words[2] = 0;
              v129->__r_.__value_.__r.__words[0] = 0;
            }
            v987 = *((_QWORD *)this + 7);
            v988 = *((int *)this + 12);
            *((_DWORD *)this + 12) = v988 + 1;
            *(_QWORD *)(v987 + 8 * v988 + 8) = v129;
LABEL_2116:
            result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, v129);
            if (!(_DWORD)result)
              return result;
            v989 = *((_QWORD *)this + 7);
            v22 = *(unsigned __int8 **)(v989 + 8 * *((int *)this + 12));
            if ((char)v22[23] < 0)
            {
              v22 = *(unsigned __int8 **)v22;
              size = *(const char **)(*(_QWORD *)(v989 + 8 * *((int *)this + 12)) + 8);
            }
            else
            {
              size = (const char *)v22[23];
            }
            v549 = "CoreML.Specification.NeuralNetworkLayer.output";
LABEL_2121:
            if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v22, size, 0, (uint64_t)v549))return 0;
            break;
          case 4u:
            if (v15 != 34)
              goto LABEL_9;
            v130 = (uint64_t)v7;
            goto LABEL_482;
          case 5u:
            if (v15 != 42)
              goto LABEL_9;
            v130 = (uint64_t)v990;
LABEL_482:
            v131 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Tensor>::TypeHandler>(v130);
            v132 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v132 < 0)
            {
              v133 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v133 < 0)
                return 0;
            }
            else
            {
              v133 = *v132;
              *(_QWORD *)a2 = v132 + 1;
            }
            v288 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v133);
            if ((v288 & 0x8000000000000000) != 0)
              return 0;
            v290 = v288;
            result = CoreML::Specification::Tensor::MergePartialFromCodedStream(v131, (char **)a2, v289);
            if (!(_DWORD)result)
              return result;
            goto LABEL_2002;
          case 0xAu:
            if (v15 != 80)
              goto LABEL_9;
            v134 = *(char **)a2;
            if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v134 < 0)
            {
              Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
              if ((v536 & 1) == 0)
                return 0;
            }
            else
            {
              Varint64Fallback = *v134;
              *(_QWORD *)a2 = v134 + 1;
            }
            *((_BYTE *)this + 120) = Varint64Fallback != 0;
            goto LABEL_2;
          default:
            goto LABEL_9;
        }
      }
      if (v15 >> 3 > 0x81)
        break;
      if (v19 == 100)
      {
        if (v15 != 34)
          goto LABEL_9;
        if (*v5 == 100)
        {
          v258 = *v6;
        }
        else
        {
          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
          *((_DWORD *)this + 35) = 100;
          v258 = (CoreML::Specification::ConvolutionLayerParams *)operator new();
          CoreML::Specification::ConvolutionLayerParams::ConvolutionLayerParams(v258);
          *v6 = v258;
        }
        v475 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v475 < 0)
        {
          v476 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v476 < 0)
            return 0;
        }
        else
        {
          v476 = *v475;
          *(_QWORD *)a2 = v475 + 1;
        }
        v923 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v476);
        if ((v923 & 0x8000000000000000) != 0)
          return 0;
        v290 = v923;
        result = CoreML::Specification::ConvolutionLayerParams::MergePartialFromCodedStream(v258, a2, v924);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v19 != 120 || v15 != 194)
          goto LABEL_9;
        if (*v5 == 120)
        {
          v91 = *v6;
        }
        else
        {
          CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
          *((_DWORD *)this + 35) = 120;
          v91 = (CoreML::Specification::PoolingLayerParams *)operator new();
          CoreML::Specification::PoolingLayerParams::PoolingLayerParams(v91);
          *v6 = v91;
        }
        v369 = *(char **)a2;
        if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v369 < 0)
        {
          v370 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v370 < 0)
            return 0;
        }
        else
        {
          v370 = *v369;
          *(_QWORD *)a2 = v369 + 1;
        }
        v769 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v370);
        if ((v769 & 0x8000000000000000) != 0)
          return 0;
        v290 = v769;
        result = CoreML::Specification::PoolingLayerParams::MergePartialFromCodedStream(v91, a2, v770);
        if (!(_DWORD)result)
          return result;
      }
LABEL_2002:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v290))
        return 0;
    }
    if (v19 == 130)
    {
      if (v15 != 18)
        goto LABEL_9;
      if (*v5 == 130)
      {
        v181 = *v6;
      }
      else
      {
        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
        *((_DWORD *)this + 35) = 130;
        v181 = (CoreML::Specification::ActivationParams *)operator new();
        CoreML::Specification::ActivationParams::ActivationParams(v181);
        *v6 = v181;
      }
      v417 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v417 < 0)
      {
        v418 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v418 < 0)
          return 0;
      }
      else
      {
        v418 = *v417;
        *(_QWORD *)a2 = v417 + 1;
      }
      v839 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v418);
      if ((v839 & 0x8000000000000000) != 0)
        return 0;
      v290 = v839;
      result = CoreML::Specification::ActivationParams::MergePartialFromCodedStream(v181, a2, v840);
      if (!(_DWORD)result)
        return result;
      goto LABEL_2002;
    }
    if (v19 == 140)
    {
      if (v15 != 98)
        goto LABEL_9;
      if (*v5 == 140)
      {
        v182 = *v6;
      }
      else
      {
        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
        *((_DWORD *)this + 35) = 140;
        v182 = (CoreML::Specification::InnerProductLayerParams *)operator new();
        CoreML::Specification::InnerProductLayerParams::InnerProductLayerParams(v182);
        *v6 = v182;
      }
      v419 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v419 < 0)
      {
        v420 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v420 < 0)
          return 0;
      }
      else
      {
        v420 = *v419;
        *(_QWORD *)a2 = v419 + 1;
      }
      v841 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v420);
      if ((v841 & 0x8000000000000000) != 0)
        return 0;
      v290 = v841;
      result = CoreML::Specification::InnerProductLayerParams::MergePartialFromCodedStream(v182, a2, v842);
      if (!(_DWORD)result)
        return result;
      goto LABEL_2002;
    }
    if (v19 == 150 && v15 == 178)
    {
      if (*v5 == 150)
      {
        v47 = *v6;
      }
      else
      {
        CoreML::Specification::NeuralNetworkLayer::clear_layer((uint64_t)this);
        *((_DWORD *)this + 35) = 150;
        v47 = (CoreML::Specification::EmbeddingLayerParams *)operator new();
        CoreML::Specification::EmbeddingLayerParams::EmbeddingLayerParams(v47);
        *v6 = v47;
      }
      v327 = *(char **)a2;
      if (*(_QWORD *)a2 >= *((_QWORD *)a2 + 1) || *v327 < 0)
      {
        v328 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v328 < 0)
          return 0;
      }
      else
      {
        v328 = *v327;
        *(_QWORD *)a2 = v327 + 1;
      }
      v708 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v328);
      if ((v708 & 0x8000000000000000) != 0)
        return 0;
      v290 = v708;
      result = CoreML::Specification::EmbeddingLayerParams::MergePartialFromCodedStream(v47, a2, v709);
      if (!(_DWORD)result)
        return result;
      goto LABEL_2002;
    }
LABEL_9:
    if (!(_DWORD)v15 || (v15 & 7) == 4)
      return 1;
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v15, a3) & 1) == 0)return 0;
  }
}

