unint64_t *boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000ll,(unsigned short)6,long long>>::operator-@<X0>(unint64_t *result@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *result;
  if (*result - 0x7FFFFFFFFFFFFFFELL >= 3)
  {
    v5 = *a2;
    if ((unint64_t)(*a2 - 0x7FFFFFFFFFFFFFFELL) >= 3)
      goto LABEL_13;
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFELL;
    if (v3 == 0x7FFFFFFFFFFFFFFELL)
      goto LABEL_14;
    v5 = *a2;
  }
  v4 = 0x7FFFFFFFFFFFFFFELL;
  if (v5 == 0x7FFFFFFFFFFFFFFELL)
    goto LABEL_14;
  v6 = 0x8000000000000000;
  if (v3 == 0x8000000000000000 || (v6 = 0x7FFFFFFFFFFFFFFFLL, v3 == 0x7FFFFFFFFFFFFFFFLL))
  {
    if (v5 == v6)
      v4 = 0x7FFFFFFFFFFFFFFELL;
    else
      v4 = *result;
    goto LABEL_14;
  }
  v4 = 0x8000000000000000;
  if (v5 == 0x8000000000000000)
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_14;
  }
  if (v5 != 0x7FFFFFFFFFFFFFFFLL)
LABEL_13:
    v4 = v3 - v5;
LABEL_14:
  *a3 = v4;
  return result;
}

uint64_t boost::date_time::convert_string_type<char,char>@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v2;
  char *v3;
  std::string::size_type v4;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = (char *)a1;
  else
    v3 = *(char **)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  return std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a2, (uint64_t)a2, v3, &v3[v4], v4);
}

void sub_217F53358(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::get(uint64_t a1, uint64_t *a2, _QWORD **a3, std::ios_base *a4, uint64_t *a5, std::string *a6, int a7)
{
  char v12;
  uint64_t v13;
  char *v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  char *v23;
  uint64_t has_facet;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned __int16 v45;
  const char *v46;
  const char *imp;
  char v48;
  std::ios_base::failure_vtbl *v49;
  char v50;
  uint64_t v51;
  char *v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char v57;
  std::string::value_type *v58;
  std::string::value_type v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned __int8 *v64;
  int v65;
  _QWORD *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  int v69;
  unsigned __int16 v70;
  unsigned __int8 *v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  unsigned int *v79;
  int v80;
  uint64_t v81;
  _QWORD *result;
  const std::error_category *v83;
  std::ios_base::failure *v84;
  const std::error_category *v85;
  std::ios_base::failure *v86;
  const std::error_category *v87;
  std::ios_base::failure *v88;
  const std::error_category *v89;
  std::ios_base::failure *v90;
  const std::error_category *v91;
  std::ios_base::failure *v92;
  const std::error_category *v93;
  std::ios_base::failure *v94;
  std::string *v95;
  char v97;
  unsigned __int16 v98;
  unsigned __int16 v99;
  unsigned __int16 v100;
  uint64_t v101;
  uint64_t v103;
  char v104;
  unsigned __int16 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int16 v109;
  std::string v110;
  std::string v111;
  std::string v112;
  std::ios_base::failure __loc;
  std::error_code v114;
  std::string::size_type v115;
  char __s;
  char v117;
  char v118;
  std::locale v119;
  uint64_t v120;

  v12 = std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, a3);
  v13 = MEMORY[0x24BDAC740];
  if ((v12 & 1) == 0)
  {
    do
    {
      v14 = *(char **)(*a2 + 24);
      if (v14 == *(char **)(*a2 + 32))
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 72))(*a2);
      else
        v15 = *v14;
      if (v15 < 0)
      {
        if (!__maskrune(v15, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v13 + 4 * v15 + 60) & 0x4000) == 0)
      {
        break;
      }
      v16 = (_QWORD *)*a2;
      v17 = *(_QWORD *)(*a2 + 24);
      if (v17 == *(_QWORD *)(*a2 + 32))
        (*(void (**)(_QWORD *))(*v16 + 80))(v16);
      else
        v16[3] = v17 + 1;
    }
    while (!std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, a3));
  }
  if ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, a3) & 1) != 0)
    goto LABEL_14;
  v18 = (_QWORD *)*a2;
  v19 = *(unsigned __int8 **)(*a2 + 24);
  if (v19 == *(unsigned __int8 **)(*a2 + 32))
  {
    v20 = (*(unsigned __int8 (**)(_QWORD *))(*v18 + 72))(v18);
    v18 = (_QWORD *)*a2;
  }
  else
  {
    v20 = *v19;
  }
  if (v20 == 45)
  {
LABEL_24:
    v23 = (char *)v18[3];
    if (v23 == (char *)v18[4])
      v97 = (*(uint64_t (**)(_QWORD *))(*v18 + 72))(v18);
    else
      v97 = *v23;
    goto LABEL_27;
  }
  v21 = (unsigned __int8 *)v18[3];
  if (v21 == (unsigned __int8 *)v18[4])
    v22 = (*(unsigned __int8 (**)(_QWORD *))(*v18 + 72))(v18);
  else
    v22 = *v21;
  if (v22 == 43)
  {
    v18 = (_QWORD *)*a2;
    goto LABEL_24;
  }
LABEL_14:
  v97 = 0;
LABEL_27:
  v120 = 0;
  std::ios_base::getloc(a4);
  has_facet = std::locale::has_facet((const std::locale *)&__loc, MEMORY[0x24BEDB4B8]);
  std::locale::~locale((std::locale *)&__loc);
  if ((has_facet & 1) == 0)
  {
    has_facet = operator new();
    *(_QWORD *)has_facet = MEMORY[0x24BEDB880] + 16;
    *(_QWORD *)(has_facet + 8) = -1;
    std::ios_base::getloc(a4);
    v25 = std::locale::id::__get(MEMORY[0x24BEDB4B8]);
    std::locale::__install_ctor((std::locale *)&__loc, (const std::locale *)&v114, (std::locale::facet *)has_facet, v25);
    std::locale::~locale((std::locale *)&v114);
    std::ios_base::imbue(a4, (const std::locale *)&__loc);
    std::locale::~locale(&v119);
    std::locale::~locale((std::locale *)&__loc);
  }
  v95 = a6;
  v26 = *(unsigned __int8 *)(a1 + 39);
  v27 = (_BYTE *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v27 = *(_BYTE **)(a1 + 16);
  v100 = 0;
  v101 = 0;
  v104 = 0;
  v103 = 0;
  v28 = 0;
  v29 = 0;
  v106 = 0;
  v107 = a1 + 112;
  v105 = 1400;
  v98 = 1;
  v99 = 1;
  while (1)
  {
    v30 = a1 + 16;
    if ((v26 & 0x80) != 0)
    {
      v30 = *(_QWORD *)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 24);
    }
    if (v27 == (_BYTE *)(v30 + v26)
      || (std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, a3) & 1) != 0)
    {
      break;
    }
    v31 = v27 + 1;
    if (*v27 == 37)
    {
      if (*(char *)(a1 + 39) < 0)
      {
        v33 = *(_QWORD *)(a1 + 16);
        v32 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        v32 = *(unsigned __int8 *)(a1 + 39);
        v33 = a1 + 16;
      }
      if (v31 == (_BYTE *)(v33 + v32))
        break;
      if (*v31 == 37)
      {
        v36 = (_QWORD *)*a2;
        v37 = *(_QWORD *)(*a2 + 24);
        if (v37 == *(_QWORD *)(*a2 + 32))
          (*(void (**)(_QWORD *))(*v36 + 80))(v36);
        else
          v36[3] = v37 + 1;
      }
      else
      {
        v38 = *v31;
        switch(*v31)
        {
          case 'A':
          case 'a':
LABEL_56:
            __s = 37;
            v117 = v38;
            v118 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v114, &__s);
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            if (SHIBYTE(v115) < 0)
            {
              std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)&v114.__val_, (std::string::size_type)v114.__cat_);
            }
            else
            {
              *(std::error_code *)&v110.__r_.__value_.__l.__data_ = v114;
              v110.__r_.__value_.__r.__words[2] = v115;
            }
            boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_weekday(v107, (_QWORD **)a2, a3, (char *)&v110, (uint64_t)&__loc);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            imp = (const char *)*((unsigned __int8 *)&__loc.__ec_.__val_ + 7);
            if (*((char *)&__loc.__ec_.__val_ + 7) < 0)
              imp = __loc.__imp_.__imp_;
            v29 |= (unint64_t)imp > LOWORD(__loc.__ec_.__cat_);
            v48 = 1;
            if ((*((_BYTE *)&__loc.__ec_.__val_ + 7) & 0x80) != 0)
              operator delete(__loc.__vftable);
            if ((SHIBYTE(v115) & 0x80000000) == 0)
              goto LABEL_169;
            v49 = *(std::ios_base::failure_vtbl **)&v114.__val_;
            goto LABEL_168;
          case 'B':
          case 'b':
          case 'm':
            __s = 37;
            v117 = v38;
            v118 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v114, &__s);
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            if (SHIBYTE(v115) < 0)
            {
              std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)&v114.__val_, (std::string::size_type)v114.__cat_);
            }
            else
            {
              *(std::error_code *)&v111.__r_.__value_.__l.__data_ = v114;
              v111.__r_.__value_.__r.__words[2] = v115;
            }
            v45 = boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_month(v107, (_QWORD **)a2, a3, (char *)&v111, (uint64_t)&__loc);
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
            v46 = (const char *)*((unsigned __int8 *)&__loc.__ec_.__val_ + 7);
            if (*((char *)&__loc.__ec_.__val_ + 7) < 0)
              v46 = __loc.__imp_.__imp_;
            v29 |= (unint64_t)v46 > LOWORD(__loc.__ec_.__cat_);
            v99 = v45;
            if ((*((_BYTE *)&__loc.__ec_.__val_ + 7) & 0x80) != 0)
              goto LABEL_73;
            goto LABEL_74;
          case 'C':
          case 'D':
          case 'E':
          case 'G':
          case 'J':
          case 'K':
          case 'L':
          case 'N':
          case 'O':
          case 'Q':
          case 'R':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case '[':
          case '\\':
          case ']':
          case '^':
          case '_':
          case 'c':
          case 'g':
          case 'h':
          case 'i':
          case 'k':
            break;
          case 'F':
            v64 = *(unsigned __int8 **)(*a2 + 24);
            if (v64 == *(unsigned __int8 **)(*a2 + 32))
              v65 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)*a2 + 72))(*a2);
            else
              v65 = *v64;
            if (v65 == 46)
              goto LABEL_152;
            goto LABEL_156;
          case 'H':
            v43 = boost::date_time::var_string_to_int<long long,char>((_QWORD **)a2, a3, 2u);
            goto LABEL_123;
          case 'I':
          case 'l':
            v43 = boost::date_time::var_string_to_int<long long,char>((_QWORD **)a2, a3, 0x13u);
            if (v43 >= 13)
            {
              v85 = std::iostream_category();
              *(_QWORD *)&v114.__val_ = 1;
              v114.__cat_ = v85;
              v86 = std::ios_base::failure::failure(&__loc, "Bad hour value", &v114);
              boost::throw_exception<std::ios_base::failure>((uint64_t)v86);
            }
LABEL_123:
            v28 = v43;
            if (v43 == -1)
              return boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::check_special_value<boost::posix_time::ptime>(a1, (_QWORD **)a2, a3, a5, v97);
            break;
          case 'M':
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            LOBYTE(v114.__val_) = 48;
            v62 = boost::date_time::fixed_string_to_int<long long,char>((_QWORD **)a2, a3, (uint64_t)&__loc, 2u, (unsigned __int8 *)&v114);
            if (v62 == -1)
              has_facet = (uint64_t)boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::check_special_value<boost::posix_time::ptime>(a1, (_QWORD **)a2, a3, a5, v97);
            if (*((char *)&__loc.__ec_.__val_ + 7) < 0)
              operator delete(__loc.__vftable);
            v101 = v62;
            if (v62 == -1)
              return (_QWORD *)has_facet;
            break;
          case 'P':
            v66 = (_QWORD *)*a2;
            v67 = *(unsigned __int8 **)(*a2 + 24);
            v68 = *(unsigned __int8 **)(*a2 + 32);
            if (v67 == v68)
            {
              v69 = (*(unsigned __int8 (**)(_QWORD *))(*v66 + 72))(v66);
              v66 = (_QWORD *)*a2;
              v67 = *(unsigned __int8 **)(*a2 + 24);
              v68 = *(unsigned __int8 **)(*a2 + 32);
            }
            else
            {
              v69 = *v67;
            }
            if (v67 == v68)
              (*(void (**)(_QWORD *))(*v66 + 80))(v66);
            else
              v66[3] = v67 + 1;
            if (std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, a3))
            {
              v87 = std::iostream_category();
              *(_QWORD *)&v114.__val_ = 1;
              v114.__cat_ = v87;
              v88 = std::ios_base::failure::failure(&__loc, "Parse failed. Insufficient characters for %P", &v114);
              boost::throw_exception<std::ios_base::failure>((uint64_t)v88);
            }
            v75 = *(unsigned __int8 **)(*a2 + 24);
            if (v75 == *(unsigned __int8 **)(*a2 + 32))
              v76 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)*a2 + 72))(*a2);
            else
              v76 = *v75;
            if (v69 == 80 && v76 == 77)
            {
LABEL_187:
              v104 = 1;
              v103 = 12;
            }
            else
            {
              if (v69 != 65 || v76 != 77)
              {
                v91 = std::iostream_category();
                *(_QWORD *)&v114.__val_ = 1;
                v114.__cat_ = v91;
                v92 = std::ios_base::failure::failure(&__loc, "Parse failed. Invalid expression for %P", &v114);
                boost::throw_exception<std::ios_base::failure>((uint64_t)v92);
              }
LABEL_190:
              v103 = 0;
              v104 = 1;
            }
            break;
          case 'S':
LABEL_64:
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            LOBYTE(v114.__val_) = 48;
            v106 = boost::date_time::fixed_string_to_int<long long,char>((_QWORD **)a2, a3, (uint64_t)&__loc, 2u, (unsigned __int8 *)&v114);
            if (v106 == -1)
            {
              has_facet = (uint64_t)boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::check_special_value<boost::posix_time::ptime>(a1, (_QWORD **)a2, a3, a5, v97);
              v44 = 1;
            }
            else if (*v31 == 83)
            {
              v44 = 6;
            }
            else if (std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, a3))
            {
              v44 = 6;
            }
            else
            {
              v44 = 0;
            }
            if (*((char *)&__loc.__ec_.__val_ + 7) < 0)
              operator delete(__loc.__vftable);
            if (v44 == 6)
              break;
            if (v44)
              return (_QWORD *)has_facet;
LABEL_145:
            v71 = *(unsigned __int8 **)(*a2 + 24);
            if (v71 == *(unsigned __int8 **)(*a2 + 32))
              v72 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)*a2 + 72))(*a2);
            else
              v72 = *v71;
            if (v72 != 46)
              return boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::check_special_value<boost::posix_time::ptime>(a1, (_QWORD **)a2, a3, a5, v97);
LABEL_152:
            v73 = (_QWORD *)*a2;
            v74 = *(_QWORD *)(*a2 + 24);
            if (v74 == *(_QWORD *)(*a2 + 32))
              (*(void (**)(_QWORD *))(*v73 + 80))(v73);
            else
              v73[3] = v74 + 1;
            boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::parse_frac_type(a1, (_QWORD **)a2, a3, &v120);
LABEL_156:
            v29 = 1;
            break;
          case 'Y':
LABEL_62:
            __s = 37;
            v117 = v38;
            v118 = 0;
            std::string::basic_string[abi:ne180100]<0>(&v114, &__s);
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            if (SHIBYTE(v115) < 0)
            {
              std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)&v114.__val_, (std::string::size_type)v114.__cat_);
            }
            else
            {
              *(std::error_code *)&v112.__r_.__value_.__l.__data_ = v114;
              v112.__r_.__value_.__r.__words[2] = v115;
            }
            v70 = boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_year(v107, (_QWORD **)a2, a3, (uint64_t *)&v112, (uint64_t)&__loc);
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v112.__r_.__value_.__l.__data_);
            v105 = v70;
            if (*((char *)&__loc.__ec_.__val_ + 7) < 0)
LABEL_73:
              operator delete(__loc.__vftable);
LABEL_74:
            if (SHIBYTE(v115) < 0)
              operator delete(*(void **)&v114.__val_);
            break;
          case 'Z':
            if (!a7)
              goto LABEL_156;
            v31 = v27 + 2;
            if (v27[2] != 80)
              goto LABEL_192;
            v50 = std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, a3);
            v51 = MEMORY[0x24BDAC740];
            if ((v50 & 1) != 0)
              goto LABEL_100;
            do
            {
              v52 = *(char **)(*a2 + 24);
              if (v52 == *(char **)(*a2 + 32))
                v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 72))(*a2);
              else
                v53 = *v52;
              if (v53 < 0)
              {
                if (!__maskrune(v53, 0x4000uLL))
                  break;
              }
              else if ((*(_DWORD *)(v51 + 4 * v53 + 60) & 0x4000) == 0)
              {
                break;
              }
              v54 = (_QWORD *)*a2;
              v55 = *(_QWORD *)(*a2 + 24);
              if (v55 == *(_QWORD *)(*a2 + 32))
                (*(void (**)(_QWORD *))(*v54 + 80))(v54);
              else
                v54[3] = v55 + 1;
            }
            while (!std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, a3));
LABEL_100:
            while ((std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, a3) & 1) == 0)
            {
              v56 = *(char **)(*a2 + 24);
              if (v56 == *(char **)(*a2 + 32))
                v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 72))(*a2);
              else
                v57 = *v56;
              if (v57 < 0)
              {
                if (__maskrune(v57, 0x4000uLL))
                  goto LABEL_191;
              }
              else if ((*(_DWORD *)(v51 + 4 * v57 + 60) & 0x4000) != 0)
              {
                goto LABEL_191;
              }
              v58 = *(std::string::value_type **)(*a2 + 24);
              if (v58 == *(std::string::value_type **)(*a2 + 32))
                v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 72))(*a2);
              else
                v59 = *v58;
              std::string::push_back(v95, v59);
              v60 = (_QWORD *)*a2;
              v61 = *(_QWORD *)(*a2 + 24);
              if (v61 == *(_QWORD *)(*a2 + 32))
                (*(void (**)(_QWORD *))(*v60 + 80))(v60);
              else
                v60[3] = v61 + 1;
            }
            break;
          case 'd':
          case 'e':
            if (v38 == 100)
              v98 = boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_day_of_month(v107, (_QWORD **)a2, a3);
            else
              v98 = boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_var_day_of_month(v107, (_QWORD **)a2, a3);
            break;
          case 'f':
            goto LABEL_145;
          case 'j':
            memset(&__loc, 0, 24);
            LODWORD(__loc.__ec_.__cat_) = -65536;
            LOBYTE(v114.__val_) = 48;
            v63 = boost::date_time::fixed_string_to_int<unsigned short,char>((_QWORD **)a2, a3, (uint64_t)&__loc, 3u, (unsigned __int8 *)&v114);
            v100 = v63;
            if (v63 != 0xFFFF
              || (v114.__val_ = 0,
                  boost::date_time::string_parse_tree<char>::match(a1 + 328, (_QWORD **)a2, a3, (std::string *)&__loc, &v114.__val_), SWORD1(__loc.__ec_.__cat_) == -1))
            {
              LOWORD(v114.__val_) = 1;
              boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)366,boost::gregorian::bad_day_of_year>>::assign(&v114, v63);
              v48 = 1;
            }
            else
            {
              v48 = 0;
              *a5 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(SWORD1(__loc.__ec_.__cat_));
              has_facet = *a2;
            }
            if ((*((char *)&__loc.__ec_.__val_ + 7) & 0x80000000) == 0)
              goto LABEL_169;
            v49 = __loc.__vftable;
LABEL_168:
            operator delete(v49);
LABEL_169:
            if ((v48 & 1) == 0)
              return (_QWORD *)has_facet;
            break;
          default:
            switch(*v31)
            {
              case 'p':
                v39 = (_QWORD *)*a2;
                v40 = *(unsigned __int8 **)(*a2 + 24);
                v41 = *(unsigned __int8 **)(*a2 + 32);
                if (v40 == v41)
                {
                  v42 = (*(unsigned __int8 (**)(_QWORD *))(*v39 + 72))(v39);
                  v39 = (_QWORD *)*a2;
                  v40 = *(unsigned __int8 **)(*a2 + 24);
                  v41 = *(unsigned __int8 **)(*a2 + 32);
                }
                else
                {
                  v42 = *v40;
                }
                if (v40 == v41)
                  (*(void (**)(_QWORD *))(*v39 + 80))(v39);
                else
                  v39[3] = v40 + 1;
                if (std::istreambuf_iterator<char>::equal[abi:ne180100]((_QWORD **)a2, a3))
                {
                  v89 = std::iostream_category();
                  *(_QWORD *)&v114.__val_ = 1;
                  v114.__cat_ = v89;
                  v90 = std::ios_base::failure::failure(&__loc, "Parse failed. Insufficient characters for %P", &v114);
                  boost::throw_exception<std::ios_base::failure>((uint64_t)v90);
                }
                v77 = *(unsigned __int8 **)(*a2 + 24);
                if (v77 == *(unsigned __int8 **)(*a2 + 32))
                  v78 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)*a2 + 72))(*a2);
                else
                  v78 = *v77;
                if (v42 == 112 && v78 == 109)
                  goto LABEL_187;
                if (v42 != 97 || v78 != 109)
                {
                  v93 = std::iostream_category();
                  *(_QWORD *)&v114.__val_ = 1;
                  v114.__cat_ = v93;
                  v94 = std::ios_base::failure::failure(&__loc, "Parse failed. Invalid expression for %P", &v114);
                  boost::throw_exception<std::ios_base::failure>((uint64_t)v94);
                }
                return result;
              case 's':
                goto LABEL_64;
              case 'w':
                goto LABEL_56;
              case 'y':
                goto LABEL_62;
              default:
                goto LABEL_191;
            }
            goto LABEL_190;
        }
      }
LABEL_191:
      ++v31;
    }
    else
    {
      if ((v29 & 1) == 0)
      {
        v34 = (_QWORD *)*a2;
        v35 = *(_QWORD *)(*a2 + 24);
        if (v35 != *(_QWORD *)(*a2 + 32))
        {
          v29 = 0;
          v34[3] = v35 + 1;
          goto LABEL_192;
        }
        (*(void (**)(_QWORD *))(*v34 + 80))(v34);
      }
      v29 = 0;
    }
LABEL_192:
    v26 = *(unsigned __int8 *)(a1 + 39);
    v27 = v31;
  }
  if ((__int16)v100 < 1)
  {
    boost::gregorian::date::date(&__loc, v105, v99, v98);
    v80 = (int)__loc.__vftable;
  }
  else
  {
    v109 = 1400;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v109, v105);
    v79 = boost::gregorian::date::date(&v114, v109, 1u, 1u);
    __loc.__vftable = (std::ios_base::failure_vtbl *)(v100 - 1);
    v80 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator+(v79, (uint64_t *)&__loc);
  }
  v81 = 12;
  if ((v104 & 1) != 0)
    v81 = 0;
  if (v28 != 12)
    v81 = v28;
  if (v81 + v103 >= 25 && v101 >= 1)
  {
    v83 = std::iostream_category();
    *(_QWORD *)&v114.__val_ = 1;
    v114.__cat_ = v83;
    v84 = std::ios_base::failure::failure(&__loc, "Bad hour value", &v114);
    boost::throw_exception<std::ios_base::failure>((uint64_t)v84);
  }
  v108 = boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>::to_tick_count(v81 + v103, v101, v106, v120);
  v114.__val_ = v80;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep((uint64_t *)&__loc, (unsigned int *)&v114, &v108);
  *a5 = (uint64_t)__loc.__vftable;
  return (_QWORD *)*a2;
}

void sub_217F54308()
{
  uint64_t v0;

  __cxa_end_catch();
  if (*(char *)(v0 - 161) < 0)
    operator delete(*(void **)(v0 - 184));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x217F54444);
  JUMPOUT(0x217F54474);
}

void sub_217F5432C()
{
  __cxa_end_catch();
  JUMPOUT(0x217F54350);
}

void sub_217F5433C()
{
  uint64_t v0;

  if (*(char *)(v0 - 161) < 0)
    operator delete(*(void **)(v0 - 184));
  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x217F54444);
  JUMPOUT(0x217F54474);
}

void sub_217F54344()
{
  __cxa_end_catch();
  JUMPOUT(0x217F54350);
}

void sub_217F54410(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 161) < 0)
    operator delete(*(void **)(v1 - 184));
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_217F54434(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 161) < 0)
    JUMPOUT(0x217F54444);
  _Unwind_Resume(a1);
}

void sub_217F5444C()
{
  uint64_t v0;

  std::locale::~locale((std::locale *)(v0 - 184));
  JUMPOUT(0x217F54474);
}

void sub_217F54458(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 184));
  _Unwind_Resume(a1);
}

void sub_217F54468()
{
  JUMPOUT(0x217F54470);
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_year(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  _BYTE *v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned __int16 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int16 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;

  v9 = MEMORY[0x24BDAC740];
  while (1)
  {
    v10 = (_BYTE *)(*a2)[3];
    v11 = v10 == (_BYTE *)(*a2)[4] ? (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2) : *v10;
    if (v11 < 0)
    {
      if (!__maskrune(v11, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(v9 + 4 * v11 + 60) & 0x4000) == 0)
    {
      break;
    }
    if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a2, a3) & 1) != 0)
      break;
    v12 = *a2;
    v13 = (*a2)[3];
    if (v13 == (*a2)[4])
      (*(void (**)(_QWORD *))(*v12 + 80))(v12);
    else
      v12[3] = v13 + 1;
  }
  v14 = *((unsigned __int8 *)a4 + 23);
  v15 = a4;
  if (*((char *)a4 + 23) < 0)
    v15 = (_BYTE *)*a4;
  v16 = 0;
  while (1)
  {
    v17 = a4;
    if ((v14 & 0x80) != 0)
    {
      v17 = (uint64_t *)*a4;
      v14 = a4[1];
    }
    if (v15 == (char *)v17 + v14 || (std::istreambuf_iterator<char>::equal[abi:ne180100](a2, a3) & 1) != 0)
      break;
    if (*v15 != 37)
      goto LABEL_26;
    if (*((char *)a4 + 23) < 0)
    {
      v19 = (uint64_t *)*a4;
      v18 = a4[1];
    }
    else
    {
      v18 = *((unsigned __int8 *)a4 + 23);
      v19 = a4;
    }
    if (++v15 == (char *)v19 + v18)
      break;
    v20 = (char)*v15;
    if (v20 != 37)
    {
      if (v20 == 121)
      {
        v26 = 48;
        v16 = boost::date_time::fixed_string_to_int<short,char>(a2, a3, a5, 2u, &v26) + 2000;
      }
      else if (v20 == 89)
      {
        v25 = 48;
        v16 = boost::date_time::fixed_string_to_int<short,char>(a2, a3, a5, 4u, &v25);
      }
    }
    else
    {
LABEL_26:
      v21 = *a2;
      v22 = (*a2)[3];
      if (v22 == (*a2)[4])
        (*(void (**)(_QWORD *))(*v21 + 80))(v21);
      else
        v21[3] = v22 + 1;
    }
    ++v15;
    v14 = *((unsigned __int8 *)a4 + 23);
  }
  v24 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v24, v16);
  return v24;
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_month(uint64_t a1, _QWORD **a2, _QWORD **a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  _BYTE *v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  __int128 v35;
  uint64_t v36;
  int v37;
  unsigned __int16 v38;

  v10 = MEMORY[0x24BDAC740];
  while (1)
  {
    v11 = (_BYTE *)(*a2)[3];
    v12 = v11 == (_BYTE *)(*a2)[4] ? (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2) : *v11;
    if (v12 < 0)
    {
      if (!__maskrune(v12, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000) == 0)
    {
      break;
    }
    if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a2, a3) & 1) != 0)
      break;
    v13 = *a2;
    v14 = (*a2)[3];
    if (v14 == (*a2)[4])
      (*(void (**)(_QWORD *))(*v13 + 80))(v13);
    else
      v13[3] = v14 + 1;
  }
  v15 = a4[23];
  v16 = a4;
  if (a4[23] < 0)
    v16 = *(char **)a4;
  v17 = 0;
  v18 = 0;
  v19 = a1 + 56;
  v20 = a1 + 24;
  while (1)
  {
    v21 = (uint64_t *)a4;
    if ((v15 & 0x80) != 0)
    {
      v21 = *(uint64_t **)a4;
      v15 = *((_QWORD *)a4 + 1);
    }
    if (v16 == (char *)v21 + v15 || (std::istreambuf_iterator<char>::equal[abi:ne180100](a2, a3) & 1) != 0)
      break;
    v22 = v16 + 1;
    if (*v16 == 37)
    {
      if (a4[23] < 0)
      {
        v24 = *(uint64_t **)a4;
        v23 = *((_QWORD *)a4 + 1);
      }
      else
      {
        v23 = a4[23];
        v24 = (uint64_t *)a4;
      }
      if (v22 == (char *)v24 + v23)
        break;
      v27 = *v22;
      switch(v27)
      {
        case '%':
          v28 = *a2;
          v29 = (*a2)[3];
          if (v29 == (*a2)[4])
            (*(void (**)(_QWORD *))(*v28 + 80))(v28);
          else
            v28[3] = v29 + 1;
          break;
        case 'B':
          boost::date_time::string_parse_tree<char>::match(v19, a2, a3, (uint64_t)&v35);
          if (*(char *)(a5 + 23) < 0)
            operator delete(*(void **)a5);
          *(_OWORD *)a5 = v35;
          *(_QWORD *)(a5 + 16) = v36;
          v32 = v37;
          *(_DWORD *)(a5 + 24) = v37;
          v17 = HIWORD(v32);
          v33 = *(unsigned __int8 *)(a5 + 23);
          if ((v33 & 0x80u) != 0)
            v33 = *(_QWORD *)(a5 + 8);
          v18 |= v33 > (unsigned __int16)v32;
          break;
        case 'm':
          v17 = boost::date_time::var_string_to_int<short,char>(a2, a3, 2u);
          break;
        case 'b':
          boost::date_time::string_parse_tree<char>::match(v20, a2, a3, (uint64_t)&v35);
          if (*(char *)(a5 + 23) < 0)
            operator delete(*(void **)a5);
          *(_OWORD *)a5 = v35;
          *(_QWORD *)(a5 + 16) = v36;
          v30 = v37;
          *(_DWORD *)(a5 + 24) = v37;
          v17 = HIWORD(v30);
          v31 = *(unsigned __int8 *)(a5 + 23);
          if ((v31 & 0x80u) != 0)
            v31 = *(_QWORD *)(a5 + 8);
          v18 |= v31 > (unsigned __int16)v30;
          break;
      }
      v22 = v16 + 2;
    }
    else
    {
      if ((v18 & 1) == 0)
      {
        v25 = *a2;
        v26 = (*a2)[3];
        if (v26 != (*a2)[4])
        {
          v18 = 0;
          v25[3] = v26 + 1;
          goto LABEL_49;
        }
        (*(void (**)(_QWORD *))(*v25 + 80))(v25);
      }
      v18 = 0;
    }
LABEL_49:
    v15 = a4[23];
    v16 = v22;
  }
  v38 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v38, v17);
  return v38;
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_weekday(uint64_t a1, _QWORD **a2, _QWORD **a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  _BYTE *v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  __int128 v35;
  uint64_t v36;
  int v37;

  v10 = MEMORY[0x24BDAC740];
  while (1)
  {
    v11 = (_BYTE *)(*a2)[3];
    v12 = v11 == (_BYTE *)(*a2)[4] ? (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2) : *v11;
    if (v12 < 0)
    {
      if (!__maskrune(v12, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000) == 0)
    {
      break;
    }
    if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a2, a3) & 1) != 0)
      break;
    v13 = *a2;
    v14 = (*a2)[3];
    if (v14 == (*a2)[4])
      (*(void (**)(_QWORD *))(*v13 + 80))(v13);
    else
      v13[3] = v14 + 1;
  }
  v15 = a4[23];
  v16 = a4;
  if (a4[23] < 0)
    v16 = *(char **)a4;
  v17 = 0;
  v18 = 0;
  v19 = a1 + 120;
  v20 = a1 + 88;
  while (1)
  {
    v21 = (uint64_t *)a4;
    if ((v15 & 0x80) != 0)
    {
      v21 = *(uint64_t **)a4;
      v15 = *((_QWORD *)a4 + 1);
    }
    if (v16 == (char *)v21 + v15 || (std::istreambuf_iterator<char>::equal[abi:ne180100](a2, a3) & 1) != 0)
      break;
    v22 = v16 + 1;
    if (*v16 == 37)
    {
      if (a4[23] < 0)
      {
        v24 = *(uint64_t **)a4;
        v23 = *((_QWORD *)a4 + 1);
      }
      else
      {
        v23 = a4[23];
        v24 = (uint64_t *)a4;
      }
      if (v22 == (char *)v24 + v23)
        break;
      v27 = *v22;
      switch(v27)
      {
        case '%':
          v28 = *a2;
          v29 = (*a2)[3];
          if (v29 == (*a2)[4])
            (*(void (**)(_QWORD *))(*v28 + 80))(v28);
          else
            v28[3] = v29 + 1;
          break;
        case 'A':
          boost::date_time::string_parse_tree<char>::match(v19, a2, a3, (uint64_t)&v35);
          if (*(char *)(a5 + 23) < 0)
            operator delete(*(void **)a5);
          *(_OWORD *)a5 = v35;
          *(_QWORD *)(a5 + 16) = v36;
          v32 = v37;
          *(_DWORD *)(a5 + 24) = v37;
          v17 = HIWORD(v32);
          v33 = *(unsigned __int8 *)(a5 + 23);
          if ((v33 & 0x80u) != 0)
            v33 = *(_QWORD *)(a5 + 8);
          v18 |= v33 > (unsigned __int16)v32;
          break;
        case 'w':
          v17 = boost::date_time::var_string_to_int<short,char>(a2, a3, 2u);
          break;
        case 'a':
          boost::date_time::string_parse_tree<char>::match(v20, a2, a3, (uint64_t)&v35);
          if (*(char *)(a5 + 23) < 0)
            operator delete(*(void **)a5);
          *(_OWORD *)a5 = v35;
          *(_QWORD *)(a5 + 16) = v36;
          v30 = v37;
          *(_DWORD *)(a5 + 24) = v37;
          v17 = HIWORD(v30);
          v31 = *(unsigned __int8 *)(a5 + 23);
          if ((v31 & 0x80u) != 0)
            v31 = *(_QWORD *)(a5 + 8);
          v18 |= v31 > (unsigned __int16)v30;
          break;
      }
      v22 = v16 + 2;
    }
    else
    {
      if ((v18 & 1) == 0)
      {
        v25 = *a2;
        v26 = (*a2)[3];
        if (v26 != (*a2)[4])
        {
          v18 = 0;
          v25[3] = v26 + 1;
          goto LABEL_49;
        }
        (*(void (**)(_QWORD *))(*v25 + 80))(v25);
      }
      v18 = 0;
    }
LABEL_49:
    v15 = a4[23];
    v16 = v22;
  }
  if ((unsigned __int16)v17 >= 7u)
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)0,(unsigned short)6,boost::gregorian::bad_weekday>::on_error();
  return v17;
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_day_of_month(uint64_t a1, _QWORD **a2, _QWORD **a3)
{
  uint64_t v5;
  _BYTE *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int16 v10;
  void *__p[2];
  uint64_t v13;
  int v14;
  unsigned __int16 v15;
  unsigned __int8 v16;

  v5 = MEMORY[0x24BDAC740];
  while (1)
  {
    v6 = (_BYTE *)(*a2)[3];
    v7 = v6 == (_BYTE *)(*a2)[4] ? (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2) : *v6;
    if (v7 < 0)
    {
      if (!__maskrune(v7, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000) == 0)
    {
      break;
    }
    if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a2, a3) & 1) != 0)
      break;
    v8 = *a2;
    v9 = (*a2)[3];
    if (v9 == (*a2)[4])
      (*(void (**)(_QWORD *))(*v8 + 80))(v8);
    else
      v8[3] = v9 + 1;
  }
  __p[0] = 0;
  __p[1] = 0;
  v13 = 0;
  v14 = -65536;
  v16 = 48;
  v10 = boost::date_time::fixed_string_to_int<short,char>(a2, a3, (uint64_t)__p, 2u, &v16);
  v15 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v15, v10);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  return v15;
}

void sub_217F54D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::date_time::format_date_parser<boost::gregorian::date,char>::parse_var_day_of_month(uint64_t a1, _QWORD **a2, _QWORD **a3)
{
  uint64_t v5;
  _BYTE *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v12;

  v5 = MEMORY[0x24BDAC740];
  while (1)
  {
    v6 = (_BYTE *)(*a2)[3];
    v7 = v6 == (_BYTE *)(*a2)[4] ? (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2) : *v6;
    if (v7 < 0)
    {
      if (!__maskrune(v7, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000) == 0)
    {
      break;
    }
    if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a2, a3) & 1) != 0)
      break;
    v8 = *a2;
    v9 = (*a2)[3];
    if (v9 == (*a2)[4])
      (*(void (**)(_QWORD *))(*v8 + 80))(v8);
    else
      v8[3] = v9 + 1;
  }
  v10 = boost::date_time::var_string_to_int<short,char>(a2, a3, 2u);
  v12 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v12, v10);
  return v12;
}

uint64_t boost::date_time::var_string_to_int<long long,char>(_QWORD **a1, _QWORD **a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 v12;
  std::string::value_type *v13;
  std::string::value_type v14;
  _QWORD *v15;
  uint64_t v16;
  std::string::size_type size;
  std::string *v18;
  uint64_t v19;
  std::string v21;
  uint64_t v22;
  std::bad_cast v23;
  char *v24;
  uint64_t v25;

  v6 = 0;
  memset(&v21, 0, sizeof(v21));
  v7 = MEMORY[0x24BDAC740];
  while (1)
  {
    v8 = std::istreambuf_iterator<char>::equal[abi:ne180100](a1, a2);
    v9 = v6 >= a3 ? 1 : v8;
    if ((v9 & 1) != 0)
      break;
    v10 = (unsigned __int8 *)(*a1)[3];
    if (v10 == (unsigned __int8 *)(*a1)[4])
    {
      v12 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
      v11 = v12;
      if ((v12 & 0x80) != 0)
        break;
    }
    else
    {
      v11 = *v10;
      if ((v11 & 0x80) != 0)
        break;
    }
    if ((*(_DWORD *)(v7 + 4 * v11 + 60) & 0x400) == 0)
      break;
    v13 = (std::string::value_type *)(*a1)[3];
    if (v13 == (std::string::value_type *)(*a1)[4])
      v14 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
    else
      v14 = *v13;
    std::string::push_back(&v21, v14);
    v15 = *a1;
    v16 = (*a1)[3];
    if (v16 == (*a1)[4])
      (*(void (**)(_QWORD *))(*v15 + 80))(v15);
    else
      v15[3] = v16 + 1;
    ++v6;
  }
  size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v21.__r_.__value_.__l.__size_;
  if (!size)
  {
    v19 = -1;
    if ((*((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x80) == 0)
      return v19;
    goto LABEL_25;
  }
  v18 = &v21;
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
  v22 = 0;
  v23.__vftable = (std::bad_cast_vtbl *)v18;
  v24 = (char *)v18 + size;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v23, &v22) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v23);
    v23.__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
    v25 = MEMORY[0x24BEDB7D0];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v23);
  }
  v19 = v22;
  if ((*((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_25:
    operator delete(v21.__r_.__value_.__l.__data_);
  return v19;
}

void sub_217F5503C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::exception a17)
{
  std::exception::~exception(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::check_special_value<boost::posix_time::ptime>(uint64_t a1, _QWORD **a2, _QWORD **a3, uint64_t *a4, int __c)
{
  std::string::value_type v5;
  _BYTE *v10;
  char v11;
  _QWORD *v12;
  std::string *v14;
  __int128 v15;
  std::error_code __ec;
  std::string v17;
  std::string __msg;
  std::ios_base::failure v19;
  std::string v20;
  std::string v21;
  int v22;

  v5 = __c;
  memset(&v21, 0, sizeof(v21));
  v22 = -65536;
  if (__c == 45 || __c == 43)
  {
    v10 = (_BYTE *)(*a2)[3];
    v11 = v10 == (_BYTE *)(*a2)[4] ? (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2) : *v10;
    if (v11 != v5)
      std::string::push_back(&v21, v5);
  }
  LODWORD(v19.__vftable) = 0;
  boost::date_time::string_parse_tree<char>::match(a1 + 328, a2, a3, &v21, (int *)&v19);
  if (SHIWORD(v22) == -1)
  {
    boost::date_time::convert_string_type<char,char>((uint64_t)&v21, &v20);
    std::operator+<char>();
    v14 = std::string::append(&v17, "'");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __msg.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__msg.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(&v19, &__msg, &__ec);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v19);
  }
  *a4 = boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>::get_time_rep(SHIWORD(v22));
  v12 = *a2;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v12;
}

void sub_217F551C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::runtime_error::~runtime_error(&a24);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a32 < 0)
    operator delete(a27);
  if (*(char *)(v32 - 57) < 0)
    operator delete(*(void **)(v32 - 80));
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::ios_base::failure>(uint64_t a1)
{
  void *exception;
  std::runtime_error v3;
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  exception = __cxa_allocate_exception(0x50uLL);
  std::runtime_error::runtime_error(&v3, (const std::runtime_error *)a1);
  v4 = *(_OWORD *)(a1 + 16);
  v7 = 0;
  v8 = 0;
  v9 = -1;
  v3.__vftable = (std::runtime_error_vtbl *)&unk_24D91C200;
  v5 = &unk_24D91C228;
  v6 = 0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F552CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v14;
  int v15;

  a13 = &unk_24D918C48;
  if (a14 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a14 + 32))(a14))
    a14 = 0;
  std::runtime_error::~runtime_error(&a10);
  if (v15)
    __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::parse_frac_type(uint64_t a1, _QWORD **a2, _QWORD **a3, _QWORD *a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 v10;
  std::string::value_type *v11;
  std::string::value_type v12;
  _QWORD *v13;
  uint64_t v14;
  std::string::size_type v15;
  std::string::size_type size;
  std::string *p_str;
  std::string::size_type v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  std::string::size_type v22;
  std::bad_cast_vtbl *p_p;
  int v24;
  std::string __p;
  std::string __str;
  uint64_t v27;
  std::bad_cast v28;
  char *v29;
  uint64_t v30;

  memset(&__str, 0, sizeof(__str));
  v7 = MEMORY[0x24BDAC740];
  while ((std::istreambuf_iterator<char>::equal[abi:ne180100](a2, a3) & 1) == 0)
  {
    v8 = (unsigned __int8 *)(*a2)[3];
    if (v8 == (unsigned __int8 *)(*a2)[4])
    {
      v10 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2);
      v9 = v10;
      if ((v10 & 0x80) != 0)
        break;
    }
    else
    {
      v9 = *v8;
      if ((v9 & 0x80) != 0)
        break;
    }
    if ((*(_DWORD *)(v7 + 4 * v9 + 60) & 0x400) == 0)
      break;
    v11 = (std::string::value_type *)(*a2)[3];
    if (v11 == (std::string::value_type *)(*a2)[4])
      v12 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2);
    else
      v12 = *v11;
    std::string::push_back(&__str, v12);
    v13 = *a2;
    v14 = (*a2)[3];
    if (v14 == (*a2)[4])
      (*(void (**)(_QWORD *))(*v13 + 80))(v13);
    else
      v13[3] = v14 + 1;
  }
  v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str.__r_.__value_.__l.__size_;
    if (!__str.__r_.__value_.__l.__size_)
    {
LABEL_37:
      operator delete(__str.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
      return;
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (size > 5)
  {
    std::string::basic_string(&__p, &__str, 0, 6uLL, (std::allocator<char> *)&v28);
    v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = (std::bad_cast_vtbl *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = __p.__r_.__value_.__l.__size_;
    else
      p_p = (std::bad_cast_vtbl *)&__p;
    v27 = 0;
    v28.__vftable = p_p;
    v29 = (char *)p_p + v22;
    if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v28, &v27) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v28);
      v28.__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
      v30 = MEMORY[0x24BEDB7D0];
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v28);
    }
    *a4 = v27;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_37;
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v15 = __str.__r_.__value_.__l.__size_;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    v28.__vftable = (std::bad_cast_vtbl *)p_str;
    v29 = (char *)p_str + v15;
    if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v28, (uint64_t *)&__p) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v28);
      v28.__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
      v30 = MEMORY[0x24BEDB7D0];
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v28);
    }
    v18 = __p.__r_.__value_.__r.__words[0];
    *a4 = __p.__r_.__value_.__r.__words[0];
    v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    v20 = __str.__r_.__value_.__r.__words[1];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (v20 == 6)
    {
      v21 = 1;
    }
    else
    {
      v24 = (unsigned __int16)(6 - v20);
      v21 = 1;
      do
      {
        v21 *= 10;
        --v24;
      }
      while (v24);
    }
    *a4 = v21 * v18;
    if (v19 < 0)
      goto LABEL_37;
  }
}

void sub_217F555B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::exception a22)
{
  std::exception::~exception(&a22);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator+(unsigned int *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v5;
  unsigned int v6;

  v2 = *a2;
  result = *a1;
  if ((unint64_t)(*a2 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    if ((result + 2) < 3)
      LODWORD(v2) = 0;
    return (v2 + result);
  }
  else
  {
    if (v2 == 0x7FFFFFFFFFFFFFFELL || (_DWORD)result == -2)
      return 4294967294;
    if ((_DWORD)result)
    {
      if ((_DWORD)result != -1)
      {
        if (v2 == 0x7FFFFFFFFFFFFFFFLL)
          v6 = -1;
        else
          v6 = result + v2;
        if (v2 == 0x8000000000000000)
          return 0;
        else
          return v6;
      }
      v5 = 0x8000000000000000;
    }
    else
    {
      v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (v2 == v5)
      return 4294967294;
  }
  return result;
}

uint64_t std::istreambuf_iterator<char>::equal[abi:ne180100](_QWORD **a1, _QWORD **a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _BOOL4 v7;

  v4 = *a1;
  if (v4)
  {
    if (v4[3] != v4[4])
    {
      v5 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v4 + 72))(v4) != -1)
    {
      v5 = *a1 == 0;
      goto LABEL_8;
    }
    *a1 = 0;
  }
  v5 = 1;
LABEL_8:
  v6 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (v6[3] == v6[4])
  {
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6) != -1)
    {
      v7 = *a2 == 0;
      return v5 ^ v7 ^ 1u;
    }
    *a2 = 0;
LABEL_14:
    v7 = 1;
    return v5 ^ v7 ^ 1u;
  }
  v7 = 0;
  return v5 ^ v7 ^ 1u;
}

uint64_t boost::date_time::fixed_string_to_int<short,char>(_QWORD **a1, _QWORD **a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5)
{
  uint64_t v10;
  unsigned int i;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  std::string::value_type v19;
  std::string::value_type *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  std::bad_cast_vtbl *v26;
  __int16 v28;
  std::bad_cast v29;
  char *v30;
  uint64_t v31;

  if (a4)
  {
    v10 = MEMORY[0x24BDAC740];
    for (i = a4; i; --i)
    {
      if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, a2) & 1) != 0)
        break;
      v12 = (unsigned __int8 *)(*a1)[3];
      if (v12 == (unsigned __int8 *)(*a1)[4])
      {
        v14 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
        v13 = v14;
        if ((v14 & 0x80) == 0)
        {
LABEL_8:
          if ((*(_DWORD *)(v10 + 4 * v13 + 60) & 0x400) != 0)
            goto LABEL_13;
        }
      }
      else
      {
        v13 = *v12;
        if ((v13 & 0x80) == 0)
          goto LABEL_8;
      }
      v15 = (unsigned __int8 *)(*a1)[3];
      if (v15 == (unsigned __int8 *)(*a1)[4])
        v16 = (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1);
      else
        v16 = *v15;
      if (v16 != *a5)
        break;
LABEL_13:
      v17 = (unsigned __int8 *)(*a1)[3];
      if (v17 == (unsigned __int8 *)(*a1)[4])
        v18 = (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1);
      else
        v18 = *v17;
      if (v18 == *a5)
      {
        v19 = 48;
      }
      else
      {
        v20 = (std::string::value_type *)(*a1)[3];
        if (v20 == (std::string::value_type *)(*a1)[4])
          v19 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
        else
          v19 = *v20;
      }
      std::string::push_back((std::string *)a3, v19);
      v21 = *a1;
      v22 = (*a1)[3];
      if (v22 == (*a1)[4])
        (*(void (**)(_QWORD *))(*v21 + 80))(v21);
      else
        v21[3] = v22 + 1;
    }
  }
  v23 = *(unsigned __int8 *)(a3 + 23);
  v24 = (char)v23;
  if ((v23 & 0x80u) != 0)
    v23 = *(_QWORD *)(a3 + 8);
  if (v23 >= a4)
  {
    v28 = 0;
    if (v24 >= 0)
      v26 = (std::bad_cast_vtbl *)a3;
    else
      v26 = *(std::bad_cast_vtbl **)a3;
    v29.__vftable = v26;
    v30 = (char *)v26 + v23;
    if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<short>((unsigned __int8 **)&v29, &v28) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v29);
      v29.__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
      v31 = MEMORY[0x24BEDB7B8];
      boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v29);
    }
    return v28;
  }
  else
  {
    return -1;
  }
}

void sub_217F55954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x217F558C8);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<short>(unsigned __int8 **a1, _WORD *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  char v11[2];
  __int16 v12;
  unsigned __int16 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int16 v16;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v16 = 0;
  v5 = *v3;
  if (v5 == 45 || v5 == 43)
    *a1 = ++v3;
  v11[0] = 0;
  v12 = 1;
  v13 = &v16;
  v14 = v3;
  v15 = v2;
  v6 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::convert((uint64_t)v11);
  LOWORD(v7) = v16;
  if ((v16 & 0x8000u) == 0)
    v8 = v6;
  else
    v8 = 0;
  if (v16 <= 0x8000u)
    v9 = v6;
  else
    v9 = 0;
  if (v5 == 45)
  {
    v7 = -v16;
    result = v9;
  }
  else
  {
    result = v8;
  }
  *a2 = v7;
  return result;
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::convert(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _WORD *v3;
  int v4;
  const std::locale *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  char *p_p;
  char v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  char v15;
  unsigned int v16;
  BOOL v17;
  char v18;
  unsigned __int16 v19;
  int v20;
  int v21;
  unsigned __int16 v22;
  _WORD *v23;
  int v24;
  _BYTE *v25;
  void *__p;
  uint64_t v28;
  unsigned __int8 v29;
  std::locale v30;

  v1 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v2 - 1;
  v3 = *(_WORD **)(a1 + 8);
  *v3 = 0;
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)(v2 - 1))
  {
    v4 = *(unsigned __int8 *)(v2 - 1);
    if ((v4 - 58) < 0xFFFFFFF6)
      return 0;
    *v3 = v4 - 48;
    *(_QWORD *)(a1 + 24) = v2 - 2;
    MEMORY[0x219A19828](&v30);
    v6 = std::locale::classic();
    if (std::locale::operator==(&v30, v6))
    {
      v1 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::main_convert_loop(a1);
LABEL_44:
      std::locale::~locale(&v30);
      return v1;
    }
    v7 = std::locale::use_facet(&v30, MEMORY[0x24BEDB588]);
    ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
    if ((char)v29 < 0)
    {
      v8 = v28;
      if (!v28)
        goto LABEL_41;
      p_p = (char *)__p;
    }
    else
    {
      v8 = v29;
      if (!v29)
        goto LABEL_41;
      p_p = (char *)&__p;
    }
    if (*p_p >= 1)
    {
      v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
      v11 = *(_BYTE **)(a1 + 16);
      v12 = *(_BYTE **)(a1 + 24);
      if (v12 >= v11)
      {
        v13 = 0;
        v14 = __p;
        if ((v29 & 0x80u) == 0)
          v14 = &__p;
        v15 = *v14 - 1;
        do
        {
          if (v15)
          {
            v16 = *(unsigned __int16 *)(a1 + 2);
            if (*(_BYTE *)a1)
              v17 = 1;
            else
              v17 = v16 >> 1 > 0xCCC;
            v18 = v17;
            *(_BYTE *)a1 = v18;
            v19 = 10 * v16;
            *(_WORD *)(a1 + 2) = 10 * v16;
            v20 = (char)*v12;
            if ((*v12 - 58) < 0xF6u)
              goto LABEL_46;
            v21 = v20 - 48;
            v22 = (v20 - 48) * v19;
            if (v21)
            {
              if ((v18 & 1) != 0)
                goto LABEL_46;
              if ((((unsigned __int16)v21 * v19) & 0xFFFF0000) != 0)
                goto LABEL_46;
              v23 = *(_WORD **)(a1 + 8);
              v24 = (unsigned __int16)*v23;
              if (((v24 + v22) & 0x10000) != 0)
                goto LABEL_46;
            }
            else
            {
              v23 = *(_WORD **)(a1 + 8);
              LOWORD(v24) = *v23;
            }
            *v23 = v24 + v22;
            --v15;
          }
          else
          {
            if (*v12 != v10)
              goto LABEL_41;
            if (v12 == v11)
            {
LABEL_46:
              v1 = 0;
              goto LABEL_42;
            }
            if (v8 - 1 > (unint64_t)v13)
              ++v13;
            if ((v29 & 0x80u) == 0)
              v25 = &__p;
            else
              v25 = __p;
            v15 = v25[v13];
          }
          *(_QWORD *)(a1 + 24) = --v12;
        }
        while (v12 >= v11);
      }
      v1 = 1;
      goto LABEL_42;
    }
LABEL_41:
    v1 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::main_convert_loop(a1);
LABEL_42:
    if ((char)v29 < 0)
      operator delete(__p);
    goto LABEL_44;
  }
  return v1;
}

void sub_217F55C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::main_convert_loop(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v2;
  char v4;
  unsigned int v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  unsigned __int16 v9;
  _WORD *v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE **)(a1 + 24);
  if ((unint64_t)v2 < v1)
    return 1;
  v4 = *(_BYTE *)a1 != 0;
  while (1)
  {
    v5 = *(unsigned __int16 *)(a1 + 2);
    v4 |= v5 >> 1 > 0xCCC;
    *(_BYTE *)a1 = v4 & 1;
    v6 = 10 * v5;
    *(_WORD *)(a1 + 2) = 10 * v5;
    v7 = (char)*v2;
    if ((*v2 - 58) < 0xF6u)
      break;
    v8 = v7 - 48;
    v9 = (v7 - 48) * v6;
    if (v8)
    {
      if ((v4 & 1) != 0)
        return 0;
      if ((((unsigned __int16)v8 * v6) & 0xFFFF0000) != 0)
        return 0;
      v10 = *(_WORD **)(a1 + 8);
      v11 = (unsigned __int16)*v10;
      if (((v11 + v9) & 0x10000) != 0)
        return 0;
    }
    else
    {
      v10 = *(_WORD **)(a1 + 8);
      LOWORD(v11) = *v10;
    }
    *v10 = v11 + v9;
    *(_QWORD *)(a1 + 24) = --v2;
    if ((unint64_t)v2 < v1)
      return 1;
  }
  return 0;
}

void boost::throw_exception<boost::bad_lexical_cast>(uint64_t a1)
{
  void *exception;
  void *v3;
  __int128 v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  exception = __cxa_allocate_exception(0x48uLL);
  v4 = *(_OWORD *)(a1 + 8);
  v7 = 0;
  v8 = 0;
  v9 = -1;
  v3 = &unk_24D91BD38;
  v5 = &unk_24D91BD60;
  v6 = 0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F55DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;
  int v14;

  a12 = &unk_24D918C48;
  if (a13 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a13 + 32))(a13))
    a13 = 0;
  std::exception::~exception((std::exception *)&a9);
  if (v14)
    __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 64) = &unk_24D918BA8;
  *(_QWORD *)a1 = &unk_24D91BD80;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_24D91BC98;
  *(_QWORD *)(a1 + 24) = &unk_24D91BCD0;
  *(_QWORD *)(a1 + 64) = &unk_24D91BD08;
  boost::exception_detail::copy_boost_exception(a1 + 24, a2 + 24);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 64) = &unk_24D918BA8;
  *(_QWORD *)a1 = &unk_24D91BD80;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_24D91BC98;
  *(_QWORD *)(a1 + 24) = &unk_24D91BCD0;
  *(_QWORD *)(a1 + 64) = &unk_24D91BD08;
  return a1;
}

void sub_217F55F40(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *boost::bad_lexical_cast::what(boost::bad_lexical_cast *this)
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F56010(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40ABF5E694);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F56070(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl(_QWORD *a1)
{
  std::exception *v1;

  v1 = (std::exception *)(a1 - 3);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl(a1 - 24);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 3) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 4);
  std::exception::~exception((std::exception *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_lexical_cast>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::bad_lexical_cast>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::bad_lexical_cast>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::bad_lexical_cast>::~error_info_injector(a1 - 24);
}

void boost::bad_lexical_cast::~bad_lexical_cast(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x219A19A08);
}

void sub_217F56248(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::string_parse_tree<char>::match(uint64_t a1, _QWORD **a2, _QWORD **a3, std::string *a4, int *a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t size;
  int v13;
  char v14;
  std::string *v16;
  char v17;
  char *v18;
  std::string::value_type v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  uint64_t *v30;
  std::string::value_type v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;

  v10 = *a5;
  v11 = (v10 + 1);
  *a5 = v11;
  size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  v13 = (char)size;
  if ((size & 0x80u) != 0)
    size = a4->__r_.__value_.__l.__size_;
  v14 = size < v11;
  if (size >= v11)
  {
    if (v13 >= 0)
      v16 = a4;
    else
      v16 = (std::string *)a4->__r_.__value_.__r.__words[0];
    v17 = v16->__r_.__value_.__s.__data_[v10];
  }
  else
  {
    if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a2, a3) & 1) != 0)
      return 0;
    v18 = (char *)(*a2)[3];
    if (v18 == (char *)(*a2)[4])
      v17 = (*(uint64_t (**)(_QWORD))(**a2 + 72))(*a2);
    else
      v17 = *v18;
  }
  v19 = __tolower(v17);
  v22 = *(_QWORD *)(a1 + 8);
  v21 = (_QWORD *)(a1 + 8);
  v20 = v22;
  if (v22)
  {
    v23 = v21;
    v24 = v20;
    do
    {
      v25 = *(char *)(v24 + 32);
      v26 = v25 < v19;
      if (v25 >= v19)
        v27 = (uint64_t *)v24;
      else
        v27 = (uint64_t *)(v24 + 8);
      if (!v26)
        v23 = (_QWORD *)v24;
      v24 = *v27;
    }
    while (*v27);
    do
    {
      v28 = *(char *)(v20 + 32);
      v29 = v28 <= v19;
      if (v28 <= v19)
        v30 = (uint64_t *)(v20 + 8);
      else
        v30 = (uint64_t *)v20;
      if (!v29)
        v21 = (_QWORD *)v20;
      v20 = *v30;
    }
    while (*v30);
    if (v23 != v21)
    {
      v31 = v19;
      do
      {
        if ((v14 & 1) != 0)
        {
          v32 = *a2;
          v33 = (*a2)[3];
          if (v33 == (*a2)[4])
            (*(void (**)(_QWORD *))(*v32 + 80))(v32);
          else
            v32[3] = v33 + 1;
          std::string::push_back(a4, v31);
        }
        v34 = *((unsigned __int16 *)v23 + 32);
        if (v34 != 0xFFFF)
        {
          v35 = *a5;
          if (*a5 > LOWORD(a4[1].__r_.__value_.__l.__data_))
          {
            *(_WORD *)&a4[1].__r_.__value_.__s.__data_[2] = v34;
            LOWORD(a4[1].__r_.__value_.__l.__data_) = v35;
          }
        }
        boost::date_time::string_parse_tree<char>::match(v23 + 5, a2, a3, a4, a5);
        v36 = (*a5 - 1);
        *a5 = v36;
        v37 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
        if ((v37 & 0x80u) != 0)
          v37 = a4->__r_.__value_.__l.__size_;
        v38 = v37 < v36;
        v39 = (_QWORD *)v23[1];
        if (v39)
        {
          do
          {
            v40 = v39;
            v39 = (_QWORD *)*v39;
          }
          while (v39);
        }
        else
        {
          do
          {
            v40 = (_QWORD *)v23[2];
            v41 = *v40 == (_QWORD)v23;
            v23 = v40;
          }
          while (!v41);
        }
        v14 &= v38;
        v23 = v40;
      }
      while (v40 != v21);
    }
  }
  return *(__int16 *)&a4[1].__r_.__value_.__s.__data_[2];
}

uint64_t boost::date_time::string_parse_tree<char>::match@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X1>, _QWORD **a3@<X2>, uint64_t a4@<X8>)
{
  int v5;

  v5 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a4 + 24) = -65536;
  return boost::date_time::string_parse_tree<char>::match(a1, a2, a3, (std::string *)a4, &v5);
}

void sub_217F564A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::date_time::var_string_to_int<short,char>(_QWORD **a1, _QWORD **a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 v12;
  std::string::value_type *v13;
  std::string::value_type v14;
  _QWORD *v15;
  uint64_t v16;
  std::string::size_type size;
  std::string *v18;
  __int16 v19;
  std::string v21;
  __int16 v22;
  std::bad_cast v23;
  char *v24;
  uint64_t v25;

  v6 = 0;
  memset(&v21, 0, sizeof(v21));
  v7 = MEMORY[0x24BDAC740];
  while (1)
  {
    v8 = std::istreambuf_iterator<char>::equal[abi:ne180100](a1, a2);
    v9 = v6 >= a3 ? 1 : v8;
    if ((v9 & 1) != 0)
      break;
    v10 = (unsigned __int8 *)(*a1)[3];
    if (v10 == (unsigned __int8 *)(*a1)[4])
    {
      v12 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
      v11 = v12;
      if ((v12 & 0x80) != 0)
        break;
    }
    else
    {
      v11 = *v10;
      if ((v11 & 0x80) != 0)
        break;
    }
    if ((*(_DWORD *)(v7 + 4 * v11 + 60) & 0x400) == 0)
      break;
    v13 = (std::string::value_type *)(*a1)[3];
    if (v13 == (std::string::value_type *)(*a1)[4])
      v14 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
    else
      v14 = *v13;
    std::string::push_back(&v21, v14);
    v15 = *a1;
    v16 = (*a1)[3];
    if (v16 == (*a1)[4])
      (*(void (**)(_QWORD *))(*v15 + 80))(v15);
    else
      v15[3] = v16 + 1;
    ++v6;
  }
  size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v21.__r_.__value_.__l.__size_;
  if (!size)
  {
    v19 = -1;
    if ((*((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x80) == 0)
      return v19;
    goto LABEL_25;
  }
  v22 = 0;
  v18 = &v21;
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v21.__r_.__value_.__r.__words[0];
  v23.__vftable = (std::bad_cast_vtbl *)v18;
  v24 = (char *)v18 + size;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<short>((unsigned __int8 **)&v23, &v22) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v23);
    v23.__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
    v25 = MEMORY[0x24BEDB7B8];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v23);
  }
  v19 = v22;
  if ((*((_BYTE *)&v21.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_25:
    operator delete(v21.__r_.__value_.__l.__data_);
  return v19;
}

void sub_217F56668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::exception a17)
{
  std::exception::~exception(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::CV::simple_exception_policy<unsigned short,(unsigned short)0,(unsigned short)6,boost::gregorian::bad_weekday>::on_error()
{
  std::logic_error v0;

  boost::gregorian::bad_weekday::bad_weekday(&v0);
  boost::throw_exception<boost::gregorian::bad_weekday>(&v0);
}

void sub_217F566BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::gregorian::bad_weekday>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91BED8;
  v4 = &unk_24D91BF00;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F56758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D91BF20;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91BE38;
  *(_QWORD *)(a1 + 16) = &unk_24D91BE70;
  *(_QWORD *)(a1 + 56) = &unk_24D91BEA8;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D91BF20;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91BE38;
  *(_QWORD *)(a1 + 16) = &unk_24D91BE70;
  *(_QWORD *)(a1 + 56) = &unk_24D91BEA8;
  return a1;
}

void sub_217F56870(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F568E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F56948(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_weekday>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_217F56A18(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::gregorian::bad_weekday::bad_weekday(std::logic_error *this)
{
  std::string v3;

  std::string::basic_string[abi:ne180100]<0>(&v3, "Weekday is out of range 0..6");
  std::logic_error::logic_error(this, &v3);
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  this->__vftable = (std::logic_error_vtbl *)&unk_24D91BF20;
  return this;
}

void sub_217F56AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::date_time::fixed_string_to_int<unsigned short,char>(_QWORD **a1, _QWORD **a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5)
{
  uint64_t v10;
  unsigned int i;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  std::string::value_type v19;
  std::string::value_type *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  std::bad_cast_vtbl *v26;
  unsigned __int16 v27;
  std::bad_cast v28;
  char *v29;
  uint64_t v30;

  if (a4)
  {
    v10 = MEMORY[0x24BDAC740];
    for (i = a4; i; --i)
    {
      if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, a2) & 1) != 0)
        break;
      v12 = (unsigned __int8 *)(*a1)[3];
      if (v12 == (unsigned __int8 *)(*a1)[4])
      {
        v14 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
        v13 = v14;
        if ((v14 & 0x80) == 0)
        {
LABEL_8:
          if ((*(_DWORD *)(v10 + 4 * v13 + 60) & 0x400) != 0)
            goto LABEL_13;
        }
      }
      else
      {
        v13 = *v12;
        if ((v13 & 0x80) == 0)
          goto LABEL_8;
      }
      v15 = (unsigned __int8 *)(*a1)[3];
      if (v15 == (unsigned __int8 *)(*a1)[4])
        v16 = (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1);
      else
        v16 = *v15;
      if (v16 != *a5)
        break;
LABEL_13:
      v17 = (unsigned __int8 *)(*a1)[3];
      if (v17 == (unsigned __int8 *)(*a1)[4])
        v18 = (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1);
      else
        v18 = *v17;
      if (v18 == *a5)
      {
        v19 = 48;
      }
      else
      {
        v20 = (std::string::value_type *)(*a1)[3];
        if (v20 == (std::string::value_type *)(*a1)[4])
          v19 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
        else
          v19 = *v20;
      }
      std::string::push_back((std::string *)a3, v19);
      v21 = *a1;
      v22 = (*a1)[3];
      if (v22 == (*a1)[4])
        (*(void (**)(_QWORD *))(*v21 + 80))(v21);
      else
        v21[3] = v22 + 1;
    }
  }
  v23 = *(unsigned __int8 *)(a3 + 23);
  v24 = (char)v23;
  if ((v23 & 0x80u) != 0)
    v23 = *(_QWORD *)(a3 + 8);
  if (v23 < a4)
    return 0xFFFFLL;
  v27 = 0;
  if (v24 >= 0)
    v26 = (std::bad_cast_vtbl *)a3;
  else
    v26 = *(std::bad_cast_vtbl **)a3;
  v28.__vftable = v26;
  v29 = (char *)v26 + v23;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v28, &v27) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v28);
    v28.__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
    v30 = MEMORY[0x24BEDB7C0];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v28);
  }
  return v27;
}

void sub_217F56CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x217F56C34);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>(unsigned __int8 **a1, _WORD *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v5;
  uint64_t result;
  char v7[2];
  __int16 v8;
  _WORD *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v5 = *v3;
  if (v5 == 45 || v5 == 43)
    *a1 = ++v3;
  v7[0] = 0;
  v8 = 1;
  v9 = a2;
  v10 = v3;
  v11 = v2;
  result = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned short,char>::convert((uint64_t)v7);
  if (v5 == 45)
    *a2 = -*a2;
  return result;
}

_WORD *boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)366,boost::gregorian::bad_day_of_year>>::assign(_WORD *result, unsigned int a2)
{
  if (!a2 || a2 >= 0x16F)
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)366,boost::gregorian::bad_day_of_year>::on_error();
  *result = a2;
  return result;
}

void boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)366,boost::gregorian::bad_day_of_year>::on_error()
{
  std::logic_error v0;

  boost::gregorian::bad_day_of_year::bad_day_of_year(&v0);
  boost::throw_exception<boost::gregorian::bad_day_of_year>(&v0);
}

void sub_217F56DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::gregorian::bad_day_of_year>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91C078;
  v4 = &unk_24D91C0A0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F56E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D91C0C0;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91BFD8;
  *(_QWORD *)(a1 + 16) = &unk_24D91C010;
  *(_QWORD *)(a1 + 56) = &unk_24D91C048;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D91C0C0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91BFD8;
  *(_QWORD *)(a1 + 16) = &unk_24D91C010;
  *(_QWORD *)(a1 + 56) = &unk_24D91C048;
  return a1;
}

void sub_217F56F7C(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F56FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F57054(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::gregorian::bad_day_of_year>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_217F57124(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::gregorian::bad_day_of_year::bad_day_of_year(std::logic_error *this)
{
  std::string v3;

  std::string::basic_string[abi:ne180100]<0>(&v3, "Day of year value is out of range 1..366");
  std::logic_error::logic_error(this, &v3);
  this->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  this->__vftable = (std::logic_error_vtbl *)&unk_24D91C0C0;
  return this;
}

void sub_217F571AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>(unsigned __int8 **a1, uint64_t *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  char v11[8];
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v16 = 0;
  v5 = *v3;
  if (v5 == 45 || v5 == 43)
    *a1 = ++v3;
  v11[0] = 0;
  v12 = 1;
  v13 = &v16;
  v14 = v3;
  v15 = v2;
  v6 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::convert((uint64_t)v11);
  v7 = v16;
  if (v16 >= 0)
    v8 = v6;
  else
    v8 = 0;
  if ((unint64_t)v16 < 0x8000000000000001)
    v9 = v6;
  else
    v9 = 0;
  if (v5 == 45)
  {
    v7 = -v16;
    result = v9;
  }
  else
  {
    result = v8;
  }
  *a2 = v7;
  return result;
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::convert(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  const std::locale *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  char *p_p;
  char v10;
  char *v11;
  char *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  BOOL v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  void *__p;
  uint64_t v28;
  unsigned __int8 v29;
  std::locale v30;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v1 - 1;
  v2 = *(_QWORD **)(a1 + 16);
  *v2 = 0;
  if (*(_QWORD *)(a1 + 24) <= (unint64_t)(v1 - 1))
  {
    v3 = *(unsigned __int8 *)(v1 - 1);
    if ((v3 - 58) >= 0xFFFFFFF6)
    {
      *v2 = (v3 - 48);
      *(_QWORD *)(a1 + 32) = v1 - 2;
      MEMORY[0x219A19828](&v30);
      v6 = std::locale::classic();
      if (std::locale::operator==(&v30, v6))
      {
        v4 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::main_convert_loop(a1);
LABEL_45:
        std::locale::~locale(&v30);
        return v4;
      }
      v7 = std::locale::use_facet(&v30, MEMORY[0x24BEDB588]);
      ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
      if ((char)v29 < 0)
      {
        v8 = v28;
        if (!v28)
          goto LABEL_42;
        p_p = (char *)__p;
      }
      else
      {
        v8 = v29;
        if (!v29)
          goto LABEL_42;
        p_p = (char *)&__p;
      }
      if (*p_p >= 1)
      {
        v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
        v11 = *(char **)(a1 + 24);
        v12 = *(char **)(a1 + 32);
        if (v12 >= v11)
        {
          v13 = 0;
          v14 = __p;
          if ((v29 & 0x80u) == 0)
            v14 = &__p;
          v15 = *v14 - 1;
          do
          {
            if (v15)
            {
              v16 = *(_QWORD *)(a1 + 8);
              if (*(_BYTE *)a1)
                v17 = 1;
              else
                v17 = v16 > 0x1999999999999999;
              v18 = v17;
              *(_BYTE *)a1 = v18;
              v19 = 10 * v16;
              *(_QWORD *)(a1 + 8) = 10 * v16;
              v20 = *v12;
              if ((v20 - 58) < 0xF6u)
                goto LABEL_47;
              v21 = v20 - 48;
              v22 = v19 * (v20 - 48);
              if ((_DWORD)v21)
              {
                if ((v18 & 1) != 0)
                  goto LABEL_47;
                if (!is_mul_ok(v21, v19))
                  goto LABEL_47;
                v23 = *(_QWORD **)(a1 + 16);
                v24 = *v23;
                if (__CFADD__(v22, *v23))
                  goto LABEL_47;
              }
              else
              {
                v23 = *(_QWORD **)(a1 + 16);
                v24 = *v23;
              }
              *v23 = v24 + v22;
              --v15;
            }
            else
            {
              if (*v12 != v10)
                goto LABEL_42;
              if (v12 == v11)
              {
LABEL_47:
                v4 = 0;
                goto LABEL_43;
              }
              if (v8 - 1 > (unint64_t)v13)
                ++v13;
              if ((v29 & 0x80u) == 0)
                v25 = &__p;
              else
                v25 = __p;
              v15 = v25[v13];
            }
            *(_QWORD *)(a1 + 32) = --v12;
          }
          while (v12 >= v11);
        }
        v4 = 1;
        goto LABEL_43;
      }
LABEL_42:
      v4 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::main_convert_loop(a1);
LABEL_43:
      if ((char)v29 < 0)
        operator delete(__p);
      goto LABEL_45;
    }
  }
  return 0;
}

void sub_217F574A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned long long,char>::main_convert_loop(uint64_t a1)
{
  unint64_t v1;
  char *v2;
  char v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(char **)(a1 + 32);
  if ((unint64_t)v2 < v1)
    return 1;
  v4 = *(_BYTE *)a1 != 0;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v4 |= v5 > 0x1999999999999999;
    *(_BYTE *)a1 = v4 & 1;
    v6 = 10 * v5;
    *(_QWORD *)(a1 + 8) = 10 * v5;
    v7 = *v2;
    if ((v7 - 58) < 0xF6u)
      break;
    v8 = v7 - 48;
    v9 = v6 * (v7 - 48);
    if ((_DWORD)v8)
    {
      if ((v4 & 1) != 0)
        return 0;
      if (!is_mul_ok(v8, v6))
        return 0;
      v10 = *(_QWORD **)(a1 + 16);
      v11 = *v10;
      if (__CFADD__(v9, *v10))
        return 0;
    }
    else
    {
      v10 = *(_QWORD **)(a1 + 16);
      v11 = *v10;
    }
    *v10 = v11 + v9;
    *(_QWORD *)(a1 + 32) = --v2;
    if ((unint64_t)v2 < v1)
      return 1;
  }
  return 0;
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 72) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB888] + 16);
  v4[2].__vftable = (std::runtime_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[2];
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)a1 = &unk_24D91C160;
  *(_QWORD *)(a1 + 32) = &unk_24D91C198;
  *(_QWORD *)(a1 + 72) = &unk_24D91C1D0;
  boost::exception_detail::copy_boost_exception(v5, a2 + 32);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 72) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB888] + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = &unk_24D91C160;
  *(_QWORD *)(a1 + 32) = &unk_24D91C198;
  *(_QWORD *)(a1 + 72) = &unk_24D91C1D0;
  return a1;
}

void sub_217F576A8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F5776C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C4044841AE3);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F577CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl(a1 - 32);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 4) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::ios_base::failure>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<std::ios_base::failure>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::ios_base::failure>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<std::ios_base::failure>::~error_info_injector(a1 - 32);
}

void sub_217F57994(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::fixed_string_to_int<long long,char>(_QWORD **a1, _QWORD **a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5)
{
  uint64_t v10;
  unsigned int i;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  std::string::value_type v19;
  std::string::value_type *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  std::bad_cast_vtbl *v26;
  uint64_t v27;
  std::bad_cast v28;
  char *v29;
  uint64_t v30;

  if (a4)
  {
    v10 = MEMORY[0x24BDAC740];
    for (i = a4; i; --i)
    {
      if ((std::istreambuf_iterator<char>::equal[abi:ne180100](a1, a2) & 1) != 0)
        break;
      v12 = (unsigned __int8 *)(*a1)[3];
      if (v12 == (unsigned __int8 *)(*a1)[4])
      {
        v14 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
        v13 = v14;
        if ((v14 & 0x80) == 0)
        {
LABEL_8:
          if ((*(_DWORD *)(v10 + 4 * v13 + 60) & 0x400) != 0)
            goto LABEL_13;
        }
      }
      else
      {
        v13 = *v12;
        if ((v13 & 0x80) == 0)
          goto LABEL_8;
      }
      v15 = (unsigned __int8 *)(*a1)[3];
      if (v15 == (unsigned __int8 *)(*a1)[4])
        v16 = (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1);
      else
        v16 = *v15;
      if (v16 != *a5)
        break;
LABEL_13:
      v17 = (unsigned __int8 *)(*a1)[3];
      if (v17 == (unsigned __int8 *)(*a1)[4])
        v18 = (*(unsigned __int8 (**)(_QWORD))(**a1 + 72))(*a1);
      else
        v18 = *v17;
      if (v18 == *a5)
      {
        v19 = 48;
      }
      else
      {
        v20 = (std::string::value_type *)(*a1)[3];
        if (v20 == (std::string::value_type *)(*a1)[4])
          v19 = (*(uint64_t (**)(_QWORD))(**a1 + 72))(*a1);
        else
          v19 = *v20;
      }
      std::string::push_back((std::string *)a3, v19);
      v21 = *a1;
      v22 = (*a1)[3];
      if (v22 == (*a1)[4])
        (*(void (**)(_QWORD *))(*v21 + 80))(v21);
      else
        v21[3] = v22 + 1;
    }
  }
  v23 = *(unsigned __int8 *)(a3 + 23);
  v24 = (char)v23;
  if ((v23 & 0x80u) != 0)
    v23 = *(_QWORD *)(a3 + 8);
  if (v23 < a4)
    return -1;
  if (v24 >= 0)
    v26 = (std::bad_cast_vtbl *)a3;
  else
    v26 = *(std::bad_cast_vtbl **)a3;
  v27 = 0;
  v28.__vftable = v26;
  v29 = (char *)v26 + v23;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v28, &v27) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v28);
    v28.__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
    v30 = MEMORY[0x24BEDB7D0];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v28);
  }
  return v27;
}

void sub_217F57BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x217F57B20);
  }
  _Unwind_Resume(a1);
}

_QWORD *boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::time_input_facet(_QWORD *a1, uint64_t a2)
{
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::default_time_input_format);
  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::date_input_facet((uint64_t)a1, (uint64_t)__p, a2);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = &unk_24D91BB68;
  std::string::basic_string[abi:ne180100]<0>(a1 + 45, boost::date_time::time_input_facet<boost::posix_time::ptime,char,std::istreambuf_iterator<char>>::default_time_duration_format[0]);
  return a1;
}

void sub_217F57C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  boost::date_time::date_input_facet<boost::gregorian::date,char,std::istreambuf_iterator<char>>::~date_input_facet(v15);
  _Unwind_Resume(a1);
}

uint64_t std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string *p_p;
  uint64_t v12;
  std::string __p;

  v6 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = a2 - (_QWORD)this;
    if (__n_add)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = this;
      goto LABEL_6;
    }
    return (uint64_t)v6 + v7;
  }
  v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  v7 = a2 - this->__r_.__value_.__r.__words[0];
  if (!__n_add)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }
  size = this->__r_.__value_.__l.__size_;
LABEL_6:
  if (v9 > (std::string *)a3 || (char *)&v9->__r_.__value_.__l.__data_ + size + 1 <= a3)
    return std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v7, a3, a4);
  std::string::__init_with_sentinel[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__p, a3, a4);
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = __p.__r_.__value_.__l.__size_;
  v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v12;
}

void sub_217F57D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  std::string *v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  size_t v13;
  std::string::size_type v14;
  _BYTE *v15;
  char v16;

  v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v11 = 22;
    v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      v13 = size - __n_copy;
      if (size == __n_copy)
        size = __n_copy;
      else
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9->__r_.__value_.__l.__size_ = v14;
  else
    *((_BYTE *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    v15 = (char *)v12 + __n_copy;
    do
    {
      v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  return (uint64_t)v9 + __n_copy;
}

void std::string::__init_with_sentinel[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  std::string::value_type *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }
}

void sub_217F57F18(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_217F57F34(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::string v6;
  std::string v7;
  std::string v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  char v12;
  std::string __p;
  std::string v14;
  void *v15;
  char v16;
  __int128 v17;
  char v18;
  void *v19;
  char v20;
  std::string v21;
  std::string v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  char v26;
  std::string v27;
  _BYTE v28[16];
  void *v29;
  char v30;
  void *v31;
  char v32;
  __int128 v33;
  char v34;
  void *v35;
  char v36;
  __int16 v37;

  *(_QWORD *)a1 = &unk_24D91C248;
  boost::date_time::time_zone_names_base<char>::time_zone_names_base((_QWORD *)(a1 + 8));
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v37 = 44;
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v33, (char *)&v37, 0, 0);
  v4 = boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v28, a2, &v33);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin(v4, &v21);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end((uint64_t)v28, &v14);
  if (v18)
  {
    if (v26 && v17 == v25)
    {
LABEL_4:
      std::logic_error::logic_error((std::logic_error *)&v7, "Could not parse time zone name");
      v7.__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB8D0] + 16;
      boost::exception_detail::throw_exception_<std::invalid_argument>((std::logic_error *)&v7, (uint64_t)"boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(const string_type &) [CharT = char]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/date_time/local_time/posix_time_zone.hpp", 105);
    }
  }
  else if (!v26)
  {
    goto LABEL_4;
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    v7 = v21;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v8 = v22;
  v9 = v23;
  v10 = v24;
  v11 = v25;
  v12 = v26;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    __p = v27;
  v26 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v21, (std::string::value_type **)&v25, *((std::string::value_type **)&v25 + 1), &v27);
  boost::local_time::posix_time_zone_base<char>::calc_zone(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 104))
  {
    if (v18)
    {
      if (v26 && v17 == v25)
      {
LABEL_25:
        std::logic_error::logic_error((std::logic_error *)&v7, "Could not parse DST begin time");
        v7.__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB8D0] + 16;
        boost::exception_detail::throw_exception_<std::invalid_argument>((std::logic_error *)&v7, (uint64_t)"boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(const string_type &) [CharT = char]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/date_time/local_time/posix_time_zone.hpp", 110);
      }
    }
    else if (!v26)
    {
      goto LABEL_25;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v7, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    else
      v7 = v21;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v8, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      v8 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v12 = v26;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      __p = v27;
    v26 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v21, (std::string::value_type **)&v25, *((std::string::value_type **)&v25 + 1), &v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v6 = __p;
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (v18)
    {
      if (v26 && v17 == v25)
      {
LABEL_47:
        std::logic_error::logic_error((std::logic_error *)&v7, "Could not parse DST end time");
        v7.__r_.__value_.__r.__words[0] = MEMORY[0x24BEDB8D0] + 16;
        boost::exception_detail::throw_exception_<std::invalid_argument>((std::logic_error *)&v7, (uint64_t)"boost::local_time::posix_time_zone_base<char>::posix_time_zone_base(const string_type &) [CharT = char]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/date_time/local_time/posix_time_zone.hpp", 114);
      }
    }
    else if (!v26)
    {
      goto LABEL_47;
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v7, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    else
      v7 = v27;
    boost::local_time::posix_time_zone_base<char>::calc_rules(a1, (uint64_t *)&v6, (uint64_t *)&v7);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (v20 < 0)
    operator delete(v19);
  if (v16 < 0)
    operator delete(v15);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(v31);
  if (v30 < 0)
    operator delete(v29);
  if (v36 < 0)
    operator delete(v35);
  if (v34 < 0)
    operator delete((void *)v33);
  return a1;
}

void sub_217F58484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::logic_error a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  std::logic_error::~logic_error(&a16);
  if (a14 < 0)
    operator delete(__p);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator((uint64_t)&a36);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator((uint64_t)&a50);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(v52 - 232);
  std::pair<std::string,std::string>::~pair(v52 - 152);
  boost::detail::shared_count::~shared_count((unsigned int **)(v50 + 152));
  boost::date_time::time_zone_names_base<char>::~time_zone_names_base(v51);
  _Unwind_Resume(a1);
}

void sub_217F58574()
{
  JUMPOUT(0x217F58544);
}

void sub_217F5857C()
{
  JUMPOUT(0x217F5854CLL);
}

void sub_217F58584()
{
  JUMPOUT(0x217F58554);
}

void sub_217F5858C()
{
  JUMPOUT(0x217F5855CLL);
}

void boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string v4;
  std::string __p;
  uint64_t v6;
  char v7;

  if (*(char *)(a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    v4 = *(std::string *)(a1 + 16);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(a2, (__int128 *)&v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_217F58658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string v4;
  std::string __p;
  uint64_t v6;
  char v7;

  if (*(char *)(a1 + 39) < 0)
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  else
    v4 = *(std::string *)(a1 + 16);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(a2, (__int128 *)&v4, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_217F5874C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::exception_detail::throw_exception_<std::invalid_argument>(std::logic_error *a1, uint64_t a2, uint64_t a3, int a4)
{
  std::logic_error v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  std::logic_error::logic_error(&v7, a1);
  v7.__vftable = (std::logic_error_vtbl *)&unk_24D91C3F8;
  v8 = &unk_24D91C420;
  v9 = 0;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<std::invalid_argument>>((uint64_t)&v7);
}

void sub_217F587D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  a11 = &unk_24D918C48;
  if (a12)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
      a12 = 0;
  }
  std::logic_error::~logic_error(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::local_time::posix_time_zone_base<char>::calc_zone(uint64_t a1, uint64_t a2)
{
  int v4;
  std::string::value_type *v5;
  uint64_t v6;
  std::string::value_type *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  int v21;
  std::string __p;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  std::logic_error v30;
  std::string v31;
  std::string v32;
  uint64_t v33;
  _QWORD v34[8];
  std::string v35;
  uint64_t v36;
  char __s[2];

  *(_WORD *)__s = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  std::ostringstream::basic_ostringstream[abi:ne180100](&v33, &__p, 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (std::string::value_type *)a2;
  else
    v5 = *(std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = &v5[v6];
  memset(&v32, 0, sizeof(v32));
  memset(&v31, 0, sizeof(v31));
  v8 = MEMORY[0x24BDAC740];
  while (1)
  {
    v9 = *v5;
    if (!((v9 & 0x80000000) != 0 ? __maskrune(v9, 0x100uLL) : *(_DWORD *)(v8 + 4 * v9 + 60) & 0x100))
      break;
    __p.__r_.__value_.__s.__data_[0] = *v5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)&__p, 1);
    ++v5;
    --v6;
  }
  std::stringbuf::str();
  v32 = __p;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  std::string::operator=(&v35, &__p);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v34);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_19;
    goto LABEL_56;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v6)
    goto LABEL_56;
LABEL_19:
  while (1)
  {
    v11 = *v5;
    if ((v11 & 0x80000000) != 0 ? __maskrune(v11, 0x100uLL) : *(_DWORD *)(v8 + 4 * v11 + 60) & 0x100)
      break;
    __p.__r_.__value_.__s.__data_[0] = *v5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)&__p, 1);
    ++v5;
    if (!--v6)
    {
      v5 = v7;
      break;
    }
  }
  std::stringbuf::str();
  boost::date_time::str_from_delimited_time_duration<boost::posix_time::time_duration,char>(&__p, (uint64_t *)&v30);
  *(_QWORD *)(a1 + 112) = v30.__vftable;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  std::string::operator=(&v35, &__p);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = -43200000000;
  if (boost::date_time::int_adapter<long long>::compare((int64_t *)(a1 + 112), (int64_t *)&__p) == -1|| (v30.__vftable = (std::logic_error_vtbl *)50400000000, boost::date_time::int_adapter<long long>::compare((int64_t *)&v30, (int64_t *)(a1 + 112)) == -1))
  {
    v30.__vftable = *(std::logic_error_vtbl **)(a1 + 112);
    boost::posix_time::to_simple_string_type<char>((int64_t *)&v30);
    boost::local_time::bad_offset::bad_offset(&v30);
    boost::throw_exception<boost::local_time::bad_offset>(&v30);
  }
  if (v5 != v7)
  {
    *(_BYTE *)(a1 + 104) = 1;
    do
    {
      v13 = *v5;
      if ((v13 & 0x80000000) != 0)
      {
        v14 = __maskrune(v13, 0x100uLL);
        if (!v14)
          goto LABEL_39;
      }
      else
      {
        v14 = *(_DWORD *)(v8 + 4 * v13 + 60) & 0x100;
        if (!v14)
          goto LABEL_39;
      }
      __p.__r_.__value_.__s.__data_[0] = *v5;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)&__p, 1);
      ++v5;
    }
    while (v5 != v7);
    v5 = v7;
LABEL_39:
    std::stringbuf::str();
    v31 = __p;
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    std::string::operator=(&v35, &__p);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v14)
        goto LABEL_49;
    }
    else if (!v14)
    {
LABEL_49:
      while (v5 != v7)
      {
        v15 = *v5;
        if ((v15 & 0x80000000) != 0 ? __maskrune(v15, 0x100uLL) : *(_DWORD *)(v8 + 4 * v15 + 60) & 0x100)
          break;
        __p.__r_.__value_.__s.__data_[0] = *v5;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)&__p, 1);
        ++v5;
      }
      std::stringbuf::str();
      boost::date_time::str_from_delimited_time_duration<boost::posix_time::time_duration,char>(&__p, (uint64_t *)&v30);
      *(_QWORD *)(a1 + 120) = v30.__vftable;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__p, __s);
      std::string::operator=(&v35, &__p);
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_54;
    }
    *(_QWORD *)(a1 + 120) = 3600000000;
LABEL_54:
    __p.__r_.__value_.__r.__words[0] = -86400000000;
    if (boost::date_time::int_adapter<long long>::compare((int64_t *)&__p, (int64_t *)(a1 + 120)) != -1|| (v30.__vftable = (std::logic_error_vtbl *)86400000000, boost::date_time::int_adapter<long long>::compare((int64_t *)(a1 + 120), (int64_t *)&v30) != -1))
    {
      v30.__vftable = *(std::logic_error_vtbl **)(a1 + 120);
      boost::posix_time::to_simple_string_type<char>((int64_t *)&v30);
      boost::local_time::bad_adjustment::bad_adjustment(&v30);
      boost::throw_exception<boost::local_time::bad_adjustment>(&v30);
    }
  }
LABEL_56:
  boost::date_time::time_zone_names_base<char>::time_zone_names_base(&__p, (__int128 *)&v32, (__int128 *)&v32, (__int128 *)&v31, (__int128 *)&v31);
  v17 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v18 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = v24;
  *(_QWORD *)(a1 + 48) = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24) = 0;
  v19 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = v26;
  *(_QWORD *)(a1 + 72) = v27;
  HIBYTE(v27) = 0;
  LOBYTE(v26) = 0;
  v20 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*v20);
    v21 = SHIBYTE(v27);
    *(_OWORD *)v20 = v28;
    *(_QWORD *)(a1 + 96) = v29;
    HIBYTE(v29) = 0;
    LOBYTE(v28) = 0;
    if (v21 < 0)
      operator delete((void *)v26);
  }
  else
  {
    *(_OWORD *)v20 = v28;
    *(_QWORD *)(a1 + 96) = v29;
    HIBYTE(v29) = 0;
    LOBYTE(v28) = 0;
  }
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v33 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v34[-1] + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v34[0] = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v36);
}

void sub_217F58E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::logic_error a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  if (a30 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  std::ostringstream::~ostringstream((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void boost::local_time::posix_time_zone_base<char>::calc_rules(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  char v7;
  BOOL v8;
  std::string::size_type v9;
  char v10;
  BOOL v11;
  std::string::size_type v12;
  std::logic_error_vtbl **v13;
  std::logic_error v14;
  std::string v15;
  void *v16;
  char v17;
  std::string::value_type *v18;
  uint64_t v19;
  char v20;
  void *__p;
  char v22;
  std::string v23;
  void *v24;
  char v25;
  std::string::value_type *v26;
  int v27[2];
  char v28;
  std::string v29;
  std::string v30;
  void *v31;
  char v32;
  std::string::value_type *v33;
  int v34[2];
  char v35;
  std::string v36;
  _BYTE v37[16];
  void *v38;
  char v39;
  void *v40;
  char v41;
  _BYTE v42[16];
  void *v43;
  char v44;
  void *v45;
  char v46;
  __int128 v47;
  char v48;
  void *v49;
  char v50;
  __int16 v51;

  v51 = 47;
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v47, (char *)&v51, 0, 0);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v42, a2, &v47);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v37, a3, &v47);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)v42, &v30);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)v37, &v23);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
  else
    v15 = v36;
  v6 = *std::string::at(&v15, 0);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v6 == 74)
  {
    boost::local_time::posix_time_zone_base<char>::julian_no_leap(a1, &v36, &v29);
  }
  else if (v6 == 77)
  {
    boost::local_time::posix_time_zone_base<char>::M_func(a1, (uint64_t *)&v36, (uint64_t *)&v29);
  }
  else
  {
    boost::local_time::posix_time_zone_base<char>::julian_day(a1, (uint64_t)&v36, (uint64_t)&v29);
  }
  v35 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v30, &v33, *(std::string::value_type **)v34, &v36);
  v28 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v23, &v26, *(std::string::value_type **)v27, &v29);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end((uint64_t)v42, &v15);
  if (v20 && v35)
  {
    if (v18 != v33)
    {
      v7 = 0;
      goto LABEL_19;
    }
    v8 = v19 == *(_QWORD *)v34;
  }
  else
  {
    v8 = v20 == v35;
  }
  v7 = v8;
LABEL_19:
  if (v22 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((v7 & 1) != 0)
      goto LABEL_25;
LABEL_27:
    boost::date_time::str_from_delimited_time_duration<boost::posix_time::time_duration,char>(&v36, (uint64_t *)&v15);
    v9 = v15.__r_.__value_.__r.__words[0];
    goto LABEL_28;
  }
  if ((v7 & 1) == 0)
    goto LABEL_27;
LABEL_25:
  v9 = 7200000000;
LABEL_28:
  *(_QWORD *)(a1 + 128) = v9;
  v15.__r_.__value_.__r.__words[0] = 0;
  if (boost::date_time::int_adapter<long long>::compare((int64_t *)(a1 + 128), (int64_t *)&v15) == -1|| (v14.__vftable = (std::logic_error_vtbl *)86400000000, boost::date_time::int_adapter<long long>::compare((int64_t *)(a1 + 128), (int64_t *)&v14) != -1))
  {
    v14.__vftable = *(std::logic_error_vtbl **)(a1 + 128);
    boost::posix_time::to_simple_string_type<char>((int64_t *)&v14);
    boost::local_time::bad_offset::bad_offset(&v14);
    boost::throw_exception<boost::local_time::bad_offset>(&v14);
  }
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end((uint64_t)v37, &v15);
  if (v20 && v28)
  {
    if (v18 != v26)
    {
      v10 = 0;
      goto LABEL_38;
    }
    v11 = v19 == *(_QWORD *)v27;
  }
  else
  {
    v11 = v20 == v28;
  }
  v10 = v11;
LABEL_38:
  if (v22 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((v10 & 1) != 0)
      goto LABEL_44;
LABEL_46:
    boost::date_time::str_from_delimited_time_duration<boost::posix_time::time_duration,char>(&v29, (uint64_t *)&v15);
    v12 = v15.__r_.__value_.__r.__words[0];
    goto LABEL_47;
  }
  if ((v10 & 1) == 0)
    goto LABEL_46;
LABEL_44:
  v12 = 7200000000;
LABEL_47:
  *(_QWORD *)(a1 + 136) = v12;
  v13 = (std::logic_error_vtbl **)(a1 + 136);
  v15.__r_.__value_.__r.__words[0] = 0;
  if (boost::date_time::int_adapter<long long>::compare((int64_t *)v13, (int64_t *)&v15) == -1
    || (v14.__vftable = (std::logic_error_vtbl *)86400000000,
        boost::date_time::int_adapter<long long>::compare((int64_t *)v13, (int64_t *)&v14) != -1))
  {
    v14.__vftable = *v13;
    boost::posix_time::to_simple_string_type<char>((int64_t *)&v14);
    boost::local_time::bad_offset::bad_offset(&v14);
    boost::throw_exception<boost::local_time::bad_offset>(&v14);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v24);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(v31);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete((void *)v47);
}

void sub_217F5937C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator((uint64_t)&a29);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator((uint64_t)&a43);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer((uint64_t)&a57);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(v57 - 200);
  std::pair<std::string,std::string>::~pair(v57 - 120);
  _Unwind_Resume(a1);
}

uint64_t boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t boost::date_time::time_zone_names_base<char>::~time_zone_names_base(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void boost::local_time::posix_time_zone_base<char>::~posix_time_zone_base(uint64_t a1)
{
  boost::local_time::posix_time_zone_base<char>::~posix_time_zone_base(a1);
  JUMPOUT(0x219A19A08);
}

void boost::local_time::posix_time_zone_base<char>::dst_zone_abbrev(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 80);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 96);
  }
}

void boost::local_time::posix_time_zone_base<char>::std_zone_abbrev(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
  }
}

void boost::local_time::posix_time_zone_base<char>::dst_zone_name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 56);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 72);
  }
}

void boost::local_time::posix_time_zone_base<char>::std_zone_name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
  }
}

uint64_t boost::local_time::posix_time_zone_base<char>::has_dst(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t boost::local_time::posix_time_zone_base<char>::dst_local_start_time(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 104))
    v3 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), a2);
  else
    v3 = -2;
  v5 = *(_QWORD *)(a1 + 128);
  v6 = v3;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v7, &v6, &v5);
  return v7;
}

uint64_t boost::local_time::posix_time_zone_base<char>::dst_local_end_time(uint64_t a1, unsigned __int16 a2)
{
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 104))
    v3 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 32))(*(_QWORD *)(a1 + 144), a2);
  else
    v3 = -2;
  v5 = *(_QWORD *)(a1 + 136);
  v6 = v3;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v7, &v6, &v5);
  return v7;
}

uint64_t boost::local_time::posix_time_zone_base<char>::base_utc_offset@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 112);
  return result;
}

uint64_t boost::local_time::posix_time_zone_base<char>::dst_offset@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 120);
  return result;
}

uint64_t boost::local_time::posix_time_zone_base<char>::to_posix_string(uint64_t a1)
{
  const std::ios_base *v2;
  const std::locale::facet *v3;
  std::string *v4;
  std::string::size_type size;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *p_p;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *__p;
  std::string::size_type v38;
  unsigned __int8 v39;
  std::string v40;
  uint64_t v41;
  unsigned int *v42;
  _QWORD v43[11];
  char v44;
  uint64_t v45;
  char v46;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
  v2 = (const std::ios_base *)((char *)v43 + *(_QWORD *)(v43[0] - 24));
  if (v2[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v2);
    v3 = std::locale::use_facet((const std::locale *)&v40, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 32);
    std::locale::~locale((std::locale *)&v40);
  }
  v2[1].__fmtflags_ = 48;
  v41 = 0;
  v42 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v40, a1);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v40;
  else
    v4 = (std::string *)v40.__r_.__value_.__r.__words[0];
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v4, size);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&__p, a1);
  v40.__r_.__value_.__r.__words[0] = 0;
  if (boost::date_time::int_adapter<long long>::compare((int64_t *)&__p, (int64_t *)&v40) == -1)
  {
    v40.__r_.__value_.__s.__data_[0] = 45;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
    LODWORD(__p) = -1;
    if (v40.__r_.__value_.__r.__words[0] - 0x7FFFFFFFFFFFFFFELL <= 2)
      boost::date_time::int_adapter<long long>::mult_div_specials((int64_t *)&v40, (int *)&__p);
    std::ostream::operator<<();
  }
  else
  {
    v40.__r_.__value_.__s.__data_[0] = 43;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
    std::ostream::operator<<();
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
  if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 60000000) + 0x888888888888888, 2) > 0x444444444444444uLL|| ((*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&__p, a1), __ROR8__(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)__p / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL))
  {
    v40.__r_.__value_.__s.__data_[0] = 58;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    *(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
    std::ostream::operator<<();
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v40, a1);
      std::ostream::operator<<();
    }
  }
  if (*(_QWORD *)(a1 + 144) != v41)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v40, a1);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v40;
    else
      v10 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v11 = v40.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v10, v11);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&__p, a1);
    v40.__r_.__value_.__r.__words[0] = 0;
    if (boost::date_time::int_adapter<long long>::compare((int64_t *)&__p, (int64_t *)&v40) == -1)
    {
      v40.__r_.__value_.__s.__data_[0] = 45;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
      LODWORD(__p) = -1;
      if (v40.__r_.__value_.__r.__words[0] - 0x7FFFFFFFFFFFFFFELL <= 2)
        boost::date_time::int_adapter<long long>::mult_div_specials((int64_t *)&v40, (int *)&__p);
      std::ostream::operator<<();
    }
    else
    {
      v40.__r_.__value_.__s.__data_[0] = 43;
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
      std::ostream::operator<<();
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 60000000) + 0x888888888888888, 2) > 0x444444444444444uLL|| ((*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&__p, a1), __ROR8__(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)__p / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL))
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 2;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
      std::ostream::operator<<();
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
      if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * ((int64_t)v40.__r_.__value_.__r.__words[0] / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
      {
        v40.__r_.__value_.__s.__data_[0] = 58;
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
        *(_QWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 24) = 2;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v40, a1);
        std::ostream::operator<<();
      }
    }
    v40.__r_.__value_.__s.__data_[0] = 44;
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 144) + 24))(&__p);
    memset(&v40, 0, sizeof(v40));
    if ((v39 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if ((v39 & 0x80u) == 0)
      v18 = v39;
    else
      v18 = v38;
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v40, (uint64_t)&v40, p_p, &p_p[v18], v18);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v40;
    else
      v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v20 = v40.__r_.__value_.__l.__size_;
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v19, v20);
    v46 = 47;
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)&v46, 1);
    *(_QWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 24) = 2;
    v23 = (_QWORD *)std::ostream::operator<<();
    v46 = 58;
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)&v46, 1);
    *(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 2;
    std::ostream::operator<<();
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if ((char)v39 < 0)
      operator delete(__p);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * (*(_QWORD *)(a1 + 128) / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = 2;
      std::ostream::operator<<();
    }
    v40.__r_.__value_.__s.__data_[0] = 44;
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 144) + 40))(&__p);
    memset(&v40, 0, sizeof(v40));
    if ((v39 & 0x80u) == 0)
      v27 = (char *)&__p;
    else
      v27 = (char *)__p;
    if ((v39 & 0x80u) == 0)
      v28 = v39;
    else
      v28 = v38;
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v40, (uint64_t)&v40, v27, &v27[v28], v28);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v40;
    else
      v29 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v30 = v40.__r_.__value_.__l.__size_;
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v29, v30);
    v46 = 47;
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)&v46, 1);
    *(_QWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 24) = 2;
    v33 = (_QWORD *)std::ostream::operator<<();
    v46 = 58;
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)&v46, 1);
    *(_QWORD *)((char *)v34 + *(_QWORD *)(*v34 - 24) + 24) = 2;
    std::ostream::operator<<();
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    if ((char)v39 < 0)
      operator delete(__p);
    if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * (*(_QWORD *)(a1 + 136) / 1000000) + 0x888888888888888, 2) >= 0x444444444444445uLL)
    {
      v40.__r_.__value_.__s.__data_[0] = 58;
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v40, 1);
      *(_QWORD *)((char *)v35 + *(_QWORD *)(*v35 - 24) + 24) = 2;
      std::ostream::operator<<();
    }
  }
  std::stringbuf::str();
  boost::detail::shared_count::~shared_count(&v42);
  v43[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v43[1] = MEMORY[0x24BEDB848] + 16;
  if (v44 < 0)
    operator delete((void *)v43[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v45);
}

void sub_217F5A18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  boost::detail::shared_count::~shared_count((unsigned int **)&a22);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

_QWORD *boost::date_time::time_zone_names_base<char>::time_zone_names_base(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "std_name");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "std_abbrev");
  std::string::basic_string[abi:ne180100]<0>(a1 + 6, "no-dst");
  std::string::basic_string[abi:ne180100]<0>(a1 + 9, "no-dst");
  return a1;
}

void sub_217F5A2E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::char_separator<char,std::char_traits<char>>::char_separator(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 24), a2);
  *(_WORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = a4;
  *(_BYTE *)(a1 + 56) = 0;
  if (a3)
    MEMORY[0x219A19390](a1, a3);
  return a1;
}

void sub_217F5A390(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  *(_QWORD *)a1 = v5;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  *(_QWORD *)(a1 + 8) = (char *)v7 + v6;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v10 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  v11 = *((_QWORD *)a3 + 6);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a3 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  return a1;
}

void sub_217F5A48C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::token_iterator(std::string *a1, __int128 *a2, std::string::size_type a3, std::string::size_type a4)
{
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string::size_type v11;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    a1->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v8;
  }
  v9 = a1 + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  v11 = *((_QWORD *)a2 + 6);
  a1[2].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 56);
  a1[2].__r_.__value_.__r.__words[0] = v11;
  a1[2].__r_.__value_.__r.__words[2] = a3;
  a1[3].__r_.__value_.__r.__words[0] = a4;
  a1[3].__r_.__value_.__s.__data_[8] = 0;
  a1[3].__r_.__value_.__r.__words[2] = 0;
  a1[4].__r_.__value_.__r.__words[0] = 0;
  a1[4].__r_.__value_.__l.__size_ = 0;
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::initialize((uint64_t)a1);
  return a1;
}

void sub_217F5A55C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::initialize(uint64_t result)
{
  uint64_t v1;
  std::string::value_type *v2;

  if (!*(_BYTE *)(result + 80))
  {
    v1 = result;
    v2 = *(std::string::value_type **)(result + 72);
    if (*(std::string::value_type **)(result + 64) == v2)
      result = 0;
    else
      result = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>(result, (std::string::value_type **)(result + 64), v2, (std::string *)(result + 88));
    *(_BYTE *)(v1 + 80) = result;
  }
  return result;
}

uint64_t boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>(uint64_t a1, std::string::value_type **a2, std::string::value_type *a3, std::string *this)
{
  std::string::value_type *v8;
  _BOOL4 is_dropped;
  BOOL is_kept;
  std::string::value_type *v11;
  uint64_t v12;
  _BOOL4 v13;
  std::string::value_type *v14;

  v8 = *a2;
  if (*(_DWORD *)(a1 + 52))
    goto LABEL_2;
  if (v8 == a3)
    return 0;
  while (1)
  {
    is_dropped = boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v8);
    v8 = *a2;
    if (!is_dropped)
      break;
    *a2 = ++v8;
    if (v8 == a3)
    {
      v8 = a3;
      break;
    }
  }
  if (*(_DWORD *)(a1 + 52))
  {
LABEL_2:
    if (v8 != a3)
    {
      if (boost::char_separator<char,std::char_traits<char>>::is_kept(a1, *v8))
      {
        if (*(_BYTE *)(a1 + 56))
        {
          ++*a2;
          *(_BYTE *)(a1 + 56) = 0;
LABEL_25:
          std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, v8, *a2, *a2 - v8);
          return 1;
        }
      }
      else if (*(_BYTE *)(a1 + 56) || !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, **a2))
      {
        v13 = boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, **a2);
        v14 = *a2;
        if (v13)
        {
          *a2 = ++v14;
          v8 = v14;
        }
        while (v14 != a3
             && !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v14)
             && !boost::char_separator<char,std::char_traits<char>>::is_kept(a1, **a2))
        {
          v14 = *a2 + 1;
          *a2 = v14;
        }
      }
      *(_BYTE *)(a1 + 56) = 1;
      goto LABEL_25;
    }
    if (!*(_BYTE *)(a1 + 56))
    {
      v12 = 1;
      *(_BYTE *)(a1 + 56) = 1;
      std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, a3, a3, 0);
      return v12;
    }
  }
  else if (v8 != a3)
  {
    is_kept = boost::char_separator<char,std::char_traits<char>>::is_kept(a1, *v8);
    v11 = *a2;
    if (is_kept)
    {
      *a2 = v11 + 1;
    }
    else
    {
      while (v11 != a3
           && !boost::char_separator<char,std::char_traits<char>>::is_dropped(a1, *v11)
           && !boost::char_separator<char,std::char_traits<char>>::is_kept(a1, **a2))
      {
        v11 = *a2 + 1;
        *a2 = v11;
      }
    }
    goto LABEL_25;
  }
  return 0;
}

BOOL boost::char_separator<char,std::char_traits<char>>::is_dropped(uint64_t a1, unsigned int a2)
{
  BOOL v2;
  int v3;

  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
LABEL_3:
    v2 = std::string::find((const std::string *)(a1 + 24), a2, 0) == -1;
    return !v2;
  }
  if (!*(_BYTE *)(a1 + 49))
    return 0;
  if ((a2 & 0x80000000) != 0)
    v3 = __maskrune(a2, 0x4000uLL);
  else
    v3 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * a2 + 60) & 0x4000;
  v2 = v3 == 0;
  return !v2;
}

BOOL boost::char_separator<char,std::char_traits<char>>::is_kept(uint64_t a1, unsigned int a2)
{
  BOOL v2;
  int v3;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
LABEL_3:
    v2 = std::string::find((const std::string *)a1, a2, 0) == -1;
    return !v2;
  }
  if (!*(_BYTE *)(a1 + 48))
    return 0;
  if ((a2 & 0x80000000) != 0)
    v3 = __maskrune(a2, 0x2000uLL);
  else
    v3 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * a2 + 60) & 0x2000;
  v2 = v3 == 0;
  return !v2;
}

void std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

void boost::throw_exception<boost::exception_detail::error_info_injector<std::invalid_argument>>(uint64_t a1)
{
  void *exception;
  uint64_t v3;
  std::logic_error v4;
  void *v5;
  uint64_t v6;
  __int128 v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v4, (const std::logic_error *)a1);
  v4.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = &unk_24D918C48;
  v6 = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 48);
  v4.__vftable = (std::logic_error_vtbl *)&unk_24D91C3F8;
  v5 = &unk_24D91C420;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone_impl((uint64_t)exception, (uint64_t)&v4);
}

void sub_217F5AA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  std::logic_error::~logic_error(&a10);
  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<std::invalid_argument>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91C358;
  *(_QWORD *)(a1 + 16) = &unk_24D91C390;
  *(_QWORD *)(a1 + 56) = &unk_24D91C3C8;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91C358;
  *(_QWORD *)(a1 + 16) = &unk_24D91C390;
  *(_QWORD *)(a1 + 56) = &unk_24D91C3C8;
  return a1;
}

void sub_217F5AB98(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x219A19A08);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F5AC5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F5ACBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl(_QWORD *a1)
{
  std::logic_error *v1;

  v1 = (std::logic_error *)(a1 - 2);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl(a1 - 16);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 2) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::logic_error::~logic_error((std::logic_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::invalid_argument>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<std::invalid_argument>::~error_info_injector(a1 - 16);
}

void sub_217F5AE6C(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::ostringstream::basic_ostringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  a1[14] = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t)(a1 + 1);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 1);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[14] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 0x10);
  return a1;
}

void sub_217F5AF38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x219A198F4](v1);
  _Unwind_Resume(a1);
}

void boost::date_time::str_from_delimited_time_duration<boost::posix_time::time_duration,char>(std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned __int16 v6;
  unsigned __int16 v7;
  int data;
  uint64_t v9;
  int i;
  _BOOL4 v11;
  BOOL v12;
  std::string::size_type size;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  int v19;
  uint32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::string v32;
  std::string v33;
  void *v34;
  char v35;
  std::string::value_type *v36;
  uint64_t v37;
  char v38;
  void *__p;
  char v40;
  std::string v41;
  void *v42;
  char v43;
  std::string::value_type *v44;
  int v45[2];
  char v46;
  std::string v47;
  _BYTE v48[16];
  void *v49;
  char v50;
  void *v51;
  char v52;
  __int128 v53;
  char v54;
  void *v55;
  char v56;
  char v57[8];
  uint64_t v58;

  v4 = *(unsigned __int8 *)std::string::at(a1, 0);
  strcpy(v57, "-:,.");
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v53, v57, 0, 0);
  v5 = boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v48, (uint64_t *)a1, &v53);
  v31 = a2;
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin(v5, &v41);
  v6 = 0;
  v7 = 0;
  data = 0;
  v9 = 0;
  for (i = 0; ; ++i)
  {
    boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::end((uint64_t)v48, &v33);
    if (v38 && v46)
    {
      if (v36 != v44)
      {
        v11 = 0;
        goto LABEL_10;
      }
      v12 = v37 == *(_QWORD *)v45;
    }
    else
    {
      v12 = v38 == v46;
    }
    v11 = v12;
LABEL_10:
    if (v40 < 0)
      operator delete(__p);
    if (v35 < 0)
      operator delete(v34);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (v11)
      break;
    switch(i)
    {
      case 0:
        LODWORD(v32.__r_.__value_.__l.__data_) = 0;
        size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        v14 = (std::string *)v47.__r_.__value_.__r.__words[0];
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v47.__r_.__value_.__l.__size_;
        else
          v14 = &v47;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        v33.__r_.__value_.__l.__size_ = (std::string::size_type)v14 + size;
        if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>((unsigned __int8 **)&v33, (int *)&v32) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&v33);
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
          v33.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB798];
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v33);
        }
        data = (int)v32.__r_.__value_.__l.__data_;
        break;
      case 1:
        LOWORD(v32.__r_.__value_.__l.__data_) = 0;
        v25 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        v26 = (std::string *)v47.__r_.__value_.__r.__words[0];
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v25 = v47.__r_.__value_.__l.__size_;
        else
          v26 = &v47;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        v33.__r_.__value_.__l.__size_ = (std::string::size_type)v26 + v25;
        if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v33, &v32) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&v33);
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
          v33.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB7C0];
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v33);
        }
        v6 = (unsigned __int16)v32.__r_.__value_.__l.__data_;
        break;
      case 2:
        LOWORD(v32.__r_.__value_.__l.__data_) = 0;
        v15 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        v16 = (std::string *)v47.__r_.__value_.__r.__words[0];
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = v47.__r_.__value_.__l.__size_;
        else
          v16 = &v47;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        v33.__r_.__value_.__l.__size_ = (std::string::size_type)v16 + v15;
        if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v33, &v32) & 1) == 0)
        {
          std::bad_cast::bad_cast((std::bad_cast *)&v33);
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
          v33.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB7C0];
          boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v33);
        }
        v7 = (unsigned __int16)v32.__r_.__value_.__l.__data_;
        break;
      case 3:
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
        else
          v17 = v47.__r_.__value_.__l.__size_;
        if ((int)v17 >= 6)
        {
          std::string::basic_string(&v32, &v47, 0, 6uLL, (std::allocator<char> *)&v33);
          v58 = 0;
          v27 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
          v28 = (std::string *)v32.__r_.__value_.__r.__words[0];
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v27 = v32.__r_.__value_.__l.__size_;
          else
            v28 = &v32;
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          v33.__r_.__value_.__l.__size_ = (std::string::size_type)v28 + v27;
          if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v33, &v58) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v33);
            v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
            v33.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB7D0];
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v33);
          }
          v9 = v58;
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
        }
        else
        {
          v32.__r_.__value_.__r.__words[0] = 0;
          if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = &v47;
          else
            v18 = (std::string *)v47.__r_.__value_.__r.__words[0];
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
          v33.__r_.__value_.__l.__size_ = (std::string::size_type)v18 + v17;
          if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v33, (uint64_t *)&v32) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v33);
            v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
            v33.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB7D0];
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v33);
          }
          v19 = 0;
          v20 = (uint32x4_t)vdupq_n_s32(5 - (int)v17);
          v21.i64[0] = 0x100000001;
          v21.i64[1] = 0x100000001;
          v22.i64[0] = 0xA0000000ALL;
          v22.i64[1] = 0xA0000000ALL;
          do
          {
            v23 = (int8x16_t)v21;
            v21 = vmulq_s32(v21, v22);
            v19 += 4;
          }
          while (((9 - (_DWORD)v17) & 0xFFFFFFFC) != v19);
          v24 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v19 - 4), (int8x16_t)xmmword_2186CA030), v20), v23, (int8x16_t)v21);
          *(int32x2_t *)v24.i8 = vmul_s32(*(int32x2_t *)v24.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
          v9 = v32.__r_.__value_.__r.__words[0] * (v24.i32[0] * v24.i32[1]);
        }
        break;
      default:
        break;
    }
    v46 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v41, &v44, *(std::string::value_type **)v45, &v47);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(v42);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (v4 == 45)
  {
    v29 = boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>::to_tick_count(data, v6, v7, v9);
    v41.__r_.__value_.__r.__words[0] = v29;
    LODWORD(v33.__r_.__value_.__l.__data_) = -1;
    if ((unint64_t)(v29 - 0x7FFFFFFFFFFFFFFELL) > 2)
      v30 = -v29;
    else
      v30 = boost::date_time::int_adapter<long long>::mult_div_specials((int64_t *)&v41, (int *)&v33);
    *v31 = v30;
  }
  else
  {
    *v31 = boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>::to_tick_count(data, v6, v7, v9);
  }
  if (v52 < 0)
    operator delete(v51);
  if (v50 < 0)
    operator delete(v49);
  if (v56 < 0)
    operator delete(v55);
  if (v54 < 0)
    operator delete((void *)v53);
}

void sub_217F5B4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::exception a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer(v33 - 248);
  std::pair<std::string,std::string>::~pair(v33 - 168);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::local_time::bad_offset>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91C570;
  v4 = &unk_24D91C598;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F5B5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::local_time::bad_adjustment>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91C710;
  v4 = &unk_24D91C738;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F5B6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>(unsigned __int8 **a1, int *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  char v11[4];
  int v12;
  int *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;

  v3 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    return 0;
  v16 = 0;
  v5 = *v3;
  if (v5 == 45 || v5 == 43)
    *a1 = ++v3;
  v11[0] = 0;
  v12 = 1;
  v13 = &v16;
  v14 = v3;
  v15 = v2;
  v6 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>::convert((uint64_t)v11);
  v7 = v16;
  if (v16 >= 0)
    v8 = v6;
  else
    v8 = 0;
  if (v16 < 0x80000001)
    v9 = v6;
  else
    v9 = 0;
  if (v5 == 45)
  {
    v7 = -v16;
    result = v9;
  }
  else
  {
    result = v8;
  }
  *a2 = v7;
  return result;
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>::convert(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  const std::locale *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  char *p_p;
  char v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  char v15;
  unsigned int v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  int v24;
  _BYTE *v25;
  void *__p;
  uint64_t v28;
  unsigned __int8 v29;
  std::locale v30;

  v1 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v2 - 1;
  v3 = *(_DWORD **)(a1 + 8);
  *v3 = 0;
  if (*(_QWORD *)(a1 + 16) <= (unint64_t)(v2 - 1))
  {
    v4 = *(unsigned __int8 *)(v2 - 1);
    if ((v4 - 58) < 0xFFFFFFF6)
      return 0;
    *v3 = v4 - 48;
    *(_QWORD *)(a1 + 24) = v2 - 2;
    MEMORY[0x219A19828](&v30);
    v6 = std::locale::classic();
    if (std::locale::operator==(&v30, v6))
    {
      v1 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>::main_convert_loop(a1);
LABEL_45:
      std::locale::~locale(&v30);
      return v1;
    }
    v7 = std::locale::use_facet(&v30, MEMORY[0x24BEDB588]);
    ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
    if ((char)v29 < 0)
    {
      v8 = v28;
      if (!v28)
        goto LABEL_42;
      p_p = (char *)__p;
    }
    else
    {
      v8 = v29;
      if (!v29)
        goto LABEL_42;
      p_p = (char *)&__p;
    }
    if (*p_p >= 1)
    {
      v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
      v11 = *(_BYTE **)(a1 + 16);
      v12 = *(_BYTE **)(a1 + 24);
      if (v12 >= v11)
      {
        v13 = 0;
        v14 = __p;
        if ((v29 & 0x80u) == 0)
          v14 = &__p;
        v15 = *v14 - 1;
        do
        {
          if (v15)
          {
            v16 = *(_DWORD *)(a1 + 4);
            if (*(_BYTE *)a1)
              v17 = 1;
            else
              v17 = v16 > 0x19999999;
            v18 = v17;
            *(_BYTE *)a1 = v18;
            v19 = 10 * v16;
            *(_DWORD *)(a1 + 4) = 10 * v16;
            v20 = (char)*v12;
            if ((*v12 - 58) < 0xF6u)
              goto LABEL_47;
            v21 = v20 - 48;
            v22 = (v20 - 48) * v19;
            if (v21)
            {
              if ((v18 & 1) != 0)
                goto LABEL_47;
              if (((v21 * (unint64_t)v19) & 0xFFFFFFFF00000000) != 0)
                goto LABEL_47;
              v23 = *(_DWORD **)(a1 + 8);
              v24 = *v23;
              if (__CFADD__(v22, *v23))
                goto LABEL_47;
            }
            else
            {
              v23 = *(_DWORD **)(a1 + 8);
              v24 = *v23;
            }
            *v23 = v24 + v22;
            --v15;
          }
          else
          {
            if (*v12 != v10)
              goto LABEL_42;
            if (v12 == v11)
            {
LABEL_47:
              v1 = 0;
              goto LABEL_43;
            }
            if (v8 - 1 > (unint64_t)v13)
              ++v13;
            if ((v29 & 0x80u) == 0)
              v25 = &__p;
            else
              v25 = __p;
            v15 = v25[v13];
          }
          *(_QWORD *)(a1 + 24) = --v12;
        }
        while (v12 >= v11);
      }
      v1 = 1;
      goto LABEL_43;
    }
LABEL_42:
    v1 = boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>::main_convert_loop(a1);
LABEL_43:
    if ((char)v29 < 0)
      operator delete(__p);
    goto LABEL_45;
  }
  return v1;
}

void sub_217F5B9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lcast_ret_unsigned<std::char_traits<char>,unsigned int,char>::main_convert_loop(uint64_t a1)
{
  unint64_t v1;
  _BYTE *v2;
  char v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE **)(a1 + 24);
  if ((unint64_t)v2 < v1)
    return 1;
  v4 = *(_BYTE *)a1 != 0;
  while (1)
  {
    v5 = *(_DWORD *)(a1 + 4);
    v4 |= v5 > 0x19999999;
    *(_BYTE *)a1 = v4 & 1;
    v6 = 10 * v5;
    *(_DWORD *)(a1 + 4) = 10 * v5;
    v7 = (char)*v2;
    if ((*v2 - 58) < 0xF6u)
      break;
    v8 = v7 - 48;
    v9 = (v7 - 48) * v6;
    if (v8)
    {
      if ((v4 & 1) != 0)
        return 0;
      if (((v8 * (unint64_t)v6) & 0xFFFFFFFF00000000) != 0)
        return 0;
      v10 = *(_DWORD **)(a1 + 8);
      v11 = *v10;
      if (__CFADD__(v9, *v10))
        return 0;
    }
    else
    {
      v10 = *(_DWORD **)(a1 + 8);
      v11 = *v10;
    }
    *v10 = v11 + v9;
    *(_QWORD *)(a1 + 24) = --v2;
    if ((unint64_t)v2 < v1)
      return 1;
  }
  return 0;
}

uint64_t boost::date_time::int_adapter<long long>::mult_div_specials(int64_t *a1, int *a2)
{
  int64_t v3;
  uint64_t result;
  int64_t v6;
  int64_t v7;

  v3 = *a1;
  result = 0x7FFFFFFFFFFFFFFELL;
  if (v3 != 0x7FFFFFFFFFFFFFFELL)
  {
    v6 = 0;
    if (boost::date_time::int_adapter<long long>::compare(a1, &v6) == 1 && *a2 > 0)
      return 0x7FFFFFFFFFFFFFFFLL;
    v7 = 0;
    if (boost::date_time::int_adapter<long long>::compare(a1, &v7) == -1 && *a2 < 0)
    {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = 0;
      if (boost::date_time::int_adapter<long long>::compare(a1, &v6) == 1 && *a2 < 0)
        return 0x8000000000000000;
      v7 = 0;
      if (boost::date_time::int_adapter<long long>::compare(a1, &v7) == -1 && *a2 > 0)
        return 0x8000000000000000;
      else
        return 0x7FFFFFFFFFFFFFFELL;
    }
  }
  return result;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D91C5B8;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91C4D0;
  *(_QWORD *)(a1 + 16) = &unk_24D91C508;
  *(_QWORD *)(a1 + 56) = &unk_24D91C540;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D91C5B8;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91C4D0;
  *(_QWORD *)(a1 + 16) = &unk_24D91C508;
  *(_QWORD *)(a1 + 56) = &unk_24D91C540;
  return a1;
}

void sub_217F5BC68(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F5BCE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F5BD40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_offset>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_217F5BE10(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::posix_time::to_simple_string_type<char>(int64_t *a1)
{
  int64_t v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  int64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v2 = *a1;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    v16 = 0;
    if (boost::date_time::int_adapter<long long>::compare(a1, &v16) == -1)
    {
      LOBYTE(v16) = 45;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v16, 1);
    }
    *(_QWORD *)((char *)&v13[3] + *(_QWORD *)(v13[0] - 24)) = 2;
    LOBYTE(v16) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, (char *)&v16);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
    *(_QWORD *)((char *)&v13[3] + *(_QWORD *)(v13[0] - 24)) = 2;
    LOBYTE(v16) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, (char *)&v16);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)":", 1);
    *(_QWORD *)((char *)&v13[3] + *(_QWORD *)(v13[0] - 24)) = 2;
    LOBYTE(v16) = 48;
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, (char *)&v16);
    std::ostream::operator<<();
    if (*a1 % 1000000)
    {
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)".", 1);
      *(_QWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 24) = 6;
      LOBYTE(v16) = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v16);
      std::ostream::operator<<();
    }
  }
  else
  {
    v3 = "not-a-date-time";
    v4 = 15;
    v5 = "+infinity";
    v6 = 9;
    if (v2 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = "";
      v6 = 0;
    }
    if (v2 != 0x7FFFFFFFFFFFFFFELL)
    {
      v3 = v5;
      v4 = v6;
    }
    if (v2 == 0x8000000000000000)
      v7 = "-infinity";
    else
      v7 = v3;
    if (v2 == 0x8000000000000000)
      v8 = 9;
    else
      v8 = v4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v7, v8);
  }
  std::stringbuf::str();
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v15);
}

void sub_217F5C14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::logic_error *boost::local_time::bad_offset::bad_offset(std::logic_error *a1)
{
  std::string v3;

  std::operator+<char>();
  std::logic_error::logic_error(a1, &v3);
  a1->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24D91C5B8;
  return a1;
}

void sub_217F5C1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D91C758;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91C670;
  *(_QWORD *)(a1 + 16) = &unk_24D91C6A8;
  *(_QWORD *)(a1 + 56) = &unk_24D91C6E0;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D91C758;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91C670;
  *(_QWORD *)(a1 + 16) = &unk_24D91C6A8;
  *(_QWORD *)(a1 + 56) = &unk_24D91C6E0;
  return a1;
}

void sub_217F5C2CC(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F5C344(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F5C3A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::bad_adjustment>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_217F5C474(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::local_time::bad_adjustment::bad_adjustment(std::logic_error *a1)
{
  std::string v3;

  std::operator+<char>();
  std::logic_error::logic_error(a1, &v3);
  a1->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24D91C758;
  return a1;
}

void sub_217F5C4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *boost::date_time::time_zone_names_base<char>::time_zone_names_base(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v11;
  }
  v12 = this + 3;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v13 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return this;
}

void sub_217F5C600(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void boost::local_time::posix_time_zone_base<char>::M_func(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::string::size_type size;
  std::string *p_p;
  unsigned int v8;
  std::string::size_type v9;
  std::string *v10;
  int v11;
  std::string::size_type v12;
  std::string *v13;
  unsigned int v14;
  std::string::size_type v15;
  std::string *v16;
  unsigned int v17;
  std::string::size_type v18;
  std::string *v19;
  int v20;
  std::string::size_type v21;
  std::string *v22;
  unsigned int v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  __int128 v27;
  __int128 v28;
  std::bad_cast *v29;
  std::bad_cast *v30;
  std::bad_cast *v31;
  std::bad_cast *v32;
  __int16 v33;
  __int16 v34;
  std::string v35;
  std::string v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  char v40;
  std::string __p;
  std::string v42;
  std::string v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  char v47;
  std::string v48;
  _BYTE v49[16];
  void *v50;
  char v51;
  void *v52;
  char v53;
  _BYTE v54[16];
  void *v55;
  char v56;
  void *v57;
  char v58;
  __int128 v59;
  char v60;
  void *v61;
  char v62;
  char v63[4];
  unsigned __int16 v64;
  __int128 v65;
  uint64_t v66;

  strcpy(v63, "M.");
  boost::char_separator<char,std::char_traits<char>>::char_separator((uint64_t)&v59, v63, 0, 0);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v54, a2, &v59);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::tokenizer<std::string>((uint64_t)v49, a3, &v59);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)v54, &v42);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v35 = v42;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v36 = v43;
  v37 = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    __p = v48;
  v47 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v42, (std::string::value_type **)&v46, *((std::string::value_type **)&v46 + 1), &v48);
  v64 = 0;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  else
    p_p = &__p;
  *(_QWORD *)&v65 = p_p;
  *((_QWORD *)&v65 + 1) = (char *)p_p + size;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v65, &v64) & 1) == 0)
  {
    v29 = std::bad_cast::bad_cast((std::bad_cast *)&v65);
    *(_QWORD *)&v65 = &unk_24D91BD80;
    v66 = MEMORY[0x24BEDB7C0];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v29);
  }
  v8 = v64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v35 = v42;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v36 = v43;
  v37 = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    __p = v48;
  v47 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v42, (std::string::value_type **)&v46, *((std::string::value_type **)&v46 + 1), &v48);
  v64 = 0;
  v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = __p.__r_.__value_.__l.__size_;
  else
    v10 = &__p;
  *(_QWORD *)&v65 = v10;
  *((_QWORD *)&v65 + 1) = (char *)v10 + v9;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v65, &v64) & 1) == 0)
  {
    v30 = std::bad_cast::bad_cast((std::bad_cast *)&v65);
    *(_QWORD *)&v65 = &unk_24D91BD80;
    v66 = MEMORY[0x24BEDB7C0];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v30);
  }
  v11 = v64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  LOWORD(v65) = 0;
  v12 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  v13 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = v48.__r_.__value_.__l.__size_;
  else
    v13 = &v48;
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  v35.__r_.__value_.__l.__size_ = (std::string::size_type)v13 + v12;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v35, &v65) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v35);
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
    v35.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB7C0];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v35);
  }
  v14 = (unsigned __int16)v65;
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::begin((uint64_t)v49, &v35);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v42 = v35;
  *((_BYTE *)&v35.__r_.__value_.__s + 23) = 0;
  v35.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v43 = v36;
  *((_BYTE *)&v36.__r_.__value_.__s + 23) = 0;
  v36.__r_.__value_.__s.__data_[0] = 0;
  v44 = v37;
  v45 = v38;
  v46 = v39;
  v47 = v40;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    v48 = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    v48 = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v35 = v42;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v36 = v43;
  v37 = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    __p = v48;
  v47 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v42, (std::string::value_type **)&v46, *((std::string::value_type **)&v46 + 1), &v48);
  v64 = 0;
  v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v15 = __p.__r_.__value_.__l.__size_;
  else
    v16 = &__p;
  *(_QWORD *)&v65 = v16;
  *((_QWORD *)&v65 + 1) = (char *)v16 + v15;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v65, &v64) & 1) == 0)
  {
    v31 = std::bad_cast::bad_cast((std::bad_cast *)&v65);
    *(_QWORD *)&v65 = &unk_24D91BD80;
    v66 = MEMORY[0x24BEDB7C0];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v31);
  }
  v17 = v64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v35 = v42;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v36 = v43;
  v37 = v44;
  v38 = v45;
  v39 = v46;
  v40 = v47;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    __p = v48;
  v47 = boost::char_separator<char,std::char_traits<char>>::operator()<std::__wrap_iter<char const*>,std::string>((uint64_t)&v42, (std::string::value_type **)&v46, *((std::string::value_type **)&v46 + 1), &v48);
  v64 = 0;
  v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = __p.__r_.__value_.__l.__size_;
  else
    v19 = &__p;
  *(_QWORD *)&v65 = v19;
  *((_QWORD *)&v65 + 1) = (char *)v19 + v18;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v65, &v64) & 1) == 0)
  {
    v32 = std::bad_cast::bad_cast((std::bad_cast *)&v65);
    *(_QWORD *)&v65 = &unk_24D91BD80;
    v66 = MEMORY[0x24BEDB7C0];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v32);
  }
  v20 = v64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  LOWORD(v65) = 0;
  v21 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  v22 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = v48.__r_.__value_.__l.__size_;
  else
    v22 = &v48;
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  v35.__r_.__value_.__l.__size_ = (std::string::size_type)v22 + v21;
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_unsigned<unsigned short>((unsigned __int8 **)&v35, &v65) & 1) == 0)
  {
    std::bad_cast::bad_cast((std::bad_cast *)&v35);
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91BD80;
    v35.__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB7C0];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v35);
  }
  v23 = (unsigned __int16)v65;
  v24 = operator new();
  if (v14 >= 7)
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)0,(unsigned short)6,boost::gregorian::bad_weekday>::on_error();
  v34 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v34, v8);
  v25 = v34;
  if (v23 >= 7)
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)0,(unsigned short)6,boost::gregorian::bad_weekday>::on_error();
  v33 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v33, v17);
  v26 = v33;
  *(_QWORD *)v24 = &unk_24D91C7D8;
  *(_QWORD *)(v24 + 8) = &unk_24D91C780;
  *(_WORD *)(v24 + 16) = v25;
  *(_DWORD *)(v24 + 20) = v11;
  *(_WORD *)(v24 + 24) = v14;
  *(_QWORD *)(v24 + 32) = &unk_24D91C780;
  *(_WORD *)(v24 + 40) = v26;
  *(_DWORD *)(v24 + 44) = v20;
  *(_WORD *)(v24 + 48) = v23;
  boost::shared_ptr<boost::date_time::dst_day_calc_rule<boost::gregorian::date>>::shared_ptr<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>((uint64_t *)&v65, v24);
  v27 = v65;
  v65 = 0uLL;
  v28 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 144) = v27;
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v28;
  boost::detail::shared_count::~shared_count((unsigned int **)&v35.__r_.__value_.__l.__size_);
  boost::detail::shared_count::~shared_count((unsigned int **)&v65 + 1);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v58 < 0)
    operator delete(v57);
  if (v56 < 0)
    operator delete(v55);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete((void *)v59);
}

void sub_217F5CFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11.__vftable);
  boost::token_iterator<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~token_iterator((uint64_t)&a31);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer((uint64_t)&a46);
  boost::tokenizer<boost::char_separator<char,std::char_traits<char>>,std::__wrap_iter<char const*>,std::string>::~tokenizer((uint64_t)&a56);
  std::pair<std::string,std::string>::~pair(v56 - 200);
  _Unwind_Resume(a1);
}

void boost::local_time::posix_time_zone_base<char>::julian_no_leap(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string::size_type size;
  std::string *v6;
  int v7;
  unsigned __int16 i;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  std::string::size_type v13;
  std::string *v14;
  int v15;
  unsigned __int16 j;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  unsigned __int16 v34;
  std::string v35;
  int v36;
  std::bad_cast v37[2];
  uint64_t v38;

  std::string::basic_string(&v35, a2, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v37);
  v36 = 0;
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  v6 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  else
    v6 = &v35;
  v37[0].__vftable = (std::bad_cast_vtbl *)v6;
  v37[1].__vftable = (std::bad_cast_vtbl *)((char *)v6 + size);
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>((unsigned __int8 **)v37, &v36) & 1) == 0)
  {
    std::bad_cast::bad_cast(v37);
    v37[0].__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
    v38 = MEMORY[0x24BEDB798];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v37);
  }
  v7 = v36;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  for (i = 1; ; ++i)
  {
    v34 = 1;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v34, i);
    v9 = v34 - 2;
    v10 = v9 > 9 ? 31 : dword_2186C9FD8[(__int16)v9];
    if (v7 < v10)
      break;
    v33 = 1;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v33, i);
    v11 = v33 - 2;
    if (v11 > 9)
      v12 = -31;
    else
      v12 = dword_2186CA000[(__int16)v11];
    v7 += v12;
  }
  std::string::basic_string(&v35, a3, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v37);
  v36 = 0;
  v13 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  v14 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = v35.__r_.__value_.__l.__size_;
  else
    v14 = &v35;
  v37[0].__vftable = (std::bad_cast_vtbl *)v14;
  v37[1].__vftable = (std::bad_cast_vtbl *)((char *)v14 + v13);
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>((unsigned __int8 **)v37, &v36) & 1) == 0)
  {
    std::bad_cast::bad_cast(v37);
    v37[0].__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
    v38 = MEMORY[0x24BEDB798];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v37);
  }
  v15 = v36;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  for (j = 1; ; ++j)
  {
    v32 = 1;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v32, j);
    v17 = v32 - 2;
    v18 = v17 > 9 ? 31 : dword_2186C9FD8[(__int16)v17];
    if (v15 <= v18)
      break;
    v31 = 1;
    boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v31, j);
    v19 = v31 - 2;
    if (v19 > 9)
      v20 = -31;
    else
      v20 = dword_2186CA000[(__int16)v19];
    v15 += v20;
  }
  v21 = operator new();
  v30 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v30, (unsigned __int16)v7);
  v29 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v29, i);
  v22 = v30;
  v23 = v29;
  v28 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v28, (unsigned __int16)v15);
  v27 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v27, j);
  v24 = v28;
  *(_QWORD *)v21 = &unk_24D91C8F8;
  *(_QWORD *)(v21 + 8) = &unk_24D91C8B0;
  *(_DWORD *)(v21 + 16) = v22 | (v23 << 16);
  *(_QWORD *)(v21 + 24) = &unk_24D91C8B0;
  *(_DWORD *)(v21 + 32) = v24 | (v27 << 16);
  boost::shared_ptr<boost::date_time::dst_day_calc_rule<boost::gregorian::date>>::shared_ptr<boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>>((uint64_t *)&v35, v21);
  v25 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
  v26 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 144) = v25;
  *(_OWORD *)&v37[0].__vftable = v26;
  boost::detail::shared_count::~shared_count((unsigned int **)&v37[1]);
  boost::detail::shared_count::~shared_count((unsigned int **)&v35.__r_.__value_.__l.__size_);
}

void sub_217F5D424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::exception a18)
{
  _Unwind_Resume(exception_object);
}

void boost::local_time::posix_time_zone_base<char>::julian_day(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::bad_cast_vtbl *v6;
  uint64_t v7;
  uint64_t v8;
  std::bad_cast_vtbl *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  _DWORD v14[4];
  _BYTE v15[8];
  int v16;
  __int128 v17;
  std::bad_cast v18[2];
  uint64_t v19;

  LODWORD(v17) = 0;
  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = *(std::bad_cast_vtbl **)a2;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  else
    v6 = (std::bad_cast_vtbl *)a2;
  v18[0].__vftable = v6;
  v18[1].__vftable = (std::bad_cast_vtbl *)((char *)v6 + v5);
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>((unsigned __int8 **)v18, (int *)&v17) & 1) == 0)
  {
    std::bad_cast::bad_cast(v18);
    v18[0].__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
    v19 = MEMORY[0x24BEDB798];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v18);
  }
  v7 = (int)v17;
  LODWORD(v17) = 0;
  v8 = *(unsigned __int8 *)(a3 + 23);
  v9 = *(std::bad_cast_vtbl **)a3;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  else
    v9 = (std::bad_cast_vtbl *)a3;
  v18[0].__vftable = v9;
  v18[1].__vftable = (std::bad_cast_vtbl *)((char *)v9 + v8);
  if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<int>((unsigned __int8 **)v18, (int *)&v17) & 1) == 0)
  {
    std::bad_cast::bad_cast(v18);
    v18[0].__vftable = (std::bad_cast_vtbl *)&unk_24D91BD80;
    v19 = MEMORY[0x24BEDB798];
    boost::throw_exception<boost::bad_lexical_cast>((uint64_t)v18);
  }
  v10 = (int)v17;
  v11 = operator new();
  boost::date_time::partial_date<boost::gregorian::date>::partial_date((uint64_t)v15, v7 + 1);
  boost::date_time::partial_date<boost::gregorian::date>::partial_date((uint64_t)v14, v10 + 1);
  *(_QWORD *)v11 = &unk_24D91C8F8;
  *(_QWORD *)(v11 + 8) = &unk_24D91C8B0;
  *(_DWORD *)(v11 + 16) = v16;
  *(_QWORD *)(v11 + 24) = &unk_24D91C8B0;
  *(_DWORD *)(v11 + 32) = v14[2];
  boost::shared_ptr<boost::date_time::dst_day_calc_rule<boost::gregorian::date>>::shared_ptr<boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>>((uint64_t *)&v17, v11);
  v12 = v17;
  v17 = 0uLL;
  v13 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)&v18[0].__vftable = v13;
  boost::detail::shared_count::~shared_count((unsigned int **)&v18[1]);
  boost::detail::shared_count::~shared_count((unsigned int **)&v17 + 1);
}

void sub_217F5D634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception a15)
{
  _Unwind_Resume(exception_object);
}

void boost::date_time::nth_kday_of_month<boost::gregorian::date>::~nth_kday_of_month()
{
  JUMPOUT(0x219A19A08);
}

uint64_t boost::date_time::nth_kday_of_month<boost::gregorian::date>::get_date(uint64_t a1, unsigned __int16 a2)
{
  unsigned int *v3;
  int v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v3 = boost::gregorian::date::date(&v9, a2, *(_WORD *)(a1 + 8), 1u);
  v7 = 7;
  v8 = 1;
  v4 = *(unsigned __int16 *)(a1 + 16);
  while (v4 != (unsigned __int16)boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::day_of_week(v3))
  {
    v9 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator+(&v9, &v8);
    v4 = *(unsigned __int16 *)(a1 + 16);
    v3 = &v9;
  }
  if (*(int *)(a1 + 12) >= 2)
  {
    v5 = 1;
    do
    {
      v9 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator+(&v9, &v7);
      ++v5;
    }
    while (v5 < *(_DWORD *)(a1 + 12));
  }
  if (*(unsigned __int16 *)(a1 + 8) == (unsigned __int16)boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::month(&v9))
    return v9;
  else
    return boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator-(&v9, &v7);
}

uint64_t boost::date_time::nth_kday_of_month<boost::gregorian::date>::to_string()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;
  char v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  v6 = 77;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v6, 1);
  v0 = (_QWORD *)std::ostream::operator<<();
  v6 = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)&v6, 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  v6 = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v6, 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v5);
}

void sub_217F5D854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::day_of_week(_DWORD *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned __int16 v12;
  unsigned __int16 v13;
  __int16 v14;
  unsigned __int16 v15;

  v1 = *a1 + 32044;
  v2 = ((4 * v1) | 3u) / 0x23AB1;
  v3 = v1 - ((146097 * v2) >> 2);
  v4 = ((4 * v3) | 3) / 0x5B5;
  v5 = v3 - ((1461 * v4) >> 2);
  v6 = 5 * v5 + 2;
  v7 = v5 - (153 * (v6 / 0x99) + 2) / 5 + 1;
  v8 = v6 / 0x99 + 65524 * (v6 / 0x5FA) + 3;
  v15 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v15, (unsigned __int16)(v4 + 100 * v2 - 4800 + v6 / 0x5FA));
  v14 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v14, v15);
  v13 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v13, (unsigned __int16)v8);
  v12 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v12, (unsigned __int16)v7);
  v9 = (14 - v13) / 12;
  v10 = v12
      + (unsigned __int16)(v14 - v9)
      + ((unsigned __int16)(v14 - v9) >> 2)
      - (unsigned __int16)(v14 - v9) / 0x64u
      + (unsigned __int16)(v14 - v9) / 0x190u
      + ((357913942 * (unint64_t)(31 * (unsigned __int16)(v13 + 12 * v9 - 2))) >> 32);
  result = (v10 % 7);
  if ((unsigned __int16)(v10 % 7) >= 7u)
    boost::CV::simple_exception_policy<unsigned short,(unsigned short)0,(unsigned short)6,boost::gregorian::bad_weekday>::on_error();
  return result;
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::month(_DWORD *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v10;
  unsigned __int16 v11;
  __int16 v12;
  unsigned __int16 v13;

  v1 = *a1 + 32044;
  v2 = ((4 * v1) | 3u) / 0x23AB1;
  v3 = v1 - ((146097 * v2) >> 2);
  v4 = ((4 * v3) | 3) / 0x5B5;
  v5 = v3 - ((1461 * v4) >> 2);
  v6 = 5 * v5 + 2;
  v7 = v5 - (153 * (v6 / 0x99) + 2) / 5 + 1;
  v8 = v6 / 0x99 + 65524 * (v6 / 0x5FA) + 3;
  v13 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v13, (unsigned __int16)(v4 + 100 * v2 - 4800 + v6 / 0x5FA));
  v12 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v12, v13);
  v11 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v11, (unsigned __int16)v8);
  v10 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v10, (unsigned __int16)v7);
  return v11;
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator-(unsigned int *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v5;
  unsigned int v6;

  v2 = *a2;
  result = *a1;
  if ((unint64_t)(*a2 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    if ((result + 2) < 3)
      LODWORD(v2) = 0;
    return (result - v2);
  }
  else
  {
    if (v2 == 0x7FFFFFFFFFFFFFFELL || (_DWORD)result == -2)
      return 4294967294;
    if ((_DWORD)result)
    {
      if ((_DWORD)result != -1)
      {
        if (v2 == 0x7FFFFFFFFFFFFFFFLL)
          v6 = 0;
        else
          v6 = result - v2;
        if (v2 == 0x8000000000000000)
          return 0xFFFFFFFFLL;
        else
          return v6;
      }
      v5 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v5 = 0x8000000000000000;
    }
    if (v2 == v5)
      return 4294967294;
  }
  return result;
}

void boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>::~day_calc_dst_rule()
{
  JUMPOUT(0x219A19A08);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>::start_day(uint64_t a1, unsigned __int16 a2)
{
  return boost::date_time::nth_kday_of_month<boost::gregorian::date>::get_date(a1 + 8, a2);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>::start_rule_as_string()
{
  return boost::date_time::nth_kday_of_month<boost::gregorian::date>::to_string();
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>::end_day(uint64_t a1, unsigned __int16 a2)
{
  return boost::date_time::nth_kday_of_month<boost::gregorian::date>::get_date(a1 + 32, a2);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>::end_rule_as_string()
{
  return boost::date_time::nth_kday_of_month<boost::gregorian::date>::to_string();
}

uint64_t *boost::shared_ptr<boost::date_time::dst_day_calc_rule<boost::gregorian::date>>::shared_ptr<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_217F5DCB0(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D91C840;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_217F5DD24(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_217F5DD44(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::detail::sp_counted_impl_p<boost::date_time::day_calc_dst_rule<boost::local_time::nth_kday_rule_spec>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::date_time::partial_date<boost::gregorian::date>::get_date(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2;
  int v3;
  BOOL v5;
  _QWORD *v7;
  std::string v8;
  std::logic_error v9;
  _QWORD v10[33];
  unsigned int v11;

  v2 = *(unsigned __int16 *)(a1 + 8);
  v3 = *(unsigned __int16 *)(a1 + 10);
  if (v2 == 29 && v3 == 2)
  {
    if ((a2 & 3) != 0
      || ((unsigned __int16)((a2 << 14) | ((unsigned __int16)(23593 * a2) >> 2)) <= 0x28Fu
        ? (v5 = a2 % 0x190u == 0)
        : (v5 = 1),
          !v5))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No Feb 29th in given year of ", 29);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".", 1);
      std::stringbuf::str();
      std::logic_error::logic_error(&v9, &v8);
      v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      boost::throw_exception<std::invalid_argument>(&v9);
    }
    LOWORD(v3) = 2;
  }
  boost::gregorian::date::date(&v11, a2, v3, v2);
  return v11;
}

void sub_217F5DE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::logic_error a16, char a17)
{
  std::logic_error::~logic_error(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::partial_date<boost::gregorian::date>::to_string(uint64_t a1)
{
  int v3;
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  boost::gregorian::date::date(&v3, 0x7D4u, *(_WORD *)(a1 + 10), *(_WORD *)(a1 + 8));
  boost::gregorian::date::day_of_year((boost::gregorian::date *)&v3);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v4[1] = MEMORY[0x24BEDB848] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v6);
}

void sub_217F5DF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::invalid_argument>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91C3F8;
  v4 = &unk_24D91C420;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::invalid_argument>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F5E03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::gregorian::date::day_of_year(boost::gregorian::date *this)
{
  unsigned __int16 v2;
  unint64_t v4;
  unsigned int v5;
  unsigned __int16 v6;

  v2 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(this);
  boost::gregorian::date::date(&v5, v2, 1u, 1u);
  boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator-((unsigned int *)this, &v5, &v4);
  v6 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)366,boost::gregorian::bad_day_of_year>>::assign(&v6, (unsigned __int16)(v4 + 1));
  return v6;
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(_DWORD *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  __int16 v10;
  __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;

  v1 = *a1 + 32044;
  v2 = ((4 * v1) | 3u) / 0x23AB1;
  v3 = v1 - ((146097 * v2) >> 2);
  v4 = ((4 * v3) | 3) / 0x5B5;
  v5 = v3 - ((1461 * v4) >> 2);
  v6 = 5 * v5 + 2;
  v7 = v5 - (153 * (v6 / 0x99) + 2) / 5 + 1;
  v8 = v6 / 0x99 + 65524 * (v6 / 0x5FA) + 3;
  v13 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v13, (unsigned __int16)(v4 + 100 * v2 - 4800 + v6 / 0x5FA));
  v12 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v12, v13);
  v11 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v11, (unsigned __int16)v8);
  v10 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v10, (unsigned __int16)v7);
  return v12;
}

unsigned int *boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator-@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *result;
  v4 = *a2;
  if ((v3 + 2) >= 3)
  {
    if ((v4 + 2) >= 3)
    {
      v6 = v3 - v4;
      goto LABEL_27;
    }
    if ((_DWORD)v4 == -2)
      goto LABEL_17;
  }
  else
  {
    v5 = (_DWORD)v3 == -2 || (_DWORD)v4 == -2;
    if (v5)
      goto LABEL_17;
  }
  if (!(_DWORD)v3)
  {
    if ((_DWORD)v4)
    {
      v6 = 0x8000000000000000;
      goto LABEL_27;
    }
    goto LABEL_17;
  }
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 != -1)
    {
      v6 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_27;
    }
LABEL_17:
    v6 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_27;
  }
  v7 = v3 - v4;
  v8 = 0x7FFFFFFFFFFFFFFELL;
  if (!v7)
    v8 = 0x8000000000000000;
  v5 = v7 == -1;
  v9 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v5)
    v9 = v8;
  if (!(_DWORD)v4)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  if ((_DWORD)v4 == -1)
    v6 = 0x8000000000000000;
  else
    v6 = v9;
LABEL_27:
  *a3 = v6;
  return result;
}

void boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>::~day_calc_dst_rule()
{
  JUMPOUT(0x219A19A08);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>::start_day(uint64_t a1, unsigned __int16 a2)
{
  return boost::date_time::partial_date<boost::gregorian::date>::get_date(a1 + 8, a2);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>::start_rule_as_string(uint64_t a1)
{
  return boost::date_time::partial_date<boost::gregorian::date>::to_string(a1 + 8);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>::end_day(uint64_t a1, unsigned __int16 a2)
{
  return boost::date_time::partial_date<boost::gregorian::date>::get_date(a1 + 24, a2);
}

uint64_t boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>::end_rule_as_string(uint64_t a1)
{
  return boost::date_time::partial_date<boost::gregorian::date>::to_string(a1 + 24);
}

uint64_t *boost::shared_ptr<boost::date_time::dst_day_calc_rule<boost::gregorian::date>>::shared_ptr<boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_217F5E368(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::date_time::day_calc_dst_rule<boost::local_time::partial_date_rule_spec>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D91C950;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_217F5E3DC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_217F5E3FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::partial_date<boost::gregorian::date>::partial_date(uint64_t a1, int64_t a2)
{
  int v3;
  int64_t v4;
  int64_t v6;
  unsigned int v7;
  int64_t v8;

  v8 = a2;
  *(_QWORD *)a1 = &unk_24D91C8B0;
  *(_DWORD *)(a1 + 8) = 65537;
  boost::gregorian::date::date(&v7, 0x7D0u, 1u, 1u);
  v6 = 1;
  if (boost::date_time::int_adapter<long long>::compare(&v8, &v6) == 1)
  {
    v6 = 366;
    v3 = boost::date_time::int_adapter<long long>::compare(&v8, &v6);
    v4 = v8;
    if (v3 == 1)
      v4 = 366;
    v8 = (__PAIR128__(v4, v4 + 0x7FFFFFFFFFFFFFFFLL) - 0xFFFFFFFFFFFFFFFDLL) >> 64;
    v6 = v8;
    v7 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::operator+(&v7, &v6);
  }
  *(_WORD *)(a1 + 8) = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::day(&v7);
  *(_WORD *)(a1 + 10) = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::month(&v7);
  return a1;
}

uint64_t boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::day(_DWORD *a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 v10;
  __int16 v11;
  __int16 v12;
  unsigned __int16 v13;

  v1 = *a1 + 32044;
  v2 = ((4 * v1) | 3u) / 0x23AB1;
  v3 = v1 - ((146097 * v2) >> 2);
  v4 = ((4 * v3) | 3) / 0x5B5;
  v5 = v3 - ((1461 * v4) >> 2);
  v6 = 5 * v5 + 2;
  v7 = v5 - (153 * (v6 / 0x99) + 2) / 5 + 1;
  v8 = v6 / 0x99 + 65524 * (v6 / 0x5FA) + 3;
  v13 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v13, (unsigned __int16)(v4 + 100 * v2 - 4800 + v6 / 0x5FA));
  v12 = 1400;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1400,(unsigned short)9999,boost::gregorian::bad_year>>::assign(&v12, v13);
  v11 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)12,boost::gregorian::bad_month>>::assign(&v11, (unsigned __int16)v8);
  v10 = 1;
  boost::CV::constrained_value<boost::CV::simple_exception_policy<unsigned short,(unsigned short)1,(unsigned short)31,boost::gregorian::bad_day_of_month>>::assign(&v10, (unsigned __int16)v7);
  return v10;
}

uint64_t boost::local_time::posix_time_zone_base<char>::~posix_time_zone_base(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D91C248;
  boost::detail::shared_count::~shared_count((unsigned int **)(a1 + 152));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t *boost::shared_ptr<boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::shared_ptr<boost::local_time::posix_time_zone_base<char>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::local_time::posix_time_zone_base<char>>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_217F5E6E4(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<boost::local_time::posix_time_zone_base<char>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D91C9B0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_217F5E758(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  __cxa_rethrow();
}

void sub_217F5E778(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::local_date_time_base(_QWORD *a1, unsigned int a2, int64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  int64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45[3];
  std::logic_error v46;
  uint64_t v47[33];
  uint64_t v48;
  unsigned int *v49;
  int64_t v50;
  uint64_t v51;
  unsigned int v52;

  v52 = a2;
  v51 = *a3;
  LODWORD(v45[0]) = a2;
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v47, (unsigned int *)v45, &v51);
  *a1 = v47[0];
  v11 = *a4;
  v10 = a4[1];
  a1[2] = v10;
  a1[1] = v11;
  if (v10)
  {
    v12 = (unsigned int *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *a3;
  v15 = (unsigned int *)a4[1];
  v48 = *a4;
  v49 = v15;
  v50 = v14;
  if (v15)
  {
    v16 = v15 + 2;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::check_dst(a2, &v50, &v48);
  boost::detail::shared_count::~shared_count(&v49);
  switch(v18)
  {
    case 1:
      v44 = *a3;
      LODWORD(v46.__vftable) = v52;
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v47, (unsigned int *)&v46, &v44);
      v19 = v47[0];
      v20 = (unsigned int *)a4[1];
      v42 = *a4;
      v43 = v20;
      if (v20)
      {
        v21 = v20 + 2;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v45[0] = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::construction_adjustment((uint64_t)a1, v19, &v42, 1);
      boost::detail::shared_count::~shared_count(&v43);
      v41 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(v45);
      v23 = v45[0];
      v24 = 0x7FFFFFFFFFFFFFFELL;
      if (v45[0] == 0x8000000000000000)
        v24 = 0x8000000000000000;
      if (v45[0] != 0x7FFFFFFFFFFFFFFFLL)
        v23 = v24;
      if ((unint64_t)(v45[0] - 0x7FFFFFFFFFFFFFFELL) > 2)
        v23 = v45[0] % 86400000000;
      v46.__vftable = (std::logic_error_vtbl *)v23;
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v47, &v41, (uint64_t *)&v46);
      break;
    case 3:
      if (!a5)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v47);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"time given: ", 12);
        v33 = boost::gregorian::operator<<<char,std::char_traits<char>>(v32, (boost::gregorian *)&v52);
        LOBYTE(v45[0]) = 32;
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v45, 1);
        boost::posix_time::operator<<<char,std::char_traits<char>>(v34, a3);
        std::stringbuf::str();
        boost::local_time::time_label_invalid::time_label_invalid(&v46);
        boost::throw_exception<boost::local_time::time_label_invalid>(&v46);
      }
      goto LABEL_11;
    case 2:
      if (!a5)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v47);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"time given: ", 12);
        v36 = boost::gregorian::operator<<<char,std::char_traits<char>>(v35, (boost::gregorian *)&v52);
        LOBYTE(v45[0]) = 32;
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v45, 1);
        boost::posix_time::operator<<<char,std::char_traits<char>>(v37, a3);
        std::stringbuf::str();
        boost::local_time::ambiguous_result::ambiguous_result(&v46);
        boost::throw_exception<boost::local_time::ambiguous_result>(&v46);
      }
LABEL_11:
      LODWORD(v46.__vftable) = -2;
      v45[0] = 0x7FFFFFFFFFFFFFFELL;
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v47, (unsigned int *)&v46, v45);
      break;
    default:
      v40 = *a3;
      LODWORD(v46.__vftable) = v52;
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v47, (unsigned int *)&v46, &v40);
      v25 = v47[0];
      v26 = (unsigned int *)a4[1];
      v38 = *a4;
      v39 = v26;
      if (v26)
      {
        v27 = v26 + 2;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v45[0] = boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::construction_adjustment((uint64_t)a1, v25, &v38, 0);
      boost::detail::shared_count::~shared_count(&v39);
      v41 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(v45);
      v29 = v45[0];
      v30 = 0x7FFFFFFFFFFFFFFELL;
      if (v45[0] == 0x8000000000000000)
        v30 = 0x8000000000000000;
      if (v45[0] != 0x7FFFFFFFFFFFFFFFLL)
        v29 = v30;
      if ((unint64_t)(v45[0] - 0x7FFFFFFFFFFFFFFELL) > 2)
        v29 = v45[0] % 86400000000;
      v46.__vftable = (std::logic_error_vtbl *)v29;
      boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(v47, &v41, (uint64_t *)&v46);
      break;
  }
  *a1 = v47[0];
  return a1;
}

void sub_217F5EB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::logic_error a22,char a23)
{
  unsigned int **v23;

  std::logic_error::~logic_error(&a22);
  if (a21 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  boost::detail::shared_count::~shared_count(v23);
  _Unwind_Resume(a1);
}

uint64_t boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::check_dst(unsigned int a1, int64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  v27 = a1;
  v25 = 0;
  v26 = 0;
  if (!*a3)
  {
    boost::detail::shared_count::~shared_count(&v26);
    return 0;
  }
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3);
  boost::detail::shared_count::~shared_count(&v26);
  if (!v5)
    return 0;
  v6 = *a3;
  v7 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v27);
  v25 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 56))(v6, v7);
  v24 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v25);
  v8 = *a3;
  v9 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v27);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 56))(v8, v9);
  if ((unint64_t)(v10 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    v11 = v10 % 86400000000;
  }
  else
  {
    v11 = 0x7FFFFFFFFFFFFFFELL;
    if (v10 == 0x8000000000000000)
      v11 = 0x8000000000000000;
    if (v10 == 0x7FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v23 = v11;
  v13 = *a3;
  v14 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v27);
  v21 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 64))(v13, v14);
  v22 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(&v21);
  v15 = *a3;
  v16 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year(&v27);
  v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 64))(v15, v16);
  if ((unint64_t)(v17 - 0x7FFFFFFFFFFFFFFELL) > 2)
  {
    v18 = v17 % 86400000000;
  }
  else
  {
    v18 = 0x7FFFFFFFFFFFFFFELL;
    if (v17 == 0x8000000000000000)
      v18 = 0x8000000000000000;
    if (v17 == 0x7FFFFFFFFFFFFFFFLL)
      v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v20 = v18;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a3 + 80))(&v19);
  return boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::local_is_dst(&v27, a2, &v24, &v23, &v22, &v20, &v19);
}

void sub_217F5EE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  boost::detail::shared_count::~shared_count((unsigned int **)va);
  _Unwind_Resume(a1);
}

_QWORD *boost::posix_time::operator<<<char,std::char_traits<char>>(_QWORD *a1, int64_t *a2)
{
  const std::ios_base *v4;
  std::ios_base::fmtflags fmtflags;
  uint64_t rdbuf;
  _BOOL4 has_facet;
  const std::locale::facet *v8;
  std::ios_base *v9;
  std::ios_base::fmtflags v10;
  const std::locale::facet *v11;
  std::locale *p_loc;
  std::locale::facet *v13;
  uint64_t v14;
  std::ios_base *v15;
  std::locale *v16;
  std::locale *v17;
  std::ios_base *v18;
  std::ios_base::fmtflags v19;
  const std::locale::facet *v20;
  std::locale v22;
  std::locale __loc;
  std::locale v24;
  std::locale v25;

  v4 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  fmtflags = v4->__fmtflags_;
  rdbuf = (uint64_t)v4->__rdbuf_;
  std::ios_base::getloc(v4);
  has_facet = std::locale::has_facet(&v25, &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::id);
  std::locale::~locale(&v25);
  if (has_facet)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v8 = std::locale::use_facet(&v24, &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::id);
    v9 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v10 = v9[1].__fmtflags_;
    if (v10 == -1)
    {
      std::ios_base::getloc(v9);
      v11 = std::locale::use_facet(&v25, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v25);
      v9[1].__fmtflags_ = v10;
    }
    boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::put((uint64_t)v8, rdbuf, v9, (char)v10, a2);
    p_loc = &v24;
  }
  else
  {
    v13 = (std::locale::facet *)operator new();
    boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::time_facet((uint64_t)v13, 0);
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v14 = std::locale::id::__get(&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::id);
    std::locale::__install_ctor(&__loc, &v25, v13, v14);
    std::locale::~locale(&v25);
    v15 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    std::ios_base::getloc(v15);
    std::ios_base::imbue(v15, &__loc);
    std::locale::~locale(&v25);
    v16 = (std::locale *)v15->__rdbuf_;
    if (v16)
    {
      (*((void (**)(std::locale *, std::locale *))v16->__locale_ + 2))(v16, &__loc);
      v17 = v16 + 1;
      std::locale::locale(&v24, v17);
      std::locale::operator=(v17, &__loc);
      std::locale::~locale(&v24);
    }
    std::locale::~locale(&v22);
    v18 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v19 = v18[1].__fmtflags_;
    if (v19 == -1)
    {
      std::ios_base::getloc(v18);
      v20 = std::locale::use_facet(&v25, MEMORY[0x24BEDB350]);
      v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 32);
      std::locale::~locale(&v25);
      v18[1].__fmtflags_ = v19;
    }
    boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::put((uint64_t)v13, rdbuf, v18, (char)v19, a2);
    p_loc = &__loc;
  }
  std::locale::~locale(p_loc);
  v4->__fmtflags_ = fmtflags;
  return a1;
}

void sub_217F5F08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11, std::locale a12)
{
  uint64_t v12;
  int v13;

  std::locale::~locale(&a12);
  std::locale::~locale(&a10);
  *(_DWORD *)(v12 + 8) = v13;
  _Unwind_Resume(a1);
}

_QWORD *boost::gregorian::operator<<<char,std::char_traits<char>>(_QWORD *a1, boost::gregorian *a2)
{
  const std::ios_base *v4;
  std::ios_base::fmtflags fmtflags;
  boost::gregorian::date *rdbuf;
  _BOOL4 has_facet;
  const std::locale::facet *v8;
  const std::ios_base *v9;
  std::ios_base::fmtflags v10;
  const std::locale::facet *v11;
  std::locale *p_loc;
  std::locale::facet *v13;
  uint64_t v14;
  std::ios_base *v15;
  std::locale *v16;
  std::locale *v17;
  const std::ios_base *v18;
  std::ios_base::fmtflags v19;
  const std::locale::facet *v20;
  std::locale v22;
  std::locale __loc;
  std::locale v24;
  std::locale v25;

  v4 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  fmtflags = v4->__fmtflags_;
  rdbuf = (boost::gregorian::date *)v4->__rdbuf_;
  std::ios_base::getloc(v4);
  has_facet = std::locale::has_facet(&v25, &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::id);
  std::locale::~locale(&v25);
  if (has_facet)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v8 = std::locale::use_facet(&v24, &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::id);
    v9 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v10 = v9[1].__fmtflags_;
    if (v10 == -1)
    {
      std::ios_base::getloc(v9);
      v11 = std::locale::use_facet(&v25, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v25);
      v9[1].__fmtflags_ = v10;
    }
    boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::put((uint64_t)v8, rdbuf, (uint64_t)v9, (char)v10, a2);
    p_loc = &v24;
  }
  else
  {
    v13 = (std::locale::facet *)operator new();
    boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet((uint64_t)v13, 0);
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v14 = std::locale::id::__get(&boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::id);
    std::locale::__install_ctor(&__loc, &v25, v13, v14);
    std::locale::~locale(&v25);
    v15 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    std::ios_base::getloc(v15);
    std::ios_base::imbue(v15, &__loc);
    std::locale::~locale(&v25);
    v16 = (std::locale *)v15->__rdbuf_;
    if (v16)
    {
      (*((void (**)(std::locale *, std::locale *))v16->__locale_ + 2))(v16, &__loc);
      v17 = v16 + 1;
      std::locale::locale(&v24, v17);
      std::locale::operator=(v17, &__loc);
      std::locale::~locale(&v24);
    }
    std::locale::~locale(&v22);
    v18 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v19 = v18[1].__fmtflags_;
    if (v19 == -1)
    {
      std::ios_base::getloc(v18);
      v20 = std::locale::use_facet(&v25, MEMORY[0x24BEDB350]);
      v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 32);
      std::locale::~locale(&v25);
      v18[1].__fmtflags_ = v19;
    }
    boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::put((uint64_t)v13, rdbuf, (uint64_t)v18, (char)v19, a2);
    p_loc = &__loc;
  }
  std::locale::~locale(p_loc);
  v4->__fmtflags_ = fmtflags;
  return a1;
}

void sub_217F5F390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11, std::locale a12)
{
  uint64_t v12;
  int v13;

  std::locale::~locale(&a12);
  std::locale::~locale(&a10);
  *(_DWORD *)(v12 + 8) = v13;
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::local_time::ambiguous_result>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91CC00;
  v4 = &unk_24D91CC28;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F5F4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::local_time::time_label_invalid>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91CDA0;
  v4 = &unk_24D91CDC8;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F5F58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::local_time::local_date_time_base<boost::posix_time::ptime,boost::date_time::time_zone_base<boost::posix_time::ptime,char>>::construction_adjustment(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;

  v6 = a2;
  v10 = 0;
  v11 = a2;
  v9 = 0;
  v7 = *a3;
  boost::detail::shared_count::~shared_count(&v10);
  if (v7)
  {
    if (a4 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3))
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a3 + 80))(&v9);
      boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator-=(&v11, &v9);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a3 + 72))(&v9);
    boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator-=(&v11, &v9);
    return v11;
  }
  return v6;
}

uint64_t boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::local_is_dst(unsigned int *a1, int64_t *a2, unsigned int *a3, _QWORD *a4, unsigned int *a5, _QWORD *a6, _QWORD *a7)
{
  return boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::local_is_dst(a1, a2, a3, (int)(*a4 / 60000000) % 60 + 60 * ((int)*a4 / -694967296), a5, (int)(*a6 / 60000000) % 60 + 60 * ((int)*a6 / -694967296), *a7 / 60000000 % 60 + 60 * (*a7 / 3600000000));
}

uint64_t boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::local_is_dst(unsigned int *a1, int64_t *a2, unsigned int *a3, unsigned int a4, unsigned int *a5, unsigned int a6, uint64_t a7)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v7 = *a3;
  v8 = *a5;
  v9 = *a1;
  if (*a3 >= *a5)
  {
    if (v9 < v7 && v8 < v9)
      return 0;
    if (v7 < v9 || v9 < v8)
      return 1;
  }
  else
  {
    if (v7 < v9 && v9 < v8)
      return 1;
    if (v9 < v7 || v8 < v9)
      return 0;
  }
  if (v9 == v7)
    return boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::process_local_dst_start_day(a2, a4, a7);
  if (v9 == v8)
    return boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::process_local_dst_end_day(a2, a6, a7);
  return 3;
}

uint64_t boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::process_local_dst_start_day(int64_t *a1, unsigned int a2, uint64_t a3)
{
  int64_t v7;

  v7 = 60000000 * a2;
  if (boost::date_time::int_adapter<long long>::compare(a1, &v7) == -1)
    return 0;
  v7 = 60000000 * (a2 + a3);
  if (boost::date_time::int_adapter<long long>::compare(a1, &v7) == -1)
    return 3;
  else
    return 1;
}

uint64_t boost::date_time::dst_calculator<boost::gregorian::date,boost::posix_time::time_duration>::process_local_dst_end_day(int64_t *a1, unsigned int a2, int a3)
{
  int64_t v6;

  v6 = 60000000 * (int)(a2 - a3);
  if (boost::date_time::int_adapter<long long>::compare(a1, &v6) == -1)
    return 1;
  v6 = 60000000 * a2;
  return 2 * (boost::date_time::int_adapter<long long>::compare(a1, &v6) == -1);
}

uint64_t boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::put(uint64_t a1, uint64_t a2, std::ios_base *a3, uint64_t a4, int64_t *a5)
{
  int64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v13;
  size_t v14;
  size_t v15;
  std::locale::__imp *v16;
  char v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char *v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  char v32;
  std::string::size_type v33;
  std::string::size_type size;
  std::string *v35;
  std::string::size_type v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  std::string *v43;
  std::locale::__imp *v44;
  size_t v45;
  size_t v46;
  std::string *v47;
  std::string::size_type v48;
  char *v49;
  std::string *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  std::string *v55;
  size_t v56;
  std::string::size_type v57;
  std::string *v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unsigned __int8 v63;
  std::string::size_type v64;
  std::string *v65;
  std::string *v66;
  std::string::size_type v67;
  std::string::size_type v68;
  std::string *v69;
  std::string::size_type v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  std::string *v74;
  std::string *v75;
  std::string *v76;
  std::string::size_type v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  std::string *v81;
  char *v82;
  std::string *v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  char *v87;
  int v88;
  std::string *v89;
  int64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  size_t v94;
  char *v95;
  uint64_t v96;
  std::string *v97;
  std::string::size_type v98;
  char *v99;
  std::string *v100;
  std::string::size_type v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  std::string *v105;
  char *v106;
  std::string *v107;
  int64_t v108;
  int64_t v109;
  int64_t v110;
  char *v111;
  int v112;
  std::string *v113;
  int64_t v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  std::locale::__imp *v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  char *v123;
  unint64_t v124;
  std::string *v125;
  std::string::size_type v126;
  char *v127;
  std::string *v128;
  std::string::size_type v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  std::string *v133;
  char *v134;
  std::string *v135;
  int64_t v136;
  int64_t v137;
  int64_t v138;
  char *v139;
  int v140;
  std::string *v141;
  int64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  const std::locale::facet *v147;
  std::string::value_type v148;
  void **v149;
  std::string::size_type v150;
  size_t v151;
  char v152;
  std::string::size_type v153;
  std::string *v154;
  std::string *v155;
  std::string::size_type v156;
  char *v157;
  std::string *v158;
  std::string::size_type v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  std::string *v163;
  char *v164;
  std::string *v165;
  int64_t v166;
  int64_t v167;
  int64_t v168;
  const std::ios_base *v169;
  const void *v170;
  int64_t v171;
  int64_t v172;
  int64_t v173;
  char *v174;
  int v175;
  std::string *v176;
  int64_t v177;
  char *v178;
  char *v179;
  char *v180;
  int v181;
  std::string *v182;
  int64_t v183;
  char *v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  std::locale::__imp *v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  size_t v192;
  char *v193;
  unint64_t v194;
  std::string *v195;
  std::string::size_type v196;
  char *v197;
  std::string *v198;
  std::string::size_type v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  std::string *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  const std::locale::facet *v207;
  std::string::value_type v208;
  void **v209;
  std::string::size_type v210;
  size_t v211;
  char v212;
  std::string::size_type v213;
  std::string *v214;
  std::string *v215;
  std::string::size_type v216;
  char *v217;
  std::string *v218;
  std::string::size_type v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  std::string *v223;
  size_t v224;
  std::string::size_type v225;
  std::string *v226;
  std::string *v227;
  std::string::size_type v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int64_t v233;
  int64x2_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v238;
  std::ios_base *v239;
  int64_t *v240;
  std::string v241;
  std::locale v242[3];
  __int128 v243;
  __int128 v244;
  std::string v245;
  void *__p[2];
  std::locale::__imp *v247;
  __int128 v248;
  std::locale::__imp *locale;
  std::string v250;

  v7 = *a5;
  if ((unint64_t)(*a5 - 0x7FFFFFFFFFFFFFFELL) <= 2)
  {
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
      v8 = 2;
    else
      v8 = 5;
    if (v7 == 0x7FFFFFFFFFFFFFFELL)
      v9 = 0;
    else
      v9 = v8;
    if (v7 == 0x8000000000000000)
      v10 = 1;
    else
      v10 = v9;
    return (*(uint64_t (**)(uint64_t, uint64_t, std::ios_base *, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a3, a4, v10);
  }
  v238 = a4;
  if (*(char *)(a1 + 359) < 0)
    std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)(a1 + 336), *(_QWORD *)(a1 + 344));
  else
    v250 = *(std::string *)(a1 + 336);
  v242[0].__locale_ = 0;
  v240 = a5;
  v13 = boost::date_time::int_adapter<long long>::compare(a5, (int64_t *)v242);
  v14 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only);
  v15 = v14;
  v16 = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v14];
  if (v13 == -1)
  {
    v30 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign;
    v31 = strlen((const char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign);
    v32 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    size = v250.__r_.__value_.__l.__size_;
    v33 = v250.__r_.__value_.__r.__words[0];
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v250;
    else
      v35 = (std::string *)v250.__r_.__value_.__r.__words[0];
    v36 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    else
      v37 = v250.__r_.__value_.__l.__size_;
    if (v37 && v15)
    {
      v38 = (std::string *)((char *)v35 + v37);
      v39 = v37 - 1;
      while (1)
      {
        v40 = 0;
        while (v35->__r_.__value_.__s.__data_[v40] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v40])
        {
          v41 = v40 + 1;
          if (v39 != v40)
          {
            v27 = v15 - 1 == v40++;
            if (!v27)
              continue;
          }
          v42 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v41];
          v43 = (std::string *)((char *)v35 + v41);
          goto LABEL_51;
        }
        v42 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v40];
        v43 = (std::string *)((char *)v35 + v40);
LABEL_51:
        if (v42 == (char *)v16)
          break;
        v35 = (std::string *)((char *)v35 + 1);
        --v39;
        if (v35 == v38)
          goto LABEL_79;
      }
      if (v35 != v43)
      {
        v242[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only;
        v242[1].__locale_ = v16;
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v250, (uint64_t *)v242, (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign, (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign+ v31, v35, v43, (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign, (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign+ v31);
        v30 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::negative_sign;
        v36 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
        size = v250.__r_.__value_.__l.__size_;
        v33 = v250.__r_.__value_.__r.__words[0];
        v32 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_79:
    v44 = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always;
    v45 = strlen((const char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always);
    v56 = strlen(v30);
    if (v32 >= 0)
      v47 = &v250;
    else
      v47 = (std::string *)v33;
    if (v32 >= 0)
      v57 = v36;
    else
      v57 = size;
    if (!v57 || !v45)
      goto LABEL_100;
    v49 = &v30[v56];
    v58 = (std::string *)((char *)v47 + v57);
    v59 = v57 - 1;
    while (1)
    {
      v60 = 0;
      while (v47->__r_.__value_.__s.__data_[v60] == *((unsigned __int8 *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
                                                                      + v60))
      {
        v61 = v60 + 1;
        if (v59 != v60)
        {
          v27 = v45 - 1 == v60++;
          if (!v27)
            continue;
        }
        v62 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
            + v61;
        v55 = (std::string *)((char *)v47 + v61);
        goto LABEL_95;
      }
      v62 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
          + v60;
      v55 = (std::string *)((char *)v47 + v60);
LABEL_95:
      if (v62 == (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
                + v45)
        break;
      v47 = (std::string *)((char *)v47 + 1);
      --v59;
      if (v47 == v58)
        goto LABEL_100;
    }
    if (v47 == v55)
      goto LABEL_100;
  }
  else
  {
    v17 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    v19 = v250.__r_.__value_.__l.__size_;
    v18 = v250.__r_.__value_.__r.__words[0];
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v250;
    else
      v20 = (std::string *)v250.__r_.__value_.__r.__words[0];
    v21 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    else
      v22 = v250.__r_.__value_.__l.__size_;
    if (v22 && v14)
    {
      v23 = (std::string *)((char *)v20 + v22);
      v24 = v22 - 1;
      while (1)
      {
        v25 = 0;
        while (v20->__r_.__value_.__s.__data_[v25] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v25])
        {
          v26 = v25 + 1;
          if (v24 != v25)
          {
            v27 = v14 - 1 == v25++;
            if (!v27)
              continue;
          }
          v28 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v26];
          v29 = (uint64_t)v20 + v26;
          goto LABEL_32;
        }
        v28 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v25];
        v29 = (uint64_t)v20 + v25;
LABEL_32:
        if (v28 == (char *)v16)
          break;
        v20 = (std::string *)((char *)v20 + 1);
        --v24;
        if (v20 == v23)
          goto LABEL_56;
      }
      if (v20 != (std::string *)v29)
      {
        v242[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only;
        v242[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only[v14];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v250, (uint64_t *)v242, v20, v29);
        v21 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
        v19 = v250.__r_.__value_.__l.__size_;
        v18 = v250.__r_.__value_.__r.__words[0];
        v17 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_56:
    v44 = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always;
    v45 = strlen((const char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always);
    v30 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::positive_sign;
    v46 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::positive_sign);
    if (v17 >= 0)
      v47 = &v250;
    else
      v47 = (std::string *)v18;
    if (v17 >= 0)
      v48 = v21;
    else
      v48 = v19;
    if (!v48 || !v45)
      goto LABEL_100;
    v49 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::positive_sign[v46];
    v50 = (std::string *)((char *)v47 + v48);
    v51 = v48 - 1;
    while (1)
    {
      v52 = 0;
      while (v47->__r_.__value_.__s.__data_[v52] == *((unsigned __int8 *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
                                                                      + v52))
      {
        v53 = v52 + 1;
        if (v51 != v52)
        {
          v27 = v45 - 1 == v52++;
          if (!v27)
            continue;
        }
        v54 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
            + v53;
        v55 = (std::string *)((char *)v47 + v53);
        goto LABEL_72;
      }
      v54 = (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
          + v52;
      v55 = (std::string *)((char *)v47 + v52);
LABEL_72:
      if (v54 == (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_always
                + v45)
        break;
      v47 = (std::string *)((char *)v47 + 1);
      --v51;
      if (v47 == v50)
        goto LABEL_100;
    }
    if (v47 == v55)
      goto LABEL_100;
  }
  v242[0].__locale_ = v44;
  v242[1].__locale_ = (std::locale::__imp *)((char *)v44 + v45);
  boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v250, (uint64_t *)v242, v30, v49, v47, v55, v30, v49);
LABEL_100:
  v63 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
  v64 = v250.__r_.__value_.__l.__size_;
  v65 = (std::string *)v250.__r_.__value_.__r.__words[0];
  if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = &v250;
  else
    v66 = (std::string *)v250.__r_.__value_.__r.__words[0];
  v67 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
  if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
  else
    v68 = v250.__r_.__value_.__l.__size_;
  if (v68)
  {
    v69 = (std::string *)((char *)v66 + v68);
    v70 = v68 - 1;
    while (1)
    {
      v71 = 0;
      while (v66->__r_.__value_.__s.__data_[v71] == boost::date_time::time_formats<char>::full_24_hour_time_format[v71])
      {
        v72 = v71 + 1;
        if (v70 != v71)
        {
          v27 = v71++ == 1;
          if (!v27)
            continue;
        }
        v73 = &boost::date_time::time_formats<char>::full_24_hour_time_format[v72];
        v74 = (std::string *)((char *)v66 + v72);
        goto LABEL_115;
      }
      v73 = &boost::date_time::time_formats<char>::full_24_hour_time_format[v71];
      v74 = (std::string *)((char *)v66 + v71);
LABEL_115:
      if (v73 == (char *)&unk_2186C9E78)
        break;
      v66 = (std::string *)((char *)v66 + 1);
      --v70;
      if (v66 == v69)
        goto LABEL_120;
    }
    if (v66 != v74)
    {
      v242[0].__locale_ = (std::locale::__imp *)boost::date_time::time_formats<char>::full_24_hour_time_format;
      v242[1].__locale_ = (std::locale::__imp *)&unk_2186C9E78;
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v250, (uint64_t *)v242, "%H:%M:%S", "", v66, v74, "%H:%M:%S", "");
      v67 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
      v64 = v250.__r_.__value_.__l.__size_;
      v65 = (std::string *)v250.__r_.__value_.__r.__words[0];
      v63 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    }
  }
LABEL_120:
  if ((v63 & 0x80u) == 0)
    v75 = &v250;
  else
    v75 = v65;
  if ((v63 & 0x80u) != 0)
    v67 = v64;
  if (v67)
  {
    v76 = (std::string *)((char *)v75 + v67);
    v77 = v67 - 1;
    while (1)
    {
      v78 = 0;
      while (v75->__r_.__value_.__s.__data_[v78] == boost::date_time::time_formats<char>::short_24_hour_time_format[v78])
      {
        v79 = v78 + 1;
        if (v77 != v78)
        {
          v27 = v78++ == 1;
          if (!v27)
            continue;
        }
        v80 = &boost::date_time::time_formats<char>::short_24_hour_time_format[v79];
        v81 = (std::string *)((char *)v75 + v79);
        goto LABEL_134;
      }
      v80 = &boost::date_time::time_formats<char>::short_24_hour_time_format[v78];
      v81 = (std::string *)((char *)v75 + v78);
LABEL_134:
      if (v80 == (char *)&unk_2186C9E7C)
        break;
      v75 = (std::string *)((char *)v75 + 1);
      --v77;
      if (v75 == v76)
        goto LABEL_139;
    }
    if (v75 != v81)
    {
      v242[0].__locale_ = (std::locale::__imp *)boost::date_time::time_formats<char>::short_24_hour_time_format;
      v242[1].__locale_ = (std::locale::__imp *)&unk_2186C9E7C;
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&v250, (uint64_t *)v242, "%H:%M", "", v75, v81, "%H:%M", "");
      v63 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
      v65 = (std::string *)v250.__r_.__value_.__r.__words[0];
    }
  }
LABEL_139:
  v239 = a3;
  v248 = 0uLL;
  locale = 0;
  v82 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0];
  if ((v63 & 0x80u) == 0)
    v83 = &v250;
  else
    v83 = v65;
  v84 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0]);
  if (v84)
  {
    v85 = v84;
    v86 = v250.__r_.__value_.__l.__size_;
    if ((v63 & 0x80u) == 0)
      v86 = v63;
    if (v86 >= v84)
    {
      v87 = (char *)v83 + v86;
      v88 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0];
      v89 = v83;
      do
      {
        v90 = v86 - v85;
        if (v90 == -1)
          break;
        v91 = (char *)memchr(v89, v88, v90 + 1);
        if (!v91)
          break;
        v92 = v91;
        if (!memcmp(v91, v82, v85))
        {
          if (v92 == v87 || v92 - (char *)v83 == -1)
            break;
          goto LABEL_154;
        }
        v89 = (std::string *)(v92 + 1);
        v86 = v87 - (v92 + 1);
      }
      while (v86 >= v85);
    }
  }
  else
  {
LABEL_154:
    if (*v240 / 3600000000 >= 0)
      v93 = *v240 / 3600000000;
    else
      v93 = *v240 / -3600000000;
    boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v93, 2);
    if (SHIBYTE(locale) < 0)
      operator delete((void *)v248);
    v248 = *(_OWORD *)&v242[0].__locale_;
    locale = v242[2].__locale_;
    v94 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0]);
    if (SHIBYTE(v242[2].__locale_) >= 0)
      v95 = (char *)&v248;
    else
      v95 = (char *)v248;
    if (SHIBYTE(v242[2].__locale_) >= 0)
      v96 = HIBYTE(locale);
    else
      v96 = *((_QWORD *)&v248 + 1);
    v63 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    v65 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v97 = &v250;
    else
      v97 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v98 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    else
      v98 = v250.__r_.__value_.__l.__size_;
    if (v98 && v94)
    {
      v99 = &v95[v96];
      v100 = (std::string *)((char *)v97 + v98);
      v101 = v98 - 1;
      while (1)
      {
        v102 = 0;
        while (v97->__r_.__value_.__s.__data_[v102] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0][v102])
        {
          v103 = v102 + 1;
          if (v101 != v102)
          {
            v27 = v94 - 1 == v102++;
            if (!v27)
              continue;
          }
          v104 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0][v103];
          v105 = (std::string *)((char *)v97 + v103);
          goto LABEL_181;
        }
        v104 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0][v102];
        v105 = (std::string *)((char *)v97 + v102);
LABEL_181:
        if (v104 == &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0][v94])
          break;
        v97 = (std::string *)((char *)v97 + 1);
        --v101;
        if (v97 == v100)
          goto LABEL_186;
      }
      if (v97 != v105)
      {
        v242[0] = (std::locale)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0];
        v242[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::unrestricted_hours_format[0][v94];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v250, (uint64_t *)v242, v95, v99, v97, v105, v95, v99);
        v63 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
        v65 = (std::string *)v250.__r_.__value_.__r.__words[0];
      }
    }
  }
LABEL_186:
  v106 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::hours_format[0];
  if ((v63 & 0x80u) == 0)
    v107 = &v250;
  else
    v107 = v65;
  v108 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::hours_format[0]);
  if (v108)
  {
    v109 = v108;
    v110 = v250.__r_.__value_.__l.__size_;
    if ((v63 & 0x80u) == 0)
      v110 = v63;
    if (v110 >= v108)
    {
      v111 = (char *)v107 + v110;
      v112 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::hours_format[0];
      v113 = v107;
      do
      {
        v114 = v110 - v109;
        if (v114 == -1)
          break;
        v115 = (char *)memchr(v113, v112, v114 + 1);
        if (!v115)
          break;
        v116 = v115;
        if (!memcmp(v115, v106, v109))
        {
          if (v116 == v111 || v116 - (char *)v107 == -1)
            break;
          goto LABEL_201;
        }
        v113 = (std::string *)(v116 + 1);
        v110 = v111 - (v116 + 1);
      }
      while (v110 >= v109);
    }
  }
  else
  {
LABEL_201:
    v117 = HIBYTE(locale);
    LOBYTE(v118) = HIBYTE(locale);
    v119 = (std::locale::__imp *)*((_QWORD *)&v248 + 1);
    if (SHIBYTE(locale) >= 0)
      v120 = HIBYTE(locale);
    else
      v120 = *((_QWORD *)&v248 + 1);
    if (!v120)
    {
      if (*v240 / 3600000000 >= 0)
        v121 = *v240 / 3600000000;
      else
        v121 = *v240 / -3600000000;
      boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v121, 2);
      if (SHIBYTE(locale) < 0)
        operator delete((void *)v248);
      locale = v242[2].__locale_;
      v248 = *(_OWORD *)&v242[0].__locale_;
      v106 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::hours_format[0];
      v117 = (unint64_t)v242[2].__locale_ >> 56;
      v119 = v242[1].__locale_;
      v63 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
      v65 = (std::string *)v250.__r_.__value_.__r.__words[0];
      v118 = (unint64_t)v242[2].__locale_ >> 56;
    }
    v122 = strlen(v106);
    if ((v118 & 0x80u) == 0)
      v123 = (char *)&v248;
    else
      v123 = (char *)v248;
    if ((v118 & 0x80u) == 0)
      v124 = v117;
    else
      v124 = (unint64_t)v119;
    if ((v63 & 0x80u) == 0)
      v125 = &v250;
    else
      v125 = v65;
    if ((v63 & 0x80u) == 0)
      v126 = v63;
    else
      v126 = v250.__r_.__value_.__l.__size_;
    if (v126 && v122)
    {
      v127 = &v123[v124];
      v128 = (std::string *)((char *)v125 + v126);
      v129 = v126 - 1;
      while (1)
      {
        v130 = 0;
        while (v125->__r_.__value_.__s.__data_[v130] == v106[v130])
        {
          v131 = v130 + 1;
          if (v129 != v130)
          {
            v27 = v122 - 1 == v130++;
            if (!v27)
              continue;
          }
          v132 = &v106[v131];
          v133 = (std::string *)((char *)v125 + v131);
          goto LABEL_233;
        }
        v132 = &v106[v130];
        v133 = (std::string *)((char *)v125 + v130);
LABEL_233:
        if (v132 == &v106[v122])
          break;
        v125 = (std::string *)((char *)v125 + 1);
        --v129;
        if (v125 == v128)
          goto LABEL_238;
      }
      if (v125 != v133)
      {
        v242[0].__locale_ = (std::locale::__imp *)v106;
        v242[1].__locale_ = (std::locale::__imp *)&v106[v122];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v250, (uint64_t *)v242, v123, v127, v125, v133, v123, v127);
        v63 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
        v65 = (std::string *)v250.__r_.__value_.__r.__words[0];
      }
    }
  }
LABEL_238:
  __p[0] = 0;
  __p[1] = 0;
  v247 = 0;
  v134 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
  if ((v63 & 0x80u) == 0)
    v135 = &v250;
  else
    v135 = v65;
  v136 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format);
  if (v136)
  {
    v137 = v136;
    v138 = v250.__r_.__value_.__l.__size_;
    if ((v63 & 0x80u) == 0)
      v138 = v63;
    if (v138 >= v136)
    {
      v139 = (char *)v135 + v138;
      v140 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
      v141 = v135;
      do
      {
        v142 = v138 - v137;
        if (v142 == -1)
          break;
        v143 = (char *)memchr(v141, v140, v142 + 1);
        if (!v143)
          break;
        v144 = v143;
        if (!memcmp(v143, v134, v137))
        {
          if (v144 == v139 || v144 - (char *)v135 == -1)
            break;
          goto LABEL_253;
        }
        v141 = (std::string *)(v144 + 1);
        v138 = v139 - (v144 + 1);
      }
      while (v138 >= v137);
    }
  }
  else
  {
LABEL_253:
    v145 = *v240 % 1000000;
    if (v145 >= 0)
      v146 = *v240 % 1000000;
    else
      v146 = -v145;
    boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v146, 6);
    if (SHIBYTE(v247) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)&v242[0].__locale_;
    v247 = v242[2].__locale_;
    std::ios_base::getloc(v239);
    v147 = std::locale::use_facet(v242, MEMORY[0x24BEDB588]);
    v148 = ((uint64_t (*)(const std::locale::facet *))v147->__vftable[1].~facet)(v147);
    std::locale::~locale(v242);
    std::string::basic_string[abi:ne180100]<0>(&v245, (char *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_format);
    std::string::push_back(&v245, v148);
    if (SHIBYTE(v247) >= 0)
      v149 = __p;
    else
      v149 = (void **)__p[0];
    if (SHIBYTE(v247) >= 0)
      v150 = HIBYTE(v247);
    else
      v150 = (std::string::size_type)__p[1];
    std::string::append(&v245, (const std::string::value_type *)v149, v150);
    v151 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format);
    v152 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
    v153 = v245.__r_.__value_.__l.__size_;
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v154 = &v245;
    else
      v154 = (std::string *)v245.__r_.__value_.__r.__words[0];
    if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v153 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v155 = &v250;
    else
      v155 = (std::string *)v250.__r_.__value_.__r.__words[0];
    if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v156 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    else
      v156 = v250.__r_.__value_.__l.__size_;
    if (v156 && v151)
    {
      v157 = (char *)v154 + v153;
      v158 = (std::string *)((char *)v155 + v156);
      v159 = v156 - 1;
      while (1)
      {
        v160 = 0;
        while (v155->__r_.__value_.__s.__data_[v160] == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v160])
        {
          v161 = v160 + 1;
          if (v159 != v160)
          {
            v27 = v151 - 1 == v160++;
            if (!v27)
              continue;
          }
          v162 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v161];
          v163 = (std::string *)((char *)v155 + v161);
          goto LABEL_285;
        }
        v162 = &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v160];
        v163 = (std::string *)((char *)v155 + v160);
LABEL_285:
        if (v162 == &boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v151])
          break;
        v155 = (std::string *)((char *)v155 + 1);
        --v159;
        if (v155 == v158)
          goto LABEL_290;
      }
      if (v155 != v163)
      {
        v242[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format;
        v242[1].__locale_ = (std::locale::__imp *)&boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::seconds_with_fractional_seconds_format[v151];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v250, (uint64_t *)v242, (char *)v154, v157, v155, v163, (char *)v154, v157);
        v152 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_290:
    if (v152 < 0)
      operator delete(v245.__r_.__value_.__l.__data_);
    v63 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
    v65 = (std::string *)v250.__r_.__value_.__r.__words[0];
  }
  v164 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
  if ((v63 & 0x80u) == 0)
    v165 = &v250;
  else
    v165 = v65;
  v166 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format);
  if (v166)
  {
    v167 = v166;
    v168 = v250.__r_.__value_.__l.__size_;
    if ((v63 & 0x80u) == 0)
      v168 = v63;
    if (v168 >= v166)
    {
      v180 = (char *)v165 + v168;
      v181 = *boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
      v182 = v165;
      do
      {
        v183 = v168 - v167;
        if (v183 == -1)
          break;
        v184 = (char *)memchr(v182, v181, v183 + 1);
        if (!v184)
          break;
        v185 = v184;
        if (!memcmp(v184, v164, v167))
        {
          if (v185 == v180 || v185 - (char *)v165 == -1)
            break;
          goto LABEL_321;
        }
        v182 = (std::string *)(v185 + 1);
        v168 = v180 - (v185 + 1);
      }
      while (v168 >= v167);
    }
    v169 = v239;
  }
  else
  {
LABEL_321:
    v186 = HIBYTE(v247);
    LOBYTE(v187) = HIBYTE(v247);
    v188 = (std::locale::__imp *)__p[1];
    if (SHIBYTE(v247) >= 0)
      v189 = (void *)HIBYTE(v247);
    else
      v189 = __p[1];
    if (!v189)
    {
      v190 = *v240 % 1000000;
      if (v190 >= 0)
        v191 = *v240 % 1000000;
      else
        v191 = -v190;
      boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v191, 6);
      if (SHIBYTE(v247) < 0)
        operator delete(__p[0]);
      v247 = v242[2].__locale_;
      *(_OWORD *)__p = *(_OWORD *)&v242[0].__locale_;
      v164 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_format;
      v186 = (unint64_t)v242[2].__locale_ >> 56;
      v188 = v242[1].__locale_;
      v63 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
      v65 = (std::string *)v250.__r_.__value_.__r.__words[0];
      v187 = (unint64_t)v242[2].__locale_ >> 56;
    }
    v192 = strlen(v164);
    if ((v187 & 0x80u) == 0)
      v193 = (char *)__p;
    else
      v193 = (char *)__p[0];
    if ((v187 & 0x80u) == 0)
      v194 = v186;
    else
      v194 = (unint64_t)v188;
    if ((v63 & 0x80u) == 0)
      v195 = &v250;
    else
      v195 = v65;
    if ((v63 & 0x80u) == 0)
      v196 = v63;
    else
      v196 = v250.__r_.__value_.__l.__size_;
    v169 = v239;
    if (v196 && v192)
    {
      v197 = &v193[v194];
      v198 = (std::string *)((char *)v195 + v196);
      v199 = v196 - 1;
      while (1)
      {
        v200 = 0;
        while (v195->__r_.__value_.__s.__data_[v200] == v164[v200])
        {
          v201 = v200 + 1;
          if (v199 != v200)
          {
            v27 = v192 - 1 == v200++;
            if (!v27)
              continue;
          }
          v202 = &v164[v201];
          v203 = (std::string *)((char *)v195 + v201);
          goto LABEL_353;
        }
        v202 = &v164[v200];
        v203 = (std::string *)((char *)v195 + v200);
LABEL_353:
        if (v202 == &v164[v192])
          break;
        v195 = (std::string *)((char *)v195 + 1);
        --v199;
        if (v195 == v198)
          goto LABEL_301;
      }
      if (v195 != v203)
      {
        v242[0].__locale_ = (std::locale::__imp *)v164;
        v242[1].__locale_ = (std::locale::__imp *)&v164[v192];
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v250, (uint64_t *)v242, v193, v197, v195, v203, v193, v197);
        v63 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
        v65 = (std::string *)v250.__r_.__value_.__r.__words[0];
      }
    }
  }
LABEL_301:
  v170 = (const void *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
  if ((v63 & 0x80u) == 0)
    v65 = &v250;
  v171 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
  if (v171)
  {
    v172 = v171;
    v173 = v250.__r_.__value_.__l.__size_;
    if ((v63 & 0x80u) == 0)
      v173 = v63;
    if (v173 >= v171)
    {
      v174 = (char *)v65 + v173;
      v175 = (char)*boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
      v176 = v65;
      do
      {
        v177 = v173 - v172;
        if (v177 == -1)
          break;
        v178 = (char *)memchr(v176, v175, v177 + 1);
        if (!v178)
          break;
        v179 = v178;
        if (!memcmp(v178, v170, v172))
        {
          if (v179 == v174 || v179 - (char *)v65 == -1)
            break;
          goto LABEL_360;
        }
        v176 = (std::string *)(v179 + 1);
        v173 = v174 - (v179 + 1);
      }
      while (v173 >= v172);
    }
  }
  else
  {
LABEL_360:
    v204 = *v240 % 1000000;
    if (v204)
    {
      if (v204 >= 0)
        v205 = *v240 % 1000000;
      else
        v205 = -v204;
      boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(v205, 6);
    }
    else
    {
      memset(v242, 0, sizeof(v242));
    }
    if (SHIBYTE(v247) < 0)
      operator delete(__p[0]);
    v247 = v242[2].__locale_;
    *(_OWORD *)__p = *(_OWORD *)&v242[0].__locale_;
    v206 = (unint64_t)v242[2].__locale_ >> 56;
    if (SHIBYTE(v242[2].__locale_) < 0)
      v206 = (unint64_t)v242[1].__locale_;
    if (v206)
    {
      std::ios_base::getloc(v169);
      v207 = std::locale::use_facet(v242, MEMORY[0x24BEDB588]);
      v208 = ((uint64_t (*)(const std::locale::facet *))v207->__vftable[1].~facet)(v207);
      std::locale::~locale(v242);
      memset(&v245, 0, sizeof(v245));
      std::string::push_back(&v245, v208);
      if (SHIBYTE(v247) >= 0)
        v209 = __p;
      else
        v209 = (void **)__p[0];
      if (SHIBYTE(v247) >= 0)
        v210 = HIBYTE(v247);
      else
        v210 = (std::string::size_type)__p[1];
      std::string::append(&v245, (const std::string::value_type *)v209, v210);
      v211 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
      v212 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
      v213 = v245.__r_.__value_.__l.__size_;
      if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v214 = &v245;
      else
        v214 = (std::string *)v245.__r_.__value_.__r.__words[0];
      if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v213 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
      if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v215 = &v250;
      else
        v215 = (std::string *)v250.__r_.__value_.__r.__words[0];
      if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v216 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
      else
        v216 = v250.__r_.__value_.__l.__size_;
      if (v216 && v211)
      {
        v217 = (char *)v214 + v213;
        v218 = (std::string *)((char *)v215 + v216);
        v219 = v216 - 1;
        while (1)
        {
          v220 = 0;
          while (v215->__r_.__value_.__s.__data_[v220] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                                                               + v220))
          {
            v221 = v220 + 1;
            if (v219 != v220)
            {
              v27 = v211 - 1 == v220++;
              if (!v27)
                continue;
            }
            v222 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                 + v221;
            v223 = (std::string *)((char *)v215 + v221);
            goto LABEL_398;
          }
          v222 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
               + v220;
          v223 = (std::string *)((char *)v215 + v220);
LABEL_398:
          if (v222 == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                     + v211)
            break;
          v215 = (std::string *)((char *)v215 + 1);
          --v219;
          if (v215 == v218)
            goto LABEL_421;
        }
        if (v215 != v223)
        {
          v242[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
          v242[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                   + v211);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>((uint64_t)&v250, (uint64_t *)v242, (char *)v214, v217, v215, v223, (char *)v214, v217);
          v212 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_421:
      if (v212 < 0)
        operator delete(v245.__r_.__value_.__l.__data_);
    }
    else
    {
      v224 = strlen(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format);
      v225 = v250.__r_.__value_.__l.__size_;
      if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v226 = &v250;
      else
        v226 = (std::string *)v250.__r_.__value_.__r.__words[0];
      if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v225 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
      if (v225 && v224)
      {
        v227 = (std::string *)((char *)v226 + v225);
        v228 = v225 - 1;
        while (1)
        {
          v229 = 0;
          while (v226->__r_.__value_.__s.__data_[v229] == *(unsigned __int8 *)(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                                                               + v229))
          {
            v230 = v229 + 1;
            if (v228 != v229)
            {
              v27 = v224 - 1 == v229++;
              if (!v27)
                continue;
            }
            v231 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                 + v230;
            v232 = (uint64_t)v226 + v230;
            goto LABEL_416;
          }
          v231 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
               + v229;
          v232 = (uint64_t)v226 + v229;
LABEL_416:
          if (v231 == boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                     + v224)
            break;
          v226 = (std::string *)((char *)v226 + 1);
          --v228;
          if (v226 == v227)
            goto LABEL_425;
        }
        if (v226 != (std::string *)v232)
        {
          v242[0].__locale_ = (std::locale::__imp *)boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format;
          v242[1].__locale_ = (std::locale::__imp *)(boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::fractional_seconds_or_none_format
                                                   + v224);
          boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>((uint64_t)&v250, (uint64_t *)v242, v226, v232);
        }
      }
    }
  }
LABEL_425:
  *(_OWORD *)&v242[1].__locale_ = 0u;
  v243 = 0u;
  v244 = 0u;
  v233 = *v240;
  v234.i64[0] = *v240 / 60000000 % 60;
  v234.i64[1] = *v240 / 3600000000;
  *(int32x2_t *)((char *)&v242[0].__locale_ + 4) = vmovn_s64(vabsq_s64(v234));
  v235 = v233 / 1000000 % 60;
  if (v235 < 0)
    v235 = -v235;
  LODWORD(v242[0].__locale_) = v235;
  DWORD2(v243) = -1;
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v241, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
  else
    v241 = v250;
  v236 = (*(uint64_t (**)(uint64_t, uint64_t, const std::ios_base *, _QWORD, std::locale *, std::string *))(*(_QWORD *)a1 + 48))(a1, a2, v169, v238, v242, &v241);
  if (SHIBYTE(v241.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v241.__r_.__value_.__l.__data_);
  if (SHIBYTE(v247) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(locale) < 0)
    operator delete((void *)v248);
  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v250.__r_.__value_.__l.__data_);
  return v236;
}

void sub_217F60BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::locale a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 121) < 0)
    operator delete(*(void **)(v38 - 144));
  if (*(char *)(v38 - 89) < 0)
    operator delete(*(void **)(v38 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a1;
    v5 = a1[1];
    if (*a1 == v5)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        v6 = 0;
        do
        {
          if (*(unsigned __int8 *)(v3 + v6) != *(unsigned __int8 *)(v4 + v6))
            break;
          if (++v6 + v3 == a3)
            break;
        }
        while (v6 + v4 != v5);
        if (v4 + v6 == v5)
          break;
        if (++v3 == a3)
          return a3;
      }
    }
  }
  return v3;
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>(uint64_t a1, uint64_t *a2, char *a3, char *a4, _BYTE *a5, _BYTE *a6, char *a7, char *a8)
{
  _BYTE *v8;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v15;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  std::string::value_type *v32;
  char *v33;
  std::string::value_type *v34;
  std::string::size_type v35;
  int64x2_t v37;
  __int128 v38;
  __int128 v39;
  char v40;

  v8 = a6;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  LODWORD(v10) = *(char *)(a1 + 23);
  v11 = *(_BYTE **)a1;
  if ((int)v10 >= 0)
    v12 = (_BYTE *)a1;
  else
    v12 = *(_BYTE **)a1;
  if (a5 == a6)
  {
    v19 = v12;
  }
  else
  {
    v15 = a5;
    v19 = v12;
    v20 = v12;
    do
    {
      v12 = v8;
      v19 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v20, v15);
      v21 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
      if ((_QWORD)v38 == v37.i64[1])
        v22 = 0;
      else
        v22 = *(_QWORD *)v21 + (((_WORD)v39 + WORD4(v39)) & 0xFFF);
      std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(&v37, v21, v22, a7, a8, a8 - a7);
      v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0)
        v24 = a1;
      else
        v24 = *(_QWORD *)a1;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a1 + 8);
      v15 = (_BYTE *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, (uint64_t)v12, v24 + v23);
      v8 = v25;
      v20 = v12;
      a7 = a3;
      a8 = a4;
    }
    while (v15 != v25);
    LOBYTE(v10) = *(_BYTE *)(a1 + 23);
    v11 = *(_BYTE **)a1;
  }
  v10 = v10;
  if ((v10 & 0x80u) == 0)
    v26 = a1;
  else
    v26 = (uint64_t)v11;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  v27 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v12, (_BYTE *)(v26 + v10));
  v28 = *(unsigned __int8 *)(a1 + 23);
  if ((v28 & 0x80u) == 0)
    v29 = a1;
  else
    v29 = *(_QWORD *)a1;
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a1 + 8);
  v30 = v29 + v28;
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (char *)(v37.i64[1] + 8 * ((unint64_t)v39 >> 12));
    if ((_QWORD)v38 == v37.i64[1])
    {
      v32 = 0;
      v34 = 0;
      v33 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
    }
    else
    {
      v32 = (std::string::value_type *)(*(_QWORD *)v31 + (v39 & 0xFFF));
      v33 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
      v34 = (std::string::value_type *)(*(_QWORD *)v33 + ((v39 + *((_QWORD *)&v39 + 1)) & 0xFFF));
    }
    if (v34 == v32)
      v35 = 0;
    else
      v35 = &v34[512 * (v33 - v31)] - &v32[*(_QWORD *)v33] + *(_QWORD *)v31;
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v30, v31, v32, (uint64_t)v33, v34, v35);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v27[-v29], v30 - (_QWORD)v27);
  }
  return std::deque<char>::~deque[abi:ne180100](&v37);
}

void sub_217F60F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<char>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_BYTE *boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>(int a1, int64x2_t *a2, int a3, _BYTE *__dst, _BYTE *__src, _BYTE *a6)
{
  _BYTE *v8;
  uint64_t v10;
  BOOL v11;
  size_t v12;

  v8 = __dst;
  v10 = a2[2].i64[1];
  if (v10)
    v11 = __dst == __src;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      *v8++ = *(_BYTE *)(*(_QWORD *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a2[2].i64[0] & 0xFFF));
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_2186CA040);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
      v10 = a2[2].i64[1];
    }
    while (v10 && v8 != __src);
  }
  if (v10)
  {
    while (v8 != a6)
    {
      std::deque<char>::push_back(a2, v8);
      *v8++ = *(_BYTE *)(*(_QWORD *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a2[2].i64[0] & 0xFFF));
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_2186CA040);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
    }
  }
  else if (v8 != __src)
  {
    v12 = a6 - __src;
    if (v12)
      memmove(v8, __src, v12);
    return &v8[v12];
  }
  return a6;
}

void std::deque<char>::push_back(_QWORD *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<char>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_BYTE *)(*(_QWORD *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

void std::deque<char>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1000;
  v4 = v2 - 4096;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_217F613EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<char *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<char *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<char>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x1000)
    a2 = 1;
  if (v2 < 0x2000)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 4096;
  }
  return v4 ^ 1u;
}

_QWORD *std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;
  _BYTE *v29;
  _QWORD *v30;
  _BYTE *v31;
  _BYTE *v32;
  _QWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  _BYTE *v39;
  _BYTE *v40;
  void **v41;
  uint64_t v42;
  size_t v43;
  _BYTE *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  const void **v49;
  char *v50;
  const void **v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  const void **v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  int64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v6 = a6;
  v10 = a1[2].u64[0];
  v11 = v10 >> 12;
  v12 = a1->i64[1];
  v13 = a1[1].i64[0];
  v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12)
    v15 = 0;
  else
    v15 = *(_QWORD *)v14 + (a1[2].i64[0] & 0xFFF);
  if (a3 == v15)
    v16 = 0;
  else
    v16 = a3 + ((a2 - v14) << 9) - (v15 + *(_QWORD *)a2) + *(_QWORD *)v14;
  v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12)
      v20 = 0;
    v21 = v10 + v17;
    v22 = v20 - v21;
    if (a6 > v22)
    {
      std::deque<char>::__add_back_capacity(a1, a6 - v22);
      v17 = a1[2].i64[1];
      v12 = a1->i64[1];
      v13 = a1[1].i64[0];
      v21 = a1[2].i64[0] + v17;
    }
    v23 = (_QWORD *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12)
      v24 = 0;
    else
      v24 = (char *)(*v23 + (v21 & 0xFFF));
    *(_QWORD *)&v68 = v12 + 8 * (v21 >> 12);
    *((_QWORD *)&v68 + 1) = v24;
    v45 = v17 - v16;
    if (v17 - v16 < v6)
    {
      v46 = &a5[v17 - v16 - v6];
      if (v45 < v6 >> 1)
        v46 = &a4[v45];
      if (v46 != a5)
      {
        v47 = v46;
        do
        {
          *v24++ = *v47;
          if (&v24[-*v23] == (char *)4096)
          {
            v48 = (char *)v23[1];
            ++v23;
            v24 = v48;
          }
          ++v47;
          ++a1[2].i64[1];
        }
        while (v47 != a5);
        a5 = v46;
      }
      v6 = v17 - v16;
    }
    if (v6)
    {
      v49 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v6);
      v51 = v49;
      v52 = v50;
      v53 = *((_QWORD *)&v68 + 1);
      if (*((char **)&v68 + 1) != v50)
      {
        v54 = v49;
        v55 = v50;
        do
        {
          *v24++ = *v55;
          if (&v24[-*v23] == (char *)4096)
          {
            v56 = (char *)v23[1];
            ++v23;
            v24 = v56;
          }
          if (&(++v55)[-*v54] == (char *)4096)
          {
            v57 = (char *)v54[1];
            ++v54;
            v55 = v57;
          }
          ++a1[2].i64[1];
          v53 = *((_QWORD *)&v68 + 1);
        }
        while (v55 != *((char **)&v68 + 1));
      }
      if (v6 < v45)
      {
        v58 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v45);
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
        v53 = *((_QWORD *)&v70 + 1);
        v68 = v70;
      }
      if (a5 != a4)
      {
        v61 = (uint64_t *)(v68 - 8);
        v60 = *(_QWORD *)v68;
        while (1)
        {
          v62 = v53 - v60;
          if (a5 - a4 >= v62)
            v63 = v62;
          else
            v63 = a5 - a4;
          a5 -= v63;
          if (v63)
            memmove((void *)(v53 - v63), a5, v63);
          if (a5 == a4)
            break;
          v64 = *v61--;
          v60 = v64;
          v53 = v64 + 4096;
        }
      }
    }
  }
  else
  {
    if (a6 > v10)
    {
      std::deque<char>::__add_front_capacity((void **)a1, a6 - v10);
      v10 = a1[2].u64[0];
      v12 = a1->i64[1];
      v13 = a1[1].i64[0];
      v11 = v10 >> 12;
    }
    v18 = (_QWORD *)(v12 + 8 * v11);
    if (v13 == v12)
      v19 = 0;
    else
      v19 = *v18 + (v10 & 0xFFF);
    *(_QWORD *)&v68 = v12 + 8 * v11;
    *((_QWORD *)&v68 + 1) = v19;
    if (v6 > v16)
    {
      v25 = &a4[v6 - v16];
      if (v16 < v6 >> 1)
        v25 = &a5[-v16];
      if (v25 != a4)
      {
        v26 = v25;
        do
        {
          if (v19 == *v18)
          {
            v27 = *--v18;
            v19 = v27 + 4096;
          }
          v28 = *--v26;
          *(_BYTE *)--v19 = v28;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2186CA050);
        }
        while (v26 != a4);
        a4 = v25;
      }
      v6 = v16;
    }
    if (v6)
    {
      v30 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v6);
      v31 = v29;
      v32 = (_BYTE *)*((_QWORD *)&v68 + 1);
      if (*((_BYTE **)&v68 + 1) != v29)
      {
        v33 = v30;
        v34 = v29;
        do
        {
          if (v19 == *v18)
          {
            v35 = *--v18;
            v19 = v35 + 4096;
          }
          if (v34 == (_BYTE *)*v33)
          {
            v36 = *--v33;
            v34 = (_BYTE *)(v36 + 4096);
          }
          v37 = *--v34;
          *(_BYTE *)--v19 = v37;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2186CA050);
          v32 = (_BYTE *)*((_QWORD *)&v68 + 1);
        }
        while (v34 != *((_BYTE **)&v68 + 1));
      }
      if (v6 < v16)
      {
        v38 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v16);
        v69 = v68;
        std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(v30, v31, (_BYTE **)v38, v39, (void ***)&v69);
        v32 = (_BYTE *)*((_QWORD *)&v69 + 1);
        v68 = v69;
      }
      if (a4 != a5)
      {
        v41 = (void **)(v68 + 8);
        v40 = *(_BYTE **)v68;
        while (1)
        {
          v42 = v40 - v32 + 4096;
          if (a5 - a4 >= v42)
            v43 = v42;
          else
            v43 = a5 - a4;
          if (v43)
            memmove(v32, a4, v43);
          a4 += v43;
          if (a4 == a5)
            break;
          v44 = *v41++;
          v40 = v44;
          v32 = v44;
        }
      }
    }
  }
  v65 = a1->i64[1];
  if (a1[1].i64[0] == v65)
    v66 = 0;
  else
    v66 = *(_QWORD *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  *(_QWORD *)&v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((_QWORD *)&v69 + 1) = v66;
  return std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v69, v16);
}

void std::deque<char>::__add_front_capacity(void **a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void **v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  char *v25;
  char *i;
  int64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  void *__p[2];
  char *v68;
  char *v69;
  _QWORD *v70;

  v3 = a1[1];
  v4 = a1[2];
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  if (v4 == v3)
    v7 = 0;
  else
    v7 = ((v4 - v3) << 9) - 1;
  if ((v6 & 0xFFF) != 0)
    v8 = (v6 >> 12) + 1;
  else
    v8 = v6 >> 12;
  v9 = (uint64_t)a1[4];
  v10 = v7 - ((_QWORD)a1[5] + v9);
  if (v8 >= v10 >> 12)
    v11 = v10 >> 12;
  else
    v11 = v8;
  if (v8 <= v10 >> 12)
  {
    for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
    {
      v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
    }
  }
  else
  {
    v12 = (uint64_t)(a1 + 3);
    v13 = v8 - v11;
    v14 = (_BYTE *)a1[3] - (_BYTE *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<char *>::push_back(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
            v20 = a1[1];
            v21 = (_BYTE *)a1[2] - v20 == 8 ? 4095 : 4096;
            v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13)
              break;
            if (v20 == *a1)
              goto LABEL_30;
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
      {
        v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
      }
    }
    else
    {
      v15 = v4 == v3;
      v16 = v8 << 12;
      if (v14 >> 2 <= v13 + (v5 >> 3))
        v17 = v13 + (v5 >> 3);
      else
        v17 = v14 >> 2;
      v70 = a1 + 3;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v12, v17);
      else
        v18 = 0;
      v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      v68 = v18;
      v69 = &v18[8 * v17];
      do
      {
        v66 = operator new(0x1000uLL);
        std::__split_buffer<char *>::push_back(__p, &v66);
        --v13;
      }
      while (v13);
      v25 = (char *)a1[2];
      for (i = v68; v11; --v11)
      {
        if (i == v69)
        {
          v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0])
              v35 = 1;
            else
              v35 = (i - (char *)__p[0]) >> 2;
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v70, v35);
            v38 = (uint64_t *)__p[1];
            i = &v36[8 * (v35 >> 2)];
            v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              v40 = 8 * (v39 >> 3);
              v41 = &v36[8 * (v35 >> 2)];
              do
              {
                v42 = *v38++;
                *(_QWORD *)v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            v68 = i;
            v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              i = v68;
            }
          }
          else
          {
            v28 = v27 >> 3;
            v29 = v27 >> 3 < -1;
            v30 = (v27 >> 3) + 2;
            if (v29)
              v31 = v30;
            else
              v31 = v28 + 1;
            v32 = (char *)__p[1] - 8 * (v31 >> 1);
            v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              i = (char *)__p[1];
            }
            v34 = &i[-8 * (v31 >> 1)];
            i = &v32[v33];
            __p[1] = v34;
            v68 = &v32[v33];
          }
        }
        *(_QWORD *)i = *((_QWORD *)v25 - 1);
        i = v68 + 8;
        v68 += 8;
        v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      v44 = (char *)a1[1];
      if (v44 == v25)
      {
        v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0])
                v52 = 1;
              else
                v52 = (i - (char *)__p[0]) >> 2;
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v70, v52);
              v55 = (uint64_t *)__p[1];
              i = &v53[8 * (v52 >> 2)];
              v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                v57 = 8 * (v56 >> 3);
                v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  v59 = *v55++;
                  *(_QWORD *)v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              v68 = i;
              v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                i = v68;
              }
            }
            else
            {
              v46 = v45 >> 3;
              v29 = v45 >> 3 < -1;
              v47 = (v45 >> 3) + 2;
              if (v29)
                v48 = v47;
              else
                v48 = v46 + 1;
              v49 = (char *)__p[1] - 8 * (v48 >> 1);
              v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                i = (char *)__p[1];
              }
              v51 = &i[-8 * (v48 >> 1)];
              i = &v49[v50];
              __p[1] = v51;
              v68 = &v49[v50];
            }
          }
          v61 = *(_QWORD *)v44;
          v44 += 8;
          *(_QWORD *)i = v61;
          i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        v25 = (char *)a1[1];
      }
      v62 = v69;
      v63 = (char *)a1[3];
      v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      v68 = v44;
      v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25)
        v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v65)
        operator delete(v65);
    }
  }
}

void sub_217F621A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8) - *result + a2;
    if (v4 < 1)
      result -= (unint64_t)(4095 - v4) >> 12;
    else
      result += (unint64_t)v4 >> 12;
  }
  return result;
}

void std::deque<char>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0xFFF) != 0)
    v6 = (v5 >> 12) + 1;
  else
    v6 = v5 >> 12;
  v7 = a1[4];
  if (v6 >= v7 >> 12)
    v8 = v7 >> 12;
  else
    v8 = v6;
  if (v6 <= v7 >> 12)
  {
    for (a1[4] = v7 - (v8 << 12); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<char *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<char *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 4095;
          else
            v64 = 4096;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 12);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 12;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<char *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<char *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_217F62794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8) - a2 - *result;
    if (v4 < 1)
      result -= (unint64_t)(4095 - v4) >> 12;
    else
      result += (unint64_t)v4 >> 12;
  }
  return result;
}

void ****std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, void ***a5)
{
  _QWORD *v7;
  _BYTE *i;
  _BYTE *v9;
  void ***v11;

  v11 = a5;
  if (a1 != a3)
  {
    v7 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4096); ; i = v9 + 4096)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](&v11, a2, i);
      if (v7 == a3)
        break;
      v9 = (_BYTE *)*v7++;
      a2 = v9;
    }
    a2 = *a3;
  }
  return std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](&v11, a2, a4);
}

void ****std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](void ****result, _BYTE *__src, _BYTE *a3)
{
  void ***v3;
  void **v4;
  void **v5;
  _BYTE *v7;
  void ****v8;
  void **v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  void **v13;

  v3 = *result;
  v5 = **result;
  v4 = (*result)[1];
  if (__src != a3)
  {
    v7 = __src;
    v8 = result;
    v10 = (char *)*v5++;
    v9 = (void **)v10;
    while (1)
    {
      v11 = (char *)v9 - (char *)v4 + 4096;
      if (a3 - v7 >= v11)
        v12 = v11;
      else
        v12 = a3 - v7;
      if (v12)
        result = (void ****)memmove(v4, v7, v12);
      v7 += v12;
      if (v7 == a3)
        break;
      v13 = (void **)*v5++;
      v9 = v13;
      v4 = v13;
    }
    v4 = (void **)((char *)v4 + v12);
    if ((char *)*(v5 - 1) + 4096 == (char *)v4)
      v4 = (void **)*v5;
    else
      --v5;
    v3 = *v8;
  }
  *v3 = v5;
  v3[1] = v4;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  const void **v8;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  void *result;
  uint64_t v20;
  char *v21;
  const void **v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  char *v40;

  v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4)
      goto LABEL_46;
    v35 = (uint64_t)*a5;
    v36 = a4;
    while (1)
    {
      v37 = &a6[-v35];
      if (v36 - a2 >= (uint64_t)v37)
        v38 = (size_t)v37;
      else
        v38 = v36 - a2;
      v36 -= v38;
      a6 -= v38;
      if (v38)
        result = memmove(a6, v36, v38);
      if (v36 == a2)
        break;
      v39 = (uint64_t)*--v8;
      v35 = v39;
      a6 = (char *)(v39 + 4096);
    }
    goto LABEL_44;
  }
  v14 = *a3;
  if (*a3 != a4)
  {
    v15 = (uint64_t)*a5;
    v16 = a4;
    while (1)
    {
      v17 = &a6[-v15];
      if (v16 - v14 >= (uint64_t)v17)
        v18 = (size_t)v17;
      else
        v18 = v16 - v14;
      v16 -= v18;
      a6 -= v18;
      if (v18)
        result = memmove(a6, v16, v18);
      if (v16 == v14)
        break;
      v20 = (uint64_t)*--v8;
      v15 = v20;
      a6 = (char *)(v20 + 4096);
    }
    if ((char *)*v8 + 4096 == a6)
    {
      v21 = (char *)v8[1];
      ++v8;
      a6 = v21;
    }
  }
  v22 = a3 - 1;
  if (a3 - 1 != a1)
  {
    v23 = (char *)*v8;
    do
    {
      v24 = *v22;
      v25 = (char *)*v22 + 4096;
      while (1)
      {
        v26 = (char *)(a6 - v23);
        if (v25 - v24 >= (uint64_t)v26)
          v27 = (size_t)v26;
        else
          v27 = v25 - v24;
        v25 -= v27;
        a6 -= v27;
        if (v27)
          result = memmove(a6, v25, v27);
        if (v25 == v24)
          break;
        v28 = (char *)*--v8;
        v23 = v28;
        a6 = v28 + 4096;
      }
      v23 = (char *)*v8;
      if ((char *)*v8 + 4096 == a6)
      {
        v29 = (char *)v8[1];
        ++v8;
        v23 = v29;
        a6 = v29;
      }
      --v22;
    }
    while (v22 != a1);
  }
  v30 = (char *)*a1 + 4096;
  if (v30 != a2)
  {
    v31 = (uint64_t)*v8;
    while (1)
    {
      v32 = &a6[-v31];
      if (v30 - a2 >= (uint64_t)v32)
        v33 = (size_t)v32;
      else
        v33 = v30 - a2;
      v30 -= v33;
      a6 -= v33;
      if (v33)
        result = memmove(a6, v30, v33);
      if (v30 == a2)
        break;
      v34 = (uint64_t)*--v8;
      v31 = v34;
      a6 = (char *)(v34 + 4096);
    }
LABEL_44:
    if ((char *)*v8 + 4096 == a6)
    {
      v40 = (char *)v8[1];
      ++v8;
      a6 = v40;
    }
  }
LABEL_46:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

char *std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(uint64_t a1, uint64_t a2, _QWORD *a3, std::string::value_type *a4, uint64_t a5, std::string::value_type *a6, std::string::size_type a7)
{
  std::string *v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v12;
  std::string __p;

  v8 = (std::string *)a1;
  if (*(char *)(a1 + 23) < 0)
  {
    v9 = a2 - *(_QWORD *)a1;
    if (!a7)
    {
      v8 = *(std::string **)a1;
      return (char *)v8 + v9;
    }
  }
  else
  {
    v9 = a2 - a1;
    if (!a7)
      return (char *)v8 + v9;
  }
  std::string::__init_with_sentinel[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(&__p, a3, a4, a5, a6);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v8, a7, v9, (char *)p_p, (char *)p_p + size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return (char *)v12;
}

void sub_217F62C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::string::__init_with_sentinel[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(std::string *this, _QWORD *a2, std::string::value_type *a3, uint64_t a4, std::string::value_type *a5)
{
  std::string::value_type *v6;
  std::string::value_type *v9;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3 != a5)
  {
    v6 = a3;
    do
    {
      std::string::push_back(this, *v6++);
      if (&v6[-*a2] == (std::string::value_type *)4096)
      {
        v9 = (std::string::value_type *)a2[1];
        ++a2;
        v6 = v9;
      }
    }
    while (v6 != a5);
  }
}

void sub_217F62CC8(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_217F62CE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::deque<char>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<std::shared_ptr<std::vector<turi::flexible_type>> *,std::allocator<std::shared_ptr<std::vector<turi::flexible_type>> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::empty_formatF<char>,boost::iterator_range<std::__wrap_iter<char *>>,boost::algorithm::detail::empty_container<char>>(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t a4)
{
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string::value_type *v22;
  char *v23;
  std::string::value_type *v24;
  std::string::size_type v25;
  int64x2_t v27;
  __int128 v28;
  __int128 v29;
  char v30;

  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  if (*(char *)(a1 + 23) >= 0)
    v8 = (_BYTE *)a1;
  else
    v8 = *(_BYTE **)a1;
  v9 = v8;
  while (a3 != (_BYTE *)a4)
  {
    v9 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v30, &v27, a1, v9, v8, a3);
    v10 = (char *)(v27.i64[1] + 8 * (((_QWORD)v29 + *((_QWORD *)&v29 + 1)) >> 12));
    if ((_QWORD)v28 == v27.i64[1])
      v11 = 0;
    else
      v11 = *(_QWORD *)v10 + (((_WORD)v29 + WORD4(v29)) & 0xFFF);
    std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(&v27, v10, v11, 0, 0, 0);
    v8 = (_BYTE *)a4;
    v12 = *(unsigned __int8 *)(a1 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (_BYTE *)a1;
    else
      v13 = *(_BYTE **)a1;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a1 + 8);
    a3 = (_BYTE *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, a4, (uint64_t)&v13[v12]);
    a4 = v14;
  }
  v15 = *(unsigned __int8 *)(a1 + 23);
  if ((v15 & 0x80u) == 0)
    v16 = (_BYTE *)a1;
  else
    v16 = *(_BYTE **)a1;
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a1 + 8);
  v17 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v30, &v27, a1, v9, v8, &v16[v15]);
  v18 = *(unsigned __int8 *)(a1 + 23);
  if ((v18 & 0x80u) == 0)
    v19 = a1;
  else
    v19 = *(_QWORD *)a1;
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a1 + 8);
  v20 = v19 + v18;
  if (*((_QWORD *)&v29 + 1))
  {
    v21 = (char *)(v27.i64[1] + 8 * ((unint64_t)v29 >> 12));
    if ((_QWORD)v28 == v27.i64[1])
    {
      v22 = 0;
      v24 = 0;
      v23 = (char *)(v27.i64[1] + 8 * (((_QWORD)v29 + *((_QWORD *)&v29 + 1)) >> 12));
    }
    else
    {
      v22 = (std::string::value_type *)(*(_QWORD *)v21 + (v29 & 0xFFF));
      v23 = (char *)(v27.i64[1] + 8 * (((_QWORD)v29 + *((_QWORD *)&v29 + 1)) >> 12));
      v24 = (std::string::value_type *)(*(_QWORD *)v23 + ((v29 + *((_QWORD *)&v29 + 1)) & 0xFFF));
    }
    if (v24 == v22)
      v25 = 0;
    else
      v25 = &v24[512 * (v23 - v21)] - &v22[*(_QWORD *)v23] + *(_QWORD *)v21;
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v20, v21, v22, (uint64_t)v23, v24, v25);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v17[-v19], v20 - (_QWORD)v17);
  }
  return std::deque<char>::~deque[abi:ne180100](&v27);
}

void sub_217F62F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<char>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::integral_as_string<long long>(uint64_t a1, int a2)
{
  uint64_t v3;
  const std::locale *v4;
  std::locale *v5;
  std::locale *v6;
  std::locale v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;
  std::locale v12;
  std::locale v13;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  v3 = *(_QWORD *)(v9[0] - 24);
  v4 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + v3));
  std::ios_base::imbue((std::ios_base *)((char *)v9 + v3), v4);
  std::locale::~locale(&v13);
  v5 = *(std::locale **)((char *)&v9[5] + v3);
  if (v5)
  {
    (*((void (**)(std::locale *, const std::locale *))v5->__locale_ + 2))(v5, v4);
    v6 = v5 + 1;
    std::locale::locale(&v12, v6);
    std::locale::operator=(v6, v4);
    std::locale::~locale(&v12);
  }
  std::locale::~locale(&v8);
  *(_QWORD *)((char *)&v9[3] + *(_QWORD *)(v9[0] - 24)) = a2;
  LOBYTE(v13.__locale_) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, (char *)&v13);
  std::ostream::operator<<();
  std::stringbuf::str();
  v9[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v9[1] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x219A198F4](&v11);
}

void sub_217F63124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(uint64_t a1, uint64_t *a2, char *a3, char *a4, _BYTE *a5, _BYTE *a6, char *a7, char *a8)
{
  _BYTE *v8;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v15;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  std::string::value_type *v32;
  char *v33;
  std::string::value_type *v34;
  std::string::size_type v35;
  int64x2_t v37;
  __int128 v38;
  __int128 v39;
  char v40;

  v8 = a6;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  LODWORD(v10) = *(char *)(a1 + 23);
  v11 = *(_BYTE **)a1;
  if ((int)v10 >= 0)
    v12 = (_BYTE *)a1;
  else
    v12 = *(_BYTE **)a1;
  if (a5 == a6)
  {
    v19 = v12;
  }
  else
  {
    v15 = a5;
    v19 = v12;
    v20 = v12;
    do
    {
      v12 = v8;
      v19 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v20, v15);
      v21 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
      if ((_QWORD)v38 == v37.i64[1])
        v22 = 0;
      else
        v22 = *(_QWORD *)v21 + (((_WORD)v39 + WORD4(v39)) & 0xFFF);
      std::deque<char>::__insert_bidirectional[abi:ne180100]<std::__wrap_iter<char const*>>(&v37, v21, v22, a7, a8, a8 - a7);
      v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0)
        v24 = a1;
      else
        v24 = *(_QWORD *)a1;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a1 + 8);
      v15 = (_BYTE *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, (uint64_t)v12, v24 + v23);
      v8 = v25;
      v20 = v12;
      a7 = a3;
      a8 = a4;
    }
    while (v15 != v25);
    LOBYTE(v10) = *(_BYTE *)(a1 + 23);
    v11 = *(_BYTE **)a1;
  }
  v10 = v10;
  if ((v10 & 0x80u) == 0)
    v26 = a1;
  else
    v26 = (uint64_t)v11;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  v27 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v12, (_BYTE *)(v26 + v10));
  v28 = *(unsigned __int8 *)(a1 + 23);
  if ((v28 & 0x80u) == 0)
    v29 = a1;
  else
    v29 = *(_QWORD *)a1;
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a1 + 8);
  v30 = v29 + v28;
  if (*((_QWORD *)&v39 + 1))
  {
    v31 = (char *)(v37.i64[1] + 8 * ((unint64_t)v39 >> 12));
    if ((_QWORD)v38 == v37.i64[1])
    {
      v32 = 0;
      v34 = 0;
      v33 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
    }
    else
    {
      v32 = (std::string::value_type *)(*(_QWORD *)v31 + (v39 & 0xFFF));
      v33 = (char *)(v37.i64[1] + 8 * (((_QWORD)v39 + *((_QWORD *)&v39 + 1)) >> 12));
      v34 = (std::string::value_type *)(*(_QWORD *)v33 + ((v39 + *((_QWORD *)&v39 + 1)) & 0xFFF));
    }
    if (v34 == v32)
      v35 = 0;
    else
      v35 = &v34[512 * (v33 - v31)] - &v32[*(_QWORD *)v33] + *(_QWORD *)v31;
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v30, v31, v32, (uint64_t)v33, v34, v35);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v27[-v29], v30 - (_QWORD)v27);
  }
  return std::deque<char>::~deque[abi:ne180100](&v37);
}

void sub_217F63384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<char>::~deque[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::deque<char>::__insert_bidirectional[abi:ne180100]<std::__wrap_iter<char const*>>(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  _QWORD *v34;
  _BYTE *v35;
  _BYTE *v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  _BYTE *v43;
  _BYTE *v44;
  void **v45;
  uint64_t v46;
  size_t v47;
  _BYTE *v48;
  const void **v49;
  char *v50;
  const void **v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  const void **v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  int64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v68;
  __int128 v69;
  __int128 v70;

  v6 = a6;
  v10 = a1[2].u64[0];
  v11 = v10 >> 12;
  v12 = a1->i64[1];
  v13 = a1[1].i64[0];
  v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12)
    v15 = 0;
  else
    v15 = *(_QWORD *)v14 + (a1[2].i64[0] & 0xFFF);
  if (a3 == v15)
    v16 = 0;
  else
    v16 = a3 + ((a2 - v14) << 9) - (v15 + *(_QWORD *)a2) + *(_QWORD *)v14;
  v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12)
      v20 = 0;
    v21 = v10 + v17;
    v22 = v20 - v21;
    if (a6 > v22)
    {
      std::deque<char>::__add_back_capacity(a1, a6 - v22);
      v17 = a1[2].i64[1];
      v12 = a1->i64[1];
      v13 = a1[1].i64[0];
      v21 = a1[2].i64[0] + v17;
    }
    v23 = (_QWORD *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12)
      v24 = 0;
    else
      v24 = (char *)(*v23 + (v21 & 0xFFF));
    *(_QWORD *)&v68 = v12 + 8 * (v21 >> 12);
    *((_QWORD *)&v68 + 1) = v24;
    v29 = v17 - v16;
    if (v17 - v16 >= v6)
    {
      v30 = a5;
      if (!v6)
        goto LABEL_84;
    }
    else
    {
      if (v29 >= v6 >> 1)
        v30 = &a5[v17 - v16 - v6];
      else
        v30 = &a4[v29];
      if (v30 == a5)
      {
        v30 = a5;
      }
      else
      {
        v31 = v30;
        do
        {
          *v24++ = *v31;
          if (&v24[-*v23] == (char *)4096)
          {
            v32 = (char *)v23[1];
            ++v23;
            v24 = v32;
          }
          ++v31;
          ++a1[2].i64[1];
        }
        while (v31 != a5);
      }
      v6 = v17 - v16;
      if (!v29)
        goto LABEL_84;
    }
    v49 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v6);
    v51 = v49;
    v52 = v50;
    v53 = *((_QWORD *)&v68 + 1);
    if (*((char **)&v68 + 1) != v50)
    {
      v54 = v49;
      v55 = v50;
      do
      {
        *v24++ = *v55;
        if (&v24[-*v23] == (char *)4096)
        {
          v56 = (char *)v23[1];
          ++v23;
          v24 = v56;
        }
        if (&(++v55)[-*v54] == (char *)4096)
        {
          v57 = (char *)v54[1];
          ++v54;
          v55 = v57;
        }
        ++a1[2].i64[1];
        v53 = *((_QWORD *)&v68 + 1);
      }
      while (v55 != *((char **)&v68 + 1));
    }
    if (v6 < v29)
    {
      v58 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v29);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
      v53 = *((_QWORD *)&v70 + 1);
      v68 = v70;
    }
    if (v30 != a4)
    {
      v61 = (uint64_t *)(v68 - 8);
      v60 = *(_QWORD *)v68;
      while (1)
      {
        v62 = v53 - v60;
        if (v30 - a4 >= v62)
          v63 = v62;
        else
          v63 = v30 - a4;
        v30 -= v63;
        if (v63)
          memmove((void *)(v53 - v63), v30, v63);
        if (v30 == a4)
          break;
        v64 = *v61--;
        v60 = v64;
        v53 = v64 + 4096;
      }
    }
    goto LABEL_84;
  }
  if (a6 > v10)
  {
    std::deque<char>::__add_front_capacity((void **)a1, a6 - v10);
    v10 = a1[2].u64[0];
    v12 = a1->i64[1];
    v13 = a1[1].i64[0];
    v11 = v10 >> 12;
  }
  v18 = (_QWORD *)(v12 + 8 * v11);
  if (v13 == v12)
    v19 = 0;
  else
    v19 = *v18 + (v10 & 0xFFF);
  *(_QWORD *)&v68 = v12 + 8 * v11;
  *((_QWORD *)&v68 + 1) = v19;
  if (v6 <= v16)
  {
    v25 = a4;
    if (!v6)
      goto LABEL_84;
    goto LABEL_46;
  }
  if (v16 >= v6 >> 1)
    v25 = &a4[v6 - v16];
  else
    v25 = &a5[-v16];
  if (v25 == a4)
  {
    v25 = a4;
  }
  else
  {
    v26 = v25;
    do
    {
      if (v19 == *v18)
      {
        v27 = *--v18;
        v19 = v27 + 4096;
      }
      v28 = *--v26;
      *(_BYTE *)--v19 = v28;
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2186CA050);
    }
    while (v26 != a4);
  }
  v6 = v16;
  if (v16)
  {
LABEL_46:
    v34 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v6);
    v35 = v33;
    v36 = (_BYTE *)*((_QWORD *)&v68 + 1);
    if (*((_BYTE **)&v68 + 1) != v33)
    {
      v37 = v34;
      v38 = v33;
      do
      {
        if (v19 == *v18)
        {
          v39 = *--v18;
          v19 = v39 + 4096;
        }
        if (v38 == (_BYTE *)*v37)
        {
          v40 = *--v37;
          v38 = (_BYTE *)(v40 + 4096);
        }
        v41 = *--v38;
        *(_BYTE *)--v19 = v41;
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_2186CA050);
        v36 = (_BYTE *)*((_QWORD *)&v68 + 1);
      }
      while (v38 != *((_BYTE **)&v68 + 1));
    }
    if (v6 < v16)
    {
      v42 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v16);
      v69 = v68;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(v34, v35, (_BYTE **)v42, v43, (void ***)&v69);
      v36 = (_BYTE *)*((_QWORD *)&v69 + 1);
      v68 = v69;
    }
    if (v25 != a5)
    {
      v45 = (void **)(v68 + 8);
      v44 = *(_BYTE **)v68;
      while (1)
      {
        v46 = v44 - v36 + 4096;
        if (a5 - v25 >= v46)
          v47 = v46;
        else
          v47 = a5 - v25;
        if (v47)
          memmove(v36, v25, v47);
        v25 += v47;
        if (v25 == a5)
          break;
        v48 = *v45++;
        v44 = v48;
        v36 = v48;
      }
    }
  }
LABEL_84:
  v65 = a1->i64[1];
  if (a1[1].i64[0] == v65)
    v66 = 0;
  else
    v66 = *(_QWORD *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  *(_QWORD *)&v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((_QWORD *)&v69 + 1) = v66;
  return std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v69, v16);
}

uint64_t boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::time_facet(uint64_t a1, uint64_t a2)
{
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string v8;
  __int128 *v9[3];
  std::vector<std::string> v10;
  _BYTE v11[8];
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;

  v4 = boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::default_time_format[0];
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter((uint64_t)v11, 1, "/", "[", ")", "]");
  boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::special_values_formatter(&v10);
  boost::date_time::date_generator_formatter<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_generator_formatter((uint64_t)v9);
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet(a1, v4, (uint64_t)v11, (__int128 **)&v10, v9, a2);
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  *(_QWORD *)a1 = &unk_24D91CA10;
  std::string::basic_string[abi:ne180100]<0>(&v8, boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::duration_sign_negative_only);
  v5 = std::string::append(&v8, boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::default_time_duration_format[0]);
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 352) = *((_QWORD *)&v5->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 336) = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217F63988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(v21);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet(uint64_t a1, char *a2, uint64_t a3, __int128 **a4, __int128 **a5, uint64_t a6)
{
  *(_QWORD *)a1 = &unk_24D91CA88;
  *(_QWORD *)(a1 + 8) = a6 - 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), a2);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 40), "%b");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 64), "%a");
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter(a1 + 88, a3);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 192), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 216), *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  return a1;
}

void sub_217F63AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  uint64_t v6;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::~period_formatter(v6);
  if (*(char *)(v2 + 87) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::__shared_count::~__shared_count((std::__shared_count *)v2);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::~period_formatter(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24D91CA88;
  v2 = (void **)(a1 + 312);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 288);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 264);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)(a1 + 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(a1);
  JUMPOUT(0x219A19A08);
}

void boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::~time_facet(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24D91CA10;
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(a1);
}

{
  *(_QWORD *)a1 = &unk_24D91CA10;
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::~date_facet(a1);
  JUMPOUT(0x219A19A08);
}

void boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::set_iso_format()
{
  JUMPOUT(0x219A19390);
}

void boost::date_time::time_facet<boost::posix_time::ptime,char,std::ostreambuf_iterator<char>>::set_iso_extended_format()
{
  JUMPOUT(0x219A19390);
}

_QWORD *boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::do_put_special(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v7;

  v7 = a5;
  boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::put_special((_QWORD *)(a1 + 216), a2, &v7);
  return a2;
}

uint64_t boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::do_put_tm(_QWORD *a1, int a2, std::ios_base *this, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _BYTE *v70;
  uint64_t v71;
  std::locale v73;
  char *v74;

  v10 = a1[39];
  if (a1[40] != v10)
  {
    v11 = v10 + 24 * *(int *)(a5 + 24);
    v12 = *(char *)(v11 + 23);
    v13 = *(_QWORD *)(v11 + 8);
    if (v12 >= 0)
      v14 = (char *)v11;
    else
      v14 = *(char **)v11;
    v15 = *(unsigned __int8 *)(v11 + 23);
    if (v12 < 0)
      v15 = v13;
    v16 = *(char *)(a6 + 23);
    v17 = v16 >= 0 ? (_BYTE *)a6 : *(_BYTE **)a6;
    v18 = v16 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(_QWORD *)(a6 + 8);
    if (v18)
    {
      v19 = &v17[v18];
      v20 = v18 - 1;
      while (1)
      {
        v21 = 0;
        while (v17[v21] == boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_weekday_format[v21])
        {
          v22 = v21 + 1;
          if (v20 != v21)
          {
            v23 = v21++ == 1;
            if (!v23)
              continue;
          }
          v24 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_weekday_format[v22];
          v25 = &v17[v22];
          goto LABEL_22;
        }
        v24 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_weekday_format[v21];
        v25 = &v17[v21];
LABEL_22:
        if (v24 == "")
          break;
        ++v17;
        --v20;
        if (v17 == v19)
          goto LABEL_27;
      }
      if (v17 != v25)
      {
        v73.__locale_ = (std::locale::__imp *)"%A";
        v74 = "";
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(a6, (uint64_t *)&v73, v14, &v14[v15], v17, v25, v14, &v14[v15]);
      }
    }
  }
LABEL_27:
  v26 = a1[36];
  if (a1[37] != v26)
  {
    v27 = v26 + 24 * *(int *)(a5 + 24);
    v28 = *(char *)(v27 + 23);
    v29 = *(_QWORD *)(v27 + 8);
    if (v28 >= 0)
      v30 = (char *)v27;
    else
      v30 = *(char **)v27;
    v31 = *(unsigned __int8 *)(v27 + 23);
    if (v28 < 0)
      v31 = v29;
    v32 = *(char *)(a6 + 23);
    v33 = v32 >= 0 ? (_BYTE *)a6 : *(_BYTE **)a6;
    v34 = v32 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(_QWORD *)(a6 + 8);
    if (v34)
    {
      v35 = &v33[v34];
      v36 = v34 - 1;
      while (1)
      {
        v37 = 0;
        while (v33[v37] == boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_weekday_format[v37])
        {
          v38 = v37 + 1;
          if (v36 != v37)
          {
            v23 = v37++ == 1;
            if (!v23)
              continue;
          }
          v39 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_weekday_format[v38];
          v40 = &v33[v38];
          goto LABEL_48;
        }
        v39 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_weekday_format[v37];
        v40 = &v33[v37];
LABEL_48:
        if (v39 == "")
          break;
        ++v33;
        --v36;
        if (v33 == v35)
          goto LABEL_53;
      }
      if (v33 != v40)
      {
        v73.__locale_ = (std::locale::__imp *)"%a";
        v74 = "";
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(a6, (uint64_t *)&v73, v30, &v30[v31], v33, v40, v30, &v30[v31]);
      }
    }
  }
LABEL_53:
  v41 = a1[33];
  if (a1[34] != v41)
  {
    v42 = v41 + 24 * *(int *)(a5 + 16);
    v43 = *(char *)(v42 + 23);
    v44 = *(_QWORD *)(v42 + 8);
    if (v43 >= 0)
      v45 = (char *)v42;
    else
      v45 = *(char **)v42;
    v46 = *(unsigned __int8 *)(v42 + 23);
    if (v43 < 0)
      v46 = v44;
    v47 = *(char *)(a6 + 23);
    v48 = v47 >= 0 ? (_BYTE *)a6 : *(_BYTE **)a6;
    v49 = v47 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(_QWORD *)(a6 + 8);
    if (v49)
    {
      v50 = &v48[v49];
      v51 = v49 - 1;
      while (1)
      {
        v52 = 0;
        while (v48[v52] == boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_month_format[v52])
        {
          v53 = v52 + 1;
          if (v51 != v52)
          {
            v23 = v52++ == 1;
            if (!v23)
              continue;
          }
          v54 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_month_format[v53];
          v55 = &v48[v53];
          goto LABEL_74;
        }
        v54 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_month_format[v52];
        v55 = &v48[v52];
LABEL_74:
        if (v54 == (char *)&unk_21872F2B0)
          break;
        ++v48;
        --v51;
        if (v48 == v50)
          goto LABEL_79;
      }
      if (v48 != v55)
      {
        v73.__locale_ = (std::locale::__imp *)boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::long_month_format;
        v74 = (char *)&unk_21872F2B0;
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(a6, (uint64_t *)&v73, v45, &v45[v46], v48, v55, v45, &v45[v46]);
      }
    }
  }
LABEL_79:
  v56 = a1[30];
  if (a1[31] != v56)
  {
    v57 = v56 + 24 * *(int *)(a5 + 16);
    v58 = *(char *)(v57 + 23);
    v59 = *(_QWORD *)(v57 + 8);
    if (v58 >= 0)
      v60 = (char *)v57;
    else
      v60 = *(char **)v57;
    v61 = *(unsigned __int8 *)(v57 + 23);
    if (v58 < 0)
      v61 = v59;
    v62 = *(char *)(a6 + 23);
    v63 = v62 >= 0 ? (_BYTE *)a6 : *(_BYTE **)a6;
    v64 = v62 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(_QWORD *)(a6 + 8);
    if (v64)
    {
      v65 = &v63[v64];
      v66 = v64 - 1;
      while (1)
      {
        v67 = 0;
        while (v63[v67] == boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_month_format[v67])
        {
          v68 = v67 + 1;
          if (v66 != v67)
          {
            v23 = v67++ == 1;
            if (!v23)
              continue;
          }
          v69 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_month_format[v68];
          v70 = &v63[v68];
          goto LABEL_100;
        }
        v69 = &boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::short_month_format[v67];
        v70 = &v63[v67];
LABEL_100:
        if (v69 == "")
          break;
        ++v63;
        --v66;
        if (v63 == v65)
          goto LABEL_105;
      }
      if (v63 != v70)
      {
        v73.__locale_ = (std::locale::__imp *)"%b";
        v74 = "";
        boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<std::__wrap_iter<char const*>>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<std::__wrap_iter<char const*>>>(a6, (uint64_t *)&v73, v60, &v60[v61], v63, v70, v60, &v60[v61]);
      }
    }
  }
LABEL_105:
  std::ios_base::getloc(this);
  std::locale::use_facet(&v73, MEMORY[0x24BEDB598]);
  v71 = std::time_put<char,std::ostreambuf_iterator<char>>::put();
  std::locale::~locale(&v73);
  return v71;
}

void sub_217F64214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter(uint64_t a1, int a2, char *__s, char *a4, char *a5, char *a6)
{
  _QWORD *v10;

  *(_DWORD *)a1 = a2;
  v10 = (_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), __s);
  std::string::basic_string[abi:ne180100]<0>(v10, a4);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 56), a5);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 80), a6);
  return a1;
}

void sub_217F642A4(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[79] < 0)
    operator delete(*v4);
  if (v2[55] < 0)
    operator delete(*v3);
  if (v2[31] < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::special_values_formatter(std::vector<std::string> *a1)
{
  char v3;

  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char const(*)[17],char const(*)[17],std::back_insert_iterator<std::vector<std::string>>>((int)&v3, "not-a-date-time", byte_21872F261, a1);
  return a1;
}

void sub_217F64338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char const(*)[17],char const(*)[17],std::back_insert_iterator<std::vector<std::string>>>(int a1, char *__s, char *a3, std::vector<std::string> *a4)
{
  char *v4;
  char *v5;
  void *__p[2];
  char v8;
  std::vector<std::string> *v9;

  v4 = __s;
  v9 = a4;
  if (__s == a3)
    return __s;
  v5 = a3;
  do
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v4);
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v9, (__int128 *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
    v4 += 17;
  }
  while (v4 != v5);
  return v5;
}

void sub_217F643CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, __int128 *a2)
{
  std::vector<std::string> *v4;
  std::vector<std::string>::pointer end;
  std::vector<std::string> *v6;
  std::allocator<std::string> *p_end_cap;
  std::string *v8;
  std::string *value;
  __int128 v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::__split_buffer<std::string> __v;

  v4 = *a1;
  end = (*a1)->__end_;
  v6 = *a1;
  value = v6->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&v6->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15)
      v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v15);
    else
      v16 = 0;
    v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v10 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v11 = end + 1;
    v4->__end_ = end + 1;
  }
  v4->__end_ = v11;
  return a1;
}

void sub_217F64518(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::date_generator_formatter<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_generator_formatter(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  __int128 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string *v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::string *v45;
  std::string *v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  std::string *v57;
  std::string *v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  std::string *v69;
  std::string *v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  std::string *v81;
  std::string *v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  __int128 v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  std::string *v93;
  std::string *v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  std::string *v105;
  std::string *v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  void *__p[2];
  std::string::size_type v112;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::string>::reserve((std::vector<std::string> *)a1, 9uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "first");
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= v2)
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(_QWORD *)a1) >> 3);
    v6 = v5 + 1;
    if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *(_QWORD *)a1) >> 3);
    if (2 * v7 > v6)
      v6 = 2 * v7;
    if (v7 >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v6;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v8)
      v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v8);
    else
      v9 = 0;
    v10 = v9 + v5;
    __v.__first_ = v9;
    __v.__begin_ = v10;
    __v.__end_cap_.__value_ = &v9[v8];
    v11 = *(_OWORD *)__p;
    v10->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    __p[1] = 0;
    v112 = 0;
    __p[0] = 0;
    __v.__end_ = v10 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v12 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v13 = SHIBYTE(v112);
    *(_QWORD *)(a1 + 8) = v12;
    if (v13 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = *(_OWORD *)__p;
    *(_QWORD *)(v3 + 16) = v112;
    *(_OWORD *)v3 = v4;
    *(_QWORD *)(a1 + 8) = v3 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "second");
  v15 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  if (v15 >= v14)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a1) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(_QWORD *)a1) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v18;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v20)
      v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v20);
    else
      v21 = 0;
    v22 = v21 + v17;
    __v.__first_ = v21;
    __v.__begin_ = v22;
    __v.__end_cap_.__value_ = &v21[v20];
    v23 = *(_OWORD *)__p;
    v22->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
    __p[1] = 0;
    v112 = 0;
    __p[0] = 0;
    __v.__end_ = v22 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v24 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v25 = SHIBYTE(v112);
    *(_QWORD *)(a1 + 8) = v24;
    if (v25 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v16 = *(_OWORD *)__p;
    *(_QWORD *)(v15 + 16) = v112;
    *(_OWORD *)v15 = v16;
    *(_QWORD *)(a1 + 8) = v15 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "third");
  v27 = *(_QWORD *)(a1 + 8);
  v26 = *(_QWORD *)(a1 + 16);
  if (v27 >= v26)
  {
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(_QWORD *)a1) >> 3);
    v30 = v29 + 1;
    if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(_QWORD *)a1) >> 3);
    if (2 * v31 > v30)
      v30 = 2 * v31;
    if (v31 >= 0x555555555555555)
      v32 = 0xAAAAAAAAAAAAAAALL;
    else
      v32 = v30;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v32)
      v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v32);
    else
      v33 = 0;
    v34 = v33 + v29;
    __v.__first_ = v33;
    __v.__begin_ = v34;
    __v.__end_cap_.__value_ = &v33[v32];
    v35 = *(_OWORD *)__p;
    v34->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
    __p[1] = 0;
    v112 = 0;
    __p[0] = 0;
    __v.__end_ = v34 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v36 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v37 = SHIBYTE(v112);
    *(_QWORD *)(a1 + 8) = v36;
    if (v37 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v28 = *(_OWORD *)__p;
    *(_QWORD *)(v27 + 16) = v112;
    *(_OWORD *)v27 = v28;
    *(_QWORD *)(a1 + 8) = v27 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fourth");
  v39 = *(_QWORD *)(a1 + 8);
  v38 = *(_QWORD *)(a1 + 16);
  if (v39 >= v38)
  {
    v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *(_QWORD *)a1) >> 3);
    v42 = v41 + 1;
    if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *(_QWORD *)a1) >> 3);
    if (2 * v43 > v42)
      v42 = 2 * v43;
    if (v43 >= 0x555555555555555)
      v44 = 0xAAAAAAAAAAAAAAALL;
    else
      v44 = v42;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v44)
      v45 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v44);
    else
      v45 = 0;
    v46 = v45 + v41;
    __v.__first_ = v45;
    __v.__begin_ = v46;
    __v.__end_cap_.__value_ = &v45[v44];
    v47 = *(_OWORD *)__p;
    v46->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
    __p[1] = 0;
    v112 = 0;
    __p[0] = 0;
    __v.__end_ = v46 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v48 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v49 = SHIBYTE(v112);
    *(_QWORD *)(a1 + 8) = v48;
    if (v49 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v40 = *(_OWORD *)__p;
    *(_QWORD *)(v39 + 16) = v112;
    *(_OWORD *)v39 = v40;
    *(_QWORD *)(a1 + 8) = v39 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "fifth");
  v51 = *(_QWORD *)(a1 + 8);
  v50 = *(_QWORD *)(a1 + 16);
  if (v51 >= v50)
  {
    v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)a1) >> 3);
    v54 = v53 + 1;
    if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *(_QWORD *)a1) >> 3);
    if (2 * v55 > v54)
      v54 = 2 * v55;
    if (v55 >= 0x555555555555555)
      v56 = 0xAAAAAAAAAAAAAAALL;
    else
      v56 = v54;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v56)
      v57 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v56);
    else
      v57 = 0;
    v58 = v57 + v53;
    __v.__first_ = v57;
    __v.__begin_ = v58;
    __v.__end_cap_.__value_ = &v57[v56];
    v59 = *(_OWORD *)__p;
    v58->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
    __p[1] = 0;
    v112 = 0;
    __p[0] = 0;
    __v.__end_ = v58 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v60 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v61 = SHIBYTE(v112);
    *(_QWORD *)(a1 + 8) = v60;
    if (v61 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v52 = *(_OWORD *)__p;
    *(_QWORD *)(v51 + 16) = v112;
    *(_OWORD *)v51 = v52;
    *(_QWORD *)(a1 + 8) = v51 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "last");
  v63 = *(_QWORD *)(a1 + 8);
  v62 = *(_QWORD *)(a1 + 16);
  if (v63 >= v62)
  {
    v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - *(_QWORD *)a1) >> 3);
    v66 = v65 + 1;
    if (v65 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - *(_QWORD *)a1) >> 3);
    if (2 * v67 > v66)
      v66 = 2 * v67;
    if (v67 >= 0x555555555555555)
      v68 = 0xAAAAAAAAAAAAAAALL;
    else
      v68 = v66;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v68)
      v69 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v68);
    else
      v69 = 0;
    v70 = v69 + v65;
    __v.__first_ = v69;
    __v.__begin_ = v70;
    __v.__end_cap_.__value_ = &v69[v68];
    v71 = *(_OWORD *)__p;
    v70->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v70->__r_.__value_.__l.__data_ = v71;
    __p[1] = 0;
    v112 = 0;
    __p[0] = 0;
    __v.__end_ = v70 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v72 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v73 = SHIBYTE(v112);
    *(_QWORD *)(a1 + 8) = v72;
    if (v73 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v64 = *(_OWORD *)__p;
    *(_QWORD *)(v63 + 16) = v112;
    *(_OWORD *)v63 = v64;
    *(_QWORD *)(a1 + 8) = v63 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "before");
  v75 = *(_QWORD *)(a1 + 8);
  v74 = *(_QWORD *)(a1 + 16);
  if (v75 >= v74)
  {
    v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *(_QWORD *)a1) >> 3);
    v78 = v77 + 1;
    if (v77 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - *(_QWORD *)a1) >> 3);
    if (2 * v79 > v78)
      v78 = 2 * v79;
    if (v79 >= 0x555555555555555)
      v80 = 0xAAAAAAAAAAAAAAALL;
    else
      v80 = v78;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v80)
      v81 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v80);
    else
      v81 = 0;
    v82 = v81 + v77;
    __v.__first_ = v81;
    __v.__begin_ = v82;
    __v.__end_cap_.__value_ = &v81[v80];
    v83 = *(_OWORD *)__p;
    v82->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v83;
    __p[1] = 0;
    v112 = 0;
    __p[0] = 0;
    __v.__end_ = v82 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v84 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v85 = SHIBYTE(v112);
    *(_QWORD *)(a1 + 8) = v84;
    if (v85 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v76 = *(_OWORD *)__p;
    *(_QWORD *)(v75 + 16) = v112;
    *(_OWORD *)v75 = v76;
    *(_QWORD *)(a1 + 8) = v75 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "after");
  v87 = *(_QWORD *)(a1 + 8);
  v86 = *(_QWORD *)(a1 + 16);
  if (v87 >= v86)
  {
    v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - *(_QWORD *)a1) >> 3);
    v90 = v89 + 1;
    if (v89 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - *(_QWORD *)a1) >> 3);
    if (2 * v91 > v90)
      v90 = 2 * v91;
    if (v91 >= 0x555555555555555)
      v92 = 0xAAAAAAAAAAAAAAALL;
    else
      v92 = v90;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v92)
      v93 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v92);
    else
      v93 = 0;
    v94 = v93 + v89;
    __v.__first_ = v93;
    __v.__begin_ = v94;
    __v.__end_cap_.__value_ = &v93[v92];
    v95 = *(_OWORD *)__p;
    v94->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v95;
    __p[1] = 0;
    v112 = 0;
    __p[0] = 0;
    __v.__end_ = v94 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v96 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v97 = SHIBYTE(v112);
    *(_QWORD *)(a1 + 8) = v96;
    if (v97 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v88 = *(_OWORD *)__p;
    *(_QWORD *)(v87 + 16) = v112;
    *(_OWORD *)v87 = v88;
    *(_QWORD *)(a1 + 8) = v87 + 24;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "of");
  v99 = *(_QWORD *)(a1 + 8);
  v98 = *(_QWORD *)(a1 + 16);
  if (v99 >= v98)
  {
    v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99 - *(_QWORD *)a1) >> 3);
    v102 = v101 + 1;
    if (v101 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - *(_QWORD *)a1) >> 3);
    if (2 * v103 > v102)
      v102 = 2 * v103;
    if (v103 >= 0x555555555555555)
      v104 = 0xAAAAAAAAAAAAAAALL;
    else
      v104 = v102;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
    if (v104)
      v105 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 16, v104);
    else
      v105 = 0;
    v106 = v105 + v101;
    __v.__first_ = v105;
    __v.__begin_ = v106;
    __v.__end_cap_.__value_ = &v105[v104];
    v107 = *(_OWORD *)__p;
    v106->__r_.__value_.__r.__words[2] = v112;
    *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v107;
    __p[1] = 0;
    v112 = 0;
    __p[0] = 0;
    __v.__end_ = v106 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
    v108 = *(_QWORD *)(a1 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v109 = SHIBYTE(v112);
    *(_QWORD *)(a1 + 8) = v108;
    if (v109 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v100 = *(_OWORD *)__p;
    *(_QWORD *)(v99 + 16) = v112;
    *(_OWORD *)v99 = v100;
    *(_QWORD *)(a1 + 8) = v99 + 24;
  }
  return a1;
}

void sub_217F64E8C(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a15);
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_217F64FCC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::set_iso_format()
{
  JUMPOUT(0x219A19390);
}

void boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::set_iso_extended_format()
{
  JUMPOUT(0x219A19390);
}

uint64_t boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  v7 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_217F65120(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[79] < 0)
    operator delete(*v4);
  if (v1[55] < 0)
    operator delete(*v3);
  if (v1[31] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::put_special(_QWORD *a1, _QWORD *a2, unsigned int *a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  char v8;

  v4 = *a3;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) > v4)
  {
    v5 = (unsigned __int8 *)(*a1 + 24 * v4);
    if ((char)v5[23] < 0)
    {
      v5 = *(unsigned __int8 **)v5;
      v6 = *(_QWORD *)(*a1 + 24 * v4 + 8);
    }
    else
    {
      v6 = v5[23];
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char const*,char const*,std::ostreambuf_iterator<char>>((uint64_t)&v8, v5, &v5[v6], a2);
  }
  return a2;
}

unsigned __int8 *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char const*,char const*,std::ostreambuf_iterator<char>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, _QWORD *a4)
{
  unsigned __int8 *v5;
  uint64_t v7;
  _BYTE *v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (a4)
      {
        v7 = *v5;
        v8 = (_BYTE *)a4[6];
        if (v8 == (_BYTE *)a4[7])
        {
          if ((*(unsigned int (**)(_QWORD *, uint64_t))(*a4 + 104))(a4, v7) == -1)
            a4 = 0;
        }
        else
        {
          a4[6] = v8 + 1;
          *v8 = v7;
        }
      }
      ++v5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::put(uint64_t a1, boost::gregorian::date *a2, uint64_t a3, uint64_t a4, boost::gregorian *this)
{
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  std::string __p;
  _BYTE v16[56];

  v9 = *(_DWORD *)this;
  if (*(_DWORD *)this != 0 && *(_DWORD *)this < 0xFFFFFFFE)
  {
    boost::gregorian::to_tm(this, (uint64_t)v16);
    if (*(char *)(a1 + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
    else
      __p = *(std::string *)(a1 + 16);
    v14 = (*(uint64_t (**)(uint64_t, boost::gregorian::date *, uint64_t, uint64_t, _BYTE *, std::string *))(*(_QWORD *)a1 + 48))(a1, a2, a3, a4, v16, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return v14;
  }
  else
  {
    if (v9 == -1)
      v10 = 2;
    else
      v10 = 5;
    if (v9)
      v11 = v10;
    else
      v11 = 1;
    if (v9 == -2)
      v12 = 0;
    else
      v12 = v11;
    return (*(uint64_t (**)(uint64_t, boost::gregorian::date *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, a3, a4, v12);
  }
}

void sub_217F65378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::gregorian::to_tm@<X0>(boost::gregorian *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5;
  uint64_t result;
  unsigned int v7;
  const std::string::value_type *v8;
  std::logic_error v9;
  std::string v10;

  if (*(_DWORD *)this == 0 || *(_DWORD *)this >= 0xFFFFFFFE)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "tm unable to handle ");
    v7 = *(_DWORD *)this + 2;
    if (v7 >= 3)
      v8 = "a special date value";
    else
      v8 = off_24D91CE00[v7];
    std::string::append(&v10, v8);
    std::logic_error::logic_error(&v9, &v10);
    v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    boost::throw_exception<std::out_of_range>(&v9);
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v5 = boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::year_month_day(this);
  *(_DWORD *)(a2 + 16) = WORD1(v5) - 1;
  *(_DWORD *)(a2 + 20) = (unsigned __int16)v5 - 1900;
  *(_DWORD *)(a2 + 12) = WORD2(v5);
  *(_DWORD *)(a2 + 24) = (unsigned __int16)boost::date_time::date<boost::gregorian::date,boost::gregorian::gregorian_calendar,boost::gregorian::date_duration>::day_of_week(this);
  result = boost::gregorian::date::day_of_year(this);
  *(_DWORD *)(a2 + 28) = (unsigned __int16)result - 1;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void sub_217F65490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::logic_error::~logic_error(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::out_of_range>(const std::logic_error *a1)
{
  void *exception;
  std::logic_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::logic_error::logic_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::logic_error_vtbl *)&unk_24D91BB20;
  v4 = &unk_24D91BB48;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::out_of_range>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F65548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::logic_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::logic_error::~logic_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

uint64_t boost::date_time::date_facet<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_facet(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_24D91CA88;
  *(_QWORD *)(a1 + 8) = a2 - 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "%Y-%b-%d");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 40), "%b");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 64), "%a");
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::period_formatter(a1 + 88, 1, "/", "[", ")", "]");
  boost::date_time::date_generator_formatter<boost::gregorian::date,char,std::ostreambuf_iterator<char>>::date_generator_formatter(a1 + 192);
  boost::date_time::special_values_formatter<char,std::ostreambuf_iterator<char>>::special_values_formatter((std::vector<std::string> *)(a1 + 216));
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  return a1;
}

void sub_217F65678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  void **v16;

  v16 = v13;
  a10 = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  boost::date_time::period_formatter<char,std::ostreambuf_iterator<char>>::~period_formatter(v15);
  if (*(char *)(v10 + 87) < 0)
    operator delete(*v14);
  if (*(char *)(v10 + 63) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 39) < 0)
    operator delete(*v11);
  std::__shared_count::~__shared_count((std::__shared_count *)v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D91CC48;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91CB60;
  *(_QWORD *)(a1 + 16) = &unk_24D91CB98;
  *(_QWORD *)(a1 + 56) = &unk_24D91CBD0;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D91CC48;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91CB60;
  *(_QWORD *)(a1 + 16) = &unk_24D91CB98;
  *(_QWORD *)(a1 + 56) = &unk_24D91CBD0;
  return a1;
}

void sub_217F657F8(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F658BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F6591C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(_QWORD *a1)
{
  std::logic_error *v1;

  v1 = (std::logic_error *)(a1 - 2);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(a1 - 16);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 2) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::logic_error::~logic_error((std::logic_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::local_time::ambiguous_result>::~error_info_injector(a1 - 16);
}

void boost::local_time::ambiguous_result::~ambiguous_result(std::logic_error *this)
{
  std::logic_error::~logic_error(this);
  JUMPOUT(0x219A19A08);
}

void sub_217F65AF0(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::local_time::ambiguous_result::ambiguous_result(std::logic_error *a1)
{
  std::string v3;

  std::operator+<char>();
  std::logic_error::logic_error(a1, &v3);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24D91CC48;
  return a1;
}

void sub_217F65B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::logic_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)&unk_24D91CDE8;
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91CD00;
  *(_QWORD *)(a1 + 16) = &unk_24D91CD38;
  *(_QWORD *)(a1 + 56) = &unk_24D91CD70;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)&unk_24D91CDE8;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91CD00;
  *(_QWORD *)(a1 + 16) = &unk_24D91CD38;
  *(_QWORD *)(a1 + 56) = &unk_24D91CD70;
  return a1;
}

void sub_217F65C48(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F65CC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F65D20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::local_time::time_label_invalid>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void sub_217F65DF0(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

std::logic_error *boost::local_time::time_label_invalid::time_label_invalid(std::logic_error *a1)
{
  std::string v3;

  std::operator+<char>();
  std::logic_error::logic_error(a1, &v3);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  a1->__vftable = (std::logic_error_vtbl *)&unk_24D91CDE8;
  return a1;
}

void sub_217F65E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t boost::date_time::base_time<boost::posix_time::ptime,boost::date_time::counted_time_system<boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>>>::operator-=(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v9 = boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::date(a1);
  v4 = *a1;
  v5 = 0x7FFFFFFFFFFFFFFELL;
  if (*a1 == 0x8000000000000000)
    v5 = 0x8000000000000000;
  if (v4 != 0x7FFFFFFFFFFFFFFFLL)
    v4 = v5;
  if ((unint64_t)(*a1 - 0x7FFFFFFFFFFFFFFELL) > 2)
    v4 = *a1 % 86400000000;
  v7 = v4;
  boost::date_time::time_duration<boost::posix_time::time_duration,boost::date_time::time_resolution_traits<boost::date_time::time_resolution_traits_adapted64_impl,(boost::date_time::time_resolutions)5,1000000,(unsigned short)6,long long>>::operator-(&v7, a2, &v8);
  boost::date_time::counted_time_rep<boost::posix_time::millisec_posix_time_system_config>::counted_time_rep(&v10, &v9, (uint64_t *)&v8);
  result = v10;
  *a1 = v10;
  return result;
}

void turi::flexible_type_impl::ndarray<double>::print(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;

  v4 = (uint64_t)(a1[3] - a1[2]) >> 3;
  v32 = 0;
  std::vector<unsigned long>::vector(&v33, v4, &v32);
  v6 = (uint64_t *)a1[2];
  v5 = (uint64_t *)a1[3];
  if (v5 == v6)
    goto LABEL_6;
  if (!*a1)
    goto LABEL_6;
  v7 = 1;
  do
  {
    v8 = *v6++;
    v7 *= v8;
  }
  while (v6 != v5);
  if (!v7)
LABEL_6:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[]", 2);
  v9 = v34;
  if (v34 == v33)
  {
    v11 = v34;
  }
  else
  {
    v10 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
      ++v10;
      v9 = v33;
      v11 = v34;
    }
    while (v10 < v34 - v33);
  }
  while (1)
  {
    v12 = 0;
    if (v11 != v9)
    {
      v13 = v11 - v9;
      v14 = (uint64_t *)a1[5];
      if (v13 <= 1)
        v13 = 1;
      do
      {
        v16 = *v9++;
        v15 = v16;
        v17 = *v14++;
        v12 += v17 * v15;
        --v13;
      }
      while (v13);
    }
    std::ostream::operator<<();
    v9 = v33;
    v11 = v34;
    v18 = v34 - v33;
    v19 = v18 - 1;
    if ((char *)v34 - (char *)v33 < 1)
    {
      v22 = v34 - v33;
      goto LABEL_23;
    }
    v20 = a1[2];
    v21 = v33[v19] + 1;
    v33[v19] = v21;
    v22 = v18;
    if (v21 >= *(_QWORD *)(v20 + 8 * v19))
      break;
LABEL_23:
    if ((v19 & 0x8000000000000000) != 0 || !v22)
      goto LABEL_34;
    v28 = v22;
    if (v22 < v18)
    {
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
        ++v28;
        v9 = v33;
        v11 = v34;
      }
      while (v28 < v34 - v33);
      v18 = v34 - v33;
    }
    if (v22 < v18)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)",", 1);
      v9 = v33;
      v11 = v34;
    }
    v29 = (char *)v11 - (char *)v9;
    v30 = v22;
    if (v22 < v11 - v9)
    {
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
        ++v30;
        v9 = v33;
        v11 = v34;
        v29 = (char *)v34 - (char *)v33;
      }
      while (v30 < v34 - v33);
    }
    if (v22 >= v29 >> 3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)",", 1);
      v9 = v33;
      v11 = v34;
    }
  }
  v23 = (unint64_t *)&v9[v18 - 2];
  v24 = v20 - 16;
  v25 = v18;
  while (1)
  {
    v22 = v25 - 1;
    v23[1] = 0;
    if ((uint64_t)(v25 - 1) <= 0)
      break;
    v26 = *v23 + 1;
    *v23-- = v26;
    v27 = *(_QWORD *)(v24 + 8 * v25--);
    if (v26 < v27)
    {
      v19 = v22 - 1;
      goto LABEL_23;
    }
  }
LABEL_34:
  if (v11 != v9)
  {
    v31 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
      ++v31;
      v11 = v33;
    }
    while (v31 < v34 - v33);
  }
  if (v11)
  {
    v34 = v11;
    operator delete(v11);
  }
}

void sub_217F661F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_217F66280(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_multi<std::pair<turi::flexible_type,turi::flexible_type> const&>((_QWORD *)a1, v5);
      v5 += 4;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_217F662FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_multi<std::pair<turi::flexible_type,turi::flexible_type> const&>(_QWORD *a1, uint64_t *a2)
{
  uint64_t inserted;
  uint64_t v5[3];

  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__construct_node<std::pair<turi::flexible_type,turi::flexible_type> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_217F66360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__construct_node<std::pair<turi::flexible_type,turi::flexible_type> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t result;

  v5 = a1 + 16;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *v6 = 0;
  v6[1] = 0;
  v7 = (unsigned __int8 *)std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>((uint64_t)(v6 + 2), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v7);
  v6[1] = result;
  return result;
}

void sub_217F663D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *inserted;

  v4 = a2 + 16;
  v5 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>((unsigned __int8 *)(a2 + 16));
  *(_QWORD *)(a2 + 8) = v5;
  inserted = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_perform(a1, (_QWORD *)a2, inserted);
  return a2;
}

uint64_t std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  if (a2 != (uint64_t *)result)
  {
    v2 = *a2;
    *(_QWORD *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)result = v2;
    LODWORD(v2) = *((unsigned __int8 *)a2 + 12);
    *(_BYTE *)(result + 12) = v2;
    v3 = v2 > 9;
    v4 = (1 << v2) & 0x33C;
    if (!v3 && v4 != 0)
    {
      v6 = *(unint64_t **)result;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  *(_QWORD *)(result + 16) = 0;
  v8 = (unint64_t **)(result + 16);
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  if (a2 != (uint64_t *)result)
  {
    v9 = (unint64_t *)a2[2];
    *(_QWORD *)(result + 21) = *(uint64_t *)((char *)a2 + 21);
    *v8 = v9;
    v10 = *((unsigned __int8 *)a2 + 28);
    *(_BYTE *)(result + 28) = v10;
    if (v10 <= 9 && ((1 << v10) & 0x33C) != 0)
    {
      v11 = *v8;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__rehash<false>(a1, v13);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = a2;
    if (v8 <= a2)
      v16 = a2 % v8;
  }
  else
  {
    v16 = (v8 - 1) & a2;
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v16);
  if (v17)
  {
    v18 = (_QWORD *)*v17;
    if (*v17)
    {
      v19 = 0;
      do
      {
        v20 = v18[1];
        if (v15 > 1)
        {
          v21 = v18[1];
          if (v20 >= v8)
            v21 = v20 % v8;
        }
        else
        {
          v21 = v20 & (v8 - 1);
        }
        if (v21 != v16)
          break;
        v22 = v20 == a2 ? std::equal_to<turi::flexible_type>::operator()[abi:ne180100](v6, v18 + 2, a3) : 0;
        if ((v19 & (v22 ^ 1) & 1) != 0)
          break;
        v19 |= v22;
        v17 = (_QWORD *)*v17;
        v18 = (_QWORD *)*v17;
      }
      while (*v17);
    }
  }
  return v17;
}

_QWORD *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = (_QWORD *)*v7;
      if (*v7)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = v12[1];
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = v12;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = (_QWORD *)*v12;
            if (*v12)
            {
              v15 = v12;
              while (1)
              {
                v16 = std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, v12 + 2, v14 + 2);
                v17 = (_QWORD *)*v15;
                if (!v16)
                  break;
                v14 = (_QWORD *)*v17;
                v15 = (_QWORD *)*v15;
                if (!*v17)
                  goto LABEL_32;
              }
              v14 = (_QWORD *)*v15;
              v17 = v15;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = v12;
            }
            *v7 = v14;
            *v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = v12;
            v8 = v13;
          }
          v12 = (_QWORD *)*v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<turi::flexible_type const,turi::flexible_type>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::pair<turi::flexible_type const,turi::flexible_type>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unsigned int v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  void *v58;
  void *v59;
  void **v61;

  switch(*(_BYTE *)(a1 + 28))
  {
    case 2:
      v2 = *(unint64_t **)(a1 + 16);
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(_QWORD *)(a1 + 16);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0)
            operator delete(*(void **)(v5 + 8));
          v6 = (_QWORD *)v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)(a1 + 16);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD **)(a1 + 16);
        if (v11)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)(a1 + 16);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(a1 + 16);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)(a1 + 16);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(_QWORD *)(a1 + 16);
        if (v16)
        {
          v61 = (void **)(v16 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_26:
          v6 = (_QWORD *)v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)(a1 + 16);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(_QWORD *)(a1 + 16);
        if (v23)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v23 + 16));
          v6 = (_QWORD *)v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)(a1 + 16);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(_QWORD **)(a1 + 16);
        if (v28)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v31 = *(unint64_t **)a1;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v34 + 31) < 0)
            operator delete((void *)v34[1]);
          v35 = v34;
          v36 = 0x1012C404EF22A49;
          goto LABEL_84;
        }
      }
      break;
    case 3:
      v37 = *(unint64_t **)a1;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v41 = (void *)v40[1];
          if (v41)
          {
            v40[2] = (unint64_t)v41;
            operator delete(v41);
          }
          v35 = v40;
          v36 = 0x1080C409938AC02;
          goto LABEL_84;
        }
      }
      break;
    case 4:
      v42 = *(unint64_t **)a1;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v45 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v61 = (void **)(v45 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v61);
          goto LABEL_68;
        }
      }
      break;
    case 5:
      v46 = *(unint64_t **)a1;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
      {
        v45 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v61 = (void **)(v45 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v61);
LABEL_68:
          v35 = v45;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_84;
        }
      }
      break;
    case 8:
      v49 = *(unint64_t **)a1;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v52 + 2);
          v35 = v52;
          v53 = -235920773;
          goto LABEL_83;
        }
      }
      break;
    case 9:
      v54 = *(unint64_t **)a1;
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v58 = (void *)v57[6];
          if (v58)
          {
            v57[7] = (unint64_t)v58;
            operator delete(v58);
          }
          v59 = (void *)v57[3];
          if (v59)
          {
            v57[4] = (unint64_t)v59;
            operator delete(v59);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v57 + 1));
          v35 = v57;
          v53 = 2071181815;
LABEL_83:
          v36 = v53 | 0x1030C4000000000;
LABEL_84:
          MEMORY[0x219A19A08](v35, v36);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<turi::flexible_type const,turi::flexible_type>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__equal_range_multi<turi::flexible_type>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v4 = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>(a1, a2);
  v5 = v4;
  if (v4)
  {
    v6 = (uint64_t)(a1 + 4);
    v7 = v4;
    do
      v7 = *(unsigned __int8 **)v7;
    while (v7 && (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](v6, v7 + 16, (uint64_t)a2) & 1) != 0);
  }
  return v5;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<turi::flexible_type>::operator()[abi:ne180100](v12, v11 + 16, (uint64_t)a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__is_permutation[abi:ne180100]<std::_ClassicAlgPolicy,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__equal_to &>(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  _QWORD *v9;

  v5 = a1;
  if (a1 != a2)
  {
    while (std::operator==[abi:ne180100]<turi::flexible_type const,turi::flexible_type,turi::flexible_type const,turi::flexible_type>(v5 + 16, (uint64_t)(a3 + 2)))
    {
      v5 = *(unsigned __int8 **)v5;
      a3 = (_QWORD *)*a3;
      if (v5 == a2)
        return 1;
    }
  }
  if (v5 == a2)
    return 1;
  v6 = 1;
  v7 = v5;
  do
  {
    v7 = *(unsigned __int8 **)v7;
    ++v6;
  }
  while (v7 != a2);
  if (v6 == 2)
    return 0;
  v9 = a3;
  do
  {
    v9 = (_QWORD *)*v9;
    --v6;
  }
  while (v6 > 1);
  return std::__is_permutation_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__identity,std::__identity,std::__equal_to &>(v5, a2, a3, v9);
}

uint64_t std::__is_permutation_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *> *>>,std::__identity,std::__identity,std::__equal_to &>(unsigned __int8 *a1, unsigned __int8 *a2, _QWORD *a3, _QWORD *a4)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t v13;

  if (a1 == a2)
    return 1;
  v8 = a1;
  while (1)
  {
    if (v8 == a1)
    {
      v9 = a1;
    }
    else
    {
      v9 = a1;
      while ((std::operator==[abi:ne180100]<turi::flexible_type const,turi::flexible_type,turi::flexible_type const,turi::flexible_type>(v9 + 16, (uint64_t)(v8 + 16)) & 1) == 0)
      {
        v9 = *(unsigned __int8 **)v9;
        if (v9 == v8)
          goto LABEL_10;
      }
    }
    if (v9 != v8)
      goto LABEL_18;
LABEL_10:
    if (a3 == a4)
      return 0;
    v10 = 0;
    v11 = a3;
    do
    {
      v10 += std::operator==[abi:ne180100]<turi::flexible_type const,turi::flexible_type,turi::flexible_type const,turi::flexible_type>(v8 + 16, (uint64_t)(v11 + 2));
      v11 = (_QWORD *)*v11;
    }
    while (v11 != a4);
    if (!v10)
      return 0;
    v12 = *(unsigned __int8 **)v8;
    v13 = 1;
    while (v12 != a2)
    {
      v13 += std::operator==[abi:ne180100]<turi::flexible_type const,turi::flexible_type,turi::flexible_type const,turi::flexible_type>(v8 + 16, (uint64_t)(v12 + 16));
      v12 = *(unsigned __int8 **)v12;
    }
    if (v13 != v10)
      return 0;
LABEL_18:
    v8 = *(unsigned __int8 **)v8;
    if (v8 == a2)
      return 1;
  }
}

uint64_t std::operator==[abi:ne180100]<turi::flexible_type const,turi::flexible_type,turi::flexible_type const,turi::flexible_type>(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  double v44;
  double v45;
  unsigned int v46;
  BOOL v47;
  double v48;
  double v49;
  char v50;
  size_t v51;
  uint64_t v52;
  unsigned int v53;
  double *v54;
  double *v55;
  unint64_t v56;
  double *v57;
  unsigned int v58;
  unsigned int v59;
  double v60;
  uint64_t *v61;
  uint64_t *v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  double v67;
  unsigned int v69;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  unsigned int v74;
  double *v75;
  double *v76;
  unint64_t v77;
  double *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  double v125;
  double v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  size_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  char v135;
  char v136;
  _QWORD v137[5];
  void *__p;
  uint64_t *v139;

  switch(*(_BYTE *)(a2 + 12))
  {
    case 0:
      switch(a1[12])
      {
        case 0u:
          if (*(_QWORD *)a1 == *(_QWORD *)a2)
            goto LABEL_94;
          return 0;
        case 1u:
          v29 = *(double *)a1;
          v52 = *(_QWORD *)a2;
          goto LABEL_88;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (*(_QWORD *)a2 == (uint64_t)(*(_QWORD *)a1 << 8) >> 8 && !*((_DWORD *)a1 + 2))
            goto LABEL_94;
          return 0;
        default:
          goto LABEL_215;
      }
    case 1:
      switch(a1[12])
      {
        case 0u:
          v29 = *(double *)a2;
          v52 = *(_QWORD *)a1;
LABEL_88:
          v36 = (double)v52;
          goto LABEL_89;
        case 1u:
          v29 = *(double *)a1;
          v36 = *(double *)a2;
          goto LABEL_89;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          v67 = vabdd_f64((double)*((int *)a1 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a1 << 8) >> 8), *(double *)a2);
          goto LABEL_93;
        default:
          goto LABEL_215;
      }
    case 2:
      v46 = a1[12];
      v47 = v46 - 3 >= 7 && v46 >= 2;
      if (!v47)
        return 0;
      if (v46 != 2)
        goto LABEL_215;
      v48 = *(double *)a2;
      v49 = *(double *)a1;
      v50 = *(_BYTE *)(*(_QWORD *)a1 + 31);
      if (v50 < 0)
        v51 = *(_QWORD *)(*(_QWORD *)&v49 + 16);
      else
        v51 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
      if (*(char *)(*(_QWORD *)&v48 + 31) < 0)
        v122 = *(_QWORD *)(*(_QWORD *)&v48 + 16);
      else
        v122 = *(unsigned __int8 *)(*(_QWORD *)&v48 + 31);
      if (v51 != v122)
        return 0;
      v123 = (unsigned __int8 *)(*(_QWORD *)&v49 + 8);
      if (v50 < 0)
        v123 = *(unsigned __int8 **)v123;
      v124 = (unsigned __int8 *)(*(_QWORD *)&v48 + 8);
      if ((*(_BYTE *)(*(_QWORD *)&v48 + 31) & 0x80) != 0)
        v124 = *(unsigned __int8 **)v124;
      if (v50 < 0)
      {
        if (memcmp(v123, v124, v51))
          return 0;
      }
      else
      {
        if (!v51)
          goto LABEL_94;
        do
        {
          if (*v123 != *v124)
            return 0;
          ++v123;
          ++v124;
          --v51;
        }
        while (v51);
      }
      goto LABEL_94;
    case 3:
      v53 = a1[12];
      if (v53 > 9)
        goto LABEL_215;
      if (v53 != 3)
        return 0;
      v54 = *(double **)(*(_QWORD *)a1 + 8);
      v55 = *(double **)(*(_QWORD *)a1 + 16);
      v56 = v55 - v54;
      v57 = *(double **)(*(_QWORD *)a2 + 8);
      if (v56 != (uint64_t)(*(_QWORD *)(*(_QWORD *)a2 + 16) - (_QWORD)v57) >> 3)
        return 0;
      if (v55 == v54)
        goto LABEL_94;
      if (v56 <= 1)
        v56 = 1;
      while (*v54 == *v57)
      {
        ++v54;
        ++v57;
        if (!--v56)
          goto LABEL_94;
      }
      return 0;
    case 4:
      v4 = *(_QWORD *)a2 + 8;
      __p = &v136;
      v139 = (uint64_t *)v4;
      v5 = a1[12];
      if (v5 > 9)
        goto LABEL_215;
      if (v5 == 4
        && (turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::approx_equality_operator,std::vector<turi::flexible_type>>::operator()<std::vector<turi::flexible_type> const>((uint64_t)&__p, (uint64_t *)(*(_QWORD *)a1 + 8)) & 1) != 0)
      {
        goto LABEL_94;
      }
      return 0;
    case 5:
      v59 = a1[12];
      if (v59 > 9)
        goto LABEL_215;
      if (v59 == 5)
      {
        v60 = *(double *)a2;
        v61 = *(uint64_t **)(*(_QWORD *)a1 + 8);
        v62 = *(uint64_t **)(*(_QWORD *)a1 + 16);
        if ((char *)v62 - (char *)v61 == *(_QWORD *)(*(_QWORD *)a2 + 16) - *(_QWORD *)(*(_QWORD *)a2 + 8))
        {
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)&__p, v61, v62);
          std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v137, *(uint64_t **)(*(_QWORD *)&v60 + 8), *(uint64_t **)(*(_QWORD *)&v60 + 16));
          v63 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(&__p, v137);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v137);
          std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&__p);
          if ((v63 & 1) != 0)
            goto LABEL_94;
        }
      }
      return 0;
    case 6:
      switch(a1[12])
      {
        case 0u:
          if (*(_QWORD *)a1 == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*(_DWORD *)(a2 + 8))
            goto LABEL_94;
          return 0;
        case 1u:
          v67 = vabdd_f64(*(double *)a1, (double)*(int *)(a2 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8));
LABEL_93:
          if (v67 < 0.0000005)
            goto LABEL_94;
          return 0;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return 0;
        case 6u:
          if (((*(_QWORD *)a2 ^ *(_QWORD *)a1) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a1 + 2) == *(_DWORD *)(a2 + 8))
            goto LABEL_94;
          return 0;
        default:
          goto LABEL_215;
      }
    case 7:
      v58 = a1[12];
      if (v58 < 7 || v58 - 8 < 2)
        return 0;
      if (v58 != 7)
        goto LABEL_215;
      goto LABEL_94;
    case 8:
      v64 = a1[12];
      if (v64 < 8)
        return 0;
      if (v64 != 8)
      {
        if (v64 != 9)
LABEL_215:
          turi::flexible_type_fail(BOOL)::$_0::operator()();
        return 0;
      }
      if (!turi::image_type::operator==(*(_QWORD *)a1 + 8, *(_QWORD *)a2 + 8))
        return 0;
      goto LABEL_94;
    case 9:
      v6 = a1[12];
      if (v6 < 9)
        return 0;
      if (v6 != 9)
        goto LABEL_215;
      v7 = *(double *)a2;
      v8 = *(_QWORD **)a1;
      if (*(_QWORD *)a2 == *(_QWORD *)a1)
        goto LABEL_94;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v8 + 1), *(_QWORD *)&v7 + 8))
        return 0;
      v10 = (char *)v8[3];
      v9 = (char *)v8[4];
      v11 = v9 - v10;
      if (v9 == v10)
        goto LABEL_94;
      if (!v8[1])
        goto LABEL_94;
      v12 = 1;
      do
      {
        v13 = *(_QWORD *)v10;
        v10 += 8;
        v12 *= v13;
      }
      while (v10 != v9);
      if (!v12)
        goto LABEL_94;
      v137[0] = 0;
      std::vector<unsigned long>::vector(&__p, v11 >> 3, v137);
      v14 = (uint64_t *)__p;
      v15 = v139;
      v16 = **(_QWORD **)(*(_QWORD *)&v7 + 8);
      v17 = (char *)v139 - (_BYTE *)__p;
      v18 = ((char *)v139 - (_BYTE *)__p) >> 3;
      v19 = v18 - 1;
      if (v18 <= 1)
        v20 = 1;
      else
        v20 = ((char *)v139 - (_BYTE *)__p) >> 3;
      break;
    default:
      goto LABEL_215;
  }
  do
  {
    if (v15 == v14)
    {
      v28 = 0;
      v29 = *(double *)(*(_QWORD *)v8[1] + 8 * v8[9]);
    }
    else
    {
      v21 = 0;
      v22 = (uint64_t *)v8[6];
      v23 = v14;
      v24 = v20;
      do
      {
        v26 = *v23++;
        v25 = v26;
        v27 = *v22++;
        v21 += v27 * v25;
        --v24;
      }
      while (v24);
      v28 = 0;
      v29 = *(double *)(*(_QWORD *)v8[1] + 8 * (v8[9] + v21));
      v30 = *(uint64_t **)(*(_QWORD *)&v7 + 48);
      v31 = v14;
      v32 = v20;
      do
      {
        v34 = *v31++;
        v33 = v34;
        v35 = *v30++;
        v28 += v35 * v33;
        --v32;
      }
      while (v32);
    }
    v36 = *(double *)(v16 + 8 * (*(_QWORD *)(*(_QWORD *)&v7 + 72) + v28));
    if (v29 != v36)
      break;
    v37 = v18;
    v38 = v18 - 1;
    if (v17 >= 1)
    {
      v39 = v8[3];
      v40 = v14[v19] + 1;
      v14[v19] = v40;
      v41 = (v17 & 0xFFFFFFFFFFFFFFF8) - 16;
      v38 = v18 - 1;
      if (v40 >= *(_QWORD *)(v39 + 8 * v19))
      {
        while (1)
        {
          *(uint64_t *)((char *)v14 + v41 + 8) = 0;
          if (v38 <= 0)
            break;
          --v38;
          v42 = *(uint64_t *)((char *)v14 + v41) + 1;
          *(uint64_t *)((char *)v14 + v41) = v42;
          v43 = *(_QWORD *)(v39 + v41);
          v41 -= 8;
          if (v42 < v43)
          {
            v37 = 1;
            goto LABEL_35;
          }
        }
        v139 = v14;
        operator delete(v14);
        goto LABEL_94;
      }
      v37 = 1;
      v38 = v18 - 1;
    }
LABEL_35:
    ;
  }
  while ((v38 & 0x8000000000000000) == 0 && v37);
  if (v14)
  {
    v139 = v14;
    v44 = v29;
    v45 = v36;
    operator delete(v14);
    if (v44 != v45)
      return 0;
  }
  else
  {
LABEL_89:
    if (v29 != v36)
      return 0;
  }
LABEL_94:
  switch(*(_BYTE *)(a2 + 28))
  {
    case 0:
      v65 = 0;
      switch(a1[28])
      {
        case 0u:
          return *((_QWORD *)a1 + 2) == *(_QWORD *)(a2 + 16);
        case 1u:
          v112 = *((double *)a1 + 2);
          v113 = *(_QWORD *)(a2 + 16);
          return v112 == (double)v113;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v65;
        case 6u:
          return *(_QWORD *)(a2 + 16) == (uint64_t)(*((_QWORD *)a1 + 2) << 8) >> 8 && *((_DWORD *)a1 + 6) == 0;
        default:
          goto LABEL_215;
      }
    case 1:
      v65 = 0;
      switch(a1[28])
      {
        case 0u:
          v112 = *(double *)(a2 + 16);
          v113 = *((_QWORD *)a1 + 2);
          return v112 == (double)v113;
        case 1u:
          return *((double *)a1 + 2) == *(double *)(a2 + 16);
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v65;
        case 6u:
          v125 = *(double *)(a2 + 16);
          v126 = (double)*((int *)a1 + 6) / 1000000.0 + (double)((uint64_t)(*((_QWORD *)a1 + 2) << 8) >> 8);
          return vabdd_f64(v126, v125) < 0.0000005;
        default:
          goto LABEL_215;
      }
    case 2:
      v69 = a1[28];
      if (v69 - 3 < 7 || v69 < 2)
        return 0;
      if (v69 != 2)
        goto LABEL_215;
      v71 = *(_QWORD *)(a2 + 16);
      v72 = *((_QWORD *)a1 + 2);
      if (*(char *)(v72 + 31) < 0)
        v73 = *(_QWORD *)(v72 + 16);
      else
        v73 = *(unsigned __int8 *)(v72 + 31);
      if (*(char *)(v71 + 31) < 0)
        v127 = *(_QWORD *)(v71 + 16);
      else
        v127 = *(unsigned __int8 *)(v71 + 31);
      if (v73 != v127)
        return 0;
      v128 = (_QWORD *)(v72 + 8);
      if ((*(_BYTE *)(v72 + 31) & 0x80) != 0)
        v128 = (_QWORD *)*v128;
      v129 = (_QWORD *)(v71 + 8);
      if ((*(_BYTE *)(v71 + 31) & 0x80) != 0)
        v129 = (_QWORD *)*v129;
      if ((*(_BYTE *)(v72 + 31) & 0x80) != 0)
      {
        return memcmp(v128, v129, v73) == 0;
      }
      else if (v73)
      {
        v130 = v73 - 1;
        do
        {
          v132 = *(unsigned __int8 *)v128;
          v128 = (_QWORD *)((char *)v128 + 1);
          v131 = v132;
          v134 = *(unsigned __int8 *)v129;
          v129 = (_QWORD *)((char *)v129 + 1);
          v133 = v134;
          v47 = v130-- != 0;
          v135 = v47;
          v65 = v131 == v133;
        }
        while (v131 == v133 && (v135 & 1) != 0);
      }
      else
      {
        return 1;
      }
      return v65;
    case 3:
      v74 = a1[28];
      if (v74 > 9)
        goto LABEL_215;
      if (v74 != 3)
        return 0;
      v75 = *(double **)(*((_QWORD *)a1 + 2) + 8);
      v76 = *(double **)(*((_QWORD *)a1 + 2) + 16);
      v77 = v76 - v75;
      v78 = *(double **)(*(_QWORD *)(a2 + 16) + 8);
      if (v77 != (uint64_t)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16) - (_QWORD)v78) >> 3)
        return 0;
      if (v76 == v75)
        return 1;
      if (v77 <= 1)
        v79 = 1;
      else
        v79 = v76 - v75;
      if (*v75 != *v78)
        return 0;
      v80 = 1;
      do
      {
        v81 = v80;
        if (v79 == v80)
          break;
        v82 = v75[v80];
        v83 = v78[v80++];
      }
      while (v82 == v83);
      return v81 >= v77;
    case 4:
      v84 = *(_QWORD *)(a2 + 16) + 8;
      __p = v137;
      v139 = (uint64_t *)v84;
      v85 = a1[28];
      if (v85 > 9)
        goto LABEL_215;
      if (v85 != 4)
        return 0;
      return turi::flexible_type_impl::const_visitor_wrapper<turi::flexible_type_impl::approx_equality_operator,std::vector<turi::flexible_type>>::operator()<std::vector<turi::flexible_type> const>((uint64_t)&__p, (uint64_t *)(*((_QWORD *)a1 + 2) + 8));
    case 5:
      v114 = a1[28];
      if (v114 > 9)
        goto LABEL_215;
      if (v114 != 5)
        return 0;
      v115 = *(_QWORD *)(a2 + 16);
      v116 = *((_QWORD *)a1 + 2);
      v117 = *(uint64_t **)(v116 + 8);
      v118 = *(uint64_t **)(v116 + 16);
      if ((char *)v118 - (char *)v117 != *(_QWORD *)(v115 + 16) - *(_QWORD *)(v115 + 8))
        return 0;
      std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)&__p, v117, v118);
      std::unordered_multimap<turi::flexible_type,turi::flexible_type>::unordered_multimap<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t)v137, *(uint64_t **)(v115 + 8), *(uint64_t **)(v115 + 16));
      v65 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<std::pair<turi::flexible_type const,turi::flexible_type>>>(&__p, v137);
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v137);
      std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&__p);
      return v65;
    case 6:
      v65 = 0;
      switch(a1[28])
      {
        case 0u:
          return *((_QWORD *)a1 + 2) == (uint64_t)(*(_QWORD *)(a2 + 16) << 8) >> 8 && *(_DWORD *)(a2 + 24) == 0;
        case 1u:
          v126 = *((double *)a1 + 2);
          v125 = (double)*(int *)(a2 + 24) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)(a2 + 16) << 8) >> 8);
          return vabdd_f64(v126, v125) < 0.0000005;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          return v65;
        case 6u:
          return ((*(_QWORD *)(a2 + 16) ^ *((_QWORD *)a1 + 2)) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)a1 + 6) == *(_DWORD *)(a2 + 24);
        default:
          goto LABEL_215;
      }
    case 7:
      v119 = a1[28];
      if (v119 >= 0xA)
        goto LABEL_215;
      return v119 == 7;
    case 8:
      v120 = a1[28];
      if (v120 < 8 || v120 == 9)
        return 0;
      if (v120 != 8)
        goto LABEL_215;
      return turi::image_type::operator==(*((_QWORD *)a1 + 2) + 8, *(_QWORD *)(a2 + 16) + 8);
    case 9:
      v87 = a1[28];
      if (v87 < 9)
        return 0;
      if (v87 != 9)
        goto LABEL_215;
      v88 = *(_QWORD *)(a2 + 16);
      v89 = (_QWORD *)*((_QWORD *)a1 + 2);
      if ((_QWORD *)v88 == v89)
        return 1;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v89 + 1), v88 + 8))
        return 0;
      v91 = (char *)v89[3];
      v90 = (char *)v89[4];
      v92 = v90 - v91;
      if (v90 == v91)
        return 1;
      if (!v89[1])
        return 1;
      v93 = 1;
      do
      {
        v94 = *(_QWORD *)v91;
        v91 += 8;
        v93 *= v94;
      }
      while (v91 != v90);
      if (!v93)
        return 1;
      v137[0] = 0;
      std::vector<unsigned long>::vector(&__p, v92 >> 3, v137);
      break;
    default:
      goto LABEL_215;
  }
  while (1)
  {
    v95 = (uint64_t *)__p;
    if (v139 == __p)
    {
      v104 = 0;
      v105 = *(double *)(*(_QWORD *)v89[1] + 8 * v89[9]);
    }
    else
    {
      v96 = 0;
      v97 = ((char *)v139 - (_BYTE *)__p) >> 3;
      v98 = (uint64_t *)v89[6];
      if (v97 <= 1)
        v97 = 1;
      v99 = (uint64_t *)__p;
      v100 = v97;
      do
      {
        v102 = *v99++;
        v101 = v102;
        v103 = *v98++;
        v96 += v103 * v101;
        --v100;
      }
      while (v100);
      v104 = 0;
      v105 = *(double *)(*(_QWORD *)v89[1] + 8 * (v89[9] + v96));
      v106 = *(uint64_t **)(v88 + 48);
      v107 = (uint64_t *)__p;
      do
      {
        v109 = *v107++;
        v108 = v109;
        v110 = *v106++;
        v104 += v110 * v108;
        --v97;
      }
      while (v97);
    }
    v111 = *(double *)(**(_QWORD **)(v88 + 8) + 8 * (*(_QWORD *)(v88 + 72) + v104));
    v65 = v105 == v111;
    if (v105 != v111)
      break;
    if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v89 + 1), (uint64_t *)&__p))
    {
      v95 = (uint64_t *)__p;
      break;
    }
  }
  if (v95)
  {
    v139 = v95;
    operator delete(v95);
  }
  return v65;
}

void sub_217F67CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&a11);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&__p);
  _Unwind_Resume(a1);
}

__n128 OUTLINED_FUNCTION_0_4@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)(a3 + 24);
  v4 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(__n128 *)(a2 + 24) = result;
  *a1 = a2;
  *(_QWORD *)a2 = 1;
  return result;
}

void OUTLINED_FUNCTION_1_2()
{
  JUMPOUT(0x219A19A08);
}

_QWORD **OUTLINED_FUNCTION_2_1(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *result;
  *a2 = **result;
  v3 = v2[2];
  a2[1] = v2[1];
  a2[2] = v3;
  return result;
}

void OUTLINED_FUNCTION_4_1()
{
  JUMPOUT(0x219A19A08);
}

void OUTLINED_FUNCTION_6_1()
{
  unsigned int *v0;
  unsigned int v1;

  v1 = __ldxr(v0);
  __stxr(v1 + 1, v0);
}

_QWORD *OUTLINED_FUNCTION_7_1(_QWORD *result, _QWORD *a2)
{
  *a2 = result;
  *result = 1;
  return result;
}

void OUTLINED_FUNCTION_8_1()
{
  unint64_t *v0;

  __ldaxr(v0);
}

_QWORD *OUTLINED_FUNCTION_15_2()
{
  _QWORD *v0;

  return std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v0);
}

__n128 OUTLINED_FUNCTION_16_0(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_22_0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void OUTLINED_FUNCTION_26(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_34_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_36(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  operator delete(__p);
}

uint64_t _GLOBAL__sub_I_flexible_type_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double get_last_err_str@<D0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v3;
  double result;
  __int128 v5;
  uint64_t v6;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = strerror(a1);
  std::string::basic_string[abi:ne180100]<0>(&v5, v3);
  result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  a2[2] = v6;
  return result;
}

uint64_t _GLOBAL__sub_I_syserr_reporting_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void turi::flexible_type_internals::throw_type_conversion_error(turi::flexible_type_internals *this, const turi::flexible_type *a2, const char *a3)
{
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  const char *v10;
  size_t v11;
  std::runtime_error *exception;
  std::string v13;
  _QWORD v14[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Type conversion failure in flexible_type converter: expected ", 61);
  v6 = strlen((const char *)a2);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; got ", 6);
  v9 = *((char *)this + 12);
  if (v9 > 9)
    v10 = "undefined";
  else
    v10 = off_24D91CE58[v9];
  v11 = strlen(v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str();
  std::runtime_error::runtime_error(exception, &v13);
  exception->__vftable = (std::runtime_error_vtbl *)&unk_24D91CE28;
}

void sub_217F68428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  int v33;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v33 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      a16 = MEMORY[0x24BEDB848] + 16;
      if (a29 < 0)
        operator delete(a24);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x219A198F4](&a32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v32);
  goto LABEL_6;
}

void turi::flexible_type_internals::type_conversion_error::~type_conversion_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x219A19A08);
}

uint64_t _GLOBAL__sub_I_flexible_type_conversion_utilities_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void boost::spirit::utree::list_type::~list_type(boost::spirit::utree::list_type *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  switch(*((char *)this + 31) >> 1)
  {
    case 2:
      v2 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        do
        {
          v3 = *(_QWORD *)(v2 + 32);
          boost::spirit::detail::list::node::~node((boost::spirit::detail::list::node **)v2);
          MEMORY[0x219A19A08]();
          v2 = v3;
        }
        while (v3);
      }
      break;
    case 6:
      v4 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      break;
    case 10:
    case 12:
    case 13:
      if ((*((_BYTE *)this + 31) & 1) != 0 && *(_QWORD *)this)
        MEMORY[0x219A199F0]();
      break;
    default:
      break;
  }
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

uint64_t turi::flexible_type_parser::flexible_type_parser(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  char v21;
  int v22;
  std::string __p;
  std::string v25;

  v16 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>::flexible_type_parser_impl(v16, &v25, a3, a4, a5, a6, a7, a8);
  std::shared_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>::shared_ptr[abi:ne180100]<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>,void>((_QWORD *)a1, v16);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v17 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>::flexible_type_parser_impl(v17, &__p, a3, a4, a5, a6, a7, a8);
  std::shared_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>>::shared_ptr[abi:ne180100]<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>,void>((_QWORD *)(a1 + 16), v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = *(char *)(*(_QWORD *)a1 + 823);
  if (v18 >= 0)
    v19 = (unsigned __int8 *)(*(_QWORD *)a1 + 800);
  else
    v19 = *(unsigned __int8 **)(*(_QWORD *)a1 + 800);
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(*(_QWORD *)a1 + 823);
  else
    v20 = *(_QWORD *)(*(_QWORD *)a1 + 808);
  if (v20)
  {
    v21 = 1;
    while (1)
    {
      v22 = *v19;
      if (v22 == 9 || v22 == 32)
        break;
      ++v19;
      if (!--v20)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    v21 = 0;
  }
  *(_BYTE *)(a1 + 32) = v21;
  return a1;
}

void sub_217F687B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  MEMORY[0x219A19A08](v22, 0x10F2C40DFD12FE7);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_parser::general_flexible_type_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const char *v8;
  const char *v9;
  _QWORD *v10;
  uint64_t (*v11)();
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)();
  const char *i;
  const char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int64_t v20;
  const char *v22;
  _QWORD v23[2];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  memset(v23, 0, 13);
  v24 = 0;
  v8 = *a2;
  v9 = &(*a2)[a3];
  if (!*((_BYTE *)this + 32))
  {
    v13 = *(_QWORD **)this;
    v22 = &(*a2)[a3];
    v14 = (_QWORD *)(**(_QWORD **)this + 32);
    if (*(_QWORD *)(*v13 + 32))
      v15 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
    else
      v15 = 0;
    if (v15
      && boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v14))
    {
      for (i = *a2; i != v22; *a2 = ++i)
      {
        if ((boost::spirit::char_encoding::iso8859_1_char_types[*(unsigned __int8 *)i] & 0x40) == 0)
          break;
      }
      v24 = 1;
      goto LABEL_17;
    }
LABEL_20:
    v12 = 0;
    v24 = 0;
    goto LABEL_29;
  }
  v10 = (_QWORD *)(**((_QWORD **)this + 2) + 32);
  if (*v10)
    v11 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::dummy::nonnull;
  else
    v11 = 0;
  if (!v11)
    goto LABEL_20;
  v24 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v10);
  if ((v24 & 1) == 0)
  {
    v12 = 0;
LABEL_29:
    *(_QWORD *)(a4 + 5) = *(_QWORD *)((char *)v23 + 5);
    *(_QWORD *)a4 = v23[0];
    *(_BYTE *)(a4 + 12) = BYTE4(v23[1]);
    BYTE4(v23[1]) = 0;
    *(_BYTE *)(a4 + 16) = v12;
    return std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)v23);
  }
LABEL_17:
  v17 = *a2;
  if (*a2 - v8 >= (int)a3)
    goto LABEL_28;
  v18 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 823) < 0)
  {
    v19 = *(unsigned __int8 **)(v18 + 800);
    v20 = *(_QWORD *)(v18 + 808);
  }
  else
  {
    v19 = (unsigned __int8 *)(v18 + 800);
    v20 = *(unsigned __int8 *)(*(_QWORD *)this + 823);
  }
  if (v20 <= v9 - v17)
  {
    if (v20)
    {
      while (*(unsigned __int8 *)v17 == *v19)
      {
        ++v17;
        ++v19;
        v12 = 1;
        if (!--v20)
          goto LABEL_29;
      }
      goto LABEL_23;
    }
LABEL_28:
    v12 = 1;
    goto LABEL_29;
  }
LABEL_23:
  *a2 = v8;
  turi::flexible_type_parser::string_parse(this, a2, a3, a4);
  return std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)v23);
}

void sub_217F68A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *turi::flexible_type_parser::string_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t (*v8)();
  const char *i;
  const char *v11;

  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  v11 = &(*a2)[a3];
  v5 = *(_QWORD *)(*(_QWORD *)this + 736);
  v7 = *(_QWORD *)(v5 + 32);
  result = (_QWORD *)(v5 + 32);
  if (v7)
    v8 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  else
    v8 = 0;
  if (v8)
  {
    result = (_QWORD *)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(result);
    if ((_DWORD)result)
    {
      for (i = *a2; i != v11; *a2 = ++i)
      {
        if ((boost::spirit::char_encoding::iso8859_1_char_types[*(unsigned __int8 *)i] & 0x40) == 0)
          break;
      }
      LOBYTE(v8) = 1;
    }
    else
    {
      LOBYTE(v8) = 0;
    }
  }
  *(_BYTE *)(a4 + 16) = (_BYTE)v8;
  return result;
}

void sub_217F68B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

_QWORD *turi::flexible_type_parser::non_string_flexible_type_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t (*v8)();
  const char *i;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int **v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  const char *v38;
  void **v39[3];

  *a4 = 0;
  *((_DWORD *)a4 + 2) = 0;
  *((_BYTE *)a4 + 12) = 0;
  *((_BYTE *)a4 + 16) = 0;
  v38 = &(*a2)[a3];
  v5 = *(_QWORD *)(*(_QWORD *)this + 96);
  v7 = *(_QWORD *)(v5 + 32);
  result = (_QWORD *)(v5 + 32);
  if (v7)
    v8 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  else
    v8 = 0;
  if (!v8)
  {
    *((_BYTE *)a4 + 16) = 0;
LABEL_50:
    *a4 = 0;
    *((_DWORD *)a4 + 2) = 0;
    *((_BYTE *)a4 + 12) = 7;
    return result;
  }
  v39[0] = (void **)a4;
  result = (_QWORD *)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(result);
  if (!(_DWORD)result)
  {
    v11 = *((unsigned __int8 *)a4 + 12);
    *((_BYTE *)a4 + 16) = 0;
    switch(v11)
    {
      case 2:
        v12 = (unint64_t *)*a4;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = (void **)*a4;
          if (!*a4)
            goto LABEL_49;
          if (*((char *)v15 + 31) < 0)
            operator delete(v15[1]);
          v16 = v15;
          v17 = 0x1012C404EF22A49;
          goto LABEL_48;
        }
        break;
      case 3:
        v18 = (unint64_t *)*a4;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = *a4;
          if (!*a4)
            goto LABEL_49;
          v22 = (void *)v21[1];
          if (v22)
          {
            v21[2] = v22;
            operator delete(v22);
          }
          v16 = v21;
          v17 = 0x1080C409938AC02;
          goto LABEL_48;
        }
        break;
      case 4:
        v23 = (unint64_t *)*a4;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *a4;
          if (!*a4)
            goto LABEL_49;
          v39[0] = (void **)(v26 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v39);
          goto LABEL_36;
        }
        break;
      case 5:
        v27 = (unint64_t *)*a4;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v26 = *a4;
          if (!*a4)
            goto LABEL_49;
          v39[0] = (void **)(v26 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v39);
LABEL_36:
          v16 = v26;
          v17 = 0x1020C405E66F15BLL;
          goto LABEL_48;
        }
        break;
      case 8:
        v30 = (unint64_t *)*a4;
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = (unsigned int **)*a4;
          if (!*a4)
            goto LABEL_49;
          boost::detail::shared_count::~shared_count(v33 + 2);
          v16 = v33;
          v34 = -235920773;
          goto LABEL_47;
        }
        break;
      case 9:
        v35 = (unint64_t *)*a4;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          result = *a4;
          if (*a4)
          {
            v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(result);
            v34 = 2071181815;
LABEL_47:
            v17 = v34 | 0x1030C4000000000;
LABEL_48:
            result = (_QWORD *)MEMORY[0x219A19A08](v16, v17);
          }
LABEL_49:
          *a4 = 0;
        }
        break;
      default:
        goto LABEL_50;
    }
    goto LABEL_50;
  }
  for (i = *a2; i != v38; *a2 = ++i)
  {
    if ((boost::spirit::char_encoding::iso8859_1_char_types[*(unsigned __int8 *)i] & 0x40) == 0)
      break;
  }
  *((_BYTE *)a4 + 16) = 1;
  return result;
}

void sub_217F68DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

_QWORD *turi::flexible_type_parser::dict_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, _QWORD **a4@<X8>)
{
  uint64_t v6;
  _QWORD *result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int **v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  void **v36[3];
  char v37;
  const char *v38;

  *a4 = 0;
  *((_DWORD *)a4 + 2) = 0;
  *((_BYTE *)a4 + 12) = 0;
  *((_BYTE *)a4 + 16) = 0;
  v6 = *(_QWORD *)this;
  v38 = &(*a2)[a3];
  v37 = 0;
  v36[0] = (void **)a4;
  result = (_QWORD *)boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::spirit::locals<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(*(_QWORD *)(v6 + 480), (uint64_t)a2, (uint64_t)&v38, (uint64_t)v36, (uint64_t)&v37, (uint64_t)a4);
  if ((_DWORD)result)
  {
    v8 = (unsigned __int8 *)*a2;
    v9 = (unsigned __int8 *)v38;
    if (*a2 != v38)
    {
      do
      {
        if ((boost::spirit::char_encoding::iso8859_1_char_types[*v8] & 0x40) == 0)
          break;
        *a2 = (const char *)++v8;
      }
      while (v8 != v9);
    }
    *((_BYTE *)a4 + 16) = 1;
  }
  else
  {
    *((_BYTE *)a4 + 16) = 0;
    switch(*((_BYTE *)a4 + 12))
    {
      case 2:
        v10 = *a4;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = (void **)*a4;
          if (!*a4)
            goto LABEL_44;
          if (*((char *)v13 + 31) < 0)
            operator delete(v13[1]);
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v16 = *a4;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = *a4;
          if (!*a4)
            goto LABEL_44;
          v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = v20;
            operator delete(v20);
          }
          v14 = v19;
          v15 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v21 = *a4;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v24 = (char *)*a4;
          if (!*a4)
            goto LABEL_44;
          v36[0] = (void **)(v24 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v36);
          goto LABEL_31;
        }
        break;
      case 5:
        v25 = *a4;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v24 = (char *)*a4;
          if (!*a4)
            goto LABEL_44;
          v36[0] = (void **)(v24 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v36);
LABEL_31:
          v14 = v24;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v28 = *a4;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = (unsigned int **)*a4;
          if (!*a4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count(v31 + 2);
          v14 = v31;
          v32 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v33 = *a4;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          if (*a4)
          {
            v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a4);
            v32 = 2071181815;
LABEL_42:
            v15 = v32 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v14, v15);
          }
LABEL_44:
          *a4 = 0;
        }
        break;
      default:
        break;
    }
    *a4 = 0;
    *((_DWORD *)a4 + 2) = 0;
    *((_BYTE *)a4 + 12) = 5;
    result = (_QWORD *)operator new();
    *result = 0;
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
    *a4 = result;
    *result = 1;
  }
  return result;
}

void sub_217F69098(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

_QWORD *turi::flexible_type_parser::recursive_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, _QWORD **a4@<X8>)
{
  uint64_t v6;
  _QWORD *result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int **v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  void **v36[3];
  char v37;
  const char *v38;

  *a4 = 0;
  *((_DWORD *)a4 + 2) = 0;
  *((_BYTE *)a4 + 12) = 0;
  *((_BYTE *)a4 + 16) = 0;
  v6 = *(_QWORD *)this;
  v38 = &(*a2)[a3];
  v37 = 0;
  v36[0] = (void **)a4;
  result = (_QWORD *)boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::spirit::locals<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(*(_QWORD *)(v6 + 608), (uint64_t)a2, (uint64_t)&v38, (uint64_t)v36, (uint64_t)&v37, (uint64_t)a4);
  if ((_DWORD)result)
  {
    v8 = (unsigned __int8 *)*a2;
    v9 = (unsigned __int8 *)v38;
    if (*a2 != v38)
    {
      do
      {
        if ((boost::spirit::char_encoding::iso8859_1_char_types[*v8] & 0x40) == 0)
          break;
        *a2 = (const char *)++v8;
      }
      while (v8 != v9);
    }
    *((_BYTE *)a4 + 16) = 1;
  }
  else
  {
    *((_BYTE *)a4 + 16) = 0;
    switch(*((_BYTE *)a4 + 12))
    {
      case 2:
        v10 = *a4;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = (void **)*a4;
          if (!*a4)
            goto LABEL_44;
          if (*((char *)v13 + 31) < 0)
            operator delete(v13[1]);
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v16 = *a4;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = *a4;
          if (!*a4)
            goto LABEL_44;
          v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = v20;
            operator delete(v20);
          }
          v14 = v19;
          v15 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v21 = *a4;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v24 = (char *)*a4;
          if (!*a4)
            goto LABEL_44;
          v36[0] = (void **)(v24 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v36);
          goto LABEL_31;
        }
        break;
      case 5:
        v25 = *a4;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v24 = (char *)*a4;
          if (!*a4)
            goto LABEL_44;
          v36[0] = (void **)(v24 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v36);
LABEL_31:
          v14 = v24;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v28 = *a4;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = (unsigned int **)*a4;
          if (!*a4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count(v31 + 2);
          v14 = v31;
          v32 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v33 = *a4;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          if (*a4)
          {
            v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a4);
            v32 = 2071181815;
LABEL_42:
            v15 = v32 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v14, v15);
          }
LABEL_44:
          *a4 = 0;
        }
        break;
      default:
        break;
    }
    *a4 = 0;
    *((_DWORD *)a4 + 2) = 0;
    *((_BYTE *)a4 + 12) = 4;
    result = (_QWORD *)operator new();
    *result = 0;
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
    *a4 = result;
    *result = 1;
  }
  return result;
}

void sub_217F69344(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_parser::vector_parse@<X0>(turi::flexible_type_parser *this@<X0>, const char **a2@<X1>, uint64_t a3@<X2>, _QWORD **a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int **v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  void **v36[3];
  char v37;
  const char *v38;

  *a4 = 0;
  *((_DWORD *)a4 + 2) = 0;
  *((_BYTE *)a4 + 12) = 0;
  *((_BYTE *)a4 + 16) = 0;
  v6 = *(_QWORD *)this;
  v38 = &(*a2)[a3];
  v37 = 0;
  v36[0] = (void **)a4;
  result = boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::spirit::locals<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(*(_QWORD *)(v6 + 672), (uint64_t)a2, (uint64_t)&v38, (uint64_t)v36, (uint64_t)&v37, (uint64_t)a4);
  if ((_DWORD)result)
  {
    v8 = (unsigned __int8 *)*a2;
    v9 = (unsigned __int8 *)v38;
    if (*a2 != v38)
    {
      do
      {
        if ((boost::spirit::char_encoding::iso8859_1_char_types[*v8] & 0x40) == 0)
          break;
        *a2 = (const char *)++v8;
      }
      while (v8 != v9);
    }
    *((_BYTE *)a4 + 16) = 1;
  }
  else
  {
    *((_BYTE *)a4 + 16) = 0;
    switch(*((_BYTE *)a4 + 12))
    {
      case 2:
        v10 = *a4;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = (void **)*a4;
          if (!*a4)
            goto LABEL_44;
          if (*((char *)v13 + 31) < 0)
            operator delete(v13[1]);
          v14 = v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v16 = *a4;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = *a4;
          if (!*a4)
            goto LABEL_44;
          v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = v20;
            operator delete(v20);
          }
          v14 = v19;
          v15 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v21 = *a4;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v24 = (char *)*a4;
          if (!*a4)
            goto LABEL_44;
          v36[0] = (void **)(v24 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v36);
          goto LABEL_31;
        }
        break;
      case 5:
        v25 = *a4;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v24 = (char *)*a4;
          if (!*a4)
            goto LABEL_44;
          v36[0] = (void **)(v24 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v36);
LABEL_31:
          v14 = v24;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v28 = *a4;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = (unsigned int **)*a4;
          if (!*a4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count(v31 + 2);
          v14 = v31;
          v32 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v33 = *a4;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          if (*a4)
          {
            v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a4);
            v32 = 2071181815;
LABEL_42:
            v15 = v32 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v14, v15);
          }
LABEL_44:
          *a4 = 0;
        }
        break;
      default:
        break;
    }
    *a4 = 0;
    *((_DWORD *)a4 + 2) = 0;
    *((_BYTE *)a4 + 12) = 3;
    result = operator new();
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 8) = 0;
    *a4 = (_QWORD *)result;
    *(_QWORD *)result = 1;
  }
  return result;
}

void sub_217F695F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_parser::double_parse@<X0>(const char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  unsigned __int8 *v7;
  const char *v8;
  double v9;
  char v10;
  double *v11;
  char v12;
  const char *v13;

  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  v9 = 0.0;
  v13 = &(*a1)[a2];
  v12 = 0;
  v11 = &v9;
  result = boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>((uint64_t)&v10, (unsigned __int8 **)a1, (unsigned __int8 **)&v13, (uint64_t)&v11, (uint64_t)&v12, &v9);
  if ((result & 1) != 0)
  {
    v7 = (unsigned __int8 *)*a1;
    v8 = v13;
    if (*a1 != v13)
    {
      do
      {
        if ((boost::spirit::char_encoding::iso8859_1_char_types[*v7] & 0x40) == 0)
          break;
        *a1 = (const char *)++v7;
      }
      while (v7 != (unsigned __int8 *)v8);
    }
    *(_BYTE *)(a3 + 16) = 1;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 1;
    *(double *)a3 = v9;
  }
  else
  {
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

void sub_217F696C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_parser::int_parse@<X0>(const char **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  const char *v7;
  const char *i;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  char v12;
  const char *v13;

  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  v9 = 0;
  v13 = &(*a1)[a2];
  v12 = 0;
  v11 = &v9;
  result = boost::spirit::qi::any_int_parser<long long,10u,1u,-1>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,long long>((uint64_t)&v10, (uint64_t *)a1, (uint64_t *)&v13, (uint64_t)&v11, (uint64_t)&v12, &v9);
  if ((result & 1) != 0)
  {
    v7 = *a1;
    for (i = v13; v7 != i; *a1 = ++v7)
    {
      if ((boost::spirit::char_encoding::iso8859_1_char_types[*(unsigned __int8 *)v7] & 0x40) == 0)
        break;
    }
    *(_BYTE *)(a3 + 16) = 1;
    *(_DWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 12) = 0;
    *(_QWORD *)a3 = v9;
  }
  else
  {
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

void sub_217F697A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::pair<turi::flexible_type,BOOL>::~pair(v1);
  _Unwind_Resume(a1);
}

void boost::spirit::utree::~utree(boost::spirit::utree *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  switch(*((char *)this + 31) >> 1)
  {
    case 2:
      v2 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        do
        {
          v3 = *(_QWORD *)(v2 + 32);
          boost::spirit::detail::list::node::~node((boost::spirit::detail::list::node **)v2);
          MEMORY[0x219A19A08]();
          v2 = v3;
        }
        while (v3);
      }
      break;
    case 6:
      v4 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      break;
    case 10:
    case 12:
    case 13:
      if ((*((_BYTE *)this + 31) & 1) != 0 && *(_QWORD *)this)
        MEMORY[0x219A199F0]();
      break;
    default:
      break;
  }
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  switch(*((char *)this + 31) >> 1)
  {
    case 2:
      v2 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        do
        {
          v3 = *(_QWORD *)(v2 + 32);
          boost::spirit::detail::list::node::~node((boost::spirit::detail::list::node **)v2);
          MEMORY[0x219A19A08]();
          v2 = v3;
        }
        while (v3);
      }
      break;
    case 6:
      v4 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      break;
    case 10:
    case 12:
    case 13:
      if ((*((_BYTE *)this + 31) & 1) != 0 && *(_QWORD *)this)
        MEMORY[0x219A199F0]();
      break;
    default:
      break;
  }
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

boost::spirit::utree::list_type *boost::spirit::utree::list_type::list_type(boost::spirit::utree::list_type *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  boost::spirit::utree::ensure_list_type((uint64_t)this, "list_type()");
  return this;
}

void sub_217F698A4(_Unwind_Exception *a1)
{
  boost::spirit::utree *v1;

  boost::spirit::utree::~utree(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::utree::ensure_list_type(uint64_t this, char *a2)
{
  char v2;
  int v3;
  uint64_t v4;
  std::string *v5;
  _BYTE v6[32];
  std::string v7;

  v2 = *(_BYTE *)(this + 31);
  v3 = v2 >> 1;
  if (v3 != 2)
  {
    if (v3)
    {
      v4 = this;
      std::string::basic_string[abi:ne180100]<0>(&v7, a2);
      std::string::append(&v7, "called on non-list and non-invalid utree type");
      if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = &v7;
      else
        v5 = (std::string *)v7.__r_.__value_.__r.__words[0];
      boost::spirit::bad_type_exception::bad_type_exception((uint64_t)v6, (const char *)v5, *(char *)(v4 + 31) >> 1);
      boost::exception_detail::throw_exception_<boost::spirit::bad_type_exception>((uint64_t)v6, (uint64_t)"void boost::spirit::utree::ensure_list_type(const char *)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/spirit/home/support/utree/detail/utree_detail2.hpp", 1424);
    }
    *(_BYTE *)(this + 31) = v2 & 1 | 4;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)this = 0;
  }
  return this;
}

void sub_217F69960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  boost::spirit::bad_type_exception::~bad_type_exception(&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void boost::exception_detail::throw_exception_<boost::spirit::bad_type_exception>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE v7[48];
  uint64_t v8;
  uint64_t v9;
  int v10;

  boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>::error_info_injector((uint64_t)v7, a1);
  v8 = a2;
  v9 = a3;
  v10 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>((uint64_t)v7);
}

void sub_217F69A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  a14 = &unk_24D918C48;
  if (a15)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a15 + 32))(a15))
      a15 = 0;
  }
  boost::spirit::bad_type_exception::~bad_type_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>(uint64_t a1)
{
  void *exception;
  uint64_t v3;
  void *v4;
  std::string v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  int v9;

  exception = __cxa_allocate_exception(0x50uLL);
  v4 = &unk_24D91D048;
  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    v5 = *(std::string *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 40);
  v6 = &unk_24D918C48;
  v7 = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v8 = *(_OWORD *)(a1 + 48);
  v9 = *(_DWORD *)(a1 + 64);
  v4 = &unk_24D91D000;
  v6 = &unk_24D91D028;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone_impl((uint64_t)exception, (uint64_t)&v4);
}

void sub_217F69BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  boost::spirit::bad_type_exception::~bad_type_exception(&a10);
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  boost::spirit::bad_type_exception::~bad_type_exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  boost::spirit::bad_type_exception::~bad_type_exception((std::exception *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 72) = &unk_24D918BA8;
  *(_QWORD *)a1 = &unk_24D91D048;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)a1 = &unk_24D91CF60;
  *(_QWORD *)(a1 + 32) = &unk_24D91CF98;
  *(_QWORD *)(a1 + 72) = &unk_24D91CFD0;
  boost::exception_detail::copy_boost_exception(a1 + 32, a2 + 32);
  return a1;
}

{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 72) = &unk_24D918BA8;
  *(_QWORD *)a1 = &unk_24D91D048;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)a1 = &unk_24D91CF60;
  *(_QWORD *)(a1 + 32) = &unk_24D91CF98;
  *(_QWORD *)(a1 + 72) = &unk_24D91CFD0;
  return a1;
}

void sub_217F69D44(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  boost::spirit::bad_type_exception::~bad_type_exception((std::exception *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::spirit::bad_type_exception::what(boost::spirit::bad_type_exception *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F69E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F3C402ED5D3D6);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F69E94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl(_QWORD *a1)
{
  std::exception *v1;

  v1 = (std::exception *)(a1 - 4);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::spirit::bad_type_exception::~bad_type_exception(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl(a1 - 32);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 4) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 5);
  boost::spirit::bad_type_exception::~bad_type_exception((std::exception *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::spirit::bad_type_exception::~bad_type_exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_24D91D048;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  boost::spirit::bad_type_exception::~bad_type_exception(this);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>::~error_info_injector(a1 - 32);
}

void sub_217F6A0CC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::spirit::bad_type_exception>::error_info_injector(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *(_QWORD *)a1 = &unk_24D91D048;
  v3 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_QWORD *)a1 = &unk_24D91D000;
  *(_QWORD *)(a1 + 32) = &unk_24D91D028;
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_217F6A170(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::bad_type_exception::bad_type_exception(uint64_t a1, const char *a2, unsigned int a3)
{
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  *(_QWORD *)a1 = &unk_24D91D048;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"utree: ", 7);
  v8 = strlen(a2);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (got utree type '", 18);
  v11 = boost::spirit::operator<<(v10, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"')", 2);
  std::stringbuf::str();
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v6);
  *(_OWORD *)v6 = v13;
  *(_QWORD *)(v6 + 16) = v14;
  v15[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v15[1] = MEMORY[0x24BEDB848] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&v17);
  return a1;
}

void sub_217F6A2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v5;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  if (*(char *)(v4 + 31) < 0)
    operator delete(*v5);
  std::exception::~exception((std::exception *)v4);
  _Unwind_Resume(a1);
}

_QWORD *boost::spirit::operator<<(_QWORD *a1, unsigned int a2)
{
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  std::locale v8[9];

  boost::io::basic_ios_all_saver<char,std::char_traits<char>>::basic_ios_all_saver((uint64_t)v8, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  if (a2 >= 0xE)
  {
    v4 = "unknown";
    v5 = 7;
  }
  else
  {
    v4 = off_24D91D590[a2];
    v5 = *(_QWORD *)&asc_2186CE7F8[8 * a2];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v5);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = *(_DWORD *)((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[0x", 3);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"]", 1);
  boost::io::basic_ios_all_saver<char,std::char_traits<char>>::~basic_ios_all_saver(v8);
  return a1;
}

void sub_217F6A3D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::io::basic_ios_all_saver<char,std::char_traits<char>>::~basic_ios_all_saver((std::locale *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::io::basic_ios_all_saver<char,std::char_traits<char>>::basic_ios_all_saver(uint64_t a1, std::ios_base *this)
{
  void *rdbuf;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v6;
  std::locale v8;

  *(_QWORD *)a1 = this;
  *(_DWORD *)(a1 + 8) = this->__fmtflags_;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&this->__precision_;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)&this->__rdstate_;
  rdbuf = this->__rdbuf_;
  *(_QWORD *)(a1 + 40) = this[1].__vftable;
  *(_QWORD *)(a1 + 48) = rdbuf;
  fmtflags = this[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(this);
    v6 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 32);
    std::locale::~locale(&v8);
    this[1].__fmtflags_ = fmtflags;
  }
  *(_BYTE *)(a1 + 56) = fmtflags;
  std::ios_base::getloc(this);
  return a1;
}

void sub_217F6A49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

std::locale *boost::io::basic_ios_all_saver<char,std::char_traits<char>>::~basic_ios_all_saver(std::locale *a1)
{
  boost::io::basic_ios_all_saver<char,std::char_traits<char>>::restore((uint64_t)a1);
  std::locale::~locale(a1 + 8);
  return a1;
}

__n128 boost::io::basic_ios_all_saver<char,std::char_traits<char>>::restore(uint64_t a1)
{
  const std::locale *v2;
  std::ios_base *v3;
  std::locale *rdbuf;
  std::locale *v5;
  const std::ios_base *v6;
  std::ios_base::fmtflags v7;
  std::ios_base *v8;
  const std::locale::facet *v9;
  std::ios_base::fmtflags v10;
  std::ios_base *v11;
  const std::ios_base *v12;
  __n128 result;
  std::locale v14;
  std::locale v15;
  std::locale v16;

  v2 = (const std::locale *)(a1 + 64);
  v3 = *(std::ios_base **)a1;
  std::ios_base::getloc(*(const std::ios_base **)a1);
  std::ios_base::imbue(v3, v2);
  std::locale::~locale(&v16);
  rdbuf = (std::locale *)v3->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v2);
    v5 = rdbuf + 1;
    std::locale::locale(&v15, v5);
    std::locale::operator=(v5, v2);
    std::locale::~locale(&v15);
  }
  std::locale::~locale(&v14);
  v6 = *(const std::ios_base **)a1;
  v7 = *(char *)(a1 + 56);
  v8 = *(std::ios_base **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 144) == -1)
  {
    std::ios_base::getloc(*(const std::ios_base **)a1);
    v9 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 32);
    std::locale::~locale(&v16);
    v6[1].__fmtflags_ = v10;
    v8 = *(std::ios_base **)a1;
  }
  v6[1].__fmtflags_ = v7;
  v8->__rdbuf_ = *(void **)(a1 + 48);
  std::ios_base::clear(v8, 0);
  v11 = *(std::ios_base **)a1;
  v11[1].__vftable = *(std::ios_base_vtbl **)(a1 + 40);
  v11->__exceptions_ = *(_DWORD *)(a1 + 36);
  std::ios_base::clear(v11, v11->__rdstate_);
  std::ios_base::clear(*(std::ios_base **)a1, *(_DWORD *)(a1 + 32));
  v12 = *(const std::ios_base **)a1;
  result = *(__n128 *)(a1 + 16);
  *(__n128 *)&v12->__precision_ = result;
  v12->__fmtflags_ = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_217F6A628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

void boost::spirit::detail::list::node::~node(boost::spirit::detail::list::node **this)
{
  boost::spirit::detail::list::node *v2;
  boost::spirit::detail::list::node *v3;
  boost::spirit::detail::list::node *v4;

  switch(*((char *)this + 31) >> 1)
  {
    case 2:
      v2 = *this;
      if (*this)
      {
        do
        {
          v3 = (boost::spirit::detail::list::node *)*((_QWORD *)v2 + 4);
          boost::spirit::detail::list::node::~node(v2);
          MEMORY[0x219A19A08]();
          v2 = v3;
        }
        while (v3);
      }
      break;
    case 6:
      v4 = *this;
      if (*this)
        (*(void (**)(boost::spirit::detail::list::node *))(*(_QWORD *)v4 + 8))(v4);
      break;
    case 10:
    case 12:
    case 13:
      if ((*((_BYTE *)this + 31) & 1) != 0 && *this)
        MEMORY[0x219A199F0]();
      break;
    default:
      break;
  }
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

uint64_t std::pair<turi::flexible_type,BOOL>::~pair(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>::flexible_type_parser_impl(uint64_t a1, const std::string *a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  std::string *v14;
  int v15;
  std::string *v16;
  int v17;
  std::string *v18;
  int v19;
  std::string *v20;
  int v21;
  std::string *v22;
  int v23;
  std::string *v24;
  int v25;
  std::string *v26;
  int v27;
  std::string *v28;
  int v29;
  std::string *v30;
  int v31;
  std::string *v32;
  int v33;
  std::string *v34;
  int v35;
  std::string *v36;
  int v37;
  std::string *v38;
  __int128 v39;
  unint64_t size;
  std::string *v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  BOOL v45;
  int v46;
  unint64_t *v48;
  unint64_t v49;
  char v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned int v56;
  char *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unint64_t *v62;
  unint64_t v63;
  char v64;
  unsigned int v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  unint64_t *v75;
  unint64_t v76;
  char v77;
  unsigned int v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::string::size_type v83;
  uint64_t *v85;
  std::string::size_type *v86;
  std::string::size_type *v87;
  _QWORD v90[2];
  __int16 v91;
  _QWORD v92[2];
  __int16 v93;
  char *v94;
  std::string ***v95;
  __int16 v96;
  std::string *p_p;
  __int16 *v98;
  __int16 v99;
  void *v100;
  __int16 *v101;
  __int16 v102;
  char *v103;
  __int16 *v104;
  __int16 v105;
  char *v106;
  __int16 *v107;
  char **v108;
  char **v109;
  std::string **v110;
  void **v111;
  std::string *v112;
  char **v113;
  std::string **v114;
  char **v115;
  std::string *v116;
  _QWORD *p_p_p;
  std::string *v118;
  char **v119;
  std::string __p;
  void *v121;
  char v122;
  _BYTE v123[40];
  _BYTE v124[40];
  _BYTE v125[56];
  void *v126[2];
  void *v127[2];
  __int128 v128;
  __int16 v129;
  char v130;
  _QWORD v131[4];
  int v132;
  _OWORD v133[2];
  int v134;
  _QWORD v135[4];
  int v136;
  char v137;
  void *v138[2];
  void *v139[2];
  __int128 v140;
  __int16 v141;
  char v142;
  _QWORD v143[4];
  int v144;
  _OWORD v145[2];
  int v146;
  _QWORD v147[4];
  int v148;
  char v149;
  void *v150[2];
  void *v151[2];
  __int128 v152;
  __int16 v153;
  char v154;
  _QWORD v155[4];
  int v156;
  _OWORD v157[2];
  int v158;
  _QWORD v159[4];
  int v160;
  char v161;
  std::string **v162;
  _BYTE v163[13];
  std::string ***v164;
  _BYTE v165[13];
  _BYTE v166[21];
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-grammar");
  *(_QWORD *)a1 = a1 + 32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)(a1 + 8) = __p;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 32) = a1 + 32;
  v14 = (std::string *)(a1 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 64) = 0;
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 96) = a1 + 96;
  v16 = (std::string *)(a1 + 104);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 128) = 0;
    if (v17 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 128) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 160) = a1 + 160;
  v18 = (std::string *)(a1 + 168);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 192) = 0;
    if (v19 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 192) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 224) = a1 + 224;
  v20 = (std::string *)(a1 + 232);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 256) = 0;
    if (v21 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 248) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 256) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 288) = a1 + 288;
  v22 = (std::string *)(a1 + 296);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 320) = 0;
    if (v23 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 312) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 320) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  v87 = (std::string::size_type *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = a1 + 352;
  v24 = (std::string *)(a1 + 360);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 384) = 0;
    if (v25 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 376) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 384) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  v86 = (std::string::size_type *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = a1 + 416;
  v26 = (std::string *)(a1 + 424);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 448) = 0;
    if (v27 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 440) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 448) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 480) = a1 + 480;
  v28 = (std::string *)(a1 + 488);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 512) = 0;
    if (v29 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 504) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 512) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 544) = a1 + 544;
  v30 = (std::string *)(a1 + 552);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v31 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v85 = (uint64_t *)(a1 + 576);
    *(_QWORD *)(a1 + 576) = 0;
    if (v31 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 568) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    v85 = (uint64_t *)(a1 + 576);
    *(_QWORD *)(a1 + 576) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 608) = a1 + 608;
  v32 = (std::string *)(a1 + 616);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v32, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v33 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 640) = 0;
    if (v33 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 632) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 640) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 672) = a1 + 672;
  v34 = (std::string *)(a1 + 680);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v35 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 704) = 0;
    if (v35 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 696) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 704) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 736) = a1 + 736;
  v36 = (std::string *)(a1 + 744);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v36, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v37 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 768) = 0;
    if (v37 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 760) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 768) = 0;
  }
  v38 = (std::string *)(a1 + 800);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v38, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    v39 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 816) = *((_QWORD *)&a2->__r_.__value_.__l + 2);
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
  }
  v152 = 0u;
  *(_OWORD *)v151 = 0u;
  *(_OWORD *)v150 = 0u;
  v153 = 23553;
  v154 = 1;
  memset(v155, 0, sizeof(v155));
  v156 = 1065353216;
  memset(v157, 0, sizeof(v157));
  memset(v159, 0, sizeof(v159));
  v158 = 1065353216;
  v160 = 1065353216;
  v161 = 0;
  MEMORY[0x219A19390](v150, ",{}[]");
  LOBYTE(v153) = a3;
  HIBYTE(v153) = a4;
  v154 = 1;
  if (v155 != (_QWORD *)a5)
  {
    v156 = *(_DWORD *)(a5 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v155, *(uint64_t **)(a5 + 16), 0);
  }
  if (v157 != (_OWORD *)a6)
  {
    v158 = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v157, *(uint64_t **)(a6 + 16), 0);
  }
  if (v159 != (_QWORD *)a7)
  {
    v160 = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v159, *(uint64_t **)(a7 + 16), 0);
  }
  v161 = a8;
  *(_OWORD *)v139 = 0u;
  v140 = 0u;
  *(_OWORD *)v138 = 0u;
  v141 = 23553;
  v142 = 1;
  memset(v143, 0, sizeof(v143));
  v144 = 1065353216;
  memset(v145, 0, sizeof(v145));
  memset(v147, 0, sizeof(v147));
  v146 = 1065353216;
  v148 = 1065353216;
  v149 = 0;
  MEMORY[0x219A19390](v138, " ,\t{}[]:;");
  LOBYTE(v141) = a3;
  HIBYTE(v141) = a4;
  v142 = 1;
  if (v143 != (_QWORD *)a5)
  {
    v144 = *(_DWORD *)(a5 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v143, *(uint64_t **)(a5 + 16), 0);
  }
  if (v145 != (_OWORD *)a6)
  {
    v146 = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v145, *(uint64_t **)(a6 + 16), 0);
  }
  if (v147 != (_QWORD *)a7)
  {
    v148 = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v147, *(uint64_t **)(a7 + 16), 0);
  }
  v149 = a8;
  *(_OWORD *)v127 = 0u;
  v128 = 0u;
  *(_OWORD *)v126 = 0u;
  v129 = 23553;
  v130 = 1;
  memset(v131, 0, sizeof(v131));
  v132 = 1065353216;
  memset(v133, 0, sizeof(v133));
  memset(v135, 0, sizeof(v135));
  v134 = 1065353216;
  v136 = 1065353216;
  v137 = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (size >= 2)
    v41 = (std::string *)&v127[1];
  else
    v41 = (std::string *)v126;
  std::string::operator=(v41, a2);
  LOBYTE(v129) = a3;
  HIBYTE(v129) = a4;
  v130 = 1;
  if (v131 != (_QWORD *)a5)
  {
    v132 = *(_DWORD *)(a5 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v131, *(uint64_t **)(a5 + 16), 0);
  }
  if (v133 != (_OWORD *)a6)
  {
    v134 = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v133, *(uint64_t **)(a6 + 16), 0);
  }
  if (v135 != (_QWORD *)a7)
  {
    v136 = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v135, *(uint64_t **)(a7 + 16), 0);
  }
  v137 = a8;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v126, &__p);
  LOWORD(v164) = 0;
  *(_QWORD *)v166 = &__p;
  *(_QWORD *)&v166[8] = &v164;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l>>(a1 + 736, (uint64_t)v166);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v105 = 0;
  v106 = &turi::real;
  v107 = &v105;
  v102 = 0;
  v103 = &boost::spirit::long_long;
  v104 = &v102;
  v108 = &v106;
  v109 = &v103;
  v99 = 0;
  v100 = (void *)(a1 + 672);
  v101 = &v99;
  v110 = (std::string **)&v108;
  v111 = &v100;
  v96 = 0;
  p_p = (std::string *)(a1 + 608);
  v98 = &v96;
  v112 = (std::string *)&v110;
  v113 = (char **)&p_p;
  v93 = 0;
  v94 = (char *)(a1 + 480);
  v95 = (std::string ***)&v93;
  v114 = &v112;
  v115 = &v94;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v126, &__p);
  v91 = 0;
  v92[0] = &__p;
  v92[1] = &v91;
  v116 = (std::string *)&v114;
  p_p_p = v92;
  v164 = (std::string ***)&boost::spirit::_val;
  *(_QWORD *)&v166[5] = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  *(_QWORD *)v166 = turi::FLEX_UNDEFINED;
  v42 = byte_254FEE09C;
  v166[12] = byte_254FEE09C;
  if (byte_254FEE09C <= 9u && ((1 << byte_254FEE09C) & 0x33C) != 0)
  {
    v43 = *(unint64_t **)v166;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    v42 = v166[12];
  }
  *(_QWORD *)&v165[5] = *(_QWORD *)&v166[5];
  *(_QWORD *)v165 = *(_QWORD *)v166;
  v165[12] = v42;
  v45 = v42 > 9;
  v46 = (1 << v42) & 0x33C;
  if (!v45 && v46 != 0)
  {
    v48 = *(unint64_t **)v165;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v166);
  v50 = *(_BYTE *)v164;
  v166[0] = *(_BYTE *)v164;
  *(_QWORD *)&v166[13] = *(_QWORD *)&v165[5];
  *(_QWORD *)&v166[8] = *(_QWORD *)v165;
  v51 = v165[12];
  v166[20] = v165[12];
  if (v165[12] <= 9u && ((1 << v165[12]) & 0x33C) != 0)
  {
    v52 = *(unint64_t **)&v166[8];
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v50 = v166[0];
    v51 = v166[20];
  }
  LOBYTE(v162) = v50;
  *(_QWORD *)&v163[5] = *(_QWORD *)&v166[13];
  *(_QWORD *)v163 = *(_QWORD *)&v166[8];
  v163[12] = v51;
  if (v51 <= 9 && ((1 << v51) & 0x33C) != 0)
  {
    v54 = *(unint64_t **)v163;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v166[8]);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v165);
  v90[0] = &boost::spirit::eps;
  v90[1] = &v162;
  v118 = (std::string *)&v116;
  v119 = (char **)v90;
  _ZN5boost6spirit2qi4ruleIPKcFN4turi13flexible_typeEvEKNS_5proto7exprns_4exprINS8_6tagns_3tag8terminalENS8_7argsns_4termINS0_3tag9char_codeINSG_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEENS0_11unused_typeESP_E6defineIN4mpl_5BOOL_ILb0EEENSA_INSC_10bitwise_orENSE_5list2IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_INSC_9subscriptENSW_IRNS0_8terminalINSG_12stateful_tagINS5_20strict_real_policiesIdEENSG_7double_EdSP_EEEERKNS_7phoenix5actorINS9_10basic_exprINSC_6assignENSW_INS17_INS0_9attributeILi0EEEEENS17_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSA_ISX_NSW_IRKNSY_INSG_9long_longEEES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNSt3__16vectorIdNS21_9allocatorIdEEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS22_IS6_NS23_IS6_EEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS22_INS21_4pairIS6_S6_EENS23_IS2V_EEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNSA_ISD_NSF_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS3A_13parser_configEEEEEEEELl0EEES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRKNSY_INSG_3epsEEERKNS17_INS18_IS19_NSW_IS1C_NS17_INS18_ISD_NSF_IS6_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEEEEvRSQ_RKT0_NST_ILb1EEE(a1 + 32, (uint64_t)&v118);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v163);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v108) = 0;
  v118 = (std::string *)&turi::real;
  v119 = (char **)&v108;
  LOWORD(v106) = 0;
  v116 = (std::string *)&boost::spirit::long_long;
  p_p_p = &v106;
  v162 = &v118;
  *(_QWORD *)v163 = &v116;
  LOWORD(v103) = 0;
  v114 = (std::string **)(a1 + 672);
  v115 = &v103;
  v164 = &v162;
  *(_QWORD *)v165 = &v114;
  LOWORD(v100) = 0;
  v112 = (std::string *)(a1 + 608);
  v113 = (char **)&v100;
  *(_QWORD *)v166 = &v164;
  *(_QWORD *)&v166[8] = &v112;
  LOWORD(p_p) = 0;
  v110 = (std::string **)(a1 + 480);
  v111 = (void **)&p_p;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v110;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(a1 + 96, &__p);
  LOWORD(v92[0]) = 0;
  v108 = (char **)&turi::real;
  v109 = (char **)v92;
  LOWORD(v90[0]) = 0;
  v106 = &boost::spirit::long_long;
  v107 = (__int16 *)v90;
  v110 = (std::string **)&v108;
  v111 = (void **)&v106;
  v105 = 0;
  v103 = (char *)(a1 + 608);
  v104 = &v105;
  v112 = (std::string *)&v110;
  v113 = &v103;
  v102 = 0;
  v100 = (void *)(a1 + 480);
  v101 = &v102;
  v114 = &v112;
  v115 = (char **)&v100;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v150, &__p);
  v99 = 0;
  p_p = &__p;
  v98 = &v99;
  v116 = (std::string *)&v114;
  p_p_p = &p_p;
  v164 = (std::string ***)&boost::spirit::_val;
  *(_QWORD *)&v166[5] = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  *(_QWORD *)v166 = turi::FLEX_UNDEFINED;
  v56 = byte_254FEE09C;
  v166[12] = byte_254FEE09C;
  if (byte_254FEE09C > 9u)
  {
    v57 = (char *)(a1 + 608);
  }
  else
  {
    v57 = (char *)(a1 + 608);
    if (((1 << byte_254FEE09C) & 0x33C) != 0)
    {
      v58 = *(unint64_t **)v166;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
      v56 = v166[12];
    }
  }
  *(_QWORD *)&v165[5] = *(_QWORD *)&v166[5];
  *(_QWORD *)v165 = *(_QWORD *)v166;
  v165[12] = v56;
  v45 = v56 > 9;
  v60 = (1 << v56) & 0x33C;
  if (!v45 && v60 != 0)
  {
    v62 = *(unint64_t **)v165;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v166);
  v64 = *(_BYTE *)v164;
  v166[0] = *(_BYTE *)v164;
  *(_QWORD *)&v166[13] = *(_QWORD *)&v165[5];
  *(_QWORD *)&v166[8] = *(_QWORD *)v165;
  v65 = v165[12];
  v166[20] = v165[12];
  if (v165[12] <= 9u && ((1 << v165[12]) & 0x33C) != 0)
  {
    v66 = *(unint64_t **)&v166[8];
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 + 1, v66));
    v64 = v166[0];
    v65 = v166[20];
  }
  LOBYTE(v162) = v64;
  *(_QWORD *)&v163[5] = *(_QWORD *)&v166[13];
  *(_QWORD *)v163 = *(_QWORD *)&v166[8];
  v163[12] = v65;
  if (v65 <= 9 && ((1 << v65) & 0x33C) != 0)
  {
    v68 = *(unint64_t **)v163;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 + 1, v68));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v166[8]);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v165);
  v94 = &boost::spirit::eps;
  v95 = &v162;
  v118 = (std::string *)&v116;
  v119 = &v94;
  _ZN5boost6spirit2qi4ruleIPKcFN4turi13flexible_typeEvEKNS_5proto7exprns_4exprINS8_6tagns_3tag8terminalENS8_7argsns_4termINS0_3tag9char_codeINSG_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEENS0_11unused_typeESP_E6defineIN4mpl_5BOOL_ILb0EEENSA_INSC_10bitwise_orENSE_5list2IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_INSC_9subscriptENSW_IRNS0_8terminalINSG_12stateful_tagINS5_20strict_real_policiesIdEENSG_7double_EdSP_EEEERKNS_7phoenix5actorINS9_10basic_exprINSC_6assignENSW_INS17_INS0_9attributeILi0EEEEENS17_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSA_ISX_NSW_IRKNSY_INSG_9long_longEEES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNSt3__16vectorIS6_NS21_9allocatorIS6_EEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS22_INS21_4pairIS6_S6_EENS23_IS2I_EEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNSA_ISD_NSF_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS2X_13parser_configEEEEEEEELl0EEES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRKNSY_INSG_3epsEEERKNS17_INS18_IS19_NSW_IS1C_NS17_INS18_ISD_NSF_IS6_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEEEEvRSQ_RKT0_NST_ILb1EEE(a1 + 160, (uint64_t *)&v118);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v163);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v92[0]) = 0;
  v108 = (char **)&turi::real;
  v109 = (char **)v92;
  LOWORD(v90[0]) = 0;
  v106 = &boost::spirit::long_long;
  v107 = (__int16 *)v90;
  v110 = (std::string **)&v108;
  v111 = (void **)&v106;
  v105 = 0;
  v103 = v57;
  v104 = &v105;
  v112 = (std::string *)&v110;
  v113 = &v103;
  v102 = 0;
  v100 = (void *)(a1 + 480);
  v101 = &v102;
  v114 = &v112;
  v115 = (char **)&v100;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v138, &__p);
  v99 = 0;
  p_p = &__p;
  v98 = &v99;
  v116 = (std::string *)&v114;
  p_p_p = &p_p;
  v164 = (std::string ***)&boost::spirit::_val;
  *(_QWORD *)&v166[5] = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  *(_QWORD *)v166 = turi::FLEX_UNDEFINED;
  v70 = byte_254FEE09C;
  v166[12] = byte_254FEE09C;
  if (byte_254FEE09C <= 9u && ((1 << byte_254FEE09C) & 0x33C) != 0)
  {
    v71 = *(unint64_t **)v166;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
    v70 = v166[12];
  }
  *(_QWORD *)&v165[5] = *(_QWORD *)&v166[5];
  *(_QWORD *)v165 = *(_QWORD *)v166;
  v165[12] = v70;
  v45 = v70 > 9;
  v73 = (1 << v70) & 0x33C;
  if (!v45 && v73 != 0)
  {
    v75 = *(unint64_t **)v165;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 + 1, v75));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v166);
  v77 = *(_BYTE *)v164;
  v166[0] = *(_BYTE *)v164;
  *(_QWORD *)&v166[13] = *(_QWORD *)&v165[5];
  *(_QWORD *)&v166[8] = *(_QWORD *)v165;
  v78 = v165[12];
  v166[20] = v165[12];
  if (v165[12] <= 9u && ((1 << v165[12]) & 0x33C) != 0)
  {
    v79 = *(unint64_t **)&v166[8];
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 + 1, v79));
    v77 = v166[0];
    v78 = v166[20];
  }
  LOBYTE(v162) = v77;
  *(_QWORD *)&v163[5] = *(_QWORD *)&v166[13];
  *(_QWORD *)v163 = *(_QWORD *)&v166[8];
  v163[12] = v78;
  if (v78 <= 9 && ((1 << v78) & 0x33C) != 0)
  {
    v81 = *(unint64_t **)v163;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 + 1, v81));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v166[8]);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v165);
  v94 = &boost::spirit::eps;
  v95 = &v162;
  v118 = (std::string *)&v116;
  v119 = &v94;
  _ZN5boost6spirit2qi4ruleIPKcFN4turi13flexible_typeEvEKNS_5proto7exprns_4exprINS8_6tagns_3tag8terminalENS8_7argsns_4termINS0_3tag9char_codeINSG_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEENS0_11unused_typeESP_E6defineIN4mpl_5BOOL_ILb0EEENSA_INSC_10bitwise_orENSE_5list2IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_INSC_9subscriptENSW_IRNS0_8terminalINSG_12stateful_tagINS5_20strict_real_policiesIdEENSG_7double_EdSP_EEEERKNS_7phoenix5actorINS9_10basic_exprINSC_6assignENSW_INS17_INS0_9attributeILi0EEEEENS17_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSA_ISX_NSW_IRKNSY_INSG_9long_longEEES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNSt3__16vectorIS6_NS21_9allocatorIS6_EEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS22_INS21_4pairIS6_S6_EENS23_IS2I_EEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNSA_ISD_NSF_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS2X_13parser_configEEEEEEEELl0EEES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRKNSY_INSG_3epsEEERKNS17_INS18_IS19_NSW_IS1C_NS17_INS18_ISD_NSF_IS6_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEEEEvRSQ_RKT0_NST_ILb1EEE(a1 + 224, (uint64_t *)&v118);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v163);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v112) = 0;
  v162 = (std::string **)(a1 + 160);
  *(_QWORD *)v163 = &v112;
  LOBYTE(v110) = 44;
  LOBYTE(v108) = 93;
  v118 = (std::string *)&v110;
  v119 = (char **)&v108;
  v114 = &v118;
  v164 = &v162;
  *(_QWORD *)v165 = &v114;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v150, &__p);
  LOWORD(v106) = 0;
  v116 = &__p;
  p_p_p = &v106;
  *(_QWORD *)v166 = &v164;
  *(_QWORD *)&v166[8] = &v116;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(a1 + 288, (uint64_t *)v166);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v114) = 0;
  v162 = (std::string **)(a1 + 224);
  *(_QWORD *)v163 = &v114;
  LOBYTE(v112) = 58;
  v116 = (std::string *)&v112;
  v164 = &v162;
  *(_QWORD *)v165 = &v116;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v138, &__p);
  LOWORD(v110) = 0;
  v118 = &__p;
  v119 = (char **)&v110;
  *(_QWORD *)v166 = &v164;
  *(_QWORD *)&v166[8] = &v118;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>((uint64_t)v87, (uint64_t *)v166);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v108) = 0;
  v162 = (std::string **)(a1 + 224);
  *(_QWORD *)v163 = &v108;
  LOBYTE(v106) = 44;
  LOBYTE(v103) = 125;
  v114 = (std::string **)&v106;
  v115 = &v103;
  v116 = (std::string *)&v114;
  p_p_p = &boost::spirit::iso8859_1::space;
  v118 = (std::string *)&boost::spirit::no_skip;
  v119 = (char **)&v116;
  v110 = &v118;
  v164 = &v162;
  *(_QWORD *)v165 = &v110;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v138, &__p);
  LOWORD(v100) = 0;
  v112 = &__p;
  v113 = (char **)&v100;
  *(_QWORD *)v166 = &v164;
  *(_QWORD *)&v166[8] = &v112;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>((uint64_t)v86, (uint64_t *)v166);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOBYTE(v108) = 123;
  v112 = (std::string *)&boost::spirit::iso8859_1::space;
  LOBYTE(v110) = 44;
  v116 = (std::string *)&v112;
  p_p_p = &v110;
  v118 = (std::string *)&v116;
  v119 = (char **)&boost::spirit::iso8859_1::space;
  v162 = (std::string **)&boost::spirit::no_skip;
  *(_QWORD *)v163 = &v118;
  v164 = (std::string ***)(a1 + 544);
  *(_QWORD *)v165 = &v162;
  v114 = (std::string **)&v164;
  *(_QWORD *)v166 = &v108;
  *(_QWORD *)&v166[8] = &v114;
  LOBYTE(v106) = 125;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v106;
  boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,1l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l>>(a1 + 480, (char ***)&__p);
  v83 = *v86;
  __p.__r_.__value_.__r.__words[0] = *v87;
  __p.__r_.__value_.__s.__data_[8] = 58;
  __p.__r_.__value_.__r.__words[2] = v83;
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__14pairIN4turi13flexible_typeESD_EENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSO_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSM_6detail13parser_binderINSM_8sequenceINS9_INSM_9referenceIKNSM_4ruleIS2_FSD_vEKNS_5proto7exprns_4exprINS16_6tagns_3tag8terminalENS16_7argsns_4termIST_EELl0EEENS6_11unused_typeES1H_EEEENS9_INSM_12literal_charINSR_8standardELb1ELb0EEENS9_IS1K_SG_EEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSY_E4typeES1X_(v85, (uint64_t *)&__p);
  LOBYTE(v112) = 91;
  LOBYTE(v108) = 93;
  *(_QWORD *)v166 = &v112;
  *(_QWORD *)&v166[8] = &v108;
  LOBYTE(v106) = 91;
  BYTE2(v114) = 0;
  LOWORD(v114) = 0;
  v116 = (std::string *)(a1 + 288);
  p_p_p = &v114;
  LOBYTE(v110) = 44;
  v118 = (std::string *)&v116;
  v119 = (char **)&v110;
  v162 = (std::string **)&v106;
  *(_QWORD *)v163 = &v118;
  LOBYTE(v103) = 93;
  v164 = &v162;
  *(_QWORD *)v165 = &v103;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v164;
  boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l> const&>,2l>>(a1 + 608, &__p);
  LOBYTE(v94) = 91;
  LOBYTE(v105) = 93;
  *(_QWORD *)v166 = &v94;
  *(_QWORD *)&v166[8] = &v105;
  LOBYTE(v102) = 91;
  BYTE2(p_p) = 0;
  LOWORD(p_p) = 0;
  v116 = (std::string *)&boost::spirit::double_;
  p_p_p = &p_p;
  v103 = (char *)&boost::spirit::iso8859_1::space;
  LOBYTE(v92[0]) = 44;
  v108 = &v103;
  v109 = (char **)v92;
  v100 = &boost::spirit::iso8859_1::space;
  LOBYTE(v90[0]) = 59;
  v106 = (char *)&v100;
  v107 = (__int16 *)v90;
  v110 = (std::string **)&v108;
  v111 = (void **)&v106;
  v112 = (std::string *)&v110;
  v113 = (char **)&boost::spirit::iso8859_1::space;
  v114 = (std::string **)&boost::spirit::no_skip;
  v115 = (char **)&v112;
  v118 = (std::string *)&v116;
  v119 = (char **)&v114;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
  v162 = (std::string **)&v102;
  *(_QWORD *)v163 = &v118;
  LOBYTE(v99) = 93;
  v164 = &v162;
  *(_QWORD *)v165 = &v99;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v164;
  _ZN5boost6spirit2qi4ruleIPKcFNSt3__16vectorIdNS5_9allocatorIdEEEEvEKNS_5proto7exprns_4exprINSB_6tagns_3tag8terminalENSB_7argsns_4termINS0_3tag9char_codeINSJ_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEENS0_11unused_typeESS_E6defineIN4mpl_5BOOL_ILb0EEENSD_INSF_10bitwise_orENSH_5list2IRKNSD_INSF_11shift_rightENSZ_IRKNSD_ISG_NSI_INS0_11terminal_exINSK_INSJ_5char_ENSM_8standardEEENS_6fusion6vectorIJcEEEEEEELl0EEENSD_ISG_NSI_IRS3_EELl0EEEEELl2EEERKNSD_IS10_NSZ_IRKNSD_IS10_NSZ_IS1F_RKNSD_INSF_7modulusENSZ_IRKNSD_INSF_9subscriptENSZ_IRKNS0_8terminalINSJ_7double_EEERKNS_7phoenix5actorINSC_10basic_exprINS1R_6detail3tag13function_evalENSH_5list3INS1T_ISG_NSI_INS1R_3stl9push_backEEELl0EEENS1S_INS0_9attributeILi0EEEEENS1S_INS0_8argumentILi0EEEEEEELl3EEEEEEELl2EEERKNSD_IS1L_NSZ_IRKNSD_ISG_NSI_INSJ_7no_skipEEELl0EEERKNSD_ISY_NSZ_IRKNSD_ISY_NSZ_IRKNSD_IS10_NSZ_IRKNSD_INSF_11dereferenceENSH_5list1IRSR_EELl1EEES1C_EELl2EEES2W_EELl2EEES2O_EELl2EEEEELl2EEEEELl2EEEEELl2EEES1F_EELl2EEEEELl2EEEEEvRST_RKT0_NSW_ILb1EEE(a1 + 672, &__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v135);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v133);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v131);
  if (SHIBYTE(v128) < 0)
    operator delete(v127[1]);
  if (SHIBYTE(v127[0]) < 0)
    operator delete(v126[0]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v147);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v145);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v143);
  if (SHIBYTE(v140) < 0)
    operator delete(v139[1]);
  if (SHIBYTE(v139[0]) < 0)
    operator delete(v138[0]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v159);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v157);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v155);
  if (SHIBYTE(v152) < 0)
    operator delete(v151[1]);
  if (SHIBYTE(v151[0]) < 0)
    operator delete(v150[0]);
  return a1;
}

void sub_217F6BE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a21);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a27);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a32);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a20);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a22);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a28);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a29);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a30);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a23);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a31);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a24);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a25);
  if (*(char *)(a26 + 31) < 0)
    operator delete(*a11);
  _Unwind_Resume(a1);
}

void sub_217F6C11C()
{
  JUMPOUT(0x217F6C074);
}

void sub_217F6C124()
{
  JUMPOUT(0x217F6C07CLL);
}

void boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>(__int128 *a1@<X1>, std::string *a2@<X8>)
{
  std::string v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string v9;
  void *__p;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  parser_impl::parser_config::parser_config(&v3, a1);
  parser_impl::parser_config::parser_config(&v9, (__int128 *)&v3);
  parser_impl::parser_config::parser_config(a2, (__int128 *)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  if (v11 < 0)
    operator delete(__p);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v6);
  if (v5 < 0)
    operator delete(v4);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_217F6C1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l>::~expr((uint64_t)&a33);
  boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l>::~expr((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l>::~expr(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(uint64_t a1)
{
  boost::function0<void>::~function0((uint64_t *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  BOOL v9;
  void **v10;
  BOOL v11;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        v10 = (void **)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        v4 = (uint64_t *)*v4;
        if (v10)
          v11 = v4 == a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_multi<std::string const&>(a1, (uint64_t)(v4 + 2));
    v4 = (uint64_t *)*v4;
  }
}

void sub_217F6C36C(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_217F6C388(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *inserted;

  v4 = (unsigned __int8 *)(a2 + 2);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<false>(a1, v13);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = a2;
    if (v8 <= a2)
      v16 = a2 % v8;
  }
  else
  {
    v16 = (v8 - 1) & a2;
  }
  v17 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v16);
  if (v17)
  {
    v18 = *(unsigned __int8 **)v17;
    if (*(_QWORD *)v17)
    {
      v19 = 0;
      do
      {
        v20 = *((_QWORD *)v18 + 1);
        if (v15 > 1)
        {
          v21 = *((_QWORD *)v18 + 1);
          if (v20 >= v8)
            v21 = v20 % v8;
        }
        else
        {
          v21 = v20 & (v8 - 1);
        }
        if (v21 != v16)
          break;
        v22 = v20 == a2 ? std::equal_to<std::string>::operator()[abi:ne180100](v6, v18 + 16, a3) : 0;
        if ((v19 & (v22 ^ 1) & 1) != 0)
          break;
        v19 |= v22;
        v17 = *(unsigned __int8 **)v17;
        v18 = *(unsigned __int8 **)v17;
      }
      while (*(_QWORD *)v17);
    }
  }
  return v17;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = *v7;
      if (*v7)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = (unsigned __int8 **)v12;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = *(unsigned __int8 **)v12;
            if (*(_QWORD *)v12)
            {
              v15 = v12;
              while (1)
              {
                v16 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v12 + 16, v14 + 16);
                v17 = *(unsigned __int8 **)v15;
                if (!v16)
                  break;
                v14 = *(unsigned __int8 **)v17;
                v15 = *(unsigned __int8 **)v15;
                if (!*(_QWORD *)v17)
                  goto LABEL_32;
              }
              v14 = *(unsigned __int8 **)v15;
              v17 = v15;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = v12;
            }
            *v7 = v14;
            *(_QWORD *)v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (unsigned __int8 **)v12;
            v8 = v13;
          }
          v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_multi<std::string const&>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v4);
}

void sub_217F6C890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x28uLL);
  v8 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  v9 = v7 + 16;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v9 = *(_OWORD *)a2;
    *((_QWORD *)v7 + 4) = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)v9);
  *((_QWORD *)v8 + 1) = result;
  return result;
}

void sub_217F6C950(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

std::string *parser_impl::parser_config::parser_config(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int16 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = *((_WORD *)a2 + 24);
  this[2].__r_.__value_.__s.__data_[2] = *((_BYTE *)a2 + 50);
  LOWORD(this[2].__r_.__value_.__l.__data_) = v6;
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[4], (uint64_t)(a2 + 6));
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[5].__r_.__value_.__r.__words[2], (uint64_t)a2 + 136);
  this[7].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 176);
  return this;
}

void sub_217F6CA88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_217F6CB38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_217F6CDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_217F6CE50(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l>>(uint64_t a1, uint64_t a2)
{
  void *v3[2];
  char v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  boost::spirit::detail::make_action<boost::spirit::qi::domain,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type &>::operator()(a2, (uint64_t)v3);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)v11, (uint64_t)v3);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS14_6tagns_3tag6assignENS14_7argsns_5list2INS13_INS6_9attributeILi0EEEEENS13_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES1R_((uint64_t *)(a1 + 32), (uint64_t)v11);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11[0]);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v7);
  if (v6 < 0)
    operator delete(v5);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_217F6CF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a41);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS14_6tagns_3tag6assignENS14_7argsns_5list2INS13_INS6_9attributeILi0EEEEENS13_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES1R_(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::string v6;
  void *__p;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _WORD v11[25];
  char v12;
  _BYTE v13[48];
  __int16 v14;
  uint64_t (**v15[4])();

  parser_impl::parser_config::parser_config(&v6, (__int128 *)a2);
  v11[24] = *(_WORD *)(a2 + 184);
  v12 = *(_BYTE *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v13, a2 + 192);
  v13[40] = *(_BYTE *)(a2 + 232);
  v14 = *(_WORD *)(a2 + 240);
  v4 = (uint64_t *)_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS14_6tagns_3tag6assignENS14_7argsns_5list2INS13_INS6_9attributeILi0EEEEENS13_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS1Q_EE5valueEiE4typeE(v15, (uint64_t)&v6);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v4, a1);
  boost::function0<void>::~function0((uint64_t *)v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(__p);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217F6D07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  boost::function0<void>::~function0((uint64_t *)(v21 - 80));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(a1 + 192);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int16 v5;

  v4 = parser_impl::parser_config::parser_config((std::string *)a1, (__int128 *)a2);
  v5 = *(_WORD *)(a2 + 184);
  v4[7].__r_.__value_.__s.__data_[18] = *(_BYTE *)(a2 + 186);
  LOWORD(v4[7].__r_.__value_.__r.__words[2]) = v5;
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)&v4[8], a2 + 192);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  return a1;
}

void sub_217F6D194(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 56);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,turi::flexible_type>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type> const&>(a1, (unsigned __int8 *)i + 16, (std::string *)(i + 2));
  return a1;
}

void sub_217F6D22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type> const&>(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__construct_node_hash<std::pair<std::string const,turi::flexible_type> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_217F6D4AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__construct_node_hash<std::pair<std::string const,turi::flexible_type> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217F6D520(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void boost::spirit::detail::make_action<boost::spirit::qi::domain,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type &>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4;
  std::string v5;
  void *__p;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  char v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19[28];

  boost::spirit::detail::make_terminal_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,mpl_::void_ const&,boost::spirit::unused_type &,boost::spirit::qi::domain>::operator()(*(__int128 **)a1, &v5);
  v4 = **(_WORD **)(a1 + 8);
  boost::fusion::cons<parser_impl::string_parser,boost::fusion::cons<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>,boost::fusion::nil_>>::cons((uint64_t)v12, (uint64_t)&v5, &v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  if (v7 < 0)
    operator delete(__p);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::action(a2, (uint64_t)v12, v19[24]);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_217F6D6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::cons<parser_impl::string_parser,boost::fusion::cons<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>,boost::fusion::nil_>>::cons(uint64_t a1, uint64_t a2, _WORD *a3)
{
  std::string *v6;
  __int16 v7;

  v6 = parser_impl::parser_config::parser_config((std::string *)a1, (__int128 *)a2);
  v7 = *(_WORD *)(a2 + 184);
  v6[7].__r_.__value_.__s.__data_[18] = *(_BYTE *)(a2 + 186);
  LOWORD(v6[7].__r_.__value_.__r.__words[2]) = v7;
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)&v6[8], a2 + 192);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_WORD *)(a1 + 240) = *a3;
  return a1;
}

void sub_217F6D76C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 56);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((void **)v1);
  _Unwind_Resume(a1);
}

void boost::spirit::detail::make_terminal_impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,mpl_::void_ const&,boost::spirit::unused_type &,boost::spirit::qi::domain>::operator()(__int128 *a1@<X1>, std::string *a2@<X8>)
{
  std::string v3;
  void *__p;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  parser_impl::parser_config::parser_config(&v3, a1);
  boost::spirit::qi::make_primitive<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>,boost::spirit::unused_type,void>::operator()<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>((__int128 *)&v3, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v6);
  if (v5 < 0)
    operator delete(__p);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_217F6D820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l>::~expr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::spirit::qi::make_primitive<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>,boost::spirit::unused_type,void>::operator()<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>(__int128 *a1@<X1>, std::string *a2@<X8>)
{
  std::string v3;
  void *__p;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  parser_impl::parser_config::parser_config(&v3, a1);
  parser_impl::string_parser::string_parser(a2, (uint64_t)&v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v6);
  if (v5 < 0)
    operator delete(__p);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_217F6D8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l>::~expr((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *parser_impl::string_parser::string_parser(std::string *a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *i;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  uint64_t *j;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  void *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  void *v71;
  void *v72;
  uint64_t *k;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unsigned int v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  void *v103;
  void *v104;
  std::string __p;
  std::string *p_p;

  v4 = parser_impl::parser_config::parser_config(a1, (__int128 *)a2);
  *(_OWORD *)&v4[8].__r_.__value_.__l.__data_ = 0u;
  v5 = (uint64_t)&v4[8];
  v4[7].__r_.__value_.__s.__data_[16] = 0;
  v4[7].__r_.__value_.__s.__data_[18] = 0;
  *(_OWORD *)&v4[8].__r_.__value_.__r.__words[2] = 0u;
  LODWORD(v4[9].__r_.__value_.__r.__words[1]) = 1065353216;
  v4[9].__r_.__value_.__s.__data_[16] = 0;
  if (*(char *)(a2 + 47) < 0)
    v6 = *(_QWORD *)(a2 + 32);
  else
    v6 = *(unsigned __int8 *)(a2 + 47);
  a1[7].__r_.__value_.__s.__data_[16] = v6 != 0;
  if (*(char *)(a2 + 47) < 0)
    v7 = *(_QWORD *)(a2 + 32);
  else
    v7 = *(unsigned __int8 *)(a2 + 47);
  a1[7].__r_.__value_.__s.__data_[18] = v7 == 1;
  if (v6)
  {
    v8 = (_QWORD *)(a2 + 24);
    if (*(char *)(a2 + 47) < 0)
      v8 = (_QWORD *)*v8;
    a1[7].__r_.__value_.__s.__data_[17] = *(_BYTE *)v8;
  }
  for (i = *(uint64_t **)(a2 + 72); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
    else
      __p = *(std::string *)(i + 2);
    p_p = &__p;
    v10 = std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    v11 = v10;
    switch(v10[52])
    {
      case 2u:
        v12 = (unint64_t *)*((_QWORD *)v10 + 5);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *((_QWORD *)v10 + 5);
          if (!v15)
            goto LABEL_57;
          if (*(char *)(v15 + 31) < 0)
            operator delete(*(void **)(v15 + 8));
          v16 = (_QWORD *)v15;
          v17 = 0x1012C404EF22A49;
          goto LABEL_56;
        }
        break;
      case 3u:
        v18 = (unint64_t *)*((_QWORD *)v10 + 5);
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = (_QWORD *)*((_QWORD *)v10 + 5);
          if (!v21)
            goto LABEL_57;
          v22 = (void *)v21[1];
          if (v22)
          {
            v21[2] = v22;
            operator delete(v22);
          }
          v16 = v21;
          v17 = 0x1080C409938AC02;
          goto LABEL_56;
        }
        break;
      case 4u:
        v23 = (unint64_t *)*((_QWORD *)v10 + 5);
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = *((_QWORD *)v10 + 5);
          if (!v26)
            goto LABEL_57;
          p_p = (std::string *)(v26 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          goto LABEL_40;
        }
        break;
      case 5u:
        v27 = (unint64_t *)*((_QWORD *)v10 + 5);
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v26 = *((_QWORD *)v10 + 5);
          if (!v26)
            goto LABEL_57;
          p_p = (std::string *)(v26 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
LABEL_40:
          v16 = (_QWORD *)v26;
          v17 = 0x1020C405E66F15BLL;
          goto LABEL_56;
        }
        break;
      case 8u:
        v30 = (unint64_t *)*((_QWORD *)v10 + 5);
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = *((_QWORD *)v10 + 5);
          if (!v33)
            goto LABEL_57;
          boost::detail::shared_count::~shared_count((unsigned int **)(v33 + 16));
          v16 = (_QWORD *)v33;
          v34 = -235920773;
          goto LABEL_55;
        }
        break;
      case 9u:
        v35 = (unint64_t *)*((_QWORD *)v10 + 5);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v38 = (_QWORD *)*((_QWORD *)v10 + 5);
          if (v38)
          {
            v39 = (void *)v38[6];
            if (v39)
            {
              v38[7] = v39;
              operator delete(v39);
            }
            v40 = (void *)v38[3];
            if (v40)
            {
              v38[4] = v40;
              operator delete(v40);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v38 + 1));
            v16 = v38;
            v34 = 2071181815;
LABEL_55:
            v17 = v34 | 0x1030C4000000000;
LABEL_56:
            MEMORY[0x219A19A08](v16, v17);
          }
LABEL_57:
          *((_QWORD *)v11 + 5) = 0;
        }
        break;
      default:
        break;
    }
    *((_QWORD *)v11 + 5) = 0;
    *((_DWORD *)v11 + 12) = 0;
    v11[52] = 7;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  for (j = *(uint64_t **)(a2 + 112); j; j = (uint64_t *)*j)
  {
    if (*((char *)j + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)j[2], j[3]);
    else
      __p = *(std::string *)(j + 2);
    p_p = &__p;
    v42 = std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    v43 = v42;
    switch(v42[52])
    {
      case 2u:
        v44 = (unint64_t *)*((_QWORD *)v42 + 5);
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          v47 = *((_QWORD *)v42 + 5);
          if (!v47)
            goto LABEL_107;
          if (*(char *)(v47 + 31) < 0)
            operator delete(*(void **)(v47 + 8));
          v48 = (_QWORD *)v47;
          v49 = 0x1012C404EF22A49;
          goto LABEL_106;
        }
        break;
      case 3u:
        v50 = (unint64_t *)*((_QWORD *)v42 + 5);
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          v53 = (_QWORD *)*((_QWORD *)v42 + 5);
          if (!v53)
            goto LABEL_107;
          v54 = (void *)v53[1];
          if (v54)
          {
            v53[2] = v54;
            operator delete(v54);
          }
          v48 = v53;
          v49 = 0x1080C409938AC02;
          goto LABEL_106;
        }
        break;
      case 4u:
        v55 = (unint64_t *)*((_QWORD *)v42 + 5);
        do
        {
          v56 = __ldaxr(v55);
          v57 = v56 - 1;
        }
        while (__stlxr(v57, v55));
        if (!v57)
        {
          v58 = *((_QWORD *)v42 + 5);
          if (!v58)
            goto LABEL_107;
          p_p = (std::string *)(v58 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          goto LABEL_90;
        }
        break;
      case 5u:
        v59 = (unint64_t *)*((_QWORD *)v42 + 5);
        do
        {
          v60 = __ldaxr(v59);
          v61 = v60 - 1;
        }
        while (__stlxr(v61, v59));
        if (!v61)
        {
          v58 = *((_QWORD *)v42 + 5);
          if (!v58)
            goto LABEL_107;
          p_p = (std::string *)(v58 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
LABEL_90:
          v48 = (_QWORD *)v58;
          v49 = 0x1020C405E66F15BLL;
          goto LABEL_106;
        }
        break;
      case 8u:
        v62 = (unint64_t *)*((_QWORD *)v42 + 5);
        do
        {
          v63 = __ldaxr(v62);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v62));
        if (!v64)
        {
          v65 = *((_QWORD *)v42 + 5);
          if (!v65)
            goto LABEL_107;
          boost::detail::shared_count::~shared_count((unsigned int **)(v65 + 16));
          v48 = (_QWORD *)v65;
          v66 = -235920773;
          goto LABEL_105;
        }
        break;
      case 9u:
        v67 = (unint64_t *)*((_QWORD *)v42 + 5);
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (!v69)
        {
          v70 = (_QWORD *)*((_QWORD *)v42 + 5);
          if (v70)
          {
            v71 = (void *)v70[6];
            if (v71)
            {
              v70[7] = v71;
              operator delete(v71);
            }
            v72 = (void *)v70[3];
            if (v72)
            {
              v70[4] = v72;
              operator delete(v72);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v70 + 1));
            v48 = v70;
            v66 = 2071181815;
LABEL_105:
            v49 = v66 | 0x1030C4000000000;
LABEL_106:
            MEMORY[0x219A19A08](v48, v49);
          }
LABEL_107:
          *((_QWORD *)v43 + 5) = 0;
        }
        break;
      default:
        break;
    }
    *((_DWORD *)v43 + 12) = 0;
    v43[52] = 0;
    *((_QWORD *)v43 + 5) = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  for (k = *(uint64_t **)(a2 + 152); k; k = (uint64_t *)*k)
  {
    if (*((char *)k + 39) < 0)
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)k[2], k[3]);
    else
      __p = *(std::string *)(k + 2);
    p_p = &__p;
    v74 = std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    v75 = v74 + 40;
    switch(v74[52])
    {
      case 2u:
        v76 = *(unint64_t **)v75;
        do
        {
          v77 = __ldaxr(v76);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, v76));
        if (!v78)
        {
          v79 = *(unint64_t **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_157;
          if (*((char *)v79 + 31) < 0)
            operator delete((void *)v79[1]);
          v80 = v79;
          v81 = 0x1012C404EF22A49;
          goto LABEL_156;
        }
        break;
      case 3u:
        v82 = *(unint64_t **)v75;
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          v85 = *(unint64_t **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_157;
          v86 = (void *)v85[1];
          if (v86)
          {
            v85[2] = (unint64_t)v86;
            operator delete(v86);
          }
          v80 = v85;
          v81 = 0x1080C409938AC02;
          goto LABEL_156;
        }
        break;
      case 4u:
        v87 = *(unint64_t **)v75;
        do
        {
          v88 = __ldaxr(v87);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v87));
        if (!v89)
        {
          v90 = *(unint64_t **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_157;
          p_p = (std::string *)(v90 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          goto LABEL_140;
        }
        break;
      case 5u:
        v91 = *(unint64_t **)v75;
        do
        {
          v92 = __ldaxr(v91);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, v91));
        if (!v93)
        {
          v90 = *(unint64_t **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_157;
          p_p = (std::string *)(v90 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
LABEL_140:
          v80 = v90;
          v81 = 0x1020C405E66F15BLL;
          goto LABEL_156;
        }
        break;
      case 8u:
        v94 = *(unint64_t **)v75;
        do
        {
          v95 = __ldaxr(v94);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v94));
        if (!v96)
        {
          v97 = *(unint64_t **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_157;
          boost::detail::shared_count::~shared_count((unsigned int **)v97 + 2);
          v80 = v97;
          v98 = -235920773;
          goto LABEL_155;
        }
        break;
      case 9u:
        v99 = *(unint64_t **)v75;
        do
        {
          v100 = __ldaxr(v99);
          v101 = v100 - 1;
        }
        while (__stlxr(v101, v99));
        if (!v101)
        {
          v102 = *(unint64_t **)v75;
          if (*(_QWORD *)v75)
          {
            v103 = (void *)v102[6];
            if (v103)
            {
              v102[7] = (unint64_t)v103;
              operator delete(v103);
            }
            v104 = (void *)v102[3];
            if (v104)
            {
              v102[4] = (unint64_t)v104;
              operator delete(v104);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v102 + 1));
            v80 = v102;
            v98 = 2071181815;
LABEL_155:
            v81 = v98 | 0x1030C4000000000;
LABEL_156:
            MEMORY[0x219A19A08](v80, v81);
          }
LABEL_157:
          *(_QWORD *)v75 = 0;
        }
        break;
      default:
        break;
    }
    *(_QWORD *)(v75 + 5) = 0;
    *(_QWORD *)v75 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  a1[9].__r_.__value_.__s.__data_[16] = *(_BYTE *)(a2 + 176);
  return a1;
}

void sub_217F6E094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v15);
  boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l>::~expr(v14);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_217F6E358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_217F6E3C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  return this;
}

uint64_t boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::action(uint64_t a1, uint64_t a2, __int16 a3)
{
  std::string *v6;
  __int16 v7;

  v6 = parser_impl::parser_config::parser_config((std::string *)a1, (__int128 *)a2);
  v7 = *(_WORD *)(a2 + 184);
  v6[7].__r_.__value_.__s.__data_[18] = *(_BYTE *)(a2 + 186);
  LOWORD(v6[7].__r_.__value_.__r.__words[2]) = v7;
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)&v6[8], a2 + 192);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_WORD *)(a1 + 240) = a3;
  return a1;
}

void sub_217F6E490(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 56);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4[4];

  if (a2 != result)
  {
    v3 = (uint64_t)result;
    v4[0] = 0;
    boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::move_assign((uint64_t)v4, result);
    boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::move_assign(v3, a2);
    boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::move_assign((uint64_t)a2, v4);
    return boost::function0<void>::~function0(v4);
  }
  return result;
}

void sub_217F6E52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS14_6tagns_3tag6assignENS14_7argsns_5list2INS13_INS6_9attributeILi0EEEEENS13_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS1Q_EE5valueEiE4typeE(uint64_t (***a1)(), uint64_t a2))()
{
  std::string v5;
  void *__p;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _WORD v10[25];
  char v11;
  _BYTE v12[48];
  __int16 v13;

  parser_impl::parser_config::parser_config(&v5, (__int128 *)a2);
  v10[24] = *(_WORD *)(a2 + 184);
  v11 = *(_BYTE *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v12, a2 + 192);
  v12[40] = *(_BYTE *)(a2 + 232);
  v13 = *(_WORD *)(a2 + 240);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v5);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  if (v7 < 0)
    operator delete(__p);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217F6E60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  std::string v5;
  void *__p;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _WORD v10[25];
  char v11;
  _BYTE v12[48];
  __int16 v13;

  *a1 = 0;
  parser_impl::parser_config::parser_config(&v5, (__int128 *)a2);
  v10[24] = *(_WORD *)(a2 + 184);
  v11 = *(_BYTE *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v12, a2 + 192);
  v12[40] = *(_BYTE *)(a2 + 232);
  v13 = *(_WORD *)(a2 + 240);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v5);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  if (v7 < 0)
    operator delete(__p);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217F6E72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2)
{
  int v4;
  uint64_t (**v5)();
  std::string v6;
  void *__p;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _WORD v11[25];
  char v12;
  _BYTE v13[48];
  __int16 v14;

  parser_impl::parser_config::parser_config(&v6, (__int128 *)a2);
  v11[24] = *(_WORD *)(a2 + 184);
  v12 = *(_BYTE *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v13, a2 + 192);
  v13[40] = *(_BYTE *)(a2 + 232);
  v14 = *(_WORD *)(a2 + 240);
  v4 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v6, (uint64_t *)a1 + 1);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(__p);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v4)
    v5 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v5 = 0;
  *a1 = v5;
}

void sub_217F6E860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(std::string **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  return boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  std::string v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _WORD v13[25];
  char v14;
  _BYTE v15[48];
  __int16 v16;

  parser_impl::parser_config::parser_config(&v8, (__int128 *)a2);
  v13[24] = *(_WORD *)(a2 + 184);
  v14 = *(_BYTE *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v15, a2 + 192);
  v15[40] = *(_BYTE *)(a2 + 232);
  v16 = *(_WORD *)(a2 + 240);
  v6 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v8, a3);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return v6;
}

{
  std::string v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _WORD v12[25];
  char v13;
  _BYTE v14[48];
  __int16 v15;

  parser_impl::parser_config::parser_config(&v7, (__int128 *)a2);
  v12[24] = *(_WORD *)(a2 + 184);
  v13 = *(_BYTE *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v14, a2 + 192);
  v14[40] = *(_BYTE *)(a2 + 232);
  v15 = *(_WORD *)(a2 + 240);
  boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_functor<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v7, a3);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return 1;
}

void sub_217F6E9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      parser_impl::parser_config::parser_config((std::string *)v6, (__int128 *)v5);
      v7 = *(_WORD *)(v5 + 184);
      *(_BYTE *)(v6 + 186) = *(_BYTE *)(v5 + 186);
      *(_WORD *)(v6 + 184) = v7;
      result = std::unordered_map<std::string,turi::flexible_type>::unordered_map(v6 + 192, v5 + 192);
      *(_BYTE *)(v6 + 232) = *(_BYTE *)(v5 + 232);
      *(_WORD *)(v6 + 240) = *(_WORD *)(v5 + 240);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v8 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v8 + 192);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 136);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 96);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 56);
        if (*(char *)(v8 + 47) < 0)
          operator delete(*(void **)(v8 + 24));
        if (*(char *)(v8 + 23) < 0)
          operator delete(*(void **)v8);
        result = MEMORY[0x219A19A08](v8, 0x10B2C4034433CABLL);
      }
      goto LABEL_12;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CA31CLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CA31CLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_12:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F6EB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 56);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  MEMORY[0x219A19A08](v1, 0x10B2C4034433CABLL);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(std::string *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unsigned __int8 *v42;
  char v43;
  _BYTE v44[9];
  unsigned __int8 v45[16];
  std::string *v46;
  unsigned __int8 **v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v46 = 0;
  LODWORD(v47) = 0;
  BYTE4(v47) = 0;
  memset(v45, 0, 13);
  boost::initialized<turi::flexible_type>::wrapper::~wrapper((uint64_t)&v46);
  v10 = *a2;
  if (parser_impl::string_parser::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(a1, a2, a3, a4, a5, v45))
  {
    v43 = 1;
    v42 = v45;
    v46 = a1 + 10;
    v47 = &v42;
    v48 = a4;
    v49 = &v43;
    boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<turi::flexible_type &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)v44, (uint64_t)&a1[10], (uint64_t)&v46);
    if (v43)
    {
      v11 = 1;
    }
    else
    {
      v11 = 0;
      *a2 = v10;
    }
  }
  else
  {
    v11 = 0;
  }
  switch(v45[12])
  {
    case 2u:
      v12 = *(unint64_t **)v45;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          if (*(char *)(*(_QWORD *)v45 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v45 + 8));
          v16 = v15;
          v17 = 0x1012C404EF22A49;
          goto LABEL_47;
        }
      }
      break;
    case 3u:
      v18 = *(unint64_t **)v45;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v22 = *(void **)(*(_QWORD *)v45 + 8);
          if (v22)
          {
            *(_QWORD *)(*(_QWORD *)v45 + 16) = v22;
            operator delete(v22);
          }
          v16 = v21;
          v17 = 0x1080C409938AC02;
          goto LABEL_47;
        }
      }
      break;
    case 4u:
      v23 = *(unint64_t **)v45;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v46 = (std::string *)(*(_QWORD *)v45 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
          goto LABEL_31;
        }
      }
      break;
    case 5u:
      v27 = *(unint64_t **)v45;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v26 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v46 = (std::string *)(*(_QWORD *)v45 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
LABEL_31:
          v16 = v26;
          v17 = 0x1020C405E66F15BLL;
          goto LABEL_47;
        }
      }
      break;
    case 8u:
      v30 = *(unint64_t **)v45;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v45 + 16));
          v16 = v33;
          v34 = -235920773;
          goto LABEL_46;
        }
      }
      break;
    case 9u:
      v35 = *(unint64_t **)v45;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v39 = *(void **)(*(_QWORD *)v45 + 48);
          if (v39)
          {
            *(_QWORD *)(*(_QWORD *)v45 + 56) = v39;
            operator delete(v39);
          }
          v40 = *(void **)(v38 + 24);
          if (v40)
          {
            *(_QWORD *)(v38 + 32) = v40;
            operator delete(v40);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v38 + 8);
          v16 = v38;
          v34 = 2071181815;
LABEL_46:
          v17 = v34 | 0x1030C4000000000;
LABEL_47:
          MEMORY[0x219A19A08](v16, v17);
        }
      }
      break;
    default:
      return v11;
  }
  return v11;
}

void sub_217F6EEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  switch(a14)
  {
    case 2:
      v15 = (unint64_t *)a12;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (v17)
        goto LABEL_39;
      v18 = a12;
      if (!a12)
        goto LABEL_39;
      if (*(char *)(a12 + 31) < 0)
        operator delete(*(void **)(a12 + 8));
      v19 = (_QWORD *)v18;
      v20 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v29 = (unint64_t *)a12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_39;
      v32 = a12;
      if (!a12)
        goto LABEL_39;
      v33 = *(void **)(a12 + 8);
      if (v33)
      {
        *(_QWORD *)(a12 + 16) = v33;
        operator delete(v33);
      }
      v19 = (_QWORD *)v32;
      v20 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v21 = (unint64_t *)a12;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (v23)
        goto LABEL_39;
      v24 = a12;
      if (!a12)
        goto LABEL_39;
      a11 = a12 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
      goto LABEL_31;
    case 5:
      v34 = (unint64_t *)a12;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_39;
      v24 = a12;
      if (!a12)
        goto LABEL_39;
      a11 = a12 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
LABEL_31:
      v19 = (_QWORD *)v24;
      v20 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v37 = (unint64_t *)a12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_39;
      v40 = a12;
      if (!a12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a12 + 16));
      v19 = (_QWORD *)v40;
      v28 = -235920773;
      goto LABEL_37;
    case 9:
      v25 = (unint64_t *)a12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27 || !a12)
        goto LABEL_39;
      v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a12);
      v28 = 2071181815;
LABEL_37:
      v20 = v28 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v19, v20);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

BOOL parser_impl::string_parser::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(std::string *this, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  std::string::size_type size;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t string;
  __int128 v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  _QWORD *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unsigned int v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  BOOL v81;
  int v82;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  int v107;
  unint64_t *v109;
  unint64_t v110;
  unsigned __int8 v114;
  std::string *data;
  int64_t v116;
  std::locale v117;
  std::string __dst;
  std::locale v119;
  std::locale v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE __p[32];
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v8 = *a2;
  v9 = *a3;
  if (*a2 == *a3)
  {
LABEL_7:
    v9 = v8;
    goto LABEL_8;
  }
  if ((boost::spirit::char_encoding::iso8859_1_char_types[*v8] & 0x40) != 0)
  {
    v10 = v8 + 1;
    do
    {
      v8 = v10;
      *a2 = v10;
      v9 = *a3;
      if (v10 == *a3)
        goto LABEL_7;
      ++v10;
    }
    while ((boost::spirit::char_encoding::iso8859_1_char_types[*v8] & 0x40) != 0);
  }
LABEL_8:
  memset(__p, 0, sizeof(__p));
  if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
  {
    data = (std::string *)this[1].__r_.__value_.__l.__data_;
    size = this[1].__r_.__value_.__l.__size_;
  }
  else
  {
    data = this + 1;
    size = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
  }
  v116 = size;
  if (v8 == v9)
  {
    v114 = 0;
    v13 = 0;
    goto LABEL_82;
  }
  v12 = 0;
  v13 = 0;
  v114 = 0;
  v14 = 0;
  while (1)
  {
    v15 = *v8;
    if (v14 == 2)
      break;
    if (std::string::find(this, v15, 0) != -1)
      goto LABEL_79;
    if (this[7].__r_.__value_.__s.__data_[16] && this[7].__r_.__value_.__s.__data_[17] == v15)
    {
      if (this[7].__r_.__value_.__s.__data_[18])
        goto LABEL_79;
      if (v116 <= *a3 - v8)
      {
        if (!v116)
        {
LABEL_79:
          v9 = v8;
          goto LABEL_82;
        }
        v28 = 0;
        while (v8[v28] == data->__r_.__value_.__s.__data_[v28])
        {
          if (v116 == ++v28)
            goto LABEL_79;
        }
      }
    }
    v9 = v8 + 1;
    if (v14 == 1)
    {
      if (*(_QWORD *)&__p[24] > 0x7FuLL)
      {
        if (*(_QWORD *)&__p[24] == 128)
        {
          v29 = operator new(0x88uLL);
          v30 = v126;
          v29[4] = v125;
          v29[5] = v30;
          v31 = v128;
          v29[6] = v127;
          v29[7] = v31;
          v32 = v122;
          *v29 = v121;
          v29[1] = v32;
          v33 = v124;
          v29[2] = v123;
          v29[3] = v33;
          *((_BYTE *)v29 + 128) = 0;
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          *(_QWORD *)__p = v29;
          *(_OWORD *)&__p[8] = xmmword_2186CE870;
        }
        std::string::push_back((std::string *)__p, v15);
      }
      else
      {
        *((_BYTE *)&v121 + *(_QWORD *)&__p[24]) = v15;
      }
      ++*(_QWORD *)&__p[24];
      v27 = this[2].__r_.__value_.__s.__data_[0];
      if (this[2].__r_.__value_.__s.__data_[0])
      {
        v21 = this[2].__r_.__value_.__s.__data_[1];
        v14 = 1;
LABEL_62:
        v8 = v13;
LABEL_63:
        v27 = v15 == v21;
        goto LABEL_66;
      }
      v14 = 1;
LABEL_65:
      v8 = v13;
      goto LABEL_66;
    }
    v14 = 2;
    if (v15 != 34 && v15 != 39)
    {
      if (*(_QWORD *)&__p[24] > 0x7FuLL)
      {
        if (*(_QWORD *)&__p[24] == 128)
        {
          v34 = operator new(0x88uLL);
          v35 = v126;
          v34[4] = v125;
          v34[5] = v35;
          v36 = v128;
          v34[6] = v127;
          v34[7] = v36;
          v37 = v122;
          *v34 = v121;
          v34[1] = v37;
          v38 = v124;
          v34[2] = v123;
          v34[3] = v38;
          *((_BYTE *)v34 + 128) = 0;
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          *(_QWORD *)__p = v34;
          *(_OWORD *)&__p[8] = xmmword_2186CE870;
        }
        std::string::push_back((std::string *)__p, v15);
      }
      else
      {
        *((_BYTE *)&v121 + *(_QWORD *)&__p[24]) = v15;
      }
      ++*(_QWORD *)&__p[24];
      v27 = this[2].__r_.__value_.__s.__data_[0];
      if (!this[2].__r_.__value_.__s.__data_[0])
      {
        v14 = 1;
        goto LABEL_66;
      }
      v21 = this[2].__r_.__value_.__s.__data_[1];
      v14 = 1;
      goto LABEL_63;
    }
    v114 = v15;
    v27 = v12;
LABEL_66:
    v13 = v8;
    v12 = (v12 ^ 1) & v27;
    v8 = v9;
    if (v9 == *a3)
      goto LABEL_82;
  }
  if ((v15 != v114) | v12 & 1)
  {
    if (*(_QWORD *)&__p[24] > 0x7FuLL)
    {
      if (*(_QWORD *)&__p[24] == 128)
      {
        v16 = operator new(0x88uLL);
        v17 = v126;
        v16[4] = v125;
        v16[5] = v17;
        v18 = v128;
        v16[6] = v127;
        v16[7] = v18;
        v19 = v122;
        *v16 = v121;
        v16[1] = v19;
        v20 = v124;
        v16[2] = v123;
        v16[3] = v20;
        *((_BYTE *)v16 + 128) = 0;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_QWORD *)__p = v16;
        *(_OWORD *)&__p[8] = xmmword_2186CE870;
      }
      std::string::push_back((std::string *)__p, v15);
    }
    else
    {
      *((_BYTE *)&v121 + *(_QWORD *)&__p[24]) = v15;
    }
    ++*(_QWORD *)&__p[24];
    v27 = this[2].__r_.__value_.__s.__data_[0];
    if (this[2].__r_.__value_.__s.__data_[0])
    {
      v21 = this[2].__r_.__value_.__s.__data_[1];
      v14 = 2;
      v9 = v8 + 1;
      goto LABEL_62;
    }
    v14 = 2;
    v9 = v8 + 1;
    goto LABEL_65;
  }
  if (v114 != 34)
    goto LABEL_81;
  if (this[2].__r_.__value_.__s.__data_[2])
  {
    v9 = v8 + 2;
    if (v8 + 2 < *a3 && v8[1] == 34)
    {
      if (*(_QWORD *)&__p[24] > 0x7FuLL)
      {
        if (*(_QWORD *)&__p[24] == 128)
        {
          v22 = operator new(0x88uLL);
          v23 = v126;
          v22[4] = v125;
          v22[5] = v23;
          v24 = v128;
          v22[6] = v127;
          v22[7] = v24;
          v25 = v122;
          *v22 = v121;
          v22[1] = v25;
          v26 = v124;
          v22[2] = v123;
          v22[3] = v26;
          *((_BYTE *)v22 + 128) = 0;
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          *(_QWORD *)__p = v22;
          *(_OWORD *)&__p[8] = xmmword_2186CE870;
        }
        std::string::push_back((std::string *)__p, 34);
      }
      else
      {
        *((_BYTE *)&v121 + *(_QWORD *)&__p[24]) = 34;
      }
      ++*(_QWORD *)&__p[24];
      v27 = this[2].__r_.__value_.__s.__data_[0];
      if (this[2].__r_.__value_.__s.__data_[0])
      {
        v15 = this[2].__r_.__value_.__s.__data_[1];
        v14 = 2;
        v21 = 34;
        v114 = 34;
        goto LABEL_62;
      }
      v114 = 34;
      v14 = 2;
      goto LABEL_65;
    }
  }
  v114 = 34;
LABEL_81:
  v9 = v8 + 1;
LABEL_82:
  v39 = *a2;
  if (v9 != *a2)
  {
    *a2 = v9;
    if (this[9].__r_.__value_.__s.__data_[16] && v13)
    {
      std::string::basic_string[abi:ne180100](&__dst, v13, v9 - v13);
      MEMORY[0x219A19828](&v117);
      LODWORD(v119.__locale_) = 0x4000;
      std::locale::locale(&v120, &v117);
      boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(&__dst, &v119);
      std::locale::~locale(&v120);
      std::locale::~locale(&v117);
      v40 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(this[8].__r_.__value_.__r.__words, (unsigned __int8 *)&__dst);
      v41 = v40;
      if (v40)
      {
        v42 = v40 + 40;
        if (v40 + 40 != a6)
        {
          switch(a6[12])
          {
            case 2u:
              v43 = *(unint64_t **)a6;
              do
              {
                v44 = __ldaxr(v43);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, v43));
              if (!v45)
              {
                v46 = *(unint64_t **)a6;
                if (!*(_QWORD *)a6)
                  goto LABEL_142;
                if (*((char *)v46 + 31) < 0)
                  operator delete((void *)v46[1]);
                v47 = v46;
                v48 = 0x1012C404EF22A49;
                goto LABEL_141;
              }
              break;
            case 3u:
              v60 = *(unint64_t **)a6;
              do
              {
                v61 = __ldaxr(v60);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, v60));
              if (!v62)
              {
                v63 = *(unint64_t **)a6;
                if (!*(_QWORD *)a6)
                  goto LABEL_142;
                v64 = (void *)v63[1];
                if (v64)
                {
                  v63[2] = (unint64_t)v64;
                  operator delete(v64);
                }
                v47 = v63;
                v48 = 0x1080C409938AC02;
                goto LABEL_141;
              }
              break;
            case 4u:
              v65 = *(unint64_t **)a6;
              do
              {
                v66 = __ldaxr(v65);
                v67 = v66 - 1;
              }
              while (__stlxr(v67, v65));
              if (!v67)
              {
                v68 = *(unint64_t **)a6;
                if (!*(_QWORD *)a6)
                  goto LABEL_142;
                v119.__locale_ = (std::locale::__imp *)(v68 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
                goto LABEL_129;
              }
              break;
            case 5u:
              v69 = *(unint64_t **)a6;
              do
              {
                v70 = __ldaxr(v69);
                v71 = v70 - 1;
              }
              while (__stlxr(v71, v69));
              if (!v71)
              {
                v68 = *(unint64_t **)a6;
                if (!*(_QWORD *)a6)
                  goto LABEL_142;
                v119.__locale_ = (std::locale::__imp *)(v68 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
LABEL_129:
                v47 = v68;
                v48 = 0x1020C405E66F15BLL;
                goto LABEL_141;
              }
              break;
            case 8u:
              v72 = *(unint64_t **)a6;
              do
              {
                v73 = __ldaxr(v72);
                v74 = v73 - 1;
              }
              while (__stlxr(v74, v72));
              if (!v74)
              {
                v75 = *(unint64_t **)a6;
                if (!*(_QWORD *)a6)
                  goto LABEL_142;
                boost::detail::shared_count::~shared_count((unsigned int **)v75 + 2);
                v47 = v75;
                v76 = -235920773;
                goto LABEL_140;
              }
              break;
            case 9u:
              v77 = *(unint64_t **)a6;
              do
              {
                v78 = __ldaxr(v77);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, v77));
              if (!v79)
              {
                if (*(_QWORD *)a6)
                {
                  v47 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a6);
                  v76 = 2071181815;
LABEL_140:
                  v48 = v76 | 0x1030C4000000000;
LABEL_141:
                  MEMORY[0x219A19A08](v47, v48);
                }
LABEL_142:
                *(_QWORD *)a6 = 0;
              }
              break;
            default:
              break;
          }
          v80 = (_QWORD *)*v42;
          *(_QWORD *)(a6 + 5) = *(_QWORD *)(v41 + 45);
          *(_QWORD *)a6 = v80;
          LODWORD(v80) = v41[52];
          a6[12] = v80;
          v81 = v80 > 9;
          v82 = (1 << (char)v80) & 0x33C;
          if (!v81 && v82 != 0)
          {
            v84 = *(unint64_t **)a6;
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 + 1, v84));
          }
        }
        goto LABEL_187;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    v50 = *(_OWORD *)string;
    __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(string + 16);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v50;
    *(_QWORD *)(string + 8) = 0;
    *(_QWORD *)(string + 16) = 0;
    *(_QWORD *)string = 0;
    if (v114)
    {
      turi::unescape_string(&__dst, (unint64_t *)this[2].__r_.__value_.__s.__data_[0], this[2].__r_.__value_.__s.__data_[1], v114, this[2].__r_.__value_.__s.__data_[2] != 0);
    }
    else
    {
      MEMORY[0x219A19828](&v117);
      LODWORD(v119.__locale_) = 0x4000;
      std::locale::locale(&v120, &v117);
      boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(&__dst, &v119);
      std::locale::~locale(&v120);
      std::locale::~locale(&v117);
    }
    if (this[9].__r_.__value_.__s.__data_[16]
      || (v51 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(this[8].__r_.__value_.__r.__words, (unsigned __int8 *)&__dst), (v52 = v51) == 0))
    {
      turi::flexible_type::operator=<std::string>((uint64_t *)a6, (__int128 *)&__dst);
    }
    else
    {
      v53 = v51 + 40;
      if (v51 + 40 != a6)
      {
        switch(a6[12])
        {
          case 2u:
            v54 = *(unint64_t **)a6;
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              v57 = *(_QWORD *)a6;
              if (!*(_QWORD *)a6)
                goto LABEL_180;
              if (*(char *)(v57 + 31) < 0)
                operator delete(*(void **)(v57 + 8));
              v58 = (_QWORD *)v57;
              v59 = 0x1012C404EF22A49;
              goto LABEL_179;
            }
            break;
          case 3u:
            v86 = *(unint64_t **)a6;
            do
            {
              v87 = __ldaxr(v86);
              v88 = v87 - 1;
            }
            while (__stlxr(v88, v86));
            if (!v88)
            {
              v89 = *(_QWORD *)a6;
              if (!*(_QWORD *)a6)
                goto LABEL_180;
              v90 = *(void **)(v89 + 8);
              if (v90)
              {
                *(_QWORD *)(v89 + 16) = v90;
                operator delete(v90);
              }
              v58 = (_QWORD *)v89;
              v59 = 0x1080C409938AC02;
              goto LABEL_179;
            }
            break;
          case 4u:
            v91 = *(unint64_t **)a6;
            do
            {
              v92 = __ldaxr(v91);
              v93 = v92 - 1;
            }
            while (__stlxr(v93, v91));
            if (!v93)
            {
              v94 = *(_QWORD *)a6;
              if (!*(_QWORD *)a6)
                goto LABEL_180;
              v119.__locale_ = (std::locale::__imp *)(v94 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
              goto LABEL_167;
            }
            break;
          case 5u:
            v95 = *(unint64_t **)a6;
            do
            {
              v96 = __ldaxr(v95);
              v97 = v96 - 1;
            }
            while (__stlxr(v97, v95));
            if (!v97)
            {
              v94 = *(_QWORD *)a6;
              if (!*(_QWORD *)a6)
                goto LABEL_180;
              v119.__locale_ = (std::locale::__imp *)(v94 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
LABEL_167:
              v58 = (_QWORD *)v94;
              v59 = 0x1020C405E66F15BLL;
              goto LABEL_179;
            }
            break;
          case 8u:
            v98 = *(unint64_t **)a6;
            do
            {
              v99 = __ldaxr(v98);
              v100 = v99 - 1;
            }
            while (__stlxr(v100, v98));
            if (!v100)
            {
              v101 = *(_QWORD *)a6;
              if (!*(_QWORD *)a6)
                goto LABEL_180;
              boost::detail::shared_count::~shared_count((unsigned int **)(v101 + 16));
              v58 = (_QWORD *)v101;
              v102 = -235920773;
              goto LABEL_178;
            }
            break;
          case 9u:
            v103 = *(unint64_t **)a6;
            do
            {
              v104 = __ldaxr(v103);
              v105 = v104 - 1;
            }
            while (__stlxr(v105, v103));
            if (!v105)
            {
              if (*(_QWORD *)a6)
              {
                v58 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a6);
                v102 = 2071181815;
LABEL_178:
                v59 = v102 | 0x1030C4000000000;
LABEL_179:
                MEMORY[0x219A19A08](v58, v59);
              }
LABEL_180:
              *(_QWORD *)a6 = 0;
            }
            break;
          default:
            break;
        }
        v106 = (_QWORD *)*v53;
        *(_QWORD *)(a6 + 5) = *(_QWORD *)(v52 + 45);
        *(_QWORD *)a6 = v106;
        LODWORD(v106) = v52[52];
        a6[12] = v106;
        v81 = v106 > 9;
        v107 = (1 << (char)v106) & 0x33C;
        if (!v81 && v107 != 0)
        {
          v109 = *(unint64_t **)a6;
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 + 1, v109));
        }
      }
    }
LABEL_187:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return v9 != v39;
}

void sub_217F6FB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a24 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  _Unwind_Resume(exception_object);
}

uint64_t boost::initialized<turi::flexible_type>::wrapper::~wrapper(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

uint64_t parser_impl::`anonymous namespace'::stack_buffer::get_string(parser_impl::_anonymous_namespace_::stack_buffer *this)
{
  size_t v2;
  void **v3;
  __int128 __dst;
  uint64_t v6;

  v2 = *((_QWORD *)this + 19);
  if (v2 <= 0x80)
  {
    std::string::basic_string[abi:ne180100](&__dst, this, v2);
    v3 = (void **)((char *)this + 128);
    if (*((char *)this + 151) < 0)
      operator delete(*v3);
    *(_OWORD *)v3 = __dst;
    *((_QWORD *)this + 18) = v6;
  }
  return (uint64_t)this + 128;
}

void boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(std::string *a1, const std::locale *a2)
{
  int v3;
  char *v4;
  std::string::size_type size;
  char *v6;
  std::locale::id *v7;
  std::string::size_type v8;
  uint64_t v9;
  const std::locale::facet *v10;
  int v11;
  std::string::size_type v12;
  char *v13;
  int locale;
  std::locale v15;
  int v16;
  std::locale v17;

  v3 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v3 >= 0)
    v4 = (char *)a1;
  else
    v4 = (char *)a1->__r_.__value_.__r.__words[0];
  if (v3 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  v6 = &v4[size];
  locale = (int)a2->__locale_;
  std::locale::locale(&v15, a2 + 1);
  v16 = locale;
  std::locale::locale(&v17, &v15);
  v7 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (size)
  {
    v8 = size;
    v9 = v4[size - 1];
    v10 = std::locale::use_facet(&v17, v7);
    if ((v9 & 0x80) != 0)
    {
      v4 = v6;
      break;
    }
    --v6;
    v11 = *((_DWORD *)&v10[1].~facet + v9);
    size = v8 - 1;
    if ((v11 & v16) == 0)
    {
      v4 += v8;
      break;
    }
  }
  std::locale::~locale(&v17);
  v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v12 & 0x80u) == 0)
    v13 = (char *)a1;
  else
    v13 = (char *)a1->__r_.__value_.__r.__words[0];
  if ((v12 & 0x80u) != 0)
    v12 = a1->__r_.__value_.__l.__size_;
  std::string::erase(a1, v4 - v13, &v13[v12] - v4);
  std::locale::~locale(&v15);
}

void sub_217F6FF54(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<turi::flexible_type &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  unint64_t *v40;
  unint64_t v41;
  void **v43;

  v3 = *(uint64_t ***)(a3 + 8);
  v4 = *(uint64_t **)(a3 + 16);
  v5 = *v3;
  v6 = *v4;
  if (*v3 != (uint64_t *)*v4)
  {
    switch(*(_BYTE *)(v6 + 12))
    {
      case 2:
        v7 = *(unint64_t **)v6;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          v10 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          if (*((char *)v10 + 31) < 0)
            operator delete((void *)v10[1]);
          v11 = v10;
          v12 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v13 = *(unint64_t **)v6;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          v17 = (void *)v16[1];
          if (v17)
          {
            v16[2] = (unint64_t)v17;
            operator delete(v17);
          }
          v11 = v16;
          v12 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v18 = *(unint64_t **)v6;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          v43 = (void **)(v21 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
          goto LABEL_27;
        }
        break;
      case 5:
        v22 = *(unint64_t **)v6;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v21 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          v43 = (void **)(v21 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_27:
          v11 = v21;
          v12 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v25 = *(unint64_t **)v6;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v28 = *(unint64_t **)v6;
          if (!*(_QWORD *)v6)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
          v11 = v28;
          v29 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v30 = *(unint64_t **)v6;
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = *(unint64_t **)v6;
          if (*(_QWORD *)v6)
          {
            v34 = (void *)v33[6];
            if (v34)
            {
              v33[7] = (unint64_t)v34;
              operator delete(v34);
            }
            v35 = (void *)v33[3];
            if (v35)
            {
              v33[4] = (unint64_t)v35;
              operator delete(v35);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
            v11 = v33;
            v29 = 2071181815;
LABEL_42:
            v12 = v29 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v11, v12);
          }
LABEL_44:
          *(_QWORD *)v6 = 0;
        }
        break;
      default:
        break;
    }
    v36 = *v5;
    *(_QWORD *)(v6 + 5) = *(uint64_t *)((char *)v5 + 5);
    *(_QWORD *)v6 = v36;
    LODWORD(v36) = *((unsigned __int8 *)v5 + 12);
    *(_BYTE *)(v6 + 12) = v36;
    v37 = v36 > 9;
    v38 = (1 << v36) & 0x33C;
    if (!v37 && v38 != 0)
    {
      v40 = *(unint64_t **)v6;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
    }
  }
  return v6;
}

void sub_217F702A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_functor<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = operator new();
  parser_impl::parser_config::parser_config((std::string *)v5, (__int128 *)a2);
  *(_WORD *)(v5 + 184) = *(_WORD *)(a2 + 184);
  *(_BYTE *)(v5 + 186) = *(_BYTE *)(a2 + 186);
  result = std::unordered_map<std::string,turi::flexible_type>::unordered_map(v5 + 192, a2 + 192);
  *(_BYTE *)(v5 + 232) = *(_BYTE *)(a2 + 232);
  *(_WORD *)(v5 + 240) = *(_WORD *)(a2 + 240);
  *a3 = v5;
  return result;
}

void sub_217F70370(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 56);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  MEMORY[0x219A19A08](v1, 0x10B2C4034433CABLL);
  _Unwind_Resume(a1);
}

uint64_t boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_217F7046C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_217F7047C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v32;

  switch(*(_BYTE *)(a1 + 12))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v32);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)a1;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v32);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)a1;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  return a1;
}

void _ZN5boost6spirit2qi4ruleIPKcFN4turi13flexible_typeEvEKNS_5proto7exprns_4exprINS8_6tagns_3tag8terminalENS8_7argsns_4termINS0_3tag9char_codeINSG_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEENS0_11unused_typeESP_E6defineIN4mpl_5BOOL_ILb0EEENSA_INSC_10bitwise_orENSE_5list2IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_INSC_9subscriptENSW_IRNS0_8terminalINSG_12stateful_tagINS5_20strict_real_policiesIdEENSG_7double_EdSP_EEEERKNS_7phoenix5actorINS9_10basic_exprINSC_6assignENSW_INS17_INS0_9attributeILi0EEEEENS17_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSA_ISX_NSW_IRKNSY_INSG_9long_longEEES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNSt3__16vectorIdNS21_9allocatorIdEEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS22_IS6_NS23_IS6_EEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS22_INS21_4pairIS6_S6_EENS23_IS2V_EEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNSA_ISD_NSF_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS3A_13parser_configEEEEEEEELl0EEES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRKNSY_INSG_3epsEEERKNS17_INS18_IS19_NSW_IS1C_NS17_INS18_ISD_NSF_IS6_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEEEEvRSQ_RKT0_NST_ILb1EEE(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  char v4;
  __int16 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  __int16 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];

  v34[3] = *MEMORY[0x24BDAC8D0];
  _ZNK5boost6spirit6detail11make_binaryINS0_2qi6domainENS_5proto6tagns_3tag10bitwise_orENS0_13meta_compilerIS4_E12meta_grammarELb1EE4implIRKNS5_7exprns_4exprIS8_NS5_7argsns_5list2IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_INS7_9subscriptENSH_IRNS0_8terminalINS0_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSK_7double_EdNS0_11unused_typeEEEEERKNS_7phoenix5actorINSE_10basic_exprINS7_6assignENSH_INSV_INS0_9attributeILi0EEEEENSV_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_9long_longEEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS3_4ruleIPKcFNSt3__16vectorIdNS1S_9allocatorIdEEEEvEKNSF_INS7_8terminalENSG_4termINSK_9char_codeINSK_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEESQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS1P_IS1R_FNS1T_INSM_13flexible_typeENS1U_IS2I_EEEEvES27_SQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS1P_IS1R_FNS1T_INS1S_4pairIS2I_S2I_EENS1U_IS2X_EEEEvES27_SQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNSF_IS1Y_NS1Z_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS3C_13parser_configEEEEEEEELl0EEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_3epsEEERKNSV_INSW_ISX_NSH_IS10_NSV_INSW_IS1Y_NS1Z_IS2I_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEERKN4mpl_5void_ERSQ_EclES4E_S4I_S4J_(a2, (uint64_t)&v3);
  v19 = v3;
  v20 = v4;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v26, (uint64_t)&v10);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS17_6tagns_3tag6assignENS17_7argsns_5list2INS16_INS6_9attributeILi0EEEEENS16_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INS10_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1N_EENS9_INS10_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1U_9allocatorIdEEEEvEKNS18_4exprINS1B_8terminalENS1D_4termISQ_EELl0EEENS6_11unused_typeES26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_ISB_NS1W_ISB_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_INS1U_4pairISB_SB_EENS1W_IS2J_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_IN11parser_impl13string_parserES1N_EENS9_INS10_INSJ_10eps_parserENS16_INS19_IS1C_NS1E_IS1H_NS16_INS19_IS21_NS22_ISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES3F_((uint64_t *)(a1 + 32), (uint64_t)&v19);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v34);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v33);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v18);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  if (v13 < 0)
    operator delete(__p);
  if (v11 < 0)
    operator delete(v10);
}

void sub_217F707E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a54);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS17_6tagns_3tag6assignENS17_7argsns_5list2INS16_INS6_9attributeILi0EEEEENS16_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INS10_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1N_EENS9_INS10_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1U_9allocatorIdEEEEvEKNS18_4exprINS1B_8terminalENS1D_4termISQ_EELl0EEENS6_11unused_typeES26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_ISB_NS1W_ISB_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_INS1U_4pairISB_SB_EENS1W_IS2J_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_IN11parser_impl13string_parserES1N_EENS9_INS10_INSJ_10eps_parserENS16_INS19_IS1C_NS1E_IS1H_NS16_INS19_IS21_NS22_ISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES3F_(uint64_t *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t (**v5[4])();
  __int16 v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  v6 = *(_WORD *)a2;
  v7 = *(_BYTE *)(a2 + 2);
  v8 = *(_WORD *)(a2 + 8);
  v9 = *(_BYTE *)(a2 + 10);
  v3 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  v11 = v3;
  v12 = *(_OWORD *)(a2 + 48);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v13, a2 + 64);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS17_6tagns_3tag6assignENS17_7argsns_5list2INS16_INS6_9attributeILi0EEEEENS16_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INS10_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1N_EENS9_INS10_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1U_9allocatorIdEEEEvEKNS18_4exprINS1B_8terminalENS1D_4termISQ_EELl0EEENS6_11unused_typeES26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_ISB_NS1W_ISB_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_INS1U_4pairISB_SB_EENS1W_IS2J_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_IN11parser_impl13string_parserES1N_EENS9_INS10_INSJ_10eps_parserENS16_INS19_IS1C_NS1E_IS1H_NS16_INS19_IS21_NS22_ISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS3E_EE5valueEiE4typeE(v5, &v6);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap((uint64_t *)v5, a1);
  boost::function0<void>::~function0((uint64_t *)v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v21);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  return a1;
}

void sub_217F70924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::function0<void>::~function0((uint64_t *)va);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder(uint64_t a1)
{
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(a1 + 328);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(a1 + 256);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 200);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 160);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 120);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return a1;
}

uint64_t boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int16 v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = parser_impl::parser_config::parser_config((std::string *)a1, (__int128 *)a2);
  v5 = *(_WORD *)(a2 + 184);
  v4[7].__r_.__value_.__s.__data_[18] = *(_BYTE *)(a2 + 186);
  LOWORD(v4[7].__r_.__value_.__r.__words[2]) = v5;
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)&v4[8], a2 + 192);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 276) = 0;
  if (a2 != a1)
  {
    v6 = *(_QWORD *)(a2 + 264);
    *(_QWORD *)(a1 + 269) = *(_QWORD *)(a2 + 269);
    *(_QWORD *)(a1 + 264) = v6;
    v7 = *(unsigned __int8 *)(a2 + 276);
    *(_BYTE *)(a1 + 276) = v7;
    if (v7 <= 9 && ((1 << v7) & 0x33C) != 0)
    {
      v8 = *(unint64_t **)(a1 + 264);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
  }
  return a1;
}

void sub_217F70A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 56);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((void **)v1);
  _Unwind_Resume(a1);
}

void _ZNK5boost6spirit6detail11make_binaryINS0_2qi6domainENS_5proto6tagns_3tag10bitwise_orENS0_13meta_compilerIS4_E12meta_grammarELb1EE4implIRKNS5_7exprns_4exprIS8_NS5_7argsns_5list2IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_INS7_9subscriptENSH_IRNS0_8terminalINS0_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSK_7double_EdNS0_11unused_typeEEEEERKNS_7phoenix5actorINSE_10basic_exprINS7_6assignENSH_INSV_INS0_9attributeILi0EEEEENSV_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_9long_longEEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS3_4ruleIPKcFNSt3__16vectorIdNS1S_9allocatorIdEEEEvEKNSF_INS7_8terminalENSG_4termINSK_9char_codeINSK_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEESQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS1P_IS1R_FNS1T_INSM_13flexible_typeENS1U_IS2I_EEEEvES27_SQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS1P_IS1R_FNS1T_INS1S_4pairIS2I_S2I_EENS1U_IS2X_EEEEvES27_SQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNSF_IS1Y_NS1Z_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS3C_13parser_configEEEEEEEELl0EEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_3epsEEERKNSV_INSW_ISX_NSH_IS10_NSV_INSW_IS1Y_NS1Z_IS2I_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEERKN4mpl_5void_ERSQ_EclES4E_S4I_S4J_(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int16 v4;
  char v5;
  __int16 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  _ZNK5boost5proto6detail17reverse_fold_implINS0_4makeINS_6fusion4nil_EEENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINSB_13meta_compilerINSB_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprISA_NS0_7argsns_5list2IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_INS9_9subscriptENSO_IRNSB_8terminalINSB_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSR_7double_EdNSB_11unused_typeEEEEERKNS_7phoenix5actorINSL_10basic_exprINS9_6assignENSO_INS12_INSB_9attributeILi0EEEEENS12_INSB_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSM_ISP_NSO_IRKNSQ_INSR_9long_longEEES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNSF_4ruleIPKcFNSt3__16vectorIdNS1Z_9allocatorIdEEEEvEKNSM_INS9_8terminalENSN_4termINSR_9char_codeINSR_5spaceENSB_13char_encoding9iso8859_1EEEEELl0EEESX_SX_EES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNS1W_IS1Y_FNS20_INST_13flexible_typeENS21_IS2P_EEEEvES2E_SX_SX_EES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNS1W_IS1Y_FNS20_INS1Z_4pairIS2P_S2P_EENS21_IS34_EEEEvES2E_SX_SX_EES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNSM_IS25_NS26_INSB_11terminal_exIN11parser_impl3tag17restricted_stringENS4_6vectorIJNS3J_13parser_configEEEEEEEELl0EEES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRKNSQ_INSR_3epsEEERKNS12_INS13_IS14_NSO_IS17_NS12_INS13_IS25_NS26_IS2P_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEERKN4mpl_5void_ERSX_Ll2EEclES4K_S4O_S4P_(a1, (uint64_t)&v4);
  *(_WORD *)a2 = v4;
  *(_BYTE *)(a2 + 2) = v5;
  *(_WORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 10) = v7;
  v3 = v9;
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v10;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(a2 + 64, (uint64_t)&v11);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v19);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
}

void sub_217F70BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZNK5boost5proto6detail17reverse_fold_implINS0_4makeINS_6fusion4nil_EEENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINSB_13meta_compilerINSB_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprISA_NS0_7argsns_5list2IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_INS9_9subscriptENSO_IRNSB_8terminalINSB_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSR_7double_EdNSB_11unused_typeEEEEERKNS_7phoenix5actorINSL_10basic_exprINS9_6assignENSO_INS12_INSB_9attributeILi0EEEEENS12_INSB_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSM_ISP_NSO_IRKNSQ_INSR_9long_longEEES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNSF_4ruleIPKcFNSt3__16vectorIdNS1Z_9allocatorIdEEEEvEKNSM_INS9_8terminalENSN_4termINSR_9char_codeINSR_5spaceENSB_13char_encoding9iso8859_1EEEEELl0EEESX_SX_EES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNS1W_IS1Y_FNS20_INST_13flexible_typeENS21_IS2P_EEEEvES2E_SX_SX_EES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNS1W_IS1Y_FNS20_INS1Z_4pairIS2P_S2P_EENS21_IS34_EEEEvES2E_SX_SX_EES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNSM_IS25_NS26_INSB_11terminal_exIN11parser_impl3tag17restricted_stringENS4_6vectorIJNS3J_13parser_configEEEEEEEELl0EEES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRKNSQ_INSR_3epsEEERKNS12_INS13_IS14_NSO_IS17_NS12_INS13_IS25_NS26_IS2P_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEERKN4mpl_5void_ERSX_Ll2EEclES4K_S4O_S4P_@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _BYTE v5[16];
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::eps> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const&>,2l> const&,boost::fusion::nil_,boost::spirit::unused_type &>::operator()(*(_QWORD *)(a1 + 8), (uint64_t)v5);
  _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorIdNS1W_9allocatorIdEEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INSQ_13flexible_typeENS1Y_IS2M_EEEEvES2B_SU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INS1W_4pairIS2M_S2M_EENS1Y_IS31_EEEEvES2B_SU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSJ_IS22_NS23_INS8_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS3G_13parser_configEEEEEEEELl0EEES1C_EELl2EEEEELl2EEENS3J_4consINSC_6actionINSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS22_NS23_IS2M_EELl0EEEEEEELl2EEEEEEENS3J_4nil_EEERSU_Ll2EEclES3Y_RKS4A_S4B_(*(uint64_t **)a1, (uint64_t)v5, a2);
  return boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v6);
}

void sub_217F70C5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::eps> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const&>,2l> const&,boost::fusion::nil_,boost::spirit::unused_type &>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t **v3;
  unsigned int v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE v8[16];
  _BYTE v9[13];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  boost::spirit::detail::make_action<boost::spirit::qi::domain,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::eps> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const&>,2l> const&,boost::fusion::nil_ const&,boost::spirit::unused_type &>::operator()(a1, (uint64_t)v8);
  *(_BYTE *)(a2 + 8) = v8[8];
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (unint64_t **)(a2 + 16);
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 28) = 0;
  if (v8 != (_BYTE *)a2)
  {
    *(_QWORD *)(a2 + 21) = *(_QWORD *)&v9[5];
    *v3 = *(unint64_t **)v9;
    v4 = v9[12];
    *(_BYTE *)(a2 + 28) = v9[12];
    if (v4 <= 9 && ((1 << v4) & 0x33C) != 0)
    {
      v5 = *v3;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  return boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v9);
}

uint64_t boost::spirit::detail::make_action<boost::spirit::qi::domain,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::eps> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const&>,2l> const&,boost::fusion::nil_ const&,boost::spirit::unused_type &>::operator()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char *v3;
  char v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char v13;
  _QWORD v14[3];
  _BYTE v15[8];
  char v16;
  _BYTE v17[13];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(char **)(a1 + 8);
  v4 = *v3;
  v13 = *v3;
  memset(v14, 0, 13);
  if (v3 == &v13)
  {
    v16 = v4;
    *(_QWORD *)&v17[5] = *(_QWORD *)((char *)v14 + 5);
    *(_QWORD *)v17 = v14[0];
    v17[12] = 0;
  }
  else
  {
    v5 = *((_QWORD *)v3 + 1);
    *(_QWORD *)((char *)v14 + 5) = *(_QWORD *)(v3 + 13);
    v14[0] = v5;
    v6 = v3[20];
    BYTE4(v14[1]) = v6;
    if (v6 <= 9 && ((1 << v6) & 0x33C) != 0)
    {
      v8 = (unint64_t *)v14[0];
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v4 = v13;
      v6 = BYTE4(v14[1]);
    }
    v16 = v4;
    *(_QWORD *)&v17[5] = *(_QWORD *)((char *)v14 + 5);
    *(_QWORD *)v17 = v14[0];
    v17[12] = v6;
    if (v6 <= 9 && ((1 << v6) & 0x33C) != 0)
    {
      v10 = *(unint64_t **)v17;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v14);
  boost::spirit::make_component<boost::spirit::qi::domain,boost::spirit::tag::action,void>::operator()<boost::fusion::cons<boost::spirit::qi::eps_parser,boost::fusion::cons<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>,boost::fusion::nil_>>>((uint64_t)v15, a2);
  return boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v17);
}

void sub_217F70EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::make_component<boost::spirit::qi::domain,boost::spirit::tag::action,void>::operator()<boost::fusion::cons<boost::spirit::qi::eps_parser,boost::fusion::cons<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>,boost::fusion::nil_>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t **v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  char v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE *)(a1 + 8);
  v10 = v2;
  memset(v11, 0, 13);
  if ((char *)(a1 + 8) != &v10)
  {
    *(_QWORD *)((char *)v11 + 5) = *(_QWORD *)(a1 + 21);
    v11[0] = *(_QWORD *)(a1 + 16);
    BYTE4(v11[1]) = *(_BYTE *)(a1 + 28);
    if (BYTE4(v11[1]) <= 9u && ((1 << SBYTE4(v11[1])) & 0x33C) != 0)
    {
      v3 = (unint64_t *)v11[0];
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      v2 = v10;
    }
  }
  *(_BYTE *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = (unint64_t **)(a2 + 16);
  if ((char *)(a2 + 8) != &v10)
  {
    *(_QWORD *)(a2 + 21) = *(_QWORD *)((char *)v11 + 5);
    *v5 = (unint64_t *)v11[0];
    v6 = BYTE4(v11[1]);
    *(_BYTE *)(a2 + 28) = BYTE4(v11[1]);
    if (v6 <= 9 && ((1 << v6) & 0x33C) != 0)
    {
      v7 = *v5;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  return boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v11);
}

uint64_t _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorIdNS1W_9allocatorIdEEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INSQ_13flexible_typeENS1Y_IS2M_EEEEvES2B_SU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INS1W_4pairIS2M_S2M_EENS1Y_IS31_EEEEvES2B_SU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSJ_IS22_NS23_INS8_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS3G_13parser_configEEEEEEEELl0EEES1C_EELl2EEEEELl2EEENS3J_4consINSC_6actionINSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS22_NS23_IS2M_EELl0EEEEEEELl2EEEEEEENS3J_4nil_EEERSU_Ll2EEclES3Y_RKS4A_S4B_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t *v5;
  unint64_t v6;
  void *v8[2];
  char v9;
  void *__p;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  v17[8] = *(_BYTE *)(a2 + 8);
  memset(v18, 0, 13);
  if (v17 != (_BYTE *)a2)
  {
    *(_QWORD *)((char *)v18 + 5) = *(_QWORD *)(a2 + 21);
    v18[0] = *(_QWORD *)(a2 + 16);
    BYTE4(v18[1]) = *(_BYTE *)(a2 + 28);
    if (BYTE4(v18[1]) <= 9u && ((1 << SBYTE4(v18[1])) & 0x33C) != 0)
    {
      v5 = (unint64_t *)v18[0];
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>,boost::spirit::unused_type &>::operator()(a1[1], (uint64_t)v17, (uint64_t)v8);
  _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorIdNS1W_9allocatorIdEEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INSQ_13flexible_typeENS1Y_IS2M_EEEEvES2B_SU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INS1W_4pairIS2M_S2M_EENS1Y_IS31_EEEEvES2B_SU_SU_EES1C_EELl2EEEEELl2EEENS_6fusion4consINSC_6actionIN11parser_impl13string_parserES1A_EENS3G_INS3H_INSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS22_NS23_IS2M_EELl0EEEEEEELl2EEEEEEENS3F_4nil_EEEEERSU_Ll2EEclES3E_RKS3V_S3W_(*a1, (uint64_t)v8, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v16);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v18);
}

void sub_217F71138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::~cons((uint64_t)va);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(v3);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::~cons(uint64_t a1)
{
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(a1 + 264);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(a1 + 192);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 56);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>,boost::spirit::unused_type &>::operator()(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  boost::spirit::detail::make_action<boost::spirit::qi::domain,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type &>::operator()(a1, (uint64_t)v5);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(a3, (uint64_t)v5, a2);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_217F71254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v6;
  __int16 v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;

  v6 = parser_impl::parser_config::parser_config((std::string *)a1, (__int128 *)a2);
  v7 = *(_WORD *)(a2 + 184);
  v6[7].__r_.__value_.__s.__data_[18] = *(_BYTE *)(a2 + 186);
  LOWORD(v6[7].__r_.__value_.__r.__words[2]) = v7;
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)&v6[8], a2 + 192);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 276) = 0;
  if (a1 + 248 != a3)
  {
    v8 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a1 + 269) = *(_QWORD *)(a3 + 21);
    *(_QWORD *)(a1 + 264) = v8;
    v9 = *(unsigned __int8 *)(a3 + 28);
    *(_BYTE *)(a1 + 276) = v9;
    if (v9 <= 9 && ((1 << v9) & 0x33C) != 0)
    {
      v10 = *(unint64_t **)(a1 + 264);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  return a1;
}

void sub_217F71334(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 96);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 56);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((void **)v1);
  _Unwind_Resume(a1);
}

void _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorIdNS1W_9allocatorIdEEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INSQ_13flexible_typeENS1Y_IS2M_EEEEvES2B_SU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INS1W_4pairIS2M_S2M_EENS1Y_IS31_EEEEvES2B_SU_SU_EES1C_EELl2EEEEELl2EEENS_6fusion4consINSC_6actionIN11parser_impl13string_parserES1A_EENS3G_INS3H_INSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS22_NS23_IS2M_EELl0EEEEEEELl2EEEEEEENS3F_4nil_EEEEERSU_Ll2EEclES3E_RKS3V_S3W_(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  char v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x24BDAC8D0];
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)v18, a2);
  v5 = *(uint64_t ***)(a1 + 8);
  v6 = **v5;
  v7 = *(unsigned __int16 *)v5[1];
  *(_QWORD *)&v8 = v6;
  *((_QWORD *)&v8 + 1) = v7;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v9, (uint64_t)v18);
  _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorIdNS1W_9allocatorIdEEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INSQ_13flexible_typeENS1Y_IS2M_EEEEvES2B_SU_SU_EES1C_EELl2EEEEELl2EEENS_6fusion4consINSC_6actionINSC_9referenceIKNS1T_IS1V_FNS1X_INS1W_4pairIS2M_S2M_EENS1Y_IS35_EEEEvES2B_SU_SU_EEEES1A_EENS31_INS32_IN11parser_impl13string_parserES1A_EENS31_INS32_INSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS22_NS23_IS2M_EELl0EEEEEEELl2EEEEEEENS30_4nil_EEEEEEERSU_Ll2EEclES2Z_RKS3R_S3S_(*(uint64_t **)a1, &v8, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v17);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v26);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v24);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18[0]);
}

void sub_217F714B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>::~cons((uint64_t)&a10);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::~cons((uint64_t)&a48);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>::~cons(uint64_t a1)
{
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(a1 + 280);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(a1 + 208);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 152);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 112);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 72);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorIdNS1W_9allocatorIdEEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INSQ_13flexible_typeENS1Y_IS2M_EEEEvES2B_SU_SU_EES1C_EELl2EEEEELl2EEENS_6fusion4consINSC_6actionINSC_9referenceIKNS1T_IS1V_FNS1X_INS1W_4pairIS2M_S2M_EENS1Y_IS35_EEEEvES2B_SU_SU_EEEES1A_EENS31_INS32_IN11parser_impl13string_parserES1A_EENS31_INS32_INSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS22_NS23_IS2M_EELl0EEEEEEELl2EEEEEEENS30_4nil_EEEEEEERSU_Ll2EEclES2Z_RKS3R_S3S_(uint64_t *a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8[2];
  void *v9;
  char v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19[2];
  char v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v18 = *a2;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)v19, (uint64_t)(a2 + 1));
  v5 = a1[1];
  v6 = **(_QWORD **)v5;
  v7 = **(unsigned __int16 **)(v5 + 8);
  *(_QWORD *)&v8[0] = v6;
  *((_QWORD *)&v8[0] + 1) = v7;
  v8[1] = v18;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v9, (uint64_t)v19);
  _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorIdNS1W_9allocatorIdEEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEENS_6fusion4consINSC_6actionINSC_9referenceIKNS1T_IS1V_FNS1X_INSQ_13flexible_typeENS1Y_IS2Q_EEEEvES2B_SU_SU_EEEES1A_EENS2N_INS2O_INS2P_IKNS1T_IS1V_FNS1X_INS1W_4pairIS2Q_S2Q_EENS1Y_IS2Z_EEEEvES2B_SU_SU_EEEES1A_EENS2N_INS2O_IN11parser_impl13string_parserES1A_EENS2N_INS2O_INSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS22_NS23_IS2Q_EELl0EEEEEEELl2EEEEEEENS2M_4nil_EEEEEEEEERSU_Ll2EEclES2L_RKS3M_S3N_(*a1, v8, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v17);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v27);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v26);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v24);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19[0]);
}

void sub_217F716A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>::~cons((uint64_t)&a11);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>::~cons((uint64_t)&a51);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>::~cons(uint64_t a1)
{
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(a1 + 296);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(a1 + 224);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 168);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 128);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 88);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorIdNS1W_9allocatorIdEEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEENS_6fusion4consINSC_6actionINSC_9referenceIKNS1T_IS1V_FNS1X_INSQ_13flexible_typeENS1Y_IS2Q_EEEEvES2B_SU_SU_EEEES1A_EENS2N_INS2O_INS2P_IKNS1T_IS1V_FNS1X_INS1W_4pairIS2Q_S2Q_EENS1Y_IS2Z_EEEEvES2B_SU_SU_EEEES1A_EENS2N_INS2O_IN11parser_impl13string_parserES1A_EENS2N_INS2O_INSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS22_NS23_IS2Q_EELl0EEEEEEELl2EEEEEEENS2M_4nil_EEEEEEEEERSU_Ll2EEclES2L_RKS3M_S3N_(uint64_t a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9[3];
  void *v10;
  char v11;
  void *__p;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  void *v21[2];
  char v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v19 = *a2;
  v20 = v5;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)v21, (uint64_t)(a2 + 2));
  v6 = *(uint64_t ***)(a1 + 8);
  v7 = **v6;
  v8 = *(unsigned __int16 *)v6[1];
  *(_QWORD *)&v9[0] = v7;
  *((_QWORD *)&v9[0] + 1) = v8;
  v9[1] = v19;
  v9[2] = v20;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v10, (uint64_t)v21);
  _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEENS_6fusion4consINSC_6actionINSC_9referenceIKNSC_4ruleIPKcFNSt3__16vectorIdNS20_9allocatorIdEEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EEEES1A_EENS1U_INS1V_INS1W_IKNS1X_IS1Z_FNS21_INSQ_13flexible_typeENS22_IS2K_EEEEvES2F_SU_SU_EEEES1A_EENS1U_INS1V_INS1W_IKNS1X_IS1Z_FNS21_INS20_4pairIS2K_S2K_EENS22_IS2T_EEEEvES2F_SU_SU_EEEES1A_EENS1U_INS1V_IN11parser_impl13string_parserES1A_EENS1U_INS1V_INSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS26_NS27_IS2K_EELl0EEEEEEELl2EEEEEEENS1T_4nil_EEEEEEEEEEERSU_Ll2EEclES1S_RKS3H_S3I_(*(_QWORD **)a1, v9, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v18);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  if (v13 < 0)
    operator delete(__p);
  if (v11 < 0)
    operator delete(v10);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v29);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v28);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v27);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v26);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v25);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_217F718A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)&a11);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>::~cons((uint64_t)&a53);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons(uint64_t a1)
{
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(a1 + 312);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(a1 + 240);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 184);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 144);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 104);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

void _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEENS_6fusion4consINSC_6actionINSC_9referenceIKNSC_4ruleIPKcFNSt3__16vectorIdNS20_9allocatorIdEEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EEEES1A_EENS1U_INS1V_INS1W_IKNS1X_IS1Z_FNS21_INSQ_13flexible_typeENS22_IS2K_EEEEvES2F_SU_SU_EEEES1A_EENS1U_INS1V_INS1W_IKNS1X_IS1Z_FNS21_INS20_4pairIS2K_S2K_EENS22_IS2T_EEEEvES2F_SU_SU_EEEES1A_EENS1U_INS1V_IN11parser_impl13string_parserES1A_EENS1U_INS1V_INSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS26_NS27_IS2K_EELl0EEEEEEELl2EEEEEEENS1T_4nil_EEEEEEEEEEERSU_Ll2EEclES1S_RKS3H_S3I_(_QWORD *a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int16 v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12[2];
  char v13;
  void *__p;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24[2];
  char v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v32[4] = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v21 = *a2;
  v22 = v5;
  v23 = a2[2];
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)v24, (uint64_t)(a2 + 3));
  v8 = HIBYTE(**(_WORD **)(a1[1] + 8));
  v7 = **(_WORD **)(a1[1] + 8) << 8;
  v9 = v21;
  v10 = v22;
  v11 = v23;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)v12, (uint64_t)v24);
  v6 = **(_WORD **)(*a1 + 8);
  *(_BYTE *)(a3 + 2) = HIBYTE(v6);
  *(_WORD *)a3 = v6 << 8;
  *(_WORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 10) = v8;
  *(_OWORD *)(a3 + 16) = v9;
  *(_OWORD *)(a3 + 32) = v10;
  *(_OWORD *)(a3 + 48) = v11;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(a3 + 64, (uint64_t)v12);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v20);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12[0]);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v32);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v30);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v29);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24[0]);
}

void sub_217F71AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>::~cons((uint64_t)&a10);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)&a53);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>::~cons(uint64_t a1)
{
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(a1 + 320);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(a1 + 248);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 192);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 152);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 112);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS17_6tagns_3tag6assignENS17_7argsns_5list2INS16_INS6_9attributeILi0EEEEENS16_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INS10_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1N_EENS9_INS10_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1U_9allocatorIdEEEEvEKNS18_4exprINS1B_8terminalENS1D_4termISQ_EELl0EEENS6_11unused_typeES26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_ISB_NS1W_ISB_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_INS1U_4pairISB_SB_EENS1W_IS2J_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_IN11parser_impl13string_parserES1N_EENS9_INS10_INSJ_10eps_parserENS16_INS19_IS1C_NS1E_IS1H_NS16_INS19_IS21_NS22_ISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS3E_EE5valueEiE4typeE(uint64_t (***a1)(), __int16 *a2))()
{
  __int128 v3;
  __int16 v5;
  char v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 2);
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 10);
  v3 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 1);
  v10 = v3;
  v11 = *((_OWORD *)a2 + 3);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v12, (uint64_t)(a2 + 32));
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v20);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  return a1;
}

void sub_217F71C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v3;
  __int16 v5;
  char v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  v5 = *(_WORD *)a2;
  v6 = *(_BYTE *)(a2 + 2);
  v7 = *(_WORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 10);
  v3 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  v10 = v3;
  v11 = *(_OWORD *)(a2 + 48);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v12, a2 + 64);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(a1, &v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v20);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  return a1;
}

void sub_217F71DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), __int16 *a2)
{
  __int128 v3;
  int v4;
  uint64_t (**v5)();
  __int16 v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 2);
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 10);
  v3 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 1);
  v11 = v3;
  v12 = *((_OWORD *)a2 + 3);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v13, (uint64_t)(a2 + 32));
  v4 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v6, (uint64_t *)a1 + 1);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v21);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v4)
    v5 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v5 = 0;
  *a1 = v5;
}

void sub_217F71ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

BOOL boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[4];

  v5 = *a1;
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  return boost::fusion::any<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>>(v5, (uint64_t)v7);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 v5;
  uint64_t v6;
  __int16 v8;
  char v9;
  __int16 v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(_WORD *)a2;
  v9 = *(_BYTE *)(a2 + 2);
  v10 = *(_WORD *)(a2 + 8);
  v11 = *(_BYTE *)(a2 + 10);
  v5 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  v13 = v5;
  v14 = *(_OWORD *)(a2 + 48);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v15, a2 + 64);
  v6 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(a1, &v8, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v23);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  if (v18 < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15);
  return v6;
}

void sub_217F72044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  __int16 *v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(__int16 **)result;
      v6 = operator new();
      v7 = *v5;
      *(_BYTE *)(v6 + 2) = *((_BYTE *)v5 + 2);
      *(_WORD *)v6 = v7;
      LOBYTE(v7) = *((_BYTE *)v5 + 10);
      *(_WORD *)(v6 + 8) = v5[4];
      *(_BYTE *)(v6 + 10) = v7;
      *(_OWORD *)(v6 + 16) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(v6 + 32) = *((_OWORD *)v5 + 2);
      *(_OWORD *)(v6 + 48) = *((_OWORD *)v5 + 3);
      result = boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(v6 + 64, (uint64_t)(v5 + 32));
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v8 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(v8 + 328);
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v8 + 256);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 200);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 160);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 120);
        if (*(char *)(v8 + 111) < 0)
          operator delete(*(void **)(v8 + 88));
        if (*(char *)(v8 + 87) < 0)
          operator delete(*(void **)(v8 + 64));
        result = MEMORY[0x219A19A08](v8, 0x10F2C400BC9F32ALL);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CA521 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CA521 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F721E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C400BC9F32ALL);
  _Unwind_Resume(a1);
}

BOOL boost::fusion::any<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void **v5;
  uint64_t v6;

  v3 = *(uint64_t **)a2;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(void ***)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  return (boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1, *(uint64_t **)a2, v4, (uint64_t)v5, v6) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 8, v3, v4, (uint64_t)v5, v6) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((uint64_t *)(a1 + 16), v3, (uint64_t)v4, (uint64_t)v5) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 32, v3,
            (uint64_t)v4,
            v5) & 1) != 0
      || (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 48, v3, (uint64_t)v4, v5) & 1) != 0|| (boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((std::string *)(a1 + 64), (unsigned __int8 **)v3, (unsigned __int8 **)v4, (uint64_t)v5, v6) & 1) != 0|| boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 312, (unsigned __int8 **)v3, (unsigned __int8 **)v4, (uint64_t)v5);
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  _QWORD v14[4];
  char v15;

  v11 = 0;
  v8 = *a2;
  if (!boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>(a1, a2, a3, a4, a5, (double *)&v11))return 0;
  v9 = 1;
  v13 = 1;
  v12 = &v11;
  v14[0] = a1 + 1;
  v14[1] = &v12;
  v14[2] = a4;
  v14[3] = &v13;
  boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<double &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)&v15, a1 + 1, (uint64_t)v14);
  if (!v13)
  {
    v9 = 0;
    *a2 = v8;
  }
  return v9;
}

uint64_t boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, double *a6)
{
  unsigned __int8 *i;

  for (i = (unsigned __int8 *)*a2; i != (unsigned __int8 *)*a3; *a2 = (uint64_t)++i)
  {
    if ((boost::spirit::char_encoding::iso8859_1_char_types[*i] & 0x40) == 0)
      break;
  }
  return boost::spirit::qi::detail::real_impl<double,turi::strict_real_policies<double>>::parse<char const*,double>(a2, a3, a6);
}

uint64_t boost::spirit::qi::detail::real_impl<double,turi::strict_real_policies<double>>::parse<char const*,double>(uint64_t *a1, uint64_t *a2, double *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  int v8;
  _BOOL4 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  _BYTE *v13;
  unsigned int v14;
  double v15;
  double v16;
  uint64_t result;
  uint64_t v18;
  unsigned int v19;
  double v20;
  unsigned int v21;
  double v22;
  double v23;
  double v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  double v28;

  v3 = (unsigned __int8 *)*a1;
  v4 = *a2;
  if (*a1 == *a2)
    return 0;
  v8 = *v3;
  if (v8 == 45 || v8 == 43)
  {
    v9 = v8 == 45;
    v10 = v3 + 1;
    *a1 = (uint64_t)(v3 + 1);
    v4 = *a2;
  }
  else
  {
    v9 = 0;
    v10 = (unsigned __int8 *)*a1;
  }
  v27 = 0;
  v28 = 0.0;
  if (v10 != (unsigned __int8 *)v4)
  {
    if ((boost::spirit::qi::detail::extract_int<unsigned long,10u,1u,-1,boost::spirit::qi::detail::positive_accumulator<10u>,false,false>::parse_main<char const*,unsigned long>(a1, a2, &v27) & 1) != 0)
    {
      v26 = 0;
      v11 = (unsigned __int8 *)*a1;
      if (*a1 != *a2)
      {
        v12 = *v11;
        if (v12 == 101 || v12 == 69)
          goto LABEL_21;
        if (v12 == 46)
        {
          *a1 = (uint64_t)(v11 + 1);
          boost::spirit::qi::ureal_policies<double>::parse_frac_n<char const*,unsigned long>(a1, a2, &v27, &v26);
          goto LABEL_19;
        }
      }
LABEL_25:
      result = 0;
      *a1 = (uint64_t)v3;
      return result;
    }
    *a1 = (uint64_t)v10;
  }
  if ((boost::spirit::qi::ureal_policies<double>::parse_nan<char const*,double>((unsigned __int8 **)a1, (unsigned __int8 **)a2, &v28) & 1) != 0|| boost::spirit::qi::ureal_policies<double>::parse_inf<char const*,double>((unsigned __int8 **)a1, (unsigned __int8 **)a2, &v28))
  {
    goto LABEL_49;
  }
  v26 = 0;
  v13 = (_BYTE *)*a1;
  if (*a1 == *a2)
    goto LABEL_25;
  if (*v13 != 46)
    goto LABEL_25;
  *a1 = (uint64_t)(v13 + 1);
  if ((boost::spirit::qi::ureal_policies<double>::parse_frac_n<char const*,unsigned long>(a1, a2, &v27, &v26) & 1) == 0)
    goto LABEL_25;
LABEL_19:
  v11 = (unsigned __int8 *)*a1;
  if (*a1 != *a2 && (*v11 | 0x20) == 0x65)
  {
LABEL_21:
    *a1 = (uint64_t)(v11 + 1);
    v25 = 0;
    if (boost::spirit::qi::ureal_policies<double>::parse_exp_n<char const*>(a1, a2, &v25))
    {
      v14 = v25 - v26;
      if ((int)(v25 - v26) >= 0)
      {
        if (v14 <= 0x134)
        {
          v15 = (double)v27;
          v16 = boost::spirit::traits::pow10_helper<double,void>::call::exponents[v14];
LABEL_34:
          v22 = v16 * v15;
LABEL_48:
          v28 = v22;
          goto LABEL_49;
        }
        return 0;
      }
      if (v14 > 0xFFFFFECC)
      {
        v20 = (double)v27;
        v21 = v26 - v25;
      }
      else
      {
        if (v14 < 0xFFFFFD9A)
          return 0;
        v20 = ((double)(v27 % 0xA) + (double)(10 * (v27 / 0xA))) / 1.0e307;
        v21 = -307 - v14;
      }
      goto LABEL_46;
    }
    *a1 = (uint64_t)v11;
    v18 = v26;
    goto LABEL_28;
  }
  v18 = v26;
  if (!v26)
  {
    if (v27 != 1)
    {
      v22 = (double)v27;
      goto LABEL_48;
    }
    if ((boost::spirit::qi::ureal_policies<double>::parse_nan<char const*,double>((unsigned __int8 **)a1, (unsigned __int8 **)a2, &v28) & 1) == 0&& !boost::spirit::qi::ureal_policies<double>::parse_inf<char const*,double>((unsigned __int8 **)a1, (unsigned __int8 **)a2, &v28))
    {
      v22 = (double)v27;
      goto LABEL_48;
    }
    goto LABEL_49;
  }
LABEL_28:
  v19 = -(int)v18;
  if ((int)v18 <= 0)
  {
    if (v19 <= 0x134)
    {
      v15 = (double)v27;
      v16 = boost::spirit::traits::pow10_helper<double,void>::call::exponents[v19];
      goto LABEL_34;
    }
  }
  else
  {
    if (v19 > 0xFFFFFECC)
    {
      v20 = (double)v27;
      v23 = boost::spirit::traits::pow10_helper<double,void>::call::exponents[v18];
LABEL_47:
      v22 = v20 / v23;
      goto LABEL_48;
    }
    v20 = ((double)(v27 % 0xA) + (double)(10 * (v27 / 0xA))) / 1.0e307;
    v28 = v20;
    if (v19 >= 0xFFFFFD9A)
    {
      v21 = v18 - 307;
LABEL_46:
      v23 = boost::spirit::traits::pow10_helper<double,void>::call::exponents[v21];
      goto LABEL_47;
    }
  }
LABEL_49:
  v24 = v28;
  if (v9)
    v24 = -v28;
  *a3 = v24;
  return 1;
}

uint64_t boost::spirit::qi::ureal_policies<double>::parse_nan<char const*,double>(unsigned __int8 **a1, unsigned __int8 **a2, _QWORD *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned __int8 *v9;
  int v10;

  v3 = *a1;
  if (*a1 != *a2 && (*v3 | 0x20) == 0x6E)
  {
    v4 = 0;
    v5 = v3 + 3;
    v6 = 110;
    while (&v3[v4] != *a2)
    {
      v7 = v3[v4];
      if (v6 != v7 && aNan_0[v4] != v7)
        break;
      v6 = aNan[++v4];
      if (v4 == 3)
      {
        *a1 = v5;
        if (v5 == *a2 || *v5 != 40)
        {
LABEL_17:
          *a3 = 0x7FF8000000000000;
          return 1;
        }
        v9 = v3 + 4;
        while (v9 != *a2)
        {
          v10 = *v9++;
          if (v10 == 41)
          {
            *a1 = v9;
            goto LABEL_17;
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t boost::spirit::qi::ureal_policies<double>::parse_inf<char const*,double>(unsigned __int8 **a1, unsigned __int8 **a2, _QWORD *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;

  v3 = *a1;
  if (*a1 != *a2 && (*v3 | 0x20) == 0x69)
  {
    v4 = 0;
    v5 = v3 + 3;
    v6 = 105;
    while (&v3[v4] != *a2)
    {
      v7 = v3[v4];
      if (v6 != v7 && aInf_0[v4] != v7)
        break;
      v6 = aInf[++v4];
      if (v4 == 3)
      {
        v9 = 0;
        *a1 = v5;
        v10 = v3 + 8;
        v11 = 105;
        while (&v5[v9] != *a2)
        {
          v12 = v5[v9];
          if (v11 != v12 && aInity_0[v9] != v12)
            break;
          v11 = aInity[++v9];
          if (v9 == 5)
          {
            *a1 = v10;
            break;
          }
        }
        *a3 = 0x7FF0000000000000;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t boost::spirit::qi::ureal_policies<double>::parse_frac_n<char const*,unsigned long>(uint64_t *a1, uint64_t *a2, unint64_t *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v4 = *a1;
  v5 = *a2;
  if (*a1 == *a2)
    return 0;
  v6 = *a3;
  v7 = 1;
  while (1)
  {
    v8 = *(unsigned __int8 *)(v4 + v7 - 1);
    if ((v8 - 48) > 9)
      break;
    if (v6 > 0x1999999999999999 || (v6 *= 10, v6 > 47 - v8))
    {
      v5 = v4 + v7 - 1;
LABEL_20:
      *a1 = v5;
      *a3 = v6;
      goto LABEL_27;
    }
    v6 = v6 + v8 - 48;
    if (v4 + v7 == v5)
      goto LABEL_15;
    v9 = *(unsigned __int8 *)(v4 + v7);
    if ((v9 - 48) > 9)
    {
      v5 = v4 + v7;
      if (!v7)
        return 0;
      goto LABEL_26;
    }
    if (v6 > 0x1999999999999999 || (v6 *= 10, v6 > 47 - v9))
    {
      v5 = v4 + v7;
      goto LABEL_20;
    }
    v6 = v6 + v9 - 48;
    v10 = (unsigned __int8 *)(v4 + v7 + 1);
    if (v10 == (unsigned __int8 *)v5)
      goto LABEL_15;
    v11 = *v10;
    if ((v11 - 48) > 9)
    {
      v12 = v7 + 1;
      goto LABEL_25;
    }
    if (v6 > 0x1999999999999999 || (v6 *= 10, v6 > 47 - v11))
    {
      v5 = v4 + v7 + 1;
      goto LABEL_20;
    }
    v6 = v6 + v11 - 48;
    v7 += 3;
    if (v4 + v7 - 1 == v5)
    {
LABEL_15:
      if (v5 == v4)
        return 0;
      goto LABEL_26;
    }
  }
  v12 = v7 - 1;
LABEL_25:
  v5 = v12 + v4;
  if (!v12)
    return 0;
LABEL_26:
  *a3 = v6;
  *a1 = v5;
LABEL_27:
  *a4 = v5 - v4;
  v14 = (unsigned __int8 *)*a2;
  if (v5 != *a2)
  {
    v15 = 0;
    while (1)
    {
      v16 = *(unsigned __int8 *)(v5 + v15) - 48;
      if (*(_BYTE *)(v5 + v15) != 48)
        break;
      ++v15;
      if ((unsigned __int8 *)(v5 + v15) == v14)
        goto LABEL_43;
    }
    v17 = (unsigned __int8 *)(v5 + v15);
    if (v16 >= 0xA)
    {
      v14 = v17;
      if (!v15)
        return 1;
    }
    else if (v17 + 1 != v14)
    {
      v18 = v17 + 3;
      while (1)
      {
        if (*(v18 - 2) - 48 > 9)
        {
          v14 = v18 - 2;
          goto LABEL_43;
        }
        if (v18 - 1 == v14)
          goto LABEL_43;
        if (*(v18 - 1) - 48 > 9)
        {
          v14 = v18 - 1;
          goto LABEL_43;
        }
        if (v18 == v14)
          goto LABEL_43;
        if (*v18 - 48 > 9)
          break;
        v19 = v18 + 1;
        v18 += 3;
        if (v19 == v14)
          goto LABEL_43;
      }
      v14 = v18;
    }
LABEL_43:
    *a1 = (uint64_t)v14;
  }
  return 1;
}

uint64_t boost::spirit::qi::ureal_policies<double>::parse_exp_n<char const*>(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned __int8 *v3;
  int v5;
  uint64_t result;

  v3 = (unsigned __int8 *)*a1;
  if (*a1 == *a2)
    return 0;
  v5 = *v3;
  if ((v5 == 45 || v5 == 43) && (*a1 = (uint64_t)(v3 + 1), v5 == 45))
  {
    if ((boost::spirit::qi::detail::extract_int<int,10u,1u,-1,boost::spirit::qi::detail::negative_accumulator<10u>,false,false>::parse_main<char const*,int>(a1, a2, a3) & 1) == 0)
    {
LABEL_6:
      result = 0;
      *a1 = (uint64_t)v3;
      return result;
    }
  }
  else if ((boost::spirit::qi::detail::extract_int<int,10u,1u,-1,boost::spirit::qi::detail::positive_accumulator<10u>,false,false>::parse_main<char const*,int>(a1, a2, a3) & 1) == 0)
  {
    goto LABEL_6;
  }
  return 1;
}

uint64_t boost::spirit::qi::detail::extract_int<unsigned long,10u,1u,-1,boost::spirit::qi::detail::positive_accumulator<10u>,false,false>::parse_main<char const*,unsigned long>(uint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v3 = *a1;
  v4 = *a2;
  if (*a1 == *a2)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v3 + v5);
    if ((_DWORD)v6 != 48)
      break;
    ++v5;
    if (v3 + v5 == v4)
    {
      *a3 = 0;
LABEL_35:
      *a1 = v4;
      return 1;
    }
  }
  v7 = v3 + v5;
  if ((v6 - 48) < 0xA)
  {
    v8 = v6 - 48;
    if (v7 + 1 != v4)
    {
      while (1)
      {
        v9 = *(unsigned __int8 *)(v3 + v5 + 1);
        if ((v9 - 48) > 9)
        {
          v4 = v3 + v5 + 1;
          goto LABEL_34;
        }
        if (v5 > 0x11)
        {
          if (v8 > 0x1999999999999999 || (v8 *= 10, v8 > 47 - v9))
          {
LABEL_30:
            result = 0;
            *a3 = v8;
            return result;
          }
        }
        else
        {
          v8 *= 10;
        }
        v8 = v8 + v9 - 48;
        v10 = (unsigned __int8 *)(v3 + v5 + 2);
        if (v10 == (unsigned __int8 *)v4)
          goto LABEL_34;
        v11 = *v10;
        if ((v11 - 48) > 9)
        {
          v4 = v3 + v5 + 2;
          goto LABEL_34;
        }
        if (v5 + 1 > 0x11)
        {
          if (v8 > 0x1999999999999999)
            goto LABEL_30;
          v8 *= 10;
          if (v8 > 47 - v11)
            goto LABEL_30;
        }
        else
        {
          v8 *= 10;
        }
        v8 = v8 + v11 - 48;
        v12 = (unsigned __int8 *)(v3 + v5 + 3);
        if (v12 == (unsigned __int8 *)v4)
          goto LABEL_34;
        v13 = *v12;
        if ((v13 - 48) > 9)
          break;
        if (v5 + 2 > 0x11)
        {
          if (v8 > 0x1999999999999999)
            goto LABEL_30;
          v8 *= 10;
          if (v8 > 47 - v13)
            goto LABEL_30;
        }
        else
        {
          v8 *= 10;
        }
        v8 = v8 + v13 - 48;
        v14 = v5 + v3 + 4;
        v5 += 3;
        if (v14 == v4)
          goto LABEL_34;
      }
      v4 = v3 + v5 + 3;
    }
LABEL_34:
    *a3 = v8;
    goto LABEL_35;
  }
  if (!v5)
    return 0;
  *a3 = 0;
  *a1 = v7;
  return 1;
}

uint64_t boost::spirit::qi::detail::extract_int<int,10u,1u,-1,boost::spirit::qi::detail::negative_accumulator<10u>,false,false>::parse_main<char const*,int>(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t result;

  v3 = *a1;
  v4 = *a2;
  if (*a1 == *a2)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v3 + v5);
    if (v6 != 48)
      break;
    ++v5;
    if (v3 + v5 == v4)
    {
      *a3 = 0;
LABEL_38:
      *a1 = v4;
      return 1;
    }
  }
  v7 = v3 + v5;
  if ((v6 - 48) < 0xA)
  {
    v8 = 48 - v6;
    if (v7 + 1 != v4)
    {
      while (1)
      {
        v9 = *(unsigned __int8 *)(v3 + v5 + 1);
        v10 = v9 - 48;
        if ((v9 - 48) > 9)
        {
          v4 = v3 + v5 + 1;
          goto LABEL_37;
        }
        if (v5 > 7)
        {
          if (v8 < -214748364 || (v8 *= 10, v8 < (int)(v10 | 0x80000000)))
          {
LABEL_33:
            result = 0;
            *a3 = v8;
            return result;
          }
          v8 -= v10;
        }
        else
        {
          v8 = 10 * v8 - v9 + 48;
        }
        v11 = (unsigned __int8 *)(v3 + v5 + 2);
        if (v11 == (unsigned __int8 *)v4)
          goto LABEL_37;
        v12 = *v11;
        v13 = v12 - 48;
        if ((v12 - 48) > 9)
        {
          v4 = v3 + v5 + 2;
          goto LABEL_37;
        }
        if (v5 + 1 > 7)
        {
          if (v8 < -214748364)
            goto LABEL_33;
          v8 *= 10;
          if (v8 < (int)(v13 | 0x80000000))
            goto LABEL_33;
          v8 -= v13;
        }
        else
        {
          v8 = 10 * v8 - v12 + 48;
        }
        v14 = (unsigned __int8 *)(v3 + v5 + 3);
        if (v14 == (unsigned __int8 *)v4)
          goto LABEL_37;
        v15 = *v14;
        v16 = v15 - 48;
        if ((v15 - 48) > 9)
          break;
        if (v5 + 2 > 7)
        {
          if (v8 < -214748364)
            goto LABEL_33;
          v8 *= 10;
          if (v8 < (int)(v16 | 0x80000000))
            goto LABEL_33;
          v8 -= v16;
        }
        else
        {
          v8 = 10 * v8 - v15 + 48;
        }
        v17 = v5 + v3 + 4;
        v5 += 3;
        if (v17 == v4)
          goto LABEL_37;
      }
      v4 = v3 + v5 + 3;
    }
LABEL_37:
    *a3 = v8;
    goto LABEL_38;
  }
  if (!v5)
    return 0;
  *a3 = 0;
  *a1 = v7;
  return 1;
}

uint64_t boost::spirit::qi::detail::extract_int<int,10u,1u,-1,boost::spirit::qi::detail::positive_accumulator<10u>,false,false>::parse_main<char const*,int>(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t result;

  v3 = *a1;
  v4 = *a2;
  if (*a1 == *a2)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v3 + v5) - 48;
    if (*(_BYTE *)(v3 + v5) != 48)
      break;
    ++v5;
    if (v3 + v5 == v4)
    {
      *a3 = 0;
LABEL_35:
      *a1 = v4;
      return 1;
    }
  }
  v7 = v3 + v5;
  if (v6 < 0xA)
  {
    if (v7 + 1 != v4)
    {
      while (1)
      {
        v8 = *(unsigned __int8 *)(v3 + v5 + 1);
        if ((v8 - 48) > 9)
        {
          v4 = v3 + v5 + 1;
          goto LABEL_34;
        }
        if (v5 > 7)
        {
          if (v6 > 214748364 || (v6 *= 10, v6 > -2147483601 - v8))
          {
LABEL_30:
            result = 0;
            *a3 = v6;
            return result;
          }
        }
        else
        {
          v6 *= 10;
        }
        v6 = v6 + v8 - 48;
        v9 = (unsigned __int8 *)(v3 + v5 + 2);
        if (v9 == (unsigned __int8 *)v4)
          goto LABEL_34;
        v10 = *v9;
        if ((v10 - 48) > 9)
        {
          v4 = v3 + v5 + 2;
          goto LABEL_34;
        }
        if (v5 + 1 > 7)
        {
          if (v6 > 214748364)
            goto LABEL_30;
          v6 *= 10;
          if (v6 > -2147483601 - v10)
            goto LABEL_30;
        }
        else
        {
          v6 *= 10;
        }
        v6 = v6 + v10 - 48;
        v11 = (unsigned __int8 *)(v3 + v5 + 3);
        if (v11 == (unsigned __int8 *)v4)
          goto LABEL_34;
        v12 = *v11;
        if ((v12 - 48) > 9)
          break;
        if (v5 + 2 > 7)
        {
          if (v6 > 214748364)
            goto LABEL_30;
          v6 *= 10;
          if (v6 > -2147483601 - v12)
            goto LABEL_30;
        }
        else
        {
          v6 *= 10;
        }
        v6 = v6 + v12 - 48;
        v13 = v5 + v3 + 4;
        v5 += 3;
        if (v13 == v4)
          goto LABEL_34;
      }
      v4 = v3 + v5 + 3;
    }
LABEL_34:
    *a3 = v6;
    goto LABEL_35;
  }
  if (!v5)
    return 0;
  *a3 = 0;
  *a1 = v7;
  return 1;
}

uint64_t boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<double &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  void **v36;

  v3 = *(uint64_t **)(a3 + 16);
  v4 = **(_QWORD ***)(a3 + 8);
  v5 = *v3;
  switch(*(_BYTE *)(*v3 + 12))
  {
    case 2:
      v6 = *(unint64_t **)v5;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        v9 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          if (*((char *)v9 + 31) < 0)
            operator delete((void *)v9[1]);
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v12 = *(unint64_t **)v5;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (unint64_t)v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v17 = *(unint64_t **)v5;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          v36 = (void **)(v20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v21 = *(unint64_t **)v5;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v20 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          v36 = (void **)(v20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_26:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v24 = *(unint64_t **)v5;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
          v10 = v27;
          v28 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v29 = *(unint64_t **)v5;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          v33 = (void *)v32[6];
          if (v33)
          {
            v32[7] = (unint64_t)v33;
            operator delete(v33);
          }
          v34 = (void *)v32[3];
          if (v34)
          {
            v32[4] = (unint64_t)v34;
            operator delete(v34);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
          v10 = v32;
          v28 = 2071181815;
LABEL_41:
          v11 = v28 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v10, v11);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 12) = 1;
  *(_QWORD *)v5 = *v4;
  return v5;
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  _QWORD v14[4];
  char v15;

  v11 = 0;
  v8 = *a2;
  if (!boost::spirit::qi::any_int_parser<long long,10u,1u,-1>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,long long>(a1, a2, a3, a4, a5, &v11))return 0;
  v9 = 1;
  v13 = 1;
  v12 = &v11;
  v14[0] = a1 + 1;
  v14[1] = &v12;
  v14[2] = a4;
  v14[3] = &v13;
  boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<long long &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)&v15, a1 + 1, (uint64_t)v14);
  if (!v13)
  {
    v9 = 0;
    *a2 = v8;
  }
  return v9;
}

uint64_t boost::spirit::qi::any_int_parser<long long,10u,1u,-1>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,long long>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned __int8 *v6;
  uint64_t v7;
  int v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t result;

  v6 = (unsigned __int8 *)*a2;
  v7 = *a3;
  if (*a2 == *a3)
    return 0;
  v9 = *v6;
  if ((boost::spirit::char_encoding::iso8859_1_char_types[*v6] & 0x40) != 0)
  {
    v10 = v6 + 1;
    while (1)
    {
      *a2 = (uint64_t)v10;
      v7 = *a3;
      if (v10 == (unsigned __int8 *)*a3)
        return 0;
      v11 = *v10++;
      v9 = v11;
      if ((boost::spirit::char_encoding::iso8859_1_char_types[v11] & 0x40) == 0)
      {
        v6 = v10 - 1;
        break;
      }
    }
  }
  if (v6 == (unsigned __int8 *)v7)
    return 0;
  if ((v9 == 45 || v9 == 43) && (*a2 = (uint64_t)(v6 + 1), v9 == 45))
  {
    if ((boost::spirit::qi::detail::extract_int<long long,10u,1u,-1,boost::spirit::qi::detail::negative_accumulator<10u>,false,false>::parse_main<char const*,long long>(a2, a3, a6) & 1) == 0)
    {
LABEL_12:
      result = 0;
      *a2 = (uint64_t)v6;
      return result;
    }
  }
  else if ((boost::spirit::qi::detail::extract_int<long long,10u,1u,-1,boost::spirit::qi::detail::positive_accumulator<10u>,false,false>::parse_main<char const*,long long>(a2, a3, a6) & 1) == 0)
  {
    goto LABEL_12;
  }
  return 1;
}

uint64_t boost::spirit::qi::detail::extract_int<long long,10u,1u,-1,boost::spirit::qi::detail::negative_accumulator<10u>,false,false>::parse_main<char const*,long long>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v3 = *a1;
  v4 = *a2;
  if (*a1 == *a2)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v3 + v5);
    if ((_DWORD)v6 != 48)
      break;
    ++v5;
    if (v3 + v5 == v4)
    {
      *a3 = 0;
LABEL_38:
      *a1 = v4;
      return 1;
    }
  }
  v7 = v3 + v5;
  if ((v6 - 48) < 0xA)
  {
    v8 = 48 - v6;
    if (v7 + 1 != v4)
    {
      while (1)
      {
        v9 = *(unsigned __int8 *)(v3 + v5 + 1);
        if ((v9 - 48) > 9)
        {
          v4 = v3 + v5 + 1;
          goto LABEL_37;
        }
        if (v5 > 0x10)
        {
          if (v8 < (uint64_t)0xF333333333333334
            || (v8 *= 10, v10 = v9 - 48, v8 < (uint64_t)(v10 | 0x8000000000000000)))
          {
LABEL_33:
            result = 0;
            *a3 = v8;
            return result;
          }
          v8 -= v10;
        }
        else
        {
          v8 = 10 * v8 - v9 + 48;
        }
        v11 = (unsigned __int8 *)(v3 + v5 + 2);
        if (v11 == (unsigned __int8 *)v4)
          goto LABEL_37;
        v12 = *v11;
        if ((v12 - 48) > 9)
        {
          v4 = v3 + v5 + 2;
          goto LABEL_37;
        }
        if (v5 + 1 > 0x10)
        {
          if (v8 < (uint64_t)0xF333333333333334)
            goto LABEL_33;
          v8 *= 10;
          v13 = v12 - 48;
          if (v8 < (uint64_t)(v13 | 0x8000000000000000))
            goto LABEL_33;
          v8 -= v13;
        }
        else
        {
          v8 = 10 * v8 - v12 + 48;
        }
        v14 = (unsigned __int8 *)(v3 + v5 + 3);
        if (v14 == (unsigned __int8 *)v4)
          goto LABEL_37;
        v15 = *v14;
        if ((v15 - 48) > 9)
          break;
        if (v5 + 2 > 0x10)
        {
          if (v8 < (uint64_t)0xF333333333333334)
            goto LABEL_33;
          v8 *= 10;
          v16 = v15 - 48;
          if (v8 < (uint64_t)(v16 | 0x8000000000000000))
            goto LABEL_33;
          v8 -= v16;
        }
        else
        {
          v8 = 10 * v8 - v15 + 48;
        }
        v17 = v5 + v3 + 4;
        v5 += 3;
        if (v17 == v4)
          goto LABEL_37;
      }
      v4 = v3 + v5 + 3;
    }
LABEL_37:
    *a3 = v8;
    goto LABEL_38;
  }
  if (!v5)
    return 0;
  *a3 = 0;
  *a1 = v7;
  return 1;
}

uint64_t boost::spirit::qi::detail::extract_int<long long,10u,1u,-1,boost::spirit::qi::detail::positive_accumulator<10u>,false,false>::parse_main<char const*,long long>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v3 = *a1;
  v4 = *a2;
  if (*a1 == *a2)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(v3 + v5);
    if ((_DWORD)v6 != 48)
      break;
    ++v5;
    if (v3 + v5 == v4)
    {
      *a3 = 0;
LABEL_35:
      *a1 = v4;
      return 1;
    }
  }
  v7 = v3 + v5;
  if ((v6 - 48) < 0xA)
  {
    v8 = v6 - 48;
    if (v7 + 1 != v4)
    {
      while (1)
      {
        v9 = *(unsigned __int8 *)(v3 + v5 + 1);
        if ((v9 - 48) > 9)
        {
          v4 = v3 + v5 + 1;
          goto LABEL_34;
        }
        if (v5 > 0x10)
        {
          if (v8 > 0xCCCCCCCCCCCCCCCLL || (v8 *= 10, v8 > (uint64_t)(0x800000000000002FLL - v9)))
          {
LABEL_30:
            result = 0;
            *a3 = v8;
            return result;
          }
        }
        else
        {
          v8 *= 10;
        }
        v8 = v8 + v9 - 48;
        v10 = (unsigned __int8 *)(v3 + v5 + 2);
        if (v10 == (unsigned __int8 *)v4)
          goto LABEL_34;
        v11 = *v10;
        if ((v11 - 48) > 9)
        {
          v4 = v3 + v5 + 2;
          goto LABEL_34;
        }
        if (v5 + 1 > 0x10)
        {
          if (v8 > 0xCCCCCCCCCCCCCCCLL)
            goto LABEL_30;
          v8 *= 10;
          if (v8 > (uint64_t)(0x800000000000002FLL - v11))
            goto LABEL_30;
        }
        else
        {
          v8 *= 10;
        }
        v8 = v8 + v11 - 48;
        v12 = (unsigned __int8 *)(v3 + v5 + 3);
        if (v12 == (unsigned __int8 *)v4)
          goto LABEL_34;
        v13 = *v12;
        if ((v13 - 48) > 9)
          break;
        if (v5 + 2 > 0x10)
        {
          if (v8 > 0xCCCCCCCCCCCCCCCLL)
            goto LABEL_30;
          v8 *= 10;
          if (v8 > (uint64_t)(0x800000000000002FLL - v13))
            goto LABEL_30;
        }
        else
        {
          v8 *= 10;
        }
        v8 = v8 + v13 - 48;
        v14 = v5 + v3 + 4;
        v5 += 3;
        if (v14 == v4)
          goto LABEL_34;
      }
      v4 = v3 + v5 + 3;
    }
LABEL_34:
    *a3 = v8;
    goto LABEL_35;
  }
  if (!v5)
    return 0;
  *a3 = 0;
  *a1 = v7;
  return 1;
}

uint64_t boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<long long &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  void **v36;

  v3 = *(uint64_t **)(a3 + 16);
  v4 = **(_QWORD ***)(a3 + 8);
  v5 = *v3;
  switch(*(_BYTE *)(*v3 + 12))
  {
    case 2:
      v6 = *(unint64_t **)v5;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        v9 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          if (*((char *)v9 + 31) < 0)
            operator delete((void *)v9[1]);
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v12 = *(unint64_t **)v5;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (unint64_t)v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v17 = *(unint64_t **)v5;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          v36 = (void **)(v20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v21 = *(unint64_t **)v5;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v20 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          v36 = (void **)(v20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_26:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v24 = *(unint64_t **)v5;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
          v10 = v27;
          v28 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v29 = *(unint64_t **)v5;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = *(unint64_t **)v5;
        if (*(_QWORD *)v5)
        {
          v33 = (void *)v32[6];
          if (v33)
          {
            v32[7] = (unint64_t)v33;
            operator delete(v33);
          }
          v34 = (void *)v32[3];
          if (v34)
          {
            v32[4] = (unint64_t)v34;
            operator delete(v34);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
          v10 = v32;
          v28 = 2071181815;
LABEL_41:
          v11 = v28 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v10, v11);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  *(_BYTE *)(v5 + 12) = 0;
  *(_QWORD *)v5 = *v4;
  return v5;
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *__p;
  void *v11;
  uint64_t v12;
  void **p_p;
  char v14;
  _QWORD v15[4];
  char v16;

  __p = 0;
  v11 = 0;
  v12 = 0;
  v7 = *a2;
  if (boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::vector<double>>(a1))
  {
    v14 = 1;
    p_p = &__p;
    v15[0] = a1 + 1;
    v15[1] = &p_p;
    v15[2] = a4;
    v15[3] = &v14;
    boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<std::vector<double> &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)&v16, (uint64_t)(a1 + 1), (uint64_t)v15);
    if (v14)
    {
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *a2 = v7;
    }
  }
  else
  {
    v8 = 0;
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_217F73B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::vector<double>>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)(v1 + 32);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  else
    v4 = 0;
  return v4
      && (boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v2) & 1) != 0;
}

uint64_t boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(_QWORD *a1)
{
  std::runtime_error v2;

  if (!*a1)
  {
    std::runtime_error::runtime_error(&v2, "call to empty boost::function");
    v2.__vftable = (std::runtime_error_vtbl *)&unk_24D91D228;
    boost::throw_exception<boost::bad_function_call>(&v2);
  }
  return (*(uint64_t (**)(_QWORD *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
}

void sub_217F73C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  void *exception;
  std::runtime_error v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  exception = __cxa_allocate_exception(0x40uLL);
  std::runtime_error::runtime_error(&v3, a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = -1;
  v3.__vftable = (std::runtime_error_vtbl *)&unk_24D91D1E0;
  v4 = &unk_24D91D208;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::clone_impl((uint64_t)exception, (uint64_t)&v3);
}

void sub_217F73CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, void *a11, uint64_t a12)
{
  void *v12;
  int v13;

  a11 = &unk_24D918C48;
  if (a12 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12))
    a12 = 0;
  std::runtime_error::~runtime_error(&a10);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_24D91D228;
  v4[1].__vftable = (std::runtime_error_vtbl *)&unk_24D918C48;
  v5 = (uint64_t)&v4[1];
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)a1 = &unk_24D91D140;
  *(_QWORD *)(a1 + 16) = &unk_24D91D178;
  *(_QWORD *)(a1 + 56) = &unk_24D91D1B0;
  boost::exception_detail::copy_boost_exception(v5, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_24D918BA8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&unk_24D91D228;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &unk_24D91D140;
  *(_QWORD *)(a1 + 16) = &unk_24D91D178;
  *(_QWORD *)(a1 + 56) = &unk_24D91D1B0;
  return a1;
}

void sub_217F73E24(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

char *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::clone(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::clone_impl((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_217F73EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::clone_impl((uint64_t)exception, a1);
}

void sub_217F73F48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::~clone_impl(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 2);
  *a1 = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::~clone_impl(a1 - 16);
}

char *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 2) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_function_call>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<boost::bad_function_call>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_24D918C48;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x219A19A08);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<boost::bad_function_call>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::bad_function_call>::~error_info_injector(a1 - 16);
}

void sub_217F740F8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<std::vector<double> &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  void **v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t *v40;
  std::string *v41;
  __int128 v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  void **v73;

  v3 = 0x1080C409938AC02;
  v4 = *(uint64_t ***)(a3 + 16);
  v5 = **(_QWORD **)(a3 + 8);
  v6 = *v4;
  switch(*((_BYTE *)*v4 + 12))
  {
    case 2:
      v7 = (unint64_t *)*v6;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        if (*((char *)v10 + 31) < 0)
          operator delete((void *)v10[1]);
        v11 = v10;
        v12 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v13 = (unint64_t *)*v6;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        v17 = (void *)v16[1];
        if (v17)
        {
          v16[2] = (unint64_t)v17;
          operator delete(v17);
        }
        v11 = v16;
        v12 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v18 = (unint64_t *)*v6;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        v73 = (void **)(v21 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v73);
        goto LABEL_26;
      }
      break;
    case 5:
      v22 = (unint64_t *)*v6;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v21 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        v73 = (void **)(v21 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v73);
LABEL_26:
        v11 = v21;
        v12 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v25 = (unint64_t *)*v6;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
        v11 = v28;
        v29 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v30 = (unint64_t *)*v6;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = (unint64_t *)*v6;
        if (*v6)
        {
          v34 = (void *)v33[6];
          if (v34)
          {
            v33[7] = (unint64_t)v34;
            operator delete(v34);
          }
          v35 = (void *)v33[3];
          if (v35)
          {
            v33[4] = (unint64_t)v35;
            operator delete(v35);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
          v11 = v33;
          v29 = 2071181815;
LABEL_41:
          v12 = v29 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v11, v12);
        }
LABEL_43:
        *v6 = 0;
      }
      break;
    default:
      break;
  }
  *v6 = 0;
  *((_DWORD *)v6 + 2) = 0;
  *((_BYTE *)v6 + 12) = 3;
  v36 = (_QWORD *)operator new();
  *v36 = 0;
  v36[1] = 0;
  v37 = (void **)(v36 + 1);
  v36[2] = 0;
  v36[3] = 0;
  *v6 = (uint64_t)v36;
  *v36 = 1;
  v38 = v36;
  switch(*((_BYTE *)v6 + 12))
  {
    case 2:
      if (*v36 != 1)
      {
        v3 = 0x1012C404EF22A49;
        v39 = (_QWORD *)operator new();
        v40 = (unint64_t *)*v6;
        *v39 = *(_QWORD *)*v6;
        v41 = (std::string *)(v39 + 1);
        if (*((char *)v40 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v41, (const std::string::value_type *)v40[1], v40[2]);
        }
        else
        {
          v42 = *(_OWORD *)(v40 + 1);
          v39[3] = v40[3];
          *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
        }
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v69 = __ldaxr(v38);
          v70 = v69 - 1;
        }
        while (__stlxr(v70, v38));
        if (!v70)
        {
          if ((*((char *)v38 + 31) & 0x80000000) == 0)
            goto LABEL_84;
          v47 = *v37;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      if (*v36 != 1)
      {
        v43 = (_QWORD *)operator new();
        v44 = (unint64_t *)*v6;
        *v43 = *(_QWORD *)*v6;
        v43[2] = 0;
        v43[3] = 0;
        v43[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v43 + 1, (const void *)v44[1], v44[2], (uint64_t)(v44[2] - v44[1]) >> 3);
        *v6 = (uint64_t)v43;
        *v43 = 1;
        do
        {
          v45 = __ldaxr(v38);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v38));
        if (!v46)
        {
          v47 = *v37;
          if (*v37)
          {
            v38[2] = v47;
LABEL_83:
            operator delete(v47);
          }
          goto LABEL_84;
        }
      }
      break;
    case 4:
      if (*v36 != 1)
      {
        v3 = 0x1020C405E66F15BLL;
        v48 = (_QWORD *)operator new();
        v49 = (unint64_t *)*v6;
        *v48 = *(_QWORD *)*v6;
        v48[2] = 0;
        v48[3] = 0;
        v48[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v48 + 1, (uint64_t *)v49[1], (uint64_t *)v49[2], (uint64_t)(v49[2] - v49[1]) >> 4);
        *v6 = (uint64_t)v48;
        *v48 = 1;
        do
        {
          v50 = __ldaxr(v38);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v38));
        if (!v51)
        {
          v73 = v37;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v73);
          goto LABEL_84;
        }
      }
      break;
    case 5:
      if (*v36 != 1)
      {
        v3 = 0x1020C405E66F15BLL;
        v52 = (_QWORD *)operator new();
        v53 = (unint64_t *)*v6;
        *v52 = *(_QWORD *)*v6;
        v52[2] = 0;
        v52[3] = 0;
        v52[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v52 + 1, (uint64_t *)v53[1], (uint64_t *)v53[2], (uint64_t)(v53[2] - v53[1]) >> 5);
        *v6 = (uint64_t)v52;
        *v52 = 1;
        do
        {
          v54 = __ldaxr(v38);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v38));
        if (!v55)
        {
          v73 = v37;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v73);
          goto LABEL_84;
        }
      }
      break;
    case 8:
      if (*v36 != 1)
      {
        v3 = 0x1030C40F1F0227BLL;
        v56 = operator new();
        v57 = (unint64_t *)*v6;
        *(_QWORD *)v56 = *(_QWORD *)*v6;
        *(_QWORD *)(v56 + 8) = v57[1];
        v58 = v57[2];
        *(_QWORD *)(v56 + 16) = v58;
        if (v58)
        {
          v59 = (unsigned int *)(v58 + 8);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v61 = *(_OWORD *)(v57 + 3);
        v62 = *(_OWORD *)(v57 + 5);
        *(_OWORD *)(v56 + 56) = *(_OWORD *)(v57 + 7);
        *(_OWORD *)(v56 + 40) = v62;
        *(_OWORD *)(v56 + 24) = v61;
        *v6 = v56;
        *(_QWORD *)v56 = 1;
        do
        {
          v63 = __ldaxr(v38);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v38));
        if (!v64)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
          goto LABEL_84;
        }
      }
      break;
    case 9:
      if (*v36 != 1)
      {
        v3 = 0x1030C407B73B9F7;
        v65 = (_QWORD *)operator new();
        v66 = *v6 + 8;
        *v65 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v65 + 1, v66);
        *v6 = (uint64_t)v65;
        *v65 = 1;
        do
        {
          v67 = __ldaxr(v38);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v38));
        if (!v68)
        {
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
LABEL_84:
          MEMORY[0x219A19A08](v38, v3);
        }
      }
      break;
    default:
      break;
  }
  v71 = (char *)(*v6 + 8);
  if (v71 != (char *)v5)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v71, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
  return v6;
}

void sub_217F74714(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  char v12;
  void **v13[4];
  _BYTE v14[9];

  boost::spirit::traits::make_attribute<std::vector<turi::flexible_type>,boost::spirit::unused_type const>::call(v10);
  v7 = *a2;
  if (boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::vector<turi::flexible_type>>((uint64_t *)a1))
  {
    v12 = 1;
    v11 = v10;
    v13[0] = (void **)(a1 + 8);
    v13[1] = (void **)&v11;
    v13[2] = a4;
    v13[3] = (void **)&v12;
    boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<std::vector<turi::flexible_type> &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)v14, a1 + 8, (uint64_t)v13);
    if (v12)
    {
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *a2 = v7;
    }
  }
  else
  {
    v8 = 0;
  }
  v13[0] = (void **)v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v13);
  return v8;
}

void sub_217F74868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 56) = &a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 56));
  _Unwind_Resume(a1);
}

void boost::spirit::traits::make_attribute<std::vector<turi::flexible_type>,boost::spirit::unused_type const>::call(_QWORD *a1@<X8>)
{
  void **v1;
  _QWORD v2[4];

  v2[3] = *MEMORY[0x24BDAC8D0];
  memset(v2, 0, 24);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1, 0, 0, 0);
  v1 = (void **)v2;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_217F74908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::vector<turi::flexible_type>>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)(v1 + 32);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  else
    v4 = 0;
  return v4
      && (boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v2) & 1) != 0;
}

uint64_t *boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<std::vector<turi::flexible_type> &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  void **v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t *v40;
  std::string *v41;
  __int128 v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void **v73;

  v3 = 0x1020C405E66F15BLL;
  v4 = *(uint64_t ***)(a3 + 16);
  v5 = **(uint64_t ****)(a3 + 8);
  v6 = *v4;
  switch(*((_BYTE *)*v4 + 12))
  {
    case 2:
      v7 = (unint64_t *)*v6;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        if (*((char *)v10 + 31) < 0)
          operator delete((void *)v10[1]);
        v11 = v10;
        v12 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v13 = (unint64_t *)*v6;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        v17 = (void *)v16[1];
        if (v17)
        {
          v16[2] = (unint64_t)v17;
          operator delete(v17);
        }
        v11 = v16;
        v12 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v18 = (unint64_t *)*v6;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        v73 = (void **)(v21 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v73);
        goto LABEL_26;
      }
      break;
    case 5:
      v22 = (unint64_t *)*v6;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v21 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        v73 = (void **)(v21 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v73);
LABEL_26:
        v11 = v21;
        v12 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v25 = (unint64_t *)*v6;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
        v11 = v28;
        v29 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v30 = (unint64_t *)*v6;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = (unint64_t *)*v6;
        if (*v6)
        {
          v34 = (void *)v33[6];
          if (v34)
          {
            v33[7] = (unint64_t)v34;
            operator delete(v34);
          }
          v35 = (void *)v33[3];
          if (v35)
          {
            v33[4] = (unint64_t)v35;
            operator delete(v35);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
          v11 = v33;
          v29 = 2071181815;
LABEL_41:
          v12 = v29 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v11, v12);
        }
LABEL_43:
        *v6 = 0;
      }
      break;
    default:
      break;
  }
  *v6 = 0;
  *((_DWORD *)v6 + 2) = 0;
  *((_BYTE *)v6 + 12) = 4;
  v36 = (_QWORD *)operator new();
  *v36 = 0;
  v36[1] = 0;
  v37 = (void **)(v36 + 1);
  v36[2] = 0;
  v36[3] = 0;
  *v6 = (uint64_t)v36;
  *v36 = 1;
  v38 = v36;
  switch(*((_BYTE *)v6 + 12))
  {
    case 2:
      if (*v36 != 1)
      {
        v3 = 0x1012C404EF22A49;
        v39 = (_QWORD *)operator new();
        v40 = (unint64_t *)*v6;
        *v39 = *(_QWORD *)*v6;
        v41 = (std::string *)(v39 + 1);
        if (*((char *)v40 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v41, (const std::string::value_type *)v40[1], v40[2]);
        }
        else
        {
          v42 = *(_OWORD *)(v40 + 1);
          v39[3] = v40[3];
          *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
        }
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v69 = __ldaxr(v38);
          v70 = v69 - 1;
        }
        while (__stlxr(v70, v38));
        if (!v70)
        {
          if ((*((char *)v38 + 31) & 0x80000000) == 0)
            goto LABEL_84;
          v47 = *v37;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      if (*v36 != 1)
      {
        v3 = 0x1080C409938AC02;
        v43 = (_QWORD *)operator new();
        v44 = (unint64_t *)*v6;
        *v43 = *(_QWORD *)*v6;
        v43[2] = 0;
        v43[3] = 0;
        v43[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v43 + 1, (const void *)v44[1], v44[2], (uint64_t)(v44[2] - v44[1]) >> 3);
        *v6 = (uint64_t)v43;
        *v43 = 1;
        do
        {
          v45 = __ldaxr(v38);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v38));
        if (!v46)
        {
          v47 = *v37;
          if (*v37)
          {
            v38[2] = v47;
LABEL_83:
            operator delete(v47);
          }
          goto LABEL_84;
        }
      }
      break;
    case 4:
      if (*v36 != 1)
      {
        v48 = (_QWORD *)operator new();
        v49 = (unint64_t *)*v6;
        *v48 = *(_QWORD *)*v6;
        v48[2] = 0;
        v48[3] = 0;
        v48[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v48 + 1, (uint64_t *)v49[1], (uint64_t *)v49[2], (uint64_t)(v49[2] - v49[1]) >> 4);
        *v6 = (uint64_t)v48;
        *v48 = 1;
        do
        {
          v50 = __ldaxr(v38);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v38));
        if (!v51)
        {
          v73 = v37;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v73);
          goto LABEL_84;
        }
      }
      break;
    case 5:
      if (*v36 != 1)
      {
        v52 = (_QWORD *)operator new();
        v53 = (unint64_t *)*v6;
        *v52 = *(_QWORD *)*v6;
        v52[2] = 0;
        v52[3] = 0;
        v52[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v52 + 1, (uint64_t *)v53[1], (uint64_t *)v53[2], (uint64_t)(v53[2] - v53[1]) >> 5);
        *v6 = (uint64_t)v52;
        *v52 = 1;
        do
        {
          v54 = __ldaxr(v38);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v38));
        if (!v55)
        {
          v73 = v37;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v73);
          goto LABEL_84;
        }
      }
      break;
    case 8:
      if (*v36 != 1)
      {
        v3 = 0x1030C40F1F0227BLL;
        v56 = operator new();
        v57 = (unint64_t *)*v6;
        *(_QWORD *)v56 = *(_QWORD *)*v6;
        *(_QWORD *)(v56 + 8) = v57[1];
        v58 = v57[2];
        *(_QWORD *)(v56 + 16) = v58;
        if (v58)
        {
          v59 = (unsigned int *)(v58 + 8);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v61 = *(_OWORD *)(v57 + 3);
        v62 = *(_OWORD *)(v57 + 5);
        *(_OWORD *)(v56 + 56) = *(_OWORD *)(v57 + 7);
        *(_OWORD *)(v56 + 40) = v62;
        *(_OWORD *)(v56 + 24) = v61;
        *v6 = v56;
        *(_QWORD *)v56 = 1;
        do
        {
          v63 = __ldaxr(v38);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v38));
        if (!v64)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
          goto LABEL_84;
        }
      }
      break;
    case 9:
      if (*v36 != 1)
      {
        v3 = 0x1030C407B73B9F7;
        v65 = (_QWORD *)operator new();
        v66 = *v6 + 8;
        *v65 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v65 + 1, v66);
        *v6 = (uint64_t)v65;
        *v65 = 1;
        do
        {
          v67 = __ldaxr(v38);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v38));
        if (!v68)
        {
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
LABEL_84:
          MEMORY[0x219A19A08](v38, v3);
        }
      }
      break;
    default:
      break;
  }
  v71 = *v6 + 8;
  if ((uint64_t **)v71 != v5)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v71, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 4);
  return v6;
}

void sub_217F74F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  char v12;
  void **v13[4];
  _BYTE v14[9];

  boost::spirit::traits::make_attribute<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,boost::spirit::unused_type const>::call(v10);
  v7 = *a2;
  if (boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t *)a1))
  {
    v12 = 1;
    v11 = v10;
    v13[0] = (void **)(a1 + 8);
    v13[1] = (void **)&v11;
    v13[2] = a4;
    v13[3] = (void **)&v12;
    boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)v14, a1 + 8, (uint64_t)v13);
    if (v12)
    {
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *a2 = v7;
    }
  }
  else
  {
    v8 = 0;
  }
  v13[0] = (void **)v10;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v13);
  return v8;
}

void sub_217F750C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 56) = &a10;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 56));
  _Unwind_Resume(a1);
}

void boost::spirit::traits::make_attribute<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,boost::spirit::unused_type const>::call(_QWORD *a1@<X8>)
{
  void **v1;
  _QWORD v2[4];

  v2[3] = *MEMORY[0x24BDAC8D0];
  memset(v2, 0, 24);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(a1, 0, 0, 0);
  v1 = (void **)v2;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_217F75164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)(v1 + 32);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  else
    v4 = 0;
  return v4
      && (boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v2) & 1) != 0;
}

uint64_t *boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  void **v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t *v40;
  std::string *v41;
  __int128 v42;
  _QWORD *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char **v71;
  void **v73;

  v3 = 0x1020C405E66F15BLL;
  v4 = *(uint64_t ***)(a3 + 16);
  v5 = **(uint64_t ****)(a3 + 8);
  v6 = *v4;
  switch(*((_BYTE *)*v4 + 12))
  {
    case 2:
      v7 = (unint64_t *)*v6;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        if (*((char *)v10 + 31) < 0)
          operator delete((void *)v10[1]);
        v11 = v10;
        v12 = 0x1012C404EF22A49;
        goto LABEL_42;
      }
      break;
    case 3:
      v13 = (unint64_t *)*v6;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        v17 = (void *)v16[1];
        if (v17)
        {
          v16[2] = (unint64_t)v17;
          operator delete(v17);
        }
        v11 = v16;
        v12 = 0x1080C409938AC02;
        goto LABEL_42;
      }
      break;
    case 4:
      v18 = (unint64_t *)*v6;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        v73 = (void **)(v21 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v73);
        goto LABEL_26;
      }
      break;
    case 5:
      v22 = (unint64_t *)*v6;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v21 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        v73 = (void **)(v21 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v73);
LABEL_26:
        v11 = v21;
        v12 = 0x1020C405E66F15BLL;
        goto LABEL_42;
      }
      break;
    case 8:
      v25 = (unint64_t *)*v6;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (unint64_t *)*v6;
        if (!*v6)
          goto LABEL_43;
        boost::detail::shared_count::~shared_count((unsigned int **)v28 + 2);
        v11 = v28;
        v29 = -235920773;
        goto LABEL_41;
      }
      break;
    case 9:
      v30 = (unint64_t *)*v6;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = (unint64_t *)*v6;
        if (*v6)
        {
          v34 = (void *)v33[6];
          if (v34)
          {
            v33[7] = (unint64_t)v34;
            operator delete(v34);
          }
          v35 = (void *)v33[3];
          if (v35)
          {
            v33[4] = (unint64_t)v35;
            operator delete(v35);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v33 + 1));
          v11 = v33;
          v29 = 2071181815;
LABEL_41:
          v12 = v29 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v11, v12);
        }
LABEL_43:
        *v6 = 0;
      }
      break;
    default:
      break;
  }
  *v6 = 0;
  *((_DWORD *)v6 + 2) = 0;
  *((_BYTE *)v6 + 12) = 5;
  v36 = (_QWORD *)operator new();
  *v36 = 0;
  v36[1] = 0;
  v37 = (void **)(v36 + 1);
  v36[2] = 0;
  v36[3] = 0;
  *v6 = (uint64_t)v36;
  *v36 = 1;
  v38 = v36;
  switch(*((_BYTE *)v6 + 12))
  {
    case 2:
      if (*v36 != 1)
      {
        v3 = 0x1012C404EF22A49;
        v39 = (_QWORD *)operator new();
        v40 = (unint64_t *)*v6;
        *v39 = *(_QWORD *)*v6;
        v41 = (std::string *)(v39 + 1);
        if (*((char *)v40 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v41, (const std::string::value_type *)v40[1], v40[2]);
        }
        else
        {
          v42 = *(_OWORD *)(v40 + 1);
          v39[3] = v40[3];
          *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
        }
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v69 = __ldaxr(v38);
          v70 = v69 - 1;
        }
        while (__stlxr(v70, v38));
        if (!v70)
        {
          if ((*((char *)v38 + 31) & 0x80000000) == 0)
            goto LABEL_84;
          v47 = *v37;
          goto LABEL_83;
        }
      }
      break;
    case 3:
      if (*v36 != 1)
      {
        v3 = 0x1080C409938AC02;
        v43 = (_QWORD *)operator new();
        v44 = (unint64_t *)*v6;
        *v43 = *(_QWORD *)*v6;
        v43[2] = 0;
        v43[3] = 0;
        v43[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v43 + 1, (const void *)v44[1], v44[2], (uint64_t)(v44[2] - v44[1]) >> 3);
        *v6 = (uint64_t)v43;
        *v43 = 1;
        do
        {
          v45 = __ldaxr(v38);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v38));
        if (!v46)
        {
          v47 = *v37;
          if (*v37)
          {
            v38[2] = v47;
LABEL_83:
            operator delete(v47);
          }
          goto LABEL_84;
        }
      }
      break;
    case 4:
      if (*v36 != 1)
      {
        v48 = (_QWORD *)operator new();
        v49 = (unint64_t *)*v6;
        *v48 = *(_QWORD *)*v6;
        v48[2] = 0;
        v48[3] = 0;
        v48[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v48 + 1, (uint64_t *)v49[1], (uint64_t *)v49[2], (uint64_t)(v49[2] - v49[1]) >> 4);
        *v6 = (uint64_t)v48;
        *v48 = 1;
        do
        {
          v50 = __ldaxr(v38);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v38));
        if (!v51)
        {
          v73 = v37;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v73);
          goto LABEL_84;
        }
      }
      break;
    case 5:
      if (*v36 != 1)
      {
        v52 = (_QWORD *)operator new();
        v53 = (unint64_t *)*v6;
        *v52 = *(_QWORD *)*v6;
        v52[2] = 0;
        v52[3] = 0;
        v52[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v52 + 1, (uint64_t *)v53[1], (uint64_t *)v53[2], (uint64_t)(v53[2] - v53[1]) >> 5);
        *v6 = (uint64_t)v52;
        *v52 = 1;
        do
        {
          v54 = __ldaxr(v38);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v38));
        if (!v55)
        {
          v73 = v37;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v73);
          goto LABEL_84;
        }
      }
      break;
    case 8:
      if (*v36 != 1)
      {
        v3 = 0x1030C40F1F0227BLL;
        v56 = operator new();
        v57 = (unint64_t *)*v6;
        *(_QWORD *)v56 = *(_QWORD *)*v6;
        *(_QWORD *)(v56 + 8) = v57[1];
        v58 = v57[2];
        *(_QWORD *)(v56 + 16) = v58;
        if (v58)
        {
          v59 = (unsigned int *)(v58 + 8);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v61 = *(_OWORD *)(v57 + 3);
        v62 = *(_OWORD *)(v57 + 5);
        *(_OWORD *)(v56 + 56) = *(_OWORD *)(v57 + 7);
        *(_OWORD *)(v56 + 40) = v62;
        *(_OWORD *)(v56 + 24) = v61;
        *v6 = v56;
        *(_QWORD *)v56 = 1;
        do
        {
          v63 = __ldaxr(v38);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v38));
        if (!v64)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
          goto LABEL_84;
        }
      }
      break;
    case 9:
      if (*v36 != 1)
      {
        v3 = 0x1030C407B73B9F7;
        v65 = (_QWORD *)operator new();
        v66 = *v6 + 8;
        *v65 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v65 + 1, v66);
        *v6 = (uint64_t)v65;
        *v65 = 1;
        do
        {
          v67 = __ldaxr(v38);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v38));
        if (!v68)
        {
          std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v38);
LABEL_84:
          MEMORY[0x219A19A08](v38, v3);
        }
      }
      break;
    default:
      break;
  }
  v71 = (char **)(*v6 + 8);
  if (v71 != (char **)v5)
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v71, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 5);
  return v6;
}

void sub_217F757CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

BOOL boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  char v9;
  char *v10;
  unsigned __int8 v11;
  _QWORD v12[4];
  char v13;

  v5 = *a2;
  if (*a2 != *a3)
  {
    v6 = *a2;
    do
    {
      if ((boost::spirit::char_encoding::iso8859_1_char_types[*v6] & 0x40) == 0)
        break;
      *a2 = ++v6;
    }
    while (v6 != *a3);
  }
  v11 = 1;
  v10 = &v9;
  v12[0] = a1 + 8;
  v12[1] = &v10;
  v12[2] = a4;
  v12[3] = &v11;
  boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const*,boost::fusion::vector<boost::spirit::unused_type &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)&v13, a1 + 8, (uint64_t)v12);
  v7 = v11;
  if (!v11)
    *a2 = v5;
  return v7 != 0;
}

uint64_t boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const*,boost::fusion::vector<boost::spirit::unused_type &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  unint64_t *v39;
  unint64_t v40;
  void **v42;

  v3 = (uint64_t *)(a2 + 8);
  v4 = **(_QWORD **)(a3 + 16);
  if (a2 + 8 != v4)
  {
    switch(*(_BYTE *)(v4 + 12))
    {
      case 2:
        v6 = *(unint64_t **)v4;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          v9 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          if (*((char *)v9 + 31) < 0)
            operator delete((void *)v9[1]);
          v10 = v9;
          v11 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
        break;
      case 3:
        v12 = *(unint64_t **)v4;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v16 = (void *)v15[1];
          if (v16)
          {
            v15[2] = (unint64_t)v16;
            operator delete(v16);
          }
          v10 = v15;
          v11 = 0x1080C409938AC02;
          goto LABEL_43;
        }
        break;
      case 4:
        v17 = *(unint64_t **)v4;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          v20 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
          goto LABEL_27;
        }
        break;
      case 5:
        v21 = *(unint64_t **)v4;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v20 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          v42 = (void **)(v20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_27:
          v10 = v20;
          v11 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
        break;
      case 8:
        v24 = *(unint64_t **)v4;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          v27 = *(unint64_t **)v4;
          if (!*(_QWORD *)v4)
            goto LABEL_44;
          boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
          v10 = v27;
          v28 = -235920773;
          goto LABEL_42;
        }
        break;
      case 9:
        v29 = *(unint64_t **)v4;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = *(unint64_t **)v4;
          if (*(_QWORD *)v4)
          {
            v33 = (void *)v32[6];
            if (v33)
            {
              v32[7] = (unint64_t)v33;
              operator delete(v33);
            }
            v34 = (void *)v32[3];
            if (v34)
            {
              v32[4] = (unint64_t)v34;
              operator delete(v34);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 1));
            v10 = v32;
            v28 = 2071181815;
LABEL_42:
            v11 = v28 | 0x1030C4000000000;
LABEL_43:
            MEMORY[0x219A19A08](v10, v11);
          }
LABEL_44:
          *(_QWORD *)v4 = 0;
        }
        break;
      default:
        break;
    }
    v35 = *v3;
    *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)v3 + 5);
    *(_QWORD *)v4 = v35;
    LODWORD(v35) = *(unsigned __int8 *)(a2 + 20);
    *(_BYTE *)(v4 + 12) = v35;
    v36 = v35 > 9;
    v37 = (1 << v35) & 0x33C;
    if (!v36 && v37 != 0)
    {
      v39 = *(unint64_t **)v4;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
  }
  return v4;
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(uint64_t a1, __int16 *a2, uint64_t *a3)
{
  __int128 v5;
  __int16 v7;
  char v8;
  __int16 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = *((_BYTE *)a2 + 2);
  v9 = a2[4];
  v10 = *((_BYTE *)a2 + 10);
  v5 = *((_OWORD *)a2 + 2);
  v11 = *((_OWORD *)a2 + 1);
  v12 = v5;
  v13 = *((_OWORD *)a2 + 3);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v14, (uint64_t)(a2 + 32));
  boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_functor<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v7, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v22);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  if (v17 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14);
  return 1;
}

void sub_217F75C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_functor<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t result;

  v5 = operator new();
  *(_WORD *)v5 = *(_WORD *)a2;
  *(_BYTE *)(v5 + 2) = *(_BYTE *)(a2 + 2);
  *(_WORD *)(v5 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(v5 + 10) = *(_BYTE *)(a2 + 10);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
  result = boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(v5 + 64, a2 + 64);
  *a3 = v5;
  return result;
}

void sub_217F75CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C400BC9F32ALL);
  _Unwind_Resume(a1);
}

uint64_t *boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(uint64_t a1, _QWORD *a2)
{
  __int16 v4;
  char v5;
  __int16 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;
  char v12;
  __int16 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(a2, (uint64_t)&v4);
  v11 = v4;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  return _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS17_6tagns_3tag6assignENS17_7argsns_5list2INS16_INS6_9attributeILi0EEEEENS16_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INS10_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1N_EENS9_INS10_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1U_9allocatorIdEEEEvEKNS18_4exprINS1B_8terminalENS1D_4termISQ_EELl0EEENS6_11unused_typeES26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_ISB_NS1W_ISB_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_INS1U_4pairISB_SB_EENS1W_IS2J_EEEEvES25_S26_S26_EEEES1N_EESD_EEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES32_((uint64_t *)(a1 + 32), &v11);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS17_6tagns_3tag6assignENS17_7argsns_5list2INS16_INS6_9attributeILi0EEEEENS16_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INS10_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1N_EENS9_INS10_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1U_9allocatorIdEEEEvEKNS18_4exprINS1B_8terminalENS1D_4termISQ_EELl0EEENS6_11unused_typeES26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_ISB_NS1W_ISB_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_INS1U_4pairISB_SB_EENS1W_IS2J_EEEEvES25_S26_S26_EEEES1N_EESD_EEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES32_(uint64_t *a1, __int16 *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7[4];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;
  char v12;
  __int16 v13;
  char v14;

  v3 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 1);
  v13 = *a2;
  v14 = *((_BYTE *)a2 + 2);
  v11 = a2[4];
  v12 = *((_BYTE *)a2 + 10);
  v8 = *((_OWORD *)a2 + 3);
  v9 = v3;
  v4 = operator new();
  *(_WORD *)v4 = v13;
  *(_BYTE *)(v4 + 2) = v14;
  *(_WORD *)(v4 + 8) = v11;
  *(_BYTE *)(v4 + 10) = v12;
  v5 = v9;
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = v8;
  v7[0] = (uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>,mpl_::BOOL_<false>>)::stored_vtable;
  v7[1] = v4;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v7, a1);
  boost::function0<void>::~function0(v7);
  return a1;
}

void sub_217F75E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t result;

  v2 = (uint64_t **)a1[1];
  v3 = **v2;
  v4 = *(unsigned __int16 *)v2[1];
  v5 = *(uint64_t ***)(*a1 + 8);
  v6 = **v5;
  v7 = *(unsigned __int16 *)v5[1];
  v8 = *(uint64_t ***)(*(_QWORD *)*a1 + 8);
  v9 = **v8;
  v10 = *(unsigned __int16 *)v8[1];
  v11 = **(_WORD **)(*(_QWORD *)(**(_QWORD **)*a1 + 8) + 8);
  v12 = **(unsigned __int16 **)(***(_QWORD ***)*a1 + 8);
  result = (v12 << 8);
  *(_BYTE *)(a2 + 2) = BYTE1(v12);
  *(_WORD *)a2 = (_WORD)v12 << 8;
  *(_BYTE *)(a2 + 10) = HIBYTE(v11);
  *(_WORD *)(a2 + 8) = v11 << 8;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 56) = v4;
  return result;
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  __int16 *v5;
  __int16 v6;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(__int16 **)result;
      result = operator new();
      v6 = *v5;
      *(_BYTE *)(result + 2) = *((_BYTE *)v5 + 2);
      *(_WORD *)result = v6;
      LOBYTE(v6) = *((_BYTE *)v5 + 10);
      *(_WORD *)(result + 8) = v5[4];
      *(_BYTE *)(result + 10) = v6;
      *(_OWORD *)(result + 16) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(result + 32) = *((_OWORD *)v5 + 2);
      *(_OWORD *)(result + 48) = *((_OWORD *)v5 + 3);
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x60C40D76D27DFLL);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CB2F1 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CB2F1 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(uint64_t *a1, uint64_t *a2, uint64_t *a3, void **a4, uint64_t a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t *a3, void **a4, uint64_t a5)
{
  if ((boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1, a2, a3, (uint64_t)a4, a5) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 8, a2, a3, (uint64_t)a4, a5) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((uint64_t *)(a1 + 16), a2, (uint64_t)a3, (uint64_t)a4) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 32, a2,
          (uint64_t)a3,
          a4) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 48, a2, (uint64_t)a3, a4);
  }
}

void _ZN5boost6spirit2qi4ruleIPKcFN4turi13flexible_typeEvEKNS_5proto7exprns_4exprINS8_6tagns_3tag8terminalENS8_7argsns_4termINS0_3tag9char_codeINSG_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEENS0_11unused_typeESP_E6defineIN4mpl_5BOOL_ILb0EEENSA_INSC_10bitwise_orENSE_5list2IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_INSC_9subscriptENSW_IRNS0_8terminalINSG_12stateful_tagINS5_20strict_real_policiesIdEENSG_7double_EdSP_EEEERKNS_7phoenix5actorINS9_10basic_exprINSC_6assignENSW_INS17_INS0_9attributeILi0EEEEENS17_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSA_ISX_NSW_IRKNSY_INSG_9long_longEEES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNSt3__16vectorIS6_NS21_9allocatorIS6_EEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS22_INS21_4pairIS6_S6_EENS23_IS2I_EEEEvESO_SP_SP_EES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNSA_ISD_NSF_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS2X_13parser_configEEEEEEEELl0EEES1K_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRKNSY_INSG_3epsEEERKNS17_INS18_IS19_NSW_IS1C_NS17_INS18_ISD_NSF_IS6_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEEEEvRSQ_RKT0_NST_ILb1EEE(uint64_t a1, uint64_t *a2)
{
  __int16 v3;
  char v4;
  __int16 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  __int16 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];

  v32[3] = *MEMORY[0x24BDAC8D0];
  _ZNK5boost6spirit6detail11make_binaryINS0_2qi6domainENS_5proto6tagns_3tag10bitwise_orENS0_13meta_compilerIS4_E12meta_grammarELb1EE4implIRKNS5_7exprns_4exprIS8_NS5_7argsns_5list2IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_INS7_9subscriptENSH_IRNS0_8terminalINS0_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSK_7double_EdNS0_11unused_typeEEEEERKNS_7phoenix5actorINSE_10basic_exprINS7_6assignENSH_INSV_INS0_9attributeILi0EEEEENSV_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_9long_longEEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS3_4ruleIPKcFNSt3__16vectorINSM_13flexible_typeENS1S_9allocatorIS1U_EEEEvEKNSF_INS7_8terminalENSG_4termINSK_9char_codeINSK_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEESQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS1P_IS1R_FNS1T_INS1S_4pairIS1U_S1U_EENS1V_IS2K_EEEEvES28_SQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNSF_IS1Z_NS20_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS2Z_13parser_configEEEEEEEELl0EEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_3epsEEERKNSV_INSW_ISX_NSH_IS10_NSV_INSW_IS1Z_NS20_IS1U_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEERKN4mpl_5void_ERSQ_EclES41_S45_S46_(a2, (uint64_t)&v3);
  v18 = v3;
  v19 = v4;
  v20 = v5;
  v21 = v6;
  v22 = v7;
  v23 = v8;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v24, (uint64_t)&v9);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS17_6tagns_3tag6assignENS17_7argsns_5list2INS16_INS6_9attributeILi0EEEEENS16_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INS10_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1N_EENS9_INS10_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorISB_NS1U_9allocatorISB_EEEEvEKNS18_4exprINS1B_8terminalENS1D_4termISQ_EELl0EEENS6_11unused_typeES26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_INS1U_4pairISB_SB_EENS1W_IS2C_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_IN11parser_impl13string_parserES1N_EENS9_INS10_INSJ_10eps_parserENS16_INS19_IS1C_NS1E_IS1H_NS16_INS19_IS21_NS22_ISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES37_((uint64_t *)(a1 + 32), (uint64_t)&v18);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v32);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v30);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v29);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v17);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9);
}

void sub_217F76244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)&a52);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS17_6tagns_3tag6assignENS17_7argsns_5list2INS16_INS6_9attributeILi0EEEEENS16_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INS10_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1N_EENS9_INS10_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorISB_NS1U_9allocatorISB_EEEEvEKNS18_4exprINS1B_8terminalENS1D_4termISQ_EELl0EEENS6_11unused_typeES26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_INS1U_4pairISB_SB_EENS1W_IS2C_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_IN11parser_impl13string_parserES1N_EENS9_INS10_INSJ_10eps_parserENS16_INS19_IS1C_NS1E_IS1H_NS16_INS19_IS21_NS22_ISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES37_(uint64_t *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t (**v5[4])();
  __int16 v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v6 = *(_WORD *)a2;
  v7 = *(_BYTE *)(a2 + 2);
  v8 = *(_WORD *)(a2 + 8);
  v9 = *(_BYTE *)(a2 + 10);
  v3 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  v11 = v3;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v12, a2 + 48);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS17_6tagns_3tag6assignENS17_7argsns_5list2INS16_INS6_9attributeILi0EEEEENS16_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INS10_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1N_EENS9_INS10_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorISB_NS1U_9allocatorISB_EEEEvEKNS18_4exprINS1B_8terminalENS1D_4termISQ_EELl0EEENS6_11unused_typeES26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_INS1U_4pairISB_SB_EENS1W_IS2C_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_IN11parser_impl13string_parserES1N_EENS9_INS10_INSJ_10eps_parserENS16_INS19_IS1C_NS1E_IS1H_NS16_INS19_IS21_NS22_ISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS36_EE5valueEiE4typeE(v5, &v6);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap((uint64_t *)v5, a1);
  boost::function0<void>::~function0((uint64_t *)v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v20);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  return a1;
}

void sub_217F76378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::function0<void>::~function0((uint64_t *)va);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va1);
  _Unwind_Resume(a1);
}

void _ZNK5boost6spirit6detail11make_binaryINS0_2qi6domainENS_5proto6tagns_3tag10bitwise_orENS0_13meta_compilerIS4_E12meta_grammarELb1EE4implIRKNS5_7exprns_4exprIS8_NS5_7argsns_5list2IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_INS7_9subscriptENSH_IRNS0_8terminalINS0_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSK_7double_EdNS0_11unused_typeEEEEERKNS_7phoenix5actorINSE_10basic_exprINS7_6assignENSH_INSV_INS0_9attributeILi0EEEEENSV_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_9long_longEEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS3_4ruleIPKcFNSt3__16vectorINSM_13flexible_typeENS1S_9allocatorIS1U_EEEEvEKNSF_INS7_8terminalENSG_4termINSK_9char_codeINSK_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEESQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS1P_IS1R_FNS1T_INS1S_4pairIS1U_S1U_EENS1V_IS2K_EEEEvES28_SQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNSF_IS1Z_NS20_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS2Z_13parser_configEEEEEEEELl0EEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_3epsEEERKNSV_INSW_ISX_NSH_IS10_NSV_INSW_IS1Z_NS20_IS1U_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEERKN4mpl_5void_ERSQ_EclES41_S45_S46_(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int16 v4;
  char v5;
  __int16 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  _ZNK5boost5proto6detail17reverse_fold_implINS0_4makeINS_6fusion4nil_EEENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINSB_13meta_compilerINSB_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprISA_NS0_7argsns_5list2IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_INS9_9subscriptENSO_IRNSB_8terminalINSB_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSR_7double_EdNSB_11unused_typeEEEEERKNS_7phoenix5actorINSL_10basic_exprINS9_6assignENSO_INS12_INSB_9attributeILi0EEEEENS12_INSB_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSM_ISP_NSO_IRKNSQ_INSR_9long_longEEES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNSF_4ruleIPKcFNSt3__16vectorINST_13flexible_typeENS1Z_9allocatorIS21_EEEEvEKNSM_INS9_8terminalENSN_4termINSR_9char_codeINSR_5spaceENSB_13char_encoding9iso8859_1EEEEELl0EEESX_SX_EES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNS1W_IS1Y_FNS20_INS1Z_4pairIS21_S21_EENS22_IS2R_EEEEvES2F_SX_SX_EES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNSM_IS26_NS27_INSB_11terminal_exIN11parser_impl3tag17restricted_stringENS4_6vectorIJNS36_13parser_configEEEEEEEELl0EEES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRKNSQ_INSR_3epsEEERKNS12_INS13_IS14_NSO_IS17_NS12_INS13_IS26_NS27_IS21_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEERKN4mpl_5void_ERSX_Ll2EEclES47_S4B_S4C_(a1, (uint64_t)&v4);
  *(_WORD *)a2 = v4;
  *(_BYTE *)(a2 + 2) = v5;
  *(_WORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 10) = v7;
  v3 = v9;
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v3;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(a2 + 48, (uint64_t)&v10);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v18);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  if (v13 < 0)
    operator delete(__p);
  if (v11 < 0)
    operator delete(v10);
}

void sub_217F76490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZNK5boost5proto6detail17reverse_fold_implINS0_4makeINS_6fusion4nil_EEENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINSB_13meta_compilerINSB_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprISA_NS0_7argsns_5list2IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_INS9_9subscriptENSO_IRNSB_8terminalINSB_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSR_7double_EdNSB_11unused_typeEEEEERKNS_7phoenix5actorINSL_10basic_exprINS9_6assignENSO_INS12_INSB_9attributeILi0EEEEENS12_INSB_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSM_ISP_NSO_IRKNSQ_INSR_9long_longEEES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNSF_4ruleIPKcFNSt3__16vectorINST_13flexible_typeENS1Z_9allocatorIS21_EEEEvEKNSM_INS9_8terminalENSN_4termINSR_9char_codeINSR_5spaceENSB_13char_encoding9iso8859_1EEEEELl0EEESX_SX_EES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNS1W_IS1Y_FNS20_INS1Z_4pairIS21_S21_EENS22_IS2R_EEEEvES2F_SX_SX_EES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRNSM_IS26_NS27_INSB_11terminal_exIN11parser_impl3tag17restricted_stringENS4_6vectorIJNS36_13parser_configEEEEEEEELl0EEES1F_EELl2EEEEELl2EEERKNSM_ISP_NSO_IRKNSQ_INSR_3epsEEERKNS12_INS13_IS14_NSO_IS17_NS12_INS13_IS26_NS27_IS21_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEERKN4mpl_5void_ERSX_Ll2EEclES47_S4B_S4C_@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  _BYTE v5[16];
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::eps> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const&>,2l> const&,boost::fusion::nil_,boost::spirit::unused_type &>::operator()(a1[1], (uint64_t)v5);
  _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorINSQ_13flexible_typeENS1W_9allocatorIS1Y_EEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INS1W_4pairIS1Y_S1Y_EENS1Z_IS2O_EEEEvES2C_SU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSJ_IS23_NS24_INS8_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS33_13parser_configEEEEEEEELl0EEES1C_EELl2EEEEELl2EEENS36_4consINSC_6actionINSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS23_NS24_IS1Y_EELl0EEEEEEELl2EEEEEEENS36_4nil_EEERSU_Ll2EEclES3L_RKS3X_S3Y_(*a1, (uint64_t)v5, a2);
  return boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v6);
}

void sub_217F76544(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorINSQ_13flexible_typeENS1W_9allocatorIS1Y_EEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INS1W_4pairIS1Y_S1Y_EENS1Z_IS2O_EEEEvES2C_SU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSJ_IS23_NS24_INS8_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS33_13parser_configEEEEEEEELl0EEES1C_EELl2EEEEELl2EEENS36_4consINSC_6actionINSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS23_NS24_IS1Y_EELl0EEEEEEELl2EEEEEEENS36_4nil_EEERSU_Ll2EEclES3L_RKS3X_S3Y_@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t *v5;
  unint64_t v6;
  void *v8[2];
  char v9;
  void *__p;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  v17[8] = *(_BYTE *)(a2 + 8);
  memset(v18, 0, 13);
  if (v17 != (_BYTE *)a2)
  {
    *(_QWORD *)((char *)v18 + 5) = *(_QWORD *)(a2 + 21);
    v18[0] = *(_QWORD *)(a2 + 16);
    BYTE4(v18[1]) = *(_BYTE *)(a2 + 28);
    if (BYTE4(v18[1]) <= 9u && ((1 << SBYTE4(v18[1])) & 0x33C) != 0)
    {
      v5 = (unint64_t *)v18[0];
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>,boost::spirit::unused_type &>::operator()(*(_QWORD *)(a1 + 8), (uint64_t)v17, (uint64_t)v8);
  _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorINSQ_13flexible_typeENS1W_9allocatorIS1Y_EEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INS1W_4pairIS1Y_S1Y_EENS1Z_IS2O_EEEEvES2C_SU_SU_EES1C_EELl2EEEEELl2EEENS_6fusion4consINSC_6actionIN11parser_impl13string_parserES1A_EENS33_INS34_INSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS23_NS24_IS1Y_EELl0EEEEEEELl2EEEEEEENS32_4nil_EEEEERSU_Ll2EEclES31_RKS3I_S3J_(*(uint64_t **)a1, (uint64_t)v8, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v16);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  return boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v18);
}

void sub_217F766B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::~cons((uint64_t)va);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(v3);
  _Unwind_Resume(a1);
}

void _ZNK5boost5proto6detail17reverse_fold_implINS0_6_stateENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINS8_13meta_compilerINS8_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprIS7_NS0_7argsns_5list2IRKNSJ_IS7_NSL_IRKNSJ_IS7_NSL_IRKNSJ_INS6_9subscriptENSL_IRNS8_8terminalINS8_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSO_7double_EdNS8_11unused_typeEEEEERKNS_7phoenix5actorINSI_10basic_exprINS6_6assignENSL_INSZ_INS8_9attributeILi0EEEEENSZ_INS8_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSJ_ISM_NSL_IRKNSN_INSO_9long_longEEES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNSC_4ruleIPKcFNSt3__16vectorINSQ_13flexible_typeENS1W_9allocatorIS1Y_EEEEvEKNSJ_INS6_8terminalENSK_4termINSO_9char_codeINSO_5spaceENS8_13char_encoding9iso8859_1EEEEELl0EEESU_SU_EES1C_EELl2EEEEELl2EEERKNSJ_ISM_NSL_IRNS1T_IS1V_FNS1X_INS1W_4pairIS1Y_S1Y_EENS1Z_IS2O_EEEEvES2C_SU_SU_EES1C_EELl2EEEEELl2EEENS_6fusion4consINSC_6actionIN11parser_impl13string_parserES1A_EENS33_INS34_INSC_10eps_parserENSZ_INS10_IS11_NSL_IS14_NSZ_INS10_IS23_NS24_IS1Y_EELl0EEEEEEELl2EEEEEEENS32_4nil_EEEEERSU_Ll2EEclES31_RKS3I_S3J_(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  char v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x24BDAC8D0];
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)v18, a2);
  v5 = a1[1];
  v6 = **(_QWORD **)v5;
  v7 = **(unsigned __int16 **)(v5 + 8);
  *(_QWORD *)&v8 = v6;
  *((_QWORD *)&v8 + 1) = v7;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v9, (uint64_t)v18);
  boost::proto::detail::reverse_fold_impl<boost::proto::_state,boost::proto::detail::reverse_fold_tree_<boost::proto::tagns_::tag::bitwise_or,boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>,boost::spirit::unused_type&,2l>::operator()(*a1, &v8, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v17);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v26);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v24);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18[0]);
}

void sub_217F76820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>::~cons((uint64_t)&a10);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::~cons((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void boost::proto::detail::reverse_fold_impl<boost::proto::_state,boost::proto::detail::reverse_fold_tree_<boost::proto::tagns_::tag::bitwise_or,boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>,boost::spirit::unused_type&,2l>::operator()(uint64_t a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8[2];
  void *v9;
  char v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19[2];
  char v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v18 = *a2;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)v19, (uint64_t)(a2 + 1));
  v5 = *(uint64_t ***)(a1 + 8);
  v6 = **v5;
  v7 = *(unsigned __int16 *)v5[1];
  *(_QWORD *)&v8[0] = v6;
  *((_QWORD *)&v8[0] + 1) = v7;
  v8[1] = v18;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v9, (uint64_t)v19);
  boost::proto::detail::reverse_fold_impl<boost::proto::_state,boost::proto::detail::reverse_fold_tree_<boost::proto::tagns_::tag::bitwise_or,boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>,boost::spirit::unused_type&,2l>::operator()(*(_QWORD **)a1, v8, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v17);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v27);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v26);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v24);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19[0]);
}

void sub_217F769AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>::~cons((uint64_t)&a11);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>::~cons((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void boost::proto::detail::reverse_fold_impl<boost::proto::_state,boost::proto::detail::reverse_fold_tree_<boost::proto::tagns_::tag::bitwise_or,boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>,boost::spirit::unused_type&,2l>::operator()(_QWORD *a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v5;
  __int16 v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  void *v11[2];
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  void *v22[2];
  char v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v20 = *a2;
  v21 = v5;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)v22, (uint64_t)(a2 + 2));
  v8 = HIBYTE(**(_WORD **)(a1[1] + 8));
  v7 = **(_WORD **)(a1[1] + 8) << 8;
  v9 = v20;
  v10 = v21;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)v11, (uint64_t)v22);
  v6 = **(_WORD **)(*a1 + 8);
  *(_BYTE *)(a3 + 2) = HIBYTE(v6);
  *(_WORD *)a3 = v6 << 8;
  *(_WORD *)(a3 + 8) = v7;
  *(_BYTE *)(a3 + 10) = v8;
  *(_OWORD *)(a3 + 16) = v9;
  *(_OWORD *)(a3 + 32) = v10;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(a3 + 48, (uint64_t)v11);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v19);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11[0]);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v30);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v29);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v28);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v27);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22[0]);
}

void sub_217F76B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)&a10);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>::~cons((uint64_t)&a51);
  _Unwind_Resume(a1);
}

uint64_t boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons(uint64_t a1)
{
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(a1 + 304);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(a1 + 232);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 176);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 136);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 96);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS17_6tagns_3tag6assignENS17_7argsns_5list2INS16_INS6_9attributeILi0EEEEENS16_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INS10_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1N_EENS9_INS10_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorISB_NS1U_9allocatorISB_EEEEvEKNS18_4exprINS1B_8terminalENS1D_4termISQ_EELl0EEENS6_11unused_typeES26_EEEES1N_EENS9_INS10_INS1S_IKNS1T_IS2_FNS1V_INS1U_4pairISB_SB_EENS1W_IS2C_EEEEvES25_S26_S26_EEEES1N_EENS9_INS10_IN11parser_impl13string_parserES1N_EENS9_INS10_INSJ_10eps_parserENS16_INS19_IS1C_NS1E_IS1H_NS16_INS19_IS21_NS22_ISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS36_EE5valueEiE4typeE(uint64_t (***a1)(), __int16 *a2))()
{
  __int128 v3;
  __int16 v5;
  char v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 2);
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 10);
  v3 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 1);
  v10 = v3;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v11, (uint64_t)(a2 + 24));
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v19);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  return a1;
}

void sub_217F76D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v3;
  __int16 v5;
  char v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  v5 = *(_WORD *)a2;
  v6 = *(_BYTE *)(a2 + 2);
  v7 = *(_WORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 10);
  v3 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  v10 = v3;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v11, a2 + 48);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(a1, &v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v19);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  return a1;
}

void sub_217F76E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), __int16 *a2)
{
  __int128 v3;
  int v4;
  uint64_t (**v5)();
  __int16 v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 2);
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 10);
  v3 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 1);
  v11 = v3;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v12, (uint64_t)(a2 + 24));
  v4 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v6, (uint64_t *)a1 + 1);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v20);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  if (v4)
    v5 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v5 = 0;
  *a1 = v5;
}

void sub_217F76F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

BOOL boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(std::string **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string *v5;
  _QWORD v7[4];

  v5 = *a1;
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  return boost::fusion::any<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>,boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>>(v5, (uint64_t)v7);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 v5;
  uint64_t v6;
  __int16 v8;
  char v9;
  __int16 v10;
  char v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  char v15;
  void *__p;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x24BDAC8D0];
  v8 = *(_WORD *)a2;
  v9 = *(_BYTE *)(a2 + 2);
  v10 = *(_WORD *)(a2 + 8);
  v11 = *(_BYTE *)(a2 + 10);
  v5 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 16);
  v13 = v5;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v14, a2 + 48);
  v6 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(a1, &v8, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v22);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  if (v17 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14);
  return v6;
}

void sub_217F770A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  __int16 *v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(__int16 **)result;
      v6 = operator new();
      v7 = *v5;
      *(_BYTE *)(v6 + 2) = *((_BYTE *)v5 + 2);
      *(_WORD *)v6 = v7;
      LOBYTE(v7) = *((_BYTE *)v5 + 10);
      *(_WORD *)(v6 + 8) = v5[4];
      *(_BYTE *)(v6 + 10) = v7;
      *(_OWORD *)(v6 + 16) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(v6 + 32) = *((_OWORD *)v5 + 2);
      result = boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(v6 + 48, (uint64_t)(v5 + 24));
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v8 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(v8 + 312);
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v8 + 240);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 184);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 144);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 104);
        if (*(char *)(v8 + 95) < 0)
          operator delete(*(void **)(v8 + 72));
        if (*(char *)(v8 + 71) < 0)
          operator delete(*(void **)(v8 + 48));
        result = MEMORY[0x219A19A08](v8, 0x10F2C40F54C5DD6);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CB60DLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CB60DLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F77240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C40F54C5DD6);
  _Unwind_Resume(a1);
}

BOOL boost::fusion::any<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>,boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>>(std::string *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void **v5;
  uint64_t v6;

  v3 = *(uint64_t **)a2;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(void ***)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  return (boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((uint64_t)a1, *(uint64_t **)a2, v4, (uint64_t)v5, v6) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((uint64_t)&a1->__r_.__value_.__l.__size_, v3, v4, (uint64_t)v5, v6) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((uint64_t)&a1->__r_.__value_.__r.__words[2], v3, (uint64_t)v4, v5) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((uint64_t)&a1[1].__r_.__value_.__l.__size_, v3,
            (uint64_t)v4,
            v5) & 1) != 0
      || (boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 2, (unsigned __int8 **)v3, (unsigned __int8 **)v4, (uint64_t)v5, v6) & 1) != 0|| boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((uint64_t)&a1[12].__r_.__value_.__l.__size_, (unsigned __int8 **)v3, (unsigned __int8 **)v4, (uint64_t)v5);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(uint64_t a1, __int16 *a2, uint64_t *a3)
{
  __int128 v5;
  __int16 v7;
  char v8;
  __int16 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = *((_BYTE *)a2 + 2);
  v9 = a2[4];
  v10 = *((_BYTE *)a2 + 10);
  v5 = *((_OWORD *)a2 + 2);
  v11 = *((_OWORD *)a2 + 1);
  v12 = v5;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v13, (uint64_t)(a2 + 24));
  boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_functor<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v7, a3);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v21);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  return 1;
}

void sub_217F77474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_functor<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t result;

  v5 = operator new();
  *(_WORD *)v5 = *(_WORD *)a2;
  *(_BYTE *)(v5 + 2) = *(_BYTE *)(a2 + 2);
  *(_WORD *)(v5 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(v5 + 10) = *(_BYTE *)(a2 + 10);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v6;
  result = boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(v5 + 48, a2 + 48);
  *a3 = v5;
  return result;
}

void sub_217F7750C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C40F54C5DD6);
  _Unwind_Resume(a1);
}

void boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  __int16 v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int16 v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(a2, (uint64_t)&v3);
  v13 = v3;
  v14 = v4;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v15, (uint64_t)&v5);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSZ_INS9_INSJ_12literal_charINSO_8standardELb0ELb0EEENS9_IS22_SD_EEEEEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES2L_((uint64_t *)(a1 + 32), (uint64_t)&v13);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  if (v18 < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
}

void sub_217F77628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a45);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSZ_INS9_INSJ_12literal_charINSO_8standardELb0ELb0EEENS9_IS22_SD_EEEEEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES2L_(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  __int128 v5;
  __int16 v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15[4])();

  v5 = *(_OWORD *)a2;
  v6 = *(_WORD *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, a2 + 24);
  v3 = (uint64_t *)_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSZ_INS9_INSJ_12literal_charINSO_8standardELb0ELb0EEENS9_IS22_SD_EEEEEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2K_EE5valueEiE4typeE(v15, &v5);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v3, a1);
  boost::function0<void>::~function0((uint64_t *)v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  return a1;
}

void sub_217F77700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  boost::function0<void>::~function0((uint64_t *)(v9 - 64));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(a1 + 216);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 160);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 120);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 80);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int16 v4;
  void *v5;
  char v6;
  void *__p;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  boost::proto::detail::reverse_fold_impl<boost::proto::make<boost::fusion::nil_>,boost::proto::detail::reverse_fold_tree_<boost::proto::tagns_::tag::bitwise_or,boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&,2l>::operator()(a1, (uint64_t)&v3);
  *(_OWORD *)a2 = v3;
  *(_WORD *)(a2 + 16) = v4;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(a2 + 24, (uint64_t)&v5);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5);
}

void sub_217F7781C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::proto::detail::reverse_fold_impl<boost::proto::make<boost::fusion::nil_>,boost::proto::detail::reverse_fold_tree_<boost::proto::tagns_::tag::bitwise_or,boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&,2l>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t **v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::fusion::nil_,boost::spirit::unused_type &>::operator()(a1[1], (uint64_t)v9);
  v4 = *(uint64_t ***)*a1;
  v5 = **(_BYTE **)(**(_QWORD **)(*a1 + 8) + 8);
  v6 = ****(_BYTE ****)(*a1 + 8);
  v7 = **v4;
  v8 = *(unsigned __int16 *)v4[1];
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 17) = v5;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(a2 + 24, (uint64_t)v9);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_217F778F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::fusion::nil_,boost::spirit::unused_type &>::operator()(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *v3[2];
  char v4;
  void *__p;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  boost::spirit::detail::make_action<boost::spirit::qi::domain,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type &>::operator()(a1, (uint64_t)v3);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(a2, (uint64_t)v3);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v7);
  if (v6 < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_217F77998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSZ_INS9_INSJ_12literal_charINSO_8standardELb0ELb0EEENS9_IS22_SD_EEEEEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2K_EE5valueEiE4typeE(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4;
  __int16 v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *((_WORD *)a2 + 8);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, (uint64_t)a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F77A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v4;
  __int16 v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = 0;
  v4 = *(_OWORD *)a2;
  v5 = *(_WORD *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, &v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F77B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), __int128 *a2)
{
  int v3;
  uint64_t (**v4)();
  __int128 v5;
  __int16 v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  v6 = *((_WORD *)a2 + 8);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, (uint64_t)a2 + 24);
  v3 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v5, (uint64_t *)a1 + 1);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v4 = 0;
  *a1 = v4;
}

void sub_217F77BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(std::string **a1, unsigned __int8 **a2, unsigned __int8 **a3, unsigned __int8 **a4, unsigned __int8 **a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  __int128 v7;
  __int16 v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *(_OWORD *)a2;
  v8 = *(_WORD *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v9, a2 + 24);
  v5 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, &v7, a3);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9);
  return v5;
}

void sub_217F77CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      *(_OWORD *)v6 = *(_OWORD *)v5;
      *(_BYTE *)(v6 + 16) = *(_BYTE *)(v5 + 16);
      *(_BYTE *)(v6 + 17) = *(_BYTE *)(v5 + 17);
      result = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(v6 + 24, v5 + 24);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v7 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v7 + 216);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 160);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 120);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 80);
        if (*(char *)(v7 + 71) < 0)
          operator delete(*(void **)(v7 + 48));
        if (*(char *)(v7 + 47) < 0)
          operator delete(*(void **)(v7 + 24));
        result = MEMORY[0x219A19A08](v7, 0x10F2C406BA737B4);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CB971 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CB971 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F77E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C406BA737B4);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(std::string *a1, unsigned __int8 **a2, unsigned __int8 **a3, unsigned __int8 **a4, unsigned __int8 **a5)
{
  if ((boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((uint64_t)a1, a2, a3, a4, a5) & 1) != 0)return 1;
  else
    return boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 1, a2, a3, (uint64_t)a4, (uint64_t)a5);
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, unsigned __int8 **a4, unsigned __int8 **a5)
{
  uint64_t result;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v11 = *a2;
  result = boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1, (uint64_t *)&v11, (uint64_t)a3, (uint64_t)a4);
  if ((_DWORD)result)
  {
    v12 = v11;
    result = boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((unsigned __int8 *)(a1 + 16), &v12, a3, a4, a5);
    if ((_DWORD)result)
    {
      *a2 = v11;
      return 1;
    }
  }
  return result;
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _QWORD *v39;
  char v40;
  _BYTE v41[9];
  _QWORD v42[2];
  void **v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v43 = 0;
  LODWORD(v44) = 0;
  BYTE4(v44) = 0;
  *(_QWORD *)((char *)v42 + 5) = 0;
  v42[0] = 0;
  boost::initialized<turi::flexible_type>::wrapper::~wrapper((uint64_t)&v43);
  v7 = *a2;
  if (boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>((uint64_t *)a1))
  {
    v40 = 1;
    v39 = v42;
    v43 = (void **)(a1 + 8);
    v44 = &v39;
    v45 = a4;
    v46 = &v40;
    boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<turi::flexible_type &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)v41, a1 + 8, (uint64_t)&v43);
    if (v40)
    {
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *a2 = v7;
    }
  }
  else
  {
    v8 = 0;
  }
  switch(BYTE4(v42[1]))
  {
    case 2:
      v9 = (unint64_t *)v42[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v42[0];
        if (v42[0])
        {
          if (*(char *)(v42[0] + 31) < 0)
            operator delete(*(void **)(v42[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_47;
        }
      }
      break;
    case 3:
      v15 = (unint64_t *)v42[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v42[0];
        if (v42[0])
        {
          v19 = *(void **)(v42[0] + 8);
          if (v19)
          {
            *(_QWORD *)(v42[0] + 16) = v19;
            operator delete(v19);
          }
          v13 = v18;
          v14 = 0x1080C409938AC02;
          goto LABEL_47;
        }
      }
      break;
    case 4:
      v20 = (unint64_t *)v42[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v42[0];
        if (v42[0])
        {
          v43 = (void **)(v42[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
          goto LABEL_31;
        }
      }
      break;
    case 5:
      v24 = (unint64_t *)v42[0];
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v23 = v42[0];
        if (v42[0])
        {
          v43 = (void **)(v42[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_31:
          v13 = v23;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_47;
        }
      }
      break;
    case 8:
      v27 = (unint64_t *)v42[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v42[0];
        if (v42[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v42[0] + 16));
          v13 = v30;
          v31 = -235920773;
          goto LABEL_46;
        }
      }
      break;
    case 9:
      v32 = (unint64_t *)v42[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = v42[0];
        if (v42[0])
        {
          v36 = *(void **)(v42[0] + 48);
          if (v36)
          {
            *(_QWORD *)(v42[0] + 56) = v36;
            operator delete(v36);
          }
          v37 = *(void **)(v35 + 24);
          if (v37)
          {
            *(_QWORD *)(v35 + 32) = v37;
            operator delete(v37);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35 + 8);
          v13 = v35;
          v31 = 2071181815;
LABEL_46:
          v14 = v31 | 0x1030C4000000000;
LABEL_47:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_217F78240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  switch(a14)
  {
    case 2:
      v15 = (unint64_t *)a12;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (v17)
        goto LABEL_39;
      v18 = a12;
      if (!a12)
        goto LABEL_39;
      if (*(char *)(a12 + 31) < 0)
        operator delete(*(void **)(a12 + 8));
      v19 = (_QWORD *)v18;
      v20 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v29 = (unint64_t *)a12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_39;
      v32 = a12;
      if (!a12)
        goto LABEL_39;
      v33 = *(void **)(a12 + 8);
      if (v33)
      {
        *(_QWORD *)(a12 + 16) = v33;
        operator delete(v33);
      }
      v19 = (_QWORD *)v32;
      v20 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v21 = (unint64_t *)a12;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (v23)
        goto LABEL_39;
      v24 = a12;
      if (!a12)
        goto LABEL_39;
      a11 = a12 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
      goto LABEL_31;
    case 5:
      v34 = (unint64_t *)a12;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_39;
      v24 = a12;
      if (!a12)
        goto LABEL_39;
      a11 = a12 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
LABEL_31:
      v19 = (_QWORD *)v24;
      v20 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v37 = (unint64_t *)a12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_39;
      v40 = a12;
      if (!a12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a12 + 16));
      v19 = (_QWORD *)v40;
      v28 = -235920773;
      goto LABEL_37;
    case 9:
      v25 = (unint64_t *)a12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27 || !a12)
        goto LABEL_39;
      v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a12);
      v28 = 2071181815;
LABEL_37:
      v20 = v28 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v19, v20);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

BOOL boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)(v1 + 32);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  else
    v4 = 0;
  return v4
      && (boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v2) & 1) != 0;
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(unsigned __int8 *a1, unsigned __int8 **a2, unsigned __int8 **a3, unsigned __int8 **a4, unsigned __int8 **a5)
{
  unsigned __int8 **v7[4];

  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  if ((boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>(v7, a1) & 1) != 0)return 1;
  else
    return boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>(v7, a1 + 1);
}

uint64_t boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>(unsigned __int8 ***a1, unsigned __int8 *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unsigned __int8 *v7;
  unsigned int v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = **a1;
  v5 = *v3;
  if (v4 == *v3)
    return 0;
  v6 = *v4;
  if ((boost::spirit::char_encoding::iso8859_1_char_types[*v4] & 0x40) != 0)
  {
    v7 = v4 + 1;
    while (1)
    {
      *v2 = v7;
      v5 = *v3;
      if (v7 == *v3)
        return 0;
      v8 = *v7++;
      v6 = v8;
      if ((boost::spirit::char_encoding::iso8859_1_char_types[v8] & 0x40) == 0)
      {
        v4 = v7 - 1;
        break;
      }
    }
  }
  if (v4 == v5 || *a2 != v6)
    return 0;
  *v2 = v4 + 1;
  return 1;
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v6;
  __int16 v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *((_WORD *)a2 + 8);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v8, (uint64_t)a2 + 24);
  boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_functor<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v6, a3);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
  return 1;
}

void sub_217F785B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_functor<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = operator new();
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_WORD *)(v5 + 16) = *(_WORD *)(a2 + 16);
  result = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(v5 + 24, a2 + 24);
  *a3 = v5;
  return result;
}

void sub_217F78628(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C406BA737B4);
  _Unwind_Resume(a1);
}

void boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  char v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(a2, (uint64_t)&v3);
  v13 = v3;
  v14 = v4;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v15, (uint64_t)&v5);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_12literal_charINSO_8standardELb0ELb0EEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES2I_((uint64_t *)(a1 + 32), (uint64_t)&v13);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  if (v18 < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
}

void sub_217F78744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a45);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_12literal_charINSO_8standardELb0ELb0EEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES2I_(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  __int128 v5;
  char v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15[4])();

  v5 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, a2 + 24);
  v3 = (uint64_t *)_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_12literal_charINSO_8standardELb0ELb0EEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2H_EE5valueEiE4typeE(v15, &v5);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v3, a1);
  boost::function0<void>::~function0((uint64_t *)v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  return a1;
}

void sub_217F7881C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  boost::function0<void>::~function0((uint64_t *)(v9 - 64));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  char v4;
  void *v5;
  char v6;
  void *__p;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  boost::proto::detail::reverse_fold_impl<boost::proto::make<boost::fusion::nil_>,boost::proto::detail::reverse_fold_tree_<boost::proto::tagns_::tag::bitwise_or,boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&,2l>::operator()(a1, (uint64_t)&v3);
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 16) = v4;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(a2 + 24, (uint64_t)&v5);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5);
}

void sub_217F788D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::proto::detail::reverse_fold_impl<boost::proto::make<boost::fusion::nil_>,boost::proto::detail::reverse_fold_tree_<boost::proto::tagns_::tag::bitwise_or,boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&,2l>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t **v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8[2];
  char v9;
  void *__p;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::fusion::nil_,boost::spirit::unused_type &>::operator()(a1[1], (uint64_t)v8);
  v4 = *(uint64_t ***)*a1;
  v5 = ***(_BYTE ***)(*a1 + 8);
  v6 = **v4;
  v7 = *(unsigned __int16 *)v4[1];
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v5;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(a2 + 24, (uint64_t)v8);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_217F789A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_12literal_charINSO_8standardELb0ELb0EEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2H_EE5valueEiE4typeE(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4;
  char v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, (uint64_t)a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F78A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v4;
  char v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = 0;
  v4 = *(_OWORD *)a2;
  v5 = *(_BYTE *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, &v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F78B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), __int128 *a2)
{
  int v3;
  uint64_t (**v4)();
  __int128 v5;
  char v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  v6 = *((_BYTE *)a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, (uint64_t)a2 + 24);
  v3 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v5, (uint64_t *)a1 + 1);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v4 = 0;
  *a1 = v4;
}

void sub_217F78BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(std::string **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  __int128 v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *(_OWORD *)a2;
  v8 = *(_BYTE *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v9, a2 + 24);
  v5 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, &v7, a3);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9);
  return v5;
}

void sub_217F78CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      *(_OWORD *)v6 = *(_OWORD *)v5;
      *(_BYTE *)(v6 + 16) = *(_BYTE *)(v5 + 16);
      result = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(v6 + 24, v5 + 24);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v7 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v7 + 216);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 160);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 120);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 80);
        if (*(char *)(v7 + 71) < 0)
          operator delete(*(void **)(v7 + 48));
        if (*(char *)(v7 + 47) < 0)
          operator delete(*(void **)(v7 + 24));
        result = MEMORY[0x219A19A08](v7, 0x10F2C4099367000);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CBBF2 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CBBF2 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F78E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C4099367000);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(std::string *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  if ((boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((uint64_t)a1, (uint64_t *)a2, a3, a4) & 1) != 0)return 1;
  else
    return boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  v10 = (unsigned __int8 *)*a2;
  result = boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1, (uint64_t *)&v10, (uint64_t)a3, a4);
  if ((_DWORD)result)
  {
    v8 = *a3;
    if (v10 == *a3)
      return 0;
    v9 = v10;
    while ((boost::spirit::char_encoding::iso8859_1_char_types[*v9] & 0x40) != 0)
    {
      if (++v9 == v8)
        return 0;
    }
    if (v9 == v8 || *(unsigned __int8 *)(a1 + 16) != *v9)
    {
      return 0;
    }
    else
    {
      *a2 = (uint64_t)v10;
      return 1;
    }
  }
  return result;
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v8, (uint64_t)a2 + 24);
  boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_functor<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v6, a3);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
  return 1;
}

void sub_217F79020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_functor<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = operator new();
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(a2 + 16);
  result = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(v5 + 24, a2 + 24);
  *a3 = v5;
  return result;
}

void sub_217F79098(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C4099367000);
  _Unwind_Resume(a1);
}

void boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  __int16 v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int16 v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(a2, (uint64_t)&v3);
  v13 = v3;
  v14 = v4;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v15, (uint64_t)&v5);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_17no_skip_directiveINSZ_INS9_INSJ_12literal_charINSO_8standardELb0ELb0EEENS9_IS23_NS9_ISR_SD_EEEEEEEEEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES2O_((uint64_t *)(a1 + 32), (uint64_t)&v13);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  if (v18 < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
}

void sub_217F791B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a45);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_17no_skip_directiveINSZ_INS9_INSJ_12literal_charINSO_8standardELb0ELb0EEENS9_IS23_NS9_ISR_SD_EEEEEEEEEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES2O_(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  __int128 v5;
  __int16 v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15[4])();

  v5 = *(_OWORD *)a2;
  v6 = *(_WORD *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, a2 + 24);
  v3 = (uint64_t *)_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_17no_skip_directiveINSZ_INS9_INSJ_12literal_charINSO_8standardELb0ELb0EEENS9_IS23_NS9_ISR_SD_EEEEEEEEEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2N_EE5valueEiE4typeE(v15, &v5);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v3, a1);
  boost::function0<void>::~function0((uint64_t *)v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  return a1;
}

void sub_217F7928C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  boost::function0<void>::~function0((uint64_t *)(v9 - 64));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int16 v4;
  void *v5;
  char v6;
  void *__p;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  _ZNK5boost5proto6detail17reverse_fold_implINS0_4makeINS_6fusion4nil_EEENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINSB_13meta_compilerINSB_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprISA_NS0_7argsns_5list2IRKNSM_INS9_11shift_rightENSO_IRKNSM_INS9_9subscriptENSO_IRNSF_4ruleIPKcFN4turi13flexible_typeEvEKNSM_INS9_8terminalENSN_4termINSB_3tag9char_codeINSZ_5spaceENSB_13char_encoding9iso8859_1EEEEELl0EEENSB_11unused_typeES18_EERKNS_7phoenix5actorINSL_10basic_exprINS9_6assignENSO_INS1C_INSB_9attributeILi0EEEEENS1C_INSB_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSM_INS9_10address_ofENSN_5list1IRKNSM_ISQ_NSO_IRKNSM_ISX_NSY_INSZ_7no_skipEEELl0EEERKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISX_NSY_INSB_11terminal_exINS10_INSZ_5char_ENS12_8standardEEENS4_6vectorIJcEEEEEEELl0EEES2B_EELl2EEERS17_EELl2EEEEELl2EEEEELl1EEEEELl2EEERKNSM_ISQ_NSO_IRNSM_ISX_NSY_INS21_IN11parser_impl3tag17restricted_stringENS25_IJNS2X_13parser_configEEEEEEEELl0EEES1P_EELl2EEEEELl2EEERKN4mpl_5void_ERS18_Ll2EEclES3D_S3H_S3I_(a1, (uint64_t)&v3);
  *(_OWORD *)a2 = v3;
  *(_WORD *)(a2 + 16) = v4;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(a2 + 24, (uint64_t)&v5);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5);
}

void sub_217F79348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

void _ZNK5boost5proto6detail17reverse_fold_implINS0_4makeINS_6fusion4nil_EEENS1_18reverse_fold_tree_INS0_6tagns_3tag10bitwise_orENS_6spirit6detail18make_binary_helperINSB_13meta_compilerINSB_2qi6domainEE12meta_grammarEEEEERKNS0_7exprns_4exprISA_NS0_7argsns_5list2IRKNSM_INS9_11shift_rightENSO_IRKNSM_INS9_9subscriptENSO_IRNSF_4ruleIPKcFN4turi13flexible_typeEvEKNSM_INS9_8terminalENSN_4termINSB_3tag9char_codeINSZ_5spaceENSB_13char_encoding9iso8859_1EEEEELl0EEENSB_11unused_typeES18_EERKNS_7phoenix5actorINSL_10basic_exprINS9_6assignENSO_INS1C_INSB_9attributeILi0EEEEENS1C_INSB_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSM_INS9_10address_ofENSN_5list1IRKNSM_ISQ_NSO_IRKNSM_ISX_NSY_INSZ_7no_skipEEELl0EEERKNSM_ISA_NSO_IRKNSM_ISA_NSO_IRKNSM_ISX_NSY_INSB_11terminal_exINS10_INSZ_5char_ENS12_8standardEEENS4_6vectorIJcEEEEEEELl0EEES2B_EELl2EEERS17_EELl2EEEEELl2EEEEELl1EEEEELl2EEERKNSM_ISQ_NSO_IRNSM_ISX_NSY_INS21_IN11parser_impl3tag17restricted_stringENS25_IJNS2X_13parser_configEEEEEEEELl0EEES1P_EELl2EEEEELl2EEERKN4mpl_5void_ERS18_Ll2EEclES3D_S3H_S3I_(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t **v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  boost::spirit::detail::make_binary_helper<boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::fusion::nil_,boost::spirit::unused_type &>::operator()(a1[1], (uint64_t)v9);
  v4 = *(uint64_t ***)*a1;
  v5 = **(_BYTE **)(**(_QWORD **)(**(_QWORD **)(*a1 + 8) + 8) + 8);
  v6 = ****(_BYTE ****)(**(_QWORD **)(*a1 + 8) + 8);
  v7 = **v4;
  v8 = *(unsigned __int16 *)v4[1];
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 17) = v5;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(a2 + 24, (uint64_t)v9);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_217F79428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSL_5spaceENS6_13char_encoding9iso8859_1EEEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS15_6tagns_3tag8terminalENS15_7argsns_4termISQ_EELl0EEENS6_11unused_typeES1G_EEEENS_7phoenix5actorINS16_10basic_exprINS19_6assignENS1B_5list2INS1L_INS6_9attributeILi0EEEEENS1L_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_17no_skip_directiveINSZ_INS9_INSJ_12literal_charINSO_8standardELb0ELb0EEENS9_IS23_NS9_ISR_SD_EEEEEEEEEEEESD_EEEEEENS9_INS11_IN11parser_impl13string_parserES1X_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2N_EE5valueEiE4typeE(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4;
  __int16 v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *((_WORD *)a2 + 8);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, (uint64_t)a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F794DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v4;
  __int16 v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = 0;
  v4 = *(_OWORD *)a2;
  v5 = *(_WORD *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, &v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F79590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), __int128 *a2)
{
  int v3;
  uint64_t (**v4)();
  __int128 v5;
  __int16 v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  v6 = *((_WORD *)a2 + 8);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, (uint64_t)a2 + 24);
  v3 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v5, (uint64_t *)a1 + 1);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v4 = 0;
  *a1 = v4;
}

void sub_217F79660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(std::string **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      *(_OWORD *)v6 = *(_OWORD *)v5;
      *(_BYTE *)(v6 + 16) = *(_BYTE *)(v5 + 16);
      *(_BYTE *)(v6 + 17) = *(_BYTE *)(v5 + 17);
      result = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(v6 + 24, v5 + 24);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v7 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v7 + 216);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 160);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 120);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 80);
        if (*(char *)(v7 + 71) < 0)
          operator delete(*(void **)(v7 + 48));
        if (*(char *)(v7 + 47) < 0)
          operator delete(*(void **)(v7 + 24));
        result = MEMORY[0x219A19A08](v7, 0x10F2C406BA737B4);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CBE56 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CBE56 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F79804(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C406BA737B4);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(std::string *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  if ((boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>((uint64_t)a1, a2, a3, a4) & 1) != 0)return 1;
  else
    return boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unsigned __int8 *v10;

  v10 = *a2;
  result = boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1, (uint64_t *)&v10, (uint64_t)a3, a4);
  if ((_DWORD)result)
  {
    if (v10 != *a3
      && ((v8 = *v10, *(unsigned __int8 *)(a1 + 16) != (_DWORD)v8)
        ? (v9 = *(unsigned __int8 *)(a1 + 17) == (_DWORD)v8)
        : (v9 = 1),
          v9 || (boost::spirit::char_encoding::iso8859_1_char_types[v8] & 0x40) != 0))
    {
      *a2 = v10;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,1l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l>>(uint64_t a1, char ***a2)
{
  char v2;
  uint64_t **v3;
  uint64_t v4;
  char v6[8];
  uint64_t v7;
  char v8;
  char v9;

  v2 = *(_BYTE *)a2[1];
  v3 = *(uint64_t ***)(*a2)[1];
  v4 = **v3;
  LOBYTE(v3) = **(_BYTE **)(*(_QWORD *)v3[1][1] + 8);
  v6[0] = ***a2;
  v7 = v4;
  v8 = (char)v3;
  v9 = v2;
  return _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorINSA_4pairIN4turi13flexible_typeESE_EENSA_9allocatorISF_EEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSS_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSQ_6detail13parser_binderINSQ_8sequenceINS9_INSQ_12literal_charINSV_8standardELb1ELb0EEENS9_INSQ_8optionalINSQ_4listINSQ_9referenceIKNSQ_4ruleIS2_FSF_vEKNS_5proto7exprns_4exprINS1F_6tagns_3tag8terminalENS1F_7argsns_4termISX_EELl0EEENS6_11unused_typeES1Q_EEEENSQ_17no_skip_directiveINSQ_11alternativeINS9_INS16_INS9_INSQ_6kleeneISY_EENS9_INS17_IS18_Lb0ELb0EEESK_EEEEEENS9_ISY_SK_EEEEEEEEEEEENS9_IS19_SK_EEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERS12_E4typeES2H_((uint64_t *)(a1 + 32), v6);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorINSA_4pairIN4turi13flexible_typeESE_EENSA_9allocatorISF_EEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSS_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSQ_6detail13parser_binderINSQ_8sequenceINS9_INSQ_12literal_charINSV_8standardELb1ELb0EEENS9_INSQ_8optionalINSQ_4listINSQ_9referenceIKNSQ_4ruleIS2_FSF_vEKNS_5proto7exprns_4exprINS1F_6tagns_3tag8terminalENS1F_7argsns_4termISX_EELl0EEENS6_11unused_typeES1Q_EEEENSQ_17no_skip_directiveINSQ_11alternativeINS9_INS16_INS9_INSQ_6kleeneISY_EENS9_INS17_IS18_Lb0ELb0EEESK_EEEEEENS9_ISY_SK_EEEEEEEEEEEENS9_IS19_SK_EEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERS12_E4typeES2H_(uint64_t *a1, char *a2)
{
  char v3;
  uint64_t v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  uint64_t v9[4];

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_WORD *)a2 + 8);
  v6 = a2[24];
  v7 = operator new();
  *(_BYTE *)v7 = v3;
  *(_QWORD *)(v7 + 8) = v4;
  *(_WORD *)(v7 + 16) = v5;
  *(_BYTE *)(v7 + 24) = v6;
  v9[0] = (uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>)::stored_vtable;
  v9[1] = v7;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v9, a1);
  boost::function0<void>::~function0(v9);
  return a1;
}

void sub_217F79A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      result = operator new();
      *(_BYTE *)result = *(_BYTE *)v5;
      *(_QWORD *)(result + 8) = *(_QWORD *)(v5 + 8);
      *(_BYTE *)(result + 16) = *(_BYTE *)(v5 + 16);
      *(_BYTE *)(result + 17) = *(_BYTE *)(v5 + 17);
      *(_BYTE *)(result + 24) = *(_BYTE *)(v5 + 24);
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x1060C40861DB1C4);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CC10ELL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CC10ELL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  return boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(*a1, a2, a3, a4, a5, *a4);
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t *v10[4];
  uint64_t v11;

  v9 = *a2;
  v10[0] = &v9;
  v10[1] = a3;
  v10[2] = a4;
  v10[3] = a5;
  v11 = a6;
  if ((boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::spirit::unused_type const>((unsigned __int8 ***)v10, (unsigned __int8 *)a1) & 1) != 0|| boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(v10, (uint64_t *)(a1 + 8), v11)|| (boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::spirit::unused_type const>((unsigned __int8 ***)v10, (unsigned __int8 *)(a1 + 24)) & 1) != 0)
  {
    return 0;
  }
  *a2 = v9;
  return 1;
}

uint64_t boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::spirit::unused_type const>(unsigned __int8 ***a1, unsigned __int8 *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = **a1;
  v5 = *v3;
  if (v4 == *v3)
    return 1;
  v6 = *v4;
  if ((boost::spirit::char_encoding::iso8859_1_char_types[*v4] & 0x40) != 0)
  {
    v7 = v4 + 1;
    while (1)
    {
      *v2 = v7;
      v5 = *v3;
      if (v7 == *v3)
        return 1;
      v8 = *v7++;
      v6 = v8;
      if ((boost::spirit::char_encoding::iso8859_1_char_types[v8] & 0x40) == 0)
      {
        v4 = v7 - 1;
        break;
      }
    }
  }
  if (v4 == v5 || *a2 != v6)
    return 1;
  result = 0;
  *v2 = v4 + 1;
  return result;
}

uint64_t boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = a1[3];
  v10 = **a1;
  v6 = &v10;
  v7 = *(_OWORD *)(a1 + 1);
  v8 = v4;
  v9 = a3;
  if (boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,mpl_::BOOL_<false>>>(a2, (uint64_t)&v6))
  {
    *v3 = v10;
  }
  return 0;
}

BOOL boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,mpl_::BOOL_<false>>>(uint64_t *a1, uint64_t a2)
{
  _BOOL4 v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,mpl_::BOOL_<false>>::dispatch_container<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>>(a2, a1);
  if (!v4)
  {
    do
    {
      v5 = *(unsigned __int8 ***)a2;
      v6 = *(unsigned __int8 ***)(a2 + 8);
      v7 = **(_QWORD **)a2;
      v8 = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 24);
    }
    while (boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::detail::unused_skipper<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const>((uint64_t)(a1 + 1), v5, v6, v8, (uint64_t)&v10)&& !boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,mpl_::BOOL_<false>>::dispatch_container<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>>(a2, a1));
    **(_QWORD **)a2 = v7;
  }
  return !v4;
}

BOOL boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,mpl_::BOOL_<false>>::dispatch_container<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>>(uint64_t a1, uint64_t *a2)
{
  _BOOL4 v3;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v3 = boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::pair<turi::flexible_type,turi::flexible_type>>(a2);
  if (v3)
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::insert(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v5);
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v5);
  return !v3;
}

void sub_217F79E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::pair<turi::flexible_type,turi::flexible_type>>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)(v1 + 32);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::pair<turi::flexible_type,turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  else
    v4 = 0;
  return v4
      && (boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v2) & 1) != 0;
}

uint64_t *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::insert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = (uint64_t *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *(uint64_t **)a1;
    v11 = ((uint64_t)(v6 - *(_QWORD *)a1) >> 5) + 1;
    if (v11 >> 59)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = (a2 - (uint64_t)v10) >> 5;
    v13 = v8 - (_QWORD)v10;
    v14 = v13 >> 4;
    if (v13 >> 4 <= v11)
      v14 = ((uint64_t)(v6 - *(_QWORD *)a1) >> 5) + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[32 * v12];
    v20 = v19;
    v21 = &v16[32 * v15];
    std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::push_back[abi:ne180100](&v18, a3);
    v4 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer((uint64_t **)a1, &v18, v4);
    std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100](a2, a3);
    *(_QWORD *)(a1 + 8) = v4 + 4;
  }
  else
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__move_range(a1, a2, v6, a2 + 32);
    if (v4 <= a3)
      a3 += 4 * (*(_QWORD *)(a1 + 8) > (unint64_t)a3);
    std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)v4, a3);
  }
  return v4;
}

void sub_217F79FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(result + 8);
  v5 = (uint64_t *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_QWORD *)v6 = 0;
    *(_DWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 12) = 0;
    v7 = *v5;
    *(_QWORD *)(v6 + 5) = *(uint64_t *)((char *)v5 + 5);
    *(_QWORD *)v6 = v7;
    *(_BYTE *)(v6 + 12) = *((_BYTE *)v5 + 12);
    *((_BYTE *)v5 + 12) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = 0;
    *(_BYTE *)(v6 + 28) = 0;
    v8 = v5[2];
    *(_QWORD *)(v6 + 21) = *(uint64_t *)((char *)v5 + 21);
    *(_QWORD *)(v6 + 16) = v8;
    *(_BYTE *)(v6 + 28) = *((_BYTE *)v5 + 28);
    *((_BYTE *)v5 + 28) = 0;
    v6 += 32;
    v5 += 4;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v9 = v4 - 32;
    v10 = 32 * ((v4 - a4) >> 5);
    v11 = a2 - 32;
    do
    {
      result = std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v9, (uint64_t *)(v11 + v10));
      v9 -= 32;
      v10 -= 32;
    }
    while (v10);
  }
  return result;
}

uint64_t std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::push_back[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = (uint64_t *)a1[1];
    v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      v14 = v4 - *a1;
      v13 = v4 == *a1;
      v15 = a1[4];
      v16 = v14 >> 4;
      if (v13)
        v17 = 1;
      else
        v17 = v16;
      v32 = 0;
      v33 = v15;
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v15, v17);
      v20 = &v18[32 * (v17 >> 2)];
      v21 = a1[1];
      v22 = a1[2] - v21;
      if (v22)
      {
        v23 = &v20[v22];
        v24 = &v18[32 * (v17 >> 2)];
        do
        {
          *(_QWORD *)v24 = 0;
          *((_DWORD *)v24 + 2) = 0;
          v24[12] = 0;
          v25 = *(_QWORD *)v21;
          *(_QWORD *)(v24 + 5) = *(_QWORD *)(v21 + 5);
          *(_QWORD *)v24 = v25;
          v24[12] = *(_BYTE *)(v21 + 12);
          *(_BYTE *)(v21 + 12) = 0;
          *((_QWORD *)v24 + 2) = 0;
          *((_DWORD *)v24 + 6) = 0;
          v24[28] = 0;
          v26 = *(_QWORD *)(v21 + 16);
          *(_QWORD *)(v24 + 21) = *(_QWORD *)(v21 + 21);
          *((_QWORD *)v24 + 2) = v26;
          v24[28] = *(_BYTE *)(v21 + 28);
          *(_BYTE *)(v21 + 28) = 0;
          v24 += 32;
          v21 += 32;
        }
        while (v24 != v23);
        v27 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v27 = vdupq_n_s64(v21);
        v23 = &v18[32 * (v17 >> 2)];
      }
      v30 = *a1;
      *a1 = v18;
      a1[1] = v20;
      v31 = v27;
      v28 = a1[3];
      a1[2] = v23;
      a1[3] = &v18[32 * v19];
      v32 = v28;
      std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)&v30);
      v4 = a1[2];
    }
    else
    {
      v7 = v6 >> 5;
      v8 = v6 >> 5 < -1;
      v9 = (v6 >> 5) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      if (v5 == (uint64_t *)v4)
      {
        v12 = &v5[-4 * (v10 >> 1)];
      }
      else
      {
        do
        {
          std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)&v5[4 * v11], v5);
          v5 += 4;
        }
        while (v5 != (uint64_t *)v4);
        v4 = a1[1];
        v12 = &v5[4 * v11];
      }
      a1[1] = v4 + 32 * v11;
      a1[2] = v12;
      v4 = (uint64_t)v12;
    }
  }
  result = std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100](v4, a2);
  a1[2] += 32;
  return result;
}

uint64_t *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  result = (uint64_t *)a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = 0;
    do
    {
      v8 = &result[v7];
      v9 = &a3[v7];
      *(v8 - 4) = 0;
      *((_DWORD *)v8 - 6) = 0;
      *((_BYTE *)v8 - 20) = 0;
      v10 = a3[v7 - 4];
      *(uint64_t *)((char *)v8 - 27) = *(uint64_t *)((char *)&a3[v7 - 3] - 3);
      *(v8 - 4) = v10;
      *((_BYTE *)v8 - 20) = *((_BYTE *)&a3[v7 - 2] - 4);
      *((_BYTE *)v9 - 20) = 0;
      *(v8 - 2) = 0;
      *((_DWORD *)v8 - 2) = 0;
      *((_BYTE *)v8 - 4) = 0;
      v11 = a3[v7 - 2];
      *(uint64_t *)((char *)v8 - 11) = *(uint64_t *)((char *)&a3[v7 - 1] - 3);
      *(v8 - 2) = v11;
      *((_BYTE *)v8 - 4) = BYTE4(a3[v7 - 1]);
      *((_BYTE *)v9 - 4) = 0;
      v7 -= 4;
    }
    while (&a3[v7] != v5);
    v6 = &result[v7];
  }
  a2[1] = v6;
  v12 = a1[1];
  v13 = a2[2];
  if (v12 != a3)
  {
    do
    {
      *(_QWORD *)v13 = 0;
      *(_DWORD *)(v13 + 8) = 0;
      *(_BYTE *)(v13 + 12) = 0;
      v14 = *a3;
      *(_QWORD *)(v13 + 5) = *(uint64_t *)((char *)a3 + 5);
      *(_QWORD *)v13 = v14;
      *(_BYTE *)(v13 + 12) = *((_BYTE *)a3 + 12);
      *((_BYTE *)a3 + 12) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_DWORD *)(v13 + 24) = 0;
      *(_BYTE *)(v13 + 28) = 0;
      v15 = a3[2];
      *(_QWORD *)(v13 + 21) = *(uint64_t *)((char *)a3 + 21);
      *(_QWORD *)(v13 + 16) = v15;
      *(_BYTE *)(v13 + 28) = *((_BYTE *)a3 + 28);
      *((_BYTE *)a3 + 28) = 0;
      v13 += 32;
      a3 += 4;
    }
    while (a3 != v12);
    v6 = (uint64_t *)a2[1];
  }
  a2[2] = v13;
  v16 = *a1;
  *a1 = v6;
  a2[1] = v16;
  v17 = a1[1];
  a1[1] = (uint64_t *)a2[2];
  a2[2] = v17;
  v18 = a1[2];
  a1[2] = (uint64_t *)a2[3];
  a2[3] = v18;
  *a2 = a2[1];
  return result;
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::detail::unused_skipper<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unsigned __int8 **v7;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  if ((boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::detail::unused_skipper<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const>::operator()<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>(&v7, a1) & 1) == 0)
  {
    v5 = *v7;
    if (*v7 == *v8 || (boost::spirit::char_encoding::iso8859_1_char_types[*v5] & 0x40) == 0)
      return 0;
    *v7 = v5 + 1;
  }
  return 1;
}

uint64_t boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::detail::unused_skipper<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const>::operator()<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>(unsigned __int8 ***a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v2 = **a1;
  v3 = *a1[1];
  if (v2 != v3)
  {
    while ((boost::spirit::char_encoding::iso8859_1_char_types[*v2] & 0x40) != 0)
    {
      if (++v2 == v3)
      {
        v2 = *a1[1];
        break;
      }
    }
  }
  if (v2 == v3 || *(unsigned __int8 *)(a2 + 1) != *v2)
    return 0;
  **a1 = v2 + 1;
  return 1;
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__14pairIN4turi13flexible_typeESD_EENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSO_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSM_6detail13parser_binderINSM_8sequenceINS9_INSM_9referenceIKNSM_4ruleIS2_FSD_vEKNS_5proto7exprns_4exprINS16_6tagns_3tag8terminalENS16_7argsns_4termIST_EELl0EEENS6_11unused_typeES1H_EEEENS9_INSM_12literal_charINSR_8standardELb1ELb0EEENS9_IS1K_SG_EEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSY_E4typeES1X_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = a2[2];
  v6 = operator new();
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_QWORD *)(v6 + 16) = v5;
  v8[0] = (uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::pair<turi::flexible_type,turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>)::stored_vtable;
  v8[1] = v6;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v8, a1);
  boost::function0<void>::~function0(v8);
  return a1;
}

void sub_217F7A4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      result = operator new();
      *(_QWORD *)result = *(_QWORD *)v5;
      *(_BYTE *)(result + 8) = *(_BYTE *)(v5 + 8);
      *(_QWORD *)(result + 16) = *(_QWORD *)(v5 + 16);
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x1060C40C13665F2);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CC34ELL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CC34ELL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

BOOL boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::pair<turi::flexible_type,turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(uint64_t *a1, uint64_t *a2, unsigned __int8 **a3, unsigned __int8 **a4, unsigned __int8 **a5)
{
  return boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::pair<turi::flexible_type,turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::pair<turi::flexible_type,turi::flexible_type>>(*a1, a2, a3, a4, a5);
}

BOOL boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::pair<turi::flexible_type,turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,std::pair<turi::flexible_type,turi::flexible_type>>(uint64_t a1, uint64_t *a2, unsigned __int8 **a3, unsigned __int8 **a4, unsigned __int8 **a5)
{
  uint64_t v7;
  _BOOL8 result;
  unsigned __int8 **v9[4];
  uint64_t v10;

  v7 = *a2;
  v9[3] = a5;
  v10 = v7;
  v9[0] = (unsigned __int8 **)&v10;
  v9[1] = a3;
  v9[2] = a4;
  result = boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>((uint64_t *)a1);
  if (result)
  {
    if (boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::spirit::unused_type const>(v9, (unsigned __int8 *)(a1 + 8)))
    {
      return 0;
    }
    else
    {
      result = boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>((uint64_t *)(a1 + 16));
      if (result)
      {
        *a2 = v10;
        return 1;
      }
    }
  }
  return result;
}

uint64_t *boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l> const&>,2l>>(uint64_t a1, _BYTE ***a2)
{
  char v2;
  uint64_t ***v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  __int16 v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;

  v2 = *a2[1][1];
  v3 = (uint64_t ***)*((_QWORD *)*a2[1] + 1);
  v4 = ***v3;
  v5 = *(unsigned __int16 *)(*v3)[1] | ((unint64_t)*((unsigned __int8 *)(*v3)[1] + 2) << 16);
  LOBYTE(v3) = *(_BYTE *)v3[1];
  v6 = **(_BYTE **)*a2[1];
  v7 = *(*a2)[1];
  LOBYTE(v9) = ***a2;
  HIBYTE(v9) = v7;
  v10 = v6;
  v11 = v4;
  v12 = v5;
  v13 = (char)v3;
  v14 = v2;
  return _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorIN4turi13flexible_typeENSA_9allocatorISD_EEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSQ_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSO_6detail13parser_binderINSO_11alternativeINS9_INSO_8sequenceINS9_INSO_12literal_charINST_8standardELb0ELb0EEENS9_INS16_IS17_Lb1ELb0EEESI_EEEEEENS9_INS15_INS9_IS19_NS9_INSO_4listINSO_6actionINSO_9referenceIKNSO_4ruleIS2_FSD_vEKNS_5proto7exprns_4exprINS1I_6tagns_3tag8terminalENS1I_7argsns_4termISV_EELl0EEENS6_11unused_typeES1T_EEEENS_7phoenix5actorINS1J_10basic_exprINS1X_6detail3tag13function_evalENS1O_5list3INS1Z_IS1N_NS1P_INS1X_3stl9push_backEEELl0EEENS1Y_INS6_9attributeILi0EEEEENS1Y_INS6_8argumentILi0EEEEEEELl3EEEEEEES18_EES1A_EEEEEESI_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERS10_E4typeES2U_((uint64_t *)(a1 + 32), &v9);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorIN4turi13flexible_typeENSA_9allocatorISD_EEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSQ_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSO_6detail13parser_binderINSO_11alternativeINS9_INSO_8sequenceINS9_INSO_12literal_charINST_8standardELb0ELb0EEENS9_INS16_IS17_Lb1ELb0EEESI_EEEEEENS9_INS15_INS9_IS19_NS9_INSO_4listINSO_6actionINSO_9referenceIKNSO_4ruleIS2_FSD_vEKNS_5proto7exprns_4exprINS1I_6tagns_3tag8terminalENS1I_7argsns_4termISV_EELl0EEENS6_11unused_typeES1T_EEEENS_7phoenix5actorINS1J_10basic_exprINS1X_6detail3tag13function_evalENS1O_5list3INS1Z_IS1N_NS1P_INS1X_3stl9push_backEEELl0EEENS1Y_INS6_9attributeILi0EEEEENS1Y_INS6_8argumentILi0EEEEEEELl3EEEEEEES18_EES1A_EEEEEESI_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERS10_E4typeES2U_(uint64_t *a1, __int16 *a2)
{
  __int16 v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v8[4];
  __int128 v9;
  uint64_t v10;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v9 = *((_OWORD *)a2 + 1);
  v10 = *((_QWORD *)a2 + 4);
  v5 = *((_BYTE *)a2 + 40);
  v6 = operator new();
  *(_WORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_OWORD *)(v6 + 16) = v9;
  *(_QWORD *)(v6 + 32) = v10;
  *(_BYTE *)(v6 + 40) = v5;
  v8[0] = (uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable;
  v8[1] = v6;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v8, a1);
  boost::function0<void>::~function0(v8);
  return a1;
}

void sub_217F7A778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      result = operator new();
      *(_BYTE *)result = *(_BYTE *)v5;
      *(_BYTE *)(result + 1) = *(_BYTE *)(v5 + 1);
      *(_BYTE *)(result + 8) = *(_BYTE *)(v5 + 8);
      v6 = *(_OWORD *)(v5 + 16);
      *(_QWORD *)(result + 32) = *(_QWORD *)(v5 + 32);
      *(_OWORD *)(result + 16) = v6;
      *(_BYTE *)(result + 40) = *(_BYTE *)(v5 + 40);
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x1060C40C5F72233);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CC4CCLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CC4CCLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if ((boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1, a2, (unsigned __int8 **)a3, (unsigned __int8 **)a4, (unsigned __int8 **)a5) & 1) != 0)return 1;
  else
    return boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 8, a2, a3, a4, a5, (uint64_t)&boost::spirit::unused);
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(unsigned __int8 *a1, uint64_t *a2, unsigned __int8 **a3, unsigned __int8 **a4, unsigned __int8 **a5)
{
  uint64_t v7;
  unsigned __int8 **v9[4];
  uint64_t v10;

  v7 = *a2;
  v9[3] = a5;
  v10 = v7;
  v9[0] = (unsigned __int8 **)&v10;
  v9[1] = a3;
  v9[2] = a4;
  if ((boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::spirit::unused_type const>(v9, a1) & 1) != 0|| (boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::spirit::unused_type const>(v9, a1 + 1) & 1) != 0)
  {
    return 0;
  }
  *a2 = v10;
  return 1;
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t *v11[4];
  uint64_t v12;

  v9 = *a2;
  v11[3] = a5;
  v12 = v9;
  v11[0] = &v12;
  v11[1] = a3;
  v11[2] = a4;
  if ((boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::spirit::unused_type const>((unsigned __int8 ***)v11, a1) & 1) != 0|| boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::spirit::unused_type const>(v11, (uint64_t)(a1 + 8), a6)|| (boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::spirit::unused_type const>((unsigned __int8 ***)v11, a1 + 32) & 1) != 0)
  {
    return 0;
  }
  *a2 = v12;
  return 1;
}

BOOL boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::spirit::unused_type const>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _BOOL4 v5;
  unsigned __int8 **v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = a1[3];
  v11 = **a1;
  v7 = (unsigned __int8 **)&v11;
  v8 = *(_OWORD *)(a1 + 1);
  v9 = v4;
  v10 = a3;
  v5 = boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const,mpl_::BOOL_<false>>>(a2, &v7);
  if (v5)
    *v3 = v11;
  return !v5;
}

BOOL boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const,mpl_::BOOL_<false>>>(uint64_t a1, unsigned __int8 ***a2)
{
  _BOOL8 v4;
  _QWORD *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;

  v4 = boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type>((uint64_t *)a1, (uint64_t)*a2, (uint64_t)a2[1], (uint64_t **)a2[2]);
  if (v4)
  {
    while (1)
    {
      v5 = *a2;
      v6 = a2[1];
      v7 = **a2;
      v8 = *v6;
      if (v7 == *v6)
        break;
      v9 = *v7;
      if ((boost::spirit::char_encoding::iso8859_1_char_types[v9] & 0x40) != 0)
      {
        v9 = (unint64_t)(v7 + 1);
        while (1)
        {
          *v5 = v9;
          v8 = *v6;
          if ((unsigned __int8 *)v9 == *v6)
            goto LABEL_12;
          v12 = *(unsigned __int8 *)v9++;
          v11 = v12;
          if ((boost::spirit::char_encoding::iso8859_1_char_types[v12] & 0x40) == 0)
          {
            v10 = (unsigned __int8 *)(v9 - 1);
            LODWORD(v9) = v11;
            goto LABEL_9;
          }
        }
      }
      v10 = **a2;
LABEL_9:
      if (v10 != v8 && *(unsigned __int8 *)(a1 + 16) == (_DWORD)v9)
      {
        *v5 = v10 + 1;
        if (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type>((uint64_t *)a1, (uint64_t)*a2, (uint64_t)a2[1], (uint64_t **)a2[2]))
        {
          continue;
        }
      }
      break;
    }
LABEL_12:
    **a2 = v7;
  }
  return v4;
}

BOOL boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  _BOOL8 v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v37[2];
  void **v38;
  int v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v39 = 0;
  v40 = 0;
  *(uint64_t *)((char *)v37 + 5) = 0;
  v37[0] = 0;
  boost::initialized<turi::flexible_type>::wrapper::~wrapper((uint64_t)&v38);
  v6 = boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(a1);
  if (v6)
    boost::phoenix::stl::push_back::operator()<std::vector<turi::flexible_type>,turi::flexible_type>((uint64_t)(a1 + 1), *a4, v37);
  switch(BYTE4(v37[1]))
  {
    case 2:
      v7 = (unint64_t *)v37[0];
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = v37[0];
        if (v37[0])
        {
          if (*(char *)(v37[0] + 31) < 0)
            operator delete(*(void **)(v37[0] + 8));
          v11 = v10;
          v12 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      v13 = (unint64_t *)v37[0];
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v37[0];
        if (v37[0])
        {
          v17 = *(void **)(v37[0] + 8);
          if (v17)
          {
            *(_QWORD *)(v37[0] + 16) = v17;
            operator delete(v17);
          }
          v11 = v16;
          v12 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      v18 = (unint64_t *)v37[0];
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = v37[0];
        if (v37[0])
        {
          v38 = (void **)(v37[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v38);
          goto LABEL_28;
        }
      }
      break;
    case 5:
      v22 = (unint64_t *)v37[0];
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v21 = v37[0];
        if (v37[0])
        {
          v38 = (void **)(v37[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v38);
LABEL_28:
          v11 = v21;
          v12 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      v25 = (unint64_t *)v37[0];
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = v37[0];
        if (v37[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v37[0] + 16));
          v11 = v28;
          v29 = -235920773;
          goto LABEL_43;
        }
      }
      break;
    case 9:
      v30 = (unint64_t *)v37[0];
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = v37[0];
        if (v37[0])
        {
          v34 = *(void **)(v37[0] + 48);
          if (v34)
          {
            *(_QWORD *)(v37[0] + 56) = v34;
            operator delete(v34);
          }
          v35 = *(void **)(v33 + 24);
          if (v35)
          {
            *(_QWORD *)(v33 + 32) = v35;
            operator delete(v35);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v33 + 8);
          v11 = v33;
          v29 = 2071181815;
LABEL_43:
          v12 = v29 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v11, v12);
        }
      }
      break;
    default:
      return v6;
  }
  return v6;
}

void sub_217F7AE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, uint64_t a13)
{
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  switch(a12)
  {
    case 2:
      do
      {
        v14 = __ldaxr((unint64_t *)a10);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unint64_t *)a10));
      if (v15 || !a10)
        goto LABEL_33;
      if (*(char *)(a10 + 31) < 0)
        operator delete(*(void **)(a10 + 8));
      v16 = (_QWORD *)a10;
      v17 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      do
      {
        v24 = __ldaxr((unint64_t *)a10);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unint64_t *)a10));
      if (v25 || !a10)
        goto LABEL_33;
      v26 = *(void **)(a10 + 8);
      if (v26)
      {
        *(_QWORD *)(a10 + 16) = v26;
        operator delete(v26);
      }
      v16 = (_QWORD *)a10;
      v17 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      do
      {
        v18 = __ldaxr((unint64_t *)a10);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unint64_t *)a10));
      if (v19)
        goto LABEL_33;
      v20 = a10;
      if (!a10)
        goto LABEL_33;
      a13 = a10 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
      goto LABEL_26;
    case 5:
      do
      {
        v27 = __ldaxr((unint64_t *)a10);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unint64_t *)a10));
      if (v28)
        goto LABEL_33;
      v20 = a10;
      if (!a10)
        goto LABEL_33;
      a13 = a10 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
LABEL_26:
      v16 = (_QWORD *)v20;
      v17 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      do
      {
        v29 = __ldaxr((unint64_t *)a10);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unint64_t *)a10));
      if (v30 || !a10)
        goto LABEL_33;
      boost::detail::shared_count::~shared_count((unsigned int **)(a10 + 16));
      v16 = (_QWORD *)a10;
      v23 = -235920773;
      goto LABEL_31;
    case 9:
      do
      {
        v21 = __ldaxr((unint64_t *)a10);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unint64_t *)a10));
      if (v22 || !a10)
        goto LABEL_33;
      v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a10);
      v23 = 2071181815;
LABEL_31:
      v17 = v23 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x219A19A08](v16, v17);
LABEL_33:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_33;
  }
}

uint64_t boost::phoenix::stl::push_back::operator()<std::vector<turi::flexible_type>,turi::flexible_type>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;

  v4 = a2[1];
  if (v4 >= a2[2])
  {
    result = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(a2, (char *)a3);
  }
  else
  {
    *(_QWORD *)v4 = 0;
    *(_DWORD *)(v4 + 8) = 0;
    *(_BYTE *)(v4 + 12) = 0;
    if ((uint64_t *)v4 != a3)
    {
      v5 = *a3;
      *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)a3 + 5);
      *(_QWORD *)v4 = v5;
      v6 = *((unsigned __int8 *)a3 + 12);
      *(_BYTE *)(v4 + 12) = v6;
      if (v6 <= 9 && ((1 << v6) & 0x33C) != 0)
      {
        v7 = *(unint64_t **)v4;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
    }
    result = v4 + 16;
  }
  a2[1] = result;
  return result;
}

uint64_t *_ZN5boost6spirit2qi4ruleIPKcFNSt3__16vectorIdNS5_9allocatorIdEEEEvEKNS_5proto7exprns_4exprINSB_6tagns_3tag8terminalENSB_7argsns_4termINS0_3tag9char_codeINSJ_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEENS0_11unused_typeESS_E6defineIN4mpl_5BOOL_ILb0EEENSD_INSF_10bitwise_orENSH_5list2IRKNSD_INSF_11shift_rightENSZ_IRKNSD_ISG_NSI_INS0_11terminal_exINSK_INSJ_5char_ENSM_8standardEEENS_6fusion6vectorIJcEEEEEEELl0EEENSD_ISG_NSI_IRS3_EELl0EEEEELl2EEERKNSD_IS10_NSZ_IRKNSD_IS10_NSZ_IS1F_RKNSD_INSF_7modulusENSZ_IRKNSD_INSF_9subscriptENSZ_IRKNS0_8terminalINSJ_7double_EEERKNS_7phoenix5actorINSC_10basic_exprINS1R_6detail3tag13function_evalENSH_5list3INS1T_ISG_NSI_INS1R_3stl9push_backEEELl0EEENS1S_INS0_9attributeILi0EEEEENS1S_INS0_8argumentILi0EEEEEEELl3EEEEEEELl2EEERKNSD_IS1L_NSZ_IRKNSD_ISG_NSI_INSJ_7no_skipEEELl0EEERKNSD_ISY_NSZ_IRKNSD_ISY_NSZ_IRKNSD_IS10_NSZ_IRKNSD_INSF_11dereferenceENSH_5list1IRSR_EELl1EEES1C_EELl2EEES2W_EELl2EEES2O_EELl2EEEEELl2EEEEELl2EEEEELl2EEES1F_EELl2EEEEELl2EEEEEvRST_RKT0_NSW_ILb1EEE(uint64_t a1, _BYTE ***a2)
{
  char v2;
  _QWORD *v3;
  int v4;
  char v5;
  char v6;
  char v7;
  __int16 v9;
  char v10;
  int v11;
  char v12;
  char v13;
  char v14;

  v2 = *a2[1][1];
  v3 = (_QWORD *)*((_QWORD *)*a2[1] + 1);
  v4 = (**(unsigned __int16 **)(*v3 + 8) << 8) | (*(unsigned __int8 *)(*(_QWORD *)(*v3 + 8) + 2) << 24);
  v5 = **(_BYTE **)(*(_QWORD *)(**(_QWORD **)(v3[1] + 8) + 8) + 8);
  LOBYTE(v3) = **(_BYTE **)(***(_QWORD ***)(v3[1] + 8) + 8);
  v6 = **(_BYTE **)*a2[1];
  v7 = *(*a2)[1];
  LOBYTE(v9) = ***a2;
  HIBYTE(v9) = v7;
  v10 = v6;
  v11 = v4;
  v12 = (char)v3;
  v13 = v5;
  v14 = v2;
  return _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorIdNSA_9allocatorIdEEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSO_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSM_6detail13parser_binderINSM_11alternativeINS9_INSM_8sequenceINS9_INSM_12literal_charINSR_8standardELb0ELb0EEENS9_INS14_IS15_Lb1ELb0EEESG_EEEEEENS9_INS13_INS9_IS17_NS9_INSM_4listINSM_6actionINSM_15any_real_parserIdNSM_13real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS1H_6detail3tag13function_evalENS1J_7argsns_5list3INS1L_INS1J_6tagns_3tag8terminalENS1P_4termINS1H_3stl9push_backEEELl0EEENS1I_INS6_9attributeILi0EEEEENS1I_INS6_8argumentILi0EEEEEEELl3EEEEEEENSM_17no_skip_directiveINS12_INS9_INS13_INS9_INSM_6kleeneISU_EENS9_IS16_SG_EEEEEENS9_IS2E_NS9_ISU_SG_EEEEEEEEEEEES18_EEEEEESG_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSY_E4typeES2W_((uint64_t *)(a1 + 32), &v9);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorIdNSA_9allocatorIdEEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi10char_classINS6_3tag9char_codeINSO_5spaceENS6_13char_encoding9iso8859_1EEEEEEEaSINSM_6detail13parser_binderINSM_11alternativeINS9_INSM_8sequenceINS9_INSM_12literal_charINSR_8standardELb0ELb0EEENS9_INS14_IS15_Lb1ELb0EEESG_EEEEEENS9_INS13_INS9_IS17_NS9_INSM_4listINSM_6actionINSM_15any_real_parserIdNSM_13real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS1H_6detail3tag13function_evalENS1J_7argsns_5list3INS1L_INS1J_6tagns_3tag8terminalENS1P_4termINS1H_3stl9push_backEEELl0EEENS1I_INS6_9attributeILi0EEEEENS1I_INS6_8argumentILi0EEEEEEELl3EEEEEEENSM_17no_skip_directiveINS12_INS9_INS13_INS9_INSM_6kleeneISU_EENS9_IS16_SG_EEEEEENS9_IS2E_NS9_ISU_SG_EEEEEEEEEEEES18_EEEEEESG_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSY_E4typeES2W_(uint64_t *a1, __int16 *a2)
{
  char v3;
  int v4;
  __int16 v5;
  __int16 v6;
  char v7;
  uint64_t (**v9)();
  __int16 v10;
  char v11;
  int v12;
  __int16 v13;
  __int16 v14;
  char v15;

  v3 = *((_BYTE *)a2 + 3);
  v4 = *((_DWORD *)a2 + 1);
  v5 = a2[4];
  v6 = *(__int16 *)((char *)a2 + 11);
  v7 = *((_BYTE *)a2 + 16);
  v10 = *a2;
  v11 = v3;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v9 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap((uint64_t *)&v9, a1);
  boost::function0<void>::~function0((uint64_t *)&v9);
  return a1;
}

void sub_217F7B18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CC76BLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CC76BLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = *(_BYTE *)result;
    *(_BYTE *)(a2 + 1) = *(_BYTE *)(result + 1);
    *(_BYTE *)(a2 + 3) = *(_BYTE *)(result + 3);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(result + 4);
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
    *(_BYTE *)(a2 + 9) = *(_BYTE *)(result + 9);
    *(_BYTE *)(a2 + 11) = *(_BYTE *)(result + 11);
    *(_BYTE *)(a2 + 12) = *(_BYTE *)(result + 12);
    *(_BYTE *)(a2 + 16) = *(_BYTE *)(result + 16);
  }
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::invoke(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if ((boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1, a2, (unsigned __int8 **)a3, (unsigned __int8 **)a4, (unsigned __int8 **)a5) & 1) != 0)return 1;
  else
    return boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(a1 + 3, a2, a3, a4, a5, (uint64_t)&boost::spirit::unused);
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type const>(unsigned __int8 *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t *v11[4];
  uint64_t v12;

  v9 = *a2;
  v11[3] = a5;
  v12 = v9;
  v11[0] = &v12;
  v11[1] = a3;
  v11[2] = a4;
  if ((boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::spirit::unused_type const>((unsigned __int8 ***)v11, a1) & 1) != 0|| boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::spirit::unused_type const>(v11, (uint64_t)(a1 + 1), a6)|| (boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::spirit::unused_type const>((unsigned __int8 ***)v11, a1 + 13) & 1) != 0)
  {
    return 0;
  }
  *a2 = v12;
  return 1;
}

uint64_t boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>::operator()<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::spirit::unused_type const>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  unsigned __int8 **v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = a1[3];
  v11 = **a1;
  v7 = (unsigned __int8 **)&v11;
  v8 = *(_OWORD *)(a1 + 1);
  v9 = v4;
  v10 = a3;
  v5 = boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const,mpl_::BOOL_<false>>>(a2, &v7);
  if (v5)
    *v3 = v11;
  return v5 ^ 1u;
}

uint64_t boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const,mpl_::BOOL_<false>>>(uint64_t a1, unsigned __int8 ***a2)
{
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 **v10;

  v4 = boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type>(a1, *a2, a2[1], (uint64_t *)a2[2], (uint64_t)a2[3]);
  if ((_DWORD)v4)
  {
    do
    {
      v5 = *a2;
      v6 = a2[1];
      v7 = **a2;
      v8 = (uint64_t)a2[2];
      v10 = a2[3];
    }
    while (boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::detail::unused_skipper<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const>(a1 + 4, v5, v6, v8, (uint64_t)&v10)&& (boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type>(a1, *a2, a2[1], (uint64_t *)a2[2], (uint64_t)a2[3]) & 1) != 0);
    **a2 = v7;
  }
  return v4;
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::spirit::unused_type>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  v7 = boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>(a1, a2, a3, (uint64_t)a4, a5, (double *)&v9);
  if ((_DWORD)v7)
    boost::phoenix::stl::push_back::operator()<std::vector<double>,double>(a1 + 1, *a4, &v9);
  return v7;
}

uint64_t boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, double *a6)
{
  unsigned __int8 *i;

  for (i = *a2; i != *a3; *a2 = ++i)
  {
    if ((boost::spirit::char_encoding::iso8859_1_char_types[*i] & 0x40) == 0)
      break;
  }
  return boost::spirit::qi::detail::real_impl<double,boost::spirit::qi::real_policies<double>>::parse<char const*,double>(a2, a3, a6);
}

uint64_t boost::spirit::qi::detail::real_impl<double,boost::spirit::qi::real_policies<double>>::parse<char const*,double>(unsigned __int8 **a1, unsigned __int8 **a2, double *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v8;
  _BOOL4 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  double v15;
  double v16;
  uint64_t result;
  uint64_t v18;
  double v19;
  unsigned int v20;
  double v21;
  unsigned int v22;
  double v23;
  double v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  double v28;

  v3 = *a1;
  v4 = *a2;
  if (*a1 == *a2)
    return 0;
  v8 = *v3;
  if (v8 == 45 || v8 == 43)
  {
    v9 = v8 == 45;
    v10 = v3 + 1;
    *a1 = v3 + 1;
    v4 = *a2;
  }
  else
  {
    v9 = 0;
    v10 = *a1;
  }
  v27 = 0;
  v28 = 0.0;
  if (v10 == v4)
    goto LABEL_14;
  if ((boost::spirit::qi::detail::extract_int<unsigned long,10u,1u,-1,boost::spirit::qi::detail::positive_accumulator<10u>,false,false>::parse_main<char const*,unsigned long>((uint64_t *)a1, (uint64_t *)a2, &v27) & 1) == 0)
  {
    *a1 = v10;
LABEL_14:
    if ((boost::spirit::qi::ureal_policies<double>::parse_nan<char const*,double>(a1, a2, &v28) & 1) != 0
      || boost::spirit::qi::ureal_policies<double>::parse_inf<char const*,double>(a1, a2, &v28))
    {
      goto LABEL_49;
    }
    v26 = 0;
    v13 = *a1;
    if (*a1 == *a2
      || *v13 != 46
      || (*a1 = v13 + 1,
          (boost::spirit::qi::ureal_policies<double>::parse_frac_n<char const*,unsigned long>((uint64_t *)a1, (uint64_t *)a2, &v27, &v26) & 1) == 0))
    {
      result = 0;
      *a1 = v3;
      return result;
    }
    goto LABEL_19;
  }
  v26 = 0;
  v11 = *a1;
  if (*a1 == *a2)
    goto LABEL_27;
  v12 = *v11;
  if (v12 == 101 || v12 == 69)
    goto LABEL_21;
  if (v12 != 46)
    goto LABEL_26;
  *a1 = v11 + 1;
  boost::spirit::qi::ureal_policies<double>::parse_frac_n<char const*,unsigned long>((uint64_t *)a1, (uint64_t *)a2, &v27, &v26);
LABEL_19:
  v11 = *a1;
  if (*a1 != *a2 && (*v11 | 0x20) == 0x65)
  {
LABEL_21:
    *a1 = v11 + 1;
    v25 = 0;
    if (boost::spirit::qi::ureal_policies<double>::parse_exp_n<char const*>((uint64_t *)a1, (uint64_t *)a2, &v25))
    {
      v14 = v25 - v26;
      if ((int)(v25 - v26) >= 0)
      {
        if (v14 <= 0x134)
        {
          v15 = (double)v27;
          v16 = boost::spirit::traits::pow10_helper<double,void>::call::exponents[v14];
LABEL_39:
          v19 = v16 * v15;
          goto LABEL_48;
        }
        return 0;
      }
      if (v14 > 0xFFFFFECC)
      {
        v21 = (double)v27;
        v22 = v26 - v25;
      }
      else
      {
        if (v14 < 0xFFFFFD9A)
          return 0;
        v21 = ((double)(v27 % 0xA) + (double)(10 * (v27 / 0xA))) / 1.0e307;
        v22 = -307 - v14;
      }
      goto LABEL_46;
    }
    *a1 = v11;
    v18 = v26;
    goto LABEL_33;
  }
LABEL_26:
  v18 = v26;
  if (!v26)
  {
LABEL_27:
    if (v27 == 1)
    {
      if ((boost::spirit::qi::ureal_policies<double>::parse_nan<char const*,double>(a1, a2, &v28) & 1) != 0
        || boost::spirit::qi::ureal_policies<double>::parse_inf<char const*,double>(a1, a2, &v28))
      {
        goto LABEL_49;
      }
      v19 = (double)v27;
    }
    else
    {
      v19 = (double)v27;
    }
LABEL_48:
    v28 = v19;
    goto LABEL_49;
  }
LABEL_33:
  v20 = -(int)v18;
  if ((int)v18 <= 0)
  {
    if (v20 <= 0x134)
    {
      v15 = (double)v27;
      v16 = boost::spirit::traits::pow10_helper<double,void>::call::exponents[v20];
      goto LABEL_39;
    }
  }
  else
  {
    if (v20 > 0xFFFFFECC)
    {
      v21 = (double)v27;
      v23 = boost::spirit::traits::pow10_helper<double,void>::call::exponents[v18];
LABEL_47:
      v19 = v21 / v23;
      goto LABEL_48;
    }
    v21 = ((double)(v27 % 0xA) + (double)(10 * (v27 / 0xA))) / 1.0e307;
    v28 = v21;
    if (v20 >= 0xFFFFFD9A)
    {
      v22 = v18 - 307;
LABEL_46:
      v23 = boost::spirit::traits::pow10_helper<double,void>::call::exponents[v22];
      goto LABEL_47;
    }
  }
LABEL_49:
  v24 = v28;
  if (v9)
    v24 = -v28;
  *a3 = v24;
  return 1;
}

void boost::phoenix::stl::push_back::operator()<std::vector<double>,double>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD **)(a2 + 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(_QWORD **)a2;
    v10 = ((uint64_t)v7 - *(_QWORD *)a2) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v13);
      v9 = *(_QWORD **)a2;
      v7 = *(_QWORD **)(a2 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = *a3;
    v8 = v15 + 8;
    while (v7 != v9)
    {
      v17 = *--v7;
      *((_QWORD *)v15 - 1) = v17;
      v15 -= 8;
    }
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = *a3;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a2 + 8) = v8;
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::detail::unused_skipper<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v6;
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  if ((boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::detail::unused_skipper<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const>::operator()<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>(&v8, a1) & 1) == 0&& (boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::detail::unused_skipper<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const>::operator()<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>(&v8, a1 + 3) & 1) == 0)
  {
    v6 = *v8;
    if (*v8 == *v9 || (boost::spirit::char_encoding::iso8859_1_char_types[*v6] & 0x40) == 0)
      return 0;
    *v8 = v6 + 1;
  }
  return 1;
}

_QWORD *std::shared_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>::shared_ptr[abi:ne180100]<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D91D370;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217F7BA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const> *,std::shared_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>::__shared_ptr_default_delete<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>,turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>,std::allocator<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>::~flexible_type_parser_impl(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const> *,std::shared_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>::__shared_ptr_default_delete<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>,turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>,std::allocator<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>::~flexible_type_parser_impl(uint64_t a1)
{
  if (*(char *)(a1 + 823) < 0)
    operator delete(*(void **)(a1 + 800));
  boost::function0<void>::~function0((uint64_t *)(a1 + 768));
  if (*(char *)(a1 + 767) < 0)
    operator delete(*(void **)(a1 + 744));
  boost::function0<void>::~function0((uint64_t *)(a1 + 704));
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  boost::function0<void>::~function0((uint64_t *)(a1 + 640));
  if (*(char *)(a1 + 639) < 0)
    operator delete(*(void **)(a1 + 616));
  boost::function0<void>::~function0((uint64_t *)(a1 + 576));
  if (*(char *)(a1 + 575) < 0)
    operator delete(*(void **)(a1 + 552));
  boost::function0<void>::~function0((uint64_t *)(a1 + 512));
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  boost::function0<void>::~function0((uint64_t *)(a1 + 448));
  if (*(char *)(a1 + 447) < 0)
    operator delete(*(void **)(a1 + 424));
  boost::function0<void>::~function0((uint64_t *)(a1 + 384));
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  boost::function0<void>::~function0((uint64_t *)(a1 + 320));
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  boost::function0<void>::~function0((uint64_t *)(a1 + 256));
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  boost::function0<void>::~function0((uint64_t *)(a1 + 192));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  boost::function0<void>::~function0((uint64_t *)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  boost::function0<void>::~function0((uint64_t *)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t std::unique_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>::~flexible_type_parser_impl(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>::flexible_type_parser_impl(uint64_t a1, const std::string *a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  std::string *v14;
  int v15;
  std::string *v16;
  int v17;
  std::string *v18;
  int v19;
  std::string *v20;
  int v21;
  std::string *v22;
  int v23;
  std::string *v24;
  int v25;
  std::string *v26;
  int v27;
  std::string *v28;
  int v29;
  std::string *v30;
  int v31;
  std::string *v32;
  int v33;
  std::string *v34;
  int v35;
  std::string *v36;
  int v37;
  std::string *v38;
  __int128 v39;
  unint64_t size;
  std::string *v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  BOOL v45;
  int v46;
  unint64_t *v48;
  unint64_t v49;
  char v50;
  unsigned int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned int v56;
  char *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unint64_t *v62;
  unint64_t v63;
  char v64;
  unsigned int v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  unint64_t *v75;
  unint64_t v76;
  char v77;
  unsigned int v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::string::size_type v83;
  uint64_t *v85;
  std::string::size_type *v86;
  std::string::size_type *v87;
  _QWORD v90[2];
  __int16 v91;
  _QWORD v92[2];
  __int16 v93;
  char *v94;
  std::string ***v95;
  __int16 v96;
  std::string *p_p;
  __int16 *v98;
  __int16 v99;
  void *v100;
  __int16 *v101;
  __int16 v102;
  char *v103;
  __int16 *v104;
  __int16 v105;
  char *v106;
  __int16 *v107;
  char **v108;
  char **v109;
  std::string **v110;
  void **v111;
  std::string *v112;
  char **v113;
  std::string **v114;
  char **v115;
  std::string *v116;
  _QWORD *p_p_p;
  std::string *v118;
  char **v119;
  std::string __p;
  void *v121;
  char v122;
  _BYTE v123[40];
  _BYTE v124[40];
  _BYTE v125[56];
  void *v126[2];
  void *v127[2];
  __int128 v128;
  __int16 v129;
  char v130;
  _QWORD v131[4];
  int v132;
  _OWORD v133[2];
  int v134;
  _QWORD v135[4];
  int v136;
  char v137;
  void *v138[2];
  void *v139[2];
  __int128 v140;
  __int16 v141;
  char v142;
  _QWORD v143[4];
  int v144;
  _OWORD v145[2];
  int v146;
  _QWORD v147[4];
  int v148;
  char v149;
  void *v150[2];
  void *v151[2];
  __int128 v152;
  __int16 v153;
  char v154;
  _QWORD v155[4];
  int v156;
  _OWORD v157[2];
  int v158;
  _QWORD v159[4];
  int v160;
  char v161;
  std::string **v162;
  _BYTE v163[13];
  std::string ***v164;
  _BYTE v165[13];
  _BYTE v166[21];
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-grammar");
  *(_QWORD *)a1 = a1 + 32;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)(a1 + 8) = __p;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 32) = a1 + 32;
  v14 = (std::string *)(a1 + 40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 64) = 0;
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 96) = a1 + 96;
  v16 = (std::string *)(a1 + 104);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 128) = 0;
    if (v17 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 128) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 160) = a1 + 160;
  v18 = (std::string *)(a1 + 168);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 192) = 0;
    if (v19 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 192) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 224) = a1 + 224;
  v20 = (std::string *)(a1 + 232);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v21 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 256) = 0;
    if (v21 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 248) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 256) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 288) = a1 + 288;
  v22 = (std::string *)(a1 + 296);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 320) = 0;
    if (v23 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 312) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 320) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  v87 = (std::string::size_type *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = a1 + 352;
  v24 = (std::string *)(a1 + 360);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 384) = 0;
    if (v25 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 376) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 384) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  v86 = (std::string::size_type *)(a1 + 416);
  *(_QWORD *)(a1 + 416) = a1 + 416;
  v26 = (std::string *)(a1 + 424);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 448) = 0;
    if (v27 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 440) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 448) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 480) = a1 + 480;
  v28 = (std::string *)(a1 + 488);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 512) = 0;
    if (v29 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 504) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 512) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 544) = a1 + 544;
  v30 = (std::string *)(a1 + 552);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v31 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v85 = (uint64_t *)(a1 + 576);
    *(_QWORD *)(a1 + 576) = 0;
    if (v31 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 568) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    v85 = (uint64_t *)(a1 + 576);
    *(_QWORD *)(a1 + 576) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 608) = a1 + 608;
  v32 = (std::string *)(a1 + 616);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v32, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v33 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 640) = 0;
    if (v33 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 632) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 640) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 672) = a1 + 672;
  v34 = (std::string *)(a1 + 680);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v35 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 704) = 0;
    if (v35 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 696) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 704) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "unnamed-rule");
  *(_QWORD *)(a1 + 736) = a1 + 736;
  v36 = (std::string *)(a1 + 744);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v36, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v37 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 768) = 0;
    if (v37 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 760) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_QWORD *)(a1 + 768) = 0;
  }
  v38 = (std::string *)(a1 + 800);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v38, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    v39 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 816) = *((_QWORD *)&a2->__r_.__value_.__l + 2);
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
  }
  v152 = 0u;
  *(_OWORD *)v151 = 0u;
  *(_OWORD *)v150 = 0u;
  v153 = 23553;
  v154 = 1;
  memset(v155, 0, sizeof(v155));
  v156 = 1065353216;
  memset(v157, 0, sizeof(v157));
  memset(v159, 0, sizeof(v159));
  v158 = 1065353216;
  v160 = 1065353216;
  v161 = 0;
  MEMORY[0x219A19390](v150, ",{}[]");
  LOBYTE(v153) = a3;
  HIBYTE(v153) = a4;
  v154 = 1;
  if (v155 != (_QWORD *)a5)
  {
    v156 = *(_DWORD *)(a5 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v155, *(uint64_t **)(a5 + 16), 0);
  }
  if (v157 != (_OWORD *)a6)
  {
    v158 = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v157, *(uint64_t **)(a6 + 16), 0);
  }
  if (v159 != (_QWORD *)a7)
  {
    v160 = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v159, *(uint64_t **)(a7 + 16), 0);
  }
  v161 = a8;
  *(_OWORD *)v139 = 0u;
  v140 = 0u;
  *(_OWORD *)v138 = 0u;
  v141 = 23553;
  v142 = 1;
  memset(v143, 0, sizeof(v143));
  v144 = 1065353216;
  memset(v145, 0, sizeof(v145));
  memset(v147, 0, sizeof(v147));
  v146 = 1065353216;
  v148 = 1065353216;
  v149 = 0;
  MEMORY[0x219A19390](v138, " ,\t{}[]:;");
  LOBYTE(v141) = a3;
  HIBYTE(v141) = a4;
  v142 = 1;
  if (v143 != (_QWORD *)a5)
  {
    v144 = *(_DWORD *)(a5 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v143, *(uint64_t **)(a5 + 16), 0);
  }
  if (v145 != (_OWORD *)a6)
  {
    v146 = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v145, *(uint64_t **)(a6 + 16), 0);
  }
  if (v147 != (_QWORD *)a7)
  {
    v148 = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v147, *(uint64_t **)(a7 + 16), 0);
  }
  v149 = a8;
  *(_OWORD *)v127 = 0u;
  v128 = 0u;
  *(_OWORD *)v126 = 0u;
  v129 = 23553;
  v130 = 1;
  memset(v131, 0, sizeof(v131));
  v132 = 1065353216;
  memset(v133, 0, sizeof(v133));
  memset(v135, 0, sizeof(v135));
  v134 = 1065353216;
  v136 = 1065353216;
  v137 = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (size >= 2)
    v41 = (std::string *)&v127[1];
  else
    v41 = (std::string *)v126;
  std::string::operator=(v41, a2);
  LOBYTE(v129) = a3;
  HIBYTE(v129) = a4;
  v130 = 1;
  if (v131 != (_QWORD *)a5)
  {
    v132 = *(_DWORD *)(a5 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v131, *(uint64_t **)(a5 + 16), 0);
  }
  if (v133 != (_OWORD *)a6)
  {
    v134 = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v133, *(uint64_t **)(a6 + 16), 0);
  }
  if (v135 != (_QWORD *)a7)
  {
    v136 = *(_DWORD *)(a7 + 32);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v135, *(uint64_t **)(a7 + 16), 0);
  }
  v137 = a8;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v126, &__p);
  LOWORD(v164) = 0;
  *(_QWORD *)v166 = &__p;
  *(_QWORD *)&v166[8] = &v164;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l>>(a1 + 736, (uint64_t)v166);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v105 = 0;
  v106 = &turi::real;
  v107 = &v105;
  v102 = 0;
  v103 = &boost::spirit::long_long;
  v104 = &v102;
  v108 = &v106;
  v109 = &v103;
  v99 = 0;
  v100 = (void *)(a1 + 672);
  v101 = &v99;
  v110 = (std::string **)&v108;
  v111 = &v100;
  v96 = 0;
  p_p = (std::string *)(a1 + 608);
  v98 = &v96;
  v112 = (std::string *)&v110;
  v113 = (char **)&p_p;
  v93 = 0;
  v94 = (char *)(a1 + 480);
  v95 = (std::string ***)&v93;
  v114 = &v112;
  v115 = &v94;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v126, &__p);
  v91 = 0;
  v92[0] = &__p;
  v92[1] = &v91;
  v116 = (std::string *)&v114;
  p_p_p = v92;
  v164 = (std::string ***)&boost::spirit::_val;
  *(_QWORD *)&v166[5] = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  *(_QWORD *)v166 = turi::FLEX_UNDEFINED;
  v42 = byte_254FEE09C;
  v166[12] = byte_254FEE09C;
  if (byte_254FEE09C <= 9u && ((1 << byte_254FEE09C) & 0x33C) != 0)
  {
    v43 = *(unint64_t **)v166;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 + 1, v43));
    v42 = v166[12];
  }
  *(_QWORD *)&v165[5] = *(_QWORD *)&v166[5];
  *(_QWORD *)v165 = *(_QWORD *)v166;
  v165[12] = v42;
  v45 = v42 > 9;
  v46 = (1 << v42) & 0x33C;
  if (!v45 && v46 != 0)
  {
    v48 = *(unint64_t **)v165;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 + 1, v48));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v166);
  v50 = *(_BYTE *)v164;
  v166[0] = *(_BYTE *)v164;
  *(_QWORD *)&v166[13] = *(_QWORD *)&v165[5];
  *(_QWORD *)&v166[8] = *(_QWORD *)v165;
  v51 = v165[12];
  v166[20] = v165[12];
  if (v165[12] <= 9u && ((1 << v165[12]) & 0x33C) != 0)
  {
    v52 = *(unint64_t **)&v166[8];
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v50 = v166[0];
    v51 = v166[20];
  }
  LOBYTE(v162) = v50;
  *(_QWORD *)&v163[5] = *(_QWORD *)&v166[13];
  *(_QWORD *)v163 = *(_QWORD *)&v166[8];
  v163[12] = v51;
  if (v51 <= 9 && ((1 << v51) & 0x33C) != 0)
  {
    v54 = *(unint64_t **)v163;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v166[8]);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v165);
  v90[0] = &boost::spirit::eps;
  v90[1] = &v162;
  v118 = (std::string *)&v116;
  v119 = (char **)v90;
  _ZN5boost6spirit2qi4ruleIPKcFN4turi13flexible_typeEvEKNS_5proto7exprns_4exprINS8_6tagns_3tag11logical_notENS8_7argsns_5list1IRKNS0_8terminalINS0_3tag3epsEEEEELl1EEENS0_11unused_typeESP_E6defineIN4mpl_5BOOL_ILb0EEENSA_INSC_10bitwise_orENSE_5list2IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_INSC_9subscriptENSW_IRNSG_INSH_12stateful_tagINS5_20strict_real_policiesIdEENSH_7double_EdSP_EEEERKNS_7phoenix5actorINS9_10basic_exprINSC_6assignENSW_INS16_INS0_9attributeILi0EEEEENS16_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSA_ISX_NSW_IRKNSG_INSH_9long_longEEES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNSt3__16vectorIdNS20_9allocatorIdEEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS21_IS6_NS22_IS6_EEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS21_INS20_4pairIS6_S6_EENS22_IS2U_EEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNSA_INSC_8terminalENSE_4termINS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS3B_13parser_configEEEEEEEELl0EEES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_ISL_RKNS16_INS17_IS18_NSW_IS1B_NS16_INS17_IS38_NS39_IS6_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEEEEvRSQ_RKT0_NST_ILb1EEE(a1 + 32, (uint64_t)&v118);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v163);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v108) = 0;
  v118 = (std::string *)&turi::real;
  v119 = (char **)&v108;
  LOWORD(v106) = 0;
  v116 = (std::string *)&boost::spirit::long_long;
  p_p_p = &v106;
  v162 = &v118;
  *(_QWORD *)v163 = &v116;
  LOWORD(v103) = 0;
  v114 = (std::string **)(a1 + 672);
  v115 = &v103;
  v164 = &v162;
  *(_QWORD *)v165 = &v114;
  LOWORD(v100) = 0;
  v112 = (std::string *)(a1 + 608);
  v113 = (char **)&v100;
  *(_QWORD *)v166 = &v164;
  *(_QWORD *)&v166[8] = &v112;
  LOWORD(p_p) = 0;
  v110 = (std::string **)(a1 + 480);
  v111 = (void **)&p_p;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v110;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(a1 + 96, &__p);
  LOWORD(v92[0]) = 0;
  v108 = (char **)&turi::real;
  v109 = (char **)v92;
  LOWORD(v90[0]) = 0;
  v106 = &boost::spirit::long_long;
  v107 = (__int16 *)v90;
  v110 = (std::string **)&v108;
  v111 = (void **)&v106;
  v105 = 0;
  v103 = (char *)(a1 + 608);
  v104 = &v105;
  v112 = (std::string *)&v110;
  v113 = &v103;
  v102 = 0;
  v100 = (void *)(a1 + 480);
  v101 = &v102;
  v114 = &v112;
  v115 = (char **)&v100;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v150, &__p);
  v99 = 0;
  p_p = &__p;
  v98 = &v99;
  v116 = (std::string *)&v114;
  p_p_p = &p_p;
  v164 = (std::string ***)&boost::spirit::_val;
  *(_QWORD *)&v166[5] = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  *(_QWORD *)v166 = turi::FLEX_UNDEFINED;
  v56 = byte_254FEE09C;
  v166[12] = byte_254FEE09C;
  if (byte_254FEE09C > 9u)
  {
    v57 = (char *)(a1 + 608);
  }
  else
  {
    v57 = (char *)(a1 + 608);
    if (((1 << byte_254FEE09C) & 0x33C) != 0)
    {
      v58 = *(unint64_t **)v166;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
      v56 = v166[12];
    }
  }
  *(_QWORD *)&v165[5] = *(_QWORD *)&v166[5];
  *(_QWORD *)v165 = *(_QWORD *)v166;
  v165[12] = v56;
  v45 = v56 > 9;
  v60 = (1 << v56) & 0x33C;
  if (!v45 && v60 != 0)
  {
    v62 = *(unint64_t **)v165;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v166);
  v64 = *(_BYTE *)v164;
  v166[0] = *(_BYTE *)v164;
  *(_QWORD *)&v166[13] = *(_QWORD *)&v165[5];
  *(_QWORD *)&v166[8] = *(_QWORD *)v165;
  v65 = v165[12];
  v166[20] = v165[12];
  if (v165[12] <= 9u && ((1 << v165[12]) & 0x33C) != 0)
  {
    v66 = *(unint64_t **)&v166[8];
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 + 1, v66));
    v64 = v166[0];
    v65 = v166[20];
  }
  LOBYTE(v162) = v64;
  *(_QWORD *)&v163[5] = *(_QWORD *)&v166[13];
  *(_QWORD *)v163 = *(_QWORD *)&v166[8];
  v163[12] = v65;
  if (v65 <= 9 && ((1 << v65) & 0x33C) != 0)
  {
    v68 = *(unint64_t **)v163;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 + 1, v68));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v166[8]);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v165);
  v94 = &boost::spirit::eps;
  v95 = &v162;
  v118 = (std::string *)&v116;
  v119 = &v94;
  _ZN5boost6spirit2qi4ruleIPKcFN4turi13flexible_typeEvEKNS_5proto7exprns_4exprINS8_6tagns_3tag11logical_notENS8_7argsns_5list1IRKNS0_8terminalINS0_3tag3epsEEEEELl1EEENS0_11unused_typeESP_E6defineIN4mpl_5BOOL_ILb0EEENSA_INSC_10bitwise_orENSE_5list2IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_INSC_9subscriptENSW_IRNSG_INSH_12stateful_tagINS5_20strict_real_policiesIdEENSH_7double_EdSP_EEEERKNS_7phoenix5actorINS9_10basic_exprINSC_6assignENSW_INS16_INS0_9attributeILi0EEEEENS16_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSA_ISX_NSW_IRKNSG_INSH_9long_longEEES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNSt3__16vectorIS6_NS20_9allocatorIS6_EEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS21_INS20_4pairIS6_S6_EENS22_IS2H_EEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNSA_INSC_8terminalENSE_4termINS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS2Y_13parser_configEEEEEEEELl0EEES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_ISL_RKNS16_INS17_IS18_NSW_IS1B_NS16_INS17_IS2V_NS2W_IS6_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEEEEvRSQ_RKT0_NST_ILb1EEE(a1 + 160, (uint64_t *)&v118);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v163);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v92[0]) = 0;
  v108 = (char **)&turi::real;
  v109 = (char **)v92;
  LOWORD(v90[0]) = 0;
  v106 = &boost::spirit::long_long;
  v107 = (__int16 *)v90;
  v110 = (std::string **)&v108;
  v111 = (void **)&v106;
  v105 = 0;
  v103 = v57;
  v104 = &v105;
  v112 = (std::string *)&v110;
  v113 = &v103;
  v102 = 0;
  v100 = (void *)(a1 + 480);
  v101 = &v102;
  v114 = &v112;
  v115 = (char **)&v100;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v138, &__p);
  v99 = 0;
  p_p = &__p;
  v98 = &v99;
  v116 = (std::string *)&v114;
  p_p_p = &p_p;
  v164 = (std::string ***)&boost::spirit::_val;
  *(_QWORD *)&v166[5] = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
  *(_QWORD *)v166 = turi::FLEX_UNDEFINED;
  v70 = byte_254FEE09C;
  v166[12] = byte_254FEE09C;
  if (byte_254FEE09C <= 9u && ((1 << byte_254FEE09C) & 0x33C) != 0)
  {
    v71 = *(unint64_t **)v166;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
    v70 = v166[12];
  }
  *(_QWORD *)&v165[5] = *(_QWORD *)&v166[5];
  *(_QWORD *)v165 = *(_QWORD *)v166;
  v165[12] = v70;
  v45 = v70 > 9;
  v73 = (1 << v70) & 0x33C;
  if (!v45 && v73 != 0)
  {
    v75 = *(unint64_t **)v165;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 + 1, v75));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v166);
  v77 = *(_BYTE *)v164;
  v166[0] = *(_BYTE *)v164;
  *(_QWORD *)&v166[13] = *(_QWORD *)&v165[5];
  *(_QWORD *)&v166[8] = *(_QWORD *)v165;
  v78 = v165[12];
  v166[20] = v165[12];
  if (v165[12] <= 9u && ((1 << v165[12]) & 0x33C) != 0)
  {
    v79 = *(unint64_t **)&v166[8];
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 + 1, v79));
    v77 = v166[0];
    v78 = v166[20];
  }
  LOBYTE(v162) = v77;
  *(_QWORD *)&v163[5] = *(_QWORD *)&v166[13];
  *(_QWORD *)v163 = *(_QWORD *)&v166[8];
  v163[12] = v78;
  if (v78 <= 9 && ((1 << v78) & 0x33C) != 0)
  {
    v81 = *(unint64_t **)v163;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 + 1, v81));
  }
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v166[8]);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v165);
  v94 = &boost::spirit::eps;
  v95 = &v162;
  v118 = (std::string *)&v116;
  v119 = &v94;
  _ZN5boost6spirit2qi4ruleIPKcFN4turi13flexible_typeEvEKNS_5proto7exprns_4exprINS8_6tagns_3tag11logical_notENS8_7argsns_5list1IRKNS0_8terminalINS0_3tag3epsEEEEELl1EEENS0_11unused_typeESP_E6defineIN4mpl_5BOOL_ILb0EEENSA_INSC_10bitwise_orENSE_5list2IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_INSC_9subscriptENSW_IRNSG_INSH_12stateful_tagINS5_20strict_real_policiesIdEENSH_7double_EdSP_EEEERKNS_7phoenix5actorINS9_10basic_exprINSC_6assignENSW_INS16_INS0_9attributeILi0EEEEENS16_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSA_ISX_NSW_IRKNSG_INSH_9long_longEEES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNSt3__16vectorIS6_NS20_9allocatorIS6_EEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS21_INS20_4pairIS6_S6_EENS22_IS2H_EEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNSA_INSC_8terminalENSE_4termINS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS2Y_13parser_configEEEEEEEELl0EEES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_ISL_RKNS16_INS17_IS18_NSW_IS1B_NS16_INS17_IS2V_NS2W_IS6_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEEEEvRSQ_RKT0_NST_ILb1EEE(a1 + 224, (uint64_t *)&v118);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v163);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v112) = 0;
  v162 = (std::string **)(a1 + 160);
  *(_QWORD *)v163 = &v112;
  LOBYTE(v110) = 44;
  LOBYTE(v108) = 93;
  v118 = (std::string *)&v110;
  v119 = (char **)&v108;
  v114 = &v118;
  v164 = &v162;
  *(_QWORD *)v165 = &v114;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v150, &__p);
  LOWORD(v106) = 0;
  v116 = &__p;
  p_p_p = &v106;
  *(_QWORD *)v166 = &v164;
  *(_QWORD *)&v166[8] = &v116;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(a1 + 288, (uint64_t *)v166);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v114) = 0;
  v162 = (std::string **)(a1 + 224);
  *(_QWORD *)v163 = &v114;
  LOBYTE(v112) = 58;
  v116 = (std::string *)&v112;
  v164 = &v162;
  *(_QWORD *)v165 = &v116;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v138, &__p);
  LOWORD(v110) = 0;
  v118 = &__p;
  v119 = (char **)&v110;
  *(_QWORD *)v166 = &v164;
  *(_QWORD *)&v166[8] = &v118;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>((uint64_t)v87, (uint64_t *)v166);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOWORD(v108) = 0;
  v162 = (std::string **)(a1 + 224);
  *(_QWORD *)v163 = &v108;
  LOBYTE(v106) = 44;
  LOBYTE(v103) = 125;
  v114 = (std::string **)&v106;
  v115 = &v103;
  v116 = (std::string *)&v114;
  p_p_p = &boost::spirit::iso8859_1::space;
  v118 = (std::string *)&boost::spirit::no_skip;
  v119 = (char **)&v116;
  v110 = &v118;
  v164 = &v162;
  *(_QWORD *)v165 = &v110;
  boost::spirit::terminal<parser_impl::tag::restricted_string>::operator()<parser_impl::parser_config>((__int128 *)v138, &__p);
  LOWORD(v100) = 0;
  v112 = &__p;
  v113 = (char **)&v100;
  *(_QWORD *)v166 = &v164;
  *(_QWORD *)&v166[8] = &v112;
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>((uint64_t)v86, (uint64_t *)v166);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v125);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v124);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v123);
  if (v122 < 0)
    operator delete(v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LOBYTE(v108) = 123;
  v112 = (std::string *)&boost::spirit::iso8859_1::space;
  LOBYTE(v110) = 44;
  v116 = (std::string *)&v112;
  p_p_p = &v110;
  v118 = (std::string *)&v116;
  v119 = (char **)&boost::spirit::iso8859_1::space;
  v162 = (std::string **)&boost::spirit::no_skip;
  *(_QWORD *)v163 = &v118;
  v164 = (std::string ***)(a1 + 544);
  *(_QWORD *)v165 = &v162;
  v114 = (std::string **)&v164;
  *(_QWORD *)v166 = &v108;
  *(_QWORD *)&v166[8] = &v114;
  LOBYTE(v106) = 125;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v106;
  boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,1l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l>>(a1 + 480, (char ***)&__p);
  v83 = *v86;
  __p.__r_.__value_.__r.__words[0] = *v87;
  __p.__r_.__value_.__s.__data_[8] = 58;
  __p.__r_.__value_.__r.__words[2] = v83;
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__14pairIN4turi13flexible_typeESD_EENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSM_10eps_parserEEEEEaSINSM_6detail13parser_binderINSM_8sequenceINS9_INSM_9referenceIKNSM_4ruleIS2_FSD_vEKNS_5proto7exprns_4exprINS11_6tagns_3tag11logical_notENS11_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1I_EEEENS9_INSM_12literal_charINS6_13char_encoding8standardELb1ELb0EEENS9_IS1L_SG_EEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERST_E4typeES1Z_(v85, (uint64_t *)&__p);
  LOBYTE(v112) = 91;
  LOBYTE(v108) = 93;
  *(_QWORD *)v166 = &v112;
  *(_QWORD *)&v166[8] = &v108;
  LOBYTE(v106) = 91;
  BYTE2(v114) = 0;
  LOWORD(v114) = 0;
  v116 = (std::string *)(a1 + 288);
  p_p_p = &v114;
  LOBYTE(v110) = 44;
  v118 = (std::string *)&v116;
  v119 = (char **)&v110;
  v162 = (std::string **)&v106;
  *(_QWORD *)v163 = &v118;
  LOBYTE(v103) = 93;
  v164 = &v162;
  *(_QWORD *)v165 = &v103;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v164;
  boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l> const&>,2l>>(a1 + 608, &__p);
  LOBYTE(v94) = 91;
  LOBYTE(v105) = 93;
  *(_QWORD *)v166 = &v94;
  *(_QWORD *)&v166[8] = &v105;
  LOBYTE(v102) = 91;
  BYTE2(p_p) = 0;
  LOWORD(p_p) = 0;
  v116 = (std::string *)&boost::spirit::double_;
  p_p_p = &p_p;
  v103 = (char *)&boost::spirit::iso8859_1::space;
  LOBYTE(v92[0]) = 44;
  v108 = &v103;
  v109 = (char **)v92;
  v100 = &boost::spirit::iso8859_1::space;
  LOBYTE(v90[0]) = 59;
  v106 = (char *)&v100;
  v107 = (__int16 *)v90;
  v110 = (std::string **)&v108;
  v111 = (void **)&v106;
  v112 = (std::string *)&v110;
  v113 = (char **)&boost::spirit::iso8859_1::space;
  v114 = (std::string **)&boost::spirit::no_skip;
  v115 = (char **)&v112;
  v118 = (std::string *)&v116;
  v119 = (char **)&v114;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
  v162 = (std::string **)&v102;
  *(_QWORD *)v163 = &v118;
  LOBYTE(v99) = 93;
  v164 = &v162;
  *(_QWORD *)v165 = &v99;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v164;
  _ZN5boost6spirit2qi4ruleIPKcFNSt3__16vectorIdNS5_9allocatorIdEEEEvEKNS_5proto7exprns_4exprINSB_6tagns_3tag11logical_notENSB_7argsns_5list1IRKNS0_8terminalINS0_3tag3epsEEEEELl1EEENS0_11unused_typeESS_E6defineIN4mpl_5BOOL_ILb0EEENSD_INSF_10bitwise_orENSH_5list2IRKNSD_INSF_11shift_rightENSZ_IRKNSD_INSF_8terminalENSH_4termINS0_11terminal_exINSK_9char_codeINSK_5char_ENS0_13char_encoding8standardEEENS_6fusion6vectorIJcEEEEEEELl0EEENSD_IS11_NS12_IRS3_EELl0EEEEELl2EEERKNSD_IS10_NSZ_IRKNSD_IS10_NSZ_IS1J_RKNSD_INSF_7modulusENSZ_IRKNSD_INSF_9subscriptENSZ_IRKNSJ_INSK_7double_EEERKNS_7phoenix5actorINSC_10basic_exprINS1U_6detail3tag13function_evalENSH_5list3INS1W_IS11_NS12_INS1U_3stl9push_backEEELl0EEENS1V_INS0_9attributeILi0EEEEENS1V_INS0_8argumentILi0EEEEEEELl3EEEEEEELl2EEERKNSD_IS1P_NSZ_IRKNSD_IS11_NS12_INSK_7no_skipEEELl0EEERKNSD_ISY_NSZ_IRKNSD_ISY_NSZ_IRKNSD_IS10_NSZ_IRKNSD_INSF_11dereferenceENSI_IRKNSD_IS11_NS12_INS14_INSK_5spaceENS16_9iso8859_1EEEEELl0EEEEELl1EEES1G_EELl2EEES34_EELl2EEES2W_EELl2EEEEELl2EEEEELl2EEEEELl2EEES1J_EELl2EEEEELl2EEEEEvRST_RKT0_NSW_ILb1EEE(a1 + 672, &__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v135);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v133);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v131);
  if (SHIBYTE(v128) < 0)
    operator delete(v127[1]);
  if (SHIBYTE(v127[0]) < 0)
    operator delete(v126[0]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v147);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v145);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v143);
  if (SHIBYTE(v140) < 0)
    operator delete(v139[1]);
  if (SHIBYTE(v139[0]) < 0)
    operator delete(v138[0]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v159);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v157);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v155);
  if (SHIBYTE(v152) < 0)
    operator delete(v151[1]);
  if (SHIBYTE(v151[0]) < 0)
    operator delete(v150[0]);
  return a1;
}

void sub_217F7D210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a21);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a27);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a32);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a20);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a22);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a28);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a29);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a30);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a23);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a31);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a24);
  boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::~rule(a25);
  if (*(char *)(a26 + 31) < 0)
    operator delete(*a11);
  _Unwind_Resume(a1);
}

void sub_217F7D4CC()
{
  JUMPOUT(0x217F7D424);
}

void sub_217F7D4D4()
{
  JUMPOUT(0x217F7D42CLL);
}

void boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l>>(uint64_t a1, uint64_t a2)
{
  void *v3[2];
  char v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  boost::spirit::detail::make_action<boost::spirit::qi::domain,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type &>::operator()(a2, (uint64_t)v3);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)v11, (uint64_t)v3);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINSZ_6tagns_3tag6assignENSZ_7argsns_5list2INSY_INS6_9attributeILi0EEEEENSY_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES1M_((uint64_t *)(a1 + 32), (uint64_t)v11);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11[0]);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v7);
  if (v6 < 0)
    operator delete(v5);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_217F7D5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a41);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINSZ_6tagns_3tag6assignENSZ_7argsns_5list2INSY_INS6_9attributeILi0EEEEENSY_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES1M_(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  std::string v6;
  void *__p;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _WORD v11[25];
  char v12;
  _BYTE v13[48];
  __int16 v14;
  uint64_t (**v15[4])();

  parser_impl::parser_config::parser_config(&v6, (__int128 *)a2);
  v11[24] = *(_WORD *)(a2 + 184);
  v12 = *(_BYTE *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v13, a2 + 192);
  v13[40] = *(_BYTE *)(a2 + 232);
  v14 = *(_WORD *)(a2 + 240);
  v4 = (uint64_t *)_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINSZ_6tagns_3tag6assignENSZ_7argsns_5list2INSY_INS6_9attributeILi0EEEEENSY_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS1L_EE5valueEiE4typeE(v15, (uint64_t)&v6);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v4, a1);
  boost::function0<void>::~function0((uint64_t *)v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(__p);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217F7D6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  boost::function0<void>::~function0((uint64_t *)(v21 - 80));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_6actionIN11parser_impl13string_parserENS_7phoenix5actorINS_5proto7exprns_10basic_exprINSZ_6tagns_3tag6assignENSZ_7argsns_5list2INSY_INS6_9attributeILi0EEEEENSY_INS6_8argumentILi0EEEEEEELl2EEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS1L_EE5valueEiE4typeE(uint64_t (***a1)(), uint64_t a2))()
{
  std::string v5;
  void *__p;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _WORD v10[25];
  char v11;
  _BYTE v12[48];
  __int16 v13;

  parser_impl::parser_config::parser_config(&v5, (__int128 *)a2);
  v10[24] = *(_WORD *)(a2 + 184);
  v11 = *(_BYTE *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v12, a2 + 192);
  v12[40] = *(_BYTE *)(a2 + 232);
  v13 = *(_WORD *)(a2 + 240);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v5);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  if (v7 < 0)
    operator delete(__p);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217F7D7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  std::string v5;
  void *__p;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _WORD v10[25];
  char v11;
  _BYTE v12[48];
  __int16 v13;

  *a1 = 0;
  parser_impl::parser_config::parser_config(&v5, (__int128 *)a2);
  v10[24] = *(_WORD *)(a2 + 184);
  v11 = *(_BYTE *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v12, a2 + 192);
  v12[40] = *(_BYTE *)(a2 + 232);
  v13 = *(_WORD *)(a2 + 240);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v5);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v8);
  if (v7 < 0)
    operator delete(__p);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217F7D904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2)
{
  int v4;
  uint64_t (**v5)();
  std::string v6;
  void *__p;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _WORD v11[25];
  char v12;
  _BYTE v13[48];
  __int16 v14;

  parser_impl::parser_config::parser_config(&v6, (__int128 *)a2);
  v11[24] = *(_WORD *)(a2 + 184);
  v12 = *(_BYTE *)(a2 + 186);
  std::unordered_map<std::string,turi::flexible_type>::unordered_map((uint64_t)v13, a2 + 192);
  v13[40] = *(_BYTE *)(a2 + 232);
  v14 = *(_WORD *)(a2 + 240);
  v4 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v6, (uint64_t *)a1 + 1);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(__p);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v4)
    v5 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v5 = 0;
  *a1 = v5;
}

void sub_217F7DA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(std::string **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  return boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(std::string *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unsigned __int8 *v42;
  char v43;
  _BYTE v44[9];
  unsigned __int8 v45[16];
  std::string *v46;
  unsigned __int8 **v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v46 = 0;
  LODWORD(v47) = 0;
  BYTE4(v47) = 0;
  memset(v45, 0, 13);
  boost::initialized<turi::flexible_type>::wrapper::~wrapper((uint64_t)&v46);
  v10 = *a2;
  if (parser_impl::string_parser::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,turi::flexible_type>(a1, a2, a3, a4, a5, v45))
  {
    v43 = 1;
    v42 = v45;
    v46 = a1 + 10;
    v47 = &v42;
    v48 = a4;
    v49 = &v43;
    boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<turi::flexible_type &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)v44, (uint64_t)&a1[10], (uint64_t)&v46);
    if (v43)
    {
      v11 = 1;
    }
    else
    {
      v11 = 0;
      *a2 = v10;
    }
  }
  else
  {
    v11 = 0;
  }
  switch(v45[12])
  {
    case 2u:
      v12 = *(unint64_t **)v45;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          if (*(char *)(*(_QWORD *)v45 + 31) < 0)
            operator delete(*(void **)(*(_QWORD *)v45 + 8));
          v16 = v15;
          v17 = 0x1012C404EF22A49;
          goto LABEL_47;
        }
      }
      break;
    case 3u:
      v18 = *(unint64_t **)v45;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v22 = *(void **)(*(_QWORD *)v45 + 8);
          if (v22)
          {
            *(_QWORD *)(*(_QWORD *)v45 + 16) = v22;
            operator delete(v22);
          }
          v16 = v21;
          v17 = 0x1080C409938AC02;
          goto LABEL_47;
        }
      }
      break;
    case 4u:
      v23 = *(unint64_t **)v45;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v26 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v46 = (std::string *)(*(_QWORD *)v45 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
          goto LABEL_31;
        }
      }
      break;
    case 5u:
      v27 = *(unint64_t **)v45;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v26 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v46 = (std::string *)(*(_QWORD *)v45 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
LABEL_31:
          v16 = v26;
          v17 = 0x1020C405E66F15BLL;
          goto LABEL_47;
        }
      }
      break;
    case 8u:
      v30 = *(unint64_t **)v45;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)v45 + 16));
          v16 = v33;
          v34 = -235920773;
          goto LABEL_46;
        }
      }
      break;
    case 9u:
      v35 = *(unint64_t **)v45;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = *(_QWORD *)v45;
        if (*(_QWORD *)v45)
        {
          v39 = *(void **)(*(_QWORD *)v45 + 48);
          if (v39)
          {
            *(_QWORD *)(*(_QWORD *)v45 + 56) = v39;
            operator delete(v39);
          }
          v40 = *(void **)(v38 + 24);
          if (v40)
          {
            *(_QWORD *)(v38 + 32) = v40;
            operator delete(v40);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v38 + 8);
          v16 = v38;
          v34 = 2071181815;
LABEL_46:
          v17 = v34 | 0x1030C4000000000;
LABEL_47:
          MEMORY[0x219A19A08](v16, v17);
        }
      }
      break;
    default:
      return v11;
  }
  return v11;
}

void sub_217F7DD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  switch(a14)
  {
    case 2:
      v15 = (unint64_t *)a12;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (v17)
        goto LABEL_39;
      v18 = a12;
      if (!a12)
        goto LABEL_39;
      if (*(char *)(a12 + 31) < 0)
        operator delete(*(void **)(a12 + 8));
      v19 = (_QWORD *)v18;
      v20 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v29 = (unint64_t *)a12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_39;
      v32 = a12;
      if (!a12)
        goto LABEL_39;
      v33 = *(void **)(a12 + 8);
      if (v33)
      {
        *(_QWORD *)(a12 + 16) = v33;
        operator delete(v33);
      }
      v19 = (_QWORD *)v32;
      v20 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v21 = (unint64_t *)a12;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (v23)
        goto LABEL_39;
      v24 = a12;
      if (!a12)
        goto LABEL_39;
      a11 = a12 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
      goto LABEL_31;
    case 5:
      v34 = (unint64_t *)a12;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_39;
      v24 = a12;
      if (!a12)
        goto LABEL_39;
      a11 = a12 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
LABEL_31:
      v19 = (_QWORD *)v24;
      v20 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v37 = (unint64_t *)a12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_39;
      v40 = a12;
      if (!a12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a12 + 16));
      v19 = (_QWORD *)v40;
      v28 = -235920773;
      goto LABEL_37;
    case 9:
      v25 = (unint64_t *)a12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27 || !a12)
        goto LABEL_39;
      v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a12);
      v28 = 2071181815;
LABEL_37:
      v20 = v28 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v19, v20);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

BOOL parser_impl::string_parser::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,turi::flexible_type>(std::string *this, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  unsigned __int8 *v7;
  std::string::size_type size;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t string;
  __int128 v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unsigned int v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  BOOL v80;
  int v81;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  int v106;
  unint64_t *v108;
  unint64_t v109;
  std::string *data;
  int64_t v114;
  std::locale v116;
  std::string __dst;
  std::locale v118;
  std::locale v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE __p[32];
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  memset(__p, 0, sizeof(__p));
  if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
  {
    data = (std::string *)this[1].__r_.__value_.__l.__data_;
    size = this[1].__r_.__value_.__l.__size_;
  }
  else
  {
    data = this + 1;
    size = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
  }
  v114 = size;
  if (v7 == *a3)
  {
    v11 = 0;
    v10 = 0;
    goto LABEL_74;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v7;
  while (1)
  {
    v14 = *v13;
    if (v12 == 2)
      break;
    if (std::string::find(this, v14, 0) != -1)
      goto LABEL_72;
    if (this[7].__r_.__value_.__s.__data_[16] && this[7].__r_.__value_.__s.__data_[17] == v14)
    {
      if (this[7].__r_.__value_.__s.__data_[18])
        goto LABEL_72;
      if (v114 <= *a3 - v13)
      {
        if (!v114)
        {
LABEL_72:
          v7 = v13;
          goto LABEL_74;
        }
        v27 = 0;
        while (v13[v27] == data->__r_.__value_.__s.__data_[v27])
        {
          if (v114 == ++v27)
            goto LABEL_72;
        }
      }
    }
    v7 = v13 + 1;
    if (v12 == 1)
    {
      if (*(_QWORD *)&__p[24] > 0x7FuLL)
      {
        if (*(_QWORD *)&__p[24] == 128)
        {
          v28 = operator new(0x88uLL);
          v29 = v125;
          v28[4] = v124;
          v28[5] = v29;
          v30 = v127;
          v28[6] = v126;
          v28[7] = v30;
          v31 = v121;
          *v28 = v120;
          v28[1] = v31;
          v32 = v123;
          v28[2] = v122;
          v28[3] = v32;
          *((_BYTE *)v28 + 128) = 0;
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          *(_QWORD *)__p = v28;
          *(_OWORD *)&__p[8] = xmmword_2186CE870;
        }
        std::string::push_back((std::string *)__p, v14);
      }
      else
      {
        *((_BYTE *)&v120 + *(_QWORD *)&__p[24]) = v14;
      }
      ++*(_QWORD *)&__p[24];
      v26 = this[2].__r_.__value_.__s.__data_[0];
      if (!this[2].__r_.__value_.__s.__data_[0])
      {
        v12 = 1;
        goto LABEL_58;
      }
      v20 = this[2].__r_.__value_.__s.__data_[1];
      v12 = 1;
      goto LABEL_55;
    }
    v12 = 2;
    if (v14 != 34 && v14 != 39)
    {
      if (*(_QWORD *)&__p[24] > 0x7FuLL)
      {
        if (*(_QWORD *)&__p[24] == 128)
        {
          v33 = operator new(0x88uLL);
          v34 = v125;
          v33[4] = v124;
          v33[5] = v34;
          v35 = v127;
          v33[6] = v126;
          v33[7] = v35;
          v36 = v121;
          *v33 = v120;
          v33[1] = v36;
          v37 = v123;
          v33[2] = v122;
          v33[3] = v37;
          *((_BYTE *)v33 + 128) = 0;
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          *(_QWORD *)__p = v33;
          *(_OWORD *)&__p[8] = xmmword_2186CE870;
        }
        std::string::push_back((std::string *)__p, v14);
      }
      else
      {
        *((_BYTE *)&v120 + *(_QWORD *)&__p[24]) = v14;
      }
      ++*(_QWORD *)&__p[24];
      v26 = this[2].__r_.__value_.__s.__data_[0];
      if (!this[2].__r_.__value_.__s.__data_[0])
      {
        v12 = 1;
        goto LABEL_59;
      }
      v20 = this[2].__r_.__value_.__s.__data_[1];
      v12 = 1;
      goto LABEL_56;
    }
    v11 = v14;
    v26 = v9;
LABEL_59:
    v10 = v13;
    v9 = (v9 ^ 1) & v26;
    v13 = v7;
    if (v7 == *a3)
      goto LABEL_74;
  }
  if ((v14 != v11) | v9 & 1)
  {
    if (*(_QWORD *)&__p[24] > 0x7FuLL)
    {
      if (*(_QWORD *)&__p[24] == 128)
      {
        v15 = operator new(0x88uLL);
        v16 = v125;
        v15[4] = v124;
        v15[5] = v16;
        v17 = v127;
        v15[6] = v126;
        v15[7] = v17;
        v18 = v121;
        *v15 = v120;
        v15[1] = v18;
        v19 = v123;
        v15[2] = v122;
        v15[3] = v19;
        *((_BYTE *)v15 + 128) = 0;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        *(_QWORD *)__p = v15;
        *(_OWORD *)&__p[8] = xmmword_2186CE870;
      }
      std::string::push_back((std::string *)__p, v14);
    }
    else
    {
      *((_BYTE *)&v120 + *(_QWORD *)&__p[24]) = v14;
    }
    ++*(_QWORD *)&__p[24];
    v26 = this[2].__r_.__value_.__s.__data_[0];
    if (!this[2].__r_.__value_.__s.__data_[0])
    {
      v12 = 2;
      v7 = v13 + 1;
LABEL_58:
      v13 = v10;
      goto LABEL_59;
    }
    v20 = this[2].__r_.__value_.__s.__data_[1];
    v12 = 2;
    v7 = v13 + 1;
LABEL_55:
    v13 = v10;
LABEL_56:
    v26 = v14 == v20;
    goto LABEL_59;
  }
  if (v11 == 34)
  {
    v11 = 34;
    if (this[2].__r_.__value_.__s.__data_[2])
    {
      v7 = v13 + 2;
      if (v13 + 2 < *a3 && v13[1] == 34)
      {
        if (*(_QWORD *)&__p[24] > 0x7FuLL)
        {
          if (*(_QWORD *)&__p[24] == 128)
          {
            v21 = operator new(0x88uLL);
            v22 = v125;
            v21[4] = v124;
            v21[5] = v22;
            v23 = v127;
            v21[6] = v126;
            v21[7] = v23;
            v24 = v121;
            *v21 = v120;
            v21[1] = v24;
            v25 = v123;
            v21[2] = v122;
            v21[3] = v25;
            *((_BYTE *)v21 + 128) = 0;
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            *(_QWORD *)__p = v21;
            *(_OWORD *)&__p[8] = xmmword_2186CE870;
          }
          std::string::push_back((std::string *)__p, 34);
        }
        else
        {
          *((_BYTE *)&v120 + *(_QWORD *)&__p[24]) = 34;
        }
        ++*(_QWORD *)&__p[24];
        v26 = this[2].__r_.__value_.__s.__data_[0];
        if (!this[2].__r_.__value_.__s.__data_[0])
        {
          v12 = 2;
          goto LABEL_58;
        }
        v14 = this[2].__r_.__value_.__s.__data_[1];
        v12 = 2;
        v20 = 34;
        goto LABEL_55;
      }
    }
  }
  v7 = v13 + 1;
LABEL_74:
  v38 = *a2;
  if (v7 != *a2)
  {
    *a2 = v7;
    if (this[9].__r_.__value_.__s.__data_[16] && v10)
    {
      std::string::basic_string[abi:ne180100](&__dst, v10, v7 - v10);
      MEMORY[0x219A19828](&v116);
      LODWORD(v118.__locale_) = 0x4000;
      std::locale::locale(&v119, &v116);
      boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(&__dst, &v118);
      std::locale::~locale(&v119);
      std::locale::~locale(&v116);
      v39 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(this[8].__r_.__value_.__r.__words, (unsigned __int8 *)&__dst);
      v40 = v39;
      if (v39)
      {
        v41 = v39 + 40;
        if (v39 + 40 != a6)
        {
          switch(a6[12])
          {
            case 2u:
              v42 = *(unint64_t **)a6;
              do
              {
                v43 = __ldaxr(v42);
                v44 = v43 - 1;
              }
              while (__stlxr(v44, v42));
              if (!v44)
              {
                v45 = *(unint64_t **)a6;
                if (!*(_QWORD *)a6)
                  goto LABEL_134;
                if (*((char *)v45 + 31) < 0)
                  operator delete((void *)v45[1]);
                v46 = v45;
                v47 = 0x1012C404EF22A49;
                goto LABEL_133;
              }
              break;
            case 3u:
              v59 = *(unint64_t **)a6;
              do
              {
                v60 = __ldaxr(v59);
                v61 = v60 - 1;
              }
              while (__stlxr(v61, v59));
              if (!v61)
              {
                v62 = *(unint64_t **)a6;
                if (!*(_QWORD *)a6)
                  goto LABEL_134;
                v63 = (void *)v62[1];
                if (v63)
                {
                  v62[2] = (unint64_t)v63;
                  operator delete(v63);
                }
                v46 = v62;
                v47 = 0x1080C409938AC02;
                goto LABEL_133;
              }
              break;
            case 4u:
              v64 = *(unint64_t **)a6;
              do
              {
                v65 = __ldaxr(v64);
                v66 = v65 - 1;
              }
              while (__stlxr(v66, v64));
              if (!v66)
              {
                v67 = *(unint64_t **)a6;
                if (!*(_QWORD *)a6)
                  goto LABEL_134;
                v118.__locale_ = (std::locale::__imp *)(v67 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
                goto LABEL_121;
              }
              break;
            case 5u:
              v68 = *(unint64_t **)a6;
              do
              {
                v69 = __ldaxr(v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, v68));
              if (!v70)
              {
                v67 = *(unint64_t **)a6;
                if (!*(_QWORD *)a6)
                  goto LABEL_134;
                v118.__locale_ = (std::locale::__imp *)(v67 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
LABEL_121:
                v46 = v67;
                v47 = 0x1020C405E66F15BLL;
                goto LABEL_133;
              }
              break;
            case 8u:
              v71 = *(unint64_t **)a6;
              do
              {
                v72 = __ldaxr(v71);
                v73 = v72 - 1;
              }
              while (__stlxr(v73, v71));
              if (!v73)
              {
                v74 = *(unint64_t **)a6;
                if (!*(_QWORD *)a6)
                  goto LABEL_134;
                boost::detail::shared_count::~shared_count((unsigned int **)v74 + 2);
                v46 = v74;
                v75 = -235920773;
                goto LABEL_132;
              }
              break;
            case 9u:
              v76 = *(unint64_t **)a6;
              do
              {
                v77 = __ldaxr(v76);
                v78 = v77 - 1;
              }
              while (__stlxr(v78, v76));
              if (!v78)
              {
                if (*(_QWORD *)a6)
                {
                  v46 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a6);
                  v75 = 2071181815;
LABEL_132:
                  v47 = v75 | 0x1030C4000000000;
LABEL_133:
                  MEMORY[0x219A19A08](v46, v47);
                }
LABEL_134:
                *(_QWORD *)a6 = 0;
              }
              break;
            default:
              break;
          }
          v79 = (_QWORD *)*v41;
          *(_QWORD *)(a6 + 5) = *(_QWORD *)(v40 + 45);
          *(_QWORD *)a6 = v79;
          LODWORD(v79) = v40[52];
          a6[12] = v79;
          v80 = v79 > 9;
          v81 = (1 << (char)v79) & 0x33C;
          if (!v80 && v81 != 0)
          {
            v83 = *(unint64_t **)a6;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 + 1, v83));
          }
        }
        goto LABEL_179;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    v49 = *(_OWORD *)string;
    __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(string + 16);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v49;
    *(_QWORD *)(string + 8) = 0;
    *(_QWORD *)(string + 16) = 0;
    *(_QWORD *)string = 0;
    if (v11)
    {
      turi::unescape_string(&__dst, (unint64_t *)this[2].__r_.__value_.__s.__data_[0], this[2].__r_.__value_.__s.__data_[1], v11, this[2].__r_.__value_.__s.__data_[2] != 0);
    }
    else
    {
      MEMORY[0x219A19828](&v116);
      LODWORD(v118.__locale_) = 0x4000;
      std::locale::locale(&v119, &v116);
      boost::algorithm::trim_right_if<std::string,boost::algorithm::detail::is_classifiedF>(&__dst, &v118);
      std::locale::~locale(&v119);
      std::locale::~locale(&v116);
    }
    if (this[9].__r_.__value_.__s.__data_[16]
      || (v50 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(this[8].__r_.__value_.__r.__words, (unsigned __int8 *)&__dst), (v51 = v50) == 0))
    {
      turi::flexible_type::operator=<std::string>((uint64_t *)a6, (__int128 *)&__dst);
    }
    else
    {
      v52 = v50 + 40;
      if (v50 + 40 != a6)
      {
        switch(a6[12])
        {
          case 2u:
            v53 = *(unint64_t **)a6;
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              v56 = *(_QWORD *)a6;
              if (!*(_QWORD *)a6)
                goto LABEL_172;
              if (*(char *)(v56 + 31) < 0)
                operator delete(*(void **)(v56 + 8));
              v57 = (_QWORD *)v56;
              v58 = 0x1012C404EF22A49;
              goto LABEL_171;
            }
            break;
          case 3u:
            v85 = *(unint64_t **)a6;
            do
            {
              v86 = __ldaxr(v85);
              v87 = v86 - 1;
            }
            while (__stlxr(v87, v85));
            if (!v87)
            {
              v88 = *(_QWORD *)a6;
              if (!*(_QWORD *)a6)
                goto LABEL_172;
              v89 = *(void **)(v88 + 8);
              if (v89)
              {
                *(_QWORD *)(v88 + 16) = v89;
                operator delete(v89);
              }
              v57 = (_QWORD *)v88;
              v58 = 0x1080C409938AC02;
              goto LABEL_171;
            }
            break;
          case 4u:
            v90 = *(unint64_t **)a6;
            do
            {
              v91 = __ldaxr(v90);
              v92 = v91 - 1;
            }
            while (__stlxr(v92, v90));
            if (!v92)
            {
              v93 = *(_QWORD *)a6;
              if (!*(_QWORD *)a6)
                goto LABEL_172;
              v118.__locale_ = (std::locale::__imp *)(v93 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
              goto LABEL_159;
            }
            break;
          case 5u:
            v94 = *(unint64_t **)a6;
            do
            {
              v95 = __ldaxr(v94);
              v96 = v95 - 1;
            }
            while (__stlxr(v96, v94));
            if (!v96)
            {
              v93 = *(_QWORD *)a6;
              if (!*(_QWORD *)a6)
                goto LABEL_172;
              v118.__locale_ = (std::locale::__imp *)(v93 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
LABEL_159:
              v57 = (_QWORD *)v93;
              v58 = 0x1020C405E66F15BLL;
              goto LABEL_171;
            }
            break;
          case 8u:
            v97 = *(unint64_t **)a6;
            do
            {
              v98 = __ldaxr(v97);
              v99 = v98 - 1;
            }
            while (__stlxr(v99, v97));
            if (!v99)
            {
              v100 = *(_QWORD *)a6;
              if (!*(_QWORD *)a6)
                goto LABEL_172;
              boost::detail::shared_count::~shared_count((unsigned int **)(v100 + 16));
              v57 = (_QWORD *)v100;
              v101 = -235920773;
              goto LABEL_170;
            }
            break;
          case 9u:
            v102 = *(unint64_t **)a6;
            do
            {
              v103 = __ldaxr(v102);
              v104 = v103 - 1;
            }
            while (__stlxr(v104, v102));
            if (!v104)
            {
              if (*(_QWORD *)a6)
              {
                v57 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a6);
                v101 = 2071181815;
LABEL_170:
                v58 = v101 | 0x1030C4000000000;
LABEL_171:
                MEMORY[0x219A19A08](v57, v58);
              }
LABEL_172:
              *(_QWORD *)a6 = 0;
            }
            break;
          default:
            break;
        }
        v105 = (_QWORD *)*v52;
        *(_QWORD *)(a6 + 5) = *(_QWORD *)(v51 + 45);
        *(_QWORD *)a6 = v105;
        LODWORD(v105) = v51[52];
        a6[12] = v105;
        v80 = v105 > 9;
        v106 = (1 << (char)v105) & 0x33C;
        if (!v80 && v106 != 0)
        {
          v108 = *(unint64_t **)a6;
          do
            v109 = __ldaxr(v108);
          while (__stlxr(v109 + 1, v108));
        }
      }
    }
LABEL_179:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  return v7 != v38;
}

void sub_217F7E9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a24 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  _Unwind_Resume(exception_object);
}

void _ZN5boost6spirit2qi4ruleIPKcFN4turi13flexible_typeEvEKNS_5proto7exprns_4exprINS8_6tagns_3tag11logical_notENS8_7argsns_5list1IRKNS0_8terminalINS0_3tag3epsEEEEELl1EEENS0_11unused_typeESP_E6defineIN4mpl_5BOOL_ILb0EEENSA_INSC_10bitwise_orENSE_5list2IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_INSC_9subscriptENSW_IRNSG_INSH_12stateful_tagINS5_20strict_real_policiesIdEENSH_7double_EdSP_EEEERKNS_7phoenix5actorINS9_10basic_exprINSC_6assignENSW_INS16_INS0_9attributeILi0EEEEENS16_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSA_ISX_NSW_IRKNSG_INSH_9long_longEEES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNSt3__16vectorIdNS20_9allocatorIdEEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS21_IS6_NS22_IS6_EEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS21_INS20_4pairIS6_S6_EENS22_IS2U_EEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNSA_INSC_8terminalENSE_4termINS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS3B_13parser_configEEEEEEEELl0EEES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_ISL_RKNS16_INS17_IS18_NSW_IS1B_NS16_INS17_IS38_NS39_IS6_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEEEEvRSQ_RKT0_NST_ILb1EEE(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  char v4;
  __int16 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  __int16 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];

  v34[3] = *MEMORY[0x24BDAC8D0];
  _ZNK5boost6spirit6detail11make_binaryINS0_2qi6domainENS_5proto6tagns_3tag10bitwise_orENS0_13meta_compilerIS4_E12meta_grammarELb1EE4implIRKNS5_7exprns_4exprIS8_NS5_7argsns_5list2IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_INS7_9subscriptENSH_IRNS0_8terminalINS0_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSK_7double_EdNS0_11unused_typeEEEEERKNS_7phoenix5actorINSE_10basic_exprINS7_6assignENSH_INSV_INS0_9attributeILi0EEEEENSV_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_9long_longEEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS3_4ruleIPKcFNSt3__16vectorIdNS1S_9allocatorIdEEEEvEKNSF_INS7_8terminalENSG_4termINSK_9char_codeINSK_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEESQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS1P_IS1R_FNS1T_INSM_13flexible_typeENS1U_IS2I_EEEEvES27_SQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS1P_IS1R_FNS1T_INS1S_4pairIS2I_S2I_EENS1U_IS2X_EEEEvES27_SQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNSF_IS1Y_NS1Z_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS3C_13parser_configEEEEEEEELl0EEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_3epsEEERKNSV_INSW_ISX_NSH_IS10_NSV_INSW_IS1Y_NS1Z_IS2I_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEERKN4mpl_5void_ERSQ_EclES4E_S4I_S4J_(a2, (uint64_t)&v3);
  v19 = v3;
  v20 = v4;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v24 = v8;
  v25 = v9;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v26, (uint64_t)&v10);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS12_6tagns_3tag6assignENS12_7argsns_5list2INS11_INS6_9attributeILi0EEEEENS11_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSV_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1I_EENS9_INSV_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1P_9allocatorIdEEEEvEKNS13_4exprINS16_11logical_notENS18_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_ISB_NS1R_ISB_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_INS1P_4pairISB_SB_EENS1R_IS2K_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_IN11parser_impl13string_parserES1I_EENS9_INSV_ISL_NS11_INS14_IS17_NS19_IS1C_NS11_INS14_INS16_8terminalENS18_4termISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES3H_((uint64_t *)(a1 + 32), (uint64_t)&v19);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v34);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v33);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v18);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  if (v13 < 0)
    operator delete(__p);
  if (v11 < 0)
    operator delete(v10);
}

void sub_217F7EB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a54);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS12_6tagns_3tag6assignENS12_7argsns_5list2INS11_INS6_9attributeILi0EEEEENS11_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSV_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1I_EENS9_INSV_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1P_9allocatorIdEEEEvEKNS13_4exprINS16_11logical_notENS18_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_ISB_NS1R_ISB_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_INS1P_4pairISB_SB_EENS1R_IS2K_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_IN11parser_impl13string_parserES1I_EENS9_INSV_ISL_NS11_INS14_IS17_NS19_IS1C_NS11_INS14_INS16_8terminalENS18_4termISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES3H_(uint64_t *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t (**v5[4])();
  __int16 v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  v6 = *(_WORD *)a2;
  v7 = *(_BYTE *)(a2 + 2);
  v8 = *(_WORD *)(a2 + 8);
  v9 = *(_BYTE *)(a2 + 10);
  v3 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  v11 = v3;
  v12 = *(_OWORD *)(a2 + 48);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v13, a2 + 64);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS12_6tagns_3tag6assignENS12_7argsns_5list2INS11_INS6_9attributeILi0EEEEENS11_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSV_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1I_EENS9_INSV_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1P_9allocatorIdEEEEvEKNS13_4exprINS16_11logical_notENS18_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_ISB_NS1R_ISB_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_INS1P_4pairISB_SB_EENS1R_IS2K_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_IN11parser_impl13string_parserES1I_EENS9_INSV_ISL_NS11_INS14_IS17_NS19_IS1C_NS11_INS14_INS16_8terminalENS18_4termISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS3G_EE5valueEiE4typeE(v5, &v6);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap((uint64_t *)v5, a1);
  boost::function0<void>::~function0((uint64_t *)v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v21);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  return a1;
}

void sub_217F7ECD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::function0<void>::~function0((uint64_t *)va);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS12_6tagns_3tag6assignENS12_7argsns_5list2INS11_INS6_9attributeILi0EEEEENS11_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSV_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1I_EENS9_INSV_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1P_9allocatorIdEEEEvEKNS13_4exprINS16_11logical_notENS18_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_ISB_NS1R_ISB_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_INS1P_4pairISB_SB_EENS1R_IS2K_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_IN11parser_impl13string_parserES1I_EENS9_INSV_ISL_NS11_INS14_IS17_NS19_IS1C_NS11_INS14_INS16_8terminalENS18_4termISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS3G_EE5valueEiE4typeE(uint64_t (***a1)(), __int16 *a2))()
{
  __int128 v3;
  __int16 v5;
  char v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 2);
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 10);
  v3 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 1);
  v10 = v3;
  v11 = *((_OWORD *)a2 + 3);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v12, (uint64_t)(a2 + 32));
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v20);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  return a1;
}

void sub_217F7EDF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v3;
  __int16 v5;
  char v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  v5 = *(_WORD *)a2;
  v6 = *(_BYTE *)(a2 + 2);
  v7 = *(_WORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 10);
  v3 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  v10 = v3;
  v11 = *(_OWORD *)(a2 + 48);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v12, a2 + 64);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(a1, &v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v20);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  return a1;
}

void sub_217F7EF10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), __int16 *a2)
{
  __int128 v3;
  int v4;
  uint64_t (**v5)();
  __int16 v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 2);
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 10);
  v3 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 1);
  v11 = v3;
  v12 = *((_OWORD *)a2 + 3);
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v13, (uint64_t)(a2 + 32));
  v4 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v6, (uint64_t *)a1 + 1);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v21);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v4)
    v5 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v5 = 0;
  *a1 = v5;
}

void sub_217F7F044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

BOOL boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[4];

  v5 = *a1;
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  return boost::fusion::any<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>>(v5, (uint64_t)v7);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  __int16 *v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(__int16 **)result;
      v6 = operator new();
      v7 = *v5;
      *(_BYTE *)(v6 + 2) = *((_BYTE *)v5 + 2);
      *(_WORD *)v6 = v7;
      LOBYTE(v7) = *((_BYTE *)v5 + 10);
      *(_WORD *)(v6 + 8) = v5[4];
      *(_BYTE *)(v6 + 10) = v7;
      *(_OWORD *)(v6 + 16) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(v6 + 32) = *((_OWORD *)v5 + 2);
      *(_OWORD *)(v6 + 48) = *((_OWORD *)v5 + 3);
      result = boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(v6 + 64, (uint64_t)(v5 + 32));
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v8 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(v8 + 328);
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v8 + 256);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 200);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 160);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 120);
        if (*(char *)(v8 + 111) < 0)
          operator delete(*(void **)(v8 + 88));
        if (*(char *)(v8 + 87) < 0)
          operator delete(*(void **)(v8 + 64));
        result = MEMORY[0x219A19A08](v8, 0x10F2C400BC9F32ALL);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CCD3CLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CCD3CLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F7F234(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C400BC9F32ALL);
  _Unwind_Resume(a1);
}

BOOL boost::fusion::any<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void **v5;
  uint64_t v6;

  v3 = *(uint64_t **)a2;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(void ***)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  return (boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1, *(uint64_t **)a2, v4, (uint64_t)v5) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 8, v3, v4, (uint64_t)v5, v6) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((uint64_t *)(a1 + 16), v3, (uint64_t)v4, (uint64_t)v5) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 32, v3, (uint64_t)v4,
            v5) & 1) != 0
      || (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 48, v3, (uint64_t)v4, v5) & 1) != 0|| (boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((std::string *)(a1 + 64), (unsigned __int8 **)v3, (unsigned __int8 **)v4, (uint64_t)v5, v6) & 1) != 0|| boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 312, v3, (uint64_t)v4, (uint64_t)v5);
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  _QWORD v13[4];
  char v14;

  v10 = 0;
  v7 = *a2;
  if (!boost::spirit::qi::detail::real_impl<double,turi::strict_real_policies<double>>::parse<char const*,double>(a2, a3, (double *)&v10))return 0;
  v8 = 1;
  v12 = 1;
  v11 = &v10;
  v13[0] = a1 + 1;
  v13[1] = &v11;
  v13[2] = a4;
  v13[3] = &v12;
  boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<double &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)&v14, a1 + 1, (uint64_t)v13);
  if (!v12)
  {
    v8 = 0;
    *a2 = v7;
  }
  return v8;
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  _QWORD v14[4];
  char v15;

  v11 = 0;
  v8 = *a2;
  if (!boost::spirit::qi::any_int_parser<long long,10u,1u,-1>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,long long>(a1, a2, a3, a4, a5, &v11))return 0;
  v9 = 1;
  v13 = 1;
  v12 = &v11;
  v14[0] = a1 + 1;
  v14[1] = &v12;
  v14[2] = a4;
  v14[3] = &v13;
  boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<long long &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)&v15, a1 + 1, (uint64_t)v14);
  if (!v13)
  {
    v9 = 0;
    *a2 = v8;
  }
  return v9;
}

uint64_t boost::spirit::qi::any_int_parser<long long,10u,1u,-1>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,long long>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unsigned __int8 *v6;
  int v8;
  uint64_t result;

  v6 = (unsigned __int8 *)*a2;
  if (*a2 == *a3)
    return 0;
  v8 = *v6;
  if ((v8 == 45 || v8 == 43) && (*a2 = (uint64_t)(v6 + 1), v8 == 45))
  {
    if ((boost::spirit::qi::detail::extract_int<long long,10u,1u,-1,boost::spirit::qi::detail::negative_accumulator<10u>,false,false>::parse_main<char const*,long long>(a2, a3, a6) & 1) == 0)
    {
LABEL_6:
      result = 0;
      *a2 = (uint64_t)v6;
      return result;
    }
  }
  else if ((boost::spirit::qi::detail::extract_int<long long,10u,1u,-1,boost::spirit::qi::detail::positive_accumulator<10u>,false,false>::parse_main<char const*,long long>(a2, a3, a6) & 1) == 0)
  {
    goto LABEL_6;
  }
  return 1;
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *__p;
  void *v11;
  uint64_t v12;
  void **p_p;
  char v14;
  _QWORD v15[4];
  char v16;

  __p = 0;
  v11 = 0;
  v12 = 0;
  v7 = *a2;
  if (boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::vector<double>>(a1))
  {
    v14 = 1;
    p_p = &__p;
    v15[0] = a1 + 1;
    v15[1] = &p_p;
    v15[2] = a4;
    v15[3] = &v14;
    boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<std::vector<double> &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)&v16, (uint64_t)(a1 + 1), (uint64_t)v15);
    if (v14)
    {
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *a2 = v7;
    }
  }
  else
  {
    v8 = 0;
  }
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_217F7F628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::vector<double>>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)(v1 + 32);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::dummy::nonnull;
  else
    v4 = 0;
  return v4
      && (boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v2) & 1) != 0;
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  char v12;
  void **v13[4];
  _BYTE v14[9];

  boost::spirit::traits::make_attribute<std::vector<turi::flexible_type>,boost::spirit::unused_type const>::call(v10);
  v7 = *a2;
  if (boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::vector<turi::flexible_type>>((uint64_t *)a1))
  {
    v12 = 1;
    v11 = v10;
    v13[0] = (void **)(a1 + 8);
    v13[1] = (void **)&v11;
    v13[2] = a4;
    v13[3] = (void **)&v12;
    boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<std::vector<turi::flexible_type> &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)v14, a1 + 8, (uint64_t)v13);
    if (v12)
    {
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *a2 = v7;
    }
  }
  else
  {
    v8 = 0;
  }
  v13[0] = (void **)v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v13);
  return v8;
}

void sub_217F7F774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 56) = &a10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 56));
  _Unwind_Resume(a1);
}

BOOL boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::vector<turi::flexible_type>>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)(v1 + 32);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::dummy::nonnull;
  else
    v4 = 0;
  return v4
      && (boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v2) & 1) != 0;
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  char v12;
  void **v13[4];
  _BYTE v14[9];

  boost::spirit::traits::make_attribute<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,boost::spirit::unused_type const>::call(v10);
  v7 = *a2;
  if (boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t *)a1))
  {
    v12 = 1;
    v11 = v10;
    v13[0] = (void **)(a1 + 8);
    v13[1] = (void **)&v11;
    v13[2] = a4;
    v13[3] = (void **)&v12;
    boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)v14, a1 + 8, (uint64_t)v13);
    if (v12)
    {
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *a2 = v7;
    }
  }
  else
  {
    v8 = 0;
  }
  v13[0] = (void **)v10;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v13);
  return v8;
}

void sub_217F7F8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  *(_QWORD *)(v10 - 56) = &a10;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 56));
  _Unwind_Resume(a1);
}

BOOL boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)(v1 + 32);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::dummy::nonnull;
  else
    v4 = 0;
  return v4
      && (boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v2) & 1) != 0;
}

BOOL boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  char v8;
  char *v9;
  unsigned __int8 v10;
  _QWORD v11[4];
  char v12;

  v5 = *a2;
  v10 = 1;
  v9 = &v8;
  v11[0] = a1 + 8;
  v11[1] = &v9;
  v11[2] = a4;
  v11[3] = &v10;
  boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>> const*,boost::fusion::vector<boost::spirit::unused_type &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)&v12, a1 + 8, (uint64_t)v11);
  v6 = v10;
  if (!v10)
    *a2 = v5;
  return v6 != 0;
}

uint64_t *boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(uint64_t a1, _QWORD *a2)
{
  __int16 v4;
  char v5;
  __int16 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;
  char v12;
  __int16 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::stateful_tag<turi::strict_real_policies<double>,boost::spirit::tag::double_,double,boost::spirit::unused_type>> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::terminal<boost::spirit::tag::long_long> const&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(a2, (uint64_t)&v4);
  v11 = v4;
  v12 = v5;
  v13 = v6;
  v14 = v7;
  v15 = v8;
  v16 = v9;
  v17 = v10;
  return _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS12_6tagns_3tag6assignENS12_7argsns_5list2INS11_INS6_9attributeILi0EEEEENS11_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSV_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1I_EENS9_INSV_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1P_9allocatorIdEEEEvEKNS13_4exprINS16_11logical_notENS18_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_ISB_NS1R_ISB_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_INS1P_4pairISB_SB_EENS1R_IS2K_EEEEvES26_S27_S27_EEEES1I_EESD_EEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES33_((uint64_t *)(a1 + 32), &v11);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS12_6tagns_3tag6assignENS12_7argsns_5list2INS11_INS6_9attributeILi0EEEEENS11_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSV_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1I_EENS9_INSV_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorIdNS1P_9allocatorIdEEEEvEKNS13_4exprINS16_11logical_notENS18_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_ISB_NS1R_ISB_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_INS1P_4pairISB_SB_EENS1R_IS2K_EEEEvES26_S27_S27_EEEES1I_EESD_EEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES33_(uint64_t *a1, __int16 *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v7[4];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int16 v11;
  char v12;
  __int16 v13;
  char v14;

  v3 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 1);
  v13 = *a2;
  v14 = *((_BYTE *)a2 + 2);
  v11 = a2[4];
  v12 = *((_BYTE *)a2 + 10);
  v8 = *((_OWORD *)a2 + 3);
  v9 = v3;
  v4 = operator new();
  *(_WORD *)v4 = v13;
  *(_BYTE *)(v4 + 2) = v14;
  *(_WORD *)(v4 + 8) = v11;
  *(_BYTE *)(v4 + 10) = v12;
  v5 = v9;
  *(_OWORD *)(v4 + 16) = v10;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = v8;
  v7[0] = (uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>,mpl_::BOOL_<false>>)::stored_vtable;
  v7[1] = v4;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v7, a1);
  boost::function0<void>::~function0(v7);
  return a1;
}

void sub_217F7FAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  __int16 *v5;
  __int16 v6;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(__int16 **)result;
      result = operator new();
      v6 = *v5;
      *(_BYTE *)(result + 2) = *((_BYTE *)v5 + 2);
      *(_WORD *)result = v6;
      LOBYTE(v6) = *((_BYTE *)v5 + 10);
      *(_WORD *)(result + 8) = v5[4];
      *(_BYTE *)(result + 10) = v6;
      *(_OWORD *)(result + 16) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(result + 32) = *((_OWORD *)v5 + 2);
      *(_OWORD *)(result + 48) = *((_OWORD *)v5 + 3);
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x60C40D76D27DFLL);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CD0DALL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CD0DALL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(uint64_t *a1, uint64_t *a2, uint64_t *a3, void **a4, uint64_t a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t *a3, void **a4, uint64_t a5)
{
  if ((boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1, a2, a3, (uint64_t)a4) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 8, a2, a3, (uint64_t)a4, a5) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((uint64_t *)(a1 + 16), a2, (uint64_t)a3, (uint64_t)a4) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 32, a2, (uint64_t)a3,
          a4) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 48, a2, (uint64_t)a3, a4);
  }
}

void _ZN5boost6spirit2qi4ruleIPKcFN4turi13flexible_typeEvEKNS_5proto7exprns_4exprINS8_6tagns_3tag11logical_notENS8_7argsns_5list1IRKNS0_8terminalINS0_3tag3epsEEEEELl1EEENS0_11unused_typeESP_E6defineIN4mpl_5BOOL_ILb0EEENSA_INSC_10bitwise_orENSE_5list2IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_ISV_NSW_IRKNSA_INSC_9subscriptENSW_IRNSG_INSH_12stateful_tagINS5_20strict_real_policiesIdEENSH_7double_EdSP_EEEERKNS_7phoenix5actorINS9_10basic_exprINSC_6assignENSW_INS16_INS0_9attributeILi0EEEEENS16_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSA_ISX_NSW_IRKNSG_INSH_9long_longEEES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNSt3__16vectorIS6_NS20_9allocatorIS6_EEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNS2_IS4_FNS21_INS20_4pairIS6_S6_EENS22_IS2H_EEEEvESO_SP_SP_EES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_IRNSA_INSC_8terminalENSE_4termINS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS2Y_13parser_configEEEEEEEELl0EEES1J_EELl2EEEEELl2EEERKNSA_ISX_NSW_ISL_RKNS16_INS17_IS18_NSW_IS1B_NS16_INS17_IS2V_NS2W_IS6_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEEEEvRSQ_RKT0_NST_ILb1EEE(uint64_t a1, uint64_t *a2)
{
  __int16 v3;
  char v4;
  __int16 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  __int16 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[4];

  v32[3] = *MEMORY[0x24BDAC8D0];
  _ZNK5boost6spirit6detail11make_binaryINS0_2qi6domainENS_5proto6tagns_3tag10bitwise_orENS0_13meta_compilerIS4_E12meta_grammarELb1EE4implIRKNS5_7exprns_4exprIS8_NS5_7argsns_5list2IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_IS8_NSH_IRKNSF_INS7_9subscriptENSH_IRNS0_8terminalINS0_3tag12stateful_tagIN4turi20strict_real_policiesIdEENSK_7double_EdNS0_11unused_typeEEEEERKNS_7phoenix5actorINSE_10basic_exprINS7_6assignENSH_INSV_INS0_9attributeILi0EEEEENSV_INS0_8argumentILi0EEEEEEELl2EEEEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_9long_longEEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS3_4ruleIPKcFNSt3__16vectorINSM_13flexible_typeENS1S_9allocatorIS1U_EEEEvEKNSF_INS7_8terminalENSG_4termINSK_9char_codeINSK_5spaceENS0_13char_encoding9iso8859_1EEEEELl0EEESQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNS1P_IS1R_FNS1T_INS1S_4pairIS1U_S1U_EENS1V_IS2K_EEEEvES28_SQ_SQ_EES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRNSF_IS1Z_NS20_INS0_11terminal_exIN11parser_impl3tag17restricted_stringENS_6fusion6vectorIJNS2Z_13parser_configEEEEEEEELl0EEES18_EELl2EEEEELl2EEERKNSF_ISI_NSH_IRKNSJ_INSK_3epsEEERKNSV_INSW_ISX_NSH_IS10_NSV_INSW_IS1Z_NS20_IS1U_EELl0EEEEEEELl2EEEEEEELl2EEEEELl2EEERKN4mpl_5void_ERSQ_EclES41_S45_S46_(a2, (uint64_t)&v3);
  v18 = v3;
  v19 = v4;
  v20 = v5;
  v21 = v6;
  v22 = v7;
  v23 = v8;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v24, (uint64_t)&v9);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS12_6tagns_3tag6assignENS12_7argsns_5list2INS11_INS6_9attributeILi0EEEEENS11_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSV_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1I_EENS9_INSV_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorISB_NS1P_9allocatorISB_EEEEvEKNS13_4exprINS16_11logical_notENS18_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_INS1P_4pairISB_SB_EENS1R_IS2D_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_IN11parser_impl13string_parserES1I_EENS9_INSV_ISL_NS11_INS14_IS17_NS19_IS1C_NS11_INS14_INS16_8terminalENS18_4termISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES39_((uint64_t *)(a1 + 32), (uint64_t)&v18);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v32);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v30);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v29);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)&v17);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  if (v12 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(v9);
}

void sub_217F7FE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)&a52);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS12_6tagns_3tag6assignENS12_7argsns_5list2INS11_INS6_9attributeILi0EEEEENS11_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSV_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1I_EENS9_INSV_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorISB_NS1P_9allocatorISB_EEEEvEKNS13_4exprINS16_11logical_notENS18_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_INS1P_4pairISB_SB_EENS1R_IS2D_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_IN11parser_impl13string_parserES1I_EENS9_INSV_ISL_NS11_INS14_IS17_NS19_IS1C_NS11_INS14_INS16_8terminalENS18_4termISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES39_(uint64_t *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t (**v5[4])();
  __int16 v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v6 = *(_WORD *)a2;
  v7 = *(_BYTE *)(a2 + 2);
  v8 = *(_WORD *)(a2 + 8);
  v9 = *(_BYTE *)(a2 + 10);
  v3 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  v11 = v3;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v12, a2 + 48);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS12_6tagns_3tag6assignENS12_7argsns_5list2INS11_INS6_9attributeILi0EEEEENS11_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSV_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1I_EENS9_INSV_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorISB_NS1P_9allocatorISB_EEEEvEKNS13_4exprINS16_11logical_notENS18_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_INS1P_4pairISB_SB_EENS1R_IS2D_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_IN11parser_impl13string_parserES1I_EENS9_INSV_ISL_NS11_INS14_IS17_NS19_IS1C_NS11_INS14_INS16_8terminalENS18_4termISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS38_EE5valueEiE4typeE(v5, &v6);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap((uint64_t *)v5, a1);
  boost::function0<void>::~function0((uint64_t *)v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v20);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  return a1;
}

void sub_217F7FF98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  boost::function0<void>::~function0((uint64_t *)va);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_6actionINSJ_15any_real_parserIdNSA_20strict_real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS12_6tagns_3tag6assignENS12_7argsns_5list2INS11_INS6_9attributeILi0EEEEENS11_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSV_INSJ_14any_int_parserIxLj10ELj1ELin1EEES1I_EENS9_INSV_INSJ_9referenceIKNSJ_4ruleIS2_FNSt3__16vectorISB_NS1P_9allocatorISB_EEEEvEKNS13_4exprINS16_11logical_notENS18_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES27_EEEES1I_EENS9_INSV_INS1N_IKNS1O_IS2_FNS1Q_INS1P_4pairISB_SB_EENS1R_IS2D_EEEEvES26_S27_S27_EEEES1I_EENS9_INSV_IN11parser_impl13string_parserES1I_EENS9_INSV_ISL_NS11_INS14_IS17_NS19_IS1C_NS11_INS14_INS16_8terminalENS18_4termISB_EELl0EEEEEEELl2EEEEEEESD_EEEEEEEEEEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS38_EE5valueEiE4typeE(uint64_t (***a1)(), __int16 *a2))()
{
  __int128 v3;
  __int16 v5;
  char v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 2);
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 10);
  v3 = *((_OWORD *)a2 + 2);
  v9 = *((_OWORD *)a2 + 1);
  v10 = v3;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v11, (uint64_t)(a2 + 24));
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v19);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  return a1;
}

void sub_217F800B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v3;
  __int16 v5;
  char v6;
  __int16 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  v5 = *(_WORD *)a2;
  v6 = *(_BYTE *)(a2 + 2);
  v7 = *(_WORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 10);
  v3 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  v10 = v3;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v11, a2 + 48);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(a1, &v5);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v19);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v15);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  return a1;
}

void sub_217F801C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), __int16 *a2)
{
  __int128 v3;
  int v4;
  uint64_t (**v5)();
  __int16 v6;
  char v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *((_BYTE *)a2 + 2);
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 10);
  v3 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 1);
  v11 = v3;
  boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons((uint64_t)&v12, (uint64_t)(a2 + 24));
  v4 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v6, (uint64_t *)a1 + 1);
  boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr((uint64_t)v20);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v16);
  if (v15 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12);
  if (v4)
    v5 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v5 = 0;
  *a1 = v5;
}

void sub_217F802F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>::~cons((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

BOOL boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(std::string **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string *v5;
  _QWORD v7[4];

  v5 = *a1;
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v7[3] = a5;
  return boost::fusion::any<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>,boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>>(v5, (uint64_t)v7);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  __int16 *v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(__int16 **)result;
      v6 = operator new();
      v7 = *v5;
      *(_BYTE *)(v6 + 2) = *((_BYTE *)v5 + 2);
      *(_WORD *)v6 = v7;
      LOBYTE(v7) = *((_BYTE *)v5 + 10);
      *(_WORD *)(v6 + 8) = v5[4];
      *(_BYTE *)(v6 + 10) = v7;
      *(_OWORD *)(v6 + 16) = *((_OWORD *)v5 + 1);
      *(_OWORD *)(v6 + 32) = *((_OWORD *)v5 + 2);
      result = boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>::cons(v6 + 48, (uint64_t)(v5 + 24));
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v8 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>::~basic_expr(v8 + 312);
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v8 + 240);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 184);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 144);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v8 + 104);
        if (*(char *)(v8 + 95) < 0)
          operator delete(*(void **)(v8 + 72));
        if (*(char *)(v8 + 71) < 0)
          operator delete(*(void **)(v8 + 48));
        result = MEMORY[0x219A19A08](v8, 0x10F2C40F54C5DD6);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CD3DBLL & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CD3DBLL & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F804DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C40F54C5DD6);
  _Unwind_Resume(a1);
}

BOOL boost::fusion::any<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>,boost::fusion::nil_>>>>>>,boost::spirit::qi::detail::alternative_function<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>>(std::string *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void **v5;
  uint64_t v6;

  v3 = *(uint64_t **)a2;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(void ***)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  return (boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,turi::strict_real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((uint64_t)a1, *(uint64_t **)a2, v4, (uint64_t)v5) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::any_int_parser<long long,10u,1u,-1>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((uint64_t)&a1->__r_.__value_.__l.__size_, v3, v4, (uint64_t)v5, v6) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((uint64_t)&a1->__r_.__value_.__r.__words[2], v3, (uint64_t)v4, v5) & 1) != 0|| (boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((uint64_t)&a1[1].__r_.__value_.__l.__size_, v3, (uint64_t)v4,
            v5) & 1) != 0
      || (boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 2, (unsigned __int8 **)v3, (unsigned __int8 **)v4, (uint64_t)v5, v6) & 1) != 0|| boost::spirit::qi::action<boost::spirit::qi::eps_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<turi::flexible_type>,0l>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((uint64_t)&a1[12].__r_.__value_.__l.__size_, v3, (uint64_t)v4, (uint64_t)v5);
}

void boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  __int16 v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int16 v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(a2, (uint64_t)&v3);
  v13 = v3;
  v14 = v4;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v15, (uint64_t)&v5);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSU_INS9_INSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_IS24_SD_EEEEEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES2N_((uint64_t *)(a1 + 32), (uint64_t)&v13);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  if (v18 < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
}

void sub_217F80710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a45);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSU_INS9_INSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_IS24_SD_EEEEEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES2N_(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  __int128 v5;
  __int16 v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15[4])();

  v5 = *(_OWORD *)a2;
  v6 = *(_WORD *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, a2 + 24);
  v3 = (uint64_t *)_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSU_INS9_INSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_IS24_SD_EEEEEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2M_EE5valueEiE4typeE(v15, &v5);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v3, a1);
  boost::function0<void>::~function0((uint64_t *)v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  return a1;
}

void sub_217F807E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  boost::function0<void>::~function0((uint64_t *)(v9 - 64));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSU_INS9_INSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_IS24_SD_EEEEEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2M_EE5valueEiE4typeE(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4;
  __int16 v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *((_WORD *)a2 + 8);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, (uint64_t)a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F808AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v4;
  __int16 v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = 0;
  v4 = *(_OWORD *)a2;
  v5 = *(_WORD *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, &v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F80960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), __int128 *a2)
{
  int v3;
  uint64_t (**v4)();
  __int128 v5;
  __int16 v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  v6 = *((_WORD *)a2 + 8);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, (uint64_t)a2 + 24);
  v3 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v5, (uint64_t *)a1 + 1);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v4 = 0;
  *a1 = v4;
}

void sub_217F80A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(std::string **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      *(_OWORD *)v6 = *(_OWORD *)v5;
      *(_BYTE *)(v6 + 16) = *(_BYTE *)(v5 + 16);
      *(_BYTE *)(v6 + 17) = *(_BYTE *)(v5 + 17);
      result = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(v6 + 24, v5 + 24);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v7 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v7 + 216);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 160);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 120);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 80);
        if (*(char *)(v7 + 71) < 0)
          operator delete(*(void **)(v7 + 48));
        if (*(char *)(v7 + 47) < 0)
          operator delete(*(void **)(v7 + 24));
        result = MEMORY[0x219A19A08](v7, 0x10F2C406BA737B4);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CD732 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CD732 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F80BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C406BA737B4);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(std::string *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  if ((boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((uint64_t)a1, a2, a3, a4) & 1) != 0)return 1;
  else
    return boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  int v8;
  BOOL v9;
  unsigned __int8 *v10;

  v10 = *a2;
  result = boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1, (uint64_t *)&v10, (uint64_t)a3, a4);
  if ((_DWORD)result)
  {
    if (v10 != *a3
      && ((v8 = *v10, *(unsigned __int8 *)(a1 + 16) != v8) ? (v9 = *(unsigned __int8 *)(a1 + 17) == v8) : (v9 = 1), v9))
    {
      *a2 = v10;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  _QWORD *v39;
  char v40;
  _BYTE v41[9];
  _QWORD v42[2];
  void **v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v43 = 0;
  LODWORD(v44) = 0;
  BYTE4(v44) = 0;
  *(_QWORD *)((char *)v42 + 5) = 0;
  v42[0] = 0;
  boost::initialized<turi::flexible_type>::wrapper::~wrapper((uint64_t)&v43);
  v7 = *a2;
  if (boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,turi::flexible_type>((uint64_t *)a1))
  {
    v40 = 1;
    v39 = v42;
    v43 = (void **)(a1 + 8);
    v44 = &v39;
    v45 = a4;
    v46 = &v40;
    boost::proto::detail::default_assign<boost::phoenix::meta_grammar>::impl<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&,boost::phoenix::vector4<boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const*,boost::fusion::vector<turi::flexible_type &> &,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,BOOL &> &,boost::phoenix::default_actions const&>::operator()((uint64_t)v41, a1 + 8, (uint64_t)&v43);
    if (v40)
    {
      v8 = 1;
    }
    else
    {
      v8 = 0;
      *a2 = v7;
    }
  }
  else
  {
    v8 = 0;
  }
  switch(BYTE4(v42[1]))
  {
    case 2:
      v9 = (unint64_t *)v42[0];
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = v42[0];
        if (v42[0])
        {
          if (*(char *)(v42[0] + 31) < 0)
            operator delete(*(void **)(v42[0] + 8));
          v13 = v12;
          v14 = 0x1012C404EF22A49;
          goto LABEL_47;
        }
      }
      break;
    case 3:
      v15 = (unint64_t *)v42[0];
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = v42[0];
        if (v42[0])
        {
          v19 = *(void **)(v42[0] + 8);
          if (v19)
          {
            *(_QWORD *)(v42[0] + 16) = v19;
            operator delete(v19);
          }
          v13 = v18;
          v14 = 0x1080C409938AC02;
          goto LABEL_47;
        }
      }
      break;
    case 4:
      v20 = (unint64_t *)v42[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v42[0];
        if (v42[0])
        {
          v43 = (void **)(v42[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
          goto LABEL_31;
        }
      }
      break;
    case 5:
      v24 = (unint64_t *)v42[0];
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v23 = v42[0];
        if (v42[0])
        {
          v43 = (void **)(v42[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_31:
          v13 = v23;
          v14 = 0x1020C405E66F15BLL;
          goto LABEL_47;
        }
      }
      break;
    case 8:
      v27 = (unint64_t *)v42[0];
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = v42[0];
        if (v42[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v42[0] + 16));
          v13 = v30;
          v31 = -235920773;
          goto LABEL_46;
        }
      }
      break;
    case 9:
      v32 = (unint64_t *)v42[0];
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = v42[0];
        if (v42[0])
        {
          v36 = *(void **)(v42[0] + 48);
          if (v36)
          {
            *(_QWORD *)(v42[0] + 56) = v36;
            operator delete(v36);
          }
          v37 = *(void **)(v35 + 24);
          if (v37)
          {
            *(_QWORD *)(v35 + 32) = v37;
            operator delete(v37);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v35 + 8);
          v13 = v35;
          v31 = 2071181815;
LABEL_46:
          v14 = v31 | 0x1030C4000000000;
LABEL_47:
          MEMORY[0x219A19A08](v13, v14);
        }
      }
      break;
    default:
      return v8;
  }
  return v8;
}

void sub_217F80FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14)
{
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  switch(a14)
  {
    case 2:
      v15 = (unint64_t *)a12;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (v17)
        goto LABEL_39;
      v18 = a12;
      if (!a12)
        goto LABEL_39;
      if (*(char *)(a12 + 31) < 0)
        operator delete(*(void **)(a12 + 8));
      v19 = (_QWORD *)v18;
      v20 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v29 = (unint64_t *)a12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_39;
      v32 = a12;
      if (!a12)
        goto LABEL_39;
      v33 = *(void **)(a12 + 8);
      if (v33)
      {
        *(_QWORD *)(a12 + 16) = v33;
        operator delete(v33);
      }
      v19 = (_QWORD *)v32;
      v20 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v21 = (unint64_t *)a12;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (v23)
        goto LABEL_39;
      v24 = a12;
      if (!a12)
        goto LABEL_39;
      a11 = a12 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
      goto LABEL_31;
    case 5:
      v34 = (unint64_t *)a12;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_39;
      v24 = a12;
      if (!a12)
        goto LABEL_39;
      a11 = a12 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
LABEL_31:
      v19 = (_QWORD *)v24;
      v20 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v37 = (unint64_t *)a12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_39;
      v40 = a12;
      if (!a12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)(a12 + 16));
      v19 = (_QWORD *)v40;
      v28 = -235920773;
      goto LABEL_37;
    case 9:
      v25 = (unint64_t *)a12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27 || !a12)
        goto LABEL_39;
      v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a12);
      v28 = 2071181815;
LABEL_37:
      v20 = v28 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v19, v20);
LABEL_39:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_39;
  }
}

BOOL boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,turi::flexible_type>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)(v1 + 32);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::dummy::nonnull;
  else
    v4 = 0;
  return v4
      && (boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v2) & 1) != 0;
}

void boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  char v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(a2, (uint64_t)&v3);
  v13 = v3;
  v14 = v4;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v15, (uint64_t)&v5);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES2K_((uint64_t *)(a1 + 32), (uint64_t)&v13);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  if (v18 < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
}

void sub_217F812D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a45);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES2K_(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  __int128 v5;
  char v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15[4])();

  v5 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, a2 + 24);
  v3 = (uint64_t *)_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2J_EE5valueEiE4typeE(v15, &v5);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v3, a1);
  boost::function0<void>::~function0((uint64_t *)v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  return a1;
}

void sub_217F813AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  boost::function0<void>::~function0((uint64_t *)(v9 - 64));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2J_EE5valueEiE4typeE(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4;
  char v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, (uint64_t)a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F81470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v4;
  char v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = 0;
  v4 = *(_OWORD *)a2;
  v5 = *(_BYTE *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, &v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F81524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), __int128 *a2)
{
  int v3;
  uint64_t (**v4)();
  __int128 v5;
  char v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  v6 = *((_BYTE *)a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, (uint64_t)a2 + 24);
  v3 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v5, (uint64_t *)a1 + 1);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v4 = 0;
  *a1 = v4;
}

void sub_217F815F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(std::string **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      *(_OWORD *)v6 = *(_OWORD *)v5;
      *(_BYTE *)(v6 + 16) = *(_BYTE *)(v5 + 16);
      result = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(v6 + 24, v5 + 24);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v7 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v7 + 216);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 160);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 120);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 80);
        if (*(char *)(v7 + 71) < 0)
          operator delete(*(void **)(v7 + 48));
        if (*(char *)(v7 + 47) < 0)
          operator delete(*(void **)(v7 + 24));
        result = MEMORY[0x219A19A08](v7, 0x10F2C4099367000);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CD9A8 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CD9A8 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F81790(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C4099367000);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(std::string *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  if ((boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((uint64_t)a1, a2, a3, a4) & 1) != 0)return 1;
  else
    return boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int8 *v8;

  v8 = *a2;
  result = boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1, (uint64_t *)&v8, (uint64_t)a3, a4);
  if ((_DWORD)result)
  {
    if (v8 == *a3 || *(unsigned __int8 *)(a1 + 16) != *v8)
    {
      return 0;
    }
    else
    {
      *a2 = v8;
      return 1;
    }
  }
  return result;
}

void boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>&,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l>>(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  __int16 v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int16 v14;
  void *v15;
  char v16;
  void *__p;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  boost::spirit::detail::make_binary<boost::spirit::qi::domain,boost::proto::tagns_::tag::bitwise_or,boost::spirit::meta_compiler<boost::spirit::qi::domain>::meta_grammar,true>::impl<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::address_of,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<parser_impl::tag::restricted_string,boost::fusion::vector<parser_impl::parser_config>>>,0l> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>> const&>,2l> const&>,2l> const&,mpl_::void_ const&,boost::spirit::unused_type&>::operator()(a2, (uint64_t)&v3);
  v13 = v3;
  v14 = v4;
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v15, (uint64_t)&v5);
  _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_17no_skip_directiveINSU_INS9_INSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_IS25_NS9_INSJ_10char_classINS19_9char_codeINS19_5spaceENS23_9iso8859_1EEEEESD_EEEEEEEEEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES2W_((uint64_t *)(a1 + 32), (uint64_t)&v13);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v22);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v19);
  if (v18 < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v9);
  if (v8 < 0)
    operator delete(v7);
  if (v6 < 0)
    operator delete(v5);
}

void sub_217F819A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a45);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEaSINSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_17no_skip_directiveINSU_INS9_INSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_IS25_NS9_INSJ_10char_classINS19_9char_codeINS19_5spaceENS23_9iso8859_1EEEEESD_EEEEEEEEEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSQ_E4typeES2W_(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  __int128 v5;
  __int16 v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15[4])();

  v5 = *(_OWORD *)a2;
  v6 = *(_WORD *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, a2 + 24);
  v3 = (uint64_t *)_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_17no_skip_directiveINSU_INS9_INSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_IS25_NS9_INSJ_10char_classINS19_9char_codeINS19_5spaceENS23_9iso8859_1EEEEESD_EEEEEEEEEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2V_EE5valueEiE4typeE(v15, &v5);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v3, a1);
  boost::function0<void>::~function0((uint64_t *)v15);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  return a1;
}

void sub_217F81A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  boost::function0<void>::~function0((uint64_t *)(v9 - 64));
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRN4turi13flexible_typeENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSJ_10eps_parserEEEEEC2INSJ_6detail13parser_binderINSJ_11alternativeINS9_INSJ_8sequenceINS9_INSJ_6actionINSJ_9referenceIKNSJ_4ruleIS2_FSB_vEKNS_5proto7exprns_4exprINS10_6tagns_3tag11logical_notENS10_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1H_EEEENS_7phoenix5actorINS11_10basic_exprINS14_6assignENS16_5list2INS1M_INS6_9attributeILi0EEEEENS1M_INS6_8argumentILi0EEEEEEELl2EEEEEEENS9_INSJ_13and_predicateINSJ_17no_skip_directiveINSU_INS9_INSJ_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_IS25_NS9_INSJ_10char_classINS19_9char_codeINS19_5spaceENS23_9iso8859_1EEEEESD_EEEEEEEEEEEESD_EEEEEENS9_INSW_IN11parser_impl13string_parserES1Y_EESD_EEEEEEN4mpl_5BOOL_ILb0EEEEEEET_NS_11enable_if_cIXntsr11is_integralIS2V_EE5valueEiE4typeE(uint64_t (***a1)(), __int128 *a2))()
{
  __int128 v4;
  __int16 v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *((_WORD *)a2 + 8);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, (uint64_t)a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, (uint64_t)&v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F81B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t (***boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::function4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), uint64_t a2))()
{
  __int128 v4;
  __int16 v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = 0;
  v4 = *(_OWORD *)a2;
  v5 = *(_WORD *)(a2 + 16);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v6, a2 + 24);
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(a1, &v4);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6);
  return a1;
}

void sub_217F81BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(uint64_t (***a1)(), __int128 *a2)
{
  int v3;
  uint64_t (**v4)();
  __int128 v5;
  __int16 v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  v6 = *((_WORD *)a2 + 8);
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder((uint64_t)&v7, (uint64_t)a2 + 24);
  v3 = boost::detail::function::basic_vtable4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>((uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable, (uint64_t)&v5, (uint64_t *)a1 + 1);
  std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table((uint64_t)&v14);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v11);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable;
  else
    v4 = 0;
  *a1 = v4;
}

void sub_217F81CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>::~parser_binder((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4)
    return boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(result, a2, a3);
  a2[4] = 0;
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(std::string **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manager(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      v6 = operator new();
      *(_OWORD *)v6 = *(_OWORD *)v5;
      *(_BYTE *)(v6 + 16) = *(_BYTE *)(v5 + 16);
      *(_BYTE *)(v6 + 17) = *(_BYTE *)(v5 + 17);
      result = boost::spirit::qi::detail::parser_binder<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,mpl_::BOOL_<false>>::parser_binder(v6 + 24, v5 + 24);
      *(_QWORD *)a2 = v6;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v7 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        std::__hash_table<std::__hash_value_type<std::string,turi::flexible_type>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,turi::flexible_type>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,turi::flexible_type>>>::~__hash_table(v7 + 216);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 160);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 120);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v7 + 80);
        if (*(char *)(v7 + 71) < 0)
          operator delete(*(void **)(v7 + 48));
        if (*(char *)(v7 + 47) < 0)
          operator delete(*(void **)(v7 + 24));
        result = MEMORY[0x219A19A08](v7, 0x10F2C406BA737B4);
      }
      goto LABEL_11;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CDC01 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CDC01 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_11:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_217F81E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10F2C406BA737B4);
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(std::string *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  if ((boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>((uint64_t)a1, a2, a3, a4) & 1) != 0)return 1;
  else
    return boost::spirit::qi::action<parser_impl::string_parser,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>,boost::fusion::cons<boost::spirit::qi::and_predicate<boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::nil_>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  unsigned __int8 *v10;

  v10 = *a2;
  result = boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::assign,boost::proto::argsns_::list2<boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,2l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1, (uint64_t *)&v10, (uint64_t)a3, a4);
  if ((_DWORD)result)
  {
    if (v10 != *a3
      && ((v8 = *v10, *(unsigned __int8 *)(a1 + 16) != (_DWORD)v8)
        ? (v9 = *(unsigned __int8 *)(a1 + 17) == (_DWORD)v8)
        : (v9 = 1),
          v9 || (boost::spirit::char_encoding::iso8859_1_char_types[v8] & 0x40) != 0))
    {
      *a2 = v10;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::negate,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::no_skip>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::dereference,boost::proto::argsns_::list1<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,1l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const&>,2l> const&>,2l> const&>,2l> const&>,1l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l>>(uint64_t a1, char ***a2)
{
  char v2;
  uint64_t **v3;
  uint64_t v4;
  char v6[8];
  uint64_t v7;
  char v8;
  char v9;

  v2 = *(_BYTE *)a2[1];
  v3 = *(uint64_t ***)(*a2)[1];
  v4 = **v3;
  LOBYTE(v3) = **(_BYTE **)(*(_QWORD *)v3[1][1] + 8);
  v6[0] = ***a2;
  v7 = v4;
  v8 = (char)v3;
  v9 = v2;
  return _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorINSA_4pairIN4turi13flexible_typeESE_EENSA_9allocatorISF_EEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSQ_10eps_parserEEEEEaSINSQ_6detail13parser_binderINSQ_8sequenceINS9_INSQ_12literal_charINS6_13char_encoding8standardELb1ELb0EEENS9_INSQ_8optionalINSQ_4listINSQ_9referenceIKNSQ_4ruleIS2_FSF_vEKNS_5proto7exprns_4exprINS1B_6tagns_3tag11logical_notENS1B_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1S_EEEENSQ_17no_skip_directiveINSQ_11alternativeINS9_INS11_INS9_INSQ_6kleeneINSQ_10char_classINS1K_9char_codeINS1K_5spaceENS13_9iso8859_1EEEEEEENS9_INS12_IS14_Lb0ELb0EEESK_EEEEEENS9_IS24_SK_EEEEEEEEEEEENS9_IS15_SK_EEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSX_E4typeES2P_((uint64_t *)(a1 + 32), v6);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorINSA_4pairIN4turi13flexible_typeESE_EENSA_9allocatorISF_EEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSQ_10eps_parserEEEEEaSINSQ_6detail13parser_binderINSQ_8sequenceINS9_INSQ_12literal_charINS6_13char_encoding8standardELb1ELb0EEENS9_INSQ_8optionalINSQ_4listINSQ_9referenceIKNSQ_4ruleIS2_FSF_vEKNS_5proto7exprns_4exprINS1B_6tagns_3tag11logical_notENS1B_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1S_EEEENSQ_17no_skip_directiveINSQ_11alternativeINS9_INS11_INS9_INSQ_6kleeneINSQ_10char_classINS1K_9char_codeINS1K_5spaceENS13_9iso8859_1EEEEEEENS9_INS12_IS14_Lb0ELb0EEESK_EEEEEENS9_IS24_SK_EEEEEEEEEEEENS9_IS15_SK_EEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSX_E4typeES2P_(uint64_t *a1, char *a2)
{
  char v3;
  uint64_t v4;
  __int16 v5;
  char v6;
  uint64_t v7;
  uint64_t v9[4];

  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_WORD *)a2 + 8);
  v6 = a2[24];
  v7 = operator new();
  *(_BYTE *)v7 = v3;
  *(_QWORD *)(v7 + 8) = v4;
  *(_WORD *)(v7 + 16) = v5;
  *(_BYTE *)(v7 + 24) = v6;
  v9[0] = (uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>)::stored_vtable;
  v9[1] = v7;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v9, a1);
  boost::function0<void>::~function0(v9);
  return a1;
}

void sub_217F8208C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      result = operator new();
      *(_BYTE *)result = *(_BYTE *)v5;
      *(_QWORD *)(result + 8) = *(_QWORD *)(v5 + 8);
      *(_BYTE *)(result + 16) = *(_BYTE *)(v5 + 16);
      *(_BYTE *)(result + 17) = *(_BYTE *)(v5 + 17);
      *(_BYTE *)(result + 24) = *(_BYTE *)(v5 + 24);
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x1060C40861DB1C4);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CDED7 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CDED7 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(uint64_t **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t *a4, uint64_t a5)
{
  return boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(*a1, a2, a3, (uint64_t)a4, a5, *a4);
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(uint64_t *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v12 = &v11;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  if (v6 == *a3)
    return 0;
  if (*(unsigned __int8 *)a1 != *v6)
    return 0;
  v11 = v6 + 1;
  if ((boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>::operator()<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t **)&v12, a1 + 1, a6) & 1) != 0)return 0;
  v9 = *v12;
  if (*v12 == *v13 || *((unsigned __int8 *)a1 + 24) != *v9)
    return 0;
  *v12 = v9 + 1;
  *a2 = v11;
  return 1;
}

uint64_t boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>::operator()<boost::spirit::qi::optional<boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v4 = a1[3];
  v10 = **a1;
  v6 = &v10;
  v7 = *(_OWORD *)(a1 + 1);
  v8 = v4;
  v9 = a3;
  if (boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,mpl_::BOOL_<false>>>(a2, (uint64_t)&v6))
  {
    *v3 = v10;
  }
  return 0;
}

BOOL boost::spirit::qi::list<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,mpl_::BOOL_<false>>>(uint64_t *a1, uint64_t a2)
{
  _BOOL4 v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,mpl_::BOOL_<false>>::dispatch_container<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>>(a2, a1);
  if (!v4)
  {
    do
    {
      v5 = *(unsigned __int8 ***)a2;
      v6 = *(unsigned __int8 ***)(a2 + 8);
      v7 = **(_QWORD **)a2;
      v8 = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 24);
    }
    while (boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::detail::unused_skipper<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const>((uint64_t)(a1 + 1), v5, v6, v8, (uint64_t)&v10)&& !boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,mpl_::BOOL_<false>>::dispatch_container<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>>(a2, a1));
    **(_QWORD **)a2 = v7;
  }
  return !v4;
}

BOOL boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,mpl_::BOOL_<false>>::dispatch_container<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>>(uint64_t a1, uint64_t *a2)
{
  _BOOL4 v3;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v3 = boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::pair<turi::flexible_type,turi::flexible_type>>(a2);
  if (v3)
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::insert(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), &v5);
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&v5);
  return !v3;
}

void sub_217F82414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,std::pair<turi::flexible_type,turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::pair<turi::flexible_type,turi::flexible_type>>(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v1 = *a1;
  v3 = *(_QWORD *)(v1 + 32);
  v2 = (_QWORD *)(v1 + 32);
  if (v3)
    v4 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::pair<turi::flexible_type,turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::dummy::nonnull;
  else
    v4 = 0;
  return v4
      && (boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v2) & 1) != 0;
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__14pairIN4turi13flexible_typeESD_EENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSM_10eps_parserEEEEEaSINSM_6detail13parser_binderINSM_8sequenceINS9_INSM_9referenceIKNSM_4ruleIS2_FSD_vEKNS_5proto7exprns_4exprINS11_6tagns_3tag11logical_notENS11_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1I_EEEENS9_INSM_12literal_charINS6_13char_encoding8standardELb1ELb0EEENS9_IS1L_SG_EEEEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERST_E4typeES1Z_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[4];

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = a2[2];
  v6 = operator new();
  *(_QWORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_QWORD *)(v6 + 16) = v5;
  v8[0] = (uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::pair<turi::flexible_type,turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>)::stored_vtable;
  v8[1] = v6;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v8, a1);
  boost::function0<void>::~function0(v8);
  return a1;
}

void sub_217F824FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      result = operator new();
      *(_QWORD *)result = *(_QWORD *)v5;
      *(_BYTE *)(result + 8) = *(_BYTE *)(v5 + 8);
      *(_QWORD *)(result + 16) = *(_QWORD *)(v5 + 16);
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x1060C40C13665F2);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CE134 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CE134 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

BOOL boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::pair<turi::flexible_type,turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(uint64_t *a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  return boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::pair<turi::flexible_type,turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::pair<turi::flexible_type,turi::flexible_type>>(*a1, a2, a3);
}

BOOL boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::pair<turi::flexible_type,turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,std::pair<turi::flexible_type,turi::flexible_type>>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  _BOOL8 result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v7 = *a2;
  result = boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,turi::flexible_type>((uint64_t *)a1);
  if (result)
  {
    if (v7 == *a3 || *(unsigned __int8 *)(a1 + 8) != *v7)
    {
      return 0;
    }
    else
    {
      v8 = v7 + 1;
      result = boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,turi::flexible_type>((uint64_t *)(a1 + 16));
      if (result)
      {
        *a2 = v8;
        return 1;
      }
    }
  }
  return result;
}

uint64_t *boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type>::define<mpl_::BOOL_<false>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::bitwise_or,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::shift_right,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>,boost::proto::exprns_::expr<boost::proto::tagns_::tag::modulus,boost::proto::argsns_::list2<boost::proto::exprns_::expr<boost::proto::tagns_::tag::subscript,boost::proto::argsns_::list2<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> &,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::terminal_ex<boost::spirit::tag::char_code<boost::spirit::tag::char_,boost::spirit::char_encoding::standard>,boost::fusion::vector<char>>>,0l> const&>,2l> const&>,2l> const&,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<char const&>,0l>>,2l> const&>,2l>>(uint64_t a1, _BYTE ***a2)
{
  char v2;
  uint64_t ***v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  __int16 v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;

  v2 = *a2[1][1];
  v3 = (uint64_t ***)*((_QWORD *)*a2[1] + 1);
  v4 = ***v3;
  v5 = *(unsigned __int16 *)(*v3)[1] | ((unint64_t)*((unsigned __int8 *)(*v3)[1] + 2) << 16);
  LOBYTE(v3) = *(_BYTE *)v3[1];
  v6 = **(_BYTE **)*a2[1];
  v7 = *(*a2)[1];
  LOBYTE(v9) = ***a2;
  HIBYTE(v9) = v7;
  v10 = v6;
  v11 = v4;
  v12 = v5;
  v13 = (char)v3;
  v14 = v2;
  return _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorIN4turi13flexible_typeENSA_9allocatorISD_EEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSO_10eps_parserEEEEEaSINSO_6detail13parser_binderINSO_11alternativeINS9_INSO_8sequenceINS9_INSO_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_INS11_IS13_Lb1ELb0EEESI_EEEEEENS9_INS10_INS9_IS15_NS9_INSO_4listINSO_6actionINSO_9referenceIKNSO_4ruleIS2_FSD_vEKNS_5proto7exprns_4exprINS1E_6tagns_3tag11logical_notENS1E_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1V_EEEENS_7phoenix5actorINS1F_10basic_exprINS1Z_6detail3tag13function_evalENS1K_5list3INS21_INS1I_8terminalENS1K_4termINS1Z_3stl9push_backEEELl0EEENS20_INS6_9attributeILi0EEEEENS20_INS6_8argumentILi0EEEEEEELl3EEEEEEES14_EES16_EEEEEESI_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES2Y_((uint64_t *)(a1 + 32), &v9);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorIN4turi13flexible_typeENSA_9allocatorISD_EEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSO_10eps_parserEEEEEaSINSO_6detail13parser_binderINSO_11alternativeINS9_INSO_8sequenceINS9_INSO_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_INS11_IS13_Lb1ELb0EEESI_EEEEEENS9_INS10_INS9_IS15_NS9_INSO_4listINSO_6actionINSO_9referenceIKNSO_4ruleIS2_FSD_vEKNS_5proto7exprns_4exprINS1E_6tagns_3tag11logical_notENS1E_7argsns_5list1IRKNS6_8terminalINS6_3tag3epsEEEEELl1EEENS6_11unused_typeES1V_EEEENS_7phoenix5actorINS1F_10basic_exprINS1Z_6detail3tag13function_evalENS1K_5list3INS21_INS1I_8terminalENS1K_4termINS1Z_3stl9push_backEEELl0EEENS20_INS6_9attributeILi0EEEEENS20_INS6_8argumentILi0EEEEEEELl3EEEEEEES14_EES16_EEEEEESI_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERSV_E4typeES2Y_(uint64_t *a1, __int16 *a2)
{
  __int16 v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v8[4];
  __int128 v9;
  uint64_t v10;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v9 = *((_OWORD *)a2 + 1);
  v10 = *((_QWORD *)a2 + 4);
  v5 = *((_BYTE *)a2 + 40);
  v6 = operator new();
  *(_WORD *)v6 = v3;
  *(_BYTE *)(v6 + 8) = v4;
  *(_OWORD *)(v6 + 16) = v9;
  *(_QWORD *)(v6 + 32) = v10;
  *(_BYTE *)(v6 + 40) = v5;
  v8[0] = (uint64_t)boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable;
  v8[1] = v6;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap(v8, a1);
  boost::function0<void>::~function0(v8);
  return a1;
}

void sub_217F827F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_QWORD *)result;
      result = operator new();
      *(_BYTE *)result = *(_BYTE *)v5;
      *(_BYTE *)(result + 1) = *(_BYTE *)(v5 + 1);
      *(_BYTE *)(result + 8) = *(_BYTE *)(v5 + 8);
      v6 = *(_OWORD *)(v5 + 16);
      *(_QWORD *)(result + 32) = *(_QWORD *)(v5 + 32);
      *(_OWORD *)(result + 16) = v6;
      *(_BYTE *)(result + 40) = *(_BYTE *)(v5 + 40);
      *(_QWORD *)a2 = result;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      result = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        result = MEMORY[0x219A19A08](result, 0x1060C40C5F72233);
      goto LABEL_9;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002186CE2A7 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000002186CE2A7 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(unsigned __int8 **a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(*a1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(unsigned __int8 *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  BOOL v7;

  v5 = *a2;
  if (*a2 == *a3)
    return boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 8, a2, a3, a4, a5, (uint64_t)&boost::spirit::unused);
  v6 = v5 + 1;
  v7 = *a1 != *v5 || v6 == *a3;
  if (v7 || a1[1] != *v6)
    return boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 8, a2, a3, a4, a5, (uint64_t)&boost::spirit::unused);
  *a2 = v5 + 2;
  return 1;
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(unsigned __int8 *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v9;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;

  v6 = *a2;
  v11 = &v15;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  if (v6 == *a3)
    return 0;
  if (*a1 != *v6)
    return 0;
  v15 = v6 + 1;
  if (boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>::operator()<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::spirit::unused_type const>((uint64_t **)&v11, (uint64_t)(a1 + 8), a6))
  {
    return 0;
  }
  v9 = *v11;
  if (*v11 == *v12 || a1[32] != *v9)
    return 0;
  *v11 = v9 + 1;
  *a2 = v15;
  return 1;
}

BOOL boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>::operator()<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>,boost::spirit::unused_type const>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _BOOL4 v5;
  uint64_t *v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = a1[3];
  v11 = **a1;
  v7 = &v11;
  v8 = *(_OWORD *)(a1 + 1);
  v9 = v4;
  v10 = a3;
  v5 = boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>,boost::spirit::unused_type const,mpl_::BOOL_<false>>>(a2, (uint64_t *)&v7);
  if (v5)
    *v3 = v11;
  return !v5;
}

BOOL boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>,boost::spirit::unused_type const,mpl_::BOOL_<false>>>(uint64_t a1, uint64_t *a2)
{
  _BOOL8 v4;
  _QWORD *v5;
  unsigned __int8 *v6;

  v4 = boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type>((uint64_t *)a1, *a2, a2[1], (uint64_t **)a2[2]);
  if (v4)
  {
    while (1)
    {
      v5 = (_QWORD *)*a2;
      v6 = *(unsigned __int8 **)*a2;
      if (v6 == *(unsigned __int8 **)a2[1] || *(unsigned __int8 *)(a1 + 16) != *v6)
        break;
      *v5 = v6 + 1;
      if (!boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type>((uint64_t *)a1, *a2, a2[1], (uint64_t **)a2[2]))
      {
        v5 = (_QWORD *)*a2;
        break;
      }
    }
    *v5 = v6;
  }
  return v4;
}

BOOL boost::spirit::qi::action<boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  _BOOL8 v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v37[2];
  void **v38;
  int v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  v39 = 0;
  v40 = 0;
  *(uint64_t *)((char *)v37 + 5) = 0;
  v37[0] = 0;
  boost::initialized<turi::flexible_type>::wrapper::~wrapper((uint64_t)&v38);
  v6 = boost::spirit::qi::reference<boost::spirit::qi::rule<char const*,turi::flexible_type ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const,boost::spirit::unused_type,boost::spirit::unused_type> const>::parse<char const*,boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,turi::flexible_type>(a1);
  if (v6)
    boost::phoenix::stl::push_back::operator()<std::vector<turi::flexible_type>,turi::flexible_type>((uint64_t)(a1 + 1), *a4, v37);
  switch(BYTE4(v37[1]))
  {
    case 2:
      v7 = (unint64_t *)v37[0];
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = v37[0];
        if (v37[0])
        {
          if (*(char *)(v37[0] + 31) < 0)
            operator delete(*(void **)(v37[0] + 8));
          v11 = v10;
          v12 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      v13 = (unint64_t *)v37[0];
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v37[0];
        if (v37[0])
        {
          v17 = *(void **)(v37[0] + 8);
          if (v17)
          {
            *(_QWORD *)(v37[0] + 16) = v17;
            operator delete(v17);
          }
          v11 = v16;
          v12 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      v18 = (unint64_t *)v37[0];
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = v37[0];
        if (v37[0])
        {
          v38 = (void **)(v37[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v38);
          goto LABEL_28;
        }
      }
      break;
    case 5:
      v22 = (unint64_t *)v37[0];
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v21 = v37[0];
        if (v37[0])
        {
          v38 = (void **)(v37[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v38);
LABEL_28:
          v11 = v21;
          v12 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      v25 = (unint64_t *)v37[0];
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = v37[0];
        if (v37[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v37[0] + 16));
          v11 = v28;
          v29 = -235920773;
          goto LABEL_43;
        }
      }
      break;
    case 9:
      v30 = (unint64_t *)v37[0];
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v33 = v37[0];
        if (v37[0])
        {
          v34 = *(void **)(v37[0] + 48);
          if (v34)
          {
            *(_QWORD *)(v37[0] + 56) = v34;
            operator delete(v34);
          }
          v35 = *(void **)(v33 + 24);
          if (v35)
          {
            *(_QWORD *)(v33 + 32) = v35;
            operator delete(v35);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v33 + 8);
          v11 = v33;
          v29 = 2071181815;
LABEL_43:
          v12 = v29 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v11, v12);
        }
      }
      break;
    default:
      return v6;
  }
  return v6;
}

void sub_217F82DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, char a12, uint64_t a13)
{
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  switch(a12)
  {
    case 2:
      do
      {
        v14 = __ldaxr((unint64_t *)a10);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unint64_t *)a10));
      if (v15 || !a10)
        goto LABEL_33;
      if (*(char *)(a10 + 31) < 0)
        operator delete(*(void **)(a10 + 8));
      v16 = (_QWORD *)a10;
      v17 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      do
      {
        v24 = __ldaxr((unint64_t *)a10);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unint64_t *)a10));
      if (v25 || !a10)
        goto LABEL_33;
      v26 = *(void **)(a10 + 8);
      if (v26)
      {
        *(_QWORD *)(a10 + 16) = v26;
        operator delete(v26);
      }
      v16 = (_QWORD *)a10;
      v17 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      do
      {
        v18 = __ldaxr((unint64_t *)a10);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, (unint64_t *)a10));
      if (v19)
        goto LABEL_33;
      v20 = a10;
      if (!a10)
        goto LABEL_33;
      a13 = a10 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
      goto LABEL_26;
    case 5:
      do
      {
        v27 = __ldaxr((unint64_t *)a10);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, (unint64_t *)a10));
      if (v28)
        goto LABEL_33;
      v20 = a10;
      if (!a10)
        goto LABEL_33;
      a13 = a10 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
LABEL_26:
      v16 = (_QWORD *)v20;
      v17 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      do
      {
        v29 = __ldaxr((unint64_t *)a10);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unint64_t *)a10));
      if (v30 || !a10)
        goto LABEL_33;
      boost::detail::shared_count::~shared_count((unsigned int **)(a10 + 16));
      v16 = (_QWORD *)a10;
      v23 = -235920773;
      goto LABEL_31;
    case 9:
      do
      {
        v21 = __ldaxr((unint64_t *)a10);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unint64_t *)a10));
      if (v22 || !a10)
        goto LABEL_33;
      v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)a10);
      v23 = 2071181815;
LABEL_31:
      v17 = v23 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x219A19A08](v16, v17);
LABEL_33:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_33;
  }
}

uint64_t *_ZN5boost6spirit2qi4ruleIPKcFNSt3__16vectorIdNS5_9allocatorIdEEEEvEKNS_5proto7exprns_4exprINSB_6tagns_3tag11logical_notENSB_7argsns_5list1IRKNS0_8terminalINS0_3tag3epsEEEEELl1EEENS0_11unused_typeESS_E6defineIN4mpl_5BOOL_ILb0EEENSD_INSF_10bitwise_orENSH_5list2IRKNSD_INSF_11shift_rightENSZ_IRKNSD_INSF_8terminalENSH_4termINS0_11terminal_exINSK_9char_codeINSK_5char_ENS0_13char_encoding8standardEEENS_6fusion6vectorIJcEEEEEEELl0EEENSD_IS11_NS12_IRS3_EELl0EEEEELl2EEERKNSD_IS10_NSZ_IRKNSD_IS10_NSZ_IS1J_RKNSD_INSF_7modulusENSZ_IRKNSD_INSF_9subscriptENSZ_IRKNSJ_INSK_7double_EEERKNS_7phoenix5actorINSC_10basic_exprINS1U_6detail3tag13function_evalENSH_5list3INS1W_IS11_NS12_INS1U_3stl9push_backEEELl0EEENS1V_INS0_9attributeILi0EEEEENS1V_INS0_8argumentILi0EEEEEEELl3EEEEEEELl2EEERKNSD_IS1P_NSZ_IRKNSD_IS11_NS12_INSK_7no_skipEEELl0EEERKNSD_ISY_NSZ_IRKNSD_ISY_NSZ_IRKNSD_IS10_NSZ_IRKNSD_INSF_11dereferenceENSI_IRKNSD_IS11_NS12_INS14_INSK_5spaceENS16_9iso8859_1EEEEELl0EEEEELl1EEES1G_EELl2EEES34_EELl2EEES2W_EELl2EEEEELl2EEEEELl2EEEEELl2EEES1J_EELl2EEEEELl2EEEEEvRST_RKT0_NSW_ILb1EEE(uint64_t a1, _BYTE ***a2)
{
  char v2;
  _QWORD *v3;
  int v4;
  char v5;
  char v6;
  char v7;
  __int16 v9;
  char v10;
  int v11;
  char v12;
  char v13;
  char v14;

  v2 = *a2[1][1];
  v3 = (_QWORD *)*((_QWORD *)*a2[1] + 1);
  v4 = (**(unsigned __int16 **)(*v3 + 8) << 8) | (*(unsigned __int8 *)(*(_QWORD *)(*v3 + 8) + 2) << 24);
  v5 = **(_BYTE **)(*(_QWORD *)(**(_QWORD **)(v3[1] + 8) + 8) + 8);
  LOBYTE(v3) = **(_BYTE **)(***(_QWORD ***)(v3[1] + 8) + 8);
  v6 = **(_BYTE **)*a2[1];
  v7 = *(*a2)[1];
  LOBYTE(v9) = ***a2;
  HIBYTE(v9) = v7;
  v10 = v6;
  v11 = v4;
  v12 = (char)v3;
  v13 = v5;
  v14 = v2;
  return _ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorIdNSA_9allocatorIdEEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSM_10eps_parserEEEEEaSINSM_6detail13parser_binderINSM_11alternativeINS9_INSM_8sequenceINS9_INSM_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_INSZ_IS11_Lb1ELb0EEESG_EEEEEENS9_INSY_INS9_IS13_NS9_INSM_4listINSM_6actionINSM_15any_real_parserIdNSM_13real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS1D_6detail3tag13function_evalENS1F_7argsns_5list3INS1H_INS1F_6tagns_3tag8terminalENS1L_4termINS1D_3stl9push_backEEELl0EEENS1E_INS6_9attributeILi0EEEEENS1E_INS6_8argumentILi0EEEEEEELl3EEEEEEENSM_17no_skip_directiveINSX_INS9_INSY_INS9_INSM_6kleeneINSM_10char_classINS6_3tag9char_codeINS28_5spaceENS10_9iso8859_1EEEEEEENS9_IS12_SG_EEEEEENS9_IS2H_NS9_IS2D_SG_EEEEEEEEEEEES14_EEEEEESG_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERST_E4typeES2Z_((uint64_t *)(a1 + 32), &v9);
}

uint64_t *_ZN5boost8functionIFbRPKcRKS2_RNS_6spirit7contextINS_6fusion4consIRNSt3__16vectorIdNSA_9allocatorIdEEEENS8_4nil_EEENS8_6vectorIJEEEEERKNS6_2qi13not_predicateINSM_10eps_parserEEEEEaSINSM_6detail13parser_binderINSM_11alternativeINS9_INSM_8sequenceINS9_INSM_12literal_charINS6_13char_encoding8standardELb0ELb0EEENS9_INSZ_IS11_Lb1ELb0EEESG_EEEEEENS9_INSY_INS9_IS13_NS9_INSM_4listINSM_6actionINSM_15any_real_parserIdNSM_13real_policiesIdEEEENS_7phoenix5actorINS_5proto7exprns_10basic_exprINS1D_6detail3tag13function_evalENS1F_7argsns_5list3INS1H_INS1F_6tagns_3tag8terminalENS1L_4termINS1D_3stl9push_backEEELl0EEENS1E_INS6_9attributeILi0EEEEENS1E_INS6_8argumentILi0EEEEEEELl3EEEEEEENSM_17no_skip_directiveINSX_INS9_INSY_INS9_INSM_6kleeneINSM_10char_classINS6_3tag9char_codeINS28_5spaceENS10_9iso8859_1EEEEEEENS9_IS12_SG_EEEEEENS9_IS2H_NS9_IS2D_SG_EEEEEEEEEEEES14_EEEEEESG_EEEEEEN4mpl_5BOOL_ILb0EEEEEEENS_11enable_if_cIXntsr11is_integralIT_EE5valueERST_E4typeES2Z_(uint64_t *a1, __int16 *a2)
{
  char v3;
  int v4;
  __int16 v5;
  __int16 v6;
  char v7;
  uint64_t (**v9)();
  __int16 v10;
  char v11;
  int v12;
  __int16 v13;
  __int16 v14;
  char v15;

  v3 = *((_BYTE *)a2 + 3);
  v4 = *((_DWORD *)a2 + 1);
  v5 = a2[4];
  v6 = *(__int16 *)((char *)a2 + 11);
  v7 = *((_BYTE *)a2 + 16);
  v10 = *a2;
  v11 = v3;
  v12 = v4;
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v9 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::assign_to<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>>(boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>)::stored_vtable;
  boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::swap((uint64_t *)&v9, a1);
  boost::function0<void>::~function0((uint64_t *)&v9);
  return a1;
}

void sub_217F83090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::function0<void>::~function0(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::function_obj_invoker4<boost::spirit::qi::detail::parser_binder<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>,mpl_::BOOL_<false>>,BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser> const&>::invoke(unsigned __int8 *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  return boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1, a2, a3, a4, a5);
}

uint64_t boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::nil_>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(unsigned __int8 *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  BOOL v7;

  v5 = *a2;
  if (*a2 == *a3)
    return boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 3, a2, a3, a4, a5, (uint64_t)&boost::spirit::unused);
  v6 = v5 + 1;
  v7 = *a1 != *v5 || v6 == *a3;
  if (v7 || a1[1] != *v6)
    return boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(a1 + 3, a2, a3, a4, a5, (uint64_t)&boost::spirit::unused);
  *a2 = v5 + 2;
  return 1;
}

uint64_t boost::spirit::qi::sequence_base<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::cons<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,true,false>,boost::fusion::nil_>>>>::parse_impl<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type const>(unsigned __int8 *a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v9;
  unsigned __int8 **v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;

  v6 = *a2;
  v11 = &v15;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  if (v6 == *a3)
    return 0;
  if (*a1 != *v6)
    return 0;
  v15 = v6 + 1;
  if ((boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>::operator()<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::spirit::unused_type const>((uint64_t **)&v11, (uint64_t)(a1 + 1), a6) & 1) != 0)return 0;
  v9 = *v11;
  if (*v11 == *v12 || a1[13] != *v9)
    return 0;
  *v11 = v9 + 1;
  *a2 = v15;
  return 1;
}

uint64_t boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>::operator()<boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>,boost::spirit::unused_type const>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  unsigned __int8 **v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a1;
  v4 = a1[3];
  v11 = **a1;
  v7 = (unsigned __int8 **)&v11;
  v8 = *(_OWORD *)(a1 + 1);
  v9 = v4;
  v10 = a3;
  v5 = boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>,boost::spirit::unused_type const,mpl_::BOOL_<false>>>(a2, &v7);
  if (v5)
    *v3 = v11;
  return v5 ^ 1u;
}

uint64_t boost::spirit::qi::list<boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>,boost::spirit::qi::no_skip_directive<boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>>>::parse_container<boost::spirit::qi::detail::pass_container<boost::spirit::qi::detail::fail_function<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>>,boost::spirit::unused_type const,mpl_::BOOL_<false>>>(uint64_t a1, unsigned __int8 ***a2)
{
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 **v10;

  v4 = boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type>(a1, *a2, a2[1], (uint64_t *)a2[2]);
  if ((_DWORD)v4)
  {
    do
    {
      v5 = *a2;
      v6 = a2[1];
      v7 = **a2;
      v8 = (uint64_t)a2[2];
      v10 = a2[3];
    }
    while (boost::spirit::qi::alternative<boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::sequence<boost::fusion::cons<boost::spirit::qi::kleene<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::fusion::cons<boost::spirit::qi::literal_char<boost::spirit::char_encoding::standard,false,false>,boost::fusion::nil_>>>,boost::fusion::cons<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,boost::fusion::nil_>>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::detail::unused_skipper<boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>>,boost::spirit::unused_type const>(a1 + 4, v5, v6, v8, (uint64_t)&v10)&& (boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type>(a1, *a2, a2[1], (uint64_t *)a2[2]) & 1) != 0);
    **a2 = v7;
  }
  return v4;
}

uint64_t boost::spirit::qi::action<boost::spirit::qi::any_real_parser<double,boost::spirit::qi::real_policies<double>>,boost::phoenix::actor<boost::proto::exprns_::basic_expr<boost::phoenix::detail::tag::function_eval,boost::proto::argsns_::list3<boost::proto::exprns_::basic_expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::phoenix::stl::push_back>,0l>,boost::phoenix::actor<boost::spirit::attribute<0>>,boost::phoenix::actor<boost::spirit::argument<0>>>,3l>>>::parse<char const*,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>>,boost::spirit::qi::not_predicate<boost::spirit::qi::eps_parser>,boost::spirit::unused_type>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3, uint64_t *a4)
{
  uint64_t v6;
  double v8;

  v8 = 0.0;
  v6 = boost::spirit::qi::detail::real_impl<double,boost::spirit::qi::real_policies<double>>::parse<char const*,double>(a2, a3, &v8);
  if ((_DWORD)v6)
    boost::phoenix::stl::push_back::operator()<std::vector<double>,double>(a1 + 1, *a4, &v8);
  return v6;
}

_QWORD *std::shared_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>>::shared_ptr[abi:ne180100]<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D91D528;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217F83390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const> *,std::shared_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>>::__shared_ptr_default_delete<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>,turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>>,std::allocator<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const>::~flexible_type_parser_impl(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const> *,std::shared_ptr<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>>::__shared_ptr_default_delete<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>,turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>>,std::allocator<turi::flexible_type_parser_impl<char const*,boost::proto::exprns_::expr<boost::proto::tagns_::tag::logical_not,boost::proto::argsns_::list1<boost::spirit::terminal<boost::spirit::tag::eps> const&>,1l> const>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t boost::spirit::qi::rule<char const*,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::spirit::locals<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();
  void **v11[3];
  uint64_t *v12[3];

  v7 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(a1 + 32);
  if (v7)
    v8 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  else
    v8 = 0;
  if (v8)
  {
    memset(v12, 0, sizeof(v12));
    v11[0] = (void **)v12;
    if ((boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v6) & 1) != 0)
    {
      boost::spirit::traits::assign_to_attribute_from_value<turi::flexible_type,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,void>::call<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(v12, a6);
      v11[0] = (void **)v12;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v11);
      return 1;
    }
    v11[0] = (void **)v12;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v11);
  }
  return 0;
}

void sub_217F834B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char **boost::spirit::traits::assign_to_attribute_from_value<turi::flexible_type,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,void>::call<std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  char **result;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unsigned int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  void *v38;
  void *v39;
  void **v40;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = 1;
  v5 = (_QWORD *)v4;
  if (*(_QWORD *)v4 != 1)
  {
    v6 = (_QWORD *)operator new();
    v7 = *(uint64_t **)(v4 + 8);
    *v6 = *(_QWORD *)v4;
    v6[2] = 0;
    v6[3] = 0;
    v6[1] = 0;
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v6 + 1, v7, *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - (_QWORD)v7) >> 5);
    *v6 = 1;
    do
    {
      v8 = __ldaxr((unint64_t *)v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unint64_t *)v4));
    v5 = v6;
    if (!v9)
    {
      v40 = (void **)(v4 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v40);
      MEMORY[0x219A19A08](v4, 0x1020C405E66F15BLL);
      v5 = v6;
    }
  }
  result = (char **)(v5 + 1);
  if (v5 + 1 != a1)
    result = (char **)std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(result, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 5);
  switch(*(_BYTE *)(a2 + 12))
  {
    case 2:
      v11 = *(unint64_t **)a2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_50;
        if (*((char *)v14 + 31) < 0)
          operator delete((void *)v14[1]);
        v15 = v14;
        v16 = 0x1012C404EF22A49;
        goto LABEL_49;
      }
      break;
    case 3:
      v17 = *(unint64_t **)a2;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_50;
        v21 = (void *)v20[1];
        if (v21)
        {
          v20[2] = (unint64_t)v21;
          operator delete(v21);
        }
        v15 = v20;
        v16 = 0x1080C409938AC02;
        goto LABEL_49;
      }
      break;
    case 4:
      v22 = *(unint64_t **)a2;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_50;
        v40 = (void **)(v25 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v40);
        goto LABEL_33;
      }
      break;
    case 5:
      v26 = *(unint64_t **)a2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v25 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_50;
        v40 = (void **)(v25 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v40);
LABEL_33:
        v15 = v25;
        v16 = 0x1020C405E66F15BLL;
        goto LABEL_49;
      }
      break;
    case 8:
      v29 = *(unint64_t **)a2;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_50;
        boost::detail::shared_count::~shared_count((unsigned int **)v32 + 2);
        v15 = v32;
        v33 = -235920773;
        goto LABEL_48;
      }
      break;
    case 9:
      v34 = *(unint64_t **)a2;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        v37 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v38 = (void *)v37[6];
          if (v38)
          {
            v37[7] = (unint64_t)v38;
            operator delete(v38);
          }
          v39 = (void *)v37[3];
          if (v39)
          {
            v37[4] = (unint64_t)v39;
            operator delete(v39);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v37 + 1));
          v15 = v37;
          v33 = 2071181815;
LABEL_48:
          v16 = v33 | 0x1030C4000000000;
LABEL_49:
          result = (char **)MEMORY[0x219A19A08](v15, v16);
        }
LABEL_50:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 5;
  return result;
}

void sub_217F837D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;

  MEMORY[0x219A19A08](v11, 0x1020C405E66F15BLL);
  do
  {
    v13 = __ldaxr((unint64_t *)v10);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unint64_t *)v10));
  if (v14)
    v15 = 1;
  else
    v15 = v10 == 0;
  if (!v15)
  {
    a10 = (void **)(v10 + 8);
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
    MEMORY[0x219A19A08](v10, 0x1020C405E66F15BLL);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::spirit::qi::rule<char const*,std::vector<turi::flexible_type> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<turi::flexible_type&,boost::fusion::nil_>,boost::spirit::locals<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();
  void **v11[3];
  uint64_t *v12[3];

  v7 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(a1 + 32);
  if (v7)
    v8 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<turi::flexible_type> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  else
    v8 = 0;
  if (v8)
  {
    memset(v12, 0, sizeof(v12));
    v11[0] = (void **)v12;
    if ((boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v6) & 1) != 0)
    {
      boost::spirit::traits::assign_to_attribute_from_value<turi::flexible_type,std::vector<turi::flexible_type>,void>::call<std::vector<turi::flexible_type>>(v12, a6);
      v11[0] = (void **)v12;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v11);
      return 1;
    }
    v11[0] = (void **)v12;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v11);
  }
  return 0;
}

void sub_217F838D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void boost::spirit::traits::assign_to_attribute_from_value<turi::flexible_type,std::vector<turi::flexible_type>,void>::call<std::vector<turi::flexible_type>>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  void *v37;
  void *v38;
  void **v39;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = 1;
  v5 = (_QWORD *)v4;
  if (*(_QWORD *)v4 != 1)
  {
    v6 = (_QWORD *)operator new();
    v7 = *(uint64_t **)(v4 + 8);
    *v6 = *(_QWORD *)v4;
    v6[2] = 0;
    v6[3] = 0;
    v6[1] = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v6 + 1, v7, *(uint64_t **)(v4 + 16), (uint64_t)(*(_QWORD *)(v4 + 16) - (_QWORD)v7) >> 4);
    *v6 = 1;
    do
    {
      v8 = __ldaxr((unint64_t *)v4);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unint64_t *)v4));
    v5 = v6;
    if (!v9)
    {
      v39 = (void **)(v4 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v39);
      MEMORY[0x219A19A08](v4, 0x1020C405E66F15BLL);
      v5 = v6;
    }
  }
  if (v5 + 1 != a1)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v5 + 1), *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 4);
  switch(*(_BYTE *)(a2 + 12))
  {
    case 2:
      v10 = *(unint64_t **)a2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_50;
        if (*((char *)v13 + 31) < 0)
          operator delete((void *)v13[1]);
        v14 = v13;
        v15 = 0x1012C404EF22A49;
        goto LABEL_49;
      }
      break;
    case 3:
      v16 = *(unint64_t **)a2;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_50;
        v20 = (void *)v19[1];
        if (v20)
        {
          v19[2] = (unint64_t)v20;
          operator delete(v20);
        }
        v14 = v19;
        v15 = 0x1080C409938AC02;
        goto LABEL_49;
      }
      break;
    case 4:
      v21 = *(unint64_t **)a2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_50;
        v39 = (void **)(v24 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v39);
        goto LABEL_33;
      }
      break;
    case 5:
      v25 = *(unint64_t **)a2;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v24 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_50;
        v39 = (void **)(v24 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v39);
LABEL_33:
        v14 = v24;
        v15 = 0x1020C405E66F15BLL;
        goto LABEL_49;
      }
      break;
    case 8:
      v28 = *(unint64_t **)a2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_50;
        boost::detail::shared_count::~shared_count((unsigned int **)v31 + 2);
        v14 = v31;
        v32 = -235920773;
        goto LABEL_48;
      }
      break;
    case 9:
      v33 = *(unint64_t **)a2;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v36 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v37 = (void *)v36[6];
          if (v37)
          {
            v36[7] = (unint64_t)v37;
            operator delete(v37);
          }
          v38 = (void *)v36[3];
          if (v38)
          {
            v36[4] = (unint64_t)v38;
            operator delete(v38);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v36 + 1));
          v14 = v36;
          v32 = 2071181815;
LABEL_48:
          v15 = v32 | 0x1030C4000000000;
LABEL_49:
          MEMORY[0x219A19A08](v14, v15);
        }
LABEL_50:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 4;
}

void sub_217F83BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;

  MEMORY[0x219A19A08](v11, 0x1020C405E66F15BLL);
  do
  {
    v13 = __ldaxr((unint64_t *)v10);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unint64_t *)v10));
  if (v14)
    v15 = 1;
  else
    v15 = v10 == 0;
  if (!v15)
  {
    a10 = (void **)(v10 + 8);
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
    MEMORY[0x219A19A08](v10, 0x1020C405E66F15BLL);
  }
  _Unwind_Resume(a1);
}

BOOL boost::spirit::qi::rule<char const*,std::vector<double> ()(void),boost::proto::exprns_::expr<boost::proto::tagns_::tag::terminal,boost::proto::argsns_::term<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,0l> const,boost::spirit::unused_type,boost::spirit::unused_type>::parse<boost::spirit::context<boost::fusion::cons<turi::flexible_type &,boost::fusion::nil_>,boost::spirit::locals<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>>,turi::flexible_type>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)();
  int v10;
  char v11;
  void *__p;
  void *v14;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 32);
  v6 = (_QWORD *)(a1 + 32);
  if (v7)
    v8 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::dummy::nonnull;
  else
    v8 = 0;
  if (!v8)
    return 0;
  __p = 0;
  v14 = 0;
  v15 = 0;
  v10 = boost::function4<BOOL,char const*&,char const* const&,boost::spirit::context<boost::fusion::cons<std::vector<double> &,boost::fusion::nil_>,boost::fusion::vector<>> &,boost::spirit::qi::char_class<boost::spirit::tag::char_code<boost::spirit::tag::space,boost::spirit::char_encoding::iso8859_1>> const&>::operator()(v6);
  v11 = v10;
  if (v10)
    boost::spirit::traits::assign_to_attribute_from_value<turi::flexible_type,std::vector<double>,void>::call<std::vector<double>>((uint64_t)&__p, a6);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return (v11 & 1) != 0;
}

void sub_217F83CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *boost::spirit::traits::assign_to_attribute_from_value<turi::flexible_type,std::vector<double>,void>::call<std::vector<double>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  const void *v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  char *result;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  void *v40;
  void *v41;
  void **v42;

  v4 = (_QWORD *)operator new();
  *v4 = 0;
  v4[1] = 0;
  v5 = (void **)(v4 + 1);
  v4[2] = 0;
  v4[3] = 0;
  *v4 = 1;
  v6 = v4;
  if (*v4 != 1)
  {
    v7 = (_QWORD *)operator new();
    v8 = (const void *)v4[1];
    *v7 = *v4;
    v7[2] = 0;
    v7[3] = 0;
    v7[1] = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v7 + 1, v8, v4[2], (uint64_t)(v4[2] - (_QWORD)v8) >> 3);
    *v7 = 1;
    do
    {
      v9 = __ldaxr(v4);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v4));
    v6 = v7;
    if (!v10)
    {
      v11 = *v5;
      if (*v5)
      {
        v4[2] = v11;
        operator delete(v11);
      }
      MEMORY[0x219A19A08](v4, 0x1080C409938AC02);
      v6 = v7;
    }
  }
  result = (char *)(v6 + 1);
  if (v6 + 1 != (_QWORD *)a1)
    result = std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(result, *(char **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  switch(*(_BYTE *)(a2 + 12))
  {
    case 2:
      v13 = *(unint64_t **)a2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_52;
        if (*((char *)v16 + 31) < 0)
          operator delete((void *)v16[1]);
        v17 = v16;
        v18 = 0x1012C404EF22A49;
        goto LABEL_51;
      }
      break;
    case 3:
      v19 = *(unint64_t **)a2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_52;
        v23 = (void *)v22[1];
        if (v23)
        {
          v22[2] = (unint64_t)v23;
          operator delete(v23);
        }
        v17 = v22;
        v18 = 0x1080C409938AC02;
        goto LABEL_51;
      }
      break;
    case 4:
      v24 = *(unint64_t **)a2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_52;
        v42 = (void **)(v27 + 1);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v42);
        goto LABEL_35;
      }
      break;
    case 5:
      v28 = *(unint64_t **)a2;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v27 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_52;
        v42 = (void **)(v27 + 1);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v42);
LABEL_35:
        v17 = v27;
        v18 = 0x1020C405E66F15BLL;
        goto LABEL_51;
      }
      break;
    case 8:
      v31 = *(unint64_t **)a2;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = *(unint64_t **)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_52;
        boost::detail::shared_count::~shared_count((unsigned int **)v34 + 2);
        v17 = v34;
        v35 = -235920773;
        goto LABEL_50;
      }
      break;
    case 9:
      v36 = *(unint64_t **)a2;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = *(unint64_t **)a2;
        if (*(_QWORD *)a2)
        {
          v40 = (void *)v39[6];
          if (v40)
          {
            v39[7] = (unint64_t)v40;
            operator delete(v40);
          }
          v41 = (void *)v39[3];
          if (v41)
          {
            v39[4] = (unint64_t)v41;
            operator delete(v41);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v39 + 1));
          v17 = v39;
          v35 = 2071181815;
LABEL_50:
          v18 = v35 | 0x1030C4000000000;
LABEL_51:
          result = (char *)MEMORY[0x219A19A08](v17, v18);
        }
LABEL_52:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a2 = v6;
  *(_DWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 3;
  return result;
}

void sub_217F84010(_Unwind_Exception *a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  void *v7;

  MEMORY[0x219A19A08](v2, 0x1080C409938AC02);
  do
  {
    v4 = __ldaxr(v1);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v1));
  if (v5)
    v6 = 1;
  else
    v6 = v1 == 0;
  if (!v6)
  {
    v7 = (void *)v1[1];
    if (v7)
    {
      v1[2] = (unint64_t)v7;
      operator delete(v7);
    }
    MEMORY[0x219A19A08](v1, 0x1080C409938AC02);
  }
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_5(void **a1)
{
  operator delete(*a1);
}

uint64_t __cxx_global_var_init_68()
{
  uint64_t result;

  {
    boost::spirit::detail::list::node_iterator<boost::reference_wrapper<boost::spirit::utree>>::nil_node = 0u;
    unk_254FD1F88 = 0u;
    return __cxa_atexit((void (*)(void *))boost::spirit::utree::~utree, &boost::spirit::detail::list::node_iterator<boost::reference_wrapper<boost::spirit::utree>>::nil_node, &dword_217E69000);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_flexible_type_spirit_parser_cpp()
{
  uint64_t result;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  boost::spirit::lit = 0;
  boost::spirit::bin = 0;
  boost::spirit::oct = 0;
  boost::spirit::hex = 0;
  boost::spirit::BOOL_ = 0;
  boost::spirit::ushort_ = 0;
  boost::spirit::ulong_ = 0;
  boost::spirit::uint_ = 0;
  boost::spirit::short_ = 0;
  boost::spirit::long_ = 0;
  boost::spirit::int_ = 0;
  boost::spirit::ulong_long = 0;
  boost::spirit::long_long = 0;
  boost::spirit::float_ = 0;
  boost::spirit::double_ = 0;
  boost::spirit::long_double = 0;
  boost::spirit::repeat = 0;
  boost::spirit::eps = 0;
  boost::spirit::pad = 0;
  boost::spirit::byte_ = 0;
  boost::spirit::word = 0;
  boost::spirit::big_word = 0;
  boost::spirit::little_word = 0;
  boost::spirit::dword = 0;
  boost::spirit::big_dword = 0;
  boost::spirit::little_dword = 0;
  boost::spirit::qword = 0;
  boost::spirit::big_qword = 0;
  boost::spirit::little_qword = 0;
  boost::spirit::bin_float = 0;
  boost::spirit::big_bin_float = 0;
  boost::spirit::little_bin_float = 0;
  boost::spirit::bin_double = 0;
  boost::spirit::big_bin_double = 0;
  boost::spirit::little_bin_double = 0;
  boost::spirit::skip = 0;
  boost::spirit::delimit = 0;
  boost::spirit::stream = 0;
  boost::spirit::wstream = 0;
  boost::spirit::left_align = 0;
  boost::spirit::right_align = 0;
  boost::spirit::center = 0;
  boost::spirit::maxwidth = 0;
  boost::spirit::set_state = 0;
  boost::spirit::in_state = 0;
  boost::spirit::token = 0;
  boost::spirit::tokenid = 0;
  boost::spirit::raw_token = 0;
  boost::spirit::tokenid_mask = 0;
  boost::spirit::attr = 0;
  boost::spirit::columns = 0;
  boost::spirit::auto_ = 0;
  boost::spirit::ascii::char_ = 0;
  boost::spirit::ascii::string = 0;
  boost::spirit::iso8859_1::char_ = 0;
  boost::spirit::iso8859_1::string = 0;
  boost::spirit::standard::char_ = 0;
  boost::spirit::standard::string = 0;
  boost::spirit::standard_wide::char_ = 0;
  boost::spirit::standard_wide::string = 0;
  parser_impl::restricted_string = 0;
  boost::spirit::utree::list_type::list_type((boost::spirit::utree::list_type *)&boost::spirit::empty_list);
  result = __cxa_atexit((void (*)(void *))boost::spirit::utree::list_type::~list_type, &boost::spirit::empty_list, &dword_217E69000);
  turi::real = 0;
  return result;
}

void turi::escape_string(uint64_t *a1, std::string::value_type a2, char a3, int a4, int a5, int a6, std::string *this, _QWORD *a8)
{
  std::string::size_type size;
  char v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string *v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t *v38;
  int v39;
  std::string *v40;
  unint64_t v41;
  std::string *v42;

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v17 = size;
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (*((char *)a1 + 23) < 0)
    v18 = a1[1];
  else
    v18 = *((unsigned __int8 *)a1 + 23);
  v19 = 2 * v18 + 2;
  if (size < v19)
  {
    std::string::resize(this, v19, 0);
    v17 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v17 >= 0)
    v20 = this;
  else
    v20 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (a5)
  {
    v20->__r_.__value_.__s.__data_[0] = a4;
    v20 = (std::string *)((char *)v20 + 1);
  }
  v21 = *((char *)a1 + 23);
  v22 = *((unsigned __int8 *)a1 + 23);
  v23 = v21 < 0;
  v24 = a1[1];
  if (v21 >= 0)
    v25 = *((unsigned __int8 *)a1 + 23);
  else
    v25 = a1[1];
  if ((a3 & 1) == 0)
  {
    if (!v25)
      goto LABEL_86;
    v36 = 0;
    if (a4 == 39)
      v37 = a6;
    else
      v37 = 0;
    while (1)
    {
      v38 = (uint64_t *)*a1;
      if (!v23)
        v38 = a1;
      v39 = *((char *)v38 + v36);
      if (v39 == 34)
      {
        v20->__r_.__value_.__s.__data_[0] = 34;
        v40 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
        if (!a6)
          goto LABEL_81;
        v20->__r_.__value_.__s.__data_[1] = 34;
      }
      else
      {
        if (v39 != 39)
        {
          v20->__r_.__value_.__s.__data_[0] = v39;
          v20 = (std::string *)((char *)v20 + 1);
          goto LABEL_83;
        }
        v20->__r_.__value_.__s.__data_[0] = 39;
        v40 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
        if (!v37)
        {
LABEL_81:
          v20 = v40;
          goto LABEL_83;
        }
        v20->__r_.__value_.__s.__data_[1] = 39;
      }
      v20 = (std::string *)((char *)v20 + 2);
LABEL_83:
      ++v36;
      v23 = *((char *)a1 + 23) < 0;
      v41 = *((unsigned __int8 *)a1 + 23);
      if ((v41 & 0x80u) != 0)
        v41 = a1[1];
      if (v36 >= v41)
        goto LABEL_86;
    }
  }
  if (v25)
  {
    v26 = 0;
    if (a4 == 34)
      v27 = a6;
    else
      v27 = 0;
    if (a4 == 34)
      v28 = a5;
    else
      v28 = 0;
    if (a4 == 39)
      v29 = a6;
    else
      v29 = 0;
    if (a4 == 39)
      v30 = a5;
    else
      v30 = 0;
    do
    {
      if (v23)
        v31 = (uint64_t *)*a1;
      else
        v31 = a1;
      v32 = *((char *)v31 + v26);
      if (v32 <= 33)
      {
        switch(*((_BYTE *)v31 + v26))
        {
          case 8:
            v20->__r_.__value_.__s.__data_[0] = a2;
            v20->__r_.__value_.__s.__data_[1] = 98;
            goto LABEL_60;
          case 9:
            v20->__r_.__value_.__s.__data_[0] = a2;
            v20->__r_.__value_.__s.__data_[1] = 116;
            goto LABEL_60;
          case 0xA:
            v20->__r_.__value_.__s.__data_[0] = a2;
            v20->__r_.__value_.__s.__data_[1] = 110;
            goto LABEL_60;
          case 0xB:
          case 0xC:
            goto LABEL_54;
          case 0xD:
            v20->__r_.__value_.__s.__data_[0] = a2;
            v20->__r_.__value_.__s.__data_[1] = 114;
            goto LABEL_60;
          default:
            if (*((_BYTE *)v31 + v26))
              goto LABEL_54;
            v20->__r_.__value_.__s.__data_[0] = a2;
            v20->__r_.__value_.__s.__data_[1] = 0;
            break;
        }
        goto LABEL_60;
      }
      switch(v32)
      {
        case '"':
          if (!v27)
          {
            if (!v28)
            {
              v20->__r_.__value_.__s.__data_[0] = 34;
              v20 = (std::string *)((char *)v20 + 1);
              break;
            }
            v20->__r_.__value_.__s.__data_[0] = a2;
            v20->__r_.__value_.__s.__data_[1] = 34;
            goto LABEL_60;
          }
          LOWORD(v20->__r_.__value_.__l.__data_) = 8738;
          v20 = (std::string *)((char *)v20 + 2);
          break;
        case '\\':
          if (v23)
            v33 = v24;
          else
            v33 = v22;
          if (v26 >= v33 - 1 || (v34 = *((unsigned __int8 *)v31 + v26 + 1), v34 != 120) && v34 != 117)
          {
            v20->__r_.__value_.__s.__data_[0] = a2;
            v20->__r_.__value_.__s.__data_[1] = 92;
LABEL_60:
            v20 = (std::string *)((char *)v20 + 2);
            break;
          }
LABEL_54:
          v20->__r_.__value_.__s.__data_[0] = *((_BYTE *)v31 + v26);
          v20 = (std::string *)((char *)v20 + 1);
          break;
        case '\'':
          if (!v29)
          {
            if (!v30)
            {
              v20->__r_.__value_.__s.__data_[0] = 39;
              v20 = (std::string *)((char *)v20 + 1);
              break;
            }
            v20->__r_.__value_.__s.__data_[0] = a2;
            v20->__r_.__value_.__s.__data_[1] = 39;
            goto LABEL_60;
          }
          LOWORD(v20->__r_.__value_.__l.__data_) = 10023;
          v20 = (std::string *)((char *)v20 + 2);
          break;
        default:
          goto LABEL_54;
      }
      ++v26;
      v22 = *((unsigned __int8 *)a1 + 23);
      v23 = *((char *)a1 + 23) < 0;
      v24 = a1[1];
      if (*((char *)a1 + 23) >= 0)
        v35 = *((unsigned __int8 *)a1 + 23);
      else
        v35 = a1[1];
    }
    while (v26 < v35);
  }
LABEL_86:
  if (a5)
  {
    v20->__r_.__value_.__s.__data_[0] = a4;
    v20 = (std::string *)((char *)v20 + 1);
  }
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = this;
  else
    v42 = (std::string *)this->__r_.__value_.__r.__words[0];
  *a8 = (char *)v20 - (char *)v42;
}

BOOL turi::parse_hex_block(turi *this, char *a2, unint64_t *a3)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = 16 * v5;
    *(_QWORD *)a2 = v6;
    v7 = *((char *)this + v4);
    if ((v7 - 48) >= 0xAu)
    {
      v8 = -87;
      if ((v7 - 97) >= 6u)
      {
        if ((v7 - 65) > 5u)
          return v3;
        v8 = -55;
      }
    }
    else
    {
      v8 = -48;
    }
    v5 = v6 + (v8 + v7);
    *(_QWORD *)a2 = v5;
    v3 = v4++ > 2;
  }
  while (v4 != 4);
  return v3;
}

uint64_t turi::write_utf8(unint64_t this, _BYTE *a2, char *a3)
{
  if (this > 0x7F)
  {
    if (this > 0x7FF)
    {
      if (this >> 16)
      {
        if (this >> 16 > 0x10)
        {
          return 0;
        }
        else
        {
          *a2 = (this >> 18) - 16;
          a2[1] = (this >> 12) & 0x3F | 0x80;
          a2[2] = (this >> 6) & 0x3F | 0x80;
          a2[3] = this & 0x3F | 0x80;
          return 4;
        }
      }
      else
      {
        *a2 = (this >> 12) - 32;
        a2[1] = (this >> 6) & 0x3F | 0x80;
        a2[2] = this & 0x3F | 0x80;
        return 3;
      }
    }
    else
    {
      *a2 = (this >> 6) - 64;
      a2[1] = this & 0x3F | 0x80;
      return 2;
    }
  }
  else
  {
    *a2 = this;
    return 1;
  }
}

uint64_t turi::unescape_string(turi *this, char *a2, unint64_t *a3, unsigned __int8 a4, unsigned __int8 a5, int a6)
{
  int v7;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  char *v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  char v20;
  unint64_t *v21;
  unint64_t v22;
  turi *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  char v29[8];

  if (a2)
  {
    v7 = (int)a3;
    v10 = 0;
    v11 = 0;
    v12 = a5;
    v13 = a4;
    while (1)
    {
      if (!v7
        || ((v14 = (char *)this + v10, v15 = v10 + 1, *((unsigned __int8 *)this + v10) == v13)
          ? (v16 = v15 >= (unint64_t)a2)
          : (v16 = 1),
            v16))
      {
        v17 = *((unsigned __int8 *)this + v10);
        if (!a6
          || v17 != v12
          || (LOBYTE(v17) = v12, v10 + 1 >= (unint64_t)a2)
          || (LOBYTE(v17) = v12, *((unsigned __int8 *)this + v10 + 1) != v12))
        {
          *((_BYTE *)this + v11) = v17;
LABEL_15:
          ++v11;
          goto LABEL_16;
        }
        *((_BYTE *)this + v11++) = v12;
        ++v10;
      }
      else
      {
        v18 = *((char *)this + v15);
        if (v18 <= 91)
        {
          switch(v18)
          {
            case '"':
              *((_BYTE *)this + v11) = 34;
              goto LABEL_36;
            case '\'':
              *((_BYTE *)this + v11) = 39;
              goto LABEL_36;
            case '/':
              *((_BYTE *)this + v11) = 47;
LABEL_36:
              ++v11;
              ++v10;
              goto LABEL_16;
          }
LABEL_31:
          v20 = v13;
LABEL_32:
          *((_BYTE *)this + v11) = v20;
          goto LABEL_15;
        }
        v19 = v18 - 110;
        v20 = v13;
        switch(v19)
        {
          case 0:
            *((_BYTE *)this + v11) = 10;
            goto LABEL_36;
          case 1:
          case 2:
          case 3:
          case 5:
            goto LABEL_32;
          case 4:
            *((_BYTE *)this + v11) = 13;
            goto LABEL_36;
          case 6:
            *((_BYTE *)this + v11) = 9;
            goto LABEL_36;
          case 7:
            if (v10 + 6 > (unint64_t)a2)
              goto LABEL_31;
            *(_QWORD *)v29 = 0;
            if (!turi::parse_hex_block((turi *)(v14 + 2), v29, a3))
              goto LABEL_46;
            v22 = *(_QWORD *)v29;
            if (*(_QWORD *)v29 >> 8 == 216)
            {
              v28 = 0;
              if (v10 + 12 > (unint64_t)a2
                || *((unsigned __int8 *)this + v10 + 6) != v13
                || *((_BYTE *)this + v10 + 7) != 117
                || (v23 = (turi *)(v14 + 8), v24 = *(_QWORD *)v29, !turi::parse_hex_block(v23, (char *)&v28, v21))
                || v28 >> 10 < 0x37
                || v28 >= 0xE000)
              {
LABEL_46:
                v20 = v13;
LABEL_47:
                a3 = (unint64_t *)&jpt_217F848A4;
                goto LABEL_32;
              }
              v22 = v28 + (v24 << 10) - 56613888;
              v25 = 11;
            }
            else
            {
              v25 = 5;
            }
            v10 += v25;
            v26 = turi::write_utf8(v22, (_BYTE *)this + v11, (char *)v21);
            v11 += v26;
            if (!v26)
            {
              v20 = *((_BYTE *)this + v10);
              goto LABEL_47;
            }
            a3 = (unint64_t *)&jpt_217F848A4;
            break;
          default:
            if (v13 == 92)
            {
              *((_BYTE *)this + v11) = 92;
            }
            else
            {
              if (v13 != 98)
                goto LABEL_31;
              *((_BYTE *)this + v11) = 8;
            }
            goto LABEL_36;
        }
      }
LABEL_16:
      if ((char *)++v10 == a2)
        return v11;
    }
  }
  return 0;
}

void turi::unescape_string(std::string *a1, unint64_t *a2, unsigned __int8 a3, unsigned __int8 a4, int a5)
{
  std::string *v9;
  char *size;
  char *v11;
  std::string::size_type v12;

  v9 = a1;
  size = (char *)a1->__r_.__value_.__l.__size_;
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v11 = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else
  {
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v11 = size;
  }
  v12 = turi::unescape_string((turi *)a1, v11, a2, a3, a4, a5);
  std::string::resize(v9, v12, 0);
}

uint64_t _GLOBAL__sub_I_string_escape_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t _GLOBAL__sub_I_PosixTaskQueue_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::style_transfer::ResNet16Checkpoint::ResNet16Checkpoint(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  turi::neural_net::model_spec *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  turi::neural_net::model_spec *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v18 = *(_OWORD *)a2;
  v19 = *((_QWORD *)a2 + 2);
  v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a3 + 8);
  if (v4)
    turi::style_transfer::init_resnet(a3, (turi::neural_net::model_spec *)*a2, &v14);
  else
    turi::style_transfer::init_resnet((turi::style_transfer *)*a2, &v14);
  turi::style_transfer::Checkpoint::ExtractWeights(&v14, &v15);
  *(_QWORD *)a1 = &unk_24D91D6E0;
  *(_OWORD *)(a1 + 8) = v18;
  v6 = v15;
  v5 = v16;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v7 = a1 + 40;
  v8 = v17;
  *(_QWORD *)(a1 + 48) = v17;
  if (v8)
  {
    v5[2] = v7;
    v15 = &v16;
    v16 = 0;
    v17 = 0;
    v5 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v7;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v15, v5);
  v9 = v14;
  v14 = 0;
  if (v9)
  {
    turi::neural_net::model_spec::~model_spec(v9);
    MEMORY[0x219A19A08](v10, 0x20C4093837F09, v11, v12);
  }
  *(_QWORD *)a1 = &off_24D91D620;
  return a1;
}

void sub_217F84C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, turi::neural_net::model_spec *a9)
{
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::ResNet16Checkpoint::ResNet16Checkpoint(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v13 = *a2;
  v14 = *((_QWORD *)a2 + 2);
  v4 = (_QWORD *)*a3;
  v6 = a3 + 1;
  v5 = (_QWORD *)a3[1];
  v10 = (_QWORD *)*a3;
  v11 = v5;
  v7 = a3[2];
  v12 = v7;
  if (v7)
  {
    v5[2] = &v11;
    *a3 = v6;
    *v6 = 0;
    a3[2] = 0;
  }
  else
  {
    v10 = &v11;
    v4 = &v11;
  }
  *(_QWORD *)a1 = &unk_24D91D6E0;
  *(_OWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  v8 = a1 + 40;
  *(_QWORD *)(a1 + 48) = v7;
  if (v7)
  {
    v5[2] = v8;
    v10 = &v11;
    v11 = 0;
    v12 = 0;
    v5 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v8;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v10, v5);
  *(_QWORD *)a1 = &off_24D91D620;
  return a1;
}

void turi::style_transfer::ResNet16Checkpoint::CreateModelTrainer(turi::style_transfer::ResNet16Checkpoint *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5[3];
  __int128 v6;
  uint64_t v7;

  *a2 = 0;
  v4 = operator new();
  v6 = *(_OWORD *)((char *)this + 8);
  v7 = *((_QWORD *)this + 3);
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v5, (const void ***)this + 4);
  turi::style_transfer::ResNet16ModelTrainer::ResNet16ModelTrainer(v4, (uint64_t)&v6, v5);
  *a2 = v4;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v5, (_QWORD *)v5[1]);
}

void sub_217F84DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  _QWORD *v11;
  uint64_t v12;

  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a10, a11);
  MEMORY[0x219A19A08](v12, 0x10A1C40F8EEC480);
  *v11 = 0;
  _Unwind_Resume(a1);
}

turi::neural_net::model_spec *turi::style_transfer::ResNet16Checkpoint::ExportToCoreML@<X0>(turi::style_transfer::ResNet16Checkpoint *this@<X0>, _QWORD *a2@<X8>)
{
  turi::neural_net::model_spec *result;
  turi::neural_net::model_spec *v5;

  turi::style_transfer::init_resnet((turi::style_transfer *)*((int *)this + 2), &v5);
  turi::neural_net::model_spec::update_params((uint64_t)v5, (uint64_t)this + 32, 0);
  turi::neural_net::model_spec::model_spec(a2, (uint64_t *)v5);
  result = v5;
  v5 = 0;
  if (result)
  {
    turi::neural_net::model_spec::~model_spec(result);
    return (turi::neural_net::model_spec *)MEMORY[0x219A19A08]();
  }
  return result;
}

void sub_217F84E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100]((turi::neural_net::model_spec **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t turi::style_transfer::ResNet16ModelTrainer::ResNet16ModelTrainer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  char *v6;

  v5 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)a1 = &off_24D91D650;
  v6 = (char *)operator new(0x40uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &unk_24D91D710;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 5) = v6 + 48;
  *(_QWORD *)(a1 + 32) = v6 + 24;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__move_assign((uint64_t)(v6 + 40), a3);
  return a1;
}

void turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(turi::style_transfer::ResNet16ModelTrainer *this@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  unint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  char *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  char *v47;
  std::__shared_weak_count *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;

  v4 = (char *)operator new(0x30uLL);
  v5 = v4;
  *((_QWORD *)v4 + 1) = 0;
  v6 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_24D91D760;
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)v4 + 5) = *((_QWORD *)this + 3);
  v8 = (std::__shared_weak_count_vtbl *)(v4 + 24);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((char *)this + 8);
  v47 = v4 + 24;
  v48 = (std::__shared_weak_count *)v4;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  v45 = v7;
  v46 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v41 = v4 + 24;
    v42 = (std::__shared_weak_count *)v4;
    do
      v12 = __ldxr(v6);
    while (__stxr(v12 + 1, v6));
    v43 = v7;
    v44 = v9;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldxr(v6);
    while (__stxr(v14 + 1, v6));
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  else
  {
    v41 = v4 + 24;
    v42 = (std::__shared_weak_count *)v4;
    do
      v16 = __ldxr(v6);
    while (__stxr(v16 + 1, v6));
    v43 = v7;
    v44 = 0;
    do
      v17 = __ldxr(v6);
    while (__stxr(v17 + 1, v6));
  }
  v18 = (std::__shared_weak_count *)operator new(0x50uLL);
  v19 = v18;
  v18->__shared_owners_ = 0;
  v20 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24D91D7B0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24D91D800;
  v18[2].__vftable = v8;
  v18[2].__shared_owners_ = (uint64_t)v5;
  v18[2].__shared_weak_owners_ = v7;
  v18[3].__vftable = (std::__shared_weak_count_vtbl *)v9;
  v49 = &v18[1].__vftable;
  v50 = v18;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v18[1].__shared_owners_ = (uint64_t)&v18[1];
  v18[1].__shared_weak_owners_ = (uint64_t)v18;
  do
    v24 = __ldaxr(v20);
  while (__stlxr(v24 - 1, v20));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>::AsPublisher((uint64_t)v49, &v40);
  v25 = v50;
  if (v50)
  {
    v26 = (unint64_t *)&v50->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *a2 = v40;
  v40 = 0uLL;
  v28 = v44;
  if (v44)
  {
    v29 = (unint64_t *)&v44->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v42;
  if (v42)
  {
    v32 = (unint64_t *)&v42->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v46;
  if (v46)
  {
    v35 = (unint64_t *)&v46->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v48;
  if (v48)
  {
    v38 = (unint64_t *)&v48->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_217F8529C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v23 - 80);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v21);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void turi::style_transfer::ResNet16ModelTrainer::CreateTrainingBackend(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  __int128 v8;
  __int128 v9;
  unint64_t i;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const void ***v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  turi::neural_net::model_spec *v26;
  uint64_t v27;
  turi::neural_net::model_spec *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  const void **v32;
  _OWORD v33[3];
  _BYTE v34[8];
  _QWORD *v35;
  const void *v36[4];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[3];
  void *v41;
  _OWORD v42[3];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  turi::neural_net::shared_float_array::wrap(1.0, (uint64_t)&v32);
  std::string::basic_string[abi:ne180100]<0>(v36, "st_training");
  v36[3] = &unk_24D9175B8;
  v8 = v33[0];
  v33[0] = 0uLL;
  v37 = v8;
  v38 = v33[1];
  v39 = v33[2];
  turi::neural_net::shared_float_array::wrap((float)*(int *)(a1 + 8), (uint64_t)&v28);
  std::string::basic_string[abi:ne180100]<0>(v40, "st_num_styles");
  v41 = &unk_24D9175B8;
  v9 = v29;
  v29 = 0uLL;
  v42[0] = v9;
  v42[1] = v30;
  v42[2] = v31;
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t)v34, v36, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFECLL; i -= 10)
  {
    *(void **)((char *)&v41 + i * 8) = &unk_24D9175B8;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v42[i / 2]);
    if (SHIBYTE(v40[i + 2]) < 0)
      operator delete((void *)v40[i]);
  }
  v28 = (turi::neural_net::model_spec *)&unk_24D9175B8;
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v32 = (const void **)&unk_24D9175B8;
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v33[0] + 1);
  if (*((_QWORD *)&v33[0] + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v33[0] + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  turi::style_transfer::init_vgg_16(a2, (uint64_t *)&v28);
  v17 = *(const void ****)(a1 + 32);
  if (*v17)
    (*((void (**)(const void **__return_ptr))**v17 + 2))(v36);
  else
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)v36, v17 + 2);
  turi::neural_net::model_spec::export_params_view(v28, (uint64_t)&v32);
  std::map<std::string,turi::neural_net::shared_float_array>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__tree_node<std::__value_type<std::string,turi::neural_net::shared_float_array>,void *> *,long>>>((uint64_t *)v36, v32, (const void ***)v33);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *, const void **))(*(_QWORD *)a3 + 48))(&v27, a3, v34, v36);
  std::shared_ptr<turi::neural_net::model_backend>::operator=[abi:ne180100]<turi::neural_net::model_backend,std::default_delete<turi::neural_net::model_backend>,void>(*(_QWORD **)(a1 + 32), &v27);
  v18 = v27;
  v27 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD **)(a1 + 32);
  v20 = (_QWORD *)v19[3];
  v19 += 3;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)(v19 - 1), v20);
  *(v19 - 1) = v19;
  *v19 = 0;
  v19[1] = 0;
  v21 = *(uint64_t **)(a1 + 32);
  v23 = *v21;
  v22 = v21[1];
  *a4 = v23;
  a4[1] = v22;
  if (v22)
  {
    v24 = (unint64_t *)(v22 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v32, *(_QWORD **)&v33[0]);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v36, (_QWORD *)v36[1]);
  v26 = v28;
  v28 = 0;
  if (v26)
  {
    turi::neural_net::model_spec::~model_spec(v26);
    MEMORY[0x219A19A08]();
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v34, v35);
}

void sub_217F855E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, turi::neural_net::model_spec *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26,uint64_t a27,char a28,_QWORD *a29)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a18, a19);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a28, a29);
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](&a11, 0);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::neural_net::model_backend>::operator=[abi:ne180100]<turi::neural_net::model_backend,std::default_delete<turi::neural_net::model_backend>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v5 = (_QWORD *)operator new();
  v6 = *a2;
  *v5 = &unk_24D91A628;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v6;
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void turi::style_transfer::ResNet16ModelTrainer::CreateInferenceBackend(turi::style_transfer::ResNet16ModelTrainer *this@<X0>, turi::neural_net::compute_context *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  unint64_t i;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const void ***v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[8];
  _QWORD *v27;
  const void *v28[4];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[3];
  void *v33;
  _OWORD v34[3];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  turi::neural_net::shared_float_array::wrap(0.0, (uint64_t)&v22);
  std::string::basic_string[abi:ne180100]<0>(v28, "st_training");
  v28[3] = &unk_24D9175B8;
  v6 = v23;
  v23 = 0uLL;
  v29 = v6;
  v30 = v24;
  v31 = v25;
  turi::neural_net::shared_float_array::wrap((float)*((int *)this + 2), (uint64_t)&v18);
  std::string::basic_string[abi:ne180100]<0>(v32, "st_num_styles");
  v33 = &unk_24D9175B8;
  v7 = v19;
  v19 = 0uLL;
  v34[0] = v7;
  v34[1] = v20;
  v34[2] = v21;
  std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t)v26, v28, 2);
  for (i = 0; i != 0x1FFFFFFFFFFFFFECLL; i -= 10)
  {
    *(void **)((char *)&v33 + i * 8) = &unk_24D9175B8;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v34[i / 2]);
    if (SHIBYTE(v32[i + 2]) < 0)
      operator delete((void *)v32[i]);
  }
  v18 = &unk_24D9175B8;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v22 = &unk_24D9175B8;
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (const void ***)*((_QWORD *)this + 4);
  if (*v15)
    (*((void (**)(const void **__return_ptr))**v15 + 2))(v28);
  else
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100]((uint64_t *)v28, v15 + 2);
  (*(void (**)(void **__return_ptr, turi::neural_net::compute_context *, _BYTE *, const void **))(*(_QWORD *)a2 + 48))(&v22, a2, v26, v28);
  *a3 = v22;
  v16 = (_QWORD *)operator new();
  v17 = v22;
  *v16 = &unk_24D91A628;
  v16[1] = 0;
  v16[2] = 0;
  v16[3] = v17;
  a3[1] = v16;
  v22 = 0;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v28, (_QWORD *)v28[1]);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v26, v27);
}

void sub_217F85A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,_QWORD *a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a28, *(_QWORD **)(v28 + 8));
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

void turi::style_transfer::ResNet16Checkpoint::~ResNet16Checkpoint(turi::style_transfer::ResNet16Checkpoint *this)
{
  *(_QWORD *)this = &unk_24D91D6E0;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

{
  *(_QWORD *)this = &unk_24D91D6E0;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  JUMPOUT(0x219A19A08);
}

void turi::style_transfer::ResNet16ModelTrainer::~ResNet16ModelTrainer(turi::style_transfer::ResNet16ModelTrainer *this)
{
  *(_QWORD *)this = &off_24D91D650;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
}

{
  *(_QWORD *)this = &off_24D91D650;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::style_transfer::ResNet16ModelTrainer::SupportsLossComponents(turi::style_transfer::ResNet16ModelTrainer *this)
{
  return 0;
}

void std::__shared_ptr_emplace<turi::style_transfer::ResNet16ModelTrainer::ModelState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91D710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::style_transfer::ResNet16ModelTrainer::ModelState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91D710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::style_transfer::ResNet16ModelTrainer::ModelState>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
  return std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
}

void std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

void std::__shared_ptr_emplace<turi::style_transfer::Config>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91D760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::style_transfer::Config>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91D760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>::AsPublisher(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v6, (_QWORD *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>,std::allocator<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>>,std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>,void>(&v6, a2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_217F85DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableIterator<turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24D91D7B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableIterator<turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24D91D7B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableIterator<turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::CallableIterator<turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0>::~CallableIterator(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24D91D800;
  v2 = (uint64_t)(a1 + 3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void turi::neural_net::CallableIterator<turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0>::~CallableIterator(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24D91D800;
  v2 = (uint64_t)(a1 + 3);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::neural_net::CallableIterator<turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0>::HasNext()
{
  return 1;
}

void turi::neural_net::CallableIterator<turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0>::Next(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  uint64_t v7[3];
  __int128 v8;
  uint64_t v9;

  *a2 = 0;
  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)v5;
  v9 = *(_QWORD *)(v5 + 16);
  v6 = *(const void ****)(a1 + 40);
  if (*v6)
    (*((void (**)(uint64_t *__return_ptr))**v6 + 2))(v7);
  else
    std::map<std::string,turi::neural_net::shared_float_array>::map[abi:ne180100](v7, v6 + 2);
  turi::style_transfer::ResNet16Checkpoint::ResNet16Checkpoint(v4, &v8, v7);
  *a2 = v4;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v7, (_QWORD *)v7[1]);
}

void sub_217F85F70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x219A19A08](v2, 0x10A1C4010D4A631);
  *v1 = 0;
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>,std::allocator<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>>,std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>,void>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  __int128 v5;

  v4 = operator new(0x40uLL);
  v4[2] = 0;
  *v4 = &unk_24D91D880;
  v4[1] = 0;
  v5 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v4[5] = 0;
  v4[3] = &unk_24D91D8D0;
  *((_OWORD *)v4 + 3) = v5;
  *a2 = v4 + 3;
  a2[1] = v4;
  v4[4] = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91D880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91D880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::~IteratorPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D91D8D0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::~IteratorPublisher(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &unk_24D91D8D0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::Receive(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription>,std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>> &,std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>> &,void>(a2, (uint64_t *)(a1 + 24), &v11);
  v3 = *a2;
  v10 = v11;
  v11 = 0uLL;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 16))(v3, &v10);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_217F861BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription>,std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>> &,std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  result = operator new(0x40uLL);
  result[1] = 0;
  result[2] = 0;
  *result = &unk_24D91D948;
  v8 = *a1;
  v7 = a1[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v12 = *a2;
  v11 = a2[1];
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  result[3] = &unk_24D91D998;
  result[4] = v8;
  result[5] = v7;
  result[6] = v12;
  result[7] = v11;
  *a3 = result + 3;
  a3[1] = result;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91D948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91D948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription::~IteratorSubscription(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24D91D998;
  v2 = (uint64_t)(a1 + 1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  return a1;
}

void turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription::~IteratorSubscription(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24D91D998;
  v1 = (uint64_t)(a1 + 1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  JUMPOUT(0x219A19A08);
}

void turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription::Cancel(uint64_t a1)
{
  std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(a1 + 8));
}

void turi::neural_net::IteratorPublisher<std::unique_ptr<turi::style_transfer::Checkpoint>>::IteratorSubscription::Request(uint64_t a1, int w1_0)
{
  int v2;
  BOOL v3;
  uint64_t *v5;
  uint64_t v6;
  std::exception_ptr *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  std::exception_ptr v17;
  std::exception_ptr v18;
  std::exception_ptr v19;
  std::exception_ptr v20;
  _QWORD v21[2];
  std::exception_ptr v22;

  v2 = w1_0;
  v21[1] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 8))
    v3 = w1_0 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    do
    {
      v19.__ptr_ = 0;
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)))
      {
        v5 = v21;
        (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 24) + 24))(v21);
      }
      else
      {
        v5 = 0;
      }
      if (v19.__ptr_)
      {
        v6 = *(_QWORD *)(a1 + 8);
        std::exception_ptr::exception_ptr(&v17, &v19);
        turi::neural_net::Completion::Failure(&v17, v22, &v18);
        (*(void (**)(uint64_t, std::exception_ptr *))(*(_QWORD *)v6 + 32))(v6, &v18);
        std::exception_ptr::~exception_ptr(&v18);
        v7 = &v17;
      }
      else
      {
        if (v5)
        {
          v8 = v2 > 0;
          v9 = *(_QWORD *)(a1 + 8);
          v10 = *v5;
          *v5 = 0;
          v15 = v10;
          v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 24))(v9, &v15);
          v12 = v15;
          v15 = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          if (((v2 - v8) | v11) < 0)
            v2 = -1;
          else
            v2 = v11 + v2 - v8;
          v13 = *v5;
          *v5 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          goto LABEL_13;
        }
        v14 = *(_QWORD *)(a1 + 8);
        v20.__ptr_ = 0;
        v7 = &v16;
        std::exception_ptr::exception_ptr(&v16, &v20);
        std::exception_ptr::~exception_ptr(&v20);
        (*(void (**)(uint64_t, std::exception_ptr *))(*(_QWORD *)v14 + 32))(v14, &v16);
      }
      std::exception_ptr::~exception_ptr(v7);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
LABEL_13:
      std::exception_ptr::~exception_ptr(&v19);
    }
    while (*(_QWORD *)(a1 + 8) && v2);
  }
}

void sub_217F86570(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11, std::exception_ptr a12, std::exception_ptr a13)
{
  std::exception_ptr::~exception_ptr(&a10);
  std::exception_ptr::~exception_ptr(&a13);
  JUMPOUT(0x217F865C8);
}

void std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

uint64_t _GLOBAL__sub_I_st_resnet16_model_trainer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

turi::image_type *turi::image_type::image_type(turi::image_type *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6, char a7, int a8)
{
  uint64_t v11;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 4) = a5;
  *((_QWORD *)this + 5) = a6;
  *((_BYTE *)this + 48) = a7;
  *((_QWORD *)this + 7) = a8;
  v11 = operator new[]();
  boost::shared_ptr<char []>::reset<char>((__int128 *)this, v11);
  if (a6)
    memmove(*(void **)this, a2, a6);
  return this;
}

void sub_217F86728(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 8));
  _Unwind_Resume(a1);
}

__n128 boost::shared_ptr<char []>::reset<char>(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  __n128 result;
  __int128 v5;

  boost::shared_ptr<char []>::shared_ptr<char>((uint64_t *)&v5, a2);
  v3 = *a1;
  *a1 = v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count((unsigned int **)&v5 + 1);
  return result;
}

uint64_t turi::image_type::save(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  size_t *v15;
  uint64_t result;
  unint64_t v17;
  size_t v18;
  const void *v19;
  size_t v20;
  char *v21;
  size_t v22;
  _QWORD *v23;
  size_t v24;
  BOOL v25;
  std::vector<char>::size_type v26;
  size_t v27;
  char **v28;
  size_t v29;
  BOOL v30;
  std::vector<char>::size_type v31;
  size_t v32;
  char **v33;
  size_t v34;
  BOOL v35;
  std::vector<char>::size_type v36;
  size_t v37;
  char **v38;
  size_t v39;
  BOOL v40;
  std::vector<char>::size_type v41;
  size_t v42;
  char **v43;
  size_t v44;
  BOOL v45;
  std::vector<char>::size_type v46;
  size_t v47;
  uint64_t *v48;
  size_t v49;
  BOOL v50;
  std::vector<char>::size_type v51;
  size_t v52;
  char **v53;
  size_t v54;
  BOOL v55;
  std::vector<char>::size_type v56;

  v4 = (_BYTE *)(a1 + 48);
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 1 > v5)
    {
      v22 = 2 * v5 + 2;
      *(_QWORD *)(a2 + 40) = v22;
      v23 = *(_QWORD **)(a2 + 16);
      if (v23)
      {
        v6 = (_BYTE *)*v23;
        v24 = v23[1] - *v23;
        v25 = v22 >= v24;
        v26 = v22 - v24;
        if (v26 != 0 && v25)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v26);
          v6 = **(_BYTE ***)(a2 + 16);
        }
        else if (!v25)
        {
          v23[1] = &v6[v22];
        }
      }
      else
      {
        v6 = malloc_type_realloc(*(void **)(a2 + 24), v22, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v6;
    }
    else
    {
      v6 = *(_BYTE **)(a2 + 24);
    }
    v6[(*(_QWORD *)(a2 + 32))++] = *v4;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v7)
    {
      v27 = 2 * v7 + 16;
      *(_QWORD *)(a2 + 40) = v27;
      v28 = *(char ***)(a2 + 16);
      if (v28)
      {
        v8 = *v28;
        v29 = v28[1] - *v28;
        v30 = v27 >= v29;
        v31 = v27 - v29;
        if (v31 != 0 && v30)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v31);
          v8 = **(char ***)(a2 + 16);
        }
        else if (!v30)
        {
          v28[1] = &v8[v27];
        }
      }
      else
      {
        v8 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v27, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v8;
    }
    else
    {
      v8 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v8[*(_QWORD *)(a2 + 32)] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 32) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v9)
    {
      v32 = 2 * v9 + 16;
      *(_QWORD *)(a2 + 40) = v32;
      v33 = *(char ***)(a2 + 16);
      if (v33)
      {
        v10 = *v33;
        v34 = v33[1] - *v33;
        v35 = v32 >= v34;
        v36 = v32 - v34;
        if (v36 != 0 && v35)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v36);
          v10 = **(char ***)(a2 + 16);
        }
        else if (!v35)
        {
          v33[1] = &v10[v32];
        }
      }
      else
      {
        v10 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v32, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v10;
    }
    else
    {
      v10 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v10[*(_QWORD *)(a2 + 32)] = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 32) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v11)
    {
      v37 = 2 * v11 + 16;
      *(_QWORD *)(a2 + 40) = v37;
      v38 = *(char ***)(a2 + 16);
      if (v38)
      {
        v12 = *v38;
        v39 = v38[1] - *v38;
        v40 = v37 >= v39;
        v41 = v37 - v39;
        if (v41 != 0 && v40)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v41);
          v12 = **(char ***)(a2 + 16);
        }
        else if (!v40)
        {
          v38[1] = &v12[v37];
        }
      }
      else
      {
        v12 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v37, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v12;
    }
    else
    {
      v12 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v12[*(_QWORD *)(a2 + 32)] = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 32) += 8;
  }
  if (*(_QWORD *)a2)
  {
    std::ostream::write();
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v13)
    {
      v42 = 2 * v13 + 16;
      *(_QWORD *)(a2 + 40) = v42;
      v43 = *(char ***)(a2 + 16);
      if (v43)
      {
        v14 = *v43;
        v44 = v43[1] - *v43;
        v45 = v42 >= v44;
        v46 = v42 - v44;
        if (v46 != 0 && v45)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v46);
          v14 = **(char ***)(a2 + 16);
        }
        else if (!v45)
        {
          v43[1] = &v14[v42];
        }
      }
      else
      {
        v14 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v42, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = v14;
    }
    else
    {
      v14 = *(char **)(a2 + 24);
    }
    *(_QWORD *)&v14[*(_QWORD *)(a2 + 32)] = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 32) += 8;
  }
  v15 = (size_t *)(a1 + 40);
  if (*(_QWORD *)a2)
  {
    result = std::ostream::write();
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a2 + 32) + 8 > v17)
    {
      v47 = 2 * v17 + 16;
      *(_QWORD *)(a2 + 40) = v47;
      v48 = *(uint64_t **)(a2 + 16);
      if (v48)
      {
        result = *v48;
        v49 = v48[1] - *v48;
        v50 = v47 >= v49;
        v51 = v47 - v49;
        if (v51 != 0 && v50)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v51);
          result = **(_QWORD **)(a2 + 16);
        }
        else if (!v50)
        {
          v48[1] = result + v47;
        }
      }
      else
      {
        result = (uint64_t)malloc_type_realloc(*(void **)(a2 + 24), v47, 0xF6EA6B1uLL);
      }
      *(_QWORD *)(a2 + 24) = result;
    }
    else
    {
      result = *(_QWORD *)(a2 + 24);
    }
    *(_QWORD *)(result + *(_QWORD *)(a2 + 32)) = *v15;
    *(_QWORD *)(a2 + 32) += 8;
  }
  v18 = *v15;
  if (v18)
  {
    v19 = *(const void **)a1;
    if (*(_QWORD *)a2)
    {
      return std::ostream::write();
    }
    else
    {
      v20 = *(_QWORD *)(a2 + 40);
      if (*(_QWORD *)(a2 + 32) + v18 > v20)
      {
        v52 = 2 * (v20 + v18);
        *(_QWORD *)(a2 + 40) = v52;
        v53 = *(char ***)(a2 + 16);
        if (v53)
        {
          v21 = *v53;
          v54 = v53[1] - *v53;
          v55 = v52 >= v54;
          v56 = v52 - v54;
          if (v56 != 0 && v55)
          {
            std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v56);
            v21 = **(char ***)(a2 + 16);
          }
          else if (!v55)
          {
            v53[1] = &v21[v52];
          }
        }
        else
        {
          v21 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v52, 0xF6EA6B1uLL);
        }
        *(_QWORD *)(a2 + 24) = v21;
      }
      else
      {
        v21 = *(char **)(a2 + 24);
      }
      result = (uint64_t)memcpy(&v21[*(_QWORD *)(a2 + 32)], v19, v18);
      *(_QWORD *)(a2 + 32) += v18;
    }
  }
  return result;
}

void turi::image_type::load(turi::image_type *this, turi::iarchive *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    *((_BYTE *)this + 48) = *(_BYTE *)(v4 + (*((_QWORD *)a2 + 3))++);
  else
    std::istream::read();
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
  {
    *((_QWORD *)this + 2) = *(_QWORD *)(v5 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  v6 = *((_QWORD *)a2 + 2);
  if (v6)
  {
    *((_QWORD *)this + 3) = *(_QWORD *)(v6 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  v7 = *((_QWORD *)a2 + 2);
  if (v7)
  {
    *((_QWORD *)this + 4) = *(_QWORD *)(v7 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
    *((_QWORD *)this + 7) = *(_QWORD *)(v8 + *((_QWORD *)a2 + 3));
    *((_QWORD *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  v9 = (_QWORD *)((char *)this + 40);
  v10 = *((_QWORD *)a2 + 2);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + *((_QWORD *)a2 + 3));
    *v9 = v11;
    *((_QWORD *)a2 + 3) += 8;
    if (v11)
      goto LABEL_18;
LABEL_21:
    v16 = *(_OWORD *)this;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)&v17 + 1) = *((_QWORD *)&v16 + 1);
    boost::detail::shared_count::~shared_count((unsigned int **)&v17 + 1);
    return;
  }
  std::istream::read();
  if (!*v9)
    goto LABEL_21;
LABEL_18:
  v12 = operator new[]();
  boost::shared_ptr<char []>::reset<char>((__int128 *)this, v12);
  v13 = *(void **)this;
  v14 = *((_QWORD *)this + 5);
  v15 = *((_QWORD *)a2 + 2);
  if (v15)
  {
    memcpy(v13, (const void *)(v15 + *((_QWORD *)a2 + 3)), v14);
    *((_QWORD *)a2 + 3) += v14;
  }
  else
  {
    std::istream::read();
  }
}

uint64_t turi::image_type::get_image_data(turi::image_type *this)
{
  if (*((_QWORD *)this + 5))
    return *(_QWORD *)this;
  else
    return 0;
}

BOOL turi::image_type::operator==(uint64_t a1, uint64_t a2)
{
  size_t v2;

  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
    && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && (v2 = *(_QWORD *)(a1 + 40), v2 == *(_QWORD *)(a2 + 40))
    && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)
    && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56))
  {
    return memcmp(*(const void **)a1, *(const void **)a2, v2) == 0;
  }
  else
  {
    return 0;
  }
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

uint64_t *boost::shared_ptr<char []>::shared_ptr<char>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v5;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<char *,boost::checked_array_deleter<char>>(&v5, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v5;
  v5 = v3;
  boost::detail::shared_count::~shared_count(&v5);
  return a1;
}

void sub_217F8709C(_Unwind_Exception *a1)
{
  unsigned int **v1;

  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *boost::detail::shared_count::shared_count<char *,boost::checked_array_deleter<char>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &unk_24D91D9E0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_217F87110(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    MEMORY[0x219A199F0](v1, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_217F87138(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_pd<char *,boost::checked_array_deleter<char>>::~sp_counted_impl_pd()
{
  JUMPOUT(0x219A19A08);
}

uint64_t boost::detail::sp_counted_impl_pd<char *,boost::checked_array_deleter<char>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    JUMPOUT(0x219A199F0);
  return result;
}

uint64_t boost::detail::sp_counted_impl_pd<char *,boost::checked_array_deleter<char>>::get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<char *,boost::checked_array_deleter<char>>::get_local_deleter(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_pd<char *,boost::checked_array_deleter<char>>::get_untyped_deleter(uint64_t a1)
{
  return a1 + 24;
}

uint64_t _GLOBAL__sub_I_image_type_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

const void *turi::image_util_detail::resize_image_impl(const void *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, char **a9, int a10)
{
  switch(a4)
  {
    case 4:
      switch(a7)
      {
        case 4:
          return (const void *)turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>>(this, (uint64_t)a2, a3, 4, a5, a6, 4, a8, (int)a9);
        case 3:
          return (const void *)turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>>(this, (uint64_t)a2, a3, 4, a5, a6, 3, a8, (int)a9);
        case 1:
          return (const void *)turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(this, (uint64_t)a2, a3, 4, a5, a6, 1, a8, (int)a9);
        default:
          turi::image_util_detail::resize_image_impl(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::$_2::operator()();
      }
    case 3:
      switch(a7)
      {
        case 4:
          return (const void *)turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>>(this, (uint64_t)a2, a3, 3, a5, a6, 4, a8, (int)a9);
        case 3:
          return (const void *)turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>>(this, (uint64_t)a2, a3, 3, a5, a6, 3, a8, (int)a9);
        case 1:
          return (const void *)turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(this, (uint64_t)a2, a3, 3, a5, a6, 1, a8, (int)a9);
        default:
          turi::image_util_detail::resize_image_impl(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::$_1::operator()();
      }
    case 1:
      switch(a7)
      {
        case 4:
          return (const void *)turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>>(this, (uint64_t)a2, a3, 1, a5, a6, 4, a8, (int)a9);
        case 3:
          return (const void *)turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>>(this, (uint64_t)a2, a3, 1, a5, a6, 3, a8, (int)a9);
        case 1:
          return (const void *)turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(this, (uint64_t)a2, a3, 1, a5, a6, 1, a8, (int)a9);
        default:
          turi::image_util_detail::resize_image_impl(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::$_0::operator()();
      }
  }
  return this;
}

uint64_t turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int a9)
{
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26[4];

  if (!a1)
    turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#1}::operator()();
  v16 = a7 * a5;
  v17 = a7 * a5 * a6;
  v18 = (void *)operator new[]();
  v19 = v18;
  if (a2 == a5 && a3 == a6 && a4 == a7)
  {
    result = (uint64_t)memcpy(v18, a1, v17);
  }
  else
  {
    v26[0] = a5;
    v26[1] = a6;
    v26[2] = (uint64_t)v18;
    v26[3] = v16;
    if (a9 == 1)
    {
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>>((uint64_t)&v22, v26, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
    else
    {
      if (a9)
        turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#2}::operator()();
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>>((uint64_t)&v22, v26, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
  }
  *a8 = v19;
  return result;
}

uint64_t turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>>(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int a9)
{
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];

  if (!a1)
    turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#1}::operator()();
  v16 = a7 * a5;
  v17 = a7 * a5 * a6;
  v18 = (void *)operator new[]();
  v19 = v18;
  if (a2 == a5 && a3 == a6 && a4 == a7)
  {
    result = (uint64_t)memcpy(v18, a1, v17);
  }
  else
  {
    v27[0] = a5;
    v27[1] = a6;
    v27[2] = (uint64_t)v18;
    v27[3] = v16;
    if (a9 == 1)
    {
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
    else
    {
      if (a9)
        turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#2}::operator()();
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
  }
  *a8 = v19;
  return result;
}

uint64_t turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>>(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int a9)
{
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];

  if (!a1)
    turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#1}::operator()();
  v16 = a7 * a5;
  v17 = a7 * a5 * a6;
  v18 = (void *)operator new[]();
  v19 = v18;
  if (a2 == a5 && a3 == a6 && a4 == a7)
  {
    result = (uint64_t)memcpy(v18, a1, v17);
  }
  else
  {
    v27[0] = a5;
    v27[1] = a6;
    v27[2] = (uint64_t)v18;
    v27[3] = v16;
    if (a9 == 1)
    {
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
    else
    {
      if (a9)
        turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#2}::operator()();
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
  }
  *a8 = v19;
  return result;
}

uint64_t turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int a9)
{
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];

  if (!a1)
    turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#1}::operator()();
  v16 = a7 * a5;
  v17 = a7 * a5 * a6;
  v18 = (void *)operator new[]();
  v19 = v18;
  if (a2 == a5 && a3 == a6 && a4 == a7)
  {
    result = (uint64_t)memcpy(v18, a1, v17);
  }
  else
  {
    v27[0] = a5;
    v27[1] = a6;
    v27[2] = (uint64_t)v18;
    v27[3] = v16;
    if (a9 == 1)
    {
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
    else
    {
      if (a9)
        turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#2}::operator()();
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
  }
  *a8 = v19;
  return result;
}

uint64_t turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>>(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int a9)
{
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26[4];

  if (!a1)
    turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#1}::operator()();
  v16 = a7 * a5;
  v17 = a7 * a5 * a6;
  v18 = (void *)operator new[]();
  v19 = v18;
  if (a2 == a5 && a3 == a6 && a4 == a7)
  {
    result = (uint64_t)memcpy(v18, a1, v17);
  }
  else
  {
    v26[0] = a5;
    v26[1] = a6;
    v26[2] = (uint64_t)v18;
    v26[3] = v16;
    if (a9 == 1)
    {
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>>((uint64_t)&v22, v26, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
    else
    {
      if (a9)
        turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#2}::operator()();
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>>((uint64_t)&v22, v26, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
  }
  *a8 = v19;
  return result;
}

uint64_t turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>>(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int a9)
{
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];

  if (!a1)
    turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#1}::operator()();
  v16 = a7 * a5;
  v17 = a7 * a5 * a6;
  v18 = (void *)operator new[]();
  v19 = v18;
  if (a2 == a5 && a3 == a6 && a4 == a7)
  {
    result = (uint64_t)memcpy(v18, a1, v17);
  }
  else
  {
    v27[0] = a5;
    v27[1] = a6;
    v27[2] = (uint64_t)v18;
    v27[3] = v16;
    if (a9 == 1)
    {
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
    else
    {
      if (a9)
        turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#2}::operator()();
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
  }
  *a8 = v19;
  return result;
}

uint64_t turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int a9)
{
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];

  if (!a1)
    turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#1}::operator()();
  v16 = a7 * a5;
  v17 = a7 * a5 * a6;
  v18 = (void *)operator new[]();
  v19 = v18;
  if (a2 == a5 && a3 == a6 && a4 == a7)
  {
    result = (uint64_t)memcpy(v18, a1, v17);
  }
  else
  {
    v27[0] = a5;
    v27[1] = a6;
    v27[2] = (uint64_t)v18;
    v27[3] = v16;
    if (a9 == 1)
    {
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
    else
    {
      if (a9)
        turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#2}::operator()();
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
  }
  *a8 = v19;
  return result;
}

uint64_t turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>>(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int a9)
{
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[4];

  if (!a1)
    turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#1}::operator()();
  v16 = a7 * a5;
  v17 = a7 * a5 * a6;
  v18 = (void *)operator new[]();
  v19 = v18;
  if (a2 == a5 && a3 == a6 && a4 == a7)
  {
    result = (uint64_t)memcpy(v18, a1, v17);
  }
  else
  {
    v27[0] = a5;
    v27[1] = a6;
    v27[2] = (uint64_t)v18;
    v27[3] = v16;
    if (a9 == 1)
    {
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
    else
    {
      if (a9)
        turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#2}::operator()();
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = 0;
      v26 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>>((uint64_t)&v22, v27, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
  }
  *a8 = v19;
  return result;
}

uint64_t turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>>(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int a9)
{
  uint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26[4];

  if (!a1)
    turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#1}::operator()();
  v16 = a7 * a5;
  v17 = a7 * a5 * a6;
  v18 = (void *)operator new[]();
  v19 = v18;
  if (a2 == a5 && a3 == a6 && a4 == a7)
  {
    result = (uint64_t)memcpy(v18, a1, v17);
  }
  else
  {
    v26[0] = a5;
    v26[1] = a6;
    v26[2] = (uint64_t)v18;
    v26[3] = v16;
    if (a9 == 1)
    {
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>>((uint64_t)&v22, v26, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
    else
    {
      if (a9)
        turi::image_util_detail::resize_image_detail<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(char const*,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,unsigned long,char **,int)::{lambda(void)#2}::operator()();
      v22 = a2;
      v23 = a3;
      v24 = a1;
      v25 = a4 * a2;
      result = boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>>((uint64_t)&v22, v26, 0.0, 0.0, (double)a2, (double)a3, 0.0);
    }
  }
  *a8 = v19;
  return result;
}

void turi::image_util_detail::decode_image_impl(turi::image_util_detail *this, turi::image_type *a2)
{
  uint64_t v2;
  turi *v4;
  unint64_t *v5;
  turi *image_data;
  unint64_t *v7;
  char *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 7);
  if (v2 != 2)
  {
    v8 = 0;
    v9 = 0;
    if (v2 == 1)
    {
      image_data = (turi *)turi::image_type::get_image_data(this);
      turi::decode_png(image_data, *((const char **)this + 5), &v9, &v8, v7);
    }
    else
    {
      if (v2)
        turi::image_util_detail::decode_image_impl(turi::image_type &)::$_0::operator()();
      v4 = (turi *)turi::image_type::get_image_data(this);
      turi::decode_jpeg(v4, *((const char **)this + 5), &v9, &v8, v5);
    }
    boost::shared_ptr<char []>::reset<char>((__int128 *)this, v9);
    *((_QWORD *)this + 5) = v8;
    *((_QWORD *)this + 7) = 2;
  }
}

void turi::image_util_detail::encode_image_impl(turi::image_util_detail *this, turi::image_type *a2)
{
  turi *image_data;
  unint64_t *v4;
  size_t v5;
  uint64_t v6;

  if (*((_QWORD *)this + 7) == 2)
  {
    v5 = 0;
    v6 = 0;
    image_data = (turi *)turi::image_type::get_image_data(this);
    turi::encode_png(image_data, *((const char **)this + 3), *((_QWORD *)this + 2), *((_QWORD *)this + 4), &v6, &v5, v4);
    boost::shared_ptr<char []>::reset<char>((__int128 *)this, v6);
    *((_QWORD *)this + 5) = v5;
    *((_QWORD *)this + 7) = 1;
  }
}

uint64_t boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = a2[2] + a2[3] * v7;
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,double>(v6, v11.f64, (_BYTE *)(v10 + v9++));
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,double>(_QWORD *a1, double *a2, _BYTE *a3)
{
  uint64_t result;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  result = 0;
  v5 = a2[1];
  if (*a2 >= 0.0)
    v6 = 0.5;
  else
    v6 = -0.5;
  if (v5 >= 0.0)
    v7 = 0.5;
  else
    v7 = -0.5;
  if (((uint64_t)(*a2 + v6) & 0x80000000) == 0)
  {
    v8 = (uint64_t)(v5 + v7);
    v9 = (uint64_t)(*a2 + v6);
    if ((v8 & 0x80000000) == 0 && *a1 > v9)
    {
      if (a1[1] <= (uint64_t)v8)
      {
        return 0;
      }
      else
      {
        *a3 = *(_BYTE *)(a1[2] + v9 + a1[3] * (uint64_t)(v5 + v7));
        return 1;
      }
    }
  }
  return result;
}

uint64_t boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v28;
  float64x2_t v31;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v28 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v31.f64[0] = v25 + v26 * 0.0;
  return boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::matrix3x2<double>>(a1, a2, &v31, v11 * 0.5+ a4+ v24.__cosval * v23- v22 * v24.__sinval+ 0.0+ (v24.__sinval * v23 + v22 * v24.__cosval + 0.0) * 0.0, v11 * 0.5 + a4, v26 + v25 * 0.0, v24.__sinval * v21 + v20 * v24.__cosval + (v24.__cosval * v21 - v20 * v24.__sinval) * 0.0, v24.__cosval * v21 - v20 * v24.__sinval + (v24.__sinval * v21 + v20 * v24.__cosval) * 0.0, v28 * 0.5+ a3+ v24.__sinval * v23+ v22 * v24.__cosval+ 0.0+ (v24.__cosval * v23 - v22 * v24.__sinval + 0.0) * 0.0);
}

uint64_t boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  int64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  float64x2_t v20;

  v9 = a2[1];
  if (v9 >= 1)
  {
    v12 = (int64_t *)result;
    v13 = 0;
    v14 = *a2;
    do
    {
      if (v14 >= 1)
      {
        v15 = 0;
        v19 = (double)v13;
        v16 = a2[2] + a2[3] * v13;
        do
        {
          v17 = *a3;
          v18 = vmlaq_n_f64(vmulq_n_f64(a3[1], v19), *a3, (double)v15);
          v20 = vaddq_f64(a3[2], v18);
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,double>(v12, v20.f64, (_BYTE *)(v16 + v15++), v20.f64[0], v17.f64[0], v18.f64[0], v19, a8, a9);
        }
        while (v14 != v15);
      }
      ++v13;
    }
    while (v13 != v9);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,double>(int64_t *a1, double *a2, _BYTE *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  int64_t v10;
  double v11;
  int64_t v12;
  int64_t v13;
  double v14;
  double v15;
  int64_t v16;
  _BYTE *v17;
  int64_t v18;
  int64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  _BYTE *v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  double v30;
  double v31;

  v9 = 0;
  v10 = vcvtmd_s64_f64(*a2);
  if ((v10 & 0x8000000000000000) == 0)
  {
    v11 = a2[1];
    v12 = vcvtmd_s64_f64(v11);
    if ((v12 & 0x8000000000000000) == 0)
    {
      if (*a1 <= v10)
        return 0;
      v13 = a1[1];
      if (v13 <= v12)
      {
        return 0;
      }
      else
      {
        v14 = (double)(uint64_t)floor(v11);
        v15 = v11 - v14;
        v16 = a1[3];
        v17 = (_BYTE *)(a1[2] + v10 + v16 * v12);
        v18 = v10 + 1;
        v19 = v12 + 1;
        if (v18 >= *a1)
        {
          if (v19 >= v13)
          {
            LOBYTE(v15) = *v17;
            v28 = (double)*(unint64_t *)&v15;
          }
          else
          {
            LOBYTE(v14) = *v17;
            *(double *)&v29 = (double)*(unint64_t *)&v14;
            v30 = *(double *)&v29 * (1.0 - v15) + 0.0;
            LOBYTE(v29) = v17[v16];
            v28 = v30 + (double)v29 * v15;
          }
        }
        else
        {
          v20 = *a2 - (double)(uint64_t)floor(*a2);
          v21 = 1.0 - v20;
          if (v19 >= v13)
          {
            LOBYTE(v15) = *v17;
            v31 = (double)*(unint64_t *)&v15 * v21 + 0.0;
            LOBYTE(v21) = v17[1];
            v28 = v31 + (double)*(unint64_t *)&v21 * v20;
          }
          else
          {
            LOBYTE(a9) = *v17;
            *(double *)&v22 = (double)*(unint64_t *)&a9;
            *(double *)&v23 = *(double *)&v22 * (v21 * (1.0 - v15)) + 0.0;
            LOBYTE(v22) = v17[1];
            v24 = *(double *)&v23 + (double)v22 * (v20 * (1.0 - v15));
            v25 = &v17[v16];
            LOBYTE(v23) = *v25;
            v26 = v24 + (double)v23 * (v21 * v15);
            v27 = v20 * v15;
            LOBYTE(v20) = v25[1];
            v28 = v26 + (double)*(unint64_t *)&v20 * v27;
          }
        }
        *a3 = (int)v28;
        return 1;
      }
    }
  }
  return v9;
}

uint64_t boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = (_BYTE *)(a2[2] + a2[3] * v7);
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, v10);
          ++v9;
          v10 += 3;
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,double>(_QWORD *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v3 = 0;
  v4 = a2[1];
  if (*a2 >= 0.0)
    v5 = 0.5;
  else
    v5 = -0.5;
  if (v4 >= 0.0)
    v6 = 0.5;
  else
    v6 = -0.5;
  if (((uint64_t)(*a2 + v5) & 0x80000000) == 0)
  {
    v7 = (uint64_t)(v4 + v6);
    v8 = (uint64_t)(*a2 + v5);
    if ((v7 & 0x80000000) == 0 && *a1 > v8)
    {
      if (a1[1] <= (uint64_t)v7)
      {
        return 0;
      }
      else
      {
        v10 = *(_BYTE *)(a1[2] + v8 + a1[4] * (uint64_t)(v4 + v6));
        *a3 = v10;
        a3[1] = v10;
        a3[2] = v10;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  int64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (int64_t *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = (_BYTE *)(a2[2] + a2[3] * v7);
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, v10);
          ++v9;
          v10 += 3;
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,double>(int64_t *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  int64_t v4;
  double v5;
  int64_t v6;
  int64_t v7;
  double v8;
  int64_t v9;
  unsigned __int8 *v10;
  int64_t v11;
  int64_t v12;
  unsigned int v13;
  double v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  unsigned __int8 *v19;
  double v20;
  double v21;
  double v22;
  unint64_t v23;
  double v24;

  v3 = 0;
  v4 = vcvtmd_s64_f64(*a2);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a2[1];
    v6 = vcvtmd_s64_f64(v5);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (*a1 <= v4)
        return 0;
      v7 = a1[1];
      if (v7 <= v6)
      {
        return 0;
      }
      else
      {
        v8 = v5 - (double)(uint64_t)floor(v5);
        v9 = a1[4];
        v10 = (unsigned __int8 *)(a1[2] + v4 + v9 * v6);
        v11 = v4 + 1;
        v12 = v6 + 1;
        v13 = *v10;
        if (v11 >= *a1)
        {
          if (v12 >= v7)
          {
            v22 = (double)v13;
          }
          else
          {
            *(double *)&v23 = (double)v13;
            LOBYTE(v23) = v10[v9];
            v22 = (double)v13 * (1.0 - v8) + 0.0 + (double)v23 * v8;
          }
        }
        else
        {
          v14 = *a2 - (double)(uint64_t)floor(*a2);
          v15 = 1.0 - v14;
          if (v12 >= v7)
          {
            v24 = (double)v13 * v15 + 0.0;
            LOBYTE(v15) = v10[1];
            v22 = v24 + (double)*(unint64_t *)&v15 * v14;
          }
          else
          {
            *(double *)&v16 = (double)v13;
            *(double *)&v17 = (double)v13 * (v15 * (1.0 - v8)) + 0.0;
            LOBYTE(v16) = v10[1];
            v18 = *(double *)&v17 + (double)v16 * (v14 * (1.0 - v8));
            v19 = &v10[v9];
            LOBYTE(v17) = *v19;
            v20 = v18 + (double)v17 * (v15 * v8);
            v21 = v14 * v8;
            LOBYTE(v14) = v19[1];
            v22 = v20 + (double)*(unint64_t *)&v14 * v21;
          }
        }
        *a3 = (int)v22;
        a3[1] = (int)v22;
        a3[2] = (int)v22;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = (_BYTE *)(a2[2] + a2[3] * v7);
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, v10);
          ++v9;
          v10 += 4;
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,double>(_QWORD *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v3 = 0;
  v4 = a2[1];
  if (*a2 >= 0.0)
    v5 = 0.5;
  else
    v5 = -0.5;
  if (v4 >= 0.0)
    v6 = 0.5;
  else
    v6 = -0.5;
  if (((uint64_t)(*a2 + v5) & 0x80000000) == 0)
  {
    v7 = (uint64_t)(v4 + v6);
    v8 = (uint64_t)(*a2 + v5);
    if ((v7 & 0x80000000) == 0 && *a1 > v8)
    {
      if (a1[1] <= (uint64_t)v7)
      {
        return 0;
      }
      else
      {
        v10 = *(_BYTE *)(a1[2] + v8 + a1[4] * (uint64_t)(v4 + v6));
        *a3 = v10;
        a3[1] = v10;
        a3[2] = v10;
        a3[3] = -1;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  int64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (int64_t *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = (_BYTE *)(a2[2] + a2[3] * v7);
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, v10);
          ++v9;
          v10 += 4;
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,double>(int64_t *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  int64_t v4;
  double v5;
  int64_t v6;
  int64_t v7;
  double v8;
  int64_t v9;
  unsigned __int8 *v10;
  int64_t v11;
  int64_t v12;
  unsigned int v13;
  double v14;
  double v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  unsigned __int8 *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;

  v3 = 0;
  v4 = vcvtmd_s64_f64(*a2);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a2[1];
    v6 = vcvtmd_s64_f64(v5);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (*a1 <= v4)
        return 0;
      v7 = a1[1];
      if (v7 <= v6)
      {
        return 0;
      }
      else
      {
        v8 = v5 - (double)(uint64_t)floor(v5);
        v9 = a1[4];
        v10 = (unsigned __int8 *)(a1[2] + v4 + v9 * v6);
        v11 = v4 + 1;
        v12 = v6 + 1;
        v13 = *v10;
        if (v11 >= *a1)
        {
          if (v12 >= v7)
          {
            v24 = (double)v13;
            v25 = 255.0;
          }
          else
          {
            v24 = (double)v13 * (1.0 - v8) + 0.0 + (double)v10[v9] * v8;
            v25 = (1.0 - v8) * 255.0 + 0.0 + v8 * 255.0;
          }
        }
        else
        {
          v14 = *a2 - (double)(uint64_t)floor(*a2);
          v15 = 1.0 - v14;
          if (v12 >= v7)
          {
            v26 = (double)v13 * v15 + 0.0;
            v27 = v15 * 255.0 + 0.0;
            LOBYTE(v15) = v10[1];
            v24 = v26 + (double)*(unint64_t *)&v15 * v14;
            v25 = v27 + v14 * 255.0;
          }
          else
          {
            *(double *)&v16 = v15 * (1.0 - v8) * 255.0 + 0.0;
            v17 = v14 * (1.0 - v8);
            v18 = (double)v13 * (v15 * (1.0 - v8)) + 0.0 + (double)v10[1] * v17;
            v19 = *(double *)&v16 + v17 * 255.0;
            v20 = &v10[v9];
            v21 = v15 * v8;
            LOBYTE(v16) = *v20;
            v22 = v19 + v21 * 255.0;
            v23 = v14 * v8;
            LOBYTE(v14) = v20[1];
            v24 = v18 + (double)v16 * v21 + (double)*(unint64_t *)&v14 * v23;
            v25 = v22 + v23 * 255.0;
          }
        }
        *a3 = (int)v24;
        a3[1] = (int)v24;
        a3[2] = (int)v24;
        a3[3] = (int)v25;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = a2[2] + a2[3] * v7;
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, (_BYTE *)(v10 + v9++));
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,double>(_QWORD *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v10;

  v3 = 0;
  v4 = a2[1];
  if (*a2 >= 0.0)
    v5 = 0.5;
  else
    v5 = -0.5;
  if (v4 >= 0.0)
    v6 = 0.5;
  else
    v6 = -0.5;
  if (((uint64_t)(*a2 + v5) & 0x80000000) == 0)
  {
    v7 = (uint64_t)(v4 + v6);
    v8 = (uint64_t)(*a2 + v5);
    if ((v7 & 0x80000000) == 0 && *a1 > v8)
    {
      if (a1[1] <= (uint64_t)v7)
      {
        return 0;
      }
      else
      {
        v10 = (unsigned __int8 *)(a1[2] + 3 * v8 + a1[4] * (uint64_t)(v4 + v6));
        *a3 = (9667 * v10[1] + 4915 * *v10 + 1802 * v10[2] + 0x2000) >> 14;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  int64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (int64_t *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = a2[2] + a2[3] * v7;
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, (_BYTE *)(v10 + v9++));
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,double>(int64_t *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  int64_t v4;
  double v5;
  int64_t v6;
  int64_t v7;
  double v8;
  int64_t v9;
  unsigned __int8 *v10;
  int64_t v11;
  int64_t v12;
  unsigned int v13;
  double v14;
  double v15;
  double v16;
  unsigned __int8 *v17;
  double v18;

  v3 = 0;
  v4 = vcvtmd_s64_f64(*a2);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a2[1];
    v6 = vcvtmd_s64_f64(v5);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (*a1 <= v4)
        return 0;
      v7 = a1[1];
      if (v7 <= v6)
      {
        return 0;
      }
      else
      {
        v8 = v5 - (double)(uint64_t)floor(v5);
        v9 = a1[4];
        v10 = (unsigned __int8 *)(a1[2] + 3 * v4 + v9 * v6);
        v11 = v4 + 1;
        v12 = v6 + 1;
        v13 = 9667 * v10[1] + 4915 * *v10 + 1802 * v10[2] + 0x2000;
        if (v11 >= *a1)
        {
          if (v12 >= v7)
            v18 = (double)(v13 >> 14);
          else
            v18 = (double)(v13 >> 14) * (1.0 - v8)
                + 0.0
                + (double)((9667 * v10[v9 + 1]
                                           + 4915 * v10[v9]
                                           + 1802 * v10[v9 + 2]
                                           + 0x2000) >> 14)
                * v8;
        }
        else
        {
          v14 = *a2 - (double)(uint64_t)floor(*a2);
          v15 = 1.0 - v14;
          if (v12 >= v7)
          {
            v18 = (double)(v13 >> 14) * v15
                + 0.0
                + (double)((9667 * v10[4] + 4915 * v10[3] + 1802 * v10[5] + 0x2000) >> 14)
                * v14;
          }
          else
          {
            v16 = (double)(v13 >> 14) * (v15 * (1.0 - v8))
                + 0.0
                + (double)((9667 * v10[4] + 4915 * v10[3] + 1802 * v10[5] + 0x2000) >> 14)
                * (v14
                 * (1.0 - v8));
            v17 = &v10[v9];
            v18 = v16
                + (double)((9667 * v17[1] + 4915 * *v17 + 1802 * v17[2] + 0x2000) >> 14)
                * (v15
                 * v8)
                + (double)((9667 * v17[4] + 4915 * v17[3] + 1802 * v17[5] + 0x2000) >> 14)
                * (v14
                 * v8);
          }
        }
        *a3 = (int)v18;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = (_BYTE *)(a2[2] + a2[3] * v7);
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,double>(v6, v11.f64, v10);
          ++v9;
          v10 += 3;
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,double>(_QWORD *a1, double *a2, _BYTE *a3)
{
  uint64_t result;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v11;

  result = 0;
  v5 = a2[1];
  if (*a2 >= 0.0)
    v6 = 0.5;
  else
    v6 = -0.5;
  if (v5 >= 0.0)
    v7 = 0.5;
  else
    v7 = -0.5;
  if (((uint64_t)(*a2 + v6) & 0x80000000) == 0)
  {
    v8 = (uint64_t)(v5 + v7);
    v9 = (uint64_t)(*a2 + v6);
    if ((v8 & 0x80000000) == 0 && *a1 > v9)
    {
      if (a1[1] <= (uint64_t)v8)
      {
        return 0;
      }
      else
      {
        v11 = (_BYTE *)(a1[2] + 3 * v9 + a1[3] * (uint64_t)(v5 + v7));
        *a3 = *v11;
        a3[1] = v11[1];
        a3[2] = v11[2];
        return 1;
      }
    }
  }
  return result;
}

uint64_t boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v28;
  float64x2_t v31;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v28 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v31.f64[0] = v25 + v26 * 0.0;
  return boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::matrix3x2<double>>(a1, a2, &v31, v11 * 0.5+ a4+ v24.__cosval * v23- v22 * v24.__sinval+ 0.0+ (v24.__sinval * v23 + v22 * v24.__cosval + 0.0) * 0.0, v11 * 0.5 + a4, v26 + v25 * 0.0, v24.__sinval * v21 + v20 * v24.__cosval + (v24.__cosval * v21 - v20 * v24.__sinval) * 0.0, v24.__cosval * v21 - v20 * v24.__sinval + (v24.__sinval * v21 + v20 * v24.__cosval) * 0.0, v28 * 0.5+ a3+ v24.__sinval * v23+ v22 * v24.__cosval+ 0.0+ (v24.__cosval * v23 - v22 * v24.__sinval + 0.0) * 0.0,
           v24.__sinval * v23 + v22 * v24.__cosval + 0.0,
           v28 * 0.5 + a3);
}

uint64_t boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  int64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;

  v11 = a2[1];
  if (v11 >= 1)
  {
    v14 = (int64_t *)result;
    v15 = 0;
    v16 = *a2;
    do
    {
      if (v16 >= 1)
      {
        v17 = 0;
        v21 = (double)v15;
        v18 = (_BYTE *)(a2[2] + a2[3] * v15);
        do
        {
          v19 = *a3;
          v20 = vmlaq_n_f64(vmulq_n_f64(a3[1], v21), *a3, (double)v17);
          v22 = vaddq_f64(a3[2], v20);
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,double>(v14, v22.f64, v18, v22.f64[0], v19.f64[0], v20.f64[0], v21, a8, a9, a10, a11);
          ++v17;
          v18 += 3;
        }
        while (v16 != v17);
      }
      ++v15;
    }
    while (v15 != v11);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,double>(int64_t *a1, double *a2, _BYTE *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  double v14;
  int64_t v15;
  int64_t v16;
  double v17;
  double v18;
  int64_t v19;
  _BYTE *v20;
  int64_t v21;
  int64_t v22;
  double v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  double v31;
  _BYTE *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  double v39;
  unint64_t v40;
  double v41;
  double v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  unint64_t v46;
  double v47;
  double v48;
  unint64_t v49;

  v12 = 0;
  v13 = vcvtmd_s64_f64(*a2);
  if ((v13 & 0x8000000000000000) == 0)
  {
    v14 = a2[1];
    v15 = vcvtmd_s64_f64(v14);
    if ((v15 & 0x8000000000000000) == 0)
    {
      if (*a1 <= v13)
        return 0;
      v16 = a1[1];
      if (v16 <= v15)
      {
        return 0;
      }
      else
      {
        v17 = (double)(uint64_t)floor(v14);
        v18 = v14 - v17;
        v19 = a1[3];
        v20 = (_BYTE *)(a1[2] + 3 * v13 + v19 * v15);
        v21 = v13 + 1;
        v22 = v15 + 1;
        if (v21 >= *a1)
        {
          if (v22 >= v16)
          {
            LOBYTE(v18) = *v20;
            v39 = (double)*(unint64_t *)&v18;
            LOBYTE(v18) = v20[1];
            v41 = (double)*(unint64_t *)&v18;
            LOBYTE(v18) = v20[2];
            v42 = (double)*(unint64_t *)&v18;
          }
          else
          {
            LOBYTE(v17) = *v20;
            LOBYTE(a8) = v20[1];
            *(double *)&v43 = (double)*(unint64_t *)&a8 * (1.0 - v18) + 0.0;
            LOBYTE(a9) = v20[2];
            v44 = &v20[v19];
            *(double *)&v45 = (double)*v44;
            v39 = (double)*(unint64_t *)&v17 * (1.0 - v18) + 0.0 + *(double *)&v45 * v18;
            LOBYTE(v45) = v44[1];
            v41 = *(double *)&v43 + (double)v45 * v18;
            LOBYTE(v43) = v44[2];
            v42 = (double)*(unint64_t *)&a9 * (1.0 - v18) + 0.0 + (double)v43 * v18;
          }
        }
        else
        {
          v23 = *a2 - (double)(uint64_t)floor(*a2);
          v24 = 1.0 - v23;
          if (v22 >= v16)
          {
            LOBYTE(v18) = *v20;
            *(double *)&v46 = (double)*(unint64_t *)&v18 * v24 + 0.0;
            LOBYTE(a8) = v20[1];
            v47 = (double)*(unint64_t *)&a8 * v24 + 0.0;
            LOBYTE(a9) = v20[2];
            v48 = (double)*(unint64_t *)&a9 * v24 + 0.0;
            LOBYTE(v24) = v20[3];
            v39 = *(double *)&v46 + (double)*(unint64_t *)&v24 * v23;
            LOBYTE(v46) = v20[4];
            *(double *)&v49 = (double)v46;
            v41 = v47 + *(double *)&v49 * v23;
            LOBYTE(v49) = v20[5];
            v42 = v48 + (double)v49 * v23;
          }
          else
          {
            LOBYTE(a9) = *v20;
            LOBYTE(a11) = v20[1];
            *(double *)&v25 = (double)*(unint64_t *)&a11 * (v24 * (1.0 - v18)) + 0.0;
            LOBYTE(v11) = v20[2];
            *(double *)&v26 = (double)v11 * (v24 * (1.0 - v18)) + 0.0;
            v27 = v23 * (1.0 - v18);
            *(double *)&v28 = (double)v20[3];
            *(double *)&v29 = (double)*(unint64_t *)&a9 * (v24 * (1.0 - v18)) + 0.0 + *(double *)&v28 * v27;
            LOBYTE(v28) = v20[4];
            *(double *)&v30 = *(double *)&v25 + (double)v28 * v27;
            LOBYTE(v25) = v20[5];
            v31 = *(double *)&v26 + (double)v25 * v27;
            v32 = &v20[v19];
            v33 = v24 * v18;
            LOBYTE(v26) = *v32;
            v34 = *(double *)&v29 + (double)v26 * v33;
            LOBYTE(v29) = v32[1];
            v35 = *(double *)&v30 + (double)v29 * v33;
            LOBYTE(v30) = v32[2];
            v36 = v31 + (double)v30 * v33;
            v37 = v23 * v18;
            LOBYTE(v23) = v32[3];
            *(double *)&v38 = (double)*(unint64_t *)&v23;
            v39 = v34 + *(double *)&v38 * v37;
            LOBYTE(v38) = v32[4];
            *(double *)&v40 = (double)v38;
            v41 = v35 + *(double *)&v40 * v37;
            LOBYTE(v40) = v32[5];
            v42 = v36 + (double)v40 * v37;
          }
        }
        *a3 = (int)v39;
        a3[1] = (int)v41;
        a3[2] = (int)v42;
        return 1;
      }
    }
  }
  return v12;
}

uint64_t boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = a2[2] + a2[3] * v7;
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, v10);
          ++v9;
          v10 += 4;
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,double>(_QWORD *a1, double *a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  __int16 v11;

  v3 = 0;
  v4 = a2[1];
  if (*a2 >= 0.0)
    v5 = 0.5;
  else
    v5 = -0.5;
  if (v4 >= 0.0)
    v6 = 0.5;
  else
    v6 = -0.5;
  if (((uint64_t)(*a2 + v5) & 0x80000000) == 0)
  {
    v7 = (uint64_t)(v4 + v6);
    v8 = (uint64_t)(*a2 + v5);
    if ((v7 & 0x80000000) == 0 && *a1 > v8)
    {
      if (a1[1] <= (uint64_t)v7)
      {
        return 0;
      }
      else
      {
        v10 = a1[2] + 3 * v8 + a1[4] * (uint64_t)(v4 + v6);
        v11 = *(_WORD *)v10;
        LOBYTE(v10) = *(_BYTE *)(v10 + 2);
        *(_WORD *)a3 = v11;
        *(_BYTE *)(a3 + 2) = v10;
        *(_BYTE *)(a3 + 3) = -1;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  int64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (int64_t *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = (_BYTE *)(a2[2] + a2[3] * v7);
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, v10);
          ++v9;
          v10 += 4;
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::default_color_converter>>>>>,double>(int64_t *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  int64_t v4;
  double v5;
  int64_t v6;
  int64_t v7;
  double v8;
  int64_t v9;
  unsigned __int8 *v10;
  int64_t v11;
  int64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  unsigned __int8 *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unint64_t v33;
  double v34;
  unint64_t v35;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  double v44;
  double v45;
  unint64_t v46;

  v3 = 0;
  v4 = vcvtmd_s64_f64(*a2);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a2[1];
    v6 = vcvtmd_s64_f64(v5);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (*a1 <= v4)
        return 0;
      v7 = a1[1];
      if (v7 <= v6)
      {
        return 0;
      }
      else
      {
        v8 = v5 - (double)(uint64_t)floor(v5);
        v9 = a1[4];
        v10 = (unsigned __int8 *)(a1[2] + 3 * v4 + v9 * v6);
        v11 = v4 + 1;
        v12 = v6 + 1;
        v13 = *v10;
        v14 = v10[1];
        v15 = v10[2];
        if (v11 >= *a1)
        {
          if (v12 >= v7)
          {
            v34 = (double)v13;
            v36 = (double)v14;
            v37 = (double)v15;
            v38 = 255.0;
          }
          else
          {
            *(double *)&v39 = (double)v14 * (1.0 - v8) + 0.0;
            v40 = &v10[v9];
            *(double *)&v41 = (double)*v40;
            v34 = (double)v13 * (1.0 - v8) + 0.0 + *(double *)&v41 * v8;
            LOBYTE(v41) = v40[1];
            v36 = *(double *)&v39 + (double)v41 * v8;
            LOBYTE(v39) = v40[2];
            v37 = (double)v15 * (1.0 - v8) + 0.0 + (double)v39 * v8;
            v38 = (1.0 - v8) * 255.0 + 0.0 + v8 * 255.0;
          }
        }
        else
        {
          v16 = *a2 - (double)(uint64_t)floor(*a2);
          v17 = 1.0 - v16;
          if (v12 >= v7)
          {
            *(double *)&v42 = (double)v13 * v17 + 0.0;
            v43 = (double)v14 * v17 + 0.0;
            v44 = (double)v15 * v17 + 0.0;
            v45 = v17 * 255.0 + 0.0;
            LOBYTE(v17) = v10[3];
            v34 = *(double *)&v42 + (double)*(unint64_t *)&v17 * v16;
            LOBYTE(v42) = v10[4];
            *(double *)&v46 = (double)v42;
            v36 = v43 + *(double *)&v46 * v16;
            LOBYTE(v46) = v10[5];
            v37 = v44 + (double)v46 * v16;
            v38 = v45 + v16 * 255.0;
          }
          else
          {
            *(double *)&v18 = (double)v14 * (v17 * (1.0 - v8)) + 0.0;
            *(double *)&v19 = v17 * (1.0 - v8) * 255.0 + 0.0;
            v20 = v16 * (1.0 - v8);
            *(double *)&v21 = (double)v10[3];
            *(double *)&v22 = (double)v13 * (v17 * (1.0 - v8)) + 0.0 + *(double *)&v21 * v20;
            LOBYTE(v21) = v10[4];
            *(double *)&v23 = *(double *)&v18 + (double)v21 * v20;
            LOBYTE(v18) = v10[5];
            v24 = (double)v15 * (v17 * (1.0 - v8)) + 0.0 + (double)v18 * v20;
            v25 = *(double *)&v19 + v20 * 255.0;
            v26 = &v10[v9];
            v27 = v17 * v8;
            LOBYTE(v19) = *v26;
            v28 = *(double *)&v22 + (double)v19 * v27;
            LOBYTE(v22) = v26[1];
            v29 = *(double *)&v23 + (double)v22 * v27;
            LOBYTE(v23) = v26[2];
            v30 = v24 + (double)v23 * v27;
            v31 = v25 + v27 * 255.0;
            v32 = v16 * v8;
            LOBYTE(v16) = v26[3];
            *(double *)&v33 = (double)*(unint64_t *)&v16;
            v34 = v28 + *(double *)&v33 * v32;
            LOBYTE(v33) = v26[4];
            *(double *)&v35 = (double)v33;
            v36 = v29 + *(double *)&v35 * v32;
            LOBYTE(v35) = v26[5];
            v37 = v30 + (double)v35 * v32;
            v38 = v31 + v32 * 255.0;
          }
        }
        *a3 = (int)v34;
        a3[1] = (int)v36;
        a3[2] = (int)v37;
        a3[3] = (int)v38;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = a2[2] + a2[3] * v7;
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, (_BYTE *)(v10 + v9++));
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,double>(_QWORD *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  char v11;
  char v12;

  v3 = 0;
  v4 = a2[1];
  if (*a2 >= 0.0)
    v5 = 0.5;
  else
    v5 = -0.5;
  if (v4 >= 0.0)
    v6 = 0.5;
  else
    v6 = -0.5;
  if (((uint64_t)(*a2 + v5) & 0x80000000) == 0)
  {
    v7 = (uint64_t)(v4 + v6);
    if ((v7 & 0x80000000) == 0 && *a1 > (uint64_t)(uint64_t)(*a2 + v5))
    {
      if (a1[1] <= (uint64_t)v7)
      {
        return 0;
      }
      else
      {
        boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>((uint64_t)&v12, (unsigned __int8 *)(a1[2] + 4 * (uint64_t)(*a2 + v5) + a1[4] * (uint64_t)(v4 + v6)), &v11);
        *a3 = v11;
        return 1;
      }
    }
  }
  return v3;
}

void boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>(uint64_t a1, unsigned __int8 *a2, _BYTE *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = a2[3];
  v4 = (v3 * *a2 + 128 + ((v3 * *a2 + 128) >> 8)) >> 8;
  v5 = a2[1] * v3 + 128;
  v6 = a2[2] * v3 + 128;
  *a3 = (9667 * ((v5 + (v5 >> 8)) >> 8) + 4915 * v4 + 1802 * ((v6 + (v6 >> 8)) >> 8) + 0x2000) >> 14;
}

uint64_t boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  int64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (int64_t *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = a2[2] + a2[3] * v7;
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, (_BYTE *)(v10 + v9++));
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>,boost::gil::default_color_converter>>>>>,double>(int64_t *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  int64_t v4;
  double v5;
  int64_t v6;
  int64_t v7;
  double v9;
  int64_t v10;
  unsigned __int8 *v11;
  int64_t v12;
  int64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  double v17;
  unint64_t v18;
  double v19;
  unsigned __int8 *v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  double v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  char v33;
  char v34;

  v3 = 0;
  v4 = vcvtmd_s64_f64(*a2);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a2[1];
    v6 = vcvtmd_s64_f64(v5);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (*a1 <= v4)
        return 0;
      v7 = a1[1];
      if (v7 <= v6)
      {
        return 0;
      }
      else
      {
        v9 = v5 - (double)(uint64_t)floor(v5);
        v10 = a1[4];
        v11 = (unsigned __int8 *)(a1[2] + v10 * v6 + 4 * v4);
        v12 = v4 + 1;
        v13 = v6 + 1;
        if (v12 >= *a1)
        {
          if (v13 >= v7)
          {
            boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>((uint64_t)&v34, v11, &v33);
            LOBYTE(v31) = v33;
            v24 = (double)v31;
          }
          else
          {
            boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>((uint64_t)&v34, v11, &v33);
            LOBYTE(v25) = v33;
            v26 = (double)v25 * (1.0 - v9) + 0.0;
            boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>((uint64_t)&v34, &v11[v10], &v33);
            LOBYTE(v27) = v33;
            v24 = v26 + (double)v27 * v9;
          }
        }
        else
        {
          v14 = *a2 - (double)(uint64_t)floor(*a2);
          v15 = 1.0 - v14;
          if (v13 >= v7)
          {
            boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>((uint64_t)&v34, v11, &v33);
            LOBYTE(v28) = v33;
            v29 = (double)v28 * v15 + 0.0;
            boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>((uint64_t)&v34, v11 + 4, &v33);
            LOBYTE(v30) = v33;
            v24 = v29 + (double)v30 * v14;
          }
          else
          {
            boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>((uint64_t)&v34, v11, &v33);
            LOBYTE(v16) = v33;
            v17 = (double)v16 * (v15 * (1.0 - v9)) + 0.0;
            boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>((uint64_t)&v34, v11 + 4, &v33);
            LOBYTE(v18) = v33;
            v19 = v17 + (double)v18 * (v14 * (1.0 - v9));
            v20 = &v11[v10];
            boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>((uint64_t)&v34, v20, &v33);
            LOBYTE(v21) = v33;
            v22 = v19 + (double)v21 * (v15 * v9);
            boost::gil::default_color_converter_impl<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::vector1<boost::gil::gray_color_t>>::operator()<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector1<boost::gil::gray_color_t>,boost::mpl::range_c<int,0,1>>>>((uint64_t)&v34, v20 + 4, &v33);
            LOBYTE(v23) = v33;
            v24 = v22 + (double)v23 * (v14 * v9);
          }
        }
        *a3 = (int)v24;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = (_BYTE *)(a2[2] + a2[3] * v7);
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, v10);
          ++v9;
          v10 += 3;
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,double>(_QWORD *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = 0;
  v4 = a2[1];
  if (*a2 >= 0.0)
    v5 = 0.5;
  else
    v5 = -0.5;
  if (v4 >= 0.0)
    v6 = 0.5;
  else
    v6 = -0.5;
  if (((uint64_t)(*a2 + v5) & 0x80000000) == 0)
  {
    v7 = (uint64_t)(v4 + v6);
    if ((v7 & 0x80000000) == 0 && *a1 > (uint64_t)(uint64_t)(*a2 + v5))
    {
      if (a1[1] <= (uint64_t)v7)
      {
        return 0;
      }
      else
      {
        v9 = (unsigned __int8 *)(a1[2]
                               + 4 * (uint64_t)(*a2 + v5)
                               + a1[4] * (uint64_t)(v4 + v6));
        v10 = v9[3];
        v11 = (v10 * *v9 + 128 + ((v10 * *v9 + 128) >> 8)) >> 8;
        v12 = v9[1] * v10 + 128;
        LODWORD(v9) = v9[2] * v10 + 128;
        *a3 = v11;
        a3[1] = (unsigned __int16)(v12 + (v12 >> 8)) >> 8;
        a3[2] = (unsigned __int16)((_WORD)v9 + (v9 >> 8)) >> 8;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>*>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  int64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (int64_t *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = (_BYTE *)(a2[2] + a2[3] * v7);
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,double>(v6, v11.f64, v10);
          ++v9;
          v10 += 3;
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::dereference_iterator_adaptor<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *,boost::gil::color_convert_deref_fn<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> const&,boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector3<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t>,boost::mpl::range_c<int,0,3>>>,boost::gil::default_color_converter>>>>>,double>(int64_t *a1, double *a2, _BYTE *a3)
{
  uint64_t v3;
  int64_t v4;
  double v5;
  int64_t v6;
  int64_t v7;
  double v8;
  int64_t v9;
  unsigned __int8 *v10;
  int64_t v11;
  int64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  unsigned __int8 *v44;
  int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  int v50;
  unsigned int v51;
  unsigned int v52;

  v3 = 0;
  v4 = vcvtmd_s64_f64(*a2);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a2[1];
    v6 = vcvtmd_s64_f64(v5);
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (*a1 <= v4)
        return 0;
      v7 = a1[1];
      if (v7 <= v6)
      {
        return 0;
      }
      else
      {
        v8 = v5 - (double)(uint64_t)floor(v5);
        v9 = a1[4];
        v10 = (unsigned __int8 *)(a1[2] + v9 * v6 + 4 * v4);
        v11 = v4 + 1;
        v12 = v6 + 1;
        v13 = v10[3];
        v14 = v13 * *v10 + 128 + ((v13 * *v10 + 128) >> 8);
        v15 = v10[1] * v13 + 128;
        v16 = v15 + (v15 >> 8);
        v17 = v10[2] * v13 + 128 + ((v10[2] * v13 + 128) >> 8);
        if (v11 >= *a1)
        {
          if (v12 >= v7)
          {
            v40 = (double)BYTE1(v14);
            v41 = (double)BYTE1(v16);
            v42 = (double)BYTE1(v17);
          }
          else
          {
            v43 = (double)BYTE1(v14) * (1.0 - v8) + 0.0;
            v44 = &v10[v9];
            v45 = v44[3];
            v46 = v44[1] * v45 + 128;
            v40 = v43
                + (double)((unsigned __int16)(v45 * *v44 + 128 + ((v45 * *v44 + 128) >> 8)) >> 8)
                * v8;
            v41 = (double)BYTE1(v16) * (1.0 - v8)
                + 0.0
                + (double)((unsigned __int16)(v46 + (v46 >> 8)) >> 8) * v8;
            v42 = (double)BYTE1(v17) * (1.0 - v8)
                + 0.0
                + (double)((unsigned __int16)(v44[2] * (_WORD)v45
                                                             + 128
                                                             + ((v44[2] * v45 + 128) >> 8)) >> 8)
                * v8;
          }
        }
        else
        {
          v18 = *a2 - (double)(uint64_t)floor(*a2);
          v19 = 1.0 - v18;
          if (v12 >= v7)
          {
            v47 = (double)BYTE1(v14) * v19 + 0.0;
            v48 = (double)BYTE1(v16) * v19 + 0.0;
            v49 = (double)BYTE1(v17) * v19 + 0.0;
            v50 = v10[7];
            v51 = v50 * v10[4] + 128;
            v52 = v10[5] * v50 + 128;
            v40 = v47 + (double)((unsigned __int16)(v51 + (v51 >> 8)) >> 8) * v18;
            v41 = v48 + (double)((unsigned __int16)(v52 + (v52 >> 8)) >> 8) * v18;
            v42 = v49
                + (double)((unsigned __int16)(v10[6] * (_WORD)v50
                                                             + 128
                                                             + ((v10[6] * v50 + 128) >> 8)) >> 8)
                * v18;
          }
          else
          {
            v20 = (double)BYTE1(v14) * (v19 * (1.0 - v8)) + 0.0;
            v21 = (double)BYTE1(v16) * (v19 * (1.0 - v8)) + 0.0;
            v22 = v10[7];
            v23 = v22 * v10[4] + 128;
            v24 = v10[5] * v22 + 128;
            v25 = v18 * (1.0 - v8);
            v26 = v20 + (double)((unsigned __int16)(v23 + (v23 >> 8)) >> 8) * v25;
            v27 = v21 + (double)((unsigned __int16)(v24 + (v24 >> 8)) >> 8) * v25;
            v28 = (double)BYTE1(v17) * (v19 * (1.0 - v8))
                + 0.0
                + (double)((unsigned __int16)(v10[6] * (_WORD)v22
                                                             + 128
                                                             + ((v10[6] * v22 + 128) >> 8)) >> 8)
                * v25;
            v29 = &v10[v9];
            v30 = v29[3];
            v31 = v29[1] * v30 + 128;
            v32 = v19 * v8;
            v33 = v26
                + (double)((unsigned __int16)(v30 * *v29 + 128 + ((v30 * *v29 + 128) >> 8)) >> 8)
                * v32;
            v34 = v27 + (double)((unsigned __int16)(v31 + (v31 >> 8)) >> 8) * v32;
            v35 = v28
                + (double)((unsigned __int16)(v29[2] * (_WORD)v30
                                                             + 128
                                                             + ((v29[2] * v30 + 128) >> 8)) >> 8)
                * v32;
            v36 = v29[7];
            v37 = v36 * v29[4] + 128;
            v38 = v29[5] * v36 + 128;
            v39 = v18 * v8;
            v40 = v33 + (double)((unsigned __int16)(v37 + (v37 >> 8)) >> 8) * v39;
            v41 = v34 + (double)((unsigned __int16)(v38 + (v38 >> 8)) >> 8) * v39;
            v42 = v35
                + (double)((unsigned __int16)(v29[6] * (_WORD)v36
                                                             + 128
                                                             + ((v29[6] * v36 + 128) >> 8)) >> 8)
                * v39;
          }
        }
        *a3 = (int)v40;
        a3[1] = (int)v41;
        a3[2] = (int)v42;
        return 1;
      }
    }
  }
  return v3;
}

uint64_t boost::gil::resample_subimage<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v32;
  float64x2_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v32 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v27 = v24.__sinval * v21 + v20 * v24.__cosval;
  v28 = v24.__cosval * v21 - v20 * v24.__sinval;
  v29 = v24.__sinval * v23 + v22 * v24.__cosval + 0.0;
  v30 = v24.__cosval * v23 - v22 * v24.__sinval + 0.0;
  v35.f64[0] = v25 + v26 * 0.0;
  v35.f64[1] = v26 + v25 * 0.0;
  v36 = v27 + v28 * 0.0;
  v37 = v28 + v27 * 0.0;
  v38 = v32 * 0.5 + a3 + v29 + v30 * 0.0;
  v39 = v11 * 0.5 + a4 + v30 + v29 * 0.0;
  return boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::matrix3x2<double>>(a1, a2, &v35);
}

uint64_t boost::gil::resample_pixels<boost::gil::nearest_neighbor_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  float64x2_t v11;

  v3 = a2[1];
  if (v3 >= 1)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = *a2;
    do
    {
      if (v8 >= 1)
      {
        v9 = 0;
        v10 = (_BYTE *)(a2[2] + a2[3] * v7);
        do
        {
          v11 = vaddq_f64(a3[2], vmlaq_n_f64(vmulq_n_f64(a3[1], (double)v7), *a3, (double)v9));
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,double>(v6, v11.f64, v10);
          ++v9;
          v10 += 4;
        }
        while (v8 != v9);
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,double>(_QWORD *a1, double *a2, _BYTE *a3)
{
  uint64_t result;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  _BYTE *v10;

  result = 0;
  v5 = a2[1];
  if (*a2 >= 0.0)
    v6 = 0.5;
  else
    v6 = -0.5;
  if (v5 >= 0.0)
    v7 = 0.5;
  else
    v7 = -0.5;
  if (((uint64_t)(*a2 + v6) & 0x80000000) == 0)
  {
    v8 = (uint64_t)(v5 + v7);
    if ((v8 & 0x80000000) == 0 && *a1 > (uint64_t)(uint64_t)(*a2 + v6))
    {
      if (a1[1] <= (uint64_t)v8)
      {
        return 0;
      }
      else
      {
        v10 = (_BYTE *)(a1[2] + 4 * (uint64_t)(*a2 + v6) + a1[3] * (uint64_t)(v5 + v7));
        *a3 = *v10;
        a3[1] = v10[1];
        a3[2] = v10[2];
        a3[3] = v10[3];
        return 1;
      }
    }
  }
  return result;
}

uint64_t boost::gil::resample_subimage<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>>(uint64_t a1, uint64_t *a2, double a3, double a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v28;
  float64x2_t v31;

  v9 = a5 - a3 + -1.0;
  if (v9 < 1.0)
    v9 = 1.0;
  v28 = v9;
  v10 = a6 - a4;
  if (v10 + -1.0 >= 1.0)
    v11 = v10 + -1.0;
  else
    v11 = 1.0;
  if ((double)(*a2 - 1) >= 1.0)
    v12 = (double)(*a2 - 1);
  else
    v12 = 1.0;
  v13 = (double)(a2[1] - 1);
  if (v13 < 1.0)
    v13 = 1.0;
  v14 = v12 * -0.5;
  v15 = v13 * -0.5;
  v16 = v9 / v12;
  v17 = v11 / v13;
  v18 = v16 + 0.0;
  v19 = v17 * 0.0 + 0.0;
  v20 = v16 * 0.0 + 0.0;
  v21 = v17 + 0.0;
  v22 = v15 * 0.0 + v14 * v16 + 0.0;
  v23 = v17 * v15 + v14 * 0.0 + 0.0;
  v24 = __sincos_stret(a7);
  v25 = v24.__sinval * v19 + v18 * v24.__cosval;
  v26 = v24.__cosval * v19 - v18 * v24.__sinval;
  v31.f64[0] = v25 + v26 * 0.0;
  return boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::matrix3x2<double>>(a1, a2, &v31, v11 * 0.5+ a4+ v24.__cosval * v23- v22 * v24.__sinval+ 0.0+ (v24.__sinval * v23 + v22 * v24.__cosval + 0.0) * 0.0, v11 * 0.5 + a4, v26 + v25 * 0.0, v24.__sinval * v21 + v20 * v24.__cosval + (v24.__cosval * v21 - v20 * v24.__sinval) * 0.0, v24.__cosval * v21 - v20 * v24.__sinval + (v24.__sinval * v21 + v20 * v24.__cosval) * 0.0, v28 * 0.5+ a3+ v24.__sinval * v23+ v22 * v24.__cosval+ 0.0+ (v24.__cosval * v23 - v22 * v24.__sinval + 0.0) * 0.0,
           v24.__sinval * v23 + v22 * v24.__cosval + 0.0,
           v28 * 0.5 + a3);
}

uint64_t boost::gil::resample_pixels<boost::gil::bilinear_sampler,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>> *>>>,boost::gil::matrix3x2<double>>(uint64_t result, uint64_t *a2, float64x2_t *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  int64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;

  v11 = a2[1];
  if (v11 >= 1)
  {
    v14 = (int64_t *)result;
    v15 = 0;
    v16 = *a2;
    do
    {
      if (v16 >= 1)
      {
        v17 = 0;
        v21 = (double)v15;
        v18 = (_BYTE *)(a2[2] + a2[3] * v15);
        do
        {
          v19 = *a3;
          v20 = vmlaq_n_f64(vmulq_n_f64(a3[1], v21), *a3, (double)v17);
          v22 = vaddq_f64(a3[2], v20);
          result = boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,double>(v14, v22.f64, v18, v22.f64[0], v19.f64[0], v20.f64[0], v21, a8, a9, a10, a11);
          ++v17;
          v18 += 4;
        }
        while (v16 != v17);
      }
      ++v15;
    }
    while (v15 != v11);
  }
  return result;
}

uint64_t boost::gil::sample<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>,boost::gil::image_view<boost::gil::memory_based_2d_locator<boost::gil::memory_based_step_iterator<boost::gil::pixel<unsigned char,boost::gil::layout<boost::mpl::vector4<boost::gil::red_t,boost::gil::green_t,boost::gil::blue_t,boost::gil::alpha_t>,boost::mpl::range_c<int,0,4>>>*>>>,double>(int64_t *a1, double *a2, _BYTE *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  double v15;
  int64_t v16;
  int64_t v17;
  double v18;
  double v19;
  int64_t v20;
  _BYTE *v21;
  int64_t v22;
  int64_t v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  _BYTE *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  unint64_t v42;
  double v43;
  unint64_t v44;
  double v45;
  unint64_t v46;
  double v47;
  double v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unint64_t v53;
  double v54;
  double v55;
  double v56;
  unint64_t v57;
  unint64_t v58;

  v13 = 0;
  v14 = vcvtmd_s64_f64(*a2);
  if ((v14 & 0x8000000000000000) == 0)
  {
    v15 = a2[1];
    v16 = vcvtmd_s64_f64(v15);
    if ((v16 & 0x8000000000000000) == 0)
    {
      if (*a1 <= v14)
        return 0;
      v17 = a1[1];
      if (v17 <= v16)
      {
        return 0;
      }
      else
      {
        v18 = (double)(uint64_t)floor(v15);
        v19 = v15 - v18;
        v20 = a1[3];
        v21 = (_BYTE *)(a1[2] + v20 * v16 + 4 * v14);
        v22 = v14 + 1;
        v23 = v16 + 1;
        if (v22 >= *a1)
        {
          if (v23 >= v17)
          {
            LOBYTE(v19) = *v21;
            v43 = (double)*(unint64_t *)&v19;
            LOBYTE(v19) = v21[1];
            v45 = (double)*(unint64_t *)&v19;
            LOBYTE(v19) = v21[2];
            v47 = (double)*(unint64_t *)&v19;
            LOBYTE(v19) = v21[3];
            v48 = (double)*(unint64_t *)&v19;
          }
          else
          {
            LOBYTE(v18) = *v21;
            LOBYTE(a8) = v21[1];
            *(double *)&v49 = (double)*(unint64_t *)&a8 * (1.0 - v19) + 0.0;
            LOBYTE(a9) = v21[2];
            *(double *)&v50 = (double)*(unint64_t *)&a9 * (1.0 - v19) + 0.0;
            LOBYTE(a10) = v21[3];
            v51 = &v21[v20];
            *(double *)&v52 = (double)*v51;
            v43 = (double)*(unint64_t *)&v18 * (1.0 - v19) + 0.0 + *(double *)&v52 * v19;
            LOBYTE(v52) = v51[1];
            v45 = *(double *)&v49 + (double)v52 * v19;
            LOBYTE(v49) = v51[2];
            v47 = *(double *)&v50 + (double)v49 * v19;
            LOBYTE(v50) = v51[3];
            v48 = (double)*(unint64_t *)&a10 * (1.0 - v19) + 0.0 + (double)v50 * v19;
          }
        }
        else
        {
          v24 = *a2 - (double)(uint64_t)floor(*a2);
          v25 = 1.0 - v24;
          if (v23 >= v17)
          {
            LOBYTE(v19) = *v21;
            *(double *)&v53 = (double)*(unint64_t *)&v19 * v25 + 0.0;
            LOBYTE(a8) = v21[1];
            v54 = (double)*(unint64_t *)&a8 * v25 + 0.0;
            LOBYTE(a9) = v21[2];
            v55 = (double)*(unint64_t *)&a9 * v25 + 0.0;
            LOBYTE(a10) = v21[3];
            v56 = (double)*(unint64_t *)&a10 * v25 + 0.0;
            LOBYTE(v25) = v21[4];
            v43 = *(double *)&v53 + (double)*(unint64_t *)&v25 * v24;
            LOBYTE(v53) = v21[5];
            *(double *)&v57 = (double)v53;
            v45 = v54 + *(double *)&v57 * v24;
            LOBYTE(v57) = v21[6];
            *(double *)&v58 = (double)v57;
            v47 = v55 + *(double *)&v58 * v24;
            LOBYTE(v58) = v21[7];
            v48 = v56 + (double)v58 * v24;
          }
          else
          {
            LOBYTE(a9) = *v21;
            LOBYTE(a11) = v21[1];
            *(double *)&v26 = (double)*(unint64_t *)&a11 * (v25 * (1.0 - v19)) + 0.0;
            LOBYTE(v11) = v21[2];
            *(double *)&v27 = (double)v11 * (v25 * (1.0 - v19)) + 0.0;
            LOBYTE(v12) = v21[3];
            *(double *)&v28 = (double)v12 * (v25 * (1.0 - v19)) + 0.0;
            v29 = v24 * (1.0 - v19);
            *(double *)&v30 = (double)v21[4];
            *(double *)&v31 = (double)*(unint64_t *)&a9 * (v25 * (1.0 - v19)) + 0.0 + *(double *)&v30 * v29;
            LOBYTE(v30) = v21[5];
            *(double *)&v32 = *(double *)&v26 + (double)v30 * v29;
            LOBYTE(v26) = v21[6];
            *(double *)&v33 = *(double *)&v27 + (double)v26 * v29;
            LOBYTE(v27) = v21[7];
            v34 = *(double *)&v28 + (double)v27 * v29;
            v35 = &v21[v20];
            v36 = v25 * v19;
            LOBYTE(v28) = *v35;
            v37 = *(double *)&v31 + (double)v28 * v36;
            LOBYTE(v31) = v35[1];
            v38 = *(double *)&v32 + (double)v31 * v36;
            LOBYTE(v32) = v35[2];
            v39 = *(double *)&v33 + (double)v32 * v36;
            LOBYTE(v33) = v35[3];
            v40 = v34 + (double)v33 * v36;
            v41 = v24 * v19;
            LOBYTE(v24) = v35[4];
            *(double *)&v42 = (double)*(unint64_t *)&v24;
            v43 = v37 + *(double *)&v42 * v41;
            LOBYTE(v42) = v35[5];
            *(double *)&v44 = (double)v42;
            v45 = v38 + *(double *)&v44 * v41;
            LOBYTE(v44) = v35[6];
            *(double *)&v46 = (double)v44;
            v47 = v39 + *(double *)&v46 * v41;
            LOBYTE(v46) = v35[7];
            v48 = v40 + (double)v46 * v41;
          }
        }
        *a3 = (int)v43;
        a3[1] = (int)v45;
        a3[2] = (int)v47;
        a3[3] = (int)v48;
        return 1;
      }
    }
  }
  return v13;
}

void OUTLINED_FUNCTION_0_6(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_2_2()
{
  uint64_t v0;

  std::locale::~locale((std::locale *)(v0 - 40));
}

std::string *OUTLINED_FUNCTION_3_3(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return std::to_string((std::string *)&a9, a1);
}

void OUTLINED_FUNCTION_4_2(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  operator delete(__p);
}

std::string *OUTLINED_FUNCTION_5_1(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return std::string::append((std::string *)&a12, a2, a3);
}

_QWORD *OUTLINED_FUNCTION_6_2(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return std::string::basic_string[abi:ne180100]<0>((uint64_t *)va, a2);
}

uint64_t OUTLINED_FUNCTION_7_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  return file_logger::operator<<<std::string>(v6, (uint64_t)va);
}

__n128 OUTLINED_FUNCTION_10_1(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[1].n128_u64[0] = a1[1].n128_u64[0];
  *v1 = result;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

__n128 OUTLINED_FUNCTION_11_2(__n128 *a1)
{
  __n128 result;

  result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

void OUTLINED_FUNCTION_18_0()
{
  void *v0;

  __cxa_free_exception(v0);
}

const std::locale::facet *OUTLINED_FUNCTION_20_1(uint64_t a1, std::locale::id *a2)
{
  uint64_t v2;

  return std::locale::use_facet((const std::locale *)(v2 - 40), a2);
}

std::locale OUTLINED_FUNCTION_21_1(const std::ios_base *this)
{
  return std::ios_base::getloc(this);
}

uint64_t _GLOBAL__sub_I_image_util_impl_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

double turi::read_image@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  turi *v5;

  *(_BYTE *)(a3 + 48) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 56) = 3;
  v5 = 0;
  turi::read_raw_image(a1, &v5, (const char **)(a3 + 40), (_QWORD *)(a3 + 24), (unint64_t *)(a3 + 16), (unint64_t *)(a3 + 32), (_QWORD *)(a3 + 56), a2);
  *(_QWORD *)&result = boost::shared_ptr<char []>::reset<char>((__int128 *)a3, (uint64_t)v5).n128_u64[0];
  return result;
}

void sub_217F8C2DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::detail::shared_count::~shared_count((unsigned int **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::read_raw_image(uint64_t a1, turi **a2, const char **a3, _QWORD *a4, unint64_t *a5, unint64_t *a6, _QWORD *a7, uint64_t *a8)
{
  unint64_t *v16;
  int v17;
  BOOL v20;
  BOOL v21;
  std::locale v23;
  std::locale v24;
  std::string v25;
  std::string v26[3];
  uint64_t v27;
  int v28;
  void *__p;
  char v30;
  _QWORD v31[20];

  v31[19] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v25 = *(std::string *)a1;
  turi::general_ifstream::general_ifstream(v26, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  *a3 = (const char *)turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)v26);
  *a2 = (turi *)operator new[]();
  std::istream::read();
  v17 = *((char *)a8 + 23);
  if (v17 < 0)
  {
    if (a8[1] != 3)
      goto LABEL_19;
    a8 = (uint64_t *)*a8;
  }
  else if (v17 != 3)
  {
    goto LABEL_19;
  }
  if (*(_WORD *)a8 == 20554 && *((_BYTE *)a8 + 2) == 71)
    goto LABEL_22;
  if (*(_WORD *)a8 == 20048 && *((_BYTE *)a8 + 2) == 71)
  {
LABEL_25:
    *a7 = 1;
    goto LABEL_26;
  }
LABEL_19:
  MEMORY[0x219A19828](&v24);
  if (boost::algorithm::iends_with<std::string,char [4]>((uint64_t *)a1, "jpg", &v24))
  {
    std::locale::~locale(&v24);
LABEL_22:
    *a7 = 0;
LABEL_23:
    turi::parse_jpeg(*a2, *a3, a4, a5, a6, v16);
    goto LABEL_27;
  }
  MEMORY[0x219A19828](&v23);
  v20 = boost::algorithm::iends_with<std::string,char [4]>((uint64_t *)a1, "jpeg", &v23);
  std::locale::~locale(&v23);
  std::locale::~locale(&v24);
  if (v20)
    goto LABEL_22;
  MEMORY[0x219A19828](&v24);
  v21 = boost::algorithm::iends_with<std::string,char [4]>((uint64_t *)a1, "png", &v24);
  std::locale::~locale(&v24);
  if (v21)
    goto LABEL_25;
  if (!*a7)
    goto LABEL_23;
  if (*a7 != 1)
    turi::read_raw_image(std::string const&,char **,unsigned long &,unsigned long &,unsigned long &,unsigned long &,turi::Format &,std::string const&)::$_0::operator()();
LABEL_26:
  turi::parse_png(*a2, *a3, a4, a5, a6, v16);
LABEL_27:
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v26[0].__r_.__value_.__r.__words[2], 8, &v26[0].__r_.__value_.__r.__words[2], 16, (turi::fileio_impl::general_fstream_source *)&v27, &v28);
  v26[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24D91DA58;
  v31[0] = &unk_24D91DA80;
  if (v30 < 0)
    operator delete(__p);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v26[0].__r_.__value_.__r.__words[2]);
  return MEMORY[0x219A198F4](v31);
}

void sub_217F8C634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  __cxa_end_catch();
  turi::general_ifstream::~general_ifstream((turi::general_ifstream *)va);
  _Unwind_Resume(a1);
}

BOOL boost::algorithm::iends_with<std::string,char [4]>(uint64_t *a1, const char *a2, std::locale *a3)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  const char *v10;
  _BOOL8 v12;
  std::locale v14;
  std::locale v15;

  std::locale::locale(&v14, a3);
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = (uint64_t *)*a1;
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)a1 + 23);
  else
    v7 = a1[1];
  v8 = strlen(a2);
  std::locale::locale(&v15, &v14);
  v9 = (uint64_t)v6 - 1;
  v10 = a2 - 1;
  while (v7 && v8)
  {
    if (!boost::algorithm::is_iequal::operator()<char,char>(&v15, (char *)(v9 + v7--), (char *)&v10[v8--]))
    {
      v12 = 0;
      goto LABEL_13;
    }
  }
  v12 = v8 == 0;
LABEL_13:
  std::locale::~locale(&v15);
  std::locale::~locale(&v14);
  return v12;
}

void sub_217F8C720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

void turi::general_ifstream::~general_ifstream(turi::general_ifstream *this)
{
  char *v2;

  *(_QWORD *)this = &unk_24D91DA58;
  *((_QWORD *)this + 27) = &unk_24D91DA80;
  v2 = (char *)this + 216;
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)this + 16);
  MEMORY[0x219A198F4](v2);
}

{
  char *v2;

  *(_QWORD *)this = &unk_24D91DA58;
  *((_QWORD *)this + 27) = &unk_24D91DA80;
  v2 = (char *)this + 216;
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)this + 16);
  MEMORY[0x219A198F4](v2);
  JUMPOUT(0x219A19A08);
}

void `virtual thunk to'turi::general_ifstream::~general_ifstream(turi::general_ifstream *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &unk_24D91DA58;
  *((_QWORD *)v1 + 27) = &unk_24D91DA80;
  if (v1[215] < 0)
    operator delete(*((void **)v1 + 24));
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x219A198F4);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &unk_24D91DA58;
  *((_QWORD *)v1 + 27) = &unk_24D91DA80;
  if (v1[215] < 0)
    operator delete(*((void **)v1 + 24));
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x219A198F4](v1 + 216);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::iostreams::stream<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x219A198F4](a1 + 192);
  return a1;
}

void boost::iostreams::stream<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>>::~stream(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x219A198F4](a1 + 192);
  JUMPOUT(0x219A19A08);
}

void `virtual thunk to'boost::iostreams::stream<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>>::~stream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x219A198F4);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x219A198F4](v1 + 192);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x219A198F4](a1 + 192);
  return a1;
}

void boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(v2 + 16);
  MEMORY[0x219A198F4](a1 + 192);
  JUMPOUT(0x219A19A08);
}

void `virtual thunk to'boost::iostreams::detail::stream_base<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,std::istream>::~stream_base(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  JUMPOUT(0x219A198F4);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)(v1 + 16));
  MEMORY[0x219A198F4](v1 + 192);
  JUMPOUT(0x219A19A08);
}

uint64_t boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24D91DC48;
  if ((~*(_DWORD *)(a1 + 168) & 5) == 0)
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>((_DWORD *)a1, 8, (_DWORD *)a1, 16, (turi::fileio_impl::general_fstream_source *)(a1 + 72), (_DWORD *)(a1 + 168));
  *(_QWORD *)a1 = &unk_24D91DD58;
  v2 = *(void **)(a1 + 144);
  if (v2)
    operator delete(v2);
  if (*(_BYTE *)(a1 + 128))
  {
    turi::fileio_impl::general_fstream_source::~general_fstream_source((turi::fileio_impl::general_fstream_source *)(a1 + 72));
    *(_BYTE *)(a1 + 128) = 0;
  }
  return std::streambuf::~streambuf();
}

void sub_217F8CC14(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217F8CBD4);
}

void boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(uint64_t a1)
{
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer(a1);
  JUMPOUT(0x219A19A08);
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::imbue(uint64_t a1, const std::locale *a2)
{
  std::locale *v2;
  std::locale *v4;
  std::locale v5;

  if ((*(_BYTE *)(a1 + 168) & 1) != 0)
  {
    v2 = *(std::locale **)(a1 + 136);
    if (v2)
    {
      v4 = v2 + 1;
      (*((void (**)(std::locale *))v2->__locale_ + 2))(v2);
      std::locale::locale(&v5, v4);
      std::locale::operator=(v4, a2);
      std::locale::~locale(&v5);
    }
  }
}

double boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::seekpos@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double result;

  *(_QWORD *)&result = boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::seek_impl(a1, (const char *)*(_QWORD *)(a2 + 128), 0, a3, a4).n128_u64[0];
  return result;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::sync(uint64_t a1)
{
  uint64_t result;

  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::sync_impl(a1);
  result = *(_QWORD *)(a1 + 136);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    return 0;
  }
  return result;
}

void sub_217F8CCF8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217F8CCECLL);
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::underflow(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v2 = *(unsigned __int8 **)(a1 + 24);
  if (!v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
    v2 = *(unsigned __int8 **)(a1 + 24);
  }
  if ((unint64_t)v2 < *(_QWORD *)(a1 + 32))
    return *v2;
  v4 = *(_QWORD *)(a1 + 160);
  if (v4 >= (uint64_t)&v2[-*(_QWORD *)(a1 + 16)])
    v5 = (size_t)&v2[-*(_QWORD *)(a1 + 16)];
  else
    v5 = *(_QWORD *)(a1 + 160);
  if (v5)
  {
    v6 = -(uint64_t)v5;
    memmove((void *)(*(_QWORD *)(a1 + 144) + v4 - v5), &v2[-v5], v5);
    v4 = *(_QWORD *)(a1 + 160);
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a1 + 152);
  v8 = (char *)(*(_QWORD *)(a1 + 144) + v4);
  *(_QWORD *)(a1 + 16) = &v8[v6];
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = turi::fileio_impl::general_fstream_source::read((turi::fileio_impl::general_fstream_source *)(a1 + 72), v8, v7 - v4);
  if (v9 == -1)
  {
    *(_DWORD *)(a1 + 64) |= 1u;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 144) + *(_QWORD *)(a1 + 160);
  }
  else
  {
    v10 = *(unsigned __int8 **)(a1 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 144) + *(_QWORD *)(a1 + 160) + v9;
    if (v9)
      return *v10;
  }
  return 0xFFFFFFFFLL;
}

boost::iostreams::detail *boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::pbackfail(uint64_t a1, boost::iostreams::detail *this)
{
  uint64_t v2;
  _BYTE *v3;
  std::ios_base::failure v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == *(_QWORD *)(a1 + 16))
  {
    boost::iostreams::detail::bad_putback(&v5);
    boost::throw_exception<std::ios_base::failure>((uint64_t)&v5);
  }
  v3 = (_BYTE *)(v2 - 1);
  *(_QWORD *)(a1 + 24) = v3;
  if ((_DWORD)this == -1)
    return 0;
  *v3 = (_BYTE)this;
  return this;
}

void sub_217F8CE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::overflow(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;

  if ((*(_BYTE *)(a1 + 168) & 2) != 0 && !*(_QWORD *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  if ((_DWORD)a2 == -1)
    return 0;
  if ((*(_BYTE *)(a1 + 168) & 2) == 0)
    boost::iostreams::detail::device_wrapper_impl<boost::iostreams::input>::write<turi::fileio_impl::general_fstream_source,boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>();
  v4 = *(_BYTE **)(a1 + 48);
  if (v4 == *(_BYTE **)(a1 + 56))
  {
    boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::sync_impl(a1);
    v4 = *(_BYTE **)(a1 + 48);
    if (v4 == *(_BYTE **)(a1 + 56))
      return 0xFFFFFFFFLL;
  }
  *v4 = a2;
  ++*(_QWORD *)(a1 + 48);
  return a2;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::set_next(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 136) = a2;
  return result;
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::close_impl(_QWORD *a1, int a2)
{
  if (a2 == 8)
  {
    a1[2] = 0;
    a1[3] = 0;
    a1[4] = 0;
  }
  boost::iostreams::close<turi::fileio_impl::general_fstream_source>((turi::fileio_impl::general_fstream_source *)(a1 + 9), a2);
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::auto_close(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 168) >> 2) & 1;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::set_auto_close(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 4;
  else
    v2 = 0;
  *(_DWORD *)(result + 168) = *(_DWORD *)(result + 168) & 0xFFFFFFFB | v2;
  return result;
}

BOOL boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::strict_sync(uint64_t a1)
{
  uint64_t v2;

  boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::sync_impl(a1);
  v2 = *(_QWORD *)(a1 + 136);
  return !v2 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2) != -1;
}

void sub_217F8CFC0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217F8CFB4);
}

void *boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::component_type()
{
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::component_impl(uint64_t a1)
{
  return a1 + 72;
}

_QWORD *boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::init_get_area(_QWORD *result)
{
  uint64_t v1;

  v1 = result[18];
  result[2] = v1;
  result[3] = v1;
  result[4] = v1;
  return result;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::init_put_area(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if ((*(_BYTE *)(result + 168) & 2) != 0)
  {
    v1 = *(_QWORD *)(result + 144);
    v2 = v1 + *(_QWORD *)(result + 152);
  }
  else
  {
    v1 = 0;
    v2 = 0;
  }
  *(_QWORD *)(result + 40) = v1;
  *(_QWORD *)(result + 48) = v1;
  *(_QWORD *)(result + 56) = v2;
  return result;
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(_DWORD *a1, int a2, _DWORD *a3, int a4, turi::fileio_impl::general_fstream_source *a5, _DWORD *a6)
{
  uint64_t result;

  result = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>>(a1, a2, a3, a4, a5);
  *a6 = 0;
  return result;
}

void sub_217F8D040(void *a1)
{
  _DWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_217F8D050(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>>(_DWORD *a1, int a2, _DWORD *a3, int a4, turi::fileio_impl::general_fstream_source *a5)
{
  uint64_t v6;

  v6 = boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>>(a1, a2, a3, a4);
  if (*((_BYTE *)a5 + 56))
  {
    turi::fileio_impl::general_fstream_source::~general_fstream_source(a5);
    *((_BYTE *)a5 + 56) = 0;
  }
  return v6;
}

void sub_217F8D0A0(void *a1)
{
  turi::fileio_impl::general_fstream_source *v1;

  __cxa_begin_catch(a1);
  if (*((_BYTE *)v1 + 56))
  {
    turi::fileio_impl::general_fstream_source::~general_fstream_source(v1);
    *((_BYTE *)v1 + 56) = 0;
  }
  __cxa_rethrow();
}

void sub_217F8D0C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>>(_DWORD *a1, int a2, _DWORD *a3, int a4)
{
  boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>::close(a1, a2);
  boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>::close(a3, a4);
  return 0;
}

void sub_217F8D108(void *a1)
{
  int v1;
  _DWORD *v2;

  __cxa_begin_catch(a1);
  boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>::close(v2, v1);
  __cxa_rethrow();
}

void sub_217F8D12C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_DWORD *boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>::close(_DWORD *result, int a2)
{
  int v2;
  int v3;
  int v4;

  if (a2 == 16)
  {
    v4 = result[16];
    if ((v4 & 4) != 0)
      return result;
    v3 = v4 | 4;
    goto LABEL_7;
  }
  if (a2 == 8)
  {
    v2 = result[16];
    if ((v2 & 2) == 0)
    {
      v3 = v2 | 2;
LABEL_7:
      result[16] = v3;
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 120))(result);
    }
  }
  return result;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~indirect_streambuf(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24D91DD58;
  v2 = *(void **)(a1 + 144);
  if (v2)
    operator delete(v2);
  if (*(_BYTE *)(a1 + 128))
  {
    turi::fileio_impl::general_fstream_source::~general_fstream_source((turi::fileio_impl::general_fstream_source *)(a1 + 72));
    *(_BYTE *)(a1 + 128) = 0;
  }
  return std::streambuf::~streambuf();
}

void boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~indirect_streambuf(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &unk_24D91DD58;
  v2 = *(void **)(a1 + 144);
  if (v2)
    operator delete(v2);
  if (*(_BYTE *)(a1 + 128))
  {
    turi::fileio_impl::general_fstream_source::~general_fstream_source((turi::fileio_impl::general_fstream_source *)(a1 + 72));
    *(_BYTE *)(a1 + 128) = 0;
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x219A19A08);
}

__n128 boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::seek_impl@<Q0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  const char *v6;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  __int128 v13;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v6 = a2;
  if ((_DWORD)a3 == 1
    && a4 == 8
    && (v9 = *(_QWORD *)(a1 + 24)) != 0
    && *(_QWORD *)(a1 + 16) - v9 <= (uint64_t)a2
    && *(_QWORD *)(a1 + 32) - v9 >= (uint64_t)a2)
  {
    *(_QWORD *)(a1 + 24) = v9 + (int)a2;
    turi::fileio_impl::general_fstream_source::seek((turi::fileio_impl::general_fstream_source *)(a1 + 72), 0, 1);
    v12 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 32);
    *(_OWORD *)(a5 + 96) = v19;
    *(_OWORD *)(a5 + 112) = v20;
    *(_QWORD *)(a5 + 128) = v21;
    *(_OWORD *)(a5 + 32) = v15;
    *(_OWORD *)(a5 + 48) = v16;
    *(_OWORD *)(a5 + 64) = v17;
    *(_OWORD *)(a5 + 80) = v18;
    result = v14;
    *(_OWORD *)a5 = v13;
    *(__n128 *)(a5 + 16) = v14;
    *(_QWORD *)(a5 + 128) = v12 + v21;
  }
  else
  {
    if (*(_QWORD *)(a1 + 48))
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    if ((_DWORD)a3 == 1)
    {
      v10 = *(_QWORD *)(a1 + 24);
      if (v10)
        v6 = &v6[v10 - *(_QWORD *)(a1 + 32)];
    }
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    turi::fileio_impl::general_fstream_source::seek((turi::fileio_impl::general_fstream_source *)(a1 + 72), v6, a3);
  }
  return result;
}

uint64_t boost::iostreams::detail::indirect_streambuf<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::sync_impl(uint64_t result)
{
  if ((uint64_t)(*(_QWORD *)(result + 48) - *(_QWORD *)(result + 40)) >= 1)
    boost::iostreams::detail::device_wrapper_impl<boost::iostreams::input>::write<turi::fileio_impl::general_fstream_source,boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>();
  return result;
}

void boost::iostreams::detail::device_wrapper_impl<boost::iostreams::input>::write<turi::fileio_impl::general_fstream_source,boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>()
{
  std::ios_base::failure v0;
  std::error_code __ec;

  *(_QWORD *)&__ec.__val_ = 1;
  __ec.__cat_ = std::iostream_category();
  std::ios_base::failure::failure(&v0, "no write access", &__ec);
  boost::throw_exception<std::ios_base::failure>((uint64_t)&v0);
}

void sub_217F8D460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

std::ios_base::failure *boost::iostreams::detail::bad_putback@<X0>(std::ios_base::failure *a1@<X8>)
{
  std::error_code v4;

  *(_QWORD *)&v4.__val_ = 1;
  v4.__cat_ = std::iostream_category();
  return std::ios_base::failure::failure(a1, "putback buffer full", &v4);
}

void boost::iostreams::close<turi::fileio_impl::general_fstream_source>(turi::fileio_impl::general_fstream_source *a1, int a2)
{
  if (a2 == 8)
  {
    turi::fileio_impl::general_fstream_source::close(a1);
  }
  else if (a2 == 24)
  {
    boost::iostreams::detail::close_all<turi::fileio_impl::general_fstream_source>(a1);
  }
}

void boost::iostreams::detail::close_all<turi::fileio_impl::general_fstream_source>(turi::fileio_impl::general_fstream_source *a1)
{
  turi::fileio_impl::general_fstream_source::close(a1);
}

void sub_217F8D4F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_217F8D4FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v4;
  BOOL v5;
  std::vector<std::string>::size_type v6;
  std::string *v7;

  end = this->__end_;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v5 = __sz >= v4;
  v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    this->__end_ = v7;
  }
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v5;
  std::string *value;
  std::string *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  size_t v13;
  size_t v14;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_217F8D6EC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

BOOL boost::algorithm::is_iequal::operator()<char,char>(const std::locale *a1, char *a2, char *a3)
{
  uint64_t v5;
  std::locale::id *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  const std::locale::facet *v9;

  v5 = *a2;
  v6 = (std::locale::id *)MEMORY[0x24BEDB350];
  v7 = std::locale::use_facet(a1, MEMORY[0x24BEDB350]);
  LODWORD(v5) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[1].~facet)(v7, v5);
  v8 = *a3;
  v9 = std::locale::use_facet(a1, v6);
  return (_DWORD)v5 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].~facet)(v9, v8);
}

uint64_t OUTLINED_FUNCTION_14_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return file_logger::operator<<<std::string>(v9, (uint64_t)&a9);
}

uint64_t _GLOBAL__sub_I_io_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

CoreML::Model *CoreML::FeatureVectorizer::FeatureVectorizer(CoreML::Model *a1, const std::string *a2)
{
  CoreML::Model *result;

  result = CoreML::Model::Model(a1, a2);
  *(_QWORD *)result = &off_24D91E010;
  return result;
}

void CoreML::FeatureVectorizer::~FeatureVectorizer(CoreML::FeatureVectorizer *this)
{
  CoreML::Model::~Model(this);
  JUMPOUT(0x219A19A08);
}

CoreML::Result *CoreML::FeatureVectorizer::add@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, CoreML::Result *a4@<X8>)
{
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;

  v7 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v7 + 44) == 602)
  {
    v8 = *(unsigned int **)(v7 + 32);
  }
  else
  {
    CoreML::Specification::Model::clear_Type(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(v7 + 44) = 602;
    v8 = (unsigned int *)operator new();
    CoreML::Specification::FeatureVectorizer::FeatureVectorizer((CoreML::Specification::FeatureVectorizer *)v8);
    *(_QWORD *)(v7 + 32) = v8;
  }
  v9 = operator new();
  CoreML::Specification::FeatureVectorizer_InputColumn::FeatureVectorizer_InputColumn((CoreML::Specification::FeatureVectorizer_InputColumn *)v9);
  if (*(uint64_t **)(v9 + 16) == &_tc_google::protobuf::internal::fixed_address_empty_string)
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)(v9 + 16), (uint64_t)a2);
  else
    std::string::operator=(*(std::string **)(v9 + 16), a2);
  *(_QWORD *)(v9 + 24) = a3;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedInternal<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(v8 + 4, (const CoreML::Specification::V5::Value_FileValue *)v9);
  return CoreML::Result::Result(a4);
}

void sub_217F8D8EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<CoreML::Specification::Model,std::allocator<CoreML::Specification::Model>,CoreML::Specification::Model const&,void>@<X0>(const CoreML::Specification::Model *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<CoreML::Specification::Model>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::Model const&,std::allocator<CoreML::Specification::Model>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_217F8D968(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CoreML::Specification::Model>::__shared_ptr_emplace[abi:ne180100]<CoreML::Specification::Model const&,std::allocator<CoreML::Specification::Model>,0>(_QWORD *a1, const CoreML::Specification::Model *a2)
{
  a1[2] = 0;
  *a1 = &unk_24D91E058;
  a1[1] = 0;
  CoreML::Specification::Model::Model((CoreML::Specification::Model *)(a1 + 3), a2);
  return a1;
}

void sub_217F8D9B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Specification::Model>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Specification::Model>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<CoreML::Specification::Model>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

unsigned int *_tc_google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedInternal<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(unsigned int *result, const CoreML::Specification::V5::Value_FileValue *a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  if (*(_QWORD *)result)
    return _tc_google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedSlowWithCopy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(result, a2, 0, *(_tc_google::protobuf::Arena **)result);
  v2 = (int *)*((_QWORD *)result + 2);
  if (!v2)
    return _tc_google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedSlowWithCopy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(result, a2, 0, *(_tc_google::protobuf::Arena **)result);
  v3 = *v2;
  if ((int)v3 >= (int)result[3])
    return _tc_google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedSlowWithCopy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(result, a2, 0, *(_tc_google::protobuf::Arena **)result);
  v4 = v2 + 2;
  v5 = (int)result[2];
  if ((int)v5 < (int)v3)
    *(_QWORD *)&v4[2 * v3] = *(_QWORD *)&v4[2 * v5];
  *(_QWORD *)&v4[2 * v5] = a2;
  result[2] = v5 + 1;
  ++**((_DWORD **)result + 2);
  return result;
}

unsigned int *_tc_google::protobuf::internal::RepeatedPtrFieldBase::AddAllocatedSlowWithCopy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(unsigned int *a1, const CoreML::Specification::V5::Value_FileValue *a2, _tc_google::protobuf::Arena *a3, _tc_google::protobuf::Arena *a4)
{
  const CoreML::Specification::V5::Value_FileValue *v6;
  CoreML::Specification::FeatureVectorizer_InputColumn *Aligned;

  v6 = a2;
  if (a3 || !a4)
  {
    if (a4 != a3)
    {
      if (a4)
      {
        CoreML::Specification::FeatureVectorizer_InputColumn::FeatureVectorizer_InputColumn(Aligned);
        _tc_google::protobuf::Arena::AddListNode(a4, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureVectorizer_InputColumn>);
      }
      else
      {
        Aligned = (CoreML::Specification::FeatureVectorizer_InputColumn *)operator new();
        CoreML::Specification::FeatureVectorizer_InputColumn::FeatureVectorizer_InputColumn(Aligned);
      }
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureVectorizer_InputColumn>::Merge(v6, Aligned);
      if (!a3)
        (*(void (**)(const CoreML::Specification::V5::Value_FileValue *))(*(_QWORD *)v6 + 8))(v6);
      v6 = Aligned;
    }
  }
  else
  {
    _tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureVectorizer_InputColumn>(a4, a2);
  }
  return _tc_google::protobuf::internal::RepeatedPtrFieldBase::UnsafeArenaAddAllocated<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(a1, (uint64_t)v6);
}

void sub_217F8DB5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureVectorizer_InputColumn>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2)
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureVectorizer_InputColumn>);
  return result;
}

void _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureVectorizer_InputColumn>::Merge(const CoreML::Specification::V5::Value_FileValue *a1, CoreML::Specification::V5::Value_FileValue *a2)
{
  CoreML::Specification::V5::Value_FileValue::MergeFrom(a2, a1);
}

unsigned int *_tc_google::protobuf::internal::RepeatedPtrFieldBase::UnsafeArenaAddAllocated<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  int *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v3 = result;
  v4 = (int *)*((_QWORD *)result + 2);
  if (!v4)
  {
    v5 = result[3];
    goto LABEL_11;
  }
  v5 = result[2];
  v6 = result[3];
  if (v5 == v6)
  {
LABEL_11:
    result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve(result, v5 + 1);
    goto LABEL_12;
  }
  v7 = *v4;
  if ((_DWORD)v7 != v6)
  {
    if (v5 >= (int)v7)
    {
      v9 = v7 + 1;
      goto LABEL_13;
    }
    *(_QWORD *)&v4[2 * v7 + 2] = *(_QWORD *)&v4[2 * v5 + 2];
LABEL_12:
    v4 = (int *)*((_QWORD *)v3 + 2);
    v9 = *v4 + 1;
LABEL_13:
    *v4 = v9;
    goto LABEL_14;
  }
  result = *(unsigned int **)&v4[2 * v5 + 2];
  if (result)
    v8 = *(_QWORD *)v3 == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    v4 = (int *)*((_QWORD *)v3 + 2);
  }
LABEL_14:
  v10 = (int)v3[2];
  v3[2] = v10 + 1;
  *(_QWORD *)&v4[2 * v10 + 2] = a2;
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureVectorizer_InputColumn>(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureVectorizer_InputColumn>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureVectorizer_InputColumn>::TypeHandler>(_tc_google::protobuf::Arena **a1, CoreML::Specification::V5::Value_FileValue **a2, const CoreML::Specification::V5::Value_FileValue **a3, signed int a4, signed int a5)
{
  uint64_t v10;
  const CoreML::Specification::V5::Value_FileValue **v11;
  CoreML::Specification::V5::Value_FileValue **v12;
  const CoreML::Specification::V5::Value_FileValue *v13;
  const CoreML::Specification::V5::Value_FileValue *v14;
  CoreML::Specification::V5::Value_FileValue *v15;
  int v16;
  _tc_google::protobuf::Arena *v17;
  const CoreML::Specification::V5::Value_FileValue **v18;
  CoreML::Specification::FeatureVectorizer_InputColumn **v19;
  const CoreML::Specification::V5::Value_FileValue *v20;
  CoreML::Specification::FeatureVectorizer_InputColumn *Aligned;

  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureVectorizer_InputColumn>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *a1;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        CoreML::Specification::FeatureVectorizer_InputColumn::FeatureVectorizer_InputColumn(Aligned);
        _tc_google::protobuf::Arena::AddListNode(v17, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureVectorizer_InputColumn>);
      }
      else
      {
        Aligned = (CoreML::Specification::FeatureVectorizer_InputColumn *)operator new();
        CoreML::Specification::FeatureVectorizer_InputColumn::FeatureVectorizer_InputColumn(Aligned);
      }
      _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureVectorizer_InputColumn>::Merge(v20, Aligned);
      *v19++ = Aligned;
      ++v18;
      --v16;
    }
    while (v16);
  }
}

void sub_217F8DD8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x219A19A08](v1, 0x10A1C4056DF9CA5);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

uint64_t _GLOBAL__sub_I_FeatureVectorizer_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::parse_jpeg(turi *this, const char *a2, _QWORD *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v11;
  _OWORD v13[10];
  uint64_t v14;
  uint64_t v15;
  _DWORD v16[164];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  bzero(v16, 0x290uLL);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v15 = jpeg_std_error((uint64_t)v13);
  *(_QWORD *)&v13[0] = turi::jpeg_error_exit;
  jpeg_CreateDecompress((char *)&v15, 90, 664);
  jpeg_mem_src(&v15, (uint64_t)this, (uint64_t)a2);
  jpeg_read_header((uint64_t)&v15, 1);
  if ((v16[14] - 3) <= 0xFFFFFFFD)
    turi::parse_jpeg(char const*,unsigned long,unsigned long &,unsigned long &,unsigned long &)::$_0::operator()();
  v11 = v16[11];
  *a3 = v16[10];
  *a4 = v11;
  *a5 = v16[12];
  return jpeg_destroy_decompress(&v15);
}

void sub_217F8DFB8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_217F8DFC4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x217F8DFCCLL);
  __clang_call_terminate(a1);
}

void turi::jpeg_error_exit(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  turi::jpeg_error_exit(jpeg_common_struct *)::$_0::operator()();
}

uint64_t turi::decode_jpeg(turi *this, const char *a2, uint64_t *a3, char **a4, unint64_t *a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD v13[10];
  uint64_t v14;
  uint64_t v15;
  _DWORD v16[33];
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  bzero(v16, 0x290uLL);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v15 = jpeg_std_error((uint64_t)v13);
  *(_QWORD *)&v13[0] = turi::jpeg_error_exit;
  *a3 = 0;
  *a4 = 0;
  if (!this)
    turi::decode_jpeg(char const*,unsigned long,char **,unsigned long &)::$_0::operator()();
  jpeg_CreateDecompress((char *)&v15, 90, 664);
  jpeg_mem_src(&v15, (uint64_t)this, (uint64_t)a2);
  jpeg_read_header((uint64_t)&v15, 1);
  jpeg_start_decompress((uint64_t)&v15);
  v9 = v16[12] * (unint64_t)v16[10];
  *a4 = (char *)(v9 * v16[11]);
  *a3 = operator new[]();
  v12 = 0;
  if (v18 < v17)
  {
    v10 = 0;
    do
    {
      v12 = *a3 + v10;
      jpeg_read_scanlines((uint64_t)&v15, (uint64_t)&v12, 1);
      v10 += v9;
    }
    while (v18 < v17);
  }
  jpeg_finish_decompress((uint64_t)&v15);
  return jpeg_destroy_decompress(&v15);
}

void sub_217F8E174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _QWORD *v33;
  _QWORD *v34;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (*v34)
    {
      MEMORY[0x219A199F0](*v34, 0x1000C8077774924);
      *v33 = 0;
    }
    jpeg_destroy_decompress(&a33);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_217F8E1C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_217F8E1D4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x217F8E1DCLL);
  __clang_call_terminate(a1);
}

uint64_t _GLOBAL__sub_I_jpeg_io_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::neural_net::is_convertible_to_fp16(float *a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  unsigned int v4;
  _BOOL8 v5;
  BOOL v6;

  if (!a2)
    return 1;
  v2 = 4 * a2 - 4;
  do
  {
    v3 = *a1++;
    v4 = (int)v3 + 65503;
    v5 = v4 < 0x1FFBF;
    v6 = v4 > 0x1FFBE || v2 == 0;
    v2 -= 4;
  }
  while (!v6);
  return v5;
}

char *turi::neural_net::get_half_precision_weights@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return std::vector<half>::__init_with_size[abi:ne180100]<float const*,float const*>((char *)a3, a1, &a1[a2], (4 * a2) >> 2);
}

char *std::vector<half>::__init_with_size[abi:ne180100]<float const*,float const*>(char *result, int *a2, int *a3, uint64_t a4)
{
  char *v6;
  _WORD *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<half>::__vallocate[abi:ne180100](result, a4);
    v7 = (_WORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      _S0 = v8;
      __asm { FCVT            H0, S0 }
      *v7++ = _S0;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_217F8E2F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<half>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<half>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<half>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

uint64_t _GLOBAL__sub_I_quantization_utils_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void *turi::png_memwrite_func(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t io_ptr;
  uint64_t v7;
  char *v8;
  void *result;

  io_ptr = png_get_io_ptr(a1);
  v7 = *(_QWORD *)(io_ptr + 8);
  if (*(_QWORD *)io_ptr)
    v8 = (char *)malloc_type_realloc(*(void **)io_ptr, v7 + a3, 0xD592089EuLL);
  else
    v8 = (char *)malloc_type_malloc(v7 + a3, 0x8184DCB0uLL);
  *(_QWORD *)io_ptr = v8;
  if (!v8)
    png_error(a1, "Write Error");
  result = memcpy(&v8[*(_QWORD *)(io_ptr + 8)], a2, a3);
  *(_QWORD *)(io_ptr + 8) += a3;
  return result;
}

_QWORD *turi::png_memread_func(uint64_t a1, void *a2, size_t a3)
{
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;

  result = (_QWORD *)png_get_io_ptr(a1);
  if (result)
  {
    v6 = result;
    v7 = result[2];
    if (v7 + a3 <= result[1])
    {
      result = memcpy(a2, (const void *)(*result + v7), a3);
      v6[2] += a3;
    }
  }
  return result;
}

void turi::setup_png_reader(uint64_t a1, unint64_t a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  file_logger *v9;
  pthread_key_t *v10;
  void *exception;
  file_logger *v12;
  pthread_key_t *v13;
  file_logger *v14;
  pthread_key_t *v15;
  _QWORD *v16;

  if (a2 < 5 || png_sig_cmp(a1, 0, 4uLL))
  {
    if (*((int *)global_logger() + 169) <= 6)
    {
      v9 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/image/png_io.cpp", "setup_png_reader", 90, 1);
      v10 = file_logger::operator<<((pthread_key_t *)v9, "Invalid PNG signature");
      file_logger::operator<<((uint64_t)v10, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Invalid PNG file");
LABEL_15:
  }
  v6 = png_create_read_struct("1.6.37", 0, (uint64_t)turi::png_error_handler, 0);
  v16 = v6;
  if (!v6)
  {
    if (*((int *)global_logger() + 169) <= 6)
    {
      v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/image/png_io.cpp", "setup_png_reader", 99, 1);
      v13 = file_logger::operator<<((pthread_key_t *)v12, "Fail allocating PNG reader struct");
      file_logger::operator<<((uint64_t)v13, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Unexpected libpng error");
    goto LABEL_15;
  }
  v7 = (uint64_t)v6;
  png_set_option((uint64_t)v6, 2u, 3);
  png_create_info_struct(v7);
  if (!v8)
  {
    png_destroy_read_struct((uint64_t *)&v16, 0, 0);
    if (*((int *)global_logger() + 169) <= 6)
    {
      v14 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/image/png_io.cpp", "setup_png_reader", 112, 1);
      v15 = file_logger::operator<<((pthread_key_t *)v14, "Fail allocating PNG info struct");
      file_logger::operator<<((uint64_t)v15, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Unexpected libpng error");
    goto LABEL_15;
  }
  *a3 = v7;
  *a4 = v8;
}

void sub_217F8E698(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

pthread_key_t *file_logger::operator<<(pthread_key_t *a1, const char *a2)
{
  char *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;

  v4 = (char *)pthread_getspecific(a1[74]);
  if (v4)
  {
    if (v4[280])
    {
      v5 = v4 + 16;
      v6 = strlen(a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
      v7 = strlen(a2);
      if (v7)
      {
        if (a2[v7 - 1] == 10)
          file_logger::stream_flush((file_logger *)a1);
      }
    }
  }
  return a1;
}

uint64_t file_logger::operator<<(uint64_t a1, void (*a2)(_BYTE *))
{
  _BYTE *v4;
  _QWORD *exception;

  v4 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v4)
  {
    if (v4[280])
    {
      a2(v4 + 16);
      file_logger::stream_flush((file_logger *)a1);
      if (*(_DWORD *)(a1 + 600) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  return a1;
}

void turi::png_error_handler(uint64_t a1, const char *a2)
{
  int *v3;
  file_logger *v4;
  file_logger *started;
  _QWORD *v6;
  char *v7;
  _QWORD *v8;
  size_t v9;
  size_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *exception;
  uint64_t v14;
  std::locale v15;

  v14 = a1;
  v3 = (int *)global_logger();
  if (v3[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v3))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/image/png_io.cpp", "png_error_handler", 80, 1);
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"libpng error: ", 14);
    v7 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v7)
    {
      if (v7[280])
      {
        v8 = v7 + 16;
        v9 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)a2, v9);
        v10 = strlen(a2);
        if (v10)
        {
          if (a2[v10 - 1] == 10)
            file_logger::stream_flush(started);
        }
      }
    }
    v11 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v11 && *((_BYTE *)v11 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[2] - 24) + 16));
      v12 = std::locale::use_facet(&v15, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(&v15);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  png_destroy_read_struct(&v14, 0, 0);
  turi::png_error_handler(png_struct_def *,char const*)::$_0::operator()();
}

void sub_217F8E94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t turi::setup_png_writer(uint64_t *a1, uint64_t *a2, unsigned int a3, unsigned int a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  file_logger *v16;
  pthread_key_t *v17;
  void *exception;
  file_logger *v19;
  pthread_key_t *v20;
  _QWORD *v21;

  v10 = png_create_write_struct("1.6.37", 0, (uint64_t)turi::png_error_handler, 0);
  v21 = v10;
  if (!v10)
  {
    if (*((int *)global_logger() + 169) <= 6)
    {
      v16 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/image/png_io.cpp", "setup_png_writer", 145, 1);
      v17 = file_logger::operator<<((pthread_key_t *)v16, "Fail allocating PNG writer struct");
      file_logger::operator<<((uint64_t)v17, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Unexpected libpng error");
LABEL_13:
  }
  v11 = (uint64_t)v10;
  png_create_info_struct((uint64_t)v10);
  if (!v12)
  {
    png_destroy_write_struct((uint64_t *)&v21, 0);
    if (*((int *)global_logger() + 169) <= 6)
    {
      v19 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/image/png_io.cpp", "setup_png_writer", 154, 1);
      v20 = file_logger::operator<<((pthread_key_t *)v19, "Fail allocating PNG info struct");
      file_logger::operator<<((uint64_t)v20, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Unexpected libpng error");
    goto LABEL_13;
  }
  v13 = v12;
  if ((a5 - 1) > 3)
    LOBYTE(v14) = -1;
  else
    v14 = dword_2186CF250[a5 - 1];
  result = png_set_IHDR(v11, v12, a3, a4, 8u, v14, 0, 0, 0);
  *a1 = v11;
  *a2 = v13;
  return result;
}

void sub_217F8EB14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void turi::parse_png(turi *this, const char *a2, _QWORD *a3, unint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  file_logger *v15;
  pthread_key_t *v16;
  void *exception;
  int *v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  _QWORD *v24;

  v24 = 0;
  v23 = 0;
  turi::setup_png_reader((uint64_t)this, (unint64_t)a2, (uint64_t *)&v24, &v23);
  v22[0] = this;
  v22[1] = a2;
  v22[2] = 0;
  v11 = v24;
  png_set_read_fn(v24, (uint64_t)v22, (size_t (*)(size_t, void *, size_t))turi::png_memread_func);
  v12 = v23;
  png_read_info((uint64_t)v11, v23);
  v21 = 0;
  v19 = -1;
  v20 = 0;
  if (png_get_IHDR((uint64_t)v11, v12, (_DWORD *)&v21 + 1, &v21, &v20, &v19, 0, 0, 0) != 1)
  {
    if (*((int *)global_logger() + 169) <= 6)
    {
      v15 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/image/png_io.cpp", "parse_png", 223, 1);
      v16 = file_logger::operator<<((pthread_key_t *)v15, "Fail parsing PNG header");
      file_logger::operator<<((uint64_t)v16, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    png_destroy_read_struct((uint64_t *)&v24, (void **)&v23, 0);
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Invalid PNG file");
  }
  *a3 = HIDWORD(v21);
  *a4 = v21;
  v13 = 2;
  v14 = 1;
  switch(v19)
  {
    case 0:
      goto LABEL_5;
    case 2:
    case 3:
      v14 = 3;
      goto LABEL_5;
    case 4:
      goto LABEL_10;
    case 6:
      v14 = 4;
LABEL_5:
      *a5 = v14;
      png_destroy_read_struct((uint64_t *)&v24, (void **)&v23, 0);
      return;
    default:
      v13 = -1;
LABEL_10:
      *a5 = v13;
      png_destroy_read_struct((uint64_t *)&v24, (void **)&v23, 0);
      v18 = &v19;
      turi::parse_png(char const*,unsigned long,unsigned long &,unsigned long &,unsigned long &)::$_0::operator()(&v18);
  }
}

void turi::encode_png(turi *this, const char *a2, uint64_t a3, uint64_t a4, _QWORD *a5, size_t *a6, unint64_t *a7)
{
  uint64_t v10;
  _QWORD *v13;
  void **v14;
  uint64_t i;
  _QWORD *v16;
  const char *v17;
  uint64_t j;
  char v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void **v23;
  void *v24;
  void *__src;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29[2];

  v10 = a3;
  v28 = 0;
  *(_QWORD *)v29 = 0;
  turi::setup_png_writer((uint64_t *)v29, &v28, a2, a3, a4);
  v13 = *(_QWORD **)v29;
  v14 = (void **)png_malloc(*(_QWORD **)v29, 8 * v10);
  if (v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v16 = png_malloc(*(_QWORD **)v29, a4 * (_QWORD)a2);
      v14[i] = v16;
      if (a2)
      {
        v17 = 0;
        do
        {
          for (j = a4; j; --j)
          {
            v19 = *(_BYTE *)this;
            this = (turi *)((char *)this + 1);
            *(_BYTE *)v16 = v19;
            v16 = (_QWORD *)((char *)v16 + 1);
          }
          ++v17;
        }
        while (v17 != a2);
      }
    }
    v13 = *(_QWORD **)v29;
  }
  __src = 0;
  v26 = 0;
  v27 = 0;
  png_set_write_fn(v13, (uint64_t)&__src, (size_t (*)(size_t, void *, size_t))turi::png_memwrite_func, (uint64_t (*)(uint64_t))turi::png_mem_flush);
  v20 = v28;
  png_set_rows((uint64_t)v13, v28, (uint64_t)v14);
  png_write_png((uint64_t)v13, v20, 0);
  *a6 = (size_t)v26;
  v21 = (void *)operator new[]();
  *a5 = v21;
  v22 = __src;
  memcpy(v21, __src, *a6);
  free(v22);
  if (v10)
  {
    v23 = v14;
    do
    {
      v24 = *v23++;
      png_free((uint64_t)v13, v24);
      --v10;
    }
    while (v10);
  }
  png_free((uint64_t)v13, v14);
  png_destroy_write_struct((uint64_t *)v29, (void **)&v28);
}

void turi::decode_png(turi *this, const char *a2, uint64_t *a3, char **a4, unint64_t *a5)
{
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  _QWORD *v22;

  if (!this)
    turi::decode_png(char const*,unsigned long,char **,unsigned long &)::$_0::operator()();
  v22 = 0;
  v21 = 0;
  turi::setup_png_reader((uint64_t)this, (unint64_t)a2, (uint64_t *)&v22, &v21);
  v20[0] = this;
  v20[1] = a2;
  v20[2] = 0;
  v9 = v22;
  png_set_read_fn(v22, (uint64_t)v20, (size_t (*)(size_t, void *, size_t))turi::png_memread_func);
  v10 = v21;
  png_read_info((uint64_t)v9, v21);
  v18 = 0;
  v19 = 0;
  v17 = 0;
  png_get_IHDR((uint64_t)v9, v10, (_DWORD *)&v19 + 1, &v19, (_DWORD *)&v18 + 1, &v18, &v17, 0, 0);
  v11 = v18;
  if ((_DWORD)v18 == 3)
  {
    png_set_palette_to_rgb((uint64_t)v9);
    v11 = v18;
  }
  v12 = HIDWORD(v18);
  if (!v11 && SHIDWORD(v18) <= 7)
  {
    png_set_expand_gray_1_2_4_to_8((uint64_t)v9);
    v12 = HIDWORD(v18);
  }
  if (v12 == 16)
    png_set_scale_16((uint64_t)v9);
  if (v18 > 6)
    v13 = -1;
  else
    v13 = dword_2186CF228[(int)v18];
  v14 = (HIDWORD(v19) * v13);
  *a4 = (char *)(v14 * v19);
  *a3 = operator new[]();
  if ((_DWORD)v19)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      png_read_row((uint64_t)v9, (char *)(*a3 + v15), 0);
      ++v16;
      v15 += v14;
    }
    while (v16 < v19);
  }
  png_read_end((uint64_t)v9, 0);
  png_destroy_read_struct((uint64_t *)&v22, (void **)&v21, 0);
}

uint64_t _GLOBAL__sub_I_png_io_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

void sub_217F8F220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void __cxx_global_var_init_6()
{
  uint64_t v0;
  const char *v1;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg((_DWORD)v0 == 0, v1, v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_gl_gframe_cpp()
{
  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  return __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
}

uint64_t turi::infer_type_of_list(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t common_type;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v9 = (uint64_t *)&v10;
  v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2)
    goto LABEL_11;
  v3 = 7;
  do
  {
    v4 = *(unsigned __int8 *)(v1 + 12);
    if (v4 != v3 && v4 != 7)
    {
      v8 = *(_BYTE *)(v1 + 12);
      std::__tree<turi::flex_type_enum>::__emplace_unique_key_args<turi::flex_type_enum,turi::flex_type_enum>(&v9, &v8, &v8);
      v3 = *(unsigned __int8 *)(v1 + 12);
    }
    v1 += 16;
  }
  while (v1 != v2);
  if (!v11)
LABEL_11:
    common_type = 7;
  else
    common_type = turi::get_common_type(&v9);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v9, v10);
  return common_type;
}

uint64_t turi::get_common_type(_QWORD *a1)
{
  uint64_t v1;
  uint64_t **v3;
  uint64_t **v4;
  int v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  int v10;
  void *exception;

  v1 = a1[2];
  if (!v1)
    return 1;
  if (v1 != 2)
  {
    if (v1 != 1)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Could not find a common type to convert all values.");
    }
    return *(char *)(*a1 + 25);
  }
  v3 = (uint64_t **)a1[1];
  if (!v3)
    return 7;
  v4 = (uint64_t **)a1[1];
  while (1)
  {
    v5 = *((char *)v4 + 25);
    if (v5 <= 0)
      break;
LABEL_10:
    v4 = (uint64_t **)*v4;
    if (!v4)
      goto LABEL_17;
  }
  if (v5 < 0)
  {
    ++v4;
    goto LABEL_10;
  }
  v6 = (uint64_t **)a1[1];
  do
  {
    v7 = *((char *)v6 + 25);
    if (v7 <= 1)
    {
      if (v7 == 1)
        return 1;
      ++v6;
    }
    v6 = (uint64_t **)*v6;
  }
  while (v6);
LABEL_17:
  v8 = (uint64_t **)a1[1];
  do
  {
    v9 = *((char *)v8 + 25);
    if (v9 <= 4)
    {
      if (v9 == 4)
      {
        while (1)
        {
          v10 = *((char *)v3 + 25);
          if (v10 <= 3)
          {
            if (v10 == 3)
              return 4;
            ++v3;
          }
          v3 = (uint64_t **)*v3;
          if (!v3)
            return 7;
        }
      }
      ++v8;
    }
    v8 = (uint64_t **)*v8;
  }
  while (v8);
  return 7;
}

void sub_217F8F5D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void turi::check_vector_equal_size(turi *this, const turi::gl_sarray *a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[3];
  char v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = turi::thread::cpu_count(this);
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = v3;
  v13 = turi::gl_sarray::size(this);
  v14[0] = -1;
  std::vector<unsigned long>::vector(__p, v4, v14);
  v5 = operator new(0x28uLL);
  *v5 = &off_24D91E100;
  v5[1] = &v13;
  v5[2] = this;
  v5[3] = __p;
  v5[4] = &v12;
  v15 = v5;
  turi::in_parallel((turi::thread_pool *)v14);
  v6 = v15;
  if (v15 == v14)
  {
    v7 = 4;
    v6 = v14;
    goto LABEL_8;
  }
  if (v15)
  {
    v7 = 5;
LABEL_8:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = 0;
  v9 = -1;
  do
  {
    v10 = *((_QWORD *)__p[0] + v8);
    if (v10 != -1)
    {
      if (v9 == -1)
      {
        v9 = *((_QWORD *)__p[0] + v8);
      }
      else if (v10 != v9)
      {
        turi::check_vector_equal_size(turi::gl_sarray const&)::$_0::operator()();
      }
    }
    ++v8;
  }
  while (v4 != v8);
  __p[1] = __p[0];
  operator delete(__p[0]);
}

void sub_217F8F724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::gl_sarray::size(turi::gl_sarray *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217F8F800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::in_parallel(turi::thread_pool *a1)
{
  turi::thread_pool *instance;
  turi::thread *v3;
  turi::thread_pool *tls_data;
  BOOL v5;
  turi::thread_pool *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9[2];
  unsigned int v10;
  turi::thread *v11;
  _BYTE v12[192];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  v3 = (turi::thread *)turi::thread_pool::size(instance);
  tls_data = (turi::thread_pool *)turi::thread::get_tls_data(v3);
  if (*((_BYTE *)tls_data + 8))
    v5 = 0;
  else
    v5 = (unint64_t)v3 > 1;
  if (v5)
  {
    v6 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v12, v6);
    v7 = 0;
    v8 = 1;
    do
    {
      v10 = v8 - 1;
      v11 = v3;
      v9[0] = (uint64_t)boost::function0<void>::assign_to<turi::in_parallel(std::function<void ()(unsigned long,unsigned long)> const&)::{lambda(void)#1}>(turi::in_parallel(std::function<void ()(unsigned long,unsigned long)> const&)::{lambda(void)#1})::stored_vtable
            + 1;
      v9[1] = (uint64_t)a1;
      turi::parallel_task_queue::launch((uint64_t)v12, (uint64_t)v9, v7);
      boost::function0<void>::~function0(v9);
      v7 = v8;
      v5 = (unint64_t)v3 > v8++;
    }
    while (v5);
    turi::parallel_task_queue::join((turi::parallel_task_queue *)v12);
    turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)v12);
  }
  else
  {
    std::function<void ()(unsigned long,unsigned long)>::operator()((uint64_t)a1, 0, 1);
  }
}

void sub_217F8F938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

void turi::check_vector_equal_size(turi::gl_sarray const&)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _BYTE v5[16];
  _QWORD v6[33];

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Vectors must be of the same size. Row ", 38);
  v0 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" contains a vector of size ", 27);
  v1 = (_QWORD *)std::ostream::operator<<();
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)". Expected a vector of", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" size ", 6);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)".", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  turi::check_vector_equal_size(turi::gl_sarray const&)::$_0::operator() const(unsigned long,unsigned long,unsigned long)::{lambda(void)#1}::operator()();
}

void sub_217F8FA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v30;

  a10 = *MEMORY[0x24BEDB7F0];
  v30 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a10 + *(_QWORD *)(a10 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a12 = v30;
  a13 = MEMORY[0x24BEDB848] + 16;
  if (a26 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&a29);
  _Unwind_Resume(a1);
}

turi::gl_sarray *turi::gl_sarray::gl_sarray(turi::gl_sarray *this)
{
  *(_QWORD *)this = &off_24D91E0A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  turi::gl_sarray::instantiate_new(this);
  return this;
}

void sub_217F8FAD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::instantiate_new(turi::gl_sarray *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v5);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 8, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

turi::gl_sarray *turi::gl_sarray::gl_sarray(turi::gl_sarray *this, const turi::gl_sarray *a2)
{
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  *(_QWORD *)this = &off_24D91E0A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  (*(void (**)(__int128 *__return_ptr, const turi::gl_sarray *))(*(_QWORD *)a2 + 16))(&v8, a2);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v3, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return this;
}

void sub_217F8FC08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray::gl_sarray(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  *(_QWORD *)a1 = &off_24D91E0A8;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v8, a2);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v3, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

{
  uint64_t *v4;
  uint64_t v5;
  std::string __p;

  *(_QWORD *)a1 = &off_24D91E0A8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  turi::gl_sarray::instantiate_new((turi::gl_sarray *)a1);
  v5 = *v4;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 48))(v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;

  *(_QWORD *)a1 = &off_24D91E0A8;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  if (*(_QWORD *)a2
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v13 = v5;
    *((_QWORD *)&v13 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    v13 = 0uLL;
  }
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v3, &v13);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_217F8FCCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sub_217F8FD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14 + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray::operator=(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;

  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v7, a2);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 8, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

uint64_t turi::gl_sarray::get_proxy@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

turi::gl_sarray *turi::gl_sarray::gl_sarray(turi::gl_sarray *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = a3;
  *(_QWORD *)this = &off_24D91E0A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if ((_DWORD)a3 == 7)
    v3 = turi::infer_type_of_list(a2);
  turi::gl_sarray::instantiate_new(this);
  (*(void (**)(uint64_t *__return_ptr, turi::gl_sarray *))(*(_QWORD *)this + 16))(&v10, this);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 32))(v10, a2, v3);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return this;
}

void sub_217F8FF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v9 + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::construct_from_vector(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = a3;
  if ((_DWORD)a3 == 7)
    v3 = turi::infer_type_of_list(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v9, a1);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2, v3);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_217F90020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::from_const(turi::gl_sarray *this@<X0>, const turi::flexible_type *a2@<X1>, turi::gl_sarray *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  turi::gl_sarray::gl_sarray(a3);
  v6 = *((_QWORD *)a3 + 1);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a3 + 2);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, turi::gl_sarray *, const turi::flexible_type *, uint64_t))(*(_QWORD *)v6 + 40))(v6, this, a2, 7);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_217F900FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  *v9 = &off_24D91E0A8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v9 + 3));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::~gl_sarray(turi::gl_sarray *this)
{
  char *v1;

  *(_QWORD *)this = &off_24D91E0A8;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_24D91E0A8;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_24D91E0A8;
  v1 = (char *)this + 8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v1);
  JUMPOUT(0x219A19A08);
}

void turi::gl_sarray::read_json(uint64_t a1@<X0>, turi::gl_sarray *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::string __p;
  uint64_t v11;
  std::__shared_weak_count *v12;

  turi::gl_sarray::gl_sarray(a2);
  v5 = *((_QWORD *)a2 + 1);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v11 = v5;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 72))(v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_217F90250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  _QWORD *v16;
  uint64_t v17;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  *v16 = &off_24D91E0A8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v16 + 3));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::from_sequence(turi::gl_sarray *this@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *exception;
  __int128 v12;

  v5 = a2 >= (unint64_t)this;
  v6 = a2 - (_QWORD)this;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "End must be greater than start");
  }
  turi::unity_sarray::create_sequential_sarray(v6, this, a3, &v12);
  turi::gl_sarray::gl_sarray(a4, (uint64_t)&v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217F90348(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray::gl_sarray(uint64_t a1, uint64_t *a2)
{
  *(_QWORD *)a1 = &off_24D91E0A8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), a2);
  return a1;
}

_QWORD *turi::gl_sarray::gl_sarray(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  turi::unity_sarray *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  *a1 = &off_24D91E0A8;
  v4 = a1 + 1;
  v5 = (turi::unity_sarray *)operator new();
  turi::unity_sarray::unity_sarray(v5);
  std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>(v4, (uint64_t)v5);
  a1[3] = 0;
  a1[4] = 0;
  v6 = a1[1];
  v7 = a2[1];
  v14 = *a2;
  v15 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  turi::unity_sarray::construct_from_sarray(v6, &v14);
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_217F90558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v10);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

double turi::gl_sarray::operator std::shared_ptr<turi::unity_sarray_base>@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void turi::operator-(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *__p[2];
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void **v49;
  _QWORD v50[3];

  v50[2] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v45, a2);
  v5 = v45;
  memset(v50, 0, 13);
  if (v50 != (_QWORD *)a1)
  {
    *(_QWORD *)((char *)v50 + 5) = *(_QWORD *)(a1 + 5);
    v50[0] = *(_QWORD *)a1;
    BYTE4(v50[1]) = *(_BYTE *)(a1 + 12);
    if (BYTE4(v50[1]) <= 9u && ((1 << SBYTE4(v50[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v50[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "-");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, void **))(*(_QWORD *)v5 + 304))(&v47, v5, v50, __p);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v47);
  v8 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v44 < 0)
    operator delete(__p[0]);
  switch(BYTE4(v50[1]))
  {
    case 2:
      v11 = (unint64_t *)v50[0];
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = v50[0];
        if (v50[0])
        {
          if (*(char *)(v50[0] + 31) < 0)
            operator delete(*(void **)(v50[0] + 8));
          v15 = v14;
          v16 = 0x1012C404EF22A49;
          goto LABEL_54;
        }
      }
      break;
    case 3:
      v28 = (unint64_t *)v50[0];
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = v50[0];
        if (v50[0])
        {
          v32 = *(void **)(v50[0] + 8);
          if (v32)
          {
            *(_QWORD *)(v50[0] + 16) = v32;
            operator delete(v32);
          }
          v15 = v31;
          v16 = 0x1080C409938AC02;
          goto LABEL_54;
        }
      }
      break;
    case 4:
      v17 = (unint64_t *)v50[0];
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = v50[0];
        if (v50[0])
        {
          v49 = (void **)(v50[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v49);
          goto LABEL_47;
        }
      }
      break;
    case 5:
      v33 = (unint64_t *)v50[0];
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v20 = v50[0];
        if (v50[0])
        {
          v49 = (void **)(v50[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v49);
LABEL_47:
          v15 = v20;
          v16 = 0x1020C405E66F15BLL;
          goto LABEL_54;
        }
      }
      break;
    case 8:
      v36 = (unint64_t *)v50[0];
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = v50[0];
        if (v50[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v50[0] + 16));
          v15 = v39;
          v27 = -235920773;
          goto LABEL_53;
        }
      }
      break;
    case 9:
      v21 = (unint64_t *)v50[0];
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = v50[0];
        if (v50[0])
        {
          v25 = *(void **)(v50[0] + 48);
          if (v25)
          {
            *(_QWORD *)(v50[0] + 56) = v25;
            operator delete(v25);
          }
          v26 = *(void **)(v24 + 24);
          if (v26)
          {
            *(_QWORD *)(v24 + 32) = v26;
            operator delete(v26);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v24 + 8);
          v15 = v24;
          v27 = 2071181815;
LABEL_53:
          v16 = v27 | 0x1030C4000000000;
LABEL_54:
          MEMORY[0x219A19A08](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  memset(v50, 0, 13);
  v40 = v46;
  if (v46)
  {
    v41 = (unint64_t *)&v46->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_217F909D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;

  if (a15 < 0)
    operator delete(__p);
  switch(*(_BYTE *)(v20 - 44))
  {
    case 2:
      v22 = *(unint64_t **)(v20 - 56);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (v24)
        goto LABEL_41;
      v25 = *(_QWORD *)(v20 - 56);
      if (!v25)
        goto LABEL_41;
      if (*(char *)(v25 + 31) < 0)
        operator delete(*(void **)(v25 + 8));
      v26 = (_QWORD *)v25;
      v27 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v37 = *(unint64_t **)(v20 - 56);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_41;
      v40 = *(_QWORD **)(v20 - 56);
      if (!v40)
        goto LABEL_41;
      v41 = (void *)v40[1];
      if (v41)
      {
        v40[2] = v41;
        operator delete(v41);
      }
      v26 = v40;
      v27 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v28 = *(unint64_t **)(v20 - 56);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (v30)
        goto LABEL_41;
      v31 = *(_QWORD **)(v20 - 56);
      if (!v31)
        goto LABEL_41;
      a20 = v31 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      goto LABEL_33;
    case 5:
      v42 = *(unint64_t **)(v20 - 56);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_41;
      v31 = *(_QWORD **)(v20 - 56);
      if (!v31)
        goto LABEL_41;
      a20 = v31 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
LABEL_33:
      v26 = v31;
      v27 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v45 = *(unint64_t **)(v20 - 56);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_41;
      v48 = *(_QWORD *)(v20 - 56);
      if (!v48)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v48 + 16));
      v26 = (_QWORD *)v48;
      v36 = -235920773;
      goto LABEL_39;
    case 9:
      v32 = *(unint64_t **)(v20 - 56);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_41;
      v35 = *(_QWORD **)(v20 - 56);
      if (!v35)
        goto LABEL_41;
      v26 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v35);
      v36 = 2071181815;
LABEL_39:
      v27 = v36 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v26, v27);
LABEL_41:
      *(_QWORD *)(v20 - 56) = 0;
      *(_DWORD *)(v20 - 48) = 0;
      *(_BYTE *)(v20 - 44) = 0;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

void turi::gl_sarray::operator==(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p[2];
  char v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v22);
  v5 = v22;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v20, a2);
  v21 = v20;
  v20 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(__p, "==");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, void **))(*(_QWORD *)v5 + 312))(&v24, v5, &v21, __p);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v24);
  v6 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p[0]);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unsigned int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *__p[2];
  char v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  void **v49;
  _QWORD v50[3];

  v50[2] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v45);
  v5 = v45;
  memset(v50, 0, 13);
  if (v50 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v50 + 5) = *(_QWORD *)(a2 + 5);
    v50[0] = *(_QWORD *)a2;
    BYTE4(v50[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v50[1]) <= 9u && ((1 << SBYTE4(v50[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v50[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "==");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, void **))(*(_QWORD *)v5 + 296))(&v47, v5, v50, __p);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v47);
  v8 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v44 < 0)
    operator delete(__p[0]);
  switch(BYTE4(v50[1]))
  {
    case 2:
      v11 = (unint64_t *)v50[0];
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = v50[0];
        if (v50[0])
        {
          if (*(char *)(v50[0] + 31) < 0)
            operator delete(*(void **)(v50[0] + 8));
          v15 = v14;
          v16 = 0x1012C404EF22A49;
          goto LABEL_54;
        }
      }
      break;
    case 3:
      v28 = (unint64_t *)v50[0];
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = v50[0];
        if (v50[0])
        {
          v32 = *(void **)(v50[0] + 8);
          if (v32)
          {
            *(_QWORD *)(v50[0] + 16) = v32;
            operator delete(v32);
          }
          v15 = v31;
          v16 = 0x1080C409938AC02;
          goto LABEL_54;
        }
      }
      break;
    case 4:
      v17 = (unint64_t *)v50[0];
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = v50[0];
        if (v50[0])
        {
          v49 = (void **)(v50[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v49);
          goto LABEL_47;
        }
      }
      break;
    case 5:
      v33 = (unint64_t *)v50[0];
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        v20 = v50[0];
        if (v50[0])
        {
          v49 = (void **)(v50[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v49);
LABEL_47:
          v15 = v20;
          v16 = 0x1020C405E66F15BLL;
          goto LABEL_54;
        }
      }
      break;
    case 8:
      v36 = (unint64_t *)v50[0];
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = v50[0];
        if (v50[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v50[0] + 16));
          v15 = v39;
          v27 = -235920773;
          goto LABEL_53;
        }
      }
      break;
    case 9:
      v21 = (unint64_t *)v50[0];
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v24 = v50[0];
        if (v50[0])
        {
          v25 = *(void **)(v50[0] + 48);
          if (v25)
          {
            *(_QWORD *)(v50[0] + 56) = v25;
            operator delete(v25);
          }
          v26 = *(void **)(v24 + 24);
          if (v26)
          {
            *(_QWORD *)(v24 + 32) = v26;
            operator delete(v26);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v24 + 8);
          v15 = v24;
          v27 = 2071181815;
LABEL_53:
          v16 = v27 | 0x1030C4000000000;
LABEL_54:
          MEMORY[0x219A19A08](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  memset(v50, 0, 13);
  v40 = v46;
  if (v46)
  {
    v41 = (unint64_t *)&v46->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_217F90D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_217F910E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20)
{
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;

  if (a15 < 0)
    operator delete(__p);
  switch(*(_BYTE *)(v20 - 44))
  {
    case 2:
      v22 = *(unint64_t **)(v20 - 56);
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (v24)
        goto LABEL_41;
      v25 = *(_QWORD *)(v20 - 56);
      if (!v25)
        goto LABEL_41;
      if (*(char *)(v25 + 31) < 0)
        operator delete(*(void **)(v25 + 8));
      v26 = (_QWORD *)v25;
      v27 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v37 = *(unint64_t **)(v20 - 56);
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_41;
      v40 = *(_QWORD **)(v20 - 56);
      if (!v40)
        goto LABEL_41;
      v41 = (void *)v40[1];
      if (v41)
      {
        v40[2] = v41;
        operator delete(v41);
      }
      v26 = v40;
      v27 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v28 = *(unint64_t **)(v20 - 56);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (v30)
        goto LABEL_41;
      v31 = *(_QWORD **)(v20 - 56);
      if (!v31)
        goto LABEL_41;
      a20 = v31 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      goto LABEL_33;
    case 5:
      v42 = *(unint64_t **)(v20 - 56);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_41;
      v31 = *(_QWORD **)(v20 - 56);
      if (!v31)
        goto LABEL_41;
      a20 = v31 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
LABEL_33:
      v26 = v31;
      v27 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v45 = *(unint64_t **)(v20 - 56);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_41;
      v48 = *(_QWORD *)(v20 - 56);
      if (!v48)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v48 + 16));
      v26 = (_QWORD *)v48;
      v36 = -235920773;
      goto LABEL_39;
    case 9:
      v32 = *(unint64_t **)(v20 - 56);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_41;
      v35 = *(_QWORD **)(v20 - 56);
      if (!v35)
        goto LABEL_41;
      v26 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v35);
      v36 = 2071181815;
LABEL_39:
      v27 = v36 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v26, v27);
LABEL_41:
      *(_QWORD *)(v20 - 56) = 0;
      *(_DWORD *)(v20 - 48) = 0;
      *(_BYTE *)(v20 - 44) = 0;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

void turi::gl_sarray::operator[](_QWORD **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void **v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count_vtbl *v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  void *exception;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void **v19;

  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_18;
  ((void (*)(std::__shared_weak_count **__return_ptr))(*a1)[2])(&v17);
  v6 = ((uint64_t (*)(std::__shared_weak_count *))v17->__vftable[2].__on_zero_shared)(v17);
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v6 <= a2)
  {
LABEL_18:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Index out of range");
  }
  turi::gl_sarray::ensure_has_sarray_reader((uint64_t)a1);
  std::vector<turi::flexible_type>::vector(&v17, 1uLL);
  v10 = (void **)(*(uint64_t (**)(_QWORD *, unint64_t, unint64_t, std::__shared_weak_count **))(*a1[3] + 48))(a1[3], a2, a2 + 1, &v17);
  v11 = v17;
  if (v18 == v17)
    turi::gl_sarray::operator[](long long)const::$_0::operator()();
  v19 = v10;
  if (v10 != (void **)1)
    turi::gl_sarray::operator[](long long)const::$_1::operator()();
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  if (v11 != (std::__shared_weak_count *)a3)
  {
    v12 = v11->__vftable;
    *(_QWORD *)(a3 + 5) = *(std::__shared_weak_count_vtbl **)((char *)&v11->__vftable + 5);
    *(_QWORD *)a3 = v12;
    v13 = BYTE4(v11->__shared_owners_);
    *(_BYTE *)(a3 + 12) = v13;
    if (v13 <= 9 && ((1 << v13) & 0x33C) != 0)
    {
      v14 = *(unint64_t **)a3;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  v19 = (void **)&v17;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
}

void sub_217F9146C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray::ensure_has_sarray_reader(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  turi::unity_sarray *v10;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;

  v1 = (_QWORD *)(this + 24);
  if (!*(_QWORD *)(this + 24))
  {
    v2 = this;
    pthread_mutex_lock(&turi::reader_shared_ptr_lock);
    if (!*v1)
    {
      (*(void (**)(turi::unity_sarray **__return_ptr, uint64_t))(*(_QWORD *)v2 + 16))(&v10, v2);
      turi::unity_sarray::get_underlying_sarray(v10, &v12);
      turi::sarray<turi::flexible_type>::get_reader(v12, &v13);
      std::shared_ptr<turi::sarray_reader<turi::flexible_type>>::operator=[abi:ne180100]<turi::sarray_reader<turi::flexible_type>,std::default_delete<turi::sarray_reader<turi::flexible_type>>,void>(v1, &v13);
      v3 = v13;
      v13 = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v5 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    return pthread_mutex_unlock(&turi::reader_shared_ptr_lock);
  }
  return this;
}

void sub_217F915C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 24);
  *(_QWORD *)(v2 - 24) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  pthread_mutex_unlock(&turi::reader_shared_ptr_lock);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::operator[](long long)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows.size() > 0", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sarray.cpp", "operator()", 296, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::gl_sarray::operator[](long long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F9171C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::operator[](long long)const::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_read", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sarray.cpp", "operator()", 297, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::gl_sarray::operator[](long long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F9192C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::operator[](uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v20);
  v5 = v20;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v18, a2);
  v19 = v18;
  v18 = 0uLL;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v5 + 168))(&v22, v5, &v19);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v22);
  v6 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_217F91B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::operator[](turi::gl_sarray *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  const void *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p;
  void *__dst;
  uint64_t v28;

  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  __dst = 0;
  v28 = 0;
  __p = 0;
  if (v5)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](&__p, v5);
    v7 = (char *)__dst;
    memmove(__dst, v6, 8 * v5);
    v8 = &v7[8 * v5];
    __dst = v8;
    v9 = (char *)__p;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = (v8 - v9) >> 3;
  if (v10 == 2)
  {
    v12 = 1;
    v11 = 1;
  }
  else
  {
    if (v10 != 3)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Invalid slice. Slice must be of the form {start, end} or {start, step, end}");
    }
    v11 = *((_QWORD *)v9 + 1);
    v12 = 2;
  }
  v13 = *(_QWORD *)v9;
  v14 = *(_QWORD *)&v9[8 * v12];
  if ((*(_QWORD *)v9 & 0x8000000000000000) != 0)
  {
    v13 += turi::gl_sarray::size(a1);
    if (v14 < 0)
LABEL_12:
      v14 += turi::gl_sarray::size(a1);
  }
  else if (v14 < 0)
  {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t *__return_ptr, turi::gl_sarray *))(*(_QWORD *)a1 + 16))(&v22, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 528))(&v24, v22, v13, v11, v14);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
}

void sub_217F91D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::query_eval::materialize_options::~materialize_options(void **this)
{
  turi::query_eval::materialize_options *v2;
  uint64_t v3;
  void **v4;

  v4 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = (turi::query_eval::materialize_options *)this[4];
  if (v2 == (turi::query_eval::materialize_options *)(this + 1))
  {
    v3 = 4;
    v2 = (turi::query_eval::materialize_options *)(this + 1);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

void turi::gl_sarray::range_iterator(turi::gl_sarray *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD **a4@<X8>)
{
  unint64_t v4;
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *exception;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v4 = a3;
  if (a3 == -1)
  {
    (*(void (**)(uint64_t *__return_ptr, turi::gl_sarray *))(*(_QWORD *)this + 16))(&v29, this);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 96))(v29);
    v21 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  if (v4 < a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "start must be less than end");
    goto LABEL_32;
  }
  (*(void (**)(uint64_t *__return_ptr, turi::gl_sarray *))(*(_QWORD *)this + 16))(&v29, this);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 96))(v29) <= a2)
  {
    v8 = (v4 | a2) != 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, turi::gl_sarray *))(*(_QWORD *)this + 16))(&v27, this);
    v8 = v4 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 96))(v27);
    v9 = v28;
    if (v28)
    {
      v10 = (unint64_t *)&v28->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v30;
  if (v30)
  {
    v13 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v8)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Index out of range");
LABEL_32:
  }
  turi::gl_sarray::ensure_has_sarray_reader((uint64_t)this);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  v25 = *((_QWORD *)this + 3);
  v26 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  turi::gl_sarray_range::gl_sarray_range(a4, &v25, a2, v4);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_217F92024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::save(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  const std::string::value_type *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  int v19;
  std::string *v20;
  std::string::size_type size;
  int data;
  int v23;
  std::string *v25;
  _QWORD *exception;
  int data_low;
  int v28;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  unint64_t *v40;
  void *v41[2];
  char v42;
  void *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  void *__p;
  char v48;
  _QWORD v49[2];
  std::__shared_weak_count *v50;
  std::string v51;
  std::string v52;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v52 = *(std::string *)a3;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v52.__r_.__value_.__l.__size_)
      goto LABEL_26;
  }
  else
  {
    v5 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&v52.__r_.__value_.__s + 23))
      goto LABEL_27;
  }
  v6 = 0;
  v7 = *(char *)(a2 + 23);
  v8 = v7 < 0;
  v9 = *(const std::string::value_type **)a2;
  if (v7 >= 0)
    v9 = (const std::string::value_type *)a2;
  v10 = *(unsigned __int8 *)(a2 + 23);
  if (v8)
    v10 = *(_QWORD *)(a2 + 8);
  while (-v10 != v6 && v6 != -4)
  {
    v11 = v9[v10 - 1 + v6];
    v12 = aCsv[v6-- + 3];
    if (v11 != v12)
      goto LABEL_17;
  }
  if (v6 == -4)
    goto LABEL_24;
LABEL_17:
  v13 = 0;
  v14 = (uint64_t)&v9[v10 - 1];
  v15 = -v10;
  v16 = "binary";
  while (v15 != v13 && v13 != -7)
  {
    v17 = *(unsigned __int8 *)(v14 + v13);
    v18 = aCsvGz[v13-- + 6];
    if (v17 != v18)
      goto LABEL_25;
  }
  if (v13 != -7)
  {
    v16 = "binary";
    goto LABEL_25;
  }
LABEL_24:
  v16 = "csv";
LABEL_25:
  MEMORY[0x219A19390](&v52, v16);
LABEL_26:
  v5 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_ != 6)
    {
LABEL_37:
      if (size == 4)
      {
        if (*(_DWORD *)v52.__r_.__value_.__l.__data_ == 1954047348)
          goto LABEL_52;
        size = v52.__r_.__value_.__l.__size_;
      }
      if (size != 3)
        goto LABEL_45;
      v25 = (std::string *)v52.__r_.__value_.__r.__words[0];
      goto LABEL_47;
    }
    v19 = 1;
    v20 = (std::string *)v52.__r_.__value_.__r.__words[0];
    goto LABEL_31;
  }
LABEL_27:
  if (v5 != 6)
    goto LABEL_42;
  v19 = 0;
  v20 = &v52;
LABEL_31:
  data = (int)v20->__r_.__value_.__l.__data_;
  v23 = WORD2(v20->__r_.__value_.__r.__words[0]);
  if (data != 1634625890 || v23 != 31090)
  {
    if (v19)
    {
      size = v52.__r_.__value_.__l.__size_;
      goto LABEL_37;
    }
LABEL_42:
    if (v5 != 3)
    {
      if (v5 != 4 || LODWORD(v52.__r_.__value_.__l.__data_) != 1954047348)
        goto LABEL_45;
      goto LABEL_52;
    }
    v25 = &v52;
LABEL_47:
    data_low = LOWORD(v25->__r_.__value_.__l.__data_);
    v28 = v25->__r_.__value_.__s.__data_[2];
    if (data_low != 29539 || v28 != 118)
    {
LABEL_45:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Invalid format. Supported formats are 'csv', 'text', and 'binary'");
    }
LABEL_52:
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)v49);
    std::string::basic_string[abi:ne180100]<0>(v41, "X1");
    turi::gl_sframe::operator[]((uint64_t)v49, (uint64_t)v41, (turi::gl_sarray *)&v43);
    turi::gl_sarray_reference::operator=((uint64_t)&v43, a1);
    v43 = off_24D91EA30;
    if (v48 < 0)
      operator delete(__p);
    v43 = &off_24D91E0A8;
    v30 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v45;
    if (v45)
    {
      v34 = (unint64_t *)&v45->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(&v43, "csv");
    turi::gl_sframe::save((uint64_t)v49, a2, (uint64_t)&v43);
    if (SHIBYTE(v45) < 0)
      operator delete(v43);
    v49[0] = off_24D91E9C0;
    v36 = v50;
    if (v50)
    {
      v37 = (unint64_t *)&v50->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      goto LABEL_71;
    }
    goto LABEL_82;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v43, a1);
  v39 = v43;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v51 = *(std::string *)a2;
  (*(void (**)(void *, std::string *))(*(_QWORD *)v39 + 80))(v39, &v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v36 = v44;
  if (v44)
  {
    v40 = (unint64_t *)&v44->__shared_owners_;
    do
      v38 = __ldaxr(v40);
    while (__stlxr(v38 - 1, v40));
LABEL_71:
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
LABEL_82:
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
}

void sub_217F924AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  _Unwind_Resume(a1);
}

BOOL turi::gl_sarray::empty(turi::gl_sarray *this)
{
  return turi::gl_sarray::size(this) == 0;
}

uint64_t turi::gl_sarray::dtype(turi::gl_sarray *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217F92608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::materialize(turi::gl_sarray *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 392))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_217F92694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray::is_materialized(turi::gl_sarray *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 400))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217F92728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::head(turi::gl_sarray *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 120))(&v13, v11, a2);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217F92808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::tail(turi::gl_sarray *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 360))(&v13, v11, a2);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217F928E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::count_words(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t i;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[8];
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::string v21;
  uint64_t v22;
  int v23;
  char v24;
  _QWORD v25[6];

  v25[5] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v17);
  v7 = v17;
  std::string::basic_string[abi:ne180100]<0>(&v21, "to_lower");
  v24 = 0;
  v23 = 0;
  v22 = a2;
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[11],std::vector<turi::flexible_type> &,0>((uint64_t)v25, "delimiters", a3);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v15, &v21, 2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v7 + 416))(&v19, v7, v15);
  turi::gl_sarray::gl_sarray(a4, (uint64_t)&v19);
  v8 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v15, v16);
  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v21 + i);
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_217F92A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t i;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a11, a12);
  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)(&a18 + i));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::count_ngrams(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  int v10;
  uint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t i;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t j;
  unint64_t *v26;
  void *exception;
  _QWORD *v28[3];
  uint64_t v29;
  std::__shared_weak_count *v30;
  _BYTE v31[8];
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string v37;
  uint64_t v38;
  int v39;
  char v40;
  _QWORD v41[3];
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a3 + 23) < 0)
  {
    v11 = *((_QWORD *)a3 + 1);
    if (v11 != 4 || **(_DWORD **)a3 != 1685221239)
    {
      if (v11 != 9)
        goto LABEL_39;
      a3 = *(_DWORD **)a3;
      goto LABEL_9;
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)a3 + 23);
    if (v10 != 4)
    {
      if (v10 != 9)
        goto LABEL_39;
LABEL_9:
      if (*(_QWORD *)a3 != 0x6574636172616863 || *((_BYTE *)a3 + 8) != 114)
      {
LABEL_39:
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(exception, "Invalid 'method' input  value. Please input either 'word' or 'character' ");
      }
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v33);
      v13 = v33;
      std::string::basic_string[abi:ne180100]<0>(&v37, "to_lower");
      v40 = 0;
      v39 = 0;
      v38 = a4;
      std::string::basic_string[abi:ne180100]<0>(v41, "ignore_space");
      v44 = 0;
      v43 = 0;
      v42 = a5;
      std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v28, &v37, 2);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v13 + 424))(&v29, v13, a2, v28);
      turi::gl_sarray::gl_sarray(a6, (uint64_t)&v29);
      v14 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v28, v28[1]);
      for (i = 40; i != -40; i -= 40)
        std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v37 + i);
      v18 = v34;
      if (v34)
      {
        v19 = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
LABEL_36:
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        return;
      }
      return;
    }
    if (*a3 != 1685221239)
      goto LABEL_39;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v33);
  v21 = v33;
  std::string::basic_string[abi:ne180100]<0>(&v37, "to_lower");
  v40 = 0;
  v39 = 0;
  v38 = a4;
  std::string::basic_string[abi:ne180100]<0>(v41, "ignore_space");
  v44 = 0;
  v43 = 0;
  v42 = a5;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t)v31, &v37, 2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v21 + 432))(&v35, v21, a2, v31);
  turi::gl_sarray::gl_sarray(a6, (uint64_t)&v35);
  v22 = v36;
  if (v36)
  {
    v23 = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v31, v32);
  for (j = 40; j != -40; j -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v37 + j);
  v18 = v34;
  if (v34)
  {
    v26 = (unint64_t *)&v34->__shared_owners_;
    do
      v20 = __ldaxr(v26);
    while (__stlxr(v20 - 1, v26));
    goto LABEL_36;
  }
}

void sub_217F92E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t i;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a15, a16);
  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)(&a22 + i));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_217F92EF0()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x217F92EE8);
}

void sub_217F92F00()
{
  JUMPOUT(0x217F92EE8);
}

void turi::gl_sarray::dict_trim_by_keys(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 440))(&v15, v13, a2, a3);
  turi::gl_sarray::gl_sarray(a4, (uint64_t)&v15);
  v7 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_217F92FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::dict_trim_by_values(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 448))(&v15, v13, a2, a3);
  turi::gl_sarray::gl_sarray(a4, (uint64_t)&v15);
  v7 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_217F930D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::dict_keys(turi::gl_sarray *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v9);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v9 + 456))(&v11);
  turi::gl_sarray::gl_sarray(a2, (uint64_t)&v11);
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_217F931AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::dict_has_any_keys(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 472))(&v13, v11, a2);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217F9328C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::dict_has_all_keys(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 480))(&v13, v11, a2);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217F9336C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::apply(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  turi::random *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v20);
  v9 = v20;
  v10 = (turi::random *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v23, a2);
  v11 = turi::random::pure_random_seed(v10);
  turi::unity_sarray::transform_lambda(v9, (uint64_t)v23, a3, a4, v11, &v22);
  turi::gl_sarray::gl_sarray(a5, (uint64_t)&v22);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v24;
  if (v24 == v23)
  {
    v16 = 4;
    v15 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_11:
  v17 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_217F934D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::sample(turi::gl_sarray *this@<X0>, double a2@<D0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X8>)
{
  float v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v16);
  v9 = a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v16 + 344))(&v18, v16, a3, a4, v9);
  turi::gl_sarray::gl_sarray(a5, (uint64_t)&v18);
  v10 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_217F93618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray::all(turi::gl_sarray *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 184))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217F936AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray::any(turi::gl_sarray *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 192))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217F93740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::max(turi::gl_sarray *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 200))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_217F937D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::min(turi::gl_sarray *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 208))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_217F93868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::sum(turi::gl_sarray *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 216))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_217F938FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::mean(turi::gl_sarray *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 224))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_217F93990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::std(turi::gl_sarray *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 232))(v4, 0);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_217F93A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray::nnz(turi::gl_sarray *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 256))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217F93ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray::num_missing(turi::gl_sarray *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 248))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217F93B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::datetime_to_str(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v13);
  v5 = v13;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v5 + 280))(&v15, v5, &__p);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_217F93C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::str_to_datetime(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v13);
  v5 = v13;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v5 + 288))(&v15, v5, &__p);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v15);
  v6 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_217F93DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::astype(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 264))(&v15, v13, a2, a3);
  turi::gl_sarray::gl_sarray(a4, (uint64_t)&v15);
  v7 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_217F93EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::clip(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t *v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  double v49;
  unsigned int v50;
  double v52;
  char v53;
  size_t v54;
  unsigned int v55;
  double *v56;
  double *v57;
  unint64_t v58;
  double *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  double v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  double v68;
  double v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  double v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  double v82;
  void *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  unsigned int v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t *v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  double v131;
  double v132;
  unsigned int v133;
  double v135;
  size_t v136;
  unsigned int v137;
  double *v138;
  double *v139;
  unint64_t v140;
  double *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  double v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  double v150;
  double v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  double v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unsigned int v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  double v164;
  void *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  double v172;
  void **v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *p_shared_owners;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  void *v195;
  void *v196;
  unsigned int v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  void *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  void *v224;
  void *v225;
  unsigned int v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  void *v231;
  unint64_t *v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  uint64_t v245;
  unsigned __int8 *v246;
  unsigned __int8 *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  char v250;
  void **v251;
  std::__shared_weak_count *v252;
  void **v253;
  _QWORD v254[2];
  _QWORD v255[3];

  v255[2] = *MEMORY[0x24BDAC8D0];
  switch(byte_254FEE1C4)
  {
    case 0:
      switch(a2[12])
      {
        case 0u:
          if (*(_QWORD *)a2 != turi::FLEX_UNDEFINED)
            goto LABEL_132;
          goto LABEL_92;
        case 1u:
          v33 = *(double *)a2;
          v61 = turi::FLEX_UNDEFINED;
          goto LABEL_86;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_132;
        case 6u:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2))
            goto LABEL_92;
          goto LABEL_132;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(a2[12])
      {
        case 0u:
          v33 = *(double *)&turi::FLEX_UNDEFINED;
          v61 = *(_QWORD *)a2;
LABEL_86:
          v40 = (double)v61;
          goto LABEL_87;
        case 1u:
          v33 = *(double *)a2;
          v40 = *(double *)&turi::FLEX_UNDEFINED;
          goto LABEL_87;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_132;
        case 6u:
          v64 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_91;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v50 = a2[12];
      if (v50 - 3 < 7 || v50 < 2)
        goto LABEL_132;
      if (v50 != 2)
        turi::apply_binary_op_ff();
      v52 = *(double *)a2;
      v53 = *(_BYTE *)(*(_QWORD *)a2 + 31);
      v54 = v53 < 0 ? *(_QWORD *)(*(_QWORD *)&v52 + 16) : *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
      v242 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
           ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
           : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v54 != v242)
        goto LABEL_132;
      v243 = (unsigned __int8 *)(*(_QWORD *)&v52 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a2 + 31) & 0x80) != 0)
        v243 = *(unsigned __int8 **)v243;
      v244 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v244 = *(unsigned __int8 **)v244;
      if (v53 < 0)
      {
        if (memcmp(v243, v244, v54))
          goto LABEL_132;
      }
      else
      {
        if (!v54)
          goto LABEL_92;
        do
        {
          if (*v243 != *v244)
            goto LABEL_132;
          ++v243;
          ++v244;
          --v54;
        }
        while (v54);
      }
      goto LABEL_92;
    case 3:
      v55 = a2[12];
      if (v55 > 9)
        turi::apply_binary_op_ff();
      if (v55 != 3)
        goto LABEL_132;
      v56 = *(double **)(*(_QWORD *)a2 + 8);
      v57 = *(double **)(*(_QWORD *)a2 + 16);
      v58 = v57 - v56;
      v59 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v58 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v59) >> 3)
        goto LABEL_132;
      if (v57 == v56)
        goto LABEL_92;
      if (v58 <= 1)
        v58 = 1;
      while (*v56 == *v59)
      {
        ++v59;
        ++v56;
        if (!--v58)
          goto LABEL_92;
      }
      goto LABEL_132;
    case 4:
      v8 = a2[12];
      if (v8 > 9)
        turi::apply_binary_op_ff();
      if (v8 != 4)
        goto LABEL_132;
      v9 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v250, (uint64_t *)(*(_QWORD *)a2 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_66;
    case 5:
      v62 = a2[12];
      if (v62 > 9)
        turi::apply_binary_op_ff();
      if (v62 != 5)
        goto LABEL_132;
      v9 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v250, (uint64_t **)(*(_QWORD *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
LABEL_66:
      if ((v9 & 1) == 0)
        goto LABEL_132;
      goto LABEL_92;
    case 6:
      switch(a2[12])
      {
        case 0u:
          if (*(_QWORD *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FEE1C0)
            goto LABEL_92;
          goto LABEL_132;
        case 1u:
          v64 = vabdd_f64(*(double *)a2, (double)dword_254FEE1C0 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_91:
          if (v64 < 0.0000005)
            goto LABEL_92;
          goto LABEL_132;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_132;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)a2) & 0xFFFFFFFFFFFFFFLL) != 0
            || *((_DWORD *)a2 + 2) != dword_254FEE1C0)
          {
            goto LABEL_132;
          }
          goto LABEL_92;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v60 = a2[12];
      if (v60 < 7 || v60 - 8 < 2)
        goto LABEL_132;
      if (v60 != 7)
        turi::apply_binary_op_ff();
      goto LABEL_92;
    case 8:
      v63 = a2[12];
      if (v63 < 8)
        goto LABEL_132;
      if (v63 == 8)
      {
        if (turi::image_type::operator==(*(_QWORD *)a2 + 8, turi::FLEX_UNDEFINED + 8))
          goto LABEL_92;
      }
      else if (v63 != 9)
      {
        turi::apply_binary_op_ff();
      }
      goto LABEL_132;
    case 9:
      v10 = a2[12];
      if (v10 < 9)
        goto LABEL_132;
      if (v10 != 9)
        turi::apply_binary_op_ff();
      v11 = turi::FLEX_UNDEFINED;
      v12 = *(_QWORD **)a2;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)a2)
        goto LABEL_92;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v12 + 1), turi::FLEX_UNDEFINED + 8))
        goto LABEL_132;
      v14 = (char *)v12[3];
      v13 = (char *)v12[4];
      v15 = v13 - v14;
      if (v13 == v14)
        goto LABEL_92;
      if (!v12[1])
        goto LABEL_92;
      v16 = 1;
      do
      {
        v17 = *(_QWORD *)v14;
        v14 += 8;
        v16 *= v17;
      }
      while (v14 != v13);
      if (!v16)
        goto LABEL_92;
      v253 = 0;
      std::vector<unsigned long>::vector(&v251, v15 >> 3, &v253);
      v18 = v251;
      v19 = (void **)&v252->__vftable;
      v20 = **(_QWORD **)(v11 + 8);
      v21 = (char *)v252 - (char *)v251;
      v22 = ((char *)v252 - (char *)v251) >> 3;
      v23 = v22 - 1;
      if (v22 <= 1)
        v24 = 1;
      else
        v24 = ((char *)v252 - (char *)v251) >> 3;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v19 == v18)
    {
      v32 = 0;
      v33 = *(double *)(*(_QWORD *)v12[1] + 8 * v12[9]);
    }
    else
    {
      v25 = 0;
      v26 = (uint64_t *)v12[6];
      v27 = v18;
      v28 = v24;
      do
      {
        v30 = (uint64_t)*v27++;
        v29 = v30;
        v31 = *v26++;
        v25 += v31 * v29;
        --v28;
      }
      while (v28);
      v32 = 0;
      v33 = *(double *)(*(_QWORD *)v12[1] + 8 * (v12[9] + v25));
      v34 = *(uint64_t **)(v11 + 48);
      v35 = v18;
      v36 = v24;
      do
      {
        v38 = (uint64_t)*v35++;
        v37 = v38;
        v39 = *v34++;
        v32 += v39 * v37;
        --v36;
      }
      while (v36);
    }
    v40 = *(double *)(v20 + 8 * (*(_QWORD *)(v11 + 72) + v32));
    if (v33 != v40)
      break;
    v41 = v22;
    v42 = v22 - 1;
    if (v21 >= 1)
    {
      v43 = v12[3];
      v44 = (unint64_t)v18[v23] + 1;
      v18[v23] = (void *)v44;
      v45 = (v21 & 0xFFFFFFFFFFFFFFF8) - 16;
      v42 = v22 - 1;
      if (v44 >= *(_QWORD *)(v43 + 8 * v23))
      {
        while (1)
        {
          *(void **)((char *)v18 + v45 + 8) = 0;
          if (v42 <= 0)
            break;
          --v42;
          v46 = *(unint64_t *)((char *)v18 + v45) + 1;
          *(void **)((char *)v18 + v45) = (void *)v46;
          v47 = *(_QWORD *)(v43 + v45);
          v45 -= 8;
          if (v46 < v47)
          {
            v41 = 1;
            goto LABEL_35;
          }
        }
        v252 = (std::__shared_weak_count *)v18;
        operator delete(v18);
        goto LABEL_92;
      }
      v41 = 1;
      v42 = v22 - 1;
    }
LABEL_35:
    ;
  }
  while ((v42 & 0x8000000000000000) == 0 && v41);
  if (v18)
  {
    v252 = (std::__shared_weak_count *)v18;
    v48 = v33;
    v49 = v40;
    operator delete(v18);
    if (v48 != v49)
      goto LABEL_132;
  }
  else
  {
LABEL_87:
    if (v33 != v40)
      goto LABEL_132;
  }
LABEL_92:
  switch(a2[12])
  {
    case 2u:
      v65 = *(unint64_t **)a2;
      do
      {
        v66 = __ldaxr(v65);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v65));
      if (!v67)
      {
        v68 = *(double *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_130;
        if (*(char *)(*(_QWORD *)&v68 + 31) < 0)
          operator delete(*(void **)(*(_QWORD *)&v68 + 8));
        v69 = v68;
        v70 = 0x1012C404EF22A49;
        goto LABEL_129;
      }
      break;
    case 3u:
      v79 = *(unint64_t **)a2;
      do
      {
        v80 = __ldaxr(v79);
        v81 = v80 - 1;
      }
      while (__stlxr(v81, v79));
      if (!v81)
      {
        v82 = *(double *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_130;
        v83 = *(void **)(*(_QWORD *)&v82 + 8);
        if (v83)
        {
          *(_QWORD *)(*(_QWORD *)&v82 + 16) = v83;
          operator delete(v83);
        }
        v69 = v82;
        v70 = 0x1080C409938AC02;
        goto LABEL_129;
      }
      break;
    case 4u:
      v71 = *(unint64_t **)a2;
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        v74 = *(double *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_130;
        v251 = (void **)(*(_QWORD *)&v74 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v251);
        goto LABEL_122;
      }
      break;
    case 5u:
      v84 = *(unint64_t **)a2;
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v74 = *(double *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_130;
        v251 = (void **)(*(_QWORD *)&v74 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v251);
LABEL_122:
        v69 = v74;
        v70 = 0x1020C405E66F15BLL;
        goto LABEL_129;
      }
      break;
    case 8u:
      v87 = *(unint64_t **)a2;
      do
      {
        v88 = __ldaxr(v87);
        v89 = v88 - 1;
      }
      while (__stlxr(v89, v87));
      if (!v89)
      {
        v90 = *(double *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_130;
        boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v90 + 16));
        v69 = v90;
        v78 = -235920773;
        goto LABEL_128;
      }
      break;
    case 9u:
      v75 = *(unint64_t **)a2;
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        if (*(_QWORD *)a2)
        {
          v69 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a2));
          v78 = 2071181815;
LABEL_128:
          v70 = v78 | 0x1030C4000000000;
LABEL_129:
          MEMORY[0x219A19A08](*(_QWORD *)&v69, v70);
        }
LABEL_130:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)a2 + 2) = 0;
  a2[12] = 1;
  *(_QWORD *)a2 = 0x7FF8000000000000;
LABEL_132:
  switch(byte_254FEE1C4)
  {
    case 0:
      switch(a3[12])
      {
        case 0u:
          if (*(_QWORD *)a3 != turi::FLEX_UNDEFINED)
            goto LABEL_263;
          goto LABEL_223;
        case 1u:
          v116 = *(double *)a3;
          v143 = turi::FLEX_UNDEFINED;
          goto LABEL_217;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_263;
        case 6u:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)a3 << 8) >> 8 && !*((_DWORD *)a3 + 2))
            goto LABEL_223;
          goto LABEL_263;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(a3[12])
      {
        case 0u:
          v116 = *(double *)&turi::FLEX_UNDEFINED;
          v143 = *(_QWORD *)a3;
LABEL_217:
          v123 = (double)v143;
          goto LABEL_218;
        case 1u:
          v116 = *(double *)a3;
          v123 = *(double *)&turi::FLEX_UNDEFINED;
          goto LABEL_218;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_263;
        case 6u:
          v146 = vabdd_f64((double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_222;
        default:
          turi::apply_binary_op_ff();
      }
    case 2:
      v133 = a3[12];
      if (v133 - 3 < 7 || v133 < 2)
        goto LABEL_263;
      if (v133 != 2)
        turi::apply_binary_op_ff();
      v135 = *(double *)a3;
      v136 = *(char *)(*(_QWORD *)a3 + 31) < 0
           ? *(_QWORD *)(*(_QWORD *)&v135 + 16)
           : *(unsigned __int8 *)(*(_QWORD *)a3 + 31);
      v245 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
           ? *(_QWORD *)(turi::FLEX_UNDEFINED + 16)
           : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v136 != v245)
        goto LABEL_263;
      v246 = (unsigned __int8 *)(*(_QWORD *)&v135 + 8);
      if ((*(_BYTE *)(*(_QWORD *)a3 + 31) & 0x80) != 0)
        v246 = *(unsigned __int8 **)v246;
      v247 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        v247 = *(unsigned __int8 **)v247;
      if ((*(_BYTE *)(*(_QWORD *)a3 + 31) & 0x80) != 0)
      {
        if (memcmp(v246, v247, v136))
          goto LABEL_263;
      }
      else
      {
        if (!v136)
          goto LABEL_223;
        do
        {
          if (*v246 != *v247)
            goto LABEL_263;
          ++v246;
          ++v247;
          --v136;
        }
        while (v136);
      }
      goto LABEL_223;
    case 3:
      v137 = a3[12];
      if (v137 > 9)
        turi::apply_binary_op_ff();
      if (v137 != 3)
        goto LABEL_263;
      v138 = *(double **)(*(_QWORD *)a3 + 8);
      v139 = *(double **)(*(_QWORD *)a3 + 16);
      v140 = v139 - v138;
      v141 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v140 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v141) >> 3)
        goto LABEL_263;
      if (v139 == v138)
        goto LABEL_223;
      if (v140 <= 1)
        v140 = 1;
      while (*v138 == *v141)
      {
        ++v141;
        ++v138;
        if (!--v140)
          goto LABEL_223;
      }
      goto LABEL_263;
    case 4:
      v91 = a3[12];
      if (v91 > 9)
        turi::apply_binary_op_ff();
      if (v91 != 4)
        goto LABEL_263;
      v92 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v250, (uint64_t *)(*(_QWORD *)a3 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
      goto LABEL_197;
    case 5:
      v144 = a3[12];
      if (v144 > 9)
        turi::apply_binary_op_ff();
      if (v144 != 5)
        goto LABEL_263;
      v92 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v250, (uint64_t **)(*(_QWORD *)a3 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
LABEL_197:
      if ((v92 & 1) == 0)
        goto LABEL_263;
      goto LABEL_223;
    case 6:
      switch(a3[12])
      {
        case 0u:
          if (*(_QWORD *)a3 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FEE1C0)
            goto LABEL_223;
          goto LABEL_263;
        case 1u:
          v146 = vabdd_f64(*(double *)a3, (double)dword_254FEE1C0 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_222:
          if (v146 < 0.0000005)
            goto LABEL_223;
          goto LABEL_263;
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 7u:
        case 8u:
        case 9u:
          goto LABEL_263;
        case 6u:
          if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)a3) & 0xFFFFFFFFFFFFFFLL) != 0
            || *((_DWORD *)a3 + 2) != dword_254FEE1C0)
          {
            goto LABEL_263;
          }
          goto LABEL_223;
        default:
          turi::apply_binary_op_ff();
      }
    case 7:
      v142 = a3[12];
      if (v142 < 7 || v142 - 8 < 2)
        goto LABEL_263;
      if (v142 != 7)
        turi::apply_binary_op_ff();
      goto LABEL_223;
    case 8:
      v145 = a3[12];
      if (v145 < 8)
        goto LABEL_263;
      if (v145 == 8)
      {
        if (turi::image_type::operator==(*(_QWORD *)a3 + 8, turi::FLEX_UNDEFINED + 8))
          goto LABEL_223;
      }
      else if (v145 != 9)
      {
        turi::apply_binary_op_ff();
      }
      goto LABEL_263;
    case 9:
      v93 = a3[12];
      if (v93 < 9)
        goto LABEL_263;
      if (v93 != 9)
        turi::apply_binary_op_ff();
      v94 = turi::FLEX_UNDEFINED;
      v95 = *(_QWORD **)a3;
      if (turi::FLEX_UNDEFINED == *(_QWORD *)a3)
        goto LABEL_223;
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v95 + 1), turi::FLEX_UNDEFINED + 8))
        goto LABEL_263;
      v97 = (char *)v95[3];
      v96 = (char *)v95[4];
      v98 = v96 - v97;
      if (v96 == v97)
        goto LABEL_223;
      if (!v95[1])
        goto LABEL_223;
      v99 = 1;
      do
      {
        v100 = *(_QWORD *)v97;
        v97 += 8;
        v99 *= v100;
      }
      while (v97 != v96);
      if (!v99)
        goto LABEL_223;
      v253 = 0;
      std::vector<unsigned long>::vector(&v251, v98 >> 3, &v253);
      v101 = v251;
      v102 = (void **)&v252->__vftable;
      v103 = **(_QWORD **)(v94 + 8);
      v104 = (char *)v252 - (char *)v251;
      v105 = ((char *)v252 - (char *)v251) >> 3;
      v106 = v105 - 1;
      if (v105 <= 1)
        v107 = 1;
      else
        v107 = ((char *)v252 - (char *)v251) >> 3;
      break;
    default:
      turi::apply_binary_op_ff();
  }
  do
  {
    if (v102 == v101)
    {
      v115 = 0;
      v116 = *(double *)(*(_QWORD *)v95[1] + 8 * v95[9]);
    }
    else
    {
      v108 = 0;
      v109 = (uint64_t *)v95[6];
      v110 = v101;
      v111 = v107;
      do
      {
        v113 = (uint64_t)*v110++;
        v112 = v113;
        v114 = *v109++;
        v108 += v114 * v112;
        --v111;
      }
      while (v111);
      v115 = 0;
      v116 = *(double *)(*(_QWORD *)v95[1] + 8 * (v95[9] + v108));
      v117 = *(uint64_t **)(v94 + 48);
      v118 = v101;
      v119 = v107;
      do
      {
        v121 = (uint64_t)*v118++;
        v120 = v121;
        v122 = *v117++;
        v115 += v122 * v120;
        --v119;
      }
      while (v119);
    }
    v123 = *(double *)(v103 + 8 * (*(_QWORD *)(v94 + 72) + v115));
    if (v116 != v123)
      break;
    v124 = v105;
    v125 = v105 - 1;
    if (v104 >= 1)
    {
      v126 = v95[3];
      v127 = (unint64_t)v101[v106] + 1;
      v101[v106] = (void *)v127;
      v128 = (v104 & 0xFFFFFFFFFFFFFFF8) - 16;
      v125 = v105 - 1;
      if (v127 >= *(_QWORD *)(v126 + 8 * v106))
      {
        while (1)
        {
          *(void **)((char *)v101 + v128 + 8) = 0;
          if (v125 <= 0)
            break;
          --v125;
          v129 = *(unint64_t *)((char *)v101 + v128) + 1;
          *(void **)((char *)v101 + v128) = (void *)v129;
          v130 = *(_QWORD *)(v126 + v128);
          v128 -= 8;
          if (v129 < v130)
          {
            v124 = 1;
            goto LABEL_166;
          }
        }
        v252 = (std::__shared_weak_count *)v101;
        operator delete(v101);
        goto LABEL_223;
      }
      v124 = 1;
      v125 = v105 - 1;
    }
LABEL_166:
    ;
  }
  while ((v125 & 0x8000000000000000) == 0 && v124);
  if (v101)
  {
    v252 = (std::__shared_weak_count *)v101;
    v131 = v116;
    v132 = v123;
    operator delete(v101);
    if (v131 != v132)
      goto LABEL_263;
  }
  else
  {
LABEL_218:
    if (v116 != v123)
      goto LABEL_263;
  }
LABEL_223:
  switch(a3[12])
  {
    case 2u:
      v147 = *(unint64_t **)a3;
      do
      {
        v148 = __ldaxr(v147);
        v149 = v148 - 1;
      }
      while (__stlxr(v149, v147));
      if (!v149)
      {
        v150 = *(double *)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_261;
        if (*(char *)(*(_QWORD *)&v150 + 31) < 0)
          operator delete(*(void **)(*(_QWORD *)&v150 + 8));
        v151 = v150;
        v152 = 0x1012C404EF22A49;
        goto LABEL_260;
      }
      break;
    case 3u:
      v161 = *(unint64_t **)a3;
      do
      {
        v162 = __ldaxr(v161);
        v163 = v162 - 1;
      }
      while (__stlxr(v163, v161));
      if (!v163)
      {
        v164 = *(double *)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_261;
        v165 = *(void **)(*(_QWORD *)&v164 + 8);
        if (v165)
        {
          *(_QWORD *)(*(_QWORD *)&v164 + 16) = v165;
          operator delete(v165);
        }
        v151 = v164;
        v152 = 0x1080C409938AC02;
        goto LABEL_260;
      }
      break;
    case 4u:
      v153 = *(unint64_t **)a3;
      do
      {
        v154 = __ldaxr(v153);
        v155 = v154 - 1;
      }
      while (__stlxr(v155, v153));
      if (!v155)
      {
        v156 = *(double *)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_261;
        v251 = (void **)(*(_QWORD *)&v156 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v251);
        goto LABEL_253;
      }
      break;
    case 5u:
      v166 = *(unint64_t **)a3;
      do
      {
        v167 = __ldaxr(v166);
        v168 = v167 - 1;
      }
      while (__stlxr(v168, v166));
      if (!v168)
      {
        v156 = *(double *)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_261;
        v251 = (void **)(*(_QWORD *)&v156 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v251);
LABEL_253:
        v151 = v156;
        v152 = 0x1020C405E66F15BLL;
        goto LABEL_260;
      }
      break;
    case 8u:
      v169 = *(unint64_t **)a3;
      do
      {
        v170 = __ldaxr(v169);
        v171 = v170 - 1;
      }
      while (__stlxr(v171, v169));
      if (!v171)
      {
        v172 = *(double *)a3;
        if (!*(_QWORD *)a3)
          goto LABEL_261;
        boost::detail::shared_count::~shared_count((unsigned int **)(*(_QWORD *)&v172 + 16));
        v151 = v172;
        v160 = -235920773;
        goto LABEL_259;
      }
      break;
    case 9u:
      v157 = *(unint64_t **)a3;
      do
      {
        v158 = __ldaxr(v157);
        v159 = v158 - 1;
      }
      while (__stlxr(v159, v157));
      if (!v159)
      {
        if (*(_QWORD *)a3)
        {
          v151 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(_QWORD **)a3));
          v160 = 2071181815;
LABEL_259:
          v152 = v160 | 0x1030C4000000000;
LABEL_260:
          MEMORY[0x219A19A08](*(_QWORD *)&v151, v152);
        }
LABEL_261:
        *(_QWORD *)a3 = 0;
      }
      break;
    default:
      break;
  }
  *((_DWORD *)a3 + 2) = 0;
  a3[12] = 1;
  *(_QWORD *)a3 = 0x7FF8000000000000;
LABEL_263:
  (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v251, a1);
  v173 = v251;
  memset(v255, 0, 13);
  if (v255 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v255 + 5) = *(_QWORD *)(a2 + 5);
    v255[0] = *(_QWORD *)a2;
    BYTE4(v255[1]) = a2[12];
    if (BYTE4(v255[1]) <= 9u && ((1 << SBYTE4(v255[1])) & 0x33C) != 0)
    {
      v174 = (unint64_t *)v255[0];
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 + 1, v174));
    }
  }
  memset(v254, 0, 13);
  if (v254 != (_QWORD *)a3)
  {
    *(_QWORD *)((char *)v254 + 5) = *(_QWORD *)(a3 + 5);
    v254[0] = *(_QWORD *)a3;
    BYTE4(v254[1]) = a3[12];
    if (BYTE4(v254[1]) <= 9u && ((1 << SBYTE4(v254[1])) & 0x33C) != 0)
    {
      v176 = (unint64_t *)v254[0];
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 + 1, v176));
    }
  }
  (*((void (**)(uint64_t *__return_ptr, void **, _QWORD *, _QWORD *))*v173 + 42))(&v248, v173, v255, v254);
  turi::gl_sarray::gl_sarray(a4, (uint64_t)&v248);
  v178 = v249;
  if (v249)
  {
    p_shared_owners = (unint64_t *)&v249->__shared_owners_;
    do
      v180 = __ldaxr(p_shared_owners);
    while (__stlxr(v180 - 1, p_shared_owners));
    if (!v180)
    {
      ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
      std::__shared_weak_count::__release_weak(v178);
    }
  }
  switch(BYTE4(v254[1]))
  {
    case 2:
      v181 = (unint64_t *)v254[0];
      do
      {
        v182 = __ldaxr(v181);
        v183 = v182 - 1;
      }
      while (__stlxr(v183, v181));
      if (!v183)
      {
        v184 = v254[0];
        if (v254[0])
        {
          if (*(char *)(v254[0] + 31) < 0)
            operator delete(*(void **)(v254[0] + 8));
          v185 = v184;
          v186 = 0x1012C404EF22A49;
          goto LABEL_319;
        }
      }
      break;
    case 3:
      v198 = (unint64_t *)v254[0];
      do
      {
        v199 = __ldaxr(v198);
        v200 = v199 - 1;
      }
      while (__stlxr(v200, v198));
      if (!v200)
      {
        v201 = v254[0];
        if (v254[0])
        {
          v202 = *(void **)(v254[0] + 8);
          if (v202)
          {
            *(_QWORD *)(v254[0] + 16) = v202;
            operator delete(v202);
          }
          v185 = v201;
          v186 = 0x1080C409938AC02;
          goto LABEL_319;
        }
      }
      break;
    case 4:
      v187 = (unint64_t *)v254[0];
      do
      {
        v188 = __ldaxr(v187);
        v189 = v188 - 1;
      }
      while (__stlxr(v189, v187));
      if (!v189)
      {
        v190 = v254[0];
        if (v254[0])
        {
          v253 = (void **)(v254[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v253);
          goto LABEL_312;
        }
      }
      break;
    case 5:
      v203 = (unint64_t *)v254[0];
      do
      {
        v204 = __ldaxr(v203);
        v205 = v204 - 1;
      }
      while (__stlxr(v205, v203));
      if (!v205)
      {
        v190 = v254[0];
        if (v254[0])
        {
          v253 = (void **)(v254[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v253);
LABEL_312:
          v185 = v190;
          v186 = 0x1020C405E66F15BLL;
          goto LABEL_319;
        }
      }
      break;
    case 8:
      v206 = (unint64_t *)v254[0];
      do
      {
        v207 = __ldaxr(v206);
        v208 = v207 - 1;
      }
      while (__stlxr(v208, v206));
      if (!v208)
      {
        v209 = v254[0];
        if (v254[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v254[0] + 16));
          v185 = v209;
          v197 = -235920773;
          goto LABEL_318;
        }
      }
      break;
    case 9:
      v191 = (unint64_t *)v254[0];
      do
      {
        v192 = __ldaxr(v191);
        v193 = v192 - 1;
      }
      while (__stlxr(v193, v191));
      if (!v193)
      {
        v194 = v254[0];
        if (v254[0])
        {
          v195 = *(void **)(v254[0] + 48);
          if (v195)
          {
            *(_QWORD *)(v254[0] + 56) = v195;
            operator delete(v195);
          }
          v196 = *(void **)(v194 + 24);
          if (v196)
          {
            *(_QWORD *)(v194 + 32) = v196;
            operator delete(v196);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v194 + 8);
          v185 = v194;
          v197 = 2071181815;
LABEL_318:
          v186 = v197 | 0x1030C4000000000;
LABEL_319:
          MEMORY[0x219A19A08](v185, v186);
        }
      }
      break;
    default:
      break;
  }
  memset(v254, 0, 13);
  switch(BYTE4(v255[1]))
  {
    case 2:
      v210 = (unint64_t *)v255[0];
      do
      {
        v211 = __ldaxr(v210);
        v212 = v211 - 1;
      }
      while (__stlxr(v212, v210));
      if (!v212)
      {
        v213 = v255[0];
        if (v255[0])
        {
          if (*(char *)(v255[0] + 31) < 0)
            operator delete(*(void **)(v255[0] + 8));
          v214 = v213;
          v215 = 0x1012C404EF22A49;
          goto LABEL_361;
        }
      }
      break;
    case 3:
      v227 = (unint64_t *)v255[0];
      do
      {
        v228 = __ldaxr(v227);
        v229 = v228 - 1;
      }
      while (__stlxr(v229, v227));
      if (!v229)
      {
        v230 = v255[0];
        if (v255[0])
        {
          v231 = *(void **)(v255[0] + 8);
          if (v231)
          {
            *(_QWORD *)(v255[0] + 16) = v231;
            operator delete(v231);
          }
          v214 = v230;
          v215 = 0x1080C409938AC02;
          goto LABEL_361;
        }
      }
      break;
    case 4:
      v216 = (unint64_t *)v255[0];
      do
      {
        v217 = __ldaxr(v216);
        v218 = v217 - 1;
      }
      while (__stlxr(v218, v216));
      if (!v218)
      {
        v219 = v255[0];
        if (v255[0])
        {
          v253 = (void **)(v255[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v253);
          goto LABEL_354;
        }
      }
      break;
    case 5:
      v232 = (unint64_t *)v255[0];
      do
      {
        v233 = __ldaxr(v232);
        v234 = v233 - 1;
      }
      while (__stlxr(v234, v232));
      if (!v234)
      {
        v219 = v255[0];
        if (v255[0])
        {
          v253 = (void **)(v255[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v253);
LABEL_354:
          v214 = v219;
          v215 = 0x1020C405E66F15BLL;
          goto LABEL_361;
        }
      }
      break;
    case 8:
      v235 = (unint64_t *)v255[0];
      do
      {
        v236 = __ldaxr(v235);
        v237 = v236 - 1;
      }
      while (__stlxr(v237, v235));
      if (!v237)
      {
        v238 = v255[0];
        if (v255[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v255[0] + 16));
          v214 = v238;
          v226 = -235920773;
          goto LABEL_360;
        }
      }
      break;
    case 9:
      v220 = (unint64_t *)v255[0];
      do
      {
        v221 = __ldaxr(v220);
        v222 = v221 - 1;
      }
      while (__stlxr(v222, v220));
      if (!v222)
      {
        v223 = v255[0];
        if (v255[0])
        {
          v224 = *(void **)(v255[0] + 48);
          if (v224)
          {
            *(_QWORD *)(v255[0] + 56) = v224;
            operator delete(v224);
          }
          v225 = *(void **)(v223 + 24);
          if (v225)
          {
            *(_QWORD *)(v223 + 32) = v225;
            operator delete(v225);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v223 + 8);
          v214 = v223;
          v226 = 2071181815;
LABEL_360:
          v215 = v226 | 0x1030C4000000000;
LABEL_361:
          MEMORY[0x219A19A08](v214, v215);
        }
      }
      break;
    default:
      break;
  }
  memset(v255, 0, 13);
  v239 = v252;
  if (v252)
  {
    v240 = (unint64_t *)&v252->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
}

void sub_217F953C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15, unint64_t *a16, int a17, char a18, _QWORD *a19, int a20,char a21)
{
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;

  switch(a18)
  {
    case 2:
      turi::gl_sarray::clip(&a16);
      break;
    case 3:
      turi::gl_sarray::clip(&a16);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a16);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a16);
      break;
    case 8:
      turi::gl_sarray::clip(&a16);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a16);
      break;
    default:
      break;
  }
  a16 = 0;
  a17 = 0;
  a18 = 0;
  switch(a21)
  {
    case 2:
      v22 = a19;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (v24)
        goto LABEL_46;
      v25 = a19;
      if (!a19)
        goto LABEL_46;
      if (*((char *)a19 + 31) < 0)
        operator delete((void *)a19[1]);
      v26 = v25;
      v27 = 0x1012C404EF22A49;
      goto LABEL_45;
    case 3:
      v36 = a19;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (v38)
        goto LABEL_46;
      v39 = a19;
      if (!a19)
        goto LABEL_46;
      v40 = (void *)a19[1];
      if (v40)
      {
        a19[2] = v40;
        operator delete(v40);
      }
      v26 = v39;
      v27 = 0x1080C409938AC02;
      goto LABEL_45;
    case 4:
      v28 = a19;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (v30)
        goto LABEL_46;
      v31 = a19;
      if (!a19)
        goto LABEL_46;
      a15 = (void **)(a19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a15);
      goto LABEL_38;
    case 5:
      v41 = a19;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (v43)
        goto LABEL_46;
      v31 = a19;
      if (!a19)
        goto LABEL_46;
      a15 = (void **)(a19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a15);
LABEL_38:
      v26 = v31;
      v27 = 0x1020C405E66F15BLL;
      goto LABEL_45;
    case 8:
      v44 = a19;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (v46)
        goto LABEL_46;
      v47 = a19;
      if (!a19)
        goto LABEL_46;
      boost::detail::shared_count::~shared_count((unsigned int **)a19 + 2);
      v26 = v47;
      v35 = -235920773;
      goto LABEL_44;
    case 9:
      v32 = a19;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34 || !a19)
        goto LABEL_46;
      v26 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a19);
      v35 = 2071181815;
LABEL_44:
      v27 = v35 | 0x1030C4000000000;
LABEL_45:
      MEMORY[0x219A19A08](v26, v27);
LABEL_46:
      a19 = 0;
      a20 = 0;
      a21 = 0;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_46;
  }
}

void turi::gl_sarray::dropna(turi::gl_sarray *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v9);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v9 + 320))(&v11);
  turi::gl_sarray::gl_sarray(a2, (uint64_t)&v11);
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_217F956D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::fillna(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void **v47;
  _QWORD v48[3];

  v48[2] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v43);
  v5 = v43;
  memset(v48, 0, 13);
  if (v48 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v48 + 5) = *(_QWORD *)(a2 + 5);
    v48[0] = *(_QWORD *)a2;
    BYTE4(v48[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v48[1]) <= 9u && ((1 << SBYTE4(v48[1])) & 0x33C) != 0)
    {
      v6 = (unint64_t *)v48[0];
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v5 + 328))(&v45, v5, v48);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v45);
  v8 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  switch(BYTE4(v48[1]))
  {
    case 2:
      v11 = (unint64_t *)v48[0];
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = v48[0];
        if (v48[0])
        {
          if (*(char *)(v48[0] + 31) < 0)
            operator delete(*(void **)(v48[0] + 8));
          v15 = v14;
          v16 = 0x1012C404EF22A49;
          goto LABEL_52;
        }
      }
      break;
    case 3:
      v17 = (unint64_t *)v48[0];
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v20 = v48[0];
        if (v48[0])
        {
          v21 = *(void **)(v48[0] + 8);
          if (v21)
          {
            *(_QWORD *)(v48[0] + 16) = v21;
            operator delete(v21);
          }
          v15 = v20;
          v16 = 0x1080C409938AC02;
          goto LABEL_52;
        }
      }
      break;
    case 4:
      v22 = (unint64_t *)v48[0];
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v25 = v48[0];
        if (v48[0])
        {
          v47 = (void **)(v48[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v47);
          goto LABEL_36;
        }
      }
      break;
    case 5:
      v26 = (unint64_t *)v48[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v25 = v48[0];
        if (v48[0])
        {
          v47 = (void **)(v48[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v47);
LABEL_36:
          v15 = v25;
          v16 = 0x1020C405E66F15BLL;
          goto LABEL_52;
        }
      }
      break;
    case 8:
      v36 = (unint64_t *)v48[0];
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = v48[0];
        if (v48[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v48[0] + 16));
          v15 = v39;
          v35 = -235920773;
          goto LABEL_51;
        }
      }
      break;
    case 9:
      v29 = (unint64_t *)v48[0];
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = v48[0];
        if (v48[0])
        {
          v33 = *(void **)(v48[0] + 48);
          if (v33)
          {
            *(_QWORD *)(v48[0] + 56) = v33;
            operator delete(v33);
          }
          v34 = *(void **)(v32 + 24);
          if (v34)
          {
            *(_QWORD *)(v32 + 32) = v34;
            operator delete(v34);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v32 + 8);
          v15 = v32;
          v35 = 2071181815;
LABEL_51:
          v16 = v35 | 0x1030C4000000000;
LABEL_52:
          MEMORY[0x219A19A08](v15, v16);
        }
      }
      break;
    default:
      break;
  }
  memset(v48, 0, 13);
  v40 = v44;
  if (v44)
  {
    v41 = (unint64_t *)&v44->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_217F95A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, int a15, char a16)
{
  switch(a16)
  {
    case 2:
      turi::gl_sarray::clip(&a14);
      break;
    case 3:
      turi::gl_sarray::clip(&a14);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a14);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a14);
      break;
    case 8:
      turi::gl_sarray::clip(&a14);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a14);
      break;
    default:
      break;
  }
  a14 = 0;
  a15 = 0;
  a16 = 0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::topk_index(turi::gl_sarray *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 176))(&v15, v13, a2, a3);
  turi::gl_sarray::gl_sarray(a4, (uint64_t)&v15);
  v7 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_217F95B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::append(turi::gl_sarray *this@<X0>, const turi::gl_sarray *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 16))(&v20);
  v5 = v20;
  (*(void (**)(__int128 *__return_ptr, const turi::gl_sarray *))(*(_QWORD *)a2 + 16))(&v18, a2);
  v19 = v18;
  v18 = 0uLL;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v5 + 408))(&v22, v5, &v19);
  turi::gl_sarray::gl_sarray(a3, (uint64_t)&v22);
  v6 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_217F95D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::unique(turi::gl_sarray *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::string **v9;
  _QWORD *v10[2];
  std::string *v11;
  std::string *v12;
  const void **p_data;
  _QWORD v14[2];
  std::__shared_weak_count *v15;
  void *v16[2];
  char v17;
  __int128 __p;
  std::__shared_weak_count *v19;
  void (**v20)(turi::gl_sarray *__hidden);
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[2],turi::gl_sarray const&,0>(&__p, "a", this);
  turi::gl_sframe::gl_sframe(v14, &__p, 1);
  v20 = &off_24D91E0A8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v22);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v21);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(v16, "a");
  v11 = 0;
  v12 = 0;
  p_data = 0;
  v11 = (std::string *)operator new(0x18uLL);
  v12 = v11;
  p_data = (const void **)&v11[1].__r_.__value_.__l.__data_;
  v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)v16, &__p, v11);
  v10[0] = 0;
  v10[1] = 0;
  v9 = (std::string **)v10;
  turi::gl_sframe::groupby((uint64_t)v14, (const void ***)&v11, &v9, &__p);
  turi::gl_sframe::operator=((uint64_t)v14, (uint64_t)&__p);
  *(_QWORD *)&__p = off_24D91E9C0;
  v3 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::__tree<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::aggregate::groupby_descriptor_type>>>::destroy((uint64_t)&v9, v10[0]);
  v9 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "a");
  turi::gl_sframe::select_column((uint64_t)v14, (uint64_t)&__p, a2);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  v14[0] = off_24D91E9C0;
  v6 = v15;
  if (v15)
  {
    v7 = (unint64_t *)&v15->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_217F95F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_217F95FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::pair<std::string,turi::gl_sarray>::~pair((uint64_t)va);
  JUMPOUT(0x217F95FE8);
}

void sub_217F96000()
{
  JUMPOUT(0x217F95FE8);
}

uint64_t std::pair<std::string,turi::gl_sarray>::~pair(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &off_24D91E0A8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 32);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void turi::gl_sarray::split_datetime(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  std::string *v9;
  std::vector<std::string>::pointer end;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  uint64_t i;
  const std::string *begin;
  const std::string *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *exception;
  __int128 **v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 *v37[3];
  void *__p[2];
  std::string::size_type v39;
  std::vector<std::string> v40;
  std::__split_buffer<std::string> __v;
  char v42;
  _QWORD v43[3];
  char v44;
  _QWORD v45[3];
  char v46;
  _QWORD v47[3];
  char v48;
  _QWORD v49[3];
  char v50;
  _QWORD v51[3];
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  memset(&v40, 0, sizeof(v40));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v40, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  if (a4)
  {
    v9 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,char [9],std::__identity>((unsigned __int8 *)v40.__begin_, (unsigned __int8 *)v40.__end_, "timezone");
    if (v9 == v40.__end_)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "timezone");
      end = v40.__end_;
      if (v40.__end_ >= v40.__end_cap_.__value_)
      {
        v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_ - (char *)v40.__begin_) >> 3);
        v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3) > v13)
          v13 = 0x5555555555555556 * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3) >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v13;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v40.__end_cap_;
        if (v14)
          v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v40.__end_cap_, v14);
        else
          v15 = 0;
        v16 = v15 + v12;
        __v.__first_ = v15;
        __v.__begin_ = v16;
        __v.__end_cap_.__value_ = &v15[v14];
        v17 = *(_OWORD *)__p;
        v16->__r_.__value_.__r.__words[2] = v39;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
        __p[1] = 0;
        v39 = 0;
        __p[0] = 0;
        __v.__end_ = v16 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v40, &__v);
        v18 = v40.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v40.__end_ = v18;
        if (SHIBYTE(v39) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v11 = *(_OWORD *)__p;
        v40.__end_->__r_.__value_.__r.__words[2] = v39;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
        v40.__end_ = end + 1;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "year");
  LOBYTE(__v.__end_cap_.__value_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__v.__end_cap_.__value_, "month");
  v42 = 0;
  std::string::basic_string[abi:ne180100]<0>(v43, "day");
  v44 = 0;
  std::string::basic_string[abi:ne180100]<0>(v45, "hour");
  v46 = 0;
  std::string::basic_string[abi:ne180100]<0>(v47, "minute");
  v48 = 0;
  std::string::basic_string[abi:ne180100]<0>(v49, "second");
  v50 = 0;
  std::string::basic_string[abi:ne180100]<0>(v51, "timezone");
  v52 = 1;
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)__p, (const void **)&__v.__first_, 7);
  for (i = 0; i != -28; i -= 4)
  {
    if (SHIBYTE(v51[i + 2]) < 0)
      operator delete((void *)v51[i]);
  }
  std::vector<turi::flex_type_enum>::vector(&__v, 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_ - (char *)v40.__begin_) >> 3));
  begin = v40.__begin_;
  v21 = v40.__end_;
  if (v40.__end_ == v40.__begin_)
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_ - (char *)v40.__begin_) >> 3);
  }
  else
  {
    v22 = 0;
    v23 = 0;
    do
    {
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)__p, (const void **)&begin[v22].__r_.__value_.__l.__data_))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(exception, "Unrecognized date time limit specifier");
      }
      v37[0] = (__int128 *)&v40.__begin_[v22];
      v24 = std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)__p, (const void **)&v40.__begin_[v22].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v37);
      __v.__first_->__r_.__value_.__s.__data_[v23++] = *((_BYTE *)v24 + 56);
      begin = v40.__begin_;
      v21 = v40.__end_;
      v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_ - (char *)v40.__begin_) >> 3);
      ++v22;
    }
    while (v23 < v25);
  }
  memset(v37, 0, sizeof(v37));
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>((uint64_t *)v37, begin, v21, v25);
  (*(void (**)(__int128 ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v33, a1);
  (*((void (**)(uint64_t *__return_ptr, __int128 **, uint64_t, __int128 **, std::__split_buffer<std::string> *))*v33
   + 63))(&v35, v33, a2, v37, &__v);
  turi::gl_sframe::gl_sframe(a5, &v35);
  v26 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v34;
  if (v34)
  {
    v30 = (unint64_t *)&v34->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v33 = v37;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  if (__v.__first_)
  {
    __v.__begin_ = __v.__first_;
    operator delete(__v.__first_);
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)__p, (char *)__p[1]);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_217F964F8(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__split_buffer<std::string> *a17, uint64_t a18, void *__pa, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a28);
  if (a24 < 0)
    operator delete(__pa);
  __pa = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::unpack(turi::gl_sarray *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X4>, uint64_t a6@<X8>)
{
  char *v11;
  char *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *exception;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t i;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::string::size_type v32;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::string::size_type v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::string::size_type v45;
  void *v46;
  void *v47;
  unsigned int v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::string::size_type v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  std::string::size_type v60;
  _QWORD *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  turi::gl_sarray *v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v75;
  std::string::size_type v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  std::string::size_type v80;
  std::string::size_type v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  std::string::size_type v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  std::string::size_type v90;
  void *v91;
  void *v92;
  unsigned int v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  std::string::size_type v97;
  void *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  std::string::size_type v105;
  unint64_t v106;
  uint64_t j;
  char *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  void *v123;
  void *v124;
  unsigned int v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  void *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  char v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  void *v161;
  void *v162;
  unsigned int v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  void *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  char **v181;
  char *v182;
  const std::string *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  __int128 v191;
  __int128 v192;
  unint64_t *v193;
  _QWORD *v194;
  unint64_t *v195;
  std::string *v196;
  __int128 v197;
  unint64_t *v198;
  unint64_t *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  void *v208;
  void *v209;
  unint64_t *v210;
  unsigned int v211;
  unint64_t *v212;
  unint64_t *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  unint64_t *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t *v223;
  uint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  unsigned int *v227;
  unsigned int v228;
  __int128 v229;
  __int128 v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  BOOL v238;
  int v239;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  char v244;
  char v245;
  char *v246;
  char *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  size_t v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  char v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *size;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *p_shared_owners;
  unint64_t v272;
  unint64_t *v273;
  std::runtime_error *v274;
  std::string *v275;
  __int128 v276;
  _QWORD *v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  turi::gl_sarray *v282;
  char *v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  uint64_t v288;
  _QWORD *v289;
  unint64_t v290;
  void *__p;
  _QWORD *v292;
  _QWORD *v293[2];
  std::__shared_weak_count *v294;
  std::__shared_weak_count *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  void *v299;
  char *v300;
  char *v301;
  void **v302;
  unsigned int *v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  std::string v307;
  size_t __idx;
  unint64_t *v309;
  char v310;
  std::string v311;
  std::string::size_type v312;
  std::__shared_weak_count *v313;
  void *v314;
  void *v315;
  uint64_t v316;

  v316 = *MEMORY[0x24BDAC8D0];
  v299 = 0;
  v300 = 0;
  v301 = 0;
  std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(&v299, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  v296 = 0;
  v297 = 0;
  v298 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v296, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  if (turi::gl_sarray::dtype(a1) != 5
    && turi::gl_sarray::dtype(a1) != 4
    && turi::gl_sarray::dtype(a1) != 3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Only SArray of dict/list/array type supports unpack");
    goto LABEL_420;
  }
  v12 = v296;
  v11 = v297;
  if (v297 == v296)
    goto LABEL_12;
  *(_OWORD *)&v311.__r_.__value_.__r.__words[1] = 0uLL;
  v311.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311.__r_.__value_.__l.__size_;
  do
  {
    LOBYTE(v302) = v12[12];
    std::__tree<turi::flex_type_enum>::__emplace_unique_key_args<turi::flex_type_enum,turi::flex_type_enum>((uint64_t **)&v311, (char *)&v302, &v302);
    v12 += 16;
  }
  while (v12 != v11);
  if (v311.__r_.__value_.__r.__words[2] != 1)
  {
    v278 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v278, "'limit' contains values that are different types");
    goto LABEL_417;
  }
  if (turi::gl_sarray::dtype(a1) != 5 && *(_BYTE *)(v311.__r_.__value_.__r.__words[0] + 25))
  {
    v278 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v278, "'limit' must contain integer values.");
LABEL_417:
  }
  std::set<turi::flexible_type>::set[abi:ne180100]<std::__wrap_iter<turi::flexible_type*>>((uint64_t)&v302, v296, v297, v13);
  v14 = v297 - v296;
  v15 = v304;
  std::__tree<turi::flexible_type>::destroy((uint64_t)&v302, v303);
  if (v15 != v14 >> 4)
  {
    v278 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v278, "'limit' contains duplicate values.");
    goto LABEL_417;
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v311, (_QWORD *)v311.__r_.__value_.__l.__size_);
LABEL_12:
  if (v300 != v299)
  {
    if (v297 != v296)
    {
      if (v300 - (_BYTE *)v299 != (v297 - v296) >> 4)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(exception, "limit and column_types do not have the same length");
        goto LABEL_420;
      }
LABEL_387:
      if (turi::gl_sarray::dtype(a1) == 5 && v300 == v299)
      {
        (*(void (**)(std::string *__return_ptr, turi::gl_sarray *))(*(_QWORD *)a1 + 16))(&v311, a1);
        (*(void (**)(uint64_t *__return_ptr, std::string::size_type, uint64_t, char **, uint64_t))(*(_QWORD *)v311.__r_.__value_.__l.__data_ + 496))(&v286, v311.__r_.__value_.__r.__words[0], a2, &v296, a4);
        turi::gl_sframe::gl_sframe(a6, &v286);
        v270 = v287;
        if (v287)
        {
          p_shared_owners = (unint64_t *)&v287->__shared_owners_;
          do
            v272 = __ldaxr(p_shared_owners);
          while (__stlxr(v272 - 1, p_shared_owners));
          if (!v272)
          {
            ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
            std::__shared_weak_count::__release_weak(v270);
          }
        }
        size = (std::__shared_weak_count *)v311.__r_.__value_.__l.__size_;
        if (!v311.__r_.__value_.__l.__size_)
          goto LABEL_408;
        v273 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
        do
          v269 = __ldaxr(v273);
        while (__stlxr(v269 - 1, v273));
      }
      else
      {
        (*(void (**)(std::string *__return_ptr, turi::gl_sarray *))(*(_QWORD *)a1 + 16))(&v311, a1);
        (*(void (**)(uint64_t *__return_ptr, std::string::size_type, uint64_t, char **, void **, uint64_t))(*(_QWORD *)v311.__r_.__value_.__l.__data_ + 512))(&v284, v311.__r_.__value_.__r.__words[0], a2, &v296, &v299, a4);
        turi::gl_sframe::gl_sframe(a6, &v284);
        v264 = v285;
        if (v285)
        {
          v265 = (unint64_t *)&v285->__shared_owners_;
          do
            v266 = __ldaxr(v265);
          while (__stlxr(v266 - 1, v265));
          if (!v266)
          {
            ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
            std::__shared_weak_count::__release_weak(v264);
          }
        }
        size = (std::__shared_weak_count *)v311.__r_.__value_.__l.__size_;
        if (!v311.__r_.__value_.__l.__size_)
          goto LABEL_408;
        v268 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
        do
          v269 = __ldaxr(v268);
        while (__stlxr(v269 - 1, v268));
      }
      if (!v269)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
LABEL_408:
      v311.__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
      if (v299)
      {
        v300 = (char *)v299;
        operator delete(v299);
      }
      return;
    }
    if (turi::gl_sarray::dtype(a1) != 5)
    {
      std::vector<turi::flexible_type>::reserve((uint64_t *)&v296, v300 - (_BYTE *)v299);
      if (v300 != v299)
      {
        v76 = 0;
        do
        {
          v311.__r_.__value_.__s.__data_[12] = 0;
          LODWORD(v311.__r_.__value_.__r.__words[1]) = 0;
          v311.__r_.__value_.__r.__words[0] = v76;
          std::vector<turi::flexible_type>::push_back[abi:ne180100]((uint64_t *)&v296, (uint64_t *)&v311);
          switch(v311.__r_.__value_.__s.__data_[12])
          {
            case 2:
              v77 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
              do
              {
                v78 = __ldaxr(v77);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, v77));
              if (!v79)
              {
                v80 = v311.__r_.__value_.__r.__words[0];
                if (v311.__r_.__value_.__r.__words[0])
                {
                  if (*(char *)(v311.__r_.__value_.__r.__words[0] + 31) < 0)
                    operator delete(*(void **)(v311.__r_.__value_.__r.__words[0] + 8));
                  v81 = v80;
                  v82 = 0x1012C404EF22A49;
                  goto LABEL_145;
                }
              }
              break;
            case 3:
              v94 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
              do
              {
                v95 = __ldaxr(v94);
                v96 = v95 - 1;
              }
              while (__stlxr(v96, v94));
              if (!v96)
              {
                v97 = v311.__r_.__value_.__r.__words[0];
                if (v311.__r_.__value_.__r.__words[0])
                {
                  v98 = *(void **)(v311.__r_.__value_.__r.__words[0] + 8);
                  if (v98)
                  {
                    *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 16) = v98;
                    operator delete(v98);
                  }
                  v81 = v97;
                  v82 = 0x1080C409938AC02;
                  goto LABEL_145;
                }
              }
              break;
            case 4:
              v83 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
              do
              {
                v84 = __ldaxr(v83);
                v85 = v84 - 1;
              }
              while (__stlxr(v85, v83));
              if (!v85)
              {
                v86 = v311.__r_.__value_.__r.__words[0];
                if (v311.__r_.__value_.__r.__words[0])
                {
                  v302 = (void **)(v311.__r_.__value_.__r.__words[0] + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v302);
                  goto LABEL_138;
                }
              }
              break;
            case 5:
              v99 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
              do
              {
                v100 = __ldaxr(v99);
                v101 = v100 - 1;
              }
              while (__stlxr(v101, v99));
              if (!v101)
              {
                v86 = v311.__r_.__value_.__r.__words[0];
                if (v311.__r_.__value_.__r.__words[0])
                {
                  v302 = (void **)(v311.__r_.__value_.__r.__words[0] + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v302);
LABEL_138:
                  v81 = v86;
                  v82 = 0x1020C405E66F15BLL;
                  goto LABEL_145;
                }
              }
              break;
            case 8:
              v102 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
              do
              {
                v103 = __ldaxr(v102);
                v104 = v103 - 1;
              }
              while (__stlxr(v104, v102));
              if (!v104)
              {
                v105 = v311.__r_.__value_.__r.__words[0];
                if (v311.__r_.__value_.__r.__words[0])
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)(v311.__r_.__value_.__r.__words[0] + 16));
                  v81 = v105;
                  v93 = -235920773;
                  goto LABEL_144;
                }
              }
              break;
            case 9:
              v87 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
              do
              {
                v88 = __ldaxr(v87);
                v89 = v88 - 1;
              }
              while (__stlxr(v89, v87));
              if (!v89)
              {
                v90 = v311.__r_.__value_.__r.__words[0];
                if (v311.__r_.__value_.__r.__words[0])
                {
                  v91 = *(void **)(v311.__r_.__value_.__r.__words[0] + 48);
                  if (v91)
                  {
                    *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 56) = v91;
                    operator delete(v91);
                  }
                  v92 = *(void **)(v90 + 24);
                  if (v92)
                  {
                    *(_QWORD *)(v90 + 32) = v92;
                    operator delete(v92);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v90 + 8);
                  v81 = v90;
                  v93 = 2071181815;
LABEL_144:
                  v82 = v93 | 0x1030C4000000000;
LABEL_145:
                  MEMORY[0x219A19A08](v81, v82);
                }
              }
              break;
            default:
              break;
          }
          ++v76;
        }
        while (v76 < v300 - (_BYTE *)v299);
      }
      goto LABEL_387;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "if 'column_types' is given, 'limit' has to be provided to unpack dict type.");
LABEL_420:
  }
  turi::gl_sarray::head(a1, 100, (uint64_t)&v311);
  turi::gl_sarray::dropna((turi::gl_sarray *)&v311, (uint64_t)v293);
  v311.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24D91E0A8;
  v17 = v313;
  if (v313)
  {
    v18 = (unint64_t *)&v313->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)v311.__r_.__value_.__r.__words[2];
  if (v311.__r_.__value_.__r.__words[2])
  {
    v21 = (unint64_t *)(v311.__r_.__value_.__r.__words[2] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = turi::gl_sarray::size((turi::gl_sarray *)v293);
  std::vector<unsigned long>::vector(&__p, v23);
  for (i = 0; i < turi::gl_sarray::size((turi::gl_sarray *)v293); ++i)
  {
    turi::gl_sarray::operator[](v293, i, (uint64_t)&v311);
    v25 = 1;
    switch(v311.__r_.__value_.__s.__data_[12])
    {
      case 3:
        v26 = (_QWORD *)(v311.__r_.__value_.__r.__words[0] + 8);
        v27 = (_QWORD *)(v311.__r_.__value_.__r.__words[0] + 16);
        v28 = 3;
        goto LABEL_32;
      case 4:
        v26 = (_QWORD *)(v311.__r_.__value_.__r.__words[0] + 8);
        v27 = (_QWORD *)(v311.__r_.__value_.__r.__words[0] + 16);
        v28 = 4;
        goto LABEL_32;
      case 5:
        v26 = (_QWORD *)(v311.__r_.__value_.__r.__words[0] + 8);
        v27 = (_QWORD *)(v311.__r_.__value_.__r.__words[0] + 16);
        v28 = 5;
LABEL_32:
        v25 = (uint64_t)(*v27 - *v26) >> v28;
        break;
      case 9:
        v36 = *(uint64_t **)(v311.__r_.__value_.__r.__words[0] + 24);
        v35 = *(uint64_t **)(v311.__r_.__value_.__r.__words[0] + 32);
        if (v35 == v36)
        {
          v25 = 0;
        }
        else
        {
          v25 = *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 8);
          if (v25)
          {
            v25 = 1;
            do
            {
              v37 = *v36++;
              v25 *= v37;
            }
            while (v36 != v35);
          }
        }
        break;
      default:
        break;
    }
    *((_QWORD *)__p + i) = v25;
    switch(v311.__r_.__value_.__s.__data_[12])
    {
      case 2:
        v29 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = v311.__r_.__value_.__r.__words[0];
          if (v311.__r_.__value_.__r.__words[0])
          {
            if (*(char *)(v311.__r_.__value_.__r.__words[0] + 31) < 0)
              operator delete(*(void **)(v311.__r_.__value_.__r.__words[0] + 8));
            v33 = v32;
            v34 = 0x1012C404EF22A49;
            goto LABEL_79;
          }
        }
        break;
      case 3:
        v49 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          v52 = v311.__r_.__value_.__r.__words[0];
          if (v311.__r_.__value_.__r.__words[0])
          {
            v53 = *(void **)(v311.__r_.__value_.__r.__words[0] + 8);
            if (v53)
            {
              *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 16) = v53;
              operator delete(v53);
            }
            v33 = v52;
            v34 = 0x1080C409938AC02;
            goto LABEL_79;
          }
        }
        break;
      case 4:
        v38 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v41 = v311.__r_.__value_.__r.__words[0];
          if (v311.__r_.__value_.__r.__words[0])
          {
            v302 = (void **)(v311.__r_.__value_.__r.__words[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v302);
            goto LABEL_72;
          }
        }
        break;
      case 5:
        v54 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          v41 = v311.__r_.__value_.__r.__words[0];
          if (v311.__r_.__value_.__r.__words[0])
          {
            v302 = (void **)(v311.__r_.__value_.__r.__words[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v302);
LABEL_72:
            v33 = v41;
            v34 = 0x1020C405E66F15BLL;
            goto LABEL_79;
          }
        }
        break;
      case 8:
        v57 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (!v59)
        {
          v60 = v311.__r_.__value_.__r.__words[0];
          if (v311.__r_.__value_.__r.__words[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v311.__r_.__value_.__r.__words[0] + 16));
            v33 = v60;
            v48 = -235920773;
            goto LABEL_78;
          }
        }
        break;
      case 9:
        v42 = (unint64_t *)v311.__r_.__value_.__r.__words[0];
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          v45 = v311.__r_.__value_.__r.__words[0];
          if (v311.__r_.__value_.__r.__words[0])
          {
            v46 = *(void **)(v311.__r_.__value_.__r.__words[0] + 48);
            if (v46)
            {
              *(_QWORD *)(v311.__r_.__value_.__r.__words[0] + 56) = v46;
              operator delete(v46);
            }
            v47 = *(void **)(v45 + 24);
            if (v47)
            {
              *(_QWORD *)(v45 + 32) = v47;
              operator delete(v47);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v45 + 8);
            v33 = v45;
            v48 = 2071181815;
LABEL_78:
            v34 = v48 | 0x1030C4000000000;
LABEL_79:
            MEMORY[0x219A19A08](v33, v34);
          }
        }
        break;
      default:
        continue;
    }
  }
  v61 = __p;
  if (v292 == __p)
    goto LABEL_413;
  v62 = (char *)__p + 8;
  if ((char *)__p + 8 != (char *)v292)
  {
    v63 = *(_QWORD *)__p;
    v64 = (char *)__p + 8;
    do
    {
      v66 = *(_QWORD *)v64;
      v64 += 8;
      v65 = v66;
      v67 = v63 >= v66;
      if (v63 <= v66)
        v63 = v65;
      if (!v67)
        v61 = v62;
      v62 = v64;
    }
    while (v64 != (char *)v292);
  }
  if (!*v61)
  {
LABEL_413:
    v277 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v277, "Cannot infer number of items from the SArray, SArray may be empty. please explicitly provide column types");
  }
  v279 = a2;
  v280 = a4;
  v281 = a6;
  v282 = a1;
  if (turi::gl_sarray::dtype(a1) == 5)
    goto LABEL_375;
  v68 = (unint64_t *)__p;
  if (__p == v292 || (v69 = (unint64_t *)((char *)__p + 8), (char *)__p + 8 == (char *)v292))
  {
    v72 = a1;
  }
  else
  {
    v70 = *(_QWORD *)__p;
    v71 = (unint64_t *)((char *)__p + 8);
    v72 = a1;
    do
    {
      v74 = *v71++;
      v73 = v74;
      v75 = v70 >= v74;
      if (v70 <= v74)
        v70 = v73;
      if (!v75)
        v68 = v69;
      v69 = v71;
    }
    while (v71 != v292);
  }
  if (v297 == v296)
  {
    v106 = *v68;
    std::vector<turi::flexible_type>::resize((uint64_t *)&v296, *v68);
    if (v106)
    {
      for (j = 0; j != v106; ++j)
      {
        v108 = &v296[16 * j];
        switch(v108[12])
        {
          case 2:
            v109 = *(unint64_t **)v108;
            do
            {
              v110 = __ldaxr(v109);
              v111 = v110 - 1;
            }
            while (__stlxr(v111, v109));
            if (!v111)
            {
              v112 = *(unint64_t **)v108;
              if (!*(_QWORD *)v108)
                goto LABEL_195;
              if (*((char *)v112 + 31) < 0)
                operator delete((void *)v112[1]);
              v113 = v112;
              v114 = 0x1012C404EF22A49;
              goto LABEL_194;
            }
            break;
          case 3:
            v126 = *(unint64_t **)v108;
            do
            {
              v127 = __ldaxr(v126);
              v128 = v127 - 1;
            }
            while (__stlxr(v128, v126));
            if (!v128)
            {
              v129 = *(unint64_t **)v108;
              if (!*(_QWORD *)v108)
                goto LABEL_195;
              v130 = (void *)v129[1];
              if (v130)
              {
                v129[2] = (unint64_t)v130;
                operator delete(v130);
              }
              v113 = v129;
              v114 = 0x1080C409938AC02;
              goto LABEL_194;
            }
            break;
          case 4:
            v115 = *(unint64_t **)v108;
            do
            {
              v116 = __ldaxr(v115);
              v117 = v116 - 1;
            }
            while (__stlxr(v117, v115));
            if (!v117)
            {
              v118 = *(unint64_t **)v108;
              if (!*(_QWORD *)v108)
                goto LABEL_195;
              v311.__r_.__value_.__r.__words[0] = (std::string::size_type)(v118 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
              goto LABEL_187;
            }
            break;
          case 5:
            v131 = *(unint64_t **)v108;
            do
            {
              v132 = __ldaxr(v131);
              v133 = v132 - 1;
            }
            while (__stlxr(v133, v131));
            if (!v133)
            {
              v118 = *(unint64_t **)v108;
              if (!*(_QWORD *)v108)
                goto LABEL_195;
              v311.__r_.__value_.__r.__words[0] = (std::string::size_type)(v118 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
LABEL_187:
              v113 = v118;
              v114 = 0x1020C405E66F15BLL;
              goto LABEL_194;
            }
            break;
          case 8:
            v134 = *(unint64_t **)v108;
            do
            {
              v135 = __ldaxr(v134);
              v136 = v135 - 1;
            }
            while (__stlxr(v136, v134));
            if (!v136)
            {
              v137 = *(unint64_t **)v108;
              if (!*(_QWORD *)v108)
                goto LABEL_195;
              boost::detail::shared_count::~shared_count((unsigned int **)v137 + 2);
              v113 = v137;
              v125 = -235920773;
              goto LABEL_193;
            }
            break;
          case 9:
            v119 = *(unint64_t **)v108;
            do
            {
              v120 = __ldaxr(v119);
              v121 = v120 - 1;
            }
            while (__stlxr(v121, v119));
            if (!v121)
            {
              v122 = *(unint64_t **)v108;
              if (*(_QWORD *)v108)
              {
                v123 = (void *)v122[6];
                if (v123)
                {
                  v122[7] = (unint64_t)v123;
                  operator delete(v123);
                }
                v124 = (void *)v122[3];
                if (v124)
                {
                  v122[4] = (unint64_t)v124;
                  operator delete(v124);
                }
                std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v122 + 1));
                v113 = v122;
                v125 = 2071181815;
LABEL_193:
                v114 = v125 | 0x1030C4000000000;
LABEL_194:
                MEMORY[0x219A19A08](v113, v114);
              }
LABEL_195:
              *(_QWORD *)v108 = 0;
            }
            break;
          default:
            break;
        }
        *((_DWORD *)v108 + 2) = 0;
        v108[12] = 0;
        *(_QWORD *)v108 = j;
      }
    }
  }
  else
  {
    v106 = (v297 - v296) >> 4;
  }
  if (turi::gl_sarray::dtype(v72) == 3)
  {
    v311.__r_.__value_.__s.__data_[0] = 1;
    if (v106 <= v300 - (_BYTE *)v299)
    {
      if (v106 < v300 - (_BYTE *)v299)
        v300 = (char *)v299 + v106;
    }
    else
    {
      std::vector<turi::flex_type_enum>::__append((unint64_t *)&v299, v106 - (v300 - (_BYTE *)v299), &v311);
    }
    goto LABEL_375;
  }
  v300 = (char *)v299;
  v138 = v296;
  v283 = v297;
  if (v296 == v297)
  {
LABEL_375:
    if (__p)
    {
      v292 = __p;
      operator delete(__p);
    }
    v293[0] = &off_24D91E0A8;
    v258 = v295;
    a4 = v280;
    a6 = v281;
    a2 = v279;
    a1 = v282;
    if (v295)
    {
      v259 = (unint64_t *)&v295->__shared_owners_;
      do
        v260 = __ldaxr(v259);
      while (__stlxr(v260 - 1, v259));
      if (!v260)
      {
        ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
        std::__shared_weak_count::__release_weak(v258);
      }
    }
    v261 = v294;
    if (v294)
    {
      v262 = (unint64_t *)&v294->__shared_owners_;
      do
        v263 = __ldaxr(v262);
      while (__stlxr(v263 - 1, v262));
      if (!v263)
      {
        ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
        std::__shared_weak_count::__release_weak(v261);
      }
    }
    goto LABEL_387;
  }
  while (1)
  {
    v139 = 0;
    v288 = 0;
    v289 = 0;
    v290 = 0;
LABEL_202:
    if (v139 < turi::gl_sarray::size((turi::gl_sarray *)v293))
      break;
    v244 = turi::infer_type_of_list(&v288);
    v245 = v244;
    v246 = v300;
    if (v300 >= v301)
    {
      v248 = (unint64_t)v299;
      v249 = v300 - (_BYTE *)v299;
      v250 = v300 - (_BYTE *)v299 + 1;
      if (v250 < 0)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      v251 = v301 - (_BYTE *)v299;
      if (2 * (v301 - (_BYTE *)v299) > (unint64_t)v250)
        v250 = 2 * v251;
      if (v251 >= 0x3FFFFFFFFFFFFFFFLL)
        v252 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v252 = v250;
      if (v252)
        v253 = (char *)operator new(v252);
      else
        v253 = 0;
      v254 = &v253[v249];
      v255 = &v253[v249];
      *v255 = v245;
      v247 = v255 + 1;
      if (v246 != (char *)v248)
      {
        v256 = &v246[~v248];
        do
        {
          v257 = *--v246;
          (v256--)[(_QWORD)v253] = v257;
        }
        while (v246 != (char *)v248);
        v254 = v253;
      }
      v299 = v254;
      v300 = v247;
      v301 = &v253[v252];
      if (v248)
        operator delete((void *)v248);
    }
    else
    {
      *v300 = v244;
      v247 = v246 + 1;
    }
    v300 = v247;
    v311.__r_.__value_.__r.__words[0] = (std::string::size_type)&v288;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
    v138 += 16;
    if (v138 == v283)
      goto LABEL_375;
  }
  turi::gl_sarray::operator[](v293, v139, (uint64_t)&v309);
  v140 = 1;
  switch(v310)
  {
    case 0:
    case 1:
    case 2:
    case 6:
    case 8:
      goto LABEL_213;
    case 3:
      v141 = v309 + 1;
      v142 = v309 + 2;
      v143 = 3;
      goto LABEL_212;
    case 4:
      v141 = v309 + 1;
      v142 = v309 + 2;
      v143 = 4;
      goto LABEL_212;
    case 5:
      v141 = v309 + 1;
      v142 = v309 + 2;
      v143 = 5;
LABEL_212:
      v140 = (uint64_t)(*v142 - *v141) >> v143;
      goto LABEL_213;
    case 7:
LABEL_257:
      ++v139;
      goto LABEL_202;
    case 9:
      v145 = (uint64_t *)v309[3];
      v144 = (uint64_t *)v309[4];
      if (v144 == v145)
      {
        v140 = 0;
      }
      else
      {
        v140 = v309[1];
        if (v140)
        {
          v140 = 1;
          do
          {
            v146 = *v145++;
            v140 *= v146;
          }
          while (v145 != v144);
        }
      }
LABEL_213:
      switch(v138[12])
      {
        case 0:
          if (*(_QWORD *)v138 < v140)
            goto LABEL_263;
          goto LABEL_215;
        case 1:
          if (*(double *)v138 < (double)v140)
            goto LABEL_263;
          goto LABEL_215;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          turi::flexible_type_fail(0);
          goto LABEL_215;
        case 6:
          if (v140 > (uint64_t)(*(_QWORD *)v138 << 8) >> 8)
          {
LABEL_263:
            v176 = 0;
            switch(v138[12])
            {
              case 0:
                v176 = *(_QWORD *)v138;
                goto LABEL_292;
              case 1:
                v176 = (uint64_t)*(double *)v138;
                goto LABEL_292;
              case 2:
                v180 = *(_QWORD *)v138;
                v181 = (char **)(*(_QWORD *)v138 + 8);
                __idx = 0;
                v182 = (char *)v181;
                if (*(char *)(v180 + 31) < 0)
                  v182 = *v181;
                v183 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v311, v182);
                v176 = std::stoll(v183, &__idx, 10);
                if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v311.__r_.__value_.__l.__data_);
                if (*(char *)(v180 + 31) < 0)
                  v184 = *(_QWORD *)(v180 + 16);
                else
                  v184 = *(unsigned __int8 *)(v180 + 31);
                if (__idx != v184)
                {
                  v274 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v275 = std::string::append(&v307, " cannot be interpreted as an integer");
                  v276 = *(_OWORD *)&v275->__r_.__value_.__l.__data_;
                  v311.__r_.__value_.__r.__words[2] = v275->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v276;
                  v275->__r_.__value_.__l.__size_ = 0;
                  v275->__r_.__value_.__r.__words[2] = 0;
                  v275->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v274, &v311);
                  __cxa_throw(v274, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                }
                goto LABEL_292;
              case 3:
                v177 = *(_QWORD *)v138;
                memset(&v311, 0, sizeof(v311));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v311, *(const void **)(v177 + 8), *(_QWORD *)(v177 + 16), (uint64_t)(*(_QWORD *)(v177 + 16) - *(_QWORD *)(v177 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (v311.__r_.__value_.__r.__words[0])
                {
                  v311.__r_.__value_.__l.__size_ = v311.__r_.__value_.__r.__words[0];
                  operator delete(v311.__r_.__value_.__l.__data_);
                }
                goto LABEL_291;
              case 4:
                v185 = *(_QWORD *)v138;
                memset(&v311, 0, sizeof(v311));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v311, *(uint64_t **)(v185 + 8), *(uint64_t **)(v185 + 16), (uint64_t)(*(_QWORD *)(v185 + 16) - *(_QWORD *)(v185 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v307.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v307);
                goto LABEL_291;
              case 5:
                v186 = *(_QWORD *)v138;
                memset(&v311, 0, sizeof(v311));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v311, *(uint64_t **)(v186 + 8), *(uint64_t **)(v186 + 16), (uint64_t)(*(_QWORD *)(v186 + 16) - *(_QWORD *)(v186 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v307.__r_.__value_.__r.__words[0] = (std::string::size_type)&v311;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v307);
                goto LABEL_291;
              case 6:
                v176 = (uint64_t)(*(_QWORD *)v138 << 8) >> 8;
                goto LABEL_292;
              case 7:
                goto LABEL_292;
              case 8:
                v187 = *(_QWORD *)v138;
                v188 = *(unsigned int **)(*(_QWORD *)v138 + 16);
                v302 = *(void ***)(*(_QWORD *)v138 + 8);
                v303 = v188;
                if (v188)
                {
                  v189 = v188 + 2;
                  do
                    v190 = __ldxr(v189);
                  while (__stxr(v190 + 1, v189));
                }
                v191 = *(_OWORD *)(v187 + 24);
                v192 = *(_OWORD *)(v187 + 56);
                v305 = *(_OWORD *)(v187 + 40);
                v306 = v192;
                v304 = v191;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v303);
                goto LABEL_291;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&v311, *(_QWORD *)v138 + 8);
                turi::flexible_type_fail(0);
                if (v314)
                {
                  v315 = v314;
                  operator delete(v314);
                }
                if (v311.__r_.__value_.__r.__words[2])
                {
                  v312 = v311.__r_.__value_.__r.__words[2];
                  operator delete((void *)v311.__r_.__value_.__r.__words[2]);
                }
                v176 = v311.__r_.__value_.__l.__size_;
                if (!v311.__r_.__value_.__l.__size_)
                  goto LABEL_292;
                v178 = (unint64_t *)(v311.__r_.__value_.__l.__size_ + 8);
                do
                  v179 = __ldaxr(v178);
                while (__stlxr(v179 - 1, v178));
                if (!v179)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v176 + 16))(v176);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v176);
                }
LABEL_291:
                v176 = 0;
LABEL_292:
                switch(v310)
                {
                  case 2:
                    v193 = v309;
                    if (*v309 != 1)
                    {
                      v194 = (_QWORD *)operator new();
                      v195 = v309;
                      *v194 = *v309;
                      v196 = (std::string *)(v194 + 1);
                      if (*((char *)v195 + 31) < 0)
                      {
                        std::string::__init_copy_ctor_external(v196, (const std::string::value_type *)v195[1], v195[2]);
                      }
                      else
                      {
                        v197 = *(_OWORD *)(v195 + 1);
                        v194[3] = v195[3];
                        *(_OWORD *)&v196->__r_.__value_.__l.__data_ = v197;
                      }
                      v309 = v194;
                      *v194 = 1;
                      do
                      {
                        v233 = __ldaxr(v193);
                        v234 = v233 - 1;
                      }
                      while (__stlxr(v234, v193));
                      if (!v234)
                      {
                        if (*((char *)v193 + 31) < 0)
                          operator delete((void *)v193[1]);
                        v210 = v193;
                        v218 = 0x1012C404EF22A49;
                        goto LABEL_342;
                      }
                    }
                    break;
                  case 3:
                    v212 = v309;
                    if (*v309 != 1)
                    {
                      v213 = (unint64_t *)operator new();
                      v214 = v309;
                      *v213 = *v309;
                      v213[2] = 0;
                      v213[3] = 0;
                      v213[1] = 0;
                      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v213 + 1, (const void *)v214[1], v214[2], (uint64_t)(v214[2] - v214[1]) >> 3);
                      v309 = v213;
                      *v213 = 1;
                      do
                      {
                        v215 = __ldaxr(v212);
                        v216 = v215 - 1;
                      }
                      while (__stlxr(v216, v212));
                      if (!v216)
                      {
                        v217 = (void *)v212[1];
                        if (v217)
                        {
                          v212[2] = (unint64_t)v217;
                          operator delete(v217);
                        }
                        v210 = v212;
                        v218 = 0x1080C409938AC02;
                        goto LABEL_342;
                      }
                    }
                    break;
                  case 4:
                    v198 = v309;
                    if (*v309 != 1)
                    {
                      v199 = (unint64_t *)operator new();
                      v200 = v309;
                      *v199 = *v309;
                      v199[2] = 0;
                      v199[3] = 0;
                      v199[1] = 0;
                      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v199 + 1, (uint64_t *)v200[1], (uint64_t *)v200[2], (uint64_t)(v200[2] - v200[1]) >> 4);
                      v309 = v199;
                      *v199 = 1;
                      do
                      {
                        v201 = __ldaxr(v198);
                        v202 = v201 - 1;
                      }
                      while (__stlxr(v202, v198));
                      if (!v202)
                      {
                        v311.__r_.__value_.__r.__words[0] = (std::string::size_type)(v198 + 1);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
                        goto LABEL_322;
                      }
                    }
                    break;
                  case 5:
                    v198 = v309;
                    if (*v309 != 1)
                    {
                      v219 = (unint64_t *)operator new();
                      v220 = v309;
                      *v219 = *v309;
                      v219[2] = 0;
                      v219[3] = 0;
                      v219[1] = 0;
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v219 + 1, (uint64_t *)v220[1], (uint64_t *)v220[2], (uint64_t)(v220[2] - v220[1]) >> 5);
                      v309 = v219;
                      *v219 = 1;
                      do
                      {
                        v221 = __ldaxr(v198);
                        v222 = v221 - 1;
                      }
                      while (__stlxr(v222, v198));
                      if (!v222)
                      {
                        v311.__r_.__value_.__r.__words[0] = (std::string::size_type)(v198 + 1);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
LABEL_322:
                        v210 = v198;
                        v218 = 0x1020C405E66F15BLL;
                        goto LABEL_342;
                      }
                    }
                    break;
                  case 8:
                    v223 = v309;
                    if (*v309 != 1)
                    {
                      v224 = operator new();
                      v225 = v309;
                      *(_QWORD *)v224 = *v309;
                      *(_QWORD *)(v224 + 8) = v225[1];
                      v226 = v225[2];
                      *(_QWORD *)(v224 + 16) = v226;
                      if (v226)
                      {
                        v227 = (unsigned int *)(v226 + 8);
                        do
                          v228 = __ldxr(v227);
                        while (__stxr(v228 + 1, v227));
                      }
                      v229 = *(_OWORD *)(v225 + 3);
                      v230 = *(_OWORD *)(v225 + 5);
                      *(_OWORD *)(v224 + 56) = *(_OWORD *)(v225 + 7);
                      *(_OWORD *)(v224 + 40) = v230;
                      *(_OWORD *)(v224 + 24) = v229;
                      v309 = (unint64_t *)v224;
                      *(_QWORD *)v224 = 1;
                      do
                      {
                        v231 = __ldaxr(v223);
                        v232 = v231 - 1;
                      }
                      while (__stlxr(v232, v223));
                      if (!v232)
                      {
                        boost::detail::shared_count::~shared_count((unsigned int **)v223 + 2);
                        v210 = v223;
                        v211 = -235920773;
                        goto LABEL_331;
                      }
                    }
                    break;
                  case 9:
                    v203 = v309;
                    if (*v309 != 1)
                    {
                      v204 = (unint64_t *)operator new();
                      v205 = (uint64_t)(v309 + 1);
                      *v204 = *v309;
                      turi::flexible_type_impl::ndarray<double>::ndarray(v204 + 1, v205);
                      v309 = v204;
                      *v204 = 1;
                      do
                      {
                        v206 = __ldaxr(v203);
                        v207 = v206 - 1;
                      }
                      while (__stlxr(v207, v203));
                      if (!v207)
                      {
                        v208 = (void *)v203[6];
                        if (v208)
                        {
                          v203[7] = (unint64_t)v208;
                          operator delete(v208);
                        }
                        v209 = (void *)v203[3];
                        if (v209)
                        {
                          v203[4] = (unint64_t)v209;
                          operator delete(v209);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v203 + 1));
                        v210 = v203;
                        v211 = 2071181815;
LABEL_331:
                        v218 = v211 | 0x1030C4000000000;
LABEL_342:
                        MEMORY[0x219A19A08](v210, v218);
                      }
                    }
                    break;
                  default:
                    break;
                }
                v235 = v309[1] + 16 * v176;
                v236 = v289;
                if ((unint64_t)v289 >= v290)
                {
                  v243 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(&v288, (char *)v235);
                }
                else
                {
                  *v289 = 0;
                  *((_DWORD *)v236 + 2) = 0;
                  *((_BYTE *)v236 + 12) = 0;
                  if (v236 != (_QWORD *)v235)
                  {
                    v237 = *(_QWORD *)v235;
                    *(_QWORD *)((char *)v236 + 5) = *(_QWORD *)(v235 + 5);
                    *v236 = v237;
                    LODWORD(v237) = *(unsigned __int8 *)(v235 + 12);
                    *((_BYTE *)v236 + 12) = v237;
                    v238 = v237 > 9;
                    v239 = (1 << v237) & 0x33C;
                    if (!v238 && v239 != 0)
                    {
                      v241 = (unint64_t *)*v236;
                      do
                        v242 = __ldaxr(v241);
                      while (__stlxr(v242 + 1, v241));
                    }
                  }
                  v243 = (uint64_t)(v236 + 2);
                }
                v289 = (_QWORD *)v243;
                break;
              default:
                goto LABEL_412;
            }
          }
LABEL_215:
          switch(v310)
          {
            case 2:
              v147 = v309;
              do
              {
                v148 = __ldaxr(v147);
                v149 = v148 - 1;
              }
              while (__stlxr(v149, v147));
              if (!v149)
              {
                v150 = v309;
                if (v309)
                {
                  if (*((char *)v309 + 31) < 0)
                    operator delete((void *)v309[1]);
                  v151 = v150;
                  v152 = 0x1012C404EF22A49;
                  goto LABEL_256;
                }
              }
              break;
            case 3:
              v164 = v309;
              do
              {
                v165 = __ldaxr(v164);
                v166 = v165 - 1;
              }
              while (__stlxr(v166, v164));
              if (!v166)
              {
                v167 = v309;
                if (v309)
                {
                  v168 = (void *)v309[1];
                  if (v168)
                  {
                    v309[2] = (unint64_t)v168;
                    operator delete(v168);
                  }
                  v151 = v167;
                  v152 = 0x1080C409938AC02;
                  goto LABEL_256;
                }
              }
              break;
            case 4:
              v153 = v309;
              do
              {
                v154 = __ldaxr(v153);
                v155 = v154 - 1;
              }
              while (__stlxr(v155, v153));
              if (!v155)
              {
                v156 = v309;
                if (v309)
                {
                  v311.__r_.__value_.__r.__words[0] = (std::string::size_type)(v309 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
                  goto LABEL_249;
                }
              }
              break;
            case 5:
              v169 = v309;
              do
              {
                v170 = __ldaxr(v169);
                v171 = v170 - 1;
              }
              while (__stlxr(v171, v169));
              if (!v171)
              {
                v156 = v309;
                if (v309)
                {
                  v311.__r_.__value_.__r.__words[0] = (std::string::size_type)(v309 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v311);
LABEL_249:
                  v151 = v156;
                  v152 = 0x1020C405E66F15BLL;
                  goto LABEL_256;
                }
              }
              break;
            case 8:
              v172 = v309;
              do
              {
                v173 = __ldaxr(v172);
                v174 = v173 - 1;
              }
              while (__stlxr(v174, v172));
              if (!v174)
              {
                v175 = v309;
                if (v309)
                {
                  boost::detail::shared_count::~shared_count((unsigned int **)v309 + 2);
                  v151 = v175;
                  v163 = -235920773;
                  goto LABEL_255;
                }
              }
              break;
            case 9:
              v157 = v309;
              do
              {
                v158 = __ldaxr(v157);
                v159 = v158 - 1;
              }
              while (__stlxr(v159, v157));
              if (!v159)
              {
                v160 = v309;
                if (v309)
                {
                  v161 = (void *)v309[6];
                  if (v161)
                  {
                    v309[7] = (unint64_t)v161;
                    operator delete(v161);
                  }
                  v162 = (void *)v160[3];
                  if (v162)
                  {
                    v160[4] = (unint64_t)v162;
                    operator delete(v162);
                  }
                  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v160 + 1));
                  v151 = v160;
                  v163 = 2071181815;
LABEL_255:
                  v152 = v163 | 0x1030C4000000000;
LABEL_256:
                  MEMORY[0x219A19A08](v151, v152);
                }
              }
              break;
            default:
              goto LABEL_257;
          }
          goto LABEL_257;
        default:
          goto LABEL_412;
      }
    default:
LABEL_412:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_217F97EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, boost::detail::shared_count *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  a26 = (char *)&off_24D91E0A8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  a26 = &a31;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

void **std::vector<turi::flexible_type>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v12 = v5 - *a1;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[16 * v13];
    *(_QWORD *)v15 = 0;
    *((_DWORD *)v15 + 2) = 0;
    v15[12] = 0;
    v16 = *a2;
    *(_QWORD *)(v15 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)v15 = v16;
    v15[12] = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
    v17[2] = v15 + 16;
    std::vector<turi::flexible_type>::__swap_out_circular_buffer(a1, v17);
    v9 = a1[1];
    result = std::__split_buffer<turi::flexible_type>::~__split_buffer(v17);
  }
  else
  {
    *(_QWORD *)v7 = 0;
    *(_DWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 12) = 0;
    v8 = *a2;
    *(_QWORD *)(v7 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(_QWORD *)v7 = v8;
    *(_BYTE *)(v7 + 12) = *((_BYTE *)a2 + 12);
    *((_BYTE *)a2 + 12) = 0;
    v9 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void sub_217F984E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::flexible_type>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::sort(turi::gl_sarray *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11[2];
  char v12;
  _QWORD v13[2];
  std::__shared_weak_count *v14;
  void *__p[2];
  std::__shared_weak_count *v16;
  void (**v17)(turi::gl_sarray *__hidden);
  uint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[2],turi::gl_sarray const&,0>(__p, "a", this);
  turi::gl_sframe::gl_sframe(v13, __p, 1);
  v17 = &off_24D91E0A8;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)v19);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v18);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v11, "a");
  turi::gl_sframe::sort((uint64_t)v13, (uint64_t)v11, a2, __p);
  turi::gl_sframe::operator=((uint64_t)v13, (uint64_t)__p);
  __p[0] = off_24D91E9C0;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "a");
  turi::gl_sframe::select_column((uint64_t)v13, (uint64_t)__p, a3);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  v13[0] = off_24D91E9C0;
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217F986A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_217F98718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string,turi::gl_sarray>::~pair((uint64_t)va);
  JUMPOUT(0x217F98710);
}

void sub_217F98728()
{
  JUMPOUT(0x217F98710);
}

void turi::gl_sarray::subslice(turi::gl_sarray *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  unsigned int v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  unsigned int v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  void **v114;
  _QWORD v115[2];
  _QWORD v116[2];
  _QWORD v117[3];

  v117[2] = *MEMORY[0x24BDAC8D0];
  if ((turi::gl_sarray::dtype(a1) - 5) <= 0xFCu)
    turi::gl_sarray::subslice(turi::flexible_type,turi::flexible_type,turi::flexible_type)const::$_0::operator()();
  (*(void (**)(uint64_t *__return_ptr, turi::gl_sarray *))(*(_QWORD *)a1 + 16))(&v110, a1);
  v10 = v110;
  memset(v117, 0, 13);
  if (v117 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)v117 + 5) = *(_QWORD *)(a2 + 5);
    v117[0] = *(_QWORD *)a2;
    BYTE4(v117[1]) = *(_BYTE *)(a2 + 12);
    if (BYTE4(v117[1]) <= 9u && ((1 << SBYTE4(v117[1])) & 0x33C) != 0)
    {
      v11 = (unint64_t *)v117[0];
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
  }
  memset(v116, 0, 13);
  if (v116 != (_QWORD *)a4)
  {
    *(_QWORD *)((char *)v116 + 5) = *(_QWORD *)(a4 + 5);
    v116[0] = *(_QWORD *)a4;
    BYTE4(v116[1]) = *(_BYTE *)(a4 + 12);
    if (BYTE4(v116[1]) <= 9u && ((1 << SBYTE4(v116[1])) & 0x33C) != 0)
    {
      v13 = (unint64_t *)v116[0];
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  memset(v115, 0, 13);
  if (v115 != (_QWORD *)a3)
  {
    *(_QWORD *)((char *)v115 + 5) = *(_QWORD *)(a3 + 5);
    v115[0] = *(_QWORD *)a3;
    BYTE4(v115[1]) = *(_BYTE *)(a3 + 12);
    if (BYTE4(v115[1]) <= 9u && ((1 << SBYTE4(v115[1])) & 0x33C) != 0)
    {
      v15 = (unint64_t *)v115[0];
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v10 + 536))(&v112, v10, v117, v116, v115);
  turi::gl_sarray::gl_sarray(a5, (uint64_t)&v112);
  v17 = v113;
  if (v113)
  {
    p_shared_owners = (unint64_t *)&v113->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  switch(BYTE4(v115[1]))
  {
    case 2:
      v20 = (unint64_t *)v115[0];
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = v115[0];
        if (v115[0])
        {
          if (*(char *)(v115[0] + 31) < 0)
            operator delete(*(void **)(v115[0] + 8));
          v24 = v23;
          v25 = 0x1012C404EF22A49;
          goto LABEL_63;
        }
      }
      break;
    case 3:
      v26 = (unint64_t *)v115[0];
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v115[0];
        if (v115[0])
        {
          v30 = *(void **)(v115[0] + 8);
          if (v30)
          {
            *(_QWORD *)(v115[0] + 16) = v30;
            operator delete(v30);
          }
          v24 = v29;
          v25 = 0x1080C409938AC02;
          goto LABEL_63;
        }
      }
      break;
    case 4:
      v31 = (unint64_t *)v115[0];
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = v115[0];
        if (v115[0])
        {
          v114 = (void **)(v115[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v114);
          goto LABEL_56;
        }
      }
      break;
    case 5:
      v42 = (unint64_t *)v115[0];
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        v34 = v115[0];
        if (v115[0])
        {
          v114 = (void **)(v115[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v114);
LABEL_56:
          v24 = v34;
          v25 = 0x1020C405E66F15BLL;
          goto LABEL_63;
        }
      }
      break;
    case 8:
      v45 = (unint64_t *)v115[0];
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        v48 = v115[0];
        if (v115[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v115[0] + 16));
          v24 = v48;
          v41 = -235920773;
          goto LABEL_62;
        }
      }
      break;
    case 9:
      v35 = (unint64_t *)v115[0];
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        v38 = v115[0];
        if (v115[0])
        {
          v39 = *(void **)(v115[0] + 48);
          if (v39)
          {
            *(_QWORD *)(v115[0] + 56) = v39;
            operator delete(v39);
          }
          v40 = *(void **)(v38 + 24);
          if (v40)
          {
            *(_QWORD *)(v38 + 32) = v40;
            operator delete(v40);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v38 + 8);
          v24 = v38;
          v41 = 2071181815;
LABEL_62:
          v25 = v41 | 0x1030C4000000000;
LABEL_63:
          MEMORY[0x219A19A08](v24, v25);
        }
      }
      break;
    default:
      break;
  }
  memset(v115, 0, 13);
  switch(BYTE4(v116[1]))
  {
    case 2:
      v49 = (unint64_t *)v116[0];
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v52 = v116[0];
        if (v116[0])
        {
          if (*(char *)(v116[0] + 31) < 0)
            operator delete(*(void **)(v116[0] + 8));
          v53 = v52;
          v54 = 0x1012C404EF22A49;
          goto LABEL_105;
        }
      }
      break;
    case 3:
      v55 = (unint64_t *)v116[0];
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        v58 = v116[0];
        if (v116[0])
        {
          v59 = *(void **)(v116[0] + 8);
          if (v59)
          {
            *(_QWORD *)(v116[0] + 16) = v59;
            operator delete(v59);
          }
          v53 = v58;
          v54 = 0x1080C409938AC02;
          goto LABEL_105;
        }
      }
      break;
    case 4:
      v60 = (unint64_t *)v116[0];
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        v63 = v116[0];
        if (v116[0])
        {
          v114 = (void **)(v116[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v114);
          goto LABEL_98;
        }
      }
      break;
    case 5:
      v71 = (unint64_t *)v116[0];
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        v63 = v116[0];
        if (v116[0])
        {
          v114 = (void **)(v116[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v114);
LABEL_98:
          v53 = v63;
          v54 = 0x1020C405E66F15BLL;
          goto LABEL_105;
        }
      }
      break;
    case 8:
      v74 = (unint64_t *)v116[0];
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        v77 = v116[0];
        if (v116[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v116[0] + 16));
          v53 = v77;
          v70 = -235920773;
          goto LABEL_104;
        }
      }
      break;
    case 9:
      v64 = (unint64_t *)v116[0];
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        v67 = v116[0];
        if (v116[0])
        {
          v68 = *(void **)(v116[0] + 48);
          if (v68)
          {
            *(_QWORD *)(v116[0] + 56) = v68;
            operator delete(v68);
          }
          v69 = *(void **)(v67 + 24);
          if (v69)
          {
            *(_QWORD *)(v67 + 32) = v69;
            operator delete(v69);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v67 + 8);
          v53 = v67;
          v70 = 2071181815;
LABEL_104:
          v54 = v70 | 0x1030C4000000000;
LABEL_105:
          MEMORY[0x219A19A08](v53, v54);
        }
      }
      break;
    default:
      break;
  }
  memset(v116, 0, 13);
  switch(BYTE4(v117[1]))
  {
    case 2:
      v78 = (unint64_t *)v117[0];
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        v81 = v117[0];
        if (v117[0])
        {
          if (*(char *)(v117[0] + 31) < 0)
            operator delete(*(void **)(v117[0] + 8));
          v82 = v81;
          v83 = 0x1012C404EF22A49;
          goto LABEL_147;
        }
      }
      break;
    case 3:
      v84 = (unint64_t *)v117[0];
      do
      {
        v85 = __ldaxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
      {
        v87 = v117[0];
        if (v117[0])
        {
          v88 = *(void **)(v117[0] + 8);
          if (v88)
          {
            *(_QWORD *)(v117[0] + 16) = v88;
            operator delete(v88);
          }
          v82 = v87;
          v83 = 0x1080C409938AC02;
          goto LABEL_147;
        }
      }
      break;
    case 4:
      v89 = (unint64_t *)v117[0];
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v92 = v117[0];
        if (v117[0])
        {
          v114 = (void **)(v117[0] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v114);
          goto LABEL_140;
        }
      }
      break;
    case 5:
      v100 = (unint64_t *)v117[0];
      do
      {
        v101 = __ldaxr(v100);
        v102 = v101 - 1;
      }
      while (__stlxr(v102, v100));
      if (!v102)
      {
        v92 = v117[0];
        if (v117[0])
        {
          v114 = (void **)(v117[0] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v114);
LABEL_140:
          v82 = v92;
          v83 = 0x1020C405E66F15BLL;
          goto LABEL_147;
        }
      }
      break;
    case 8:
      v103 = (unint64_t *)v117[0];
      do
      {
        v104 = __ldaxr(v103);
        v105 = v104 - 1;
      }
      while (__stlxr(v105, v103));
      if (!v105)
      {
        v106 = v117[0];
        if (v117[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)(v117[0] + 16));
          v82 = v106;
          v99 = -235920773;
          goto LABEL_146;
        }
      }
      break;
    case 9:
      v93 = (unint64_t *)v117[0];
      do
      {
        v94 = __ldaxr(v93);
        v95 = v94 - 1;
      }
      while (__stlxr(v95, v93));
      if (!v95)
      {
        v96 = v117[0];
        if (v117[0])
        {
          v97 = *(void **)(v117[0] + 48);
          if (v97)
          {
            *(_QWORD *)(v117[0] + 56) = v97;
            operator delete(v97);
          }
          v98 = *(void **)(v96 + 24);
          if (v98)
          {
            *(_QWORD *)(v96 + 32) = v98;
            operator delete(v98);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v96 + 8);
          v82 = v96;
          v99 = 2071181815;
LABEL_146:
          v83 = v99 | 0x1030C4000000000;
LABEL_147:
          MEMORY[0x219A19A08](v82, v83);
        }
      }
      break;
    default:
      break;
  }
  memset(v117, 0, 13);
  v107 = v111;
  if (v111)
  {
    v108 = (unint64_t *)&v111->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
}

void sub_217F98F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, unint64_t *a14, int a15, char a16, _QWORD *a17, int a18, char a19, _QWORD *a20,int a21,char a22)
{
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;

  switch(a16)
  {
    case 2:
      turi::gl_sarray::clip(&a14);
      break;
    case 3:
      turi::gl_sarray::clip(&a14);
      break;
    case 4:
      tc_init_set_config_parameter_cold_4(&a14);
      break;
    case 5:
      tc_init_set_config_parameter_cold_5(&a14);
      break;
    case 8:
      turi::gl_sarray::clip(&a14);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a14);
      break;
    default:
      break;
  }
  a14 = 0;
  a15 = 0;
  a16 = 0;
  switch(a19)
  {
    case 2:
      v23 = a17;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_46;
      v26 = a17;
      if (!a17)
        goto LABEL_46;
      if (*((char *)a17 + 31) < 0)
        operator delete((void *)a17[1]);
      v27 = v26;
      v28 = 0x1012C404EF22A49;
      goto LABEL_45;
    case 3:
      v37 = a17;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_46;
      v40 = a17;
      if (!a17)
        goto LABEL_46;
      v41 = (void *)a17[1];
      if (v41)
      {
        a17[2] = v41;
        operator delete(v41);
      }
      v27 = v40;
      v28 = 0x1080C409938AC02;
      goto LABEL_45;
    case 4:
      v29 = a17;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_46;
      v32 = a17;
      if (!a17)
        goto LABEL_46;
      a13 = (void **)(a17 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a13);
      goto LABEL_38;
    case 5:
      v42 = a17;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_46;
      v32 = a17;
      if (!a17)
        goto LABEL_46;
      a13 = (void **)(a17 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a13);
LABEL_38:
      v27 = v32;
      v28 = 0x1020C405E66F15BLL;
      goto LABEL_45;
    case 8:
      v45 = a17;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_46;
      v48 = a17;
      if (!a17)
        goto LABEL_46;
      boost::detail::shared_count::~shared_count((unsigned int **)a17 + 2);
      v27 = v48;
      v36 = -235920773;
      goto LABEL_44;
    case 9:
      v33 = a17;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35 || !a17)
        goto LABEL_46;
      v27 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a17);
      v36 = 2071181815;
LABEL_44:
      v28 = v36 | 0x1030C4000000000;
LABEL_45:
      MEMORY[0x219A19A08](v27, v28);
LABEL_46:
      a17 = 0;
      a18 = 0;
      a19 = 0;
      switch(a22)
      {
        case 2:
          v49 = a20;
          do
          {
            v50 = __ldaxr(v49);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v49));
          if (v51)
            goto LABEL_84;
          v52 = a20;
          if (!a20)
            goto LABEL_84;
          if (*((char *)a20 + 31) < 0)
            operator delete((void *)a20[1]);
          v53 = v52;
          v54 = 0x1012C404EF22A49;
          goto LABEL_83;
        case 3:
          v63 = a20;
          do
          {
            v64 = __ldaxr(v63);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v63));
          if (v65)
            goto LABEL_84;
          v66 = a20;
          if (!a20)
            goto LABEL_84;
          v67 = (void *)a20[1];
          if (v67)
          {
            a20[2] = v67;
            operator delete(v67);
          }
          v53 = v66;
          v54 = 0x1080C409938AC02;
          goto LABEL_83;
        case 4:
          v55 = a20;
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (v57)
            goto LABEL_84;
          v58 = a20;
          if (!a20)
            goto LABEL_84;
          a13 = (void **)(a20 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a13);
          goto LABEL_76;
        case 5:
          v68 = a20;
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (v70)
            goto LABEL_84;
          v58 = a20;
          if (!a20)
            goto LABEL_84;
          a13 = (void **)(a20 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a13);
LABEL_76:
          v53 = v58;
          v54 = 0x1020C405E66F15BLL;
          goto LABEL_83;
        case 8:
          v71 = a20;
          do
          {
            v72 = __ldaxr(v71);
            v73 = v72 - 1;
          }
          while (__stlxr(v73, v71));
          if (v73)
            goto LABEL_84;
          v74 = a20;
          if (!a20)
            goto LABEL_84;
          boost::detail::shared_count::~shared_count((unsigned int **)a20 + 2);
          v53 = v74;
          v62 = -235920773;
          goto LABEL_82;
        case 9:
          v59 = a20;
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (v61 || !a20)
            goto LABEL_84;
          v53 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a20);
          v62 = 2071181815;
LABEL_82:
          v54 = v62 | 0x1030C4000000000;
LABEL_83:
          MEMORY[0x219A19A08](v53, v54);
LABEL_84:
          a20 = 0;
          a21 = 0;
          a22 = 0;
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_84;
      }
    default:
      goto LABEL_46;
  }
}

void turi::gl_sarray::show(turi::gl_sarray *a1, uint64_t a2, const turi::flexible_type *a3, const turi::flexible_type *a4, const turi::flexible_type *a5)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  turi::model_base *v9;
  std::__shared_weak_count *v10;

  turi::gl_sarray::plot(a1, a3, a4, a5, &v9);
  if (v9)
    turi::visualization::Plot::show(v9, a2, 0);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_217F99388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::plot(turi::gl_sarray *this@<X0>, const turi::flexible_type *a2@<X1>, const turi::flexible_type *a3@<X2>, const turi::flexible_type *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v10;
  turi::gl_sarray *v11;

  turi::gl_sarray::materialize(this);
  if (!turi::gl_sarray::size(this))
    turi::gl_sarray::plot(turi::flexible_type const&,turi::flexible_type const&,turi::flexible_type const&)const::$_0::operator()();
  v10 = turi::gl_sarray::dtype(this);
  if (v10 >= 2)
  {
    if (v10 != 2)
    {
      v11 = this;
      turi::gl_sarray::plot(turi::flexible_type const&,turi::flexible_type const&,turi::flexible_type const&)const::$_1::operator()(&v11);
    }
    turi::visualization::plot_item_frequency(this, a3, a4, a2, a5);
  }
  else
  {
    turi::visualization::plot_histogram(this, a3, a4, a2, a5);
  }
}

void turi::gl_sarray::cumulative_aggregate(turi::gl_sarray *a1@<X0>, _QWORD *a2@<X1>, turi::gl_sarray *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  turi::thread *v10;
  unint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  _OWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 *v40;
  uint64_t v41;
  turi::gl_sarray_writer_impl *v42;
  _QWORD *v43;
  const char *v44;
  size_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int64x2_t v48;
  _QWORD v49[2];
  turi::gl_sarray_writer_impl *v50;
  turi::thread *v51;
  __int128 v52;
  __int128 *v53;
  _BYTE __p[32];
  turi::gl_sarray_writer_impl **v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = turi::gl_sarray::dtype(a1);
  v7 = *a2;
  v8 = operator new(1uLL);
  *(_QWORD *)__p = v8;
  *v8 = v6;
  *(_QWORD *)&__p[8] = v8 + 1;
  *(_QWORD *)&__p[16] = v8 + 1;
  v9 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 56))(v7, __p);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  if (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 48))(*a2, v6) & 1) == 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[16], (uint64_t)"Cannot perform this operation on an SArray of type ", 51);
    if (v6 > 9)
      v44 = "undefined";
    else
      v44 = off_24D91E960[(int)v6];
    v45 = strlen(v44);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)".", 1);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v47);
    *(_QWORD *)&v52 = __p;
    turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)const::$_0::operator()();
  }
  v10 = (turi::thread *)turi::gl_sarray::size(a1);
  v51 = v10;
  if (!v10)
  {
    memset(__p, 0, 24);
    turi::gl_sarray::gl_sarray(a3, (uint64_t *)__p, v9);
    *(_QWORD *)&v52 = __p;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    return;
  }
  v11 = turi::thread::cpu_count(v10);
  turi::gl_sarray_writer::gl_sarray_writer((uint64_t *)&v50, v9, v11);
  v48 = 0uLL;
  v49[0] = 0;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v13 = (**(uint64_t (***)(_QWORD))*a2)(*a2);
      std::shared_ptr<turi::group_aggregate_value>::shared_ptr[abi:ne180100]<turi::group_aggregate_value,void>(&v52, v13);
      v14 = v48.i64[1];
      if (v48.i64[1] >= v49[0])
      {
        v15 = (v48.i64[1] - v48.i64[0]) >> 4;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v17 = v49[0] - v48.i64[0];
        if ((v49[0] - v48.i64[0]) >> 3 > v16)
          v16 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        v55 = (turi::gl_sarray_writer_impl **)v49;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v49, v18);
        v21 = &v19[16 * v15];
        *(_OWORD *)v21 = v52;
        v52 = 0uLL;
        v22 = (_QWORD *)v48.i64[1];
        v23 = (_QWORD *)v48.i64[0];
        if (v48.i64[1] == v48.i64[0])
        {
          v26 = vdupq_n_s64(v48.u64[1]);
          v24 = &v19[16 * v15];
        }
        else
        {
          v24 = &v19[16 * v15];
          do
          {
            v25 = *((_OWORD *)v22 - 1);
            v22 -= 2;
            *((_OWORD *)v24 - 1) = v25;
            v24 -= 16;
            *v22 = 0;
            v22[1] = 0;
          }
          while (v22 != v23);
          v26 = v48;
        }
        v27 = v21 + 16;
        v48.i64[0] = (uint64_t)v24;
        *(int64x2_t *)&__p[8] = v26;
        v28 = v49[0];
        v49[0] = &v19[16 * v20];
        *(_QWORD *)&__p[24] = v28;
        *(_QWORD *)__p = v26.i64[0];
        std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)__p);
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
        v48.i64[1] = (uint64_t)v27;
        if (*((_QWORD *)&v52 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      else
      {
        *(_OWORD *)v48.i64[1] = v52;
        v48.i64[1] = v14 + 16;
      }
    }
    if (v11 >= 2 && (unint64_t)v51 > v11)
    {
      v32 = operator new(0x20uLL);
      *v32 = &off_24D91E298;
      v32[1] = &v51;
      v32[2] = a1;
      v32[3] = &v48;
      *(_QWORD *)&__p[24] = v32;
      turi::in_parallel((turi::thread_pool *)__p);
      v33 = *(_QWORD **)&__p[24];
      if (*(_BYTE **)&__p[24] == __p)
      {
        v34 = 4;
        v33 = __p;
      }
      else
      {
        if (!*(_QWORD *)&__p[24])
          goto LABEL_34;
        v34 = 5;
      }
      (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_34:
      v35 = v11 - 1;
      do
      {
        v36 = 0;
        v37 = 0;
        do
        {
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v48.i64[0] + 16 * v35) + 32))(*(_QWORD *)(v48.i64[0] + 16 * v35), *(_QWORD *)(v48.i64[0] + v36));
          ++v37;
          v36 += 16;
        }
        while (v35 != v37);
        --v35;
      }
      while (v35);
    }
  }
  *(_QWORD *)__p = &v51;
  *(_QWORD *)&__p[8] = a2;
  *(_QWORD *)&__p[16] = &v48;
  *(_QWORD *)&__p[24] = a1;
  v55 = &v50;
  if ((unint64_t)v51 <= v11)
  {
    turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)const::$_2::operator()((uint64_t **)__p, 0, 1uLL);
  }
  else
  {
    v38 = (char *)operator new(0x30uLL);
    *(_QWORD *)v38 = &off_24D91E318;
    v39 = *(_OWORD *)&__p[16];
    *(_OWORD *)(v38 + 8) = *(_OWORD *)__p;
    *(_OWORD *)(v38 + 24) = v39;
    *((_QWORD *)v38 + 5) = v55;
    v53 = (__int128 *)v38;
    turi::in_parallel((turi::thread_pool *)&v52);
    v40 = v53;
    if (v53 == &v52)
    {
      v41 = 4;
      v40 = &v52;
    }
    else
    {
      if (!v53)
        goto LABEL_45;
      v41 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v40 + 8 * v41))();
  }
LABEL_45:
  turi::gl_sarray_writer_impl::close(v50, (uint64_t)a3);
  *(_QWORD *)__p = &v48;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v42 = v50;
  v50 = 0;
  if (v42)
    std::default_delete<turi::gl_sarray_writer_impl>::operator()[abi:ne180100]((uint64_t)&v50, (uint64_t)v42);
}

void sub_217F998E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)const::$_2::operator()(uint64_t **a1, unint64_t a2, unint64_t a3)
{
  turi::gl_sarray *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  __n128 v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v85;
  size_t v86;
  unsigned int v87;
  unint64_t *v88;
  _QWORD *v89;
  unint64_t v90;
  double *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  double v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  void *v115;
  void *v116;
  unsigned int v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  void *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t *v129;
  double v130;
  uint64_t v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  std::__shared_weak_count *v134;
  unint64_t *p_shared_owners;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t *v140;
  unint64_t *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  void *v151;
  void *v152;
  unsigned int v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  void *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t *v165;
  uint64_t v166;
  unsigned __int8 *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  char v170;
  void **v171;
  _BYTE v172[13];
  uint64_t v173;
  unint64_t *v174[2];
  __int128 v175;
  uint64_t v176;

  v176 = *MEMORY[0x24BDAC8D0];
  v6 = (turi::gl_sarray *)a1[3];
  *(unint64_t **)((char *)v174 + 5) = *(unint64_t **)((char *)&turi::FLEX_UNDEFINED + 5);
  v174[0] = (unint64_t *)turi::FLEX_UNDEFINED;
  BYTE4(v174[1]) = byte_254FEE1C4;
  if (byte_254FEE1C4 <= 9u && ((1 << byte_254FEE1C4) & 0x33C) != 0)
  {
    do
      v8 = __ldaxr(v174[0]);
    while (__stlxr(v8 + 1, v174[0]));
  }
  v9 = **a1;
  v10 = (**(uint64_t (***)(_QWORD))*a1[1])(*a1[1]);
  std::shared_ptr<turi::group_aggregate_value>::shared_ptr[abi:ne180100]<turi::group_aggregate_value,void>(&v168, v10);
  if (a2)
  {
    v11 = 16 * (a2 - 1);
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(*a1[2] + v11) + 40))(v172);
    switch(BYTE4(v174[1]))
    {
      case 2:
        v12 = v174[0];
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = v174[0];
          if (v174[0])
          {
            if (*((char *)v174[0] + 31) < 0)
              operator delete(*((void **)v174[0] + 1));
            v16 = v15;
            v17 = 0x1012C404EF22A49;
            goto LABEL_48;
          }
        }
        break;
      case 3:
        v29 = v174[0];
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
        {
          v32 = v174[0];
          if (v174[0])
          {
            v33 = (void *)v174[0][1];
            if (v33)
            {
              v174[0][2] = (unint64_t)v33;
              operator delete(v33);
            }
            v16 = v32;
            v17 = 0x1080C409938AC02;
            goto LABEL_48;
          }
        }
        break;
      case 4:
        v18 = v174[0];
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          v21 = v174[0];
          if (v174[0])
          {
            *(_QWORD *)&v175 = v174[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
            goto LABEL_41;
          }
        }
        break;
      case 5:
        v34 = v174[0];
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          v21 = v174[0];
          if (v174[0])
          {
            *(_QWORD *)&v175 = v174[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v175);
LABEL_41:
            v16 = v21;
            v17 = 0x1020C405E66F15BLL;
            goto LABEL_48;
          }
        }
        break;
      case 8:
        v37 = v174[0];
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          v40 = v174[0];
          if (v174[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)v174[0] + 2);
            v16 = v40;
            v28 = -235920773;
            goto LABEL_47;
          }
        }
        break;
      case 9:
        v22 = v174[0];
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = v174[0];
          if (v174[0])
          {
            v26 = (void *)v174[0][6];
            if (v26)
            {
              v174[0][7] = (unint64_t)v26;
              operator delete(v26);
            }
            v27 = (void *)v25[3];
            if (v27)
            {
              v25[4] = (unint64_t)v27;
              operator delete(v27);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v25 + 1));
            v16 = v25;
            v28 = 2071181815;
LABEL_47:
            v17 = v28 | 0x1030C4000000000;
LABEL_48:
            MEMORY[0x219A19A08](v16, v17);
          }
        }
        break;
      default:
        break;
    }
    *(unint64_t **)((char *)v174 + 5) = *(unint64_t **)&v172[5];
    v174[0] = *(unint64_t **)v172;
    BYTE4(v174[1]) = v172[12];
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v168 + 32))(v168, *(_QWORD *)(*a1[2] + v11));
  }
  turi::gl_sarray::range_iterator(v6, v9 * a2 / a3, (v9 + v9 * a2) / a3, (_QWORD **)v172);
  v166 = 0;
  v167 = v172;
  v42 = *(_QWORD *)(v173 + 72) - *(_QWORD *)(v173 + 56);
  while (v166 != v42)
  {
    v43 = v167;
    switch(byte_254FEE1C4)
    {
      case 0:
        switch(v167[12])
        {
          case 0u:
            if (*(_QWORD *)v167 == turi::FLEX_UNDEFINED)
              goto LABEL_172;
            goto LABEL_129;
          case 1u:
            v41.n128_u64[0] = *(_QWORD *)v167;
            v97 = turi::FLEX_UNDEFINED;
            goto LABEL_185;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_129;
          case 6u:
            if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v167 << 8) >> 8 && !*((_DWORD *)v167 + 2))
              goto LABEL_172;
            goto LABEL_129;
          default:
            goto LABEL_257;
        }
      case 1:
        switch(v167[12])
        {
          case 0u:
            v41.n128_u64[0] = turi::FLEX_UNDEFINED;
            v97 = *(_QWORD *)v167;
LABEL_185:
            v130 = (double)v97;
            goto LABEL_186;
          case 1u:
            v41.n128_u64[0] = *(_QWORD *)v167;
            v130 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_186:
            if (v41.n128_f64[0] != v130)
              goto LABEL_129;
            goto LABEL_172;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_129;
          case 6u:
            v41.n128_f64[0] = vabdd_f64((double)*((int *)v167 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v167 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
            goto LABEL_190;
          default:
            goto LABEL_257;
        }
      case 2:
        v83 = v167[12];
        if (v83 - 3 < 7 || v83 < 2)
          goto LABEL_129;
        if (v83 != 2)
          goto LABEL_257;
        v85 = *(_QWORD *)v167;
        if (*(char *)(*(_QWORD *)v167 + 31) < 0)
          v86 = *(_QWORD *)(v85 + 16);
        else
          v86 = *(unsigned __int8 *)(*(_QWORD *)v167 + 31);
        if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
          v131 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
        else
          v131 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        if (v86 != v131)
          goto LABEL_129;
        v132 = (unsigned __int8 *)(v85 + 8);
        if ((*(_BYTE *)(*(_QWORD *)v167 + 31) & 0x80) != 0)
          v132 = *(unsigned __int8 **)v132;
        v133 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
        if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        {
          v133 = *(unsigned __int8 **)v133;
          if ((*(_BYTE *)(*(_QWORD *)v167 + 31) & 0x80) == 0)
          {
LABEL_201:
            if (!v86)
              goto LABEL_172;
            do
            {
              if (*v132 != *v133)
                goto LABEL_129;
              ++v132;
              ++v133;
              --v86;
            }
            while (v86);
            goto LABEL_172;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)v167 + 31) & 0x80) == 0)
        {
          goto LABEL_201;
        }
        if (memcmp(v132, v133, v86))
          goto LABEL_129;
LABEL_172:
        turi::gl_sarray_writer_impl::write((turi::gl_sarray_writer_impl *)*a1[4], (const turi::flexible_type *)v174, a2);
        turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)&v166);
        break;
      case 3:
        v87 = v167[12];
        if (v87 > 9)
          goto LABEL_257;
        if (v87 != 3)
          goto LABEL_129;
        v88 = *(unint64_t **)(*(_QWORD *)v167 + 8);
        v89 = *(_QWORD **)(*(_QWORD *)v167 + 16);
        v90 = v89 - v88;
        v91 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v90 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v91) >> 3)
          goto LABEL_129;
        if (v89 == v88)
          goto LABEL_172;
        if (v90 <= 1)
          v92 = 1;
        else
          v92 = v89 - v88;
        v41.n128_u64[0] = *v88;
        if (*(double *)v88 == *v91)
        {
          v93 = 1;
          do
          {
            v94 = v93;
            if (v92 == v93)
              break;
            v41.n128_u64[0] = v88[v93];
            v95 = v91[v93++];
          }
          while (v41.n128_f64[0] == v95);
          v45 = v94 >= v90;
LABEL_175:
          if ((v45 & 1) != 0)
            goto LABEL_172;
        }
        goto LABEL_129;
      case 4:
        v44 = v167[12];
        if (v44 > 9)
          goto LABEL_257;
        if (v44 != 4)
          goto LABEL_129;
        v45 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v170, (uint64_t *)(*(_QWORD *)v167 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_175;
      case 5:
        v98 = v167[12];
        if (v98 > 9)
          goto LABEL_257;
        if (v98 != 5)
          goto LABEL_129;
        v45 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v170, (uint64_t **)(*(_QWORD *)v167 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_175;
      case 6:
        switch(v167[12])
        {
          case 0u:
            if (*(_QWORD *)v167 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FEE1C0)
              goto LABEL_172;
            goto LABEL_129;
          case 1u:
            v41.n128_f64[0] = vabdd_f64(*(double *)v167, (double)dword_254FEE1C0 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_190:
            if (v41.n128_f64[0] < 0.0000005)
              goto LABEL_172;
            goto LABEL_129;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_129;
          case 6u:
            if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v167) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v167 + 2) == dword_254FEE1C0)
            {
              goto LABEL_172;
            }
            goto LABEL_129;
          default:
            goto LABEL_257;
        }
      case 7:
        v96 = v167[12];
        if (v96 < 7 || v96 - 8 < 2)
          goto LABEL_129;
        if (v96 != 7)
          goto LABEL_257;
        goto LABEL_172;
      case 8:
        v99 = v167[12];
        if (v99 < 8 || v99 == 9)
          goto LABEL_129;
        if (v99 != 8)
          goto LABEL_257;
        v45 = turi::image_type::operator==(*(_QWORD *)v167 + 8, turi::FLEX_UNDEFINED + 8);
        goto LABEL_175;
      case 9:
        v46 = v167[12];
        if (v46 < 9)
          goto LABEL_129;
        if (v46 != 9)
        {
LABEL_257:
          turi::flexible_type_fail(0);
          __break(1u);
        }
        v47 = turi::FLEX_UNDEFINED;
        v48 = *(_QWORD **)v167;
        if (turi::FLEX_UNDEFINED == *(_QWORD *)v167)
          goto LABEL_172;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v48 + 1), turi::FLEX_UNDEFINED + 8))
          goto LABEL_129;
        v50 = (char *)v48[3];
        v49 = (char *)v48[4];
        v51 = v49 - v50;
        if (v49 == v50)
          goto LABEL_172;
        if (!v48[1])
          goto LABEL_172;
        v52 = 1;
        do
        {
          v53 = *(_QWORD *)v50;
          v50 += 8;
          v52 *= v53;
        }
        while (v50 != v49);
        if (!v52)
          goto LABEL_172;
        v171 = 0;
        std::vector<unsigned long>::vector(&v175, v51 >> 3, &v171);
        v54 = v175;
        v55 = **(_QWORD **)(v47 + 8);
        v56 = *((_QWORD *)&v175 + 1) - v175;
        v57 = (uint64_t)(*((_QWORD *)&v175 + 1) - v175) >> 3;
        v58 = v57 - 1;
        if (v57 <= 1)
          v59 = 1;
        else
          v59 = (uint64_t)(*((_QWORD *)&v175 + 1) - v175) >> 3;
        while (2)
        {
          if (*((_QWORD *)&v54 + 1) == (_QWORD)v54)
          {
            v67 = 0;
            v68 = *(double *)(*(_QWORD *)v48[1] + 8 * v48[9]);
          }
          else
          {
            v60 = 0;
            v61 = (uint64_t *)v48[6];
            v62 = (uint64_t *)v54;
            v63 = v59;
            do
            {
              v65 = *v62++;
              v64 = v65;
              v66 = *v61++;
              v60 += v66 * v64;
              --v63;
            }
            while (v63);
            v67 = 0;
            v68 = *(double *)(*(_QWORD *)v48[1] + 8 * (v48[9] + v60));
            v69 = *(uint64_t **)(v47 + 48);
            v70 = (uint64_t *)v54;
            v71 = v59;
            do
            {
              v73 = *v70++;
              v72 = v73;
              v74 = *v69++;
              v67 += v74 * v72;
              --v71;
            }
            while (v71);
          }
          v75 = *(double *)(v55 + 8 * (*(_QWORD *)(v47 + 72) + v67));
          if (v68 != v75)
          {
LABEL_87:
            if ((_QWORD)v54)
            {
              *((_QWORD *)&v175 + 1) = v54;
              operator delete((void *)v54);
            }
            if (v68 != v75)
            {
LABEL_129:
              (*(void (**)(uint64_t, unsigned __int8 *, __n128))(*(_QWORD *)v168 + 16))(v168, v43, v41);
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v168 + 40))(&v175);
              switch(BYTE4(v174[1]))
              {
                case 2:
                  v101 = v174[0];
                  do
                  {
                    v102 = __ldaxr(v101);
                    v103 = v102 - 1;
                  }
                  while (__stlxr(v103, v101));
                  if (!v103)
                  {
                    v104 = v174[0];
                    if (v174[0])
                    {
                      if (*((char *)v174[0] + 31) < 0)
                        operator delete(*((void **)v174[0] + 1));
                      v105 = v104;
                      v106 = 0x1012C404EF22A49;
                      goto LABEL_170;
                    }
                  }
                  break;
                case 3:
                  v118 = v174[0];
                  do
                  {
                    v119 = __ldaxr(v118);
                    v120 = v119 - 1;
                  }
                  while (__stlxr(v120, v118));
                  if (!v120)
                  {
                    v121 = v174[0];
                    if (v174[0])
                    {
                      v122 = (void *)v174[0][1];
                      if (v122)
                      {
                        v174[0][2] = (unint64_t)v122;
                        operator delete(v122);
                      }
                      v105 = v121;
                      v106 = 0x1080C409938AC02;
                      goto LABEL_170;
                    }
                  }
                  break;
                case 4:
                  v107 = v174[0];
                  do
                  {
                    v108 = __ldaxr(v107);
                    v109 = v108 - 1;
                  }
                  while (__stlxr(v109, v107));
                  if (!v109)
                  {
                    v110 = v174[0];
                    if (v174[0])
                    {
                      v171 = (void **)(v174[0] + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v171);
                      goto LABEL_163;
                    }
                  }
                  break;
                case 5:
                  v123 = v174[0];
                  do
                  {
                    v124 = __ldaxr(v123);
                    v125 = v124 - 1;
                  }
                  while (__stlxr(v125, v123));
                  if (!v125)
                  {
                    v110 = v174[0];
                    if (v174[0])
                    {
                      v171 = (void **)(v174[0] + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v171);
LABEL_163:
                      v105 = v110;
                      v106 = 0x1020C405E66F15BLL;
                      goto LABEL_170;
                    }
                  }
                  break;
                case 8:
                  v126 = v174[0];
                  do
                  {
                    v127 = __ldaxr(v126);
                    v128 = v127 - 1;
                  }
                  while (__stlxr(v128, v126));
                  if (!v128)
                  {
                    v129 = v174[0];
                    if (v174[0])
                    {
                      boost::detail::shared_count::~shared_count((unsigned int **)v174[0] + 2);
                      v105 = v129;
                      v117 = -235920773;
                      goto LABEL_169;
                    }
                  }
                  break;
                case 9:
                  v111 = v174[0];
                  do
                  {
                    v112 = __ldaxr(v111);
                    v113 = v112 - 1;
                  }
                  while (__stlxr(v113, v111));
                  if (!v113)
                  {
                    v114 = v174[0];
                    if (v174[0])
                    {
                      v115 = (void *)v174[0][6];
                      if (v115)
                      {
                        v174[0][7] = (unint64_t)v115;
                        operator delete(v115);
                      }
                      v116 = (void *)v114[3];
                      if (v116)
                      {
                        v114[4] = (unint64_t)v116;
                        operator delete(v116);
                      }
                      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v114 + 1));
                      v105 = v114;
                      v117 = 2071181815;
LABEL_169:
                      v106 = v117 | 0x1030C4000000000;
LABEL_170:
                      MEMORY[0x219A19A08](v105, v106);
                    }
                  }
                  break;
                default:
                  break;
              }
              *(unint64_t **)((char *)v174 + 5) = *(unint64_t **)((char *)&v175 + 5);
              v174[0] = (unint64_t *)v175;
              BYTE4(v174[1]) = BYTE12(v175);
            }
            goto LABEL_172;
          }
          v76 = v57;
          v77 = v57 - 1;
          if (v56 < 1)
            goto LABEL_85;
          v78 = v48[3];
          v79 = *(_QWORD *)(v54 + 8 * v58) + 1;
          *(_QWORD *)(v54 + 8 * v58) = v79;
          v80 = (v56 & 0xFFFFFFFFFFFFFFF8) - 16;
          v77 = v57 - 1;
          if (v79 < *(_QWORD *)(v78 + 8 * v58))
          {
            v76 = 1;
            v77 = v57 - 1;
LABEL_85:
            if (v77 < 0 || !v76)
              goto LABEL_87;
            continue;
          }
          break;
        }
        while (1)
        {
          *(_QWORD *)(v54 + v80 + 8) = 0;
          if (v77 <= 0)
            break;
          --v77;
          v81 = *(_QWORD *)(v54 + v80) + 1;
          *(_QWORD *)(v54 + v80) = v81;
          v82 = *(_QWORD *)(v78 + v80);
          v80 -= 8;
          if (v81 < v82)
          {
            v76 = 1;
            goto LABEL_85;
          }
        }
        *((_QWORD *)&v175 + 1) = v54;
        operator delete((void *)v54);
        goto LABEL_172;
      default:
        goto LABEL_257;
    }
  }
  turi::gl_sarray_range::~gl_sarray_range((unint64_t **)v172);
  v134 = v169;
  if (v169)
  {
    p_shared_owners = (unint64_t *)&v169->__shared_owners_;
    do
      v136 = __ldaxr(p_shared_owners);
    while (__stlxr(v136 - 1, p_shared_owners));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  switch(BYTE4(v174[1]))
  {
    case 2:
      v137 = v174[0];
      do
      {
        v138 = __ldaxr(v137);
        v139 = v138 - 1;
      }
      while (__stlxr(v139, v137));
      if (!v139)
      {
        v140 = v174[0];
        if (v174[0])
        {
          if (*((char *)v174[0] + 31) < 0)
            operator delete(*((void **)v174[0] + 1));
          v141 = v140;
          v142 = 0x1012C404EF22A49;
          goto LABEL_255;
        }
      }
      break;
    case 3:
      v154 = v174[0];
      do
      {
        v155 = __ldaxr(v154);
        v156 = v155 - 1;
      }
      while (__stlxr(v156, v154));
      if (!v156)
      {
        v157 = v174[0];
        if (v174[0])
        {
          v158 = (void *)v174[0][1];
          if (v158)
          {
            v174[0][2] = (unint64_t)v158;
            operator delete(v158);
          }
          v141 = v157;
          v142 = 0x1080C409938AC02;
          goto LABEL_255;
        }
      }
      break;
    case 4:
      v143 = v174[0];
      do
      {
        v144 = __ldaxr(v143);
        v145 = v144 - 1;
      }
      while (__stlxr(v145, v143));
      if (!v145)
      {
        v146 = v174[0];
        if (v174[0])
        {
          *(_QWORD *)v172 = v174[0] + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v172);
          goto LABEL_248;
        }
      }
      break;
    case 5:
      v159 = v174[0];
      do
      {
        v160 = __ldaxr(v159);
        v161 = v160 - 1;
      }
      while (__stlxr(v161, v159));
      if (!v161)
      {
        v146 = v174[0];
        if (v174[0])
        {
          *(_QWORD *)v172 = v174[0] + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v172);
LABEL_248:
          v141 = v146;
          v142 = 0x1020C405E66F15BLL;
          goto LABEL_255;
        }
      }
      break;
    case 8:
      v162 = v174[0];
      do
      {
        v163 = __ldaxr(v162);
        v164 = v163 - 1;
      }
      while (__stlxr(v164, v162));
      if (!v164)
      {
        v165 = v174[0];
        if (v174[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v174[0] + 2);
          v141 = v165;
          v153 = -235920773;
          goto LABEL_254;
        }
      }
      break;
    case 9:
      v147 = v174[0];
      do
      {
        v148 = __ldaxr(v147);
        v149 = v148 - 1;
      }
      while (__stlxr(v149, v147));
      if (!v149)
      {
        v150 = v174[0];
        if (v174[0])
        {
          v151 = (void *)v174[0][6];
          if (v151)
          {
            v174[0][7] = (unint64_t)v151;
            operator delete(v151);
          }
          v152 = (void *)v150[3];
          if (v152)
          {
            v150[4] = (unint64_t)v152;
            operator delete(v152);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v150 + 1));
          v141 = v150;
          v153 = 2071181815;
LABEL_254:
          v142 = v153 | 0x1030C4000000000;
LABEL_255:
          MEMORY[0x219A19A08](v141, v142);
        }
      }
      break;
    default:
      return;
  }
}

void sub_217F9A738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _QWORD *a20,int a21,char a22)
{
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  switch(a22)
  {
    case 2:
      v23 = a20;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_39;
      v26 = a20;
      if (!a20)
        goto LABEL_39;
      if (*((char *)a20 + 31) < 0)
        operator delete((void *)a20[1]);
      v27 = v26;
      v28 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v37 = a20;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_39;
      v40 = a20;
      if (!a20)
        goto LABEL_39;
      v41 = (void *)a20[1];
      if (v41)
      {
        a20[2] = v41;
        operator delete(v41);
      }
      v27 = v40;
      v28 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v29 = a20;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_39;
      v32 = a20;
      if (!a20)
        goto LABEL_39;
      a12 = (void **)(a20 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
      goto LABEL_31;
    case 5:
      v42 = a20;
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (v44)
        goto LABEL_39;
      v32 = a20;
      if (!a20)
        goto LABEL_39;
      a12 = (void **)(a20 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
LABEL_31:
      v27 = v32;
      v28 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v45 = a20;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (v47)
        goto LABEL_39;
      v48 = a20;
      if (!a20)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)a20 + 2);
      v27 = v48;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v33 = a20;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (v35 || !a20)
        goto LABEL_39;
      v27 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(a20);
      v36 = 2071181815;
LABEL_37:
      v28 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v27, v28);
LABEL_39:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_39;
  }
}

void turi::gl_sarray_writer::close(turi::gl_sarray_writer_impl **this@<X0>, uint64_t a2@<X8>)
{
  turi::gl_sarray_writer_impl::close(*this, a2);
}

void turi::gl_sarray_writer::~gl_sarray_writer(turi::gl_sarray_writer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<turi::gl_sarray_writer_impl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

void turi::gl_sarray::builtin_cumulative_aggregate(turi::gl_sarray *a1@<X0>, std::string::size_type a2@<X1>, turi::gl_sarray *a3@<X8>)
{
  int v6;
  const turi::gl_sarray *v7;
  int v8;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  std::string __p;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;

  v6 = turi::gl_sarray::dtype(a1);
  v54 = 0;
  v55 = 0;
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80) != 0)
  {
    if (*(_QWORD *)(a2 + 8) != 20)
      goto LABEL_114;
    v20 = *(uint64_t **)a2;
    if (**(_QWORD **)a2 != 0x69746C6975625F5FLL
      || *(_QWORD *)(*(_QWORD *)a2 + 8) != 0x735F6D75635F5F6ELL
      || *(_DWORD *)(*(_QWORD *)a2 + 16) != 1600089461)
    {
      if (*v20 != 0x69746C6975625F5FLL || v20[1] != 0x615F6D75635F5F6ELL || *((_DWORD *)v20 + 4) != 1600087926)
      {
        if (*v20 != 0x69746C6975625F5FLL || v20[1] != 0x6D5F6D75635F5F6ELL || *((_DWORD *)v20 + 4) != 1600092257)
        {
          v27 = *v20;
          v28 = v20[1];
          v29 = *((unsigned int *)v20 + 4);
          if (v27 != 0x69746C6975625F5FLL || v28 != 0x6D5F6D75635F5F6ELL || v29 != 1600089705)
          {
            if (*(_QWORD *)(a2 + 8) != 20)
              goto LABEL_114;
            v19 = *(uint64_t **)a2;
            if (**(_QWORD **)a2 != 0x69746C6975625F5FLL
              || *(_QWORD *)(*(_QWORD *)a2 + 8) != 0x765F6D75635F5F6ELL
              || *(_DWORD *)(*(_QWORD *)a2 + 16) != 1600090721)
            {
              if ((v8 & 0x80) == 0)
              {
                v19 = (uint64_t *)a2;
                if (v8 != 20)
                  goto LABEL_114;
              }
              goto LABEL_79;
            }
LABEL_97:
            std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__var__");
            turi::get_builtin_group_aggregator(&__p, &v52);
            goto LABEL_98;
          }
LABEL_96:
          std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__min__");
          turi::get_builtin_group_aggregator(&__p, &v52);
          goto LABEL_98;
        }
LABEL_94:
        std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__max__");
        turi::get_builtin_group_aggregator(&__p, &v52);
        goto LABEL_98;
      }
      goto LABEL_91;
    }
LABEL_88:
    if (v6 == 3)
    {
      turi::check_vector_equal_size(a1, v7);
      std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__vector__sum__");
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__sum__");
    }
    goto LABEL_90;
  }
  if (v8 != 20)
    goto LABEL_114;
  if (*(_QWORD *)a2 == 0x69746C6975625F5FLL
    && *(_QWORD *)(a2 + 8) == 0x735F6D75635F5F6ELL
    && *(_DWORD *)(a2 + 16) == 1600089461)
  {
    goto LABEL_88;
  }
  if (*(_QWORD *)a2 == 0x69746C6975625F5FLL
    && *(_QWORD *)(a2 + 8) == 0x615F6D75635F5F6ELL
    && *(_DWORD *)(a2 + 16) == 1600087926)
  {
LABEL_91:
    if (v6 == 3)
    {
      turi::check_vector_equal_size(a1, v7);
      std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__vector__avg__");
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__avg__");
    }
LABEL_90:
    turi::get_builtin_group_aggregator(&__p, &v52);
    goto LABEL_98;
  }
  if (*(_QWORD *)a2 == 0x69746C6975625F5FLL
    && *(_QWORD *)(a2 + 8) == 0x6D5F6D75635F5F6ELL
    && *(_DWORD *)(a2 + 16) == 1600092257)
  {
    goto LABEL_94;
  }
  if (*(_QWORD *)a2 == 0x69746C6975625F5FLL
    && *(_QWORD *)(a2 + 8) == 0x6D5F6D75635F5F6ELL
    && *(_DWORD *)(a2 + 16) == 1600089705)
  {
    goto LABEL_96;
  }
  v18 = *(_QWORD *)a2 == 0x69746C6975625F5FLL
     && *(_QWORD *)(a2 + 8) == 0x765F6D75635F5F6ELL
     && *(_DWORD *)(a2 + 16) == 1600090721;
  v19 = (uint64_t *)a2;
  if (v18)
    goto LABEL_97;
LABEL_79:
  v34 = *v19;
  v35 = v19[1];
  v36 = *((unsigned int *)v19 + 4);
  if (v34 != 0x69746C6975625F5FLL || v35 != 0x735F6D75635F5F6ELL || v36 != 1600087156)
  {
LABEL_114:
    __p.__r_.__value_.__r.__words[0] = a2;
    turi::gl_sarray::builtin_cumulative_aggregate(std::string const&)const::$_0::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__stdv__");
  turi::get_builtin_group_aggregator(&__p, &v52);
LABEL_98:
  v39 = v52;
  v40 = v53;
  v52 = 0;
  v53 = 0;
  v54 = v39;
  v55 = v40;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v49 = v39;
  v50 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(p_shared_owners);
    while (__stxr(v42 + 1, p_shared_owners));
  }
  turi::gl_sarray::cumulative_aggregate(a1, &v49, a3);
  v43 = v50;
  if (v50)
  {
    v44 = (unint64_t *)&v50->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v55;
  if (v55)
  {
    v47 = (unint64_t *)&v55->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_217F9AD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

_QWORD *turi::operator<<(_QWORD *a1, turi::gl_sarray *this)
{
  unsigned int v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *result;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  void **v60;
  uint64_t v61;
  _QWORD **v62;
  _QWORD v63[2];
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  std::string v66;
  void **v67[2];
  uint64_t v68;
  uint64_t v69;
  void *__p;
  char v71;
  uint64_t v72;
  _QWORD v73[2];
  _QWORD *v74[2];
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  turi::gl_sarray::head(this, 10, (uint64_t)v63);
  v4 = turi::gl_sarray::dtype(this);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"dtype: ", 7);
  if (v4 > 9)
    v6 = "undefined";
  else
    v6 = off_24D91E960[v4];
  v7 = strlen(v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Rows: ", 6);
  turi::gl_sarray::size(this);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  turi::gl_sarray::range_iterator((turi::gl_sarray *)v63, 0, 0xFFFFFFFFFFFFFFFFLL, v74);
  v61 = 0;
  v62 = v74;
  v10 = *(_QWORD *)(v75 + 72) - *(_QWORD *)(v75 + 56);
  v59 = *(void ***)(MEMORY[0x24BEDB7F0] + 64);
  v60 = (void **)*MEMORY[0x24BEDB7F0];
  v58 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v57 = MEMORY[0x24BEDB848] + 16;
  v11 = 1;
  while (v61 != v10)
  {
    memset(v73, 0, 13);
    if (v62 != v73)
    {
      v12 = (uint64_t)*v62;
      *(_QWORD *)((char *)v73 + 5) = *(_QWORD **)((char *)v62 + 5);
      v73[0] = v12;
      BYTE4(v73[1]) = *((_BYTE *)v62 + 12);
      if (BYTE4(v73[1]) <= 9u && ((1 << SBYTE4(v73[1])) & 0x33C) != 0)
      {
        v14 = (unint64_t *)v73[0];
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
    }
    if ((v11 & 1) == 0)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
    if (v4 == 2)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
    if (BYTE4(v73[1]) == 7)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"None", 4);
    }
    else
    {
      switch(BYTE4(v73[1]))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
          std::ostream::operator<<();
          std::stringbuf::str();
          v67[0] = v60;
          *(void ***)((char *)v67 + (_QWORD)*(v60 - 3)) = v59;
          v68 = v58;
          v16 = v57;
          goto LABEL_29;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v67);
          std::ostream::operator<<();
          std::stringbuf::str();
          v67[0] = v60;
          *(void ***)((char *)v67 + (_QWORD)*(v60 - 3)) = v59;
          v16 = MEMORY[0x24BEDB848] + 16;
          v68 = v58;
LABEL_29:
          v69 = v16;
          if (v71 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x219A198F4](&v72);
          break;
        case 2:
          if (*(char *)(v73[0] + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(v73[0] + 8), *(_QWORD *)(v73[0] + 16));
          }
          else
          {
            v17 = *(_OWORD *)(v73[0] + 8);
            v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(v73[0] + 24);
            *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v17;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v67, (_QWORD *)(v73[0] + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v67, (uint64_t *)(v73[0] + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v67, (_QWORD *)(v73[0] + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v73, &v66);
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v67, (_QWORD *)(v73[0] + 8));
          break;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return result;
      }
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v66;
      else
        v18 = (std::string *)v66.__r_.__value_.__r.__words[0];
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      else
        size = v66.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v18, size);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (v4 == 2)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
    switch(BYTE4(v73[1]))
    {
      case 2:
        v20 = (unint64_t *)v73[0];
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          v23 = v73[0];
          if (v73[0])
          {
            if (*(char *)(v73[0] + 31) < 0)
              operator delete(*(void **)(v73[0] + 8));
            v24 = v23;
            v25 = 0x1012C404EF22A49;
            goto LABEL_85;
          }
        }
        break;
      case 3:
        v37 = (unint64_t *)v73[0];
        do
        {
          v38 = __ldaxr(v37);
          v39 = v38 - 1;
        }
        while (__stlxr(v39, v37));
        if (!v39)
        {
          v40 = v73[0];
          if (v73[0])
          {
            v41 = *(void **)(v73[0] + 8);
            if (v41)
            {
              *(_QWORD *)(v73[0] + 16) = v41;
              operator delete(v41);
            }
            v24 = v40;
            v25 = 0x1080C409938AC02;
            goto LABEL_85;
          }
        }
        break;
      case 4:
        v26 = (unint64_t *)v73[0];
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v29 = v73[0];
          if (v73[0])
          {
            v67[0] = (void **)(v73[0] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v67);
            goto LABEL_78;
          }
        }
        break;
      case 5:
        v42 = (unint64_t *)v73[0];
        do
        {
          v43 = __ldaxr(v42);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v42));
        if (!v44)
        {
          v29 = v73[0];
          if (v73[0])
          {
            v67[0] = (void **)(v73[0] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v67);
LABEL_78:
            v24 = v29;
            v25 = 0x1020C405E66F15BLL;
            goto LABEL_85;
          }
        }
        break;
      case 8:
        v45 = (unint64_t *)v73[0];
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          v48 = v73[0];
          if (v73[0])
          {
            boost::detail::shared_count::~shared_count((unsigned int **)(v73[0] + 16));
            v24 = v48;
            v36 = -235920773;
            goto LABEL_84;
          }
        }
        break;
      case 9:
        v30 = (unint64_t *)v73[0];
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          v33 = v73[0];
          if (v73[0])
          {
            v34 = *(void **)(v73[0] + 48);
            if (v34)
            {
              *(_QWORD *)(v73[0] + 56) = v34;
              operator delete(v34);
            }
            v35 = *(void **)(v33 + 24);
            if (v35)
            {
              *(_QWORD *)(v33 + 32) = v35;
              operator delete(v35);
            }
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v33 + 8);
            v24 = v33;
            v36 = 2071181815;
LABEL_84:
            v25 = v36 | 0x1030C4000000000;
LABEL_85:
            MEMORY[0x219A19A08](v24, v25);
          }
        }
        break;
      default:
        break;
    }
    turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)&v61);
    v11 = 0;
  }
  turi::gl_sarray_range::~gl_sarray_range(v74);
  v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\n", 1);
  v63[0] = &off_24D91E0A8;
  v50 = v65;
  if (v65)
  {
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v64;
  if (v64)
  {
    v54 = (unint64_t *)&v64->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  return a1;
}

void sub_217F9B518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray_range::begin(turi::gl_sarray_range *this)
{
  return 0;
}

uint64_t turi::gl_sarray_range::end(turi::gl_sarray_range *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 72) - *(_QWORD *)(*((_QWORD *)this + 2) + 56);
}

void turi::sarray<turi::flexible_type>::get_reader(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(_BYTE *)(a1 + 249) == 0, "Cannot open an SArraying which is still writing.");
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 176) = 0;
  turi::sarray_reader<turi::flexible_type>::sarray_reader(v4);
  *a2 = v4;
  turi::sarray_reader<turi::flexible_type>::init(v4, a1, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_217F9B808(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<turi::sarray_reader<turi::flexible_type>>::operator=[abi:ne180100]<turi::sarray_reader<turi::flexible_type>,std::default_delete<turi::sarray_reader<turi::flexible_type>>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v5 = (_QWORD *)operator new();
  v6 = *a2;
  *v5 = &unk_24D91E558;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v6;
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD **turi::gl_sarray_range::gl_sarray_range(_QWORD **a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;

  v39 = a4;
  v40 = a3;
  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = 0;
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  std::allocate_shared[abi:ne180100]<turi::sarray_reader_buffer<turi::flexible_type>,std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,std::shared_ptr<turi::sarray_reader<turi::flexible_type>> &,unsigned long &,unsigned long &,void>(a2, &v40, &v39, &v38);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v5, &v38);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((*v5)[11] < (unint64_t)(*v5)[9])
  {
    v9 = turi::sarray_reader_buffer<turi::flexible_type>::next(*v5);
    if ((_QWORD **)v9 != a1)
    {
      switch(*((_BYTE *)a1 + 12))
      {
        case 2:
          v10 = *a1;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            v13 = *a1;
            if (!*a1)
              goto LABEL_46;
            if (*((char *)v13 + 31) < 0)
              operator delete((void *)v13[1]);
            v14 = v13;
            v15 = 0x1012C404EF22A49;
            goto LABEL_45;
          }
          break;
        case 3:
          v16 = *a1;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            v19 = *a1;
            if (!*a1)
              goto LABEL_46;
            v20 = (void *)v19[1];
            if (v20)
            {
              v19[2] = (unint64_t)v20;
              operator delete(v20);
            }
            v14 = v19;
            v15 = 0x1080C409938AC02;
            goto LABEL_45;
          }
          break;
        case 4:
          v21 = *a1;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v24 = *a1;
            if (!*a1)
              goto LABEL_46;
            *(_QWORD *)&v38 = v24 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
            goto LABEL_33;
          }
          break;
        case 5:
          v25 = *a1;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            v24 = *a1;
            if (!*a1)
              goto LABEL_46;
            *(_QWORD *)&v38 = v24 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
LABEL_33:
            v14 = v24;
            v15 = 0x1020C405E66F15BLL;
            goto LABEL_45;
          }
          break;
        case 8:
          v28 = *a1;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
          {
            v31 = *a1;
            if (!*a1)
              goto LABEL_46;
            boost::detail::shared_count::~shared_count((unsigned int **)v31 + 2);
            v14 = v31;
            v32 = -235920773;
            goto LABEL_44;
          }
          break;
        case 9:
          v33 = *a1;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            if (*a1)
            {
              v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*a1);
              v32 = 2071181815;
LABEL_44:
              v15 = v32 | 0x1030C4000000000;
LABEL_45:
              MEMORY[0x219A19A08](v14, v15);
            }
LABEL_46:
            *a1 = 0;
          }
          break;
        default:
          break;
      }
      v36 = *(_QWORD **)v9;
      *(_QWORD **)((char *)a1 + 5) = *(_QWORD **)(v9 + 5);
      *a1 = v36;
      *((_BYTE *)a1 + 12) = *(_BYTE *)(v9 + 12);
      *(_BYTE *)(v9 + 12) = 0;
    }
  }
  return a1;
}

void sub_217F9BB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t **v10;
  uint64_t v11;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v11);
  switch(*((_BYTE *)v10 + 12))
  {
    case 2:
      v13 = *v10;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (v15)
        goto LABEL_40;
      v16 = *v10;
      if (!*v10)
        goto LABEL_39;
      if (*((char *)v16 + 31) < 0)
        operator delete((void *)v16[1]);
      v17 = v16;
      v18 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v27 = *v10;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_40;
      v30 = *v10;
      if (!*v10)
        goto LABEL_39;
      v31 = (void *)v30[1];
      if (v31)
      {
        v30[2] = (unint64_t)v31;
        operator delete(v31);
      }
      v17 = v30;
      v18 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v19 = *v10;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (v21)
        goto LABEL_40;
      v22 = *v10;
      if (!*v10)
        goto LABEL_39;
      a10 = (void **)(v22 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_31;
    case 5:
      v32 = *v10;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v22 = *v10;
      if (!*v10)
        goto LABEL_39;
      a10 = (void **)(v22 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_31:
      v17 = v22;
      v18 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v35 = *v10;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (v37)
        goto LABEL_40;
      v38 = *v10;
      if (!*v10)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v38 + 2);
      v17 = v38;
      v26 = -235920773;
      goto LABEL_37;
    case 9:
      v23 = *v10;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (v25)
        goto LABEL_40;
      if (!*v10)
        goto LABEL_39;
      v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v10);
      v26 = 2071181815;
LABEL_37:
      v18 = v26 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v17, v18);
LABEL_39:
      *v10 = 0;
LABEL_40:
      *v10 = 0;
      *((_DWORD *)v10 + 2) = 0;
      *((_BYTE *)v10 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t turi::sarray_reader_buffer<turi::flexible_type>::next(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[6];
  v3 = *a1;
  if (v2 == (a1[1] - *a1) >> 4)
  {
    v4 = a1[8];
    if (a1[10] >= (unint64_t)(a1[9] - v4))
      v5 = a1[9] - v4;
    else
      v5 = a1[10];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1[5] + 48))(a1[5], v4, v5 + v4, a1);
    v2 = 0;
    a1[8] += v5;
    v3 = *a1;
  }
  ++a1[11];
  a1[6] = v2 + 1;
  return v3 + 16 * v2;
}

uint64_t *turi::gl_sarray_range::iterator::increment(turi::gl_sarray_range::iterator *this)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unsigned int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;

  v2 = *((_QWORD *)this + 1);
  ++*(_QWORD *)this;
  result = *(uint64_t **)(v2 + 16);
  if (result[11] < (unint64_t)result[9])
  {
    result = (uint64_t *)turi::sarray_reader_buffer<turi::flexible_type>::next(result);
    v4 = *((_QWORD *)this + 1);
    if (result != (uint64_t *)v4)
    {
      v5 = result;
      switch(*(_BYTE *)(v4 + 12))
      {
        case 2:
          v6 = *(unint64_t **)v4;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            v9 = *(unint64_t **)v4;
            if (!*(_QWORD *)v4)
              goto LABEL_41;
            if (*((char *)v9 + 31) < 0)
              operator delete((void *)v9[1]);
            v10 = v9;
            v11 = 0x1012C404EF22A49;
            goto LABEL_40;
          }
          break;
        case 3:
          v12 = *(unint64_t **)v4;
          do
          {
            v13 = __ldaxr(v12);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v12));
          if (!v14)
          {
            v15 = *(unint64_t **)v4;
            if (!*(_QWORD *)v4)
              goto LABEL_41;
            v16 = (void *)v15[1];
            if (v16)
            {
              v15[2] = (unint64_t)v16;
              operator delete(v16);
            }
            v10 = v15;
            v11 = 0x1080C409938AC02;
            goto LABEL_40;
          }
          break;
        case 4:
          v17 = *(unint64_t **)v4;
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            v20 = *(unint64_t **)v4;
            if (!*(_QWORD *)v4)
              goto LABEL_41;
            v33 = (void **)(v20 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v33);
            goto LABEL_28;
          }
          break;
        case 5:
          v21 = *(unint64_t **)v4;
          do
          {
            v22 = __ldaxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
          {
            v20 = *(unint64_t **)v4;
            if (!*(_QWORD *)v4)
              goto LABEL_41;
            v33 = (void **)(v20 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v33);
LABEL_28:
            v10 = v20;
            v11 = 0x1020C405E66F15BLL;
            goto LABEL_40;
          }
          break;
        case 8:
          v24 = *(unint64_t **)v4;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            v27 = *(unint64_t **)v4;
            if (!*(_QWORD *)v4)
              goto LABEL_41;
            boost::detail::shared_count::~shared_count((unsigned int **)v27 + 2);
            v10 = v27;
            v28 = -235920773;
            goto LABEL_39;
          }
          break;
        case 9:
          v29 = *(unint64_t **)v4;
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            result = *(uint64_t **)v4;
            if (*(_QWORD *)v4)
            {
              v10 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(result);
              v28 = 2071181815;
LABEL_39:
              v11 = v28 | 0x1030C4000000000;
LABEL_40:
              result = (uint64_t *)MEMORY[0x219A19A08](v10, v11);
            }
LABEL_41:
            *(_QWORD *)v4 = 0;
          }
          break;
        default:
          break;
      }
      v32 = *v5;
      *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)v5 + 5);
      *(_QWORD *)v4 = v32;
      *(_BYTE *)(v4 + 12) = *((_BYTE *)v5 + 12);
      *((_BYTE *)v5 + 12) = 0;
    }
  }
  return result;
}

uint64_t turi::gl_sarray_range::iterator::dereference(turi::gl_sarray_range::iterator *this)
{
  return *((_QWORD *)this + 1);
}

_QWORD *turi::gl_sarray_writer_impl::gl_sarray_writer_impl(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v22;
  __int128 *v23;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)a1 + 1) = 0u;
  v5 = a1 + 2;
  a1[4] = 0;
  *(_OWORD *)a1 = 0u;
  if (a3 == -1)
    v6 = turi::SFRAME_DEFAULT_NUM_SEGMENTS;
  else
    v6 = a3;
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v22);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)a1, &v22);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  turi::sarray<turi::flexible_type>::open_for_write(*a1, v6, 0);
  turi::sarray<turi::flexible_type>::set_type(*a1, a2);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::resize(v5, v10);
  v11 = 0;
  v12 = 64;
  while (v11 < (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 32))(&v22, *a1, v11);
    v13 = *v5;
    v14 = *v5 + v12;
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v14 - 64), (uint64_t)&v22);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v14 - 32), (uint64_t)v24);
    std::__function::__value_func<void ()(std::vector<turi::flexible_type> const&)>::operator=[abi:ne180100]((_QWORD *)(v13 + v12), (uint64_t)v26);
    v15 = v27;
    if (v27 == v26)
    {
      v15 = v26;
      v16 = 4;
    }
    else
    {
      if (!v27)
        goto LABEL_16;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_16:
    v17 = v25;
    if (v25 == v24)
    {
      v17 = v24;
      v18 = 4;
    }
    else
    {
      if (!v25)
        goto LABEL_21;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_21:
    v19 = v23;
    if (v23 == &v22)
    {
      v19 = &v22;
      v20 = 4;
    }
    else
    {
      if (!v23)
        goto LABEL_26;
      v20 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_26:
    ++v11;
    v12 += 96;
  }
  return a1;
}

void sub_217F9C218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::open_for_write(uint64_t a1, uint64_t a2, char a3)
{
  turi::fileio::fixed_size_cache_manager *v6;
  uint64_t instance;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13[2];
  char v14;
  std::string v15;
  void *__p[2];
  char v17;
  std::string __str;

  v6 = (turi::fileio::fixed_size_cache_manager *)assert_msg(*(_BYTE *)(a1 + 248) == 0, "Attempting to init an SArray which has already been inited");
  instance = turi::fileio::fixed_size_cache_manager::get_instance(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, ".sidx");
  turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)__p, &__str);
  if (v17 < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 152), &__str);
  v8 = operator new();
  *(_QWORD *)v8 = &unk_24D91E6C0;
  *(_BYTE *)(v8 + 8) = 0;
  v9 = pthread_mutex_init((pthread_mutex_t *)(v8 + 24), 0);
  assert_msg(v9 == 0, "Mutex create error %d", v9);
  *(_QWORD *)(v8 + 160) = 0;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_QWORD *)(v8 + 88) = 128;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 248) = 0u;
  *(_BYTE *)(v8 + 376) = 0;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_QWORD *)(v8 + 384) = 0;
  *(_QWORD *)(v8 + 392) = 0;
  *(_QWORD *)(v8 + 400) = 0;
  *(_QWORD *)(a1 + 176) = v8;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v15 = __str;
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, &v15, a2, 1);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((a3 & 1) == 0)
      goto LABEL_12;
  }
  else if ((a3 & 1) == 0)
  {
    goto LABEL_12;
  }
  v10 = *(_QWORD *)(a1 + 176);
  std::string::basic_string[abi:ne180100]<0>(v13, "disable_padding");
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v10 + 24))(v10, v13, 1);
  if (v14 < 0)
    operator delete(v13[0]);
LABEL_12:
  *(_WORD *)(a1 + 248) = 257;
  v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v11);
  v12 = *(_OWORD *)(v11 + 24);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(v11 + 40);
  *(_OWORD *)(a1 + 32) = v12;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v11 + 48));
  if (a1 + 8 != v11)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v11 + 72), *(_QWORD *)(v11 + 80), (uint64_t)(*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v11 + 96), *(__int128 **)(v11 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 104) - *(_QWORD *)(v11 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(v11 + 120), (__int128 *)(v11 + 128));
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_217F9C4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

void turi::sarray<turi::flexible_type>::set_type(uint64_t a1, int a2)
{
  std::string __p;
  void *v5[2];
  char v6;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(unsigned __int8 *)(a1 + 249), "SArray not opened for writing");
  std::string::basic_string[abi:ne180100]<0>(v5, "__type__");
  std::to_string(&__p, a2);
  turi::sarray<turi::flexible_type>::set_metadata(a1, (__int128 *)v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_217F9C5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t i;

  v2 = result;
  v3 = (_QWORD *)result[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *result) >> 5);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (uint64_t *)std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__append(result, v6);
  if (!v5)
  {
    for (i = *result + 96 * a2;
          v3 != (_QWORD *)i;
          result = std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v3))
    {
      v3 -= 12;
    }
    v2[1] = i;
  }
  return result;
}

uint64_t turi::gl_sarray_writer_impl::write(turi::gl_sarray_writer_impl *this, const turi::flexible_type *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 3) - v3) >> 5) <= a3)
    turi::gl_sarray_writer_impl::write(turi::flexible_type const&,unsigned long)::$_0::operator()();
  v4 = *(_QWORD *)(v3 + 96 * a3 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, const turi::flexible_type *))(*(_QWORD *)v4 + 48))(v4, a2);
}

void turi::gl_sarray_writer_impl::write(turi::flexible_type const&,unsigned long)::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_output_iterators.size()", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sarray.cpp", "operator()", 986, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::gl_sarray_writer_impl::write(turi::flexible_type const&,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217F9C8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::gl_sarray_writer_impl::close(turi::gl_sarray_writer_impl *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *i;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  v5 = (_QWORD *)*((_QWORD *)this + 2);
  for (i = (_QWORD *)*((_QWORD *)this + 3);
        i != v5;
        std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::destroy[abi:ne180100]((uint64_t)this + 32, i))
  {
    i -= 12;
  }
  *((_QWORD *)this + 3) = v5;
  (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v22);
  v6 = v22;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v20 = *(_QWORD *)this;
  v21 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  turi::unity_sarray::construct_from_sarray(v6, &v20);
  v10 = v21;
  if (v21)
  {
    v11 = (unint64_t *)&v21->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v19 = v22;
  v22 = 0uLL;
  *(_QWORD *)a2 = &off_24D91E0A8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100]((_QWORD *)(a2 + 8), (uint64_t *)&v19);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_217F9CAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *turi::gl_sarray_writer::gl_sarray_writer(uint64_t *a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  *a1 = 0;
  v6 = (_QWORD *)operator new();
  turi::gl_sarray_writer_impl::gl_sarray_writer_impl(v6, a2, a3);
  v7 = *a1;
  *a1 = (uint64_t)v6;
  if (v7)
    std::default_delete<turi::gl_sarray_writer_impl>::operator()[abi:ne180100]((uint64_t)a1, v7);
  return a1;
}

void sub_217F9CB44(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x219A19A08](v2, 0x20C40769AC3DALL);
  v4 = *v1;
  *v1 = 0;
  if (v4)
    std::default_delete<turi::gl_sarray_writer_impl>::operator()[abi:ne180100]((uint64_t)v1, v4);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sarray_writer::write(turi::gl_sarray_writer_impl **this, const turi::flexible_type *a2, unint64_t a3)
{
  return turi::gl_sarray_writer_impl::write(*this, a2, a3);
}

void sub_217F9CD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0)
    operator delete(__p);
  a15 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a16 = MEMORY[0x24BEDB848] + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a32);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::str[abi:ne180100]()
{
  return std::stringbuf::str();
}

uint64_t std::function<void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t boost::detail::function::functor_manager<turi::in_parallel(std::function<void ()(unsigned long,unsigned long)> const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  __int128 v5;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x800000021870C938 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x800000021870C938 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = v4;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
  }
  else
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<turi::in_parallel(std::function<void ()(unsigned long,unsigned long)> const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  return std::function<void ()(unsigned long,unsigned long)>::operator()(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void turi::gl_sarray_range::~gl_sarray_range(unint64_t **this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v31;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
  switch(*((_BYTE *)this + 12))
  {
    case 2:
      v2 = *this;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *this;
        if (*this)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *this;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *this;
        if (*this)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *this;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *this;
        if (*this)
        {
          v31 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *this;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *this;
        if (*this)
        {
          v31 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *this;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *this;
        if (*this)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *this;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *this;
        if (*this)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
}

_QWORD *std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_217F9D114(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<turi::flex_type_enum>::__emplace_unique_key_args<turi::flex_type_enum,turi::flex_type_enum>(uint64_t **a1, char *a2, _BYTE *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((char *)v5 + 25);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v10 + 25) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__function::__func<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1,std::allocator<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1,std::allocator<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24D91E100;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1,std::allocator<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D91E100;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1,std::allocator<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  double v51;
  size_t v52;
  unsigned int v53;
  double *v54;
  double *v55;
  unint64_t v56;
  double *v57;
  uint64_t v58;
  unint64_t v59;
  double *v60;
  double *v61;
  uint64_t v62;
  double v63;
  double v64;
  unsigned int v65;
  double v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  char v74;
  _QWORD *v75;
  _QWORD *v76;
  char v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  double v84;
  double v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  char v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  _QWORD *v100[2];
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = **(_QWORD **)(a1 + 8);
  v6 = v5 * *a2;
  v7 = v6 / *a3;
  turi::gl_sarray::range_iterator(*(turi::gl_sarray **)(a1 + 16), v7, (v5 + v6) / *a3, v100);
  v8 = *(_QWORD *)(v101 + 72) - *(_QWORD *)(v101 + 56);
  v94 = 0;
  v95 = (unsigned __int8 *)v100;
  v9 = -1;
  while (v94 != v8)
  {
    v10 = v95;
    switch(byte_254FEE1C4)
    {
      case 0:
        switch(v95[12])
        {
          case 0u:
            if (*(_QWORD *)v95 == turi::FLEX_UNDEFINED)
              goto LABEL_98;
            goto LABEL_79;
          case 1u:
            v66 = *(double *)v95;
            v67 = turi::FLEX_UNDEFINED;
            goto LABEL_118;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v95 << 8) >> 8 && !*((_DWORD *)v95 + 2))
              goto LABEL_98;
            goto LABEL_79;
          default:
            goto LABEL_145;
        }
      case 1:
        switch(v95[12])
        {
          case 0u:
            v66 = *(double *)&turi::FLEX_UNDEFINED;
            v67 = *(_QWORD *)v95;
LABEL_118:
            v85 = (double)v67;
            goto LABEL_119;
          case 1u:
            v66 = *(double *)v95;
            v85 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_119:
            if (v66 != v85)
              goto LABEL_79;
            goto LABEL_98;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            v84 = vabdd_f64((double)*((int *)v95 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v95 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
            goto LABEL_123;
          default:
            goto LABEL_145;
        }
      case 2:
        v49 = v95[12];
        if (v49 - 3 < 7 || v49 < 2)
          goto LABEL_79;
        if (v49 != 2)
          goto LABEL_145;
        v51 = *(double *)v95;
        if (*(char *)(*(_QWORD *)v95 + 31) < 0)
          v52 = *(_QWORD *)(*(_QWORD *)&v51 + 16);
        else
          v52 = *(unsigned __int8 *)(*(_QWORD *)v95 + 31);
        if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
          v86 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
        else
          v86 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        if (v52 != v86)
          goto LABEL_79;
        v87 = (unsigned __int8 *)(*(_QWORD *)&v51 + 8);
        if ((*(_BYTE *)(*(_QWORD *)v95 + 31) & 0x80) != 0)
          v87 = *(unsigned __int8 **)v87;
        v88 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
        if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        {
          v88 = *(unsigned __int8 **)v88;
          if ((*(_BYTE *)(*(_QWORD *)v95 + 31) & 0x80) == 0)
          {
LABEL_134:
            if (!v52)
              goto LABEL_98;
            do
            {
              if (*v87 != *v88)
                goto LABEL_79;
              ++v87;
              ++v88;
              --v52;
            }
            while (v52);
            goto LABEL_98;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)v95 + 31) & 0x80) == 0)
        {
          goto LABEL_134;
        }
        if (memcmp(v87, v88, v52))
          goto LABEL_79;
LABEL_98:
        ++v7;
        turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)&v94);
        break;
      case 3:
        v53 = v95[12];
        if (v53 > 9)
          goto LABEL_145;
        if (v53 != 3)
          goto LABEL_79;
        v54 = *(double **)(*(_QWORD *)v95 + 8);
        v55 = *(double **)(*(_QWORD *)v95 + 16);
        v56 = v55 - v54;
        v57 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v56 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v57) >> 3)
          goto LABEL_79;
        if (v55 == v54)
          goto LABEL_98;
        if (v56 <= 1)
          v58 = 1;
        else
          v58 = v55 - v54;
        if (*v54 != *v57)
          goto LABEL_79;
        v59 = 0;
        v60 = v57 + 1;
        v61 = v54 + 1;
        v62 = v58 - 1;
        while (v62 != v59)
        {
          v63 = v61[v59];
          v64 = v60[v59++];
          if (v63 != v64)
          {
            if (v59 < v56)
              goto LABEL_79;
            goto LABEL_98;
          }
        }
        goto LABEL_98;
      case 4:
        v11 = v95[12];
        if (v11 > 9)
          goto LABEL_145;
        if (v11 != 4)
          goto LABEL_79;
        v12 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v96, (uint64_t *)(*(_QWORD *)v95 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_108;
      case 5:
        v68 = v95[12];
        if (v68 > 9)
          goto LABEL_145;
        if (v68 != 5)
          goto LABEL_79;
        v12 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v96, (uint64_t **)(*(_QWORD *)v95 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_108;
      case 6:
        switch(v95[12])
        {
          case 0u:
            if (*(_QWORD *)v95 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FEE1C0)
              goto LABEL_98;
            goto LABEL_79;
          case 1u:
            v84 = vabdd_f64(*(double *)v95, (double)dword_254FEE1C0 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_123:
            if (v84 < 0.0000005)
              goto LABEL_98;
            goto LABEL_79;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v95) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v95 + 2) == dword_254FEE1C0)
            {
              goto LABEL_98;
            }
            goto LABEL_79;
          default:
            goto LABEL_145;
        }
      case 7:
        v65 = v95[12];
        if (v65 < 7 || v65 - 8 < 2)
          goto LABEL_79;
        if (v65 != 7)
          goto LABEL_145;
        goto LABEL_98;
      case 8:
        v69 = v95[12];
        if (v69 < 8 || v69 == 9)
          goto LABEL_79;
        if (v69 != 8)
          goto LABEL_145;
        v12 = turi::image_type::operator==(*(_QWORD *)v95 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_108:
        if ((v12 & 1) != 0)
          goto LABEL_98;
        goto LABEL_79;
      case 9:
        v13 = v95[12];
        if (v13 < 9)
          goto LABEL_79;
        if (v13 != 9)
        {
LABEL_145:
          turi::flexible_type_fail(0);
          __break(1u);
LABEL_147:
          v90 = *(uint64_t **)(*(_QWORD *)v10 + 24);
          v89 = *(uint64_t **)(*(_QWORD *)v10 + 32);
          if (v89 != v90 && *(_QWORD *)(*(_QWORD *)v10 + 8))
          {
            v91 = 1;
            do
            {
              v92 = *v90++;
              v91 *= v92;
            }
            while (v90 != v89);
          }
LABEL_146:
          turi::check_vector_equal_size(turi::gl_sarray const&)::$_0::operator()();
        }
        v14 = *(_QWORD **)v95;
        if (turi::FLEX_UNDEFINED == *(_QWORD *)v95)
          goto LABEL_98;
        v93 = turi::FLEX_UNDEFINED;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v14 + 1), turi::FLEX_UNDEFINED + 8))
          goto LABEL_79;
        v16 = (char *)v14[3];
        v15 = (char *)v14[4];
        v17 = v15 - v16;
        if (v15 == v16)
          goto LABEL_98;
        if (!v14[1])
          goto LABEL_98;
        v18 = 1;
        do
        {
          v19 = *(_QWORD *)v16;
          v16 += 8;
          v18 *= v19;
        }
        while (v16 != v15);
        if (!v18)
          goto LABEL_98;
        v97 = 0;
        std::vector<unsigned long>::vector(&v98, v17 >> 3, &v97);
        v20 = v98;
        v21 = v99;
        v22 = **(_QWORD **)(v93 + 8);
        v23 = (char *)v99 - (char *)v98;
        v24 = v99 - v98;
        v25 = v24 - 1;
        if (v24 <= 1)
          v26 = 1;
        else
          v26 = v99 - v98;
        while (1)
        {
          if (v21 == v20)
          {
            v34 = 0;
            v35 = *(double *)(*(_QWORD *)v14[1] + 8 * v14[9]);
          }
          else
          {
            v27 = 0;
            v28 = (uint64_t *)v14[6];
            v29 = v20;
            v30 = v26;
            do
            {
              v32 = *v29++;
              v31 = v32;
              v33 = *v28++;
              v27 += v33 * v31;
              --v30;
            }
            while (v30);
            v34 = 0;
            v35 = *(double *)(*(_QWORD *)v14[1] + 8 * (v14[9] + v27));
            v36 = *(uint64_t **)(v93 + 48);
            v37 = v20;
            v38 = v26;
            do
            {
              v40 = *v37++;
              v39 = v40;
              v41 = *v36++;
              v34 += v41 * v39;
              --v38;
            }
            while (v38);
          }
          if (v35 != *(double *)(v22 + 8 * (*(_QWORD *)(v93 + 72) + v34)))
            break;
          v42 = v24;
          v43 = v24 - 1;
          if (v23 >= 1)
          {
            v44 = v14[3];
            v45 = v20[v25] + 1;
            v20[v25] = v45;
            v46 = (v23 & 0xFFFFFFFFFFFFFFF8) - 16;
            v43 = v24 - 1;
            if (v45 >= *(_QWORD *)(v44 + 8 * v25))
            {
              while (1)
              {
                *(uint64_t *)((char *)v20 + v46 + 8) = 0;
                if (v43 <= 0)
                  break;
                --v43;
                v47 = *(uint64_t *)((char *)v20 + v46) + 1;
                *(uint64_t *)((char *)v20 + v46) = v47;
                v48 = *(_QWORD *)(v44 + v46);
                v46 -= 8;
                if (v47 < v48)
                {
                  v42 = 1;
                  goto LABEL_36;
                }
              }
LABEL_39:
              v99 = v20;
              operator delete(v20);
              goto LABEL_98;
            }
            v42 = 1;
            v43 = v24 - 1;
          }
LABEL_36:
          if (!v42 || v43 < 0)
          {
            if (!v20)
              goto LABEL_98;
            goto LABEL_39;
          }
        }
        if (v20)
        {
          v99 = v20;
          operator delete(v20);
        }
LABEL_79:
        if (v9 == -1)
        {
          v9 = 1;
          switch(v10[12])
          {
            case 3u:
              v75 = (_QWORD *)(*(_QWORD *)v10 + 8);
              v76 = (_QWORD *)(*(_QWORD *)v10 + 16);
              v77 = 3;
              goto LABEL_96;
            case 4u:
              v75 = (_QWORD *)(*(_QWORD *)v10 + 8);
              v76 = (_QWORD *)(*(_QWORD *)v10 + 16);
              v77 = 4;
              goto LABEL_96;
            case 5u:
              v75 = (_QWORD *)(*(_QWORD *)v10 + 8);
              v76 = (_QWORD *)(*(_QWORD *)v10 + 16);
              v77 = 5;
LABEL_96:
              v9 = (uint64_t)(*v76 - *v75) >> v77;
              break;
            case 9u:
              v82 = *(uint64_t **)(*(_QWORD *)v10 + 24);
              v81 = *(uint64_t **)(*(_QWORD *)v10 + 32);
              if (v81 == v82 || !*(_QWORD *)(*(_QWORD *)v10 + 8))
              {
                v9 = 0;
              }
              else
              {
                v9 = 1;
                do
                {
                  v83 = *v82++;
                  v9 *= v83;
                }
                while (v82 != v81);
              }
              break;
            default:
              break;
          }
          *(_QWORD *)(**(_QWORD **)(a1 + 24) + 8 * v4) = v9;
        }
        else
        {
          v71 = 1;
          switch(v10[12])
          {
            case 3u:
              v72 = (_QWORD *)(*(_QWORD *)v10 + 8);
              v73 = (_QWORD *)(*(_QWORD *)v10 + 16);
              v74 = 3;
              goto LABEL_86;
            case 4u:
              v72 = (_QWORD *)(*(_QWORD *)v10 + 8);
              v73 = (_QWORD *)(*(_QWORD *)v10 + 16);
              v74 = 4;
              goto LABEL_86;
            case 5u:
              v72 = (_QWORD *)(*(_QWORD *)v10 + 8);
              v73 = (_QWORD *)(*(_QWORD *)v10 + 16);
              v74 = 5;
LABEL_86:
              v71 = (uint64_t)(*v73 - *v72) >> v74;
              break;
            case 9u:
              v79 = *(uint64_t **)(*(_QWORD *)v10 + 24);
              v78 = *(uint64_t **)(*(_QWORD *)v10 + 32);
              if (v78 == v79)
              {
                v71 = 0;
              }
              else
              {
                v71 = *(_QWORD *)(*(_QWORD *)v10 + 8);
                if (v71)
                {
                  v71 = 1;
                  do
                  {
                    v80 = *v79++;
                    v71 *= v80;
                  }
                  while (v79 != v78);
                }
              }
              break;
            default:
              break;
          }
          if (v9 != v71)
          {
            switch(v10[12])
            {
              case 9u:
                goto LABEL_147;
              default:
                goto LABEL_146;
            }
          }
        }
        goto LABEL_98;
      default:
        goto LABEL_145;
    }
  }
  turi::gl_sarray_range::~gl_sarray_range(v100);
}

void sub_217F9DB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  turi::gl_sarray_range::~gl_sarray_range((unint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1,std::allocator<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1,std::allocator<turi::check_vector_equal_size(turi::gl_sarray const&)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t *std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D91E1A8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_217F9DC20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::unity_sarray *,std::shared_ptr<turi::unity_sarray>::__shared_ptr_default_delete<turi::unity_sarray,turi::unity_sarray>,std::allocator<turi::unity_sarray>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::unity_sarray *,std::shared_ptr<turi::unity_sarray>::__shared_ptr_default_delete<turi::unity_sarray,turi::unity_sarray>,std::allocator<turi::unity_sarray>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[11],std::vector<turi::flexible_type> &,0>(uint64_t a1, char *a2, uint64_t **a3)
{
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void **v47;

  v5 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, a2);
  v5[3] = 0;
  v6 = v5 + 3;
  *(_QWORD *)((char *)v5 + 29) = 0;
  *((_BYTE *)v5 + 36) = 4;
  v7 = (_QWORD *)operator new();
  v8 = v7;
  *v7 = 0;
  v7[1] = 0;
  v9 = (void **)(v7 + 1);
  v7[2] = 0;
  v7[3] = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *v7 = 1;
  switch(*(_BYTE *)(a1 + 36))
  {
    case 2:
      if (*v7 != 1)
      {
        v10 = (_QWORD *)operator new();
        v11 = (_QWORD *)*v6;
        *v10 = *(_QWORD *)*v6;
        v12 = (std::string *)(v10 + 1);
        if (*((char *)v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v11[1], v11[2]);
        }
        else
        {
          v13 = *(_OWORD *)(v11 + 1);
          v10[3] = v11[3];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        *v6 = (uint64_t)v10;
        *v10 = 1;
        do
        {
          v43 = __ldaxr(v8);
          v44 = v43 - 1;
        }
        while (__stlxr(v44, v8));
        if (!v44)
        {
          if (*((char *)v8 + 31) < 0)
            operator delete(*v9);
          v19 = v8;
          v20 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
      }
      break;
    case 3:
      if (*v7 != 1)
      {
        v14 = (_QWORD *)operator new();
        v15 = (_QWORD *)*v6;
        *v14 = *(_QWORD *)*v6;
        v14[2] = 0;
        v14[3] = 0;
        v14[1] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14 + 1, (const void *)v15[1], v15[2], (uint64_t)(v15[2] - v15[1]) >> 3);
        *v6 = (uint64_t)v14;
        *v14 = 1;
        do
        {
          v16 = __ldaxr(v8);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v8));
        if (!v17)
        {
          v18 = *v9;
          if (*v9)
          {
            v8[2] = v18;
            operator delete(v18);
          }
          v19 = v8;
          v20 = 0x1080C409938AC02;
          goto LABEL_44;
        }
      }
      break;
    case 4:
      if (*v7 != 1)
      {
        v21 = (_QWORD *)operator new();
        v22 = (_QWORD *)*v6;
        *v21 = *(_QWORD *)*v6;
        v21[2] = 0;
        v21[3] = 0;
        v21[1] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v21 + 1, (uint64_t *)v22[1], (uint64_t *)v22[2], (uint64_t)(v22[2] - v22[1]) >> 4);
        *v6 = (uint64_t)v21;
        *v21 = 1;
        do
        {
          v23 = __ldaxr(v8);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v8));
        if (!v24)
        {
          v47 = v9;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v47);
          goto LABEL_22;
        }
      }
      break;
    case 5:
      if (*v7 != 1)
      {
        v25 = (_QWORD *)operator new();
        v26 = (_QWORD *)*v6;
        *v25 = *(_QWORD *)*v6;
        v25[2] = 0;
        v25[3] = 0;
        v25[1] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v25 + 1, (uint64_t *)v26[1], (uint64_t *)v26[2], (uint64_t)(v26[2] - v26[1]) >> 5);
        *v6 = (uint64_t)v25;
        *v25 = 1;
        do
        {
          v27 = __ldaxr(v8);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v8));
        if (!v28)
        {
          v47 = v9;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v47);
LABEL_22:
          v19 = v8;
          v20 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
      }
      break;
    case 8:
      if (*v7 != 1)
      {
        v29 = operator new();
        v30 = (_QWORD *)*v6;
        *(_QWORD *)v29 = *(_QWORD *)*v6;
        *(_QWORD *)(v29 + 8) = v30[1];
        v31 = v30[2];
        *(_QWORD *)(v29 + 16) = v31;
        if (v31)
        {
          v32 = (unsigned int *)(v31 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = *(_OWORD *)(v30 + 3);
        v35 = *(_OWORD *)(v30 + 5);
        *(_OWORD *)(v29 + 56) = *(_OWORD *)(v30 + 7);
        *(_OWORD *)(v29 + 40) = v35;
        *(_OWORD *)(v29 + 24) = v34;
        *v6 = v29;
        *(_QWORD *)v29 = 1;
        do
        {
          v36 = __ldaxr(v8);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v8));
        if (!v37)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v8 + 2);
          v19 = v8;
          v38 = -235920773;
          goto LABEL_36;
        }
      }
      break;
    case 9:
      if (*v7 != 1)
      {
        v39 = (_QWORD *)operator new();
        v40 = *v6 + 8;
        *v39 = *(_QWORD *)*v6;
        turi::flexible_type_impl::ndarray<double>::ndarray(v39 + 1, v40);
        *v6 = (uint64_t)v39;
        *v39 = 1;
        do
        {
          v41 = __ldaxr(v8);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v8));
        if (!v42)
        {
          v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v8);
          v38 = 2071181815;
LABEL_36:
          v20 = v38 | 0x1030C4000000000;
LABEL_44:
          MEMORY[0x219A19A08](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  v45 = *v6 + 8;
  if ((uint64_t **)v45 != a3)
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v45, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_217F9E0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t **v12;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;

  MEMORY[0x219A19A08](v11, 0x1012C404EF22A49);
  switch(*(_BYTE *)(v10 + 36))
  {
    case 2:
      v14 = *v12;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (v16)
        goto LABEL_40;
      v17 = *v12;
      if (!*v12)
        goto LABEL_39;
      if (*((char *)v17 + 31) < 0)
        operator delete((void *)v17[1]);
      v18 = v17;
      v19 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      v20 = *v12;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (v22)
        goto LABEL_40;
      v23 = *v12;
      if (!*v12)
        goto LABEL_39;
      v24 = (void *)v23[1];
      if (v24)
      {
        v23[2] = (unint64_t)v24;
        operator delete(v24);
      }
      v18 = v23;
      v19 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      v25 = *v12;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (v27)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_26;
    case 5:
      v29 = *v12;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (v31)
        goto LABEL_40;
      v28 = *v12;
      if (!*v12)
        goto LABEL_39;
      a10 = (void **)(v28 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_26:
      v18 = v28;
      v19 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      v32 = *v12;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (v34)
        goto LABEL_40;
      v35 = *v12;
      if (!*v12)
        goto LABEL_39;
      boost::detail::shared_count::~shared_count((unsigned int **)v35 + 2);
      v18 = v35;
      v36 = -235920773;
      goto LABEL_37;
    case 9:
      v37 = *v12;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (v39)
        goto LABEL_40;
      if (!*v12)
        goto LABEL_39;
      v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v12);
      v36 = 2071181815;
LABEL_37:
      v19 = v36 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x219A19A08](v18, v19);
LABEL_39:
      *v12 = 0;
LABEL_40:
      *(_QWORD *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_40;
  }
}

uint64_t std::map<std::string,turi::flexible_type>::map[abi:ne180100](uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type> const&>((uint64_t **)a1, v4, (const void **)&a2->__r_.__value_.__l.__data_, a2);
      a2 = (std::string *)((char *)a2 + 40);
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_217F9E378(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[2],turi::gl_sarray const&,0>(_QWORD *a1, char *a2, const turi::gl_sarray *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(v5 + 3), a3);
  return a1;
}

void sub_217F9E3C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [9],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[56] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_217F9E5AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MPSRNNMatrixId>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::set<turi::flexible_type>::set[abi:ne180100]<std::__wrap_iter<turi::flexible_type*>>(uint64_t a1, char *a2, char *a3, __n128 a4)
{
  _QWORD *v5;
  char *v7;

  *(_QWORD *)(a1 + 8) = 0;
  v5 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v7 = a2;
    do
    {
      std::__tree<turi::flexible_type>::__emplace_hint_unique_key_args<turi::flexible_type,turi::flexible_type const&>((uint64_t **)a1, v5, (uint64_t)v7, v7, a4);
      v7 += 16;
    }
    while (v7 != a3);
  }
  return a1;
}

void sub_217F9E630(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<turi::flexible_type>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<turi::flexible_type>::__emplace_hint_unique_key_args<turi::flexible_type,turi::flexible_type const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, char *a4, __n128 a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;
  uint64_t v13;

  v7 = std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(a1, a2, &v13, &v12, a3, a5);
  v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    std::__tree<turi::flexible_type>::__construct_node<turi::flexible_type const&>((uint64_t)a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v13, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<turi::flexible_type,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<turi::flexible_type,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t *std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5, __n128 a6)
{
  _QWORD *v10;
  _QWORD *v12;
  _QWORD *v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  __n128 v20;
  _QWORD *v21;

  v10 = a1 + 1;
  if (a1 + 1 == a2
    || std::less<turi::flexible_type>::operator()[abi:ne180100](a6, (uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v13 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v13;
        return v13 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v12 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v13 = v12;
        v12 = (_QWORD *)v12[1];
      }
      while (v12);
    }
    else
    {
      v18 = a2;
      do
      {
        v13 = (_QWORD *)v18[2];
        v19 = *v13 == (_QWORD)v18;
        v18 = v13;
      }
      while (v19);
    }
    if (std::less<turi::flexible_type>::operator()[abi:ne180100](a6, (uint64_t)(a1 + 2), (uint64_t)(v13 + 4), a5))goto LABEL_16;
    return std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>((uint64_t)a1, a3, a5, v20);
  }
  if (std::less<turi::flexible_type>::operator()[abi:ne180100](a6, (uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v15 = a2[1];
    if (v15)
    {
      v16 = (_QWORD *)a2[1];
      do
      {
        v17 = v16;
        v16 = (_QWORD *)*v16;
      }
      while (v16);
    }
    else
    {
      v21 = a2;
      do
      {
        v17 = (_QWORD *)v21[2];
        v19 = *v17 == (_QWORD)v21;
        v21 = v17;
      }
      while (!v19);
    }
    if (v17 != v10)
    {
      if (!std::less<turi::flexible_type>::operator()[abi:ne180100](v14, (uint64_t)(a1 + 2), a5, (uint64_t)(v17 + 4)))return std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>((uint64_t)a1, a3, a5, v20);
      v15 = *a4;
    }
    if (v15)
    {
      *a3 = v17;
      return v17;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *std::__tree<turi::flexible_type>::__construct_node<turi::flexible_type const&>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  unint64_t **v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;

  v5 = a1 + 8;
  result = operator new(0x30uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result[4] = 0;
  v7 = (unint64_t **)(result + 4);
  *((_DWORD *)result + 10) = 0;
  *((_BYTE *)result + 44) = 0;
  if (result + 4 != (_QWORD *)a2)
  {
    *(_QWORD *)((char *)result + 37) = *(_QWORD *)(a2 + 5);
    *v7 = *(unint64_t **)a2;
    v8 = a2[12];
    *((_BYTE *)result + 44) = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0)
    {
      v9 = *v7;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t std::less<turi::flexible_type>::operator()[abi:ne180100](__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t result;
  double *v6;
  double *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  double v13;
  double v14;
  BOOL v15;
  uint64_t v16;
  char v17;

  switch(*(_BYTE *)(a4 + 12))
  {
    case 0:
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
          v4 = *(_QWORD *)a3 < *(_QWORD *)a4;
          goto LABEL_26;
        case 1:
          v13 = *(double *)a3;
          v14 = (double)*(uint64_t *)a4;
          goto LABEL_36;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 6:
          v12 = *(_QWORD *)a4 <= (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
          return !v12;
        default:
          turi::apply_binary_op_ff();
      }
    case 1:
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
          v12 = *(double *)a4 <= (double)*(uint64_t *)a3;
          return !v12;
        case 1:
          v13 = *(double *)a3;
          v14 = *(double *)a4;
LABEL_36:
          v15 = v13 < v14;
          goto LABEL_38;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 6:
          v15 = (double)*(int *)(a3 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a3 << 8) >> 8) < *(double *)a4;
LABEL_38:
          result = v15;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 2:
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 2:
          return std::string::compare[abi:ne180100]((const void **)(*(_QWORD *)a3 + 8), (_BYTE *)(*(_QWORD *)a4 + 8)) >> 31;
        default:
          turi::apply_binary_op_ff();
      }
    case 3:
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 3:
          v6 = *(double **)(*(_QWORD *)a3 + 8);
          v7 = *(double **)(*(_QWORD *)a4 + 8);
          v8 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 16) - (_QWORD)v7) >> 3;
          v9 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v6) >> 3;
          if (*(double **)(*(_QWORD *)a3 + 16) == v6)
            return v9 < v8;
          if (v9 <= 1)
            v10 = 1;
          else
            v10 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a3 + 16) - (_QWORD)v6) >> 3;
          v11 = (uint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 16) - (_QWORD)v7) >> 3;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 4:
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 4:
          return turi::flexible_type_impl::lt_operator::operator()(a1, (uint64_t)&v17, (uint64_t *)(*(_QWORD *)a3 + 8), (_QWORD *)(*(_QWORD *)a4 + 8));
        default:
          turi::apply_binary_op_ff();
      }
    case 5:
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_30;
    case 6:
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
          v4 = *(_QWORD *)a3 < (uint64_t)(*(_QWORD *)a4 << 8) >> 8;
          goto LABEL_26;
        case 1:
          v12 = (double)*(int *)(a4 + 8) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)a4 << 8) >> 8) <= *(double *)a3;
          return !v12;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        case 6:
          v16 = (uint64_t)(*(_QWORD *)a3 << 8) >> 8;
          if (v16 < (uint64_t)(*(_QWORD *)a4 << 8) >> 8)
            return 1;
          if (v16 != (uint64_t)(*(_QWORD *)a4 << 8) >> 8)
            return 0;
          v4 = *(_DWORD *)(a3 + 8) < *(_DWORD *)(a4 + 8);
LABEL_26:
          result = v4;
          break;
        default:
          turi::apply_binary_op_ff();
      }
      return result;
    case 7:
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_30;
    case 8:
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_30;
        default:
          turi::apply_binary_op_ff();
      }
      goto LABEL_30;
    case 9:
      switch(*(_BYTE *)(a3 + 12))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          break;
        default:
          turi::apply_binary_op_ff();
      }
LABEL_30:
      turi::flexible_type_fail(0);
      return 0;
    default:
      turi::apply_binary_op_ff();
  }
  while (1)
  {
    if (!v11 || *v6 > *v7)
      return 0;
    if (*v6 < *v7)
      break;
    --v11;
    ++v6;
    ++v7;
    if (!--v10)
      return v9 < v8;
  }
  return 1;
}

_QWORD *std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(uint64_t a1, _QWORD *a2, uint64_t a3, __n128 a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v8 = a1 + 16;
    do
    {
      while (1)
      {
        v9 = v5;
        v10 = (uint64_t)(v5 + 4);
        if (!std::less<turi::flexible_type>::operator()[abi:ne180100](a4, v8, a3, (uint64_t)(v5 + 4)))
          break;
        v5 = (_QWORD *)*v9;
        v6 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (!std::less<turi::flexible_type>::operator()[abi:ne180100](a4, v8, v10, a3))
        break;
      v6 = v9 + 1;
      v5 = (_QWORD *)v9[1];
    }
    while (v5);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v9;
  return v6;
}

void std::unique_ptr<std::__tree_node<turi::flexible_type,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<turi::flexible_type,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<turi::flexible_type,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<turi::flexible_type,0>(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29;
  void *v30;
  void **v31;

  v1 = result;
  switch(*(_BYTE *)(result + 12))
  {
    case 2:
      v2 = *(unint64_t **)result;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)result;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_42;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)result;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v31 = (void **)(v16 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v31);
          goto LABEL_26;
        }
      }
      break;
    case 5:
      v17 = *(unint64_t **)result;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        v16 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v31 = (void **)(v16 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v31);
LABEL_26:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
      }
      break;
    case 8:
      v20 = *(unint64_t **)result;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v23 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v23 + 2);
          v6 = v23;
          v24 = -235920773;
          goto LABEL_41;
        }
      }
      break;
    case 9:
      v25 = *(unint64_t **)result;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = *(unint64_t **)result;
        if (*(_QWORD *)result)
        {
          v29 = (void *)v28[6];
          if (v29)
          {
            v28[7] = (unint64_t)v29;
            operator delete(v29);
          }
          v30 = (void *)v28[3];
          if (v30)
          {
            v28[4] = (unint64_t)v30;
            operator delete(v30);
          }
          std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v28 + 1));
          v6 = v28;
          v24 = 2071181815;
LABEL_41:
          v7 = v24 | 0x1030C4000000000;
LABEL_42:
          result = MEMORY[0x219A19A08](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(_BYTE *)(v1 + 12) = 0;
  return result;
}

void std::__tree<turi::flexible_type>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<turi::flexible_type>::destroy(a1, *a2);
    std::__tree<turi::flexible_type>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<turi::flexible_type,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<turi::flex_type_enum>::__append(unint64_t *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (unint64_t)v7 >= a2)
  {
    if (a2)
    {
      v14 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v14;
    }
    a1[1] = (unint64_t)v7;
  }
  else
  {
    v8 = *a1;
    v9 = &v7[-*a1];
    v10 = (unint64_t)&v9[a2];
    if ((uint64_t)&v9[a2] < 0)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)operator new(v12);
    else
      v13 = 0;
    v15 = &v9[(_QWORD)v13];
    v16 = &v9[(_QWORD)v13 + v4];
    do
    {
      (v9++)[(_QWORD)v13] = *a3;
      --v4;
    }
    while (v4);
    if (v7 != (_BYTE *)v8)
    {
      v17 = &v7[~v8];
      do
      {
        v18 = *--v7;
        (v17--)[(_QWORD)v13] = v18;
      }
      while (v7 != (_BYTE *)v8);
      v15 = v13;
    }
    *a1 = (unint64_t)v15;
    a1[1] = (unint64_t)v16;
    a1[2] = (unint64_t)&v13[v12];
    if (v8)
      operator delete((void *)v8);
  }
}

_QWORD *std::shared_ptr<turi::group_aggregate_value>::shared_ptr[abi:ne180100]<turi::group_aggregate_value,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24D91E220;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217F9F154(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::group_aggregate_value *,std::shared_ptr<turi::group_aggregate_value>::__shared_ptr_default_delete<turi::group_aggregate_value,turi::group_aggregate_value>,std::allocator<turi::group_aggregate_value>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::group_aggregate_value *,std::shared_ptr<turi::group_aggregate_value>::__shared_ptr_default_delete<turi::group_aggregate_value,turi::group_aggregate_value>,std::allocator<turi::group_aggregate_value>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24D91E298;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24D91E298;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v49;
  size_t v50;
  unsigned int v51;
  unint64_t *v52;
  _QWORD *v53;
  unint64_t v54;
  double *v55;
  uint64_t v56;
  unint64_t v57;
  double *v58;
  _QWORD *v59;
  uint64_t v60;
  double v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v67;
  double v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  char v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  _QWORD *v78[2];
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  turi::gl_sarray::range_iterator(*(turi::gl_sarray **)(a1 + 16), (unint64_t)(**(_QWORD **)(a1 + 8) * *a2) / *a3, (unint64_t)(**(_QWORD **)(a1 + 8) + **(_QWORD **)(a1 + 8) * *a2) / *a3, v78);
  v72 = 0;
  v73 = (unsigned __int8 *)v78;
  v6 = *(_QWORD *)(v79 + 72) - *(_QWORD *)(v79 + 56);
  v7 = 16 * v4;
  while (v72 != v6)
  {
    v8 = v73;
    switch(byte_254FEE1C4)
    {
      case 0:
        switch(v73[12])
        {
          case 0u:
            if (*(_QWORD *)v73 == turi::FLEX_UNDEFINED)
              goto LABEL_80;
            goto LABEL_79;
          case 1u:
            v5.n128_u64[0] = *(_QWORD *)v73;
            v63 = turi::FLEX_UNDEFINED;
            goto LABEL_93;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            if (turi::FLEX_UNDEFINED == (uint64_t)(*(_QWORD *)v73 << 8) >> 8 && !*((_DWORD *)v73 + 2))
              goto LABEL_80;
            goto LABEL_79;
          default:
            goto LABEL_119;
        }
      case 1:
        switch(v73[12])
        {
          case 0u:
            v5.n128_u64[0] = turi::FLEX_UNDEFINED;
            v63 = *(_QWORD *)v73;
LABEL_93:
            v68 = (double)v63;
            goto LABEL_94;
          case 1u:
            v5.n128_u64[0] = *(_QWORD *)v73;
            v68 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_94:
            if (v5.n128_f64[0] != v68)
              goto LABEL_79;
            goto LABEL_80;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            v5.n128_f64[0] = vabdd_f64((double)*((int *)v73 + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)v73 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
            goto LABEL_98;
          default:
            goto LABEL_119;
        }
      case 2:
        v47 = v73[12];
        if (v47 - 3 < 7 || v47 < 2)
          goto LABEL_79;
        if (v47 != 2)
          goto LABEL_119;
        v49 = *(_QWORD *)v73;
        if (*(char *)(*(_QWORD *)v73 + 31) < 0)
          v50 = *(_QWORD *)(v49 + 16);
        else
          v50 = *(unsigned __int8 *)(*(_QWORD *)v73 + 31);
        if (*(char *)(turi::FLEX_UNDEFINED + 31) < 0)
          v69 = *(_QWORD *)(turi::FLEX_UNDEFINED + 16);
        else
          v69 = *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
        if (v50 != v69)
          goto LABEL_79;
        v70 = (unsigned __int8 *)(v49 + 8);
        if ((*(_BYTE *)(*(_QWORD *)v73 + 31) & 0x80) != 0)
          v70 = *(unsigned __int8 **)v70;
        v71 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
        if ((*(_BYTE *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0)
        {
          v71 = *(unsigned __int8 **)v71;
          if ((*(_BYTE *)(*(_QWORD *)v73 + 31) & 0x80) == 0)
          {
LABEL_109:
            if (!v50)
              goto LABEL_80;
            do
            {
              if (*v70 != *v71)
                goto LABEL_79;
              ++v70;
              ++v71;
              --v50;
            }
            while (v50);
            goto LABEL_80;
          }
        }
        else if ((*(_BYTE *)(*(_QWORD *)v73 + 31) & 0x80) == 0)
        {
          goto LABEL_109;
        }
        if (memcmp(v70, v71, v50))
          goto LABEL_79;
LABEL_80:
        turi::gl_sarray_range::iterator::increment((turi::gl_sarray_range::iterator *)&v72);
        break;
      case 3:
        v51 = v73[12];
        if (v51 > 9)
          goto LABEL_119;
        if (v51 != 3)
          goto LABEL_79;
        v52 = *(unint64_t **)(*(_QWORD *)v73 + 8);
        v53 = *(_QWORD **)(*(_QWORD *)v73 + 16);
        v54 = v53 - v52;
        v55 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v54 != (uint64_t)(*(_QWORD *)(turi::FLEX_UNDEFINED + 16) - (_QWORD)v55) >> 3)
          goto LABEL_79;
        if (v53 == v52)
          goto LABEL_80;
        if (v54 <= 1)
          v56 = 1;
        else
          v56 = v53 - v52;
        v5.n128_u64[0] = *v52;
        if (*(double *)v52 != *v55)
          goto LABEL_79;
        v57 = 0;
        v58 = v55 + 1;
        v59 = v52 + 1;
        v60 = v56 - 1;
        while (v60 != v57)
        {
          v5.n128_u64[0] = v59[v57];
          v61 = v58[v57++];
          if (v5.n128_f64[0] != v61)
          {
            if (v57 < v54)
              goto LABEL_79;
            goto LABEL_80;
          }
        }
        goto LABEL_80;
      case 4:
        v9 = v73[12];
        if (v9 > 9)
          goto LABEL_119;
        if (v9 != 4)
          goto LABEL_79;
        v10 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v74, (uint64_t *)(*(_QWORD *)v73 + 8), (_QWORD *)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_83;
      case 5:
        v64 = v73[12];
        if (v64 > 9)
          goto LABEL_119;
        if (v64 != 5)
          goto LABEL_79;
        v10 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v74, (uint64_t **)(*(_QWORD *)v73 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8));
        goto LABEL_83;
      case 6:
        switch(v73[12])
        {
          case 0u:
            if (*(_QWORD *)v73 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_254FEE1C0)
              goto LABEL_80;
            goto LABEL_79;
          case 1u:
            v5.n128_f64[0] = vabdd_f64(*(double *)v73, (double)dword_254FEE1C0 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_98:
            if (v5.n128_f64[0] < 0.0000005)
              goto LABEL_80;
            goto LABEL_79;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_79;
          case 6u:
            if (((turi::FLEX_UNDEFINED ^ *(_QWORD *)v73) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v73 + 2) == dword_254FEE1C0)
            {
              goto LABEL_80;
            }
            goto LABEL_79;
          default:
            goto LABEL_119;
        }
      case 7:
        v62 = v73[12];
        if (v62 < 7 || v62 - 8 < 2)
          goto LABEL_79;
        if (v62 != 7)
          goto LABEL_119;
        goto LABEL_80;
      case 8:
        v65 = v73[12];
        if (v65 < 8 || v65 == 9)
          goto LABEL_79;
        if (v65 != 8)
          goto LABEL_119;
        v10 = turi::image_type::operator==(*(_QWORD *)v73 + 8, turi::FLEX_UNDEFINED + 8);
LABEL_83:
        if ((v10 & 1) != 0)
          goto LABEL_80;
        goto LABEL_79;
      case 9:
        v11 = v73[12];
        if (v11 < 9)
          goto LABEL_79;
        if (v11 != 9)
        {
LABEL_119:
          turi::flexible_type_fail(0);
          __break(1u);
        }
        v12 = turi::FLEX_UNDEFINED;
        v13 = *(_QWORD **)v73;
        if (turi::FLEX_UNDEFINED == *(_QWORD *)v73)
          goto LABEL_80;
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v13 + 1), turi::FLEX_UNDEFINED + 8))
          goto LABEL_79;
        v15 = (char *)v13[3];
        v14 = (char *)v13[4];
        v16 = v14 - v15;
        if (v14 == v15)
          goto LABEL_80;
        if (!v13[1])
          goto LABEL_80;
        v17 = 1;
        do
        {
          v18 = *(_QWORD *)v15;
          v15 += 8;
          v17 *= v18;
        }
        while (v15 != v14);
        if (!v17)
          goto LABEL_80;
        v75 = 0;
        std::vector<unsigned long>::vector(&v76, v16 >> 3, &v75);
        v19 = v76;
        v20 = v77;
        v21 = **(_QWORD **)(v12 + 8);
        v22 = (char *)v77 - (char *)v76;
        v23 = v77 - v76;
        v24 = v23 - 1;
        if (v23 <= 1)
          v25 = 1;
        else
          v25 = v77 - v76;
        while (1)
        {
          if (v20 == v19)
          {
            v33 = 0;
            v5.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v13[1] + 8 * v13[9]);
          }
          else
          {
            v26 = 0;
            v27 = (uint64_t *)v13[6];
            v28 = v19;
            v29 = v25;
            do
            {
              v31 = *v28++;
              v30 = v31;
              v32 = *v27++;
              v26 += v32 * v30;
              --v29;
            }
            while (v29);
            v33 = 0;
            v5.n128_u64[0] = *(_QWORD *)(*(_QWORD *)v13[1] + 8 * (v13[9] + v26));
            v34 = *(uint64_t **)(v12 + 48);
            v35 = v19;
            v36 = v25;
            do
            {
              v38 = *v35++;
              v37 = v38;
              v39 = *v34++;
              v33 += v39 * v37;
              --v36;
            }
            while (v36);
          }
          if (v5.n128_f64[0] != *(double *)(v21 + 8 * (*(_QWORD *)(v12 + 72) + v33)))
            break;
          v40 = v23;
          v41 = v23 - 1;
          if (v22 >= 1)
          {
            v42 = v13[3];
            v43 = v19[v24] + 1;
            v19[v24] = v43;
            v44 = (v22 & 0xFFFFFFFFFFFFFFF8) - 16;
            v41 = v23 - 1;
            if (v43 >= *(_QWORD *)(v42 + 8 * v24))
            {
              while (1)
              {
                *(uint64_t *)((char *)v19 + v44 + 8) = 0;
                if (v41 <= 0)
                  break;
                --v41;
                v45 = *(uint64_t *)((char *)v19 + v44) + 1;
                *(uint64_t *)((char *)v19 + v44) = v45;
                v46 = *(_QWORD *)(v42 + v44);
                v44 -= 8;
                if (v45 < v46)
                {
                  v40 = 1;
                  goto LABEL_36;
                }
              }
LABEL_39:
              v77 = v19;
              operator delete(v19);
              goto LABEL_80;
            }
            v40 = 1;
            v41 = v23 - 1;
          }
LABEL_36:
          if (!v40 || v41 < 0)
          {
            if (!v19)
              goto LABEL_80;
            goto LABEL_39;
          }
        }
        if (v19)
        {
          v77 = v19;
          operator delete(v19);
        }
LABEL_79:
        v67 = *(_QWORD *)(**(_QWORD **)(a1 + 24) + v7);
        (*(void (**)(uint64_t, unsigned __int8 *, __n128))(*(_QWORD *)v67 + 16))(v67, v8, v5);
        goto LABEL_80;
      default:
        goto LABEL_119;
    }
  }
  turi::gl_sarray_range::~gl_sarray_range(v78);
}

void sub_217F9F928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_1>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24D91E318;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24D91E318;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)const::$_2::operator()((uint64_t **)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2,std::allocator<turi::gl_sarray::cumulative_aggregate(std::shared_ptr<turi::group_aggregate_value>)::$_2>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sarrayENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1@<X8>)
{
  _QWORD *v2;

  v2 = operator new(0x60uLL);
  _ZNSt3__120__shared_ptr_emplaceIN4turi12unity_sarrayENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a1, v2 + 4, (uint64_t)(v2 + 3));
}

void sub_217F9FAB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4turi12unity_sarrayENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_24D91E398;
  a1[1] = 0;
  turi::unity_sarray::unity_sarray((turi::unity_sarray *)(a1 + 3));
  return a1;
}

void sub_217F9FB04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::unity_sarray>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::unity_sarray>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::unity_sarray>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void turi::sarray_reader<turi::flexible_type>::init(uint64_t a1, uint64_t a2, std::string::size_type a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  std::string::size_type *v17;
  std::string::size_type *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  std::string v33;
  unint64_t v34;
  void *v35;
  char v36;
  void *__p;
  void *v38;
  uint64_t v39;
  _QWORD *v40[3];
  char *v41;
  char *v42;
  char *v43;
  std::string *v44;

  assert_msg(*(_QWORD *)(a1 + 8) == 0, "Reader already inited");
  turi::sarray_reader<turi::flexible_type>::open_format_reader(a1, a2);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v31 = (_QWORD *)a1;
  v32 = a2;
  if (a3 == -1)
  {
    turi::index_file_information::index_file_information(&v33, (const turi::index_file_information *)(a2 + 8));
    if (v34)
    {
      v19 = 0;
      v20 = 0;
      v21 = v42;
      do
      {
        v22 = v20;
        v20 += *((_QWORD *)__p + v19);
        if (v21 >= v43)
        {
          v23 = v41;
          v24 = (v21 - v41) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            std::vector<float>::__throw_length_error[abi:ne180100]();
          v26 = v43 - v41;
          if ((v43 - v41) >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v27 = 0xFFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v43, v27);
            v23 = v41;
            v21 = v42;
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[16 * v24];
          *(_QWORD *)v29 = v22;
          *((_QWORD *)v29 + 1) = v20;
          v30 = v29;
          if (v21 != v23)
          {
            do
            {
              *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
              v30 -= 16;
              v21 -= 16;
            }
            while (v21 != v23);
            v23 = v41;
          }
          v21 = v29 + 16;
          v41 = v30;
          v42 = v29 + 16;
          v43 = &v28[16 * v27];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *(_QWORD *)v21 = v22;
          *((_QWORD *)v21 + 1) = v20;
          v21 += 16;
        }
        v42 = v21;
        ++v19;
      }
      while (v19 < v34);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v40, v40[1]);
    v44 = (std::string *)&v39;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
    if (__p)
    {
      v38 = __p;
      operator delete(__p);
    }
    if (v36 < 0)
      operator delete(v35);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  else
  {
    v33.__r_.__value_.__r.__words[0] = a3;
    if (!a3)
    {
      v44 = &v33;
      turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,unsigned long)::{lambda(void)#1}::operator()();
    }
    v6 = turi::sarray_reader<turi::flexible_type>::size(a1);
    v7 = 0;
    v8 = v42;
    do
    {
      v9 = v7 * v6 / a3;
      v10 = ++v7 * v6 / a3;
      if (v8 >= v43)
      {
        v11 = v41;
        v12 = (v8 - v41) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v14 = v43 - v41;
        if ((v43 - v41) >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v43, v15);
          v11 = v41;
          v8 = v42;
        }
        else
        {
          v16 = 0;
        }
        v17 = (std::string::size_type *)&v16[16 * v12];
        *v17 = v9;
        v17[1] = v10;
        v18 = v17;
        if (v8 != v11)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v8 - 1);
            v18 -= 2;
            v8 -= 16;
          }
          while (v8 != v11);
          v11 = v41;
        }
        v8 = (char *)(v17 + 2);
        v41 = (char *)v18;
        v42 = (char *)(v17 + 2);
        v43 = &v16[16 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v8 = v9;
        *((_QWORD *)v8 + 1) = v10;
        v8 += 16;
      }
      v42 = v8;
    }
    while (v7 != a3);
  }
  turi::sarray_reader<turi::flexible_type>::create_segment_read_buffers(v31, &v41);
  if (v31 + 17 != (_QWORD *)(v32 + 256))
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>((uint64_t)(v31 + 17), *(uint64_t **)(v32 + 256), *(uint64_t **)(v32 + 264), (uint64_t)(*(_QWORD *)(v32 + 264) - *(_QWORD *)(v32 + 256)) >> 4);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_217F9FEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)(v12 - 120);
  if (v14)
  {
    *(_QWORD *)(v12 - 112) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray_reader<turi::flexible_type>::sarray_reader(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = &unk_24D91E3E8;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 16), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

void turi::sarray_reader<turi::flexible_type>::~sarray_reader(uint64_t a1)
{
  turi::sarray_reader<turi::flexible_type>::~sarray_reader(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::sarray_reader<turi::flexible_type>::num_segments(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 8))
    turi::sarray_reader<turi::flexible_type>::num_segments(void)const::{lambda(void)#1}::operator()();
  return *(_QWORD *)(a1 + 80);
}

uint64_t turi::sarray_reader<turi::flexible_type>::segment_length(uint64_t a1, uint64_t a2)
{
  if (!*(_QWORD *)(a1 + 8))
    turi::sarray_reader<turi::flexible_type>::segment_length(unsigned long)const::{lambda(void)#1}::operator()();
  return *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * a2);
}

uint64_t turi::sarray_reader<turi::flexible_type>::begin@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  pthread_mutex_t *v6;
  _QWORD *i;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v11 = a2;
  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  for (i = *(_QWORD **)(a1 + 96); i; i = (_QWORD *)*i)
  {
    v8 = i[4];
    if (v8 <= a2)
    {
      if (v8 >= a2)
        turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#1}::operator()();
      ++i;
    }
  }
  std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)(a1 + 88), &v11, (uint64_t *)&v11);
  if (!*(_QWORD *)(a1 + 8))
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#2}::operator()();
  v9 = v11;
  if (v9 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    turi::sarray_reader<turi::flexible_type>::begin(unsigned long)const::{lambda(void)#3}::operator()();
  turi::sarray_iterator<turi::flexible_type>::sarray_iterator(a3, (uint64_t *)(*(_QWORD *)(a1 + 160) + 96 * v11), v11, 1);
  return pthread_mutex_unlock(v6);
}

void sub_217FA00FC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t turi::sarray_reader<turi::flexible_type>::end@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  unint64_t v10;
  _QWORD *v11;

  v9[0] = a1[1];
  if (!v9[0])
  {
    v11 = v9;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#1}::operator()();
  }
  v11 = (_QWORD *)a2;
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v10 = result;
  if (result <= a2)
  {
    v9[0] = &v11;
    v9[1] = &v10;
    turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#2}::operator()();
  }
  v7 = a1[20] + 96 * a2;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 28) = 0;
  v8 = *(_QWORD *)(v7 + 72) - *(_QWORD *)(v7 + 56);
  *(_QWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = v8;
  return result;
}

uint64_t turi::sarray_reader<turi::flexible_type>::read_rows(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t turi::sarray_reader<turi::flexible_type>::reset_iterators(uint64_t a1)
{
  _QWORD *v1;
  pthread_mutex_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;

  v1 = (_QWORD *)a1;
  v2 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v3 = (_QWORD *)v1[12];
  v1 += 12;
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)(v1 - 1), v3);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v4 = (uint64_t *)v1[8];
  v5 = (uint64_t *)v1[9];
  while (v4 != v5)
  {
    turi::sarray_reader_buffer<turi::flexible_type>::clear(v4);
    v4 += 12;
  }
  return pthread_mutex_unlock(v2);
}

uint64_t turi::sarray_reader<turi::flexible_type>::~sarray_reader(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = &unk_24D91E3E8;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v5 = (void **)(a1 + 160);
  std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)(a1 + 136);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(a1 + 88, *(_QWORD **)(a1 + 96));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 16));
  return a1;
}

void std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 12;
      std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 9));
      v6 = v5;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void turi::sarray_reader<turi::flexible_type>::num_segments(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"reader", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"__null", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", "operator()", 300, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_reader<turi::flexible_type>::num_segments(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA050C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<turi::flexible_type>::segment_length(unsigned long)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"reader", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"__null", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", "operator()", 310, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_reader<turi::flexible_type>::segment_length(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA071C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t turi::sarray_iterator<turi::flexible_type>::sarray_iterator(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  unint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void **v36;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (unint64_t **)(a1 + 16);
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = a2[9] - a2[7];
  *(_QWORD *)(a1 + 40) = v6;
  if (a4 && v6)
  {
    v7 = turi::sarray_reader_buffer<turi::flexible_type>::next(a2);
    if ((unint64_t **)v7 == v5)
    {
      v6 = 0;
    }
    else
    {
      switch(*(_BYTE *)(a1 + 28))
      {
        case 2:
          v8 = *v5;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            v11 = *v5;
            if (!*v5)
              goto LABEL_42;
            if (*((char *)v11 + 31) < 0)
              operator delete((void *)v11[1]);
            v12 = v11;
            v13 = 0x1012C404EF22A49;
            goto LABEL_41;
          }
          break;
        case 3:
          v14 = *v5;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            v17 = *v5;
            if (!*v5)
              goto LABEL_42;
            v18 = (void *)v17[1];
            if (v18)
            {
              v17[2] = (unint64_t)v18;
              operator delete(v18);
            }
            v12 = v17;
            v13 = 0x1080C409938AC02;
            goto LABEL_41;
          }
          break;
        case 4:
          v19 = *v5;
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            v22 = *v5;
            if (!*v5)
              goto LABEL_42;
            v36 = (void **)(v22 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
            goto LABEL_29;
          }
          break;
        case 5:
          v23 = *v5;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v22 = *v5;
            if (!*v5)
              goto LABEL_42;
            v36 = (void **)(v22 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_29:
            v12 = v22;
            v13 = 0x1020C405E66F15BLL;
            goto LABEL_41;
          }
          break;
        case 8:
          v26 = *v5;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            v29 = *v5;
            if (!*v5)
              goto LABEL_42;
            boost::detail::shared_count::~shared_count((unsigned int **)v29 + 2);
            v12 = v29;
            v30 = -235920773;
            goto LABEL_40;
          }
          break;
        case 9:
          v31 = *v5;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            if (*v5)
            {
              v12 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v5);
              v30 = 2071181815;
LABEL_40:
              v13 = v30 | 0x1030C4000000000;
LABEL_41:
              MEMORY[0x219A19A08](v12, v13);
            }
LABEL_42:
            *v5 = 0;
          }
          break;
        default:
          break;
      }
      v6 = 0;
      v34 = *(unint64_t **)v7;
      *(unint64_t **)((char *)v5 + 5) = *(unint64_t **)(v7 + 5);
      *v5 = v34;
      *(_BYTE *)(a1 + 28) = *(_BYTE *)(v7 + 12);
      *(_BYTE *)(v7 + 12) = 0;
    }
  }
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

void sub_217FA0AA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t **v2;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;

  switch(*(_BYTE *)(v1 + 28))
  {
    case 2:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator(v2);
      if ((v4 & 1) != 0)
        break;
      goto LABEL_11;
    case 3:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator(v2);
      if ((v5 & 1) != 0)
        break;
      goto LABEL_11;
    case 4:
      turi::flexible_type::flexible_type<double>(v2);
      if ((v6 & 1) != 0)
        break;
      goto LABEL_11;
    case 5:
      turi::flexible_type::flexible_type<double>(v2);
      if ((v7 & 1) != 0)
        break;
      goto LABEL_11;
    case 8:
      turi::sarray_iterator<turi::flexible_type>::sarray_iterator(v2);
      if ((v8 & 1) == 0)
        goto LABEL_11;
      break;
    case 9:
      if ((turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set(v2) & 1) != 0)
        break;
LABEL_11:
      *v2 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 28) = 0;
  _Unwind_Resume(exception_object);
}

void turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"reader", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"__null", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", "operator()", 430, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_reader<turi::flexible_type>::end(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA0CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray_reader<turi::flexible_type>::end(unsigned long)const::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", "operator()", 431, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_reader<turi::flexible_type>::end(unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA0EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray_reader_buffer<turi::flexible_type>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v2 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v2);
    }
    while (v2 != v3);
  }
  a1[1] = v3;
  v4 = a1[7];
  a1[8] = v4;
  a1[11] = v4;
  a1[6] = 0;
}

void turi::sarray_reader<turi::flexible_type>::open_format_reader(uint64_t a1, uint64_t a2)
{
  const turi::index_file_information *v3;
  uint64_t v4;
  uint64_t v5;
  std::string v6;
  void *v7;
  char v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12[3];
  std::string v13;
  int v14;
  void *v15;
  char v16;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD *v20[3];
  void **v21;

  v3 = (const turi::index_file_information *)(a2 + 8);
  turi::index_file_information::index_file_information(&v13, (const turi::index_file_information *)(a2 + 8));
  v4 = v14;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v20, v20[1]);
  v21 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v21);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v16 < 0)
    operator delete(v15);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
        turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#1}::operator()();
      *(_QWORD *)(a1 + 8) = 0;
      turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#3}::operator()();
    }
    turi::sarray_reader<turi::flexible_type>::open_format_reader(turi::sarray<turi::flexible_type> const&)::{lambda(void)#2}::operator()();
  }
  v5 = operator new();
  turi::sarray_format_reader_v2<turi::flexible_type>::sarray_format_reader_v2(v5);
  *(_QWORD *)(a1 + 8) = v5;
  turi::index_file_information::index_file_information(&v6, v3);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 16))(v5, &v6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v12, v12[1]);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v8 < 0)
    operator delete(v7);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_217FA1124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  turi::index_file_information::~index_file_information((turi::index_file_information *)va);
  _Unwind_Resume(a1);
}

void turi::index_file_information::~index_file_information(turi::index_file_information *this)
{
  void *v2;
  void **v3;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 120, *((_QWORD **)this + 16));
  v3 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_segments", 12);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", "operator()", 247, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_reader<turi::flexible_type>::init(turi::sarray<turi::flexible_type> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA1354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader<turi::flexible_type>::size(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    turi::sarray_reader<turi::flexible_type>::size(void)const::{lambda(void)#1}::operator()();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
  v3 = *(uint64_t **)(v2 + 72);
  v4 = *(_QWORD *)(v2 + 80);
  result = 0;
  v6 = v4 - (_QWORD)v3;
  if (v6)
  {
    v7 = v6 >> 3;
    if (v7 <= 1)
      v7 = 1;
    do
    {
      v8 = *v3++;
      result += v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

void turi::sarray_reader<turi::flexible_type>::create_segment_read_buffers(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = (uint64_t)(a2[1] - *a2) >> 4;
  a1[10] = v4;
  std::vector<unsigned long>::resize((uint64_t)(a1 + 14), v4);
  std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::resize(a1 + 20, a1[10]);
  v5 = a1[14];
  if (a1[15] != v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *a2 + v7;
      *(_QWORD *)(v5 + 8 * v8) = *(_QWORD *)(v9 + 8) - *(_QWORD *)v9;
      turi::sarray_reader_buffer<turi::flexible_type>::init((uint64_t *)(a1[20] + v6), (uint64_t)a1, *(_QWORD *)v9, *(_QWORD *)(v9 + 8), 1024);
      ++v8;
      v5 = a1[14];
      v7 += 16;
      v6 += 96;
    }
    while (v8 < (a1[15] - v5) >> 3);
  }
}

uint64_t turi::sarray_format_reader_v2<turi::flexible_type>::sarray_format_reader_v2(uint64_t a1)
{
  uint64_t instance;
  int v3;

  *(_QWORD *)a1 = &unk_24D91E460;
  instance = turi::v2_block_impl::block_manager::get_instance((turi::v2_block_impl::block_manager *)a1);
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 8) = instance;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 240), 0);
  assert_msg(v3 == 0, "Mutex create error %d", v3);
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  return a1;
}

void sub_217FA15EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  turi::index_file_information *v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *(void **)(v1 + 216);
  if (v6)
  {
    *(_QWORD *)(v1 + 224) = v6;
    operator delete(v6);
  }
  turi::sarray_format_reader_v2<turi::flexible_type>::sarray_format_reader_v2(v4, v3, v1);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<turi::flexible_type>::~sarray_format_reader_v2(uint64_t a1)
{
  turi::sarray_format_reader_v2<turi::flexible_type>::~sarray_format_reader_v2(a1);
  JUMPOUT(0x219A19A08);
}

void turi::sarray_format_reader_v2<turi::flexible_type>::open(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t *v23;
  char *v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t all_block_info;
  _QWORD *v29;
  unint64_t i;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t *v51;
  char *v52;
  char *v53;
  unint64_t *v54;
  __int128 v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  turi::v2_block_impl::typed_decode_stream **v60;
  turi::v2_block_impl::typed_decode_stream **j;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  void **v86;
  char **v87;
  std::string v88;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 48));
  if (a1 + 16 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 88), *(char **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 112), *(std::string **)(a2 + 96), *(__int128 **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 136), *(__int128 **)(a2 + 120), (__int128 *)(a2 + 128));
  }
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
  v86 = (void **)(a1 + 192);
  v87 = (char **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 216);
  v83 = (char **)(a1 + 216);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 224) = v5;
  *(_QWORD *)(a1 + 160) = 0;
  v6 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a2 + 104) == v6)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v84 = a2;
    do
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = (__int128 *)(v6 + 24 * v7);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v11 = *v10;
        v88.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v11;
      }
      v12 = turi::v2_block_impl::block_manager::open_column(v9, (uint64_t)&v88);
      v14 = v13;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      v16 = *(unint64_t **)(a1 + 224);
      v15 = *(_QWORD *)(a1 + 232);
      v85 = v7;
      if ((unint64_t)v16 >= v15)
      {
        v18 = ((char *)v16 - *v83) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          std::vector<float>::__throw_length_error[abi:ne180100]();
        v20 = v15 - (_QWORD)*v83;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(a1 + 232, v21);
        else
          v22 = 0;
        v23 = (unint64_t *)&v22[16 * v18];
        *v23 = v12;
        v23[1] = v14;
        v25 = *(char **)(a1 + 216);
        v24 = *(char **)(a1 + 224);
        v26 = v23;
        if (v24 != v25)
        {
          do
          {
            *((_OWORD *)v26 - 1) = *((_OWORD *)v24 - 1);
            v26 -= 2;
            v24 -= 16;
          }
          while (v24 != v25);
          v24 = *v83;
        }
        v17 = v23 + 2;
        *(_QWORD *)(a1 + 216) = v26;
        *(_QWORD *)(a1 + 224) = v23 + 2;
        *(_QWORD *)(a1 + 232) = &v22[16 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v16 = v12;
        v16[1] = v14;
        v17 = v16 + 2;
      }
      *(_QWORD *)(a1 + 224) = v17;
      v27 = turi::v2_block_impl::block_manager::num_blocks_in_column(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12, v14);
      all_block_info = turi::v2_block_impl::block_manager::get_all_block_info(*(turi::v2_block_impl::block_manager **)(a1 + 8), v12);
      if (v27)
      {
        v29 = (_QWORD *)all_block_info;
        for (i = 0; i != v27; ++i)
        {
          v32 = *(char **)(a1 + 200);
          v31 = *(_QWORD *)(a1 + 208);
          if ((unint64_t)v32 >= v31)
          {
            v34 = (char *)*v86;
            v35 = (v32 - (_BYTE *)*v86) >> 3;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v37 = v31 - (_QWORD)v34;
            if (v37 >> 2 > v36)
              v36 = v37 >> 2;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v38);
              v34 = *(char **)(a1 + 192);
              v32 = *(char **)(a1 + 200);
            }
            else
            {
              v39 = 0;
            }
            v40 = &v39[8 * v35];
            *(_QWORD *)v40 = v8;
            v33 = v40 + 8;
            while (v32 != v34)
            {
              v41 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              *((_QWORD *)v40 - 1) = v41;
              v40 -= 8;
            }
            *(_QWORD *)(a1 + 192) = v40;
            *(_QWORD *)(a1 + 200) = v33;
            *(_QWORD *)(a1 + 208) = &v39[8 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_QWORD *)v32 = v8;
            v33 = v32 + 8;
          }
          *(_QWORD *)(a1 + 200) = v33;
          v42 = *(_QWORD *)(*(_QWORD *)(*v29 + 24 * v14) + 48 * i + 24);
          v44 = *(unint64_t **)(a1 + 176);
          v43 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v44 >= v43)
          {
            v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - *v87) >> 3);
            v47 = v46 + 1;
            if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<float>::__throw_length_error[abi:ne180100]();
            v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - (_QWORD)*v87) >> 3);
            if (2 * v48 > v47)
              v47 = 2 * v48;
            if (v48 >= 0x555555555555555)
              v49 = 0xAAAAAAAAAAAAAAALL;
            else
              v49 = v47;
            if (v49)
              v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a1 + 184, v49);
            else
              v50 = 0;
            v51 = (unint64_t *)&v50[24 * v46];
            *v51 = v12;
            v51[1] = v14;
            v51[2] = i;
            v53 = *(char **)(a1 + 168);
            v52 = *(char **)(a1 + 176);
            v54 = v51;
            if (v52 != v53)
            {
              do
              {
                v55 = *(_OWORD *)(v52 - 24);
                *(v54 - 1) = *((_QWORD *)v52 - 1);
                *(_OWORD *)(v54 - 3) = v55;
                v54 -= 3;
                v52 -= 24;
              }
              while (v52 != v53);
              v52 = *v87;
            }
            v45 = v51 + 3;
            *(_QWORD *)(a1 + 168) = v54;
            *(_QWORD *)(a1 + 176) = v51 + 3;
            *(_QWORD *)(a1 + 184) = &v50[24 * v49];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v44 = v12;
            v44[1] = v14;
            v45 = v44 + 3;
            v44[2] = i;
          }
          v8 += v42;
          *(_QWORD *)(a1 + 176) = v45;
        }
      }
      v7 = v85 + 1;
      v6 = *(_QWORD *)(v84 + 96);
    }
    while (v85 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v84 + 104) - v6) >> 3));
  }
  v56 = *(uint64_t **)(a1 + 88);
  v57 = *(uint64_t **)(a1 + 96);
  if (v56 != v57)
  {
    v58 = *(_QWORD *)(a1 + 160);
    do
    {
      v59 = *v56++;
      v58 += v59;
      *(_QWORD *)(a1 + 160) = v58;
    }
    while (v56 != v57);
  }
  v60 = *(turi::v2_block_impl::typed_decode_stream ***)(a1 + 336);
  for (j = *(turi::v2_block_impl::typed_decode_stream ***)(a1 + 344);
        j != v60;
        std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100](a1 + 352, j))
  {
    j -= 23;
  }
  *(_QWORD *)(a1 + 344) = v60;
  std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::resize((uint64_t *)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3));
  v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3);
  v63 = *(_QWORD *)(a1 + 320);
  v64 = v62 >> 6;
  if ((v62 & 0x3F) != 0)
    ++v64;
  *(_QWORD *)(a1 + 312) = v62;
  *(_QWORD *)(a1 + 320) = v64;
  v65 = (char *)malloc_type_realloc(*(void **)(a1 + 304), 8 * v64, 0x100004000313F17uLL);
  v66 = v65;
  *(_QWORD *)(a1 + 304) = v65;
  v67 = *(_QWORD *)(a1 + 312) & 0x3FLL;
  if (v67)
    *(_QWORD *)&v65[8 * *(_QWORD *)(a1 + 320) - 8] &= ~(-1 << v67);
  v68 = *(_QWORD *)(a1 + 320);
  if (v68 > v63)
  {
    v69 = &v65[8 * v63];
    v70 = 8 * v68 - 8 * v63;
    if (v70 >= 1)
    {
      bzero(v69, 8 * (((unint64_t)v70 >> 3) - ((unint64_t)v70 > 7)) + 8);
      v68 = *(_QWORD *)(a1 + 320);
    }
  }
  if (v68 >= 1)
    bzero(v66, 8 * (v68 - ((v68 & 0x1FFFFFFFFFFFFFFFLL) != 0)) + 8);
  v71 = *(_QWORD *)(a1 + 208);
  v72 = *(char **)(a1 + 200);
  if ((unint64_t)v72 >= v71)
  {
    v74 = (char *)*v86;
    v75 = (v72 - (_BYTE *)*v86) >> 3;
    v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v77 = v71 - (_QWORD)v74;
    if (v77 >> 2 > v76)
      v76 = v77 >> 2;
    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v76;
    if (v78)
    {
      v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 208, v78);
      v74 = *(char **)(a1 + 192);
      v72 = *(char **)(a1 + 200);
    }
    else
    {
      v79 = 0;
    }
    v80 = &v79[8 * v75];
    v81 = &v79[8 * v78];
    *(_QWORD *)v80 = *(_QWORD *)(a1 + 160);
    v73 = v80 + 8;
    while (v72 != v74)
    {
      v82 = *((_QWORD *)v72 - 1);
      v72 -= 8;
      *((_QWORD *)v80 - 1) = v82;
      v80 -= 8;
    }
    *(_QWORD *)(a1 + 192) = v80;
    *(_QWORD *)(a1 + 200) = v73;
    *(_QWORD *)(a1 + 208) = v81;
    if (v74)
      operator delete(v74);
  }
  else
  {
    *(_QWORD *)v72 = *(_QWORD *)(a1 + 160);
    v73 = v72 + 8;
  }
  *(_QWORD *)(a1 + 200) = v73;
  if (*(_QWORD *)(a1 + 160) != v8)
    turi::sarray_format_reader_v2<turi::flexible_type>::open(turi::index_file_information)::{lambda(void)#1}::operator()();
}

{
  std::string v3;
  std::string v4[2];
  void *v5;
  char v6;
  void *__p;
  void *v8;
  uint64_t v9;
  _QWORD *v10[3];
  void **v11;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v3 = *(std::string *)a2;
  turi::read_index_file((uint64_t)&v3, v4);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v10, v10[1]);
  v11 = (void **)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v6 < 0)
    operator delete(v5);
  if (SHIBYTE(v4[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_217FA1CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_217FA1DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  turi::index_file_information::~index_file_information((turi::index_file_information *)&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<turi::flexible_type>::close(uint64_t *a1)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  turi::v2_block_impl::typed_decode_stream **i;
  turi::v2_block_impl::typed_decode_stream **v6;

  v2 = (unint64_t *)a1[27];
  v3 = (unint64_t *)a1[28];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2;
      v2 += 2;
      turi::v2_block_impl::block_manager::close_column(a1[1], v4);
    }
    while (v2 != v3);
    v2 = (unint64_t *)a1[27];
  }
  a1[28] = (uint64_t)v2;
  v6 = (turi::v2_block_impl::typed_decode_stream **)a1[42];
  for (i = (turi::v2_block_impl::typed_decode_stream **)a1[43];
        i != v6;
        std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100]((uint64_t)(a1 + 44), i))
  {
    i -= 23;
  }
  a1[43] = (uint64_t)v6;
}

uint64_t turi::sarray_format_reader_v2<turi::flexible_type>::segment_size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * a2);
}

uint64_t turi::sarray_format_reader_v2<turi::flexible_type>::read_rows(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  cppipc *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void *exception;

  if (a1[20] >= a3)
    v6 = a3;
  else
    v6 = a1[20];
  v7 = v6 >= a2;
  v8 = v6 - a2;
  if (v8 != 0 && v7)
  {
    std::vector<turi::flexible_type>::resize(a4, v8);
    turi::sarray_format_reader_v2<turi::flexible_type>::fetch_rows_from_cache(a1, a2, v6, a4);
    if (cppipc::must_cancel(v10))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Cancelled by user.");
    }
    return (a4[1] - *a4) >> 4;
  }
  else
  {
    v13 = *a4;
    v12 = a4[1];
    if (v12 != *a4)
    {
      do
      {
        v12 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a4 + 2), v12);
      }
      while (v12 != v13);
    }
    result = 0;
    a4[1] = v13;
  }
  return result;
}

void sub_217FA1F64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<turi::flexible_type>::get_index_file(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 16);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 32);
  }
}

uint64_t turi::sarray_format_reader_v2<turi::flexible_type>::get_index_info(uint64_t a1)
{
  return a1 + 16;
}

uint64_t turi::sarray_format_reader<turi::flexible_type>::read_rows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t ***a4)
{
  turi::sframe_rows::resize(a4, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
  if (!*((_BYTE *)a4 + 24))
    turi::sframe_rows::ensure_unique((turi::sframe_rows *)a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(a1, a2, a3, **a4);
}

uint64_t turi::sarray_format_reader_v2<turi::flexible_type>::~sarray_format_reader_v2(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &unk_24D91E460;
  turi::sarray_format_reader_v2<turi::flexible_type>::close((uint64_t *)a1);
  v7 = (void **)(a1 + 336);
  std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__destroy_vector::operator()[abi:ne180100](&v7);
  free(*(void **)(a1 + 304));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 240));
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
  v7 = (void **)(a1 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(_QWORD *)(a1 + 96) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  turi::v2_block_impl::typed_decode_stream **v2;
  turi::v2_block_impl::typed_decode_stream **v4;
  void *v5;

  v1 = *a1;
  v2 = (turi::v2_block_impl::typed_decode_stream **)**a1;
  if (v2)
  {
    v4 = (turi::v2_block_impl::typed_decode_stream **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 23;
        std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100](uint64_t a1, turi::v2_block_impl::typed_decode_stream **a2)
{
  turi::v2_block_impl::encoded_block_range::~encoded_block_range(a2 + 14);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 11));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 3));
  turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)a2);
}

void turi::simple_spinlock::~simple_spinlock(turi::simple_spinlock *this)
{
  if (*(_BYTE *)this)
    turi::simple_spinlock::~simple_spinlock()::{lambda()#1}::operator()();
}

void turi::simple_spinlock::~simple_spinlock()::{lambda()#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.hpp", 97);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"spinner == 0", 12);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/pthread_tools.hpp", "operator()", 143, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::simple_spinlock::~simple_spinlock()::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA22DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::resize(uint64_t *a1, unint64_t a2)
{
  turi::v2_block_impl::typed_decode_stream **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (turi::v2_block_impl::typed_decode_stream **)a1[1];
  v4 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 184 * a2;
    while (v3 != (turi::v2_block_impl::typed_decode_stream **)v7)
    {
      v3 -= 23;
      std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void turi::sarray_format_reader_v2<turi::flexible_type>::open(turi::index_file_information)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_num_rows", 10);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"row_count", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "operator()", 106, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_format_reader_v2<turi::flexible_type>::open(turi::index_file_information)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA2588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_217FA2788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_217FA2858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void **std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17[2];
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xD37A6F4DE9BD37A7 * ((v6 - v7) >> 3) >= a2)
    return (void **)std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__construct_at_end((uint64_t)a1, a2);
  v8 = 0xD37A6F4DE9BD37A7 * ((v7 - *a1) >> 3);
  v9 = v8 + a2;
  if (v8 + a2 > 0x1642C8590B21642)
    std::vector<float>::__throw_length_error[abi:ne180100]();
  v10 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0xB21642C8590B21)
    v11 = 0x1642C8590B21642;
  else
    v11 = v9;
  v20 = v4;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>(v4, v11);
  else
    v12 = 0;
  v14 = &v12[184 * v8];
  v17[0] = v12;
  v17[1] = v14;
  v18 = v14;
  v19 = &v12[184 * v11];
  v15 = 184 * a2;
  v16 = &v14[184 * a2];
  do
  {
    *((_QWORD *)v14 + 22) = 0;
    *((_OWORD *)v14 + 9) = 0u;
    *((_OWORD *)v14 + 10) = 0u;
    *((_OWORD *)v14 + 7) = 0u;
    *((_OWORD *)v14 + 8) = 0u;
    *((_OWORD *)v14 + 5) = 0u;
    *((_OWORD *)v14 + 6) = 0u;
    *((_OWORD *)v14 + 3) = 0u;
    *((_OWORD *)v14 + 4) = 0u;
    *((_OWORD *)v14 + 1) = 0u;
    *((_OWORD *)v14 + 2) = 0u;
    *(_OWORD *)v14 = 0u;
    turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry((uint64_t)v14);
    v14 += 184;
    v15 -= 184;
  }
  while (v15);
  v18 = v16;
  std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__swap_out_circular_buffer(a1, v17);
  return std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer(v17);
}

void sub_217FA29C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v3 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v4 = v3 + 184 * a2;
    v5 = 184 * a2;
    do
    {
      *(_QWORD *)(v3 + 176) = 0;
      *(_OWORD *)(v3 + 144) = 0u;
      *(_OWORD *)(v3 + 160) = 0u;
      *(_OWORD *)(v3 + 112) = 0u;
      *(_OWORD *)(v3 + 128) = 0u;
      *(_OWORD *)(v3 + 80) = 0u;
      *(_OWORD *)(v3 + 96) = 0u;
      *(_OWORD *)(v3 + 48) = 0u;
      *(_OWORD *)(v3 + 64) = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 32) = 0u;
      *(_OWORD *)v3 = 0u;
      result = turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v3);
      v3 += 184;
      v5 -= 184;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(v2 + 8) = v3;
  return result;
}

void sub_217FA2A60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  turi::v2_block_impl::encoded_block::encoded_block((turi::v2_block_impl::encoded_block *)(a1 + 40));
  *(_QWORD *)(a1 + 112) = -1;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  return a1;
}

void sub_217FA2B44(_Unwind_Exception *a1)
{
  turi::simple_spinlock *v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(184 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 184;
      turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(v7 - 184, v9);
      v7 = *((_QWORD *)&v15 + 1) - 184;
      *((_QWORD *)&v15 + 1) -= 184;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_217FA2C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry::cache_entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  turi::v2_block_impl::typed_decode_stream *v10;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (_OWORD *)(a1 + 40);
  turi::v2_block_impl::encoded_block::encoded_block((turi::v2_block_impl::encoded_block *)(a1 + 40));
  *(_QWORD *)(a1 + 112) = -1;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v4, (__int128 *)(a2 + 24));
  v6 = *(_OWORD *)(a2 + 66);
  v7 = *(_OWORD *)(a2 + 56);
  *v5 = *(_OWORD *)(a2 + 40);
  v5[1] = v7;
  *(_OWORD *)((char *)v5 + 26) = v6;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 88, (__int128 *)(a2 + 88));
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v9 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 138) = *(_OWORD *)(a2 + 138);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v8;
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 160, (__int128 *)(a2 + 160));
  v10 = *(turi::v2_block_impl::typed_decode_stream **)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  std::unique_ptr<turi::v2_block_impl::typed_decode_stream>::reset[abi:ne180100]((turi::v2_block_impl::typed_decode_stream **)(a1 + 176), v10);
  return a1;
}

void sub_217FA2D54(_Unwind_Exception *a1)
{
  turi::simple_spinlock *v1;
  uint64_t v2;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2);
  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

turi::v2_block_impl::typed_decode_stream *std::unique_ptr<turi::v2_block_impl::typed_decode_stream>::reset[abi:ne180100](turi::v2_block_impl::typed_decode_stream **a1, turi::v2_block_impl::typed_decode_stream *a2)
{
  turi::v2_block_impl::typed_decode_stream *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::v2_block_impl::typed_decode_stream::~typed_decode_stream(result);
    JUMPOUT(0x219A19A08);
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>,std::reverse_iterator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  turi::v2_block_impl::typed_decode_stream **v1;
  turi::v2_block_impl::typed_decode_stream **v2;
  uint64_t v3;

  v1 = *(turi::v2_block_impl::typed_decode_stream ***)(a1[2] + 8);
  v2 = *(turi::v2_block_impl::typed_decode_stream ***)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100](v3, v1);
      v1 += 23;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry,std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry> &>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 184;
    std::allocator<turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry>::destroy[abi:ne180100](v4, (turi::v2_block_impl::typed_decode_stream **)(i - 184));
  }
}

void turi::sarray_format_reader_v2<turi::flexible_type>::fetch_rows_from_cache(unint64_t *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unsigned int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD **v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  void *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unsigned int v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  int v96;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  void **v107;

  v5 = a1;
  v6 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(a1, a2);
  v102 = a3;
  v100 = turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(v5, a3 - 1);
  v104 = v6;
  if (v6 < v100 + 1)
  {
    v7 = 0;
    v103 = v5;
    do
    {
      v8 = v104;
      v9 = v5[24];
      v10 = *(_QWORD *)(v9 + 8 * v104++);
      v11 = *(_QWORD *)(v9 + 8 * v104);
      v12 = v5[42];
      v13 = (unsigned __int8 *)(v12 + 184 * v8);
      do
      {
        while (*v13 == 1)
          ;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(1u, v13));
      }
      while (v14);
      if (v10 <= a2)
        v15 = a2;
      else
        v15 = v10;
      if (v11 >= v102)
        v16 = v102;
      else
        v16 = v11;
      v105 = v8;
      if (!*(_BYTE *)(v12 + 184 * v8 + 17))
      {
        turi::sarray_format_reader_v2<turi::flexible_type>::fetch_cache_from_file(v103, v8, v12 + 184 * v8);
        v8 = v105;
      }
      v17 = v12 + 184 * v8;
      v20 = *(_QWORD *)(v17 + 8);
      v19 = v17 + 8;
      v18 = v20;
      v21 = v15 - v20;
      if (v15 <= v20 || *(_BYTE *)(v19 + 8) == 0)
      {
        if (v15 != v18)
        {
          turi::sarray_format_reader_v2<turi::flexible_type>::ensure_cache_decoded((uint64_t)v103, (uint64_t)v13, v105);
          v8 = v105;
          if (v16 > v15)
          {
            v23 = *(_QWORD *)(v103[24] + 8 * v105);
            v24 = (_QWORD **)(v12 + 184 * v105 + 24);
            do
            {
              v25 = **v24 + 16 * (v15 - v23);
              v26 = *a4 + 16 * v7;
              if (v25 != v26)
              {
                switch(*(_BYTE *)(v26 + 12))
                {
                  case 2:
                    v27 = *(unint64_t **)v26;
                    do
                    {
                      v28 = __ldaxr(v27);
                      v29 = v28 - 1;
                    }
                    while (__stlxr(v29, v27));
                    if (!v29)
                    {
                      v30 = *(unint64_t **)v26;
                      if (!*(_QWORD *)v26)
                        goto LABEL_66;
                      if (*((char *)v30 + 31) < 0)
                        operator delete((void *)v30[1]);
                      v31 = v30;
                      v32 = 0x1012C404EF22A49;
                      goto LABEL_65;
                    }
                    break;
                  case 3:
                    v33 = *(unint64_t **)v26;
                    do
                    {
                      v34 = __ldaxr(v33);
                      v35 = v34 - 1;
                    }
                    while (__stlxr(v35, v33));
                    if (!v35)
                    {
                      v36 = *(unint64_t **)v26;
                      if (!*(_QWORD *)v26)
                        goto LABEL_66;
                      v37 = (void *)v36[1];
                      if (v37)
                      {
                        v36[2] = (unint64_t)v37;
                        operator delete(v37);
                      }
                      v31 = v36;
                      v32 = 0x1080C409938AC02;
                      goto LABEL_65;
                    }
                    break;
                  case 4:
                    v38 = *(unint64_t **)v26;
                    do
                    {
                      v39 = __ldaxr(v38);
                      v40 = v39 - 1;
                    }
                    while (__stlxr(v40, v38));
                    if (!v40)
                    {
                      v41 = *(unint64_t **)v26;
                      if (!*(_QWORD *)v26)
                        goto LABEL_66;
                      v107 = (void **)(v41 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v107);
                      goto LABEL_49;
                    }
                    break;
                  case 5:
                    v42 = *(unint64_t **)v26;
                    do
                    {
                      v43 = __ldaxr(v42);
                      v44 = v43 - 1;
                    }
                    while (__stlxr(v44, v42));
                    if (!v44)
                    {
                      v41 = *(unint64_t **)v26;
                      if (!*(_QWORD *)v26)
                        goto LABEL_66;
                      v107 = (void **)(v41 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v107);
LABEL_49:
                      v31 = v41;
                      v32 = 0x1020C405E66F15BLL;
                      goto LABEL_65;
                    }
                    break;
                  case 8:
                    v45 = *(unint64_t **)v26;
                    do
                    {
                      v46 = __ldaxr(v45);
                      v47 = v46 - 1;
                    }
                    while (__stlxr(v47, v45));
                    if (!v47)
                    {
                      v48 = *(unint64_t **)v26;
                      if (!*(_QWORD *)v26)
                        goto LABEL_66;
                      boost::detail::shared_count::~shared_count((unsigned int **)v48 + 2);
                      v31 = v48;
                      v49 = -235920773;
                      goto LABEL_64;
                    }
                    break;
                  case 9:
                    v50 = *(unint64_t **)v26;
                    do
                    {
                      v51 = __ldaxr(v50);
                      v52 = v51 - 1;
                    }
                    while (__stlxr(v52, v50));
                    if (!v52)
                    {
                      v53 = *(unint64_t **)v26;
                      if (*(_QWORD *)v26)
                      {
                        v54 = (void *)v53[6];
                        if (v54)
                        {
                          v53[7] = (unint64_t)v54;
                          operator delete(v54);
                        }
                        v55 = (void *)v53[3];
                        if (v55)
                        {
                          v53[4] = (unint64_t)v55;
                          operator delete(v55);
                        }
                        std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v53 + 1));
                        v31 = v53;
                        v49 = 2071181815;
LABEL_64:
                        v32 = v49 | 0x1030C4000000000;
LABEL_65:
                        MEMORY[0x219A19A08](v31, v32);
                        v8 = v105;
                      }
LABEL_66:
                      *(_QWORD *)v26 = 0;
                    }
                    break;
                  default:
                    break;
                }
                v56 = *(_QWORD *)v25;
                *(_QWORD *)(v26 + 5) = *(_QWORD *)(v25 + 5);
                *(_QWORD *)v26 = v56;
                LODWORD(v56) = *(unsigned __int8 *)(v25 + 12);
                *(_BYTE *)(v26 + 12) = v56;
                v57 = v56 > 9;
                v58 = (1 << v56) & 0x33C;
                if (!v57 && v58 != 0)
                {
                  v60 = *(unint64_t **)v26;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 + 1, v60));
                }
              }
              ++v7;
              ++v15;
            }
            while (v15 != v16);
          }
          goto LABEL_132;
        }
      }
      else
      {
        turi::v2_block_impl::encoded_block_range::skip(v12 + 184 * v8 + 112, v21);
        *(_QWORD *)v19 = v15;
        v8 = v105;
      }
      if (*(_BYTE *)(v19 + 8))
      {
        turi::v2_block_impl::encoded_block_range::decode_to((turi::v2_block_impl::encoded_block_range *)(v12 + 184 * v8 + 112), (turi::flexible_type *)(*a4 + 16 * v7), v16 - v15);
        v7 += v16 - v15;
        *(_QWORD *)v19 = v16;
        v8 = v105;
      }
      else if (v16 > v15)
      {
        v62 = *(_QWORD *)(v103[24] + 8 * v8);
        v63 = (_QWORD **)(v12 + 184 * v8 + 24);
        do
        {
          v64 = **v63 + 16 * (v15 - v62);
          v65 = *a4 + 16 * v7;
          if (v64 != v65)
          {
            switch(*(_BYTE *)(v65 + 12))
            {
              case 2:
                v66 = *(unint64_t **)v65;
                do
                {
                  v67 = __ldaxr(v66);
                  v68 = v67 - 1;
                }
                while (__stlxr(v68, v66));
                if (!v68)
                {
                  v69 = *(unint64_t **)v65;
                  if (!*(_QWORD *)v65)
                    goto LABEL_122;
                  if (*((char *)v69 + 31) < 0)
                    operator delete((void *)v69[1]);
                  v70 = v69;
                  v71 = 0x1012C404EF22A49;
                  goto LABEL_121;
                }
                break;
              case 3:
                v72 = *(unint64_t **)v65;
                do
                {
                  v73 = __ldaxr(v72);
                  v74 = v73 - 1;
                }
                while (__stlxr(v74, v72));
                if (!v74)
                {
                  v75 = *(unint64_t **)v65;
                  if (!*(_QWORD *)v65)
                    goto LABEL_122;
                  v76 = (void *)v75[1];
                  if (v76)
                  {
                    v75[2] = (unint64_t)v76;
                    operator delete(v76);
                  }
                  v70 = v75;
                  v71 = 0x1080C409938AC02;
                  goto LABEL_121;
                }
                break;
              case 4:
                v77 = *(unint64_t **)v65;
                do
                {
                  v78 = __ldaxr(v77);
                  v79 = v78 - 1;
                }
                while (__stlxr(v79, v77));
                if (!v79)
                {
                  v80 = *(unint64_t **)v65;
                  if (!*(_QWORD *)v65)
                    goto LABEL_122;
                  v107 = (void **)(v80 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v107);
                  goto LABEL_105;
                }
                break;
              case 5:
                v81 = *(unint64_t **)v65;
                do
                {
                  v82 = __ldaxr(v81);
                  v83 = v82 - 1;
                }
                while (__stlxr(v83, v81));
                if (!v83)
                {
                  v80 = *(unint64_t **)v65;
                  if (!*(_QWORD *)v65)
                    goto LABEL_122;
                  v107 = (void **)(v80 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v107);
LABEL_105:
                  v70 = v80;
                  v71 = 0x1020C405E66F15BLL;
                  goto LABEL_121;
                }
                break;
              case 8:
                v84 = *(unint64_t **)v65;
                do
                {
                  v85 = __ldaxr(v84);
                  v86 = v85 - 1;
                }
                while (__stlxr(v86, v84));
                if (!v86)
                {
                  v87 = *(unint64_t **)v65;
                  if (!*(_QWORD *)v65)
                    goto LABEL_122;
                  boost::detail::shared_count::~shared_count((unsigned int **)v87 + 2);
                  v70 = v87;
                  v88 = -235920773;
                  goto LABEL_120;
                }
                break;
              case 9:
                v89 = *(unint64_t **)v65;
                do
                {
                  v90 = __ldaxr(v89);
                  v91 = v90 - 1;
                }
                while (__stlxr(v91, v89));
                if (!v91)
                {
                  v92 = *(unint64_t **)v65;
                  if (*(_QWORD *)v65)
                  {
                    v93 = (void *)v92[6];
                    if (v93)
                    {
                      v92[7] = (unint64_t)v93;
                      operator delete(v93);
                    }
                    v94 = (void *)v92[3];
                    if (v94)
                    {
                      v92[4] = (unint64_t)v94;
                      operator delete(v94);
                    }
                    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v92 + 1));
                    v70 = v92;
                    v88 = 2071181815;
LABEL_120:
                    v71 = v88 | 0x1030C4000000000;
LABEL_121:
                    MEMORY[0x219A19A08](v70, v71);
                    v8 = v105;
                  }
LABEL_122:
                  *(_QWORD *)v65 = 0;
                }
                break;
              default:
                break;
            }
            v95 = *(_QWORD *)v64;
            *(_QWORD *)(v65 + 5) = *(_QWORD *)(v64 + 5);
            *(_QWORD *)v65 = v95;
            LODWORD(v95) = *(unsigned __int8 *)(v64 + 12);
            *(_BYTE *)(v65 + 12) = v95;
            v57 = v95 > 9;
            v96 = (1 << v95) & 0x33C;
            if (!v57 && v96 != 0)
            {
              v98 = *(unint64_t **)v65;
              do
                v99 = __ldaxr(v98);
              while (__stlxr(v99 + 1, v98));
            }
          }
          ++v7;
          ++v15;
        }
        while (v15 != v16);
      }
      if (v16 == *(_QWORD *)(v103[24] + 8 * v104))
      {
        turi::sarray_format_reader_v2<turi::flexible_type>::release_cache(v103, v8);
        v8 = v105;
      }
LABEL_132:
      __dmb(0xBu);
      *v13 = 0;
      v5 = v103;
    }
    while (v8 != v100);
  }
}

void sub_217FA354C(_Unwind_Exception *a1)
{
  _BYTE *v1;

  __dmb(0xBu);
  *v1 = 0;
  _Unwind_Resume(a1);
}

unint64_t turi::sarray_format_reader_v2<turi::flexible_type>::block_offset_containing_row(_QWORD *a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = (_QWORD *)a1[24];
  v3 = (_QWORD *)a1[25];
  if (v3 != v2)
  {
    v4 = v3 - v2;
    v3 = (_QWORD *)a1[24];
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[v4 >> 1];
      v8 = *v6;
      v7 = v6 + 1;
      v4 += ~(v4 >> 1);
      if (v8 < a2)
        v3 = v7;
      else
        v4 = v5;
    }
    while (v4);
  }
  v9 = v3 - v2;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[22] - a1[21]) >> 3);
  if (v9 >= v10)
    return v10 - 1;
  else
    return v9 - (v2[v9] != a2);
}

void turi::sarray_format_reader_v2<turi::flexible_type>::fetch_cache_from_file(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  turi::v2_block_impl::typed_decode_stream *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  turi::v2_block_impl::typed_decode_stream *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37[3];
  __int128 v38;
  uint64_t v39;
  __n128 v40;
  __int128 *v41;

  v6 = (_QWORD *)(a3 + 24);
  if (*(_QWORD *)(a3 + 24))
  {
    turi::buffer_pool<std::vector<turi::flexible_type>>::release_buffer((uint64_t)&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, (uint64_t **)(a3 + 24));
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](v6);
  }
  v7 = a1[21] + 24 * a2;
  v41 = 0;
  v8 = a1[1];
  v9 = *(_QWORD *)(v7 + 16);
  v38 = *(_OWORD *)v7;
  v39 = v9;
  turi::v2_block_impl::block_manager::read_block(v8, (unint64_t *)&v38, &v41, &v40);
  v10 = v40.n128_u64[0];
  if (!v40.n128_u64[0])
    turi::sarray_format_reader_v2<turi::flexible_type>::fetch_cache_from_file(unsigned long,turi::sarray_format_reader_v2<turi::flexible_type>::cache_entry &)::{lambda(void)#1}::operator()();
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1[24] + 8 * a2);
  v11 = v41[2];
  v12 = *v41;
  v37[1] = v41[1];
  v37[2] = v11;
  v37[0] = v12;
  v35 = v10;
  v36 = v40.n128_u64[1];
  if (v40.n128_u64[1])
  {
    v13 = (unint64_t *)(v40.n128_u64[1] + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  turi::v2_block_impl::encoded_block::init(a3 + 40, v37, &v35);
  v15 = (std::__shared_weak_count *)v36;
  if (v36)
  {
    v16 = (unint64_t *)(v36 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  turi::v2_block_impl::encoded_block::get_range((turi::v2_block_impl::encoded_block *)(a3 + 40), (turi::v2_block_impl::encoded_block_range *)&v31);
  v18 = v32[0];
  *(_OWORD *)(a3 + 112) = v31;
  *(_OWORD *)(a3 + 128) = v18;
  *(_OWORD *)(a3 + 138) = *(_OWORD *)((char *)v32 + 10);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a3 + 160, &v33);
  v19 = v34;
  v34 = 0;
  std::unique_ptr<turi::v2_block_impl::typed_decode_stream>::reset[abi:ne180100]((turi::v2_block_impl::typed_decode_stream **)(a3 + 176), v19);
  turi::v2_block_impl::encoded_block_range::~encoded_block_range((turi::v2_block_impl::typed_decode_stream **)&v31);
  *(_WORD *)(a3 + 16) = 257;
  v20 = a1[38];
  if ((*(_QWORD *)(v20 + 8 * (a2 >> 6)) & (1 << a2)) == 0)
  {
    v21 = a1 + 41;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
    v20 = a1[38];
  }
  v23 = (unint64_t *)(v20 + 8 * (a2 >> 6));
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 | (1 << a2), v23));
  v25 = a1[41];
  if (v25 != turi::SFRAME_MAX_BLOCKS_IN_CACHE)
  {
    v26 = turi::SFRAME_MAX_BLOCKS_IN_CACHE - v25;
    do
    {
      if (a1[41] <= turi::SFRAME_MAX_BLOCKS_IN_CACHE)
        break;
      turi::sarray_format_reader_v2<turi::flexible_type>::try_evict_something_from_cache((turi::random *)a1);
    }
    while (!__CFADD__(v26++, 1));
  }
  v28 = (std::__shared_weak_count *)v40.n128_u64[1];
  if (v40.n128_u64[1])
  {
    v29 = (unint64_t *)(v40.n128_u64[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_217FA3820(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1 - 72);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<turi::flexible_type>::release_cache(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v2 = a1[42];
  if (*(_BYTE *)(v2 + 184 * a2 + 17))
  {
    v5 = 184 * a2;
    turi::buffer_pool<std::vector<turi::flexible_type>>::release_buffer((uint64_t)&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, (uint64_t **)(v2 + 184 * a2 + 24));
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100]((_QWORD *)(a1[42] + v5 + 24));
    turi::v2_block_impl::encoded_block::release((turi::v2_block_impl::encoded_block *)(a1[42] + v5 + 40));
    turi::v2_block_impl::encoded_block_range::release((turi::v2_block_impl::typed_decode_stream **)(a1[42] + v5 + 112));
    *(_BYTE *)(a1[42] + v5 + 17) = 0;
    v6 = (unint64_t *)(a1[38] + 8 * (a2 >> 6));
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 & ~(1 << a2), v6));
    v8 = a1 + 41;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
  }
}

void turi::sarray_format_reader_v2<turi::flexible_type>::ensure_cache_decoded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16[3];
  uint64_t *v17;
  std::__shared_weak_count *v18;

  if (*(_BYTE *)(a2 + 16))
  {
    turi::buffer_pool<std::vector<turi::flexible_type>>::get_new_buffer(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, (uint64_t)v16);
    std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a2 + 24, v16);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v16[0] + 1);
    if (*((_QWORD *)&v16[0] + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v16[0] + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(uint64_t **)(a2 + 88);
    v10 = *(std::__shared_weak_count **)(a2 + 96);
    v17 = v9;
    v18 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = *(_OWORD *)(a2 + 56);
    v16[0] = *(_OWORD *)(a2 + 40);
    v16[1] = v13;
    v16[2] = *(_OWORD *)(a2 + 72);
    turi::v2_block_impl::typed_decode((uint64_t)v16, *v9, v9[1] - *v9, *(uint64_t **)(a2 + 24));
    turi::v2_block_impl::encoded_block::release((turi::v2_block_impl::encoded_block *)(a2 + 40));
    turi::v2_block_impl::encoded_block_range::release((turi::v2_block_impl::typed_decode_stream **)(a2 + 112));
    *(_BYTE *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8 * a3);
    if (v10)
    {
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_217FA3A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::buffer_pool<std::vector<turi::flexible_type>>::release_buffer(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = *a2;
  if (*a2)
  {
    v6 = *v2;
    v5 = v2[1];
    if (v5 == *v2)
    {
      v7 = *a2;
    }
    else
    {
      do
      {
        v5 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v5);
      }
      while (v5 != v6);
      v7 = *a2;
      v5 = **a2;
    }
    v2[1] = v6;
    if ((unint64_t)(v7[2] - v5) >= 0xFFFFF1)
      std::vector<turi::flexible_type>::shrink_to_fit(v7);
    if ((unint64_t)(*(_QWORD *)(a1 + 136) + ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4)) < *(_QWORD *)(a1 + 64))
    {
      pthread_mutex_lock((pthread_mutex_t *)a1);
      std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back((_QWORD *)(a1 + 96), (__n128 *)a2);
      pthread_mutex_unlock((pthread_mutex_t *)a1);
    }
    std::shared_ptr<turi::neural_net::Subscriber<std::unique_ptr<turi::style_transfer::Checkpoint>>>::reset[abi:ne180100](a2);
  }
}

void sub_217FA3B54(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void turi::sarray_format_reader_v2<turi::flexible_type>::try_evict_something_from_cache(turi::random *a1)
{
  uint64_t v2;
  unint64_t v3;
  turi::random::generator *source;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;

  v2 = (uint64_t)(*((_QWORD *)a1 + 43) - *((_QWORD *)a1 + 42)) >> 3;
  v3 = 0xD37A6F4DE9BD37A7 * v2 - 1;
  if (0xD37A6F4DE9BD37A7 * v2 != 1)
  {
    source = turi::random::get_source(a1);
    pthread_mutex_lock((pthread_mutex_t *)((char *)source + 6288));
    v3 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>((uint64_t *)source + 785, 0, v3);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)source + 6288));
  }
  v5 = v3 >> 6;
  v6 = (_QWORD *)*((_QWORD *)a1 + 38);
  v7 = v6[v3 >> 6];
  if (((v7 >> v3) & 1) != 0)
    goto LABEL_4;
  v9 = v7 & ~(0xFFFFFFFFFFFFFFFFLL >> (v3 & 0x3F ^ 0x3F));
  if (v9)
  {
    v3 = __clz(__rbit64(v9)) | v3 & 0xFFFFFFFFFFFFFFC0;
LABEL_15:
    if (v3 < *((_QWORD *)a1 + 39))
      goto LABEL_4;
  }
  else
  {
    v10 = v5 << 6;
    v11 = v5 + 1;
    while (v11 < *((_QWORD *)a1 + 40))
    {
      v12 = v6[v11];
      v10 += 64;
      ++v11;
      if (v12)
      {
        v3 = __clz(__rbit64(v12)) + v10;
        goto LABEL_15;
      }
    }
  }
  if ((*v6 & 1) == 0)
  {
    v13 = *v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v13)
    {
      v3 = __clz(__rbit64(v13));
      goto LABEL_4;
    }
    v14 = *((_QWORD *)a1 + 40);
    if (v14 <= 1)
      v14 = 1;
    v15 = v14 - 1;
    v16 = v6 + 1;
    while (v15)
    {
      v18 = *v16++;
      v17 = v18;
      --v15;
      v13 -= 64;
      if (v18)
      {
        v3 = __clz(__rbit64(v17)) - v13;
        goto LABEL_4;
      }
    }
  }
  v3 = 0;
LABEL_4:
  v19 = *((_QWORD *)a1 + 42) + 184 * v3;
  v20 = 0;
  if (std::unique_lock<turi::simple_spinlock>::try_lock((uint64_t)&v19))
    turi::sarray_format_reader_v2<turi::flexible_type>::release_cache(a1, v3);
  if (v20)
  {
    v8 = (_BYTE *)v19;
    __dmb(0xBu);
    *v8 = 0;
  }
}

void sub_217FA3D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9, char a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void **std::vector<turi::flexible_type>::shrink_to_fit(uint64_t *a1)
{
  void **result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  char *v11;
  char *v12;
  void **v13;

  v3 = a1[2];
  result = (void **)(a1 + 2);
  v4 = *a1;
  v5 = a1[1];
  v6 = (v5 - *a1) >> 4;
  if (v6 < (v3 - *a1) >> 4)
  {
    v13 = result;
    if (v5 == v4)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v6);
    }
    v9 = v7;
    v10 = &v7[16 * v6];
    v11 = v10;
    v12 = &v7[16 * v8];
    std::vector<turi::flexible_type>::__swap_out_circular_buffer(a1, &v9);
    return std::__split_buffer<turi::flexible_type>::~__split_buffer(&v9);
  }
  return result;
}

void sub_217FA3DAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x217FA3D9CLL);
}

__n128 std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_217FA4128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::unique_lock<turi::simple_spinlock>::try_lock(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  pthread_mutex_t *v4;

  v1 = *(unsigned __int8 **)a1;
  if (!*(_QWORD *)a1)
  {
    std::__throw_system_error(1, "unique_lock::try_lock: references null mutex");
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 8))
  {
LABEL_6:
    std::__throw_system_error(11, "unique_lock::try_lock: already locked");
    return turi::buffer_pool<std::vector<turi::flexible_type>>::get_new_buffer(v4);
  }
  do
    v2 = __ldaxr(v1);
  while (__stlxr(1u, v1));
  *(_BYTE *)(a1 + 8) = v2 == 0;
  return v2 == 0;
}

uint64_t turi::buffer_pool<std::vector<turi::flexible_type>>::get_new_buffer@<X0>(pthread_mutex_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t result;
  _QWORD *v15;

  v4 = &a1[1].__opaque[24];
  if (!*(_QWORD *)a1[2].__opaque)
  {
    pthread_mutex_lock(a1);
    v6 = *(_QWORD *)a1[1].__opaque;
    v5 = *(_QWORD *)&a1[1].__opaque[8];
    if (v5 != v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v6 + v7 + 8);
        if (v9 && !*(_QWORD *)(v9 + 8))
        {
          std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back(v4, (__int128 *)(v6 + v7));
          v6 = *(_QWORD *)a1[1].__opaque;
          v5 = *(_QWORD *)&a1[1].__opaque[8];
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (v5 - v6) >> 4);
    }
    pthread_mutex_unlock(a1);
    if (!*(_QWORD *)a1[2].__opaque)
      goto LABEL_15;
  }
  pthread_mutex_lock(a1);
  v10 = *(_QWORD *)a1[2].__opaque;
  if (v10)
  {
    v11 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)&a1[1].__opaque[32]
                                + (((unint64_t)(v10 + a1[2].__sig - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v10 + LOBYTE(a1[2].__sig) - 1));
    *(_OWORD *)a2 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::pop_back(v4);
  }
  result = pthread_mutex_unlock(a1);
  if (!v10)
  {
LABEL_15:
    v15 = operator new(0x30uLL);
    v15[2] = 0;
    *v15 = &unk_24D91E508;
    v15[1] = 0;
    v15[4] = 0;
    v15[5] = 0;
    *(_QWORD *)(a2 + 8) = v15;
    v15[3] = 0;
    *(_QWORD *)a2 = v15 + 3;
    pthread_mutex_lock(a1);
    if (a1[1].__sig > (unint64_t)((uint64_t)(*(_QWORD *)&a1[1].__opaque[8] - *(_QWORD *)a1[1].__opaque) >> 4))
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)a1[1].__opaque, (__int128 *)a2);
    return pthread_mutex_unlock(a1);
  }
  return result;
}

void sub_217FA4334(_Unwind_Exception *a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  pthread_mutex_unlock(v2);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

uint64_t std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::pop_back(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](*(_QWORD *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v2);
  --a1[5];
  return std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 32 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100)
    a2 = 1;
  if (v5 < 0x200)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<std::vector<turi::flexible_type>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

std::string *turi::index_file_information::index_file_information(std::string *this, const turi::index_file_information *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(_OWORD *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(this[3].__r_.__value_.__r.__words, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3);
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 4, *((__int128 **)a2 + 12), *((__int128 **)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3));
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&this[5], (const void ***)a2 + 15);
  return this;
}

void sub_217FA47AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_217FA4848(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void turi::sarray_reader<turi::flexible_type>::size(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"reader", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"__null", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_reader.hpp", "operator()", 364, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_reader<turi::flexible_type>::size(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA4A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (void **)(*a1 + 96 * a2));
  }
}

void turi::sarray_reader_buffer<turi::flexible_type>::init(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  a1[5] = a2;
  a1[6] = 0;
  a1[11] = a3;
  a1[7] = a3;
  a1[8] = a3;
  v8 = turi::sarray_reader<turi::flexible_type>::size(a2);
  if (v8 >= a4)
    v9 = a4;
  else
    v9 = v8;
  a1[9] = v9;
  a1[10] = a5;
  v11 = *a1;
  v10 = a1[1];
  if (v10 != *a1)
  {
    do
    {
      v10 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v10);
    }
    while (v10 != v11);
  }
  a1[1] = v11;
}

void std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      v13 = 96 * ((96 * a2 - 96) / 0x60) + 96;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[96 * v8];
    v18 = &v12[96 * v11];
    v14 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<turi::sarray_reader_buffer<turi::flexible_type>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_217FA4CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_reader_buffer<turi::flexible_type>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_reader_buffer<turi::flexible_type>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>,std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 96) = 0;
      *(_QWORD *)(v7 - 88) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      v8 = *(_OWORD *)(a3 - 96);
      a3 -= 96;
      *(_OWORD *)(v7 - 96) = v8;
      *(_QWORD *)(v7 - 80) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v9 = *(_OWORD *)(a3 + 56);
      v10 = *(_OWORD *)(a3 + 72);
      v11 = *(_QWORD *)(a3 + 88);
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 8) = v11;
      *(_OWORD *)(v7 - 24) = v10;
      *(_OWORD *)(v7 - 40) = v9;
      v7 = *((_QWORD *)&v17 + 1) - 96;
      *((_QWORD *)&v17 + 1) -= 96;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_reader_buffer<turi::flexible_type>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(i + 3));
    v6 = i;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
    i = (void **)(*(_QWORD *)(a2 + 32) + 96);
  }
}

uint64_t std::__split_buffer<turi::sarray_reader_buffer<turi::flexible_type>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<turi::sarray_reader_buffer<turi::flexible_type>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<turi::sarray_reader_buffer<turi::flexible_type>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 96);
    *(_QWORD *)(a1 + 16) = i - 96;
    std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](i - 72);
    v6 = v5;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

uint64_t std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__shared_ptr_pointer<turi::sarray_reader<turi::flexible_type> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sarray_reader<turi::flexible_type> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<turi::sarray_reader_buffer<turi::flexible_type>,std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,std::shared_ptr<turi::sarray_reader<turi::flexible_type>> &,unsigned long &,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<turi::sarray_reader_buffer<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sarray_reader<turi::flexible_type>> &,unsigned long &,unsigned long &,std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_217FA52FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<turi::sarray_reader_buffer<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sarray_reader<turi::flexible_type>> &,unsigned long &,unsigned long &,std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_24D91E5B8;
  a1[1] = 0;
  std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>::construct[abi:ne180100]<turi::sarray_reader_buffer<turi::flexible_type>,std::shared_ptr<turi::sarray_reader<turi::flexible_type>> &,unsigned long &,unsigned long &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_217FA5364(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sarray_reader_buffer<turi::flexible_type>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E5B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sarray_reader_buffer<turi::flexible_type>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E5B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

void std::__shared_ptr_emplace<turi::sarray_reader_buffer<turi::flexible_type>>::__on_zero_shared(uint64_t a1)
{
  void **v1;
  void **v2;

  v1 = (void **)(a1 + 24);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a1 + 48);
  v2 = v1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>::construct[abi:ne180100]<turi::sarray_reader_buffer<turi::flexible_type>,std::shared_ptr<turi::sarray_reader<turi::flexible_type>> &,unsigned long &,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = a3[1];
  v11 = *a3;
  v12 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  turi::sarray_reader_buffer<turi::flexible_type>::sarray_reader_buffer(a2, &v11, *a4, *a5, 1024);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217FA5494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader_buffer<turi::flexible_type>::sarray_reader_buffer(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  turi::sarray_reader_buffer<turi::flexible_type>::init((uint64_t *)a1, a2, a3, a4, a5);
  return a1;
}

void sub_217FA54E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)(v10 + 3));
  a10 = v10;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::sarray_reader_buffer<turi::flexible_type>::init(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a1 + 3, a2);
  v9 = a1[3];
  a1[5] = v9;
  a1[6] = 0;
  a1[11] = a3;
  a1[7] = a3;
  a1[8] = a3;
  v10 = turi::sarray_reader<turi::flexible_type>::size(v9);
  if (v10 >= a4)
    v11 = a4;
  else
    v11 = v10;
  a1[9] = v11;
  a1[10] = a5;
  v13 = *a1;
  v12 = a1[1];
  if (v12 != *a1)
  {
    do
    {
      v12 -= 16;
      std::allocator<turi::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v12);
    }
    while (v12 != v13);
  }
  a1[1] = v13;
}

void std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;

  v3 = (_QWORD *)a2[11];
  if (v3 == a2 + 8)
  {
    v4 = 4;
    v3 = a2 + 8;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  result = (_QWORD *)a2[7];
  if (result == a2 + 4)
  {
    v6 = 4;
    result = a2 + 4;
  }
  else
  {
    if (!result)
      goto LABEL_11;
    v6 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a2[3];
  if (v7 == a2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2);
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 40))(a2[3]);
  return result;
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x130uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_217FA56F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24D91E608;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v2 = a1 + 24;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  turi::sarray<turi::flexible_type>::sarray(v2);
  return a1;
}

void sub_217FA5788(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24D91E608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t turi::sarray<turi::flexible_type>::sarray(uint64_t a1)
{
  int v2;

  *(_QWORD *)a1 = &unk_24D91E658;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_WORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  return a1;
}

void sub_217FA58B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  turi::index_file_information *v2;
  void **v3;

  if (*(char *)(v1 + 175) < 0)
    operator delete(*v3);
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::~sarray(uint64_t a1)
{
  turi::sarray<turi::flexible_type>::~sarray(a1);
  JUMPOUT(0x219A19A08);
}

uint64_t turi::sarray<turi::flexible_type>::set_num_segments(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string v11;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(unsigned __int8 *)(a1 + 249), "SArray not opened for writing");
  if (!a2 || (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 120))(*(_QWORD *)(a1 + 176)) == a2)
    return 0;
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new();
  *(_QWORD *)v6 = &unk_24D91E6C0;
  *(_BYTE *)(v6 + 8) = 0;
  v7 = pthread_mutex_init((pthread_mutex_t *)(v6 + 24), 0);
  assert_msg(v7 == 0, "Mutex create error %d", v7);
  *(_QWORD *)(v6 + 160) = 0;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_QWORD *)(v6 + 88) = 128;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_BYTE *)(v6 + 376) = 0;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_QWORD *)(v6 + 384) = 0;
  *(_QWORD *)(v6 + 392) = 0;
  *(_QWORD *)(v6 + 400) = 0;
  *(_QWORD *)(a1 + 176) = v6;
  if (*(char *)(a1 + 175) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 152), *(_QWORD *)(a1 + 160));
  else
    v11 = *(std::string *)(a1 + 152);
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, &v11, a2, 1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  if (v8 != a1 + 8)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(v8 + 120), *(__int128 **)(a1 + 128), (__int128 *)(a1 + 136));
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v9);
  v10 = *(_QWORD *)(v9 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v9 + 24);
  *(_QWORD *)(a1 + 48) = v10;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v9 + 48));
  if (a1 + 8 != v9)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v9 + 72), *(_QWORD *)(v9 + 80), (uint64_t)(*(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v9 + 96), *(__int128 **)(v9 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 104) - *(_QWORD *)(v9 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(v9 + 120), (__int128 *)(v9 + 128));
  }
  return 1;
}

void sub_217FA5B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray<turi::flexible_type>::num_segments(uint64_t a1)
{
  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  return *(_QWORD *)(a1 + 40);
}

_QWORD *turi::sarray<turi::flexible_type>::get_output_iterator@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char type;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20[0] = a1[22];
  if (!v20[0])
  {
    v18[0] = v20;
    turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator()();
  }
  v18[0] = a2;
  v16[0] = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  if (v16[0] <= a2)
  {
    v20[0] = v18;
    v20[1] = v16;
    turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator()();
  }
  type = turi::sarray<turi::flexible_type>::get_type((uint64_t)a1);
  v7 = operator new(0x20uLL);
  *(_QWORD *)v7 = &unk_24D91E780;
  v7[8] = type;
  *((_QWORD *)v7 + 2) = a1;
  *((_QWORD *)v7 + 3) = a2;
  v21 = v7;
  v8 = operator new(0x20uLL);
  *(_QWORD *)v8 = &unk_24D91E850;
  v8[8] = type;
  *((_QWORD *)v8 + 2) = a1;
  *((_QWORD *)v8 + 3) = a2;
  v19 = v8;
  v9 = operator new(0x20uLL);
  *v9 = &unk_24D91E8E0;
  v9[1] = a1;
  v9[2] = a2;
  *((_BYTE *)v9 + 24) = type;
  v17 = v9;
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(a3, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_8;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_8:
  v12 = v19;
  if (v19 == v18)
  {
    v13 = 4;
    v12 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_13;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_13:
  result = v21;
  if (v21 == v20)
  {
    v15 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_217FA5D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;

  v22 = a13;
  if (a13 == v21)
  {
    v23 = 4;
    v22 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a17;
  if (a17 == &a14)
  {
    v25 = 4;
    v24 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  v26 = a21;
  if (a21 == &a18)
  {
    v27 = 4;
    v26 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_16:
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::close(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 40))(*(_QWORD *)(a1 + 176));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 48))(*(_QWORD *)(a1 + 176));
  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v2);
  v3 = *(_QWORD *)(v2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 48) = v3;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v2 + 48));
  if (a1 + 8 != v2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v2 + 72), *(_QWORD *)(v2 + 80), (uint64_t)(*(_QWORD *)(v2 + 80) - *(_QWORD *)(v2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v2 + 96), *(__int128 **)(v2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 104) - *(_QWORD *)(v2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(v2 + 120), (__int128 *)(v2 + 128));
  }
  v4 = *(_QWORD *)(a1 + 176);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_BYTE *)(a1 + 249) = 0;
  turi::sarray<turi::flexible_type>::keep_array_file_ref((turi::fileio::file_handle_pool *)a1);
}

uint64_t turi::sarray<turi::flexible_type>::~sarray(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D91E658;
  v4 = (void **)(a1 + 256);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 184));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 128, *(_QWORD **)(a1 + 136));
  v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t turi::sarray_group_format_writer_v2<turi::flexible_type>::~sarray_group_format_writer_v2(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D91E6C0;
  v2 = (void **)(a1 + 24);
  v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return a1;
}

{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = &unk_24D91E6C0;
  v2 = (void **)(a1 + 24);
  v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return MEMORY[0x219A19A08](a1, 0x10B3C40E6DD008DLL);
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::open(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string __p;

  v4 = a4;
  if (a4)
    v6 = a3;
  else
    v6 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  v7 = a1 + 24;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::v2_block_impl::block_writer::init(v7, &__p, v6, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 16) = v6;
  std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::resize((uint64_t *)(a1 + 384), v4);
  if (v4)
  {
    v8 = 8;
    do
    {
      std::vector<std::vector<turi::flexible_type>>::resize((uint64_t *)(*(_QWORD *)(a1 + 384) + v8), v6);
      v8 += 56;
      --v4;
    }
    while (v4);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = 0;
    do
      turi::sarray_group_format_writer_v2<turi::flexible_type>::open_segment(a1, v9++);
    while (v9 < *(_QWORD *)(a1 + 16));
  }
}

void sub_217FA617C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray_group_format_writer_v2<turi::flexible_type>::set_options(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return turi::v2_block_impl::block_writer::set_options(a1 + 24, a2, a3);
}

uint64_t turi::sarray_group_format_writer_v2<turi::flexible_type>::get_index_info(uint64_t a1)
{
  return turi::v2_block_impl::block_writer::get_index_info((turi::v2_block_impl::block_writer *)(a1 + 24));
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::close(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;

  if (!*(_BYTE *)(a1 + 8))
    turi::sarray_group_format_writer_v2<turi::flexible_type>::close(void)::{lambda(void)#1}::operator()();
  *(_BYTE *)(a1 + 8) = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    v2 = 0;
    do
    {
      if (*(_QWORD *)(a1 + 392) != *(_QWORD *)(a1 + 384))
      {
        v3 = 0;
        do
          turi::sarray_group_format_writer_v2<turi::flexible_type>::flush_block(a1, v3++, v2);
        while (v3 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3));
      }
      turi::v2_block_impl::block_writer::close_segment((turi::v2_block_impl::block_writer *)(a1 + 24), v2++);
    }
    while (v2 < *(_QWORD *)(a1 + 16));
  }
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::write_index_file(uint64_t a1)
{
  turi::v2_block_impl::block_writer::write_index_file((turi::v2_block_impl::block_writer *)(a1 + 24));
}

uint64_t turi::sarray_group_format_writer_v2<turi::flexible_type>::write_segment(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, v8++, a2, v3 + v7);
      v3 = *a3;
      v7 += 16;
    }
    while (v8 < (a3[1] - *a3) >> 4);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, v8++, a2, v3 + v7);
      v3 = *a3;
      v7 += 16;
    }
    while (v8 < (a3[1] - *a3) >> 4);
  }
  return result;
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::write_segment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8);
  v8 = v7 + 24 * a3;
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = (uint64_t *)(v8 + 8);
  if (v9 >= v10)
  {
    v16 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>((uint64_t *)(v7 + 24 * a3), (char *)a4);
  }
  else
  {
    *(_QWORD *)v9 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 12) = 0;
    if ((uint64_t *)v9 != a4)
    {
      v12 = *a4;
      *(_QWORD *)(v9 + 5) = *(uint64_t *)((char *)a4 + 5);
      *(_QWORD *)v9 = v12;
      v13 = *((unsigned __int8 *)a4 + 12);
      *(_BYTE *)(v9 + 12) = v13;
      if (v13 <= 9 && ((1 << v13) & 0x33C) != 0)
      {
        v14 = *(unint64_t **)v9;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
    }
    v16 = v9 + 16;
  }
  *v11 = v16;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32) <= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                                                                                       - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 4))
    turi::sarray_group_format_writer_v2<turi::flexible_type>::flush_block(a1, a2, a3);
}

{
  uint64_t v7;
  uint64_t v8;

  v7 = 56 * a2;
  v8 = 3 * a3;
  std::vector<turi::flexible_type>::push_back[abi:ne180100]((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 8) + 24 * a3), a4);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 384) + v7 + 32) <= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + v7 + 8)
                                                                                              + 8 * v8
                                                                                              + 8)
                                                                                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 384) + v7 + 8)
                                                                                              + 8 * v8)) >> 4))
    turi::sarray_group_format_writer_v2<turi::flexible_type>::flush_block(a1, a2, a3);
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::write_segment(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a1 + 384);
  if (*(_QWORD *)(a1 + 392) != v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,std::back_insert_iterator<std::vector<turi::flexible_type>>,0>(**(uint64_t ***)(*a3 + v8), *(uint64_t **)(*(_QWORD *)(*a3 + v8) + 8), (uint64_t *)(*(_QWORD *)(v3 + v7 + 8) + 24 * a2));
      v3 = *(_QWORD *)(a1 + 384);
      if (*(_QWORD *)(v3 + v7 + 32) <= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(v3 + v7 + 8) + 24 * a2 + 8)
                                                                   - *(_QWORD *)(*(_QWORD *)(v3 + v7 + 8) + 24 * a2)) >> 4))
      {
        turi::sarray_group_format_writer_v2<turi::flexible_type>::flush_block(a1, v9, a2);
        v3 = *(_QWORD *)(a1 + 384);
      }
      ++v9;
      v8 += 16;
      v7 += 56;
    }
    while (v9 < 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 392) - v3) >> 3));
  }
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::write_column(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v9 = *(_QWORD *)(a1 + 384) + 56 * a2;
    v10 = (_QWORD *)(v9 + 32);
    v11 = (uint64_t *)(*(_QWORD *)(v9 + 8) + 24 * a3);
    v12 = v11 + 1;
    do
    {
      v13 = *v12;
      if (*v12 >= (unint64_t)v11[2])
      {
        v18 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(v11, (char *)v4);
      }
      else
      {
        *(_QWORD *)v13 = 0;
        *(_DWORD *)(v13 + 8) = 0;
        *(_BYTE *)(v13 + 12) = 0;
        if ((uint64_t *)v13 != v4)
        {
          v14 = *v4;
          *(_QWORD *)(v13 + 5) = *(uint64_t *)((char *)v4 + 5);
          *(_QWORD *)v13 = v14;
          v15 = *((unsigned __int8 *)v4 + 12);
          *(_BYTE *)(v13 + 12) = v15;
          if (v15 <= 9 && ((1 << v15) & 0x33C) != 0)
          {
            v16 = *(unint64_t **)v13;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
          }
        }
        v18 = v13 + 16;
      }
      *v12 = v18;
      if (*v10 <= (unint64_t)((v18 - *v11) >> 4))
        turi::sarray_group_format_writer_v2<turi::flexible_type>::flush_block(a1, a2, a3);
      v4 += 2;
    }
    while (v4 != v5);
  }
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    v9 = *(_QWORD *)(a1 + 384);
    v10 = (uint64_t *)(*(_QWORD *)(v9 + 56 * a2 + 8) + 24 * a3);
    v11 = *(_QWORD *)(v9 + 56 * a2 + 32);
    v12 = v10 + 1;
    do
    {
      v13 = *v12;
      if (*v12 >= (unint64_t)v10[2])
      {
        v18 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(v10, (char *)v4);
      }
      else
      {
        *(_QWORD *)v13 = 0;
        *(_DWORD *)(v13 + 8) = 0;
        *(_BYTE *)(v13 + 12) = 0;
        if ((uint64_t *)v13 != v4)
        {
          v14 = *v4;
          *(_QWORD *)(v13 + 5) = *(uint64_t *)((char *)v4 + 5);
          *(_QWORD *)v13 = v14;
          v15 = *((unsigned __int8 *)v4 + 12);
          *(_BYTE *)(v13 + 12) = v15;
          if (v15 <= 9 && ((1 << v15) & 0x33C) != 0)
          {
            v16 = *(unint64_t **)v13;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 + 1, v16));
          }
        }
        v18 = v13 + 16;
      }
      *v12 = v18;
      if (v11 <= (v18 - *v10) >> 4)
      {
        turi::sarray_group_format_writer_v2<turi::flexible_type>::flush_block(a1, a2, a3);
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 56 * a2 + 32);
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void **turi::sarray_group_format_writer_v2<turi::flexible_type>::flush_segment(void **result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (result[49] != result[48])
  {
    v3 = (uint64_t)result;
    v4 = 0;
    v5 = 8;
    do
    {
      turi::sarray_group_format_writer_v2<turi::flexible_type>::flush_block(v3, v4, a2);
      result = std::vector<turi::flexible_type>::shrink_to_fit((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 384) + v5)
                                                                         + 24 * a2));
      ++v4;
      v5 += 56;
    }
    while (v4 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 + 392) - *(_QWORD *)(v3 + 384)) >> 3));
  }
  return result;
}

uint64_t turi::sarray_group_format_writer_v2<turi::flexible_type>::num_segments(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 8))
    turi::sarray_group_format_writer_v2<turi::flexible_type>::num_segments(void)const::{lambda(void)#1}::operator()();
  return *(_QWORD *)(a1 + 16);
}

uint64_t turi::sarray_group_format_writer_v2<turi::flexible_type>::num_columns(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 8))
    turi::sarray_group_format_writer_v2<turi::flexible_type>::num_columns(void)const::{lambda(void)#1}::operator()();
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3);
}

void std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (turi::simple_spinlock *)*v2);
    operator delete(**a1);
  }
}

void std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, turi::simple_spinlock *a2)
{
  turi::simple_spinlock *v4;
  turi::simple_spinlock *v5;
  void **v6;

  v4 = *(turi::simple_spinlock **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = (turi::simple_spinlock *)((char *)v4 - 56);
      v6 = (void **)((char *)v4 - 48);
      std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
      turi::simple_spinlock::~simple_spinlock(v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::v2_block_impl::block_writer::~block_writer(void **this)
{
  void *v2;
  void **v3;

  v3 = this + 41;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 38;
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 35;
  std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  v2 = this[24];
  if (v2)
  {
    this[25] = v2;
    operator delete(v2);
  }
  v3 = this + 21;
  std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 18;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::deque<std::shared_ptr<std::vector<turi::flexible_type>>>::~deque[abi:ne180100](this + 12);
  v3 = this + 9;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  turi::mutex::~mutex((pthread_mutex_t *)this);
}

void std::vector<turi::index_file_information>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        std::allocator<turi::index_file_information>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::index_file_information>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a2 + 120, *(_QWORD **)(a2 + 128));
  v4 = (void **)(a2 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    *(_QWORD *)(a2 + 80) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<turi::mutex>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  pthread_mutex_t *v2;
  pthread_mutex_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (pthread_mutex_t *)**a1;
  if (v2)
  {
    v4 = (pthread_mutex_t *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        turi::mutex::~mutex(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (turi::simple_spinlock *)(*a1 + 56 * a2));
  }
}

void std::vector<std::vector<turi::flexible_type>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::flexible_type>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::open_segment(uint64_t a1, std::string::size_type a2)
{
  int *v4;
  file_logger *v5;
  file_logger *started;
  _QWORD *v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  turi::v2_block_impl::block_writer *v10;
  uint64_t index_info;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  _QWORD *v15;
  std::locale::__imp *locale;
  char *v17;
  const std::locale::facet *v18;
  __int128 v19;
  int v20;
  int *v21;
  file_logger *v22;
  file_logger *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  uint64_t v30;
  _QWORD *exception;
  _QWORD *v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::locale v36;
  uint64_t v37;
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  _DWORD v41[2];
  std::string __str;
  char v43[17];

  v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4))
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 797, 1);
    v7 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v7 && *((_BYTE *)v7 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    v8 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v8)
    {
      if (*((_BYTE *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(v8[2] - 24) + 16));
        v9 = std::locale::use_facet(&v36, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v36);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned __int8 *)(a1 + 8), "sarray not open");
  v10 = (turi::v2_block_impl::block_writer *)(a1 + 24);
  index_info = turi::v2_block_impl::block_writer::get_index_info(v10);
  if (*(char *)(index_info + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)index_info, *(_QWORD *)(index_info + 8));
  else
    __str = *(std::string *)index_info;
  *(_DWORD *)((char *)v41 + 3) = 0;
  v41[0] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v36);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  std::string::basic_string(&v35, &__str, 0, size - 5, (std::allocator<char> *)v43);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v35;
  else
    v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    v14 = v35.__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)".", 1);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  locale = v36.__locale_;
  v17 = (char *)&v36 + *((_QWORD *)v36.__locale_ - 3);
  if (*((_DWORD *)v17 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v36 + *((_QWORD *)v36.__locale_ - 3)));
    v18 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 32);
    std::locale::~locale((std::locale *)&v35);
    locale = v36.__locale_;
  }
  *((_DWORD *)v17 + 36) = 48;
  *(_QWORD *)((char *)v38 + *((_QWORD *)locale - 3)) = 4;
  std::ostream::operator<<();
  std::stringbuf::str();
  v19 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
  v41[0] = v35.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v41 + 3) = *(_DWORD *)((char *)&v35.__r_.__value_.__r.__words[2] + 3);
  v20 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  v21 = (int *)global_logger();
  if (v21[169] > 1)
    goto LABEL_39;
  if (cppipc::must_cancel((cppipc *)v21))
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  v22 = (file_logger *)global_logger();
  v23 = file_logger::start_stream(v22, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 810, 1);
  v24 = pthread_getspecific(*((_QWORD *)v23 + 74));
  if (v24 && *((_BYTE *)v24 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"Open segment ", 13);
  v25 = file_logger::operator<<<unsigned long>((uint64_t)v23);
  v26 = pthread_getspecific(*(_QWORD *)(v25 + 592));
  if (v26 && *((_BYTE *)v26 + 280))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26 + 2, (uint64_t)" for write on ", 14);
  if (v20 < 0)
  {
    std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
  }
  else
  {
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
    LODWORD(v34.__r_.__value_.__r.__words[2]) = v41[0];
    *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v41 + 3);
    *((_BYTE *)&v34.__r_.__value_.__s + 23) = v20;
  }
  v27 = file_logger::operator<<<std::string>(v25, (uint64_t)&v34);
  v28 = pthread_getspecific(*(_QWORD *)(v27 + 592));
  if (v28)
  {
    if (*((_BYTE *)v28 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(v28[2] - 24) + 16));
      v29 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale((std::locale *)&v35);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v27);
      if (*(_DWORD *)(v27 + 600) == 7)
      {
        __print_back_trace();
        v32 = __cxa_allocate_exception(8uLL);
        *v32 = "LOG_FATAL encountered";
        __cxa_throw(v32, MEMORY[0x24BEDB718], 0);
      }
    }
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_40;
  }
  else
  {
LABEL_39:
    if ((v20 & 0x80000000) == 0)
    {
LABEL_40:
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
      LODWORD(v33.__r_.__value_.__r.__words[2]) = v41[0];
      *(_DWORD *)((char *)&v33.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v41 + 3);
      *((_BYTE *)&v33.__r_.__value_.__s + 23) = v20;
      goto LABEL_43;
    }
  }
  std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v19, *((std::string::size_type *)&v19 + 1));
LABEL_43:
  turi::v2_block_impl::block_writer::open_segment(v10, a2, (std::string::size_type)&v33);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v36.__locale_ = (std::locale::__imp *)*MEMORY[0x24BEDB7F0];
  v30 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(std::locale *)((char *)&v36 + *((_QWORD *)v36.__locale_ - 3)) = *(std::locale *)(MEMORY[0x24BEDB7F0] + 64);
  v37 = v30;
  v38[0] = MEMORY[0x24BEDB848] + 16;
  if (v39 < 0)
    operator delete((void *)v38[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x219A198F4](&v40);
  if (v20 < 0)
    operator delete((void *)v19);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_217FA7310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  void *v28;
  int v29;
  uint64_t v30;

  std::locale::~locale(&a22);
  if (a21 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (v29 < 0)
    operator delete(v28);
  if (*(char *)(v30 - 105) < 0)
    operator delete(*(void **)(v30 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 56 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 32) = 16;
        v7 += 56;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[56 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[56 * v11];
    v15 = &v14[56 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = 16;
      v14 += 56;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer> &>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_217FA753C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer const&>(a1, (__n128 *)(v7 - 56), v9);
      v7 = *((_QWORD *)&v16 + 1) - 56;
      *((_QWORD *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_217FA7678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer const&>(uint64_t a1, __n128 *a2, uint64_t a3)
{
  __n128 result;

  a2->n128_u8[0] = 0;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = 0;
  std::vector<std::vector<turi::flexible_type>>::__init_with_size[abi:ne180100]<std::vector<turi::flexible_type>*,std::vector<turi::flexible_type>*>(&a2->n128_u64[1], *(uint64_t ***)(a3 + 8), *(uint64_t ***)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 3));
  result = *(__n128 *)(a3 + 32);
  a2[3].n128_u64[0] = *(_QWORD *)(a3 + 48);
  a2[2] = result;
  return result;
}

void sub_217FA76E8(_Unwind_Exception *a1)
{
  turi::simple_spinlock *v1;

  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<turi::flexible_type>>::__init_with_size[abi:ne180100]<std::vector<turi::flexible_type>*,std::vector<turi::flexible_type>*>(_QWORD *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>*,std::vector<turi::flexible_type>*,std::vector<turi::flexible_type>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_217FA7760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>*,std::vector<turi::flexible_type>*,std::vector<turi::flexible_type>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t **v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_217FA781C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::vector<turi::flexible_type>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **i;
  void **v6;

  for (i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    v6 = i + 1;
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)i);
    i = (void **)(*(_QWORD *)(a2 + 32) + 56);
  }
}

uint64_t std::__split_buffer<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::flexible_type>::column_buffer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  turi::simple_spinlock *v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (turi::simple_spinlock *)(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    v6 = (void **)(i - 48);
    std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock(v5);
  }
}

void std::vector<std::vector<turi::flexible_type>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<turi::flexible_type>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer(&v15);
  }
}

void sub_217FA7BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::flexible_type>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::reverse_iterator<std::vector<turi::flexible_type>*>,std::reverse_iterator<std::vector<turi::flexible_type>*>,std::reverse_iterator<std::vector<turi::flexible_type>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::flexible_type>>,std::reverse_iterator<std::vector<turi::flexible_type>*>,std::reverse_iterator<std::vector<turi::flexible_type>*>,std::reverse_iterator<std::vector<turi::flexible_type>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::reverse_iterator<std::vector<turi::flexible_type>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::reverse_iterator<std::vector<turi::flexible_type>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::reverse_iterator<std::vector<turi::flexible_type>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::flexible_type>>,std::reverse_iterator<std::vector<turi::flexible_type>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<turi::flexible_type>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<turi::flexible_type>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t file_logger::operator<<<unsigned long>(uint64_t a1)
{
  _BYTE *v2;

  v2 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v2 && v2[280])
    std::ostream::operator<<();
  return a1;
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::close(void)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_array_open", 12);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"true", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "operator()", 721, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_group_format_writer_v2<turi::flexible_type>::close(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA7FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::flush_block(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v3 = *(_QWORD *)(a1 + 384);
  v4 = v3 + 56 * a2;
  v5 = (uint64_t *)(v4 + 8);
  v6 = (uint64_t *)(*(_QWORD *)(v4 + 8) + 24 * a3);
  v7 = v6[1];
  if (*v6 != v7)
  {
    v11 = v7 - *v6;
    v26 = -1;
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
    v12 = turi::v2_block_impl::block_writer::write_typed_block((pthread_mutex_t *)(a1 + 24), a3, a2, v6, (uint64_t)&v26);
    v13 = *v5;
    v14 = *v5 + 24 * a3;
    v17 = *(_QWORD *)(v14 + 8);
    v16 = (_QWORD *)(v14 + 8);
    v15 = v17;
    v18 = *(_QWORD *)(v13 + 24 * a3);
    if (v17 != v18)
    {
      v19 = v13 + 24 * a3 + 16;
      do
      {
        v15 -= 16;
        std::allocator<turi::flexible_type>::destroy[abi:ne180100](v19, v15);
      }
      while (v15 != v18);
    }
    *v16 = v18;
    do
    {
      while (*(_BYTE *)v4 == 1)
        ;
      do
        v20 = __ldaxr((unsigned __int8 *)v4);
      while (__stlxr(1u, (unsigned __int8 *)v4));
    }
    while (v20);
    v21 = (_QWORD *)(v3 + 56 * a2);
    v22 = v21[5] + v12;
    v23 = v21[6] + (v11 >> 4);
    v21[5] = v22;
    v21[6] = v23;
    v24 = (unint64_t)(float)((float)(unint64_t)turi::SFRAME_DEFAULT_BLOCK_SIZE
                                  / (float)((float)(unint64_t)(v22 + 1) / (float)(unint64_t)(v23 + 1)));
    if (*(_QWORD *)"\b" > v24)
      v24 = *(_QWORD *)"\b";
    v21[4] = v24;
    v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) * *(_QWORD *)(a1 + 16);
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v25 < v24)
      v24 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v25;
    v21[4] = v24;
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK < v24)
      v24 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK;
    v21[4] = v24;
    __dmb(0xBu);
    *(_BYTE *)v4 = 0;
  }
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,std::back_insert_iterator<std::vector<turi::flexible_type>>,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<turi::flexible_type>>::operator=[abi:ne180100](&v6, v3);
    v3 += 2;
  }
  while (v3 != v4);
  return v4;
}

uint64_t **std::back_insert_iterator<std::vector<turi::flexible_type>>::operator=[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = (*a1)[1];
  if (v4 >= (*a1)[2])
  {
    v9 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(*a1, (char *)a2);
  }
  else
  {
    *(_QWORD *)v4 = 0;
    *(_DWORD *)(v4 + 8) = 0;
    *(_BYTE *)(v4 + 12) = 0;
    if ((uint64_t *)v4 != a2)
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 5) = *(uint64_t *)((char *)a2 + 5);
      *(_QWORD *)v4 = v5;
      v6 = *((unsigned __int8 *)a2 + 12);
      *(_BYTE *)(v4 + 12) = v6;
      if (v6 <= 9 && ((1 << v6) & 0x33C) != 0)
      {
        v7 = *(unint64_t **)v4;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
    }
    v9 = v4 + 16;
  }
  v3[1] = v9;
  return a1;
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::num_segments(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_array_open", 12);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"true", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "operator()", 760, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_group_format_writer_v2<turi::flexible_type>::num_segments(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA8488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray_group_format_writer_v2<turi::flexible_type>::num_columns(void)const::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", 116);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_array_open", 12);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"true", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "operator()", 768, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray_group_format_writer_v2<turi::flexible_type>::num_columns(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA8698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"__null", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 782, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA88A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"segmentid", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_segments()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 783, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FA8ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<turi::flexible_type>::get_type(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const std::string *v5;
  char v6;
  void *__p[2];
  char v9;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  v2 = a1 + 128;
  std::string::basic_string[abi:ne180100]<0>(__p, "__type__");
  v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v2, (const void **)__p);
  v4 = v3;
  if ((v9 & 0x80000000) == 0)
  {
    if (v3)
      goto LABEL_3;
    return 7;
  }
  operator delete(__p[0]);
  if (!v4)
    return 7;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(__p, "__type__");
  v5 = (const std::string *)std::map<std::string,turi::neural_net::shared_float_array>::at(v2, (const void **)__p);
  v6 = std::stoi(v5, 0, 10);
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_217FA8BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1}>,void ()(turi::flexible_type const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1}>,void ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24D91E780;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1}>,void ()(turi::flexible_type const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D91E780;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1}>,void ()(turi::flexible_type const&)>::operator()(uint64_t a1, turi::flexible_type_impl *a2, double a3)
{
  return turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1}::operator()((char *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1}>,void ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1}>,void ()(turi::flexible_type const&)>::target_type()
{
}

_QWORD *turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type const&)#1}::operator()(char *a1, turi::flexible_type_impl *this, double a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  char *v51;
  uint64_t *v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v56;
  unint64_t v57;
  BOOL v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  void *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t *v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  BOOL v81;
  _QWORD *v82;
  unint64_t v83;
  BOOL v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  void **v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  _QWORD *v107;
  void *v108;
  _QWORD *v109;
  unint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  void **v126;
  __int128 v127;
  double v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  __int128 v139;
  __int128 v140;
  unint64_t v141;
  BOOL v142;
  _QWORD *v143;
  _QWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  BOOL v152;
  _QWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  void **v161;
  __int128 v162;
  void *v163;
  int v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  __int128 v170;
  __int128 v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _QWORD *v179;
  _QWORD *v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  void *v185;
  void *v186;
  _QWORD *v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  __int128 v194;
  __int128 v195;
  unint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  void *v199;
  _QWORD *v200;
  unint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  unint64_t v208;
  int v209;
  _QWORD *v210;
  unint64_t v211;
  _QWORD *v212;
  unint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  __int128 v230;
  __int128 v231;
  unint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  unsigned int *v242;
  unsigned int v243;
  __int128 v244;
  __int128 v245;
  unint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  unsigned int *v250;
  unsigned int v251;
  __int128 v252;
  __int128 v253;
  unint64_t v254;
  _QWORD *v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  __int128 v264;
  __int128 v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  __int128 v274;
  __int128 v275;
  unint64_t v276;
  _QWORD *v277;
  unint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  unsigned int *v282;
  unsigned int v283;
  __int128 v284;
  __int128 v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  _QWORD *v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t v299;
  unsigned int v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  void *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  _QWORD *v325;
  std::string::size_type v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  std::string *v354;
  __int128 v355;
  std::string *v356;
  __int128 v357;
  unint64_t v358;
  const std::string::value_type *v359;
  std::string *v360;
  __int128 v361;
  file_logger *v362;
  uint64_t v363;
  std::bad_cast *exception;
  std::string __p;
  _BYTE v366[32];
  _BYTE v367[32];
  uint64_t v368;
  std::string v369;
  std::string v370;
  std::string v371;
  _QWORD *v372[3];

  v372[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((unsigned __int8 *)this + 12);
  v7 = *a1;
  v8 = *a1;
  if (v7 == 7 || v6 == 7 || v6 == v8)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, turi::flexible_type_impl *))(**(_QWORD **)(v5 + 176) + 72))(*(_QWORD *)(v5 + 176), 0, *((_QWORD *)a1 + 2), this);
  if (!turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * (char)v6 + v7])
  {
    switch((char)v6)
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v366);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_540;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v366);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_540:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v366);
        break;
      case 2:
        v352 = *(_QWORD *)this;
        if (*(char *)(*(_QWORD *)this + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v369, *(const std::string::value_type **)(v352 + 8), *(_QWORD *)(v352 + 16));
        }
        else
        {
          v353 = *(_OWORD *)(v352 + 8);
          v369.__r_.__value_.__r.__words[2] = *(_QWORD *)(v352 + 24);
          *(_OWORD *)&v369.__r_.__value_.__l.__data_ = v353;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v366, (_QWORD *)(*(_QWORD *)this + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v366, (uint64_t *)(*(_QWORD *)this + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v366, (_QWORD *)(*(_QWORD *)this + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(this, &v369);
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v366, (_QWORD *)(*(_QWORD *)this + 8));
        break;
      default:
        turi::apply_binary_op_ff();
    }
    v354 = std::string::insert(&v369, 0, "Cannot convert ");
    v355 = *(_OWORD *)&v354->__r_.__value_.__l.__data_;
    v370.__r_.__value_.__r.__words[2] = v354->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v370.__r_.__value_.__l.__data_ = v355;
    v354->__r_.__value_.__l.__size_ = 0;
    v354->__r_.__value_.__r.__words[2] = 0;
    v354->__r_.__value_.__r.__words[0] = 0;
    v356 = std::string::append(&v370, " to ");
    v357 = *(_OWORD *)&v356->__r_.__value_.__l.__data_;
    v371.__r_.__value_.__r.__words[2] = v356->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v371.__r_.__value_.__l.__data_ = v357;
    v356->__r_.__value_.__l.__size_ = 0;
    v356->__r_.__value_.__r.__words[2] = 0;
    v356->__r_.__value_.__r.__words[0] = 0;
    v358 = *a1;
    if (v358 > 9)
      v359 = "undefined";
    else
      v359 = off_24D91E960[v358];
    v360 = std::string::append(&v371, v359);
    v361 = *(_OWORD *)&v360->__r_.__value_.__l.__data_;
    *(_QWORD *)&v366[16] = *((_QWORD *)&v360->__r_.__value_.__l + 2);
    *(_OWORD *)v366 = v361;
    v360->__r_.__value_.__l.__size_ = 0;
    v360->__r_.__value_.__r.__words[2] = 0;
    v360->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v371.__r_.__value_.__l.__data_);
    if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v370.__r_.__value_.__l.__data_);
    if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v369.__r_.__value_.__l.__data_);
    if (*((int *)global_logger() + 169) <= 6)
    {
      v362 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 799, 1);
      if ((v366[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v366, *(std::string::size_type *)&v366[8]);
      else
        __p = *(std::string *)v366;
      v363 = file_logger::operator<<<std::string>((uint64_t)v362, (uint64_t)&__p);
      file_logger::operator<<(v363, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(0x20uLL);
    turi::bad_cast::bad_cast(exception, (__int128 *)v366);
  }
  v12 = 0;
  memset(v372, 0, 13);
  BYTE4(v372[1]) = v8;
  switch(v8)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v12 = operator new();
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 8) = 0;
      goto LABEL_15;
    case 6:
      v12 = 0x1900000000000000;
      v372[0] = (_QWORD *)0x1900000000000000;
      LODWORD(v372[1]) = 0;
      break;
    case 8:
      v12 = operator new();
      *(_QWORD *)v12 = 0;
      a3 = 0.0;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_QWORD *)(v12 + 56) = 0;
      *(_QWORD *)(v12 + 64) = 3;
      goto LABEL_15;
    case 9:
      v12 = operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v12);
LABEL_15:
      v372[0] = (_QWORD *)v12;
      *(_QWORD *)v12 = 1;
      break;
    default:
      break;
  }
  if (v372 != (_QWORD **)this)
  {
    switch(*((_BYTE *)this + 12))
    {
      case 0:
        switch(BYTE4(v372[1]))
        {
          case 0:
            v13 = *(_QWORD *)this;
            goto LABEL_73;
          case 1:
            v128 = (double)*(uint64_t *)this;
            goto LABEL_302;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v122 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v122, (uint64_t)v372[0]);
              v372[0] = v122;
              *v122 = 1;
              do
              {
                v123 = __ldaxr((unint64_t *)v12);
                v124 = v123 - 1;
              }
              while (__stlxr(v124, (unint64_t *)v12));
              if (!v124)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v125 = v372[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v366);
            std::ostream::operator<<();
            std::stringbuf::str();
            v126 = (void **)(v125 + 1);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v366);
            if (*((char *)v125 + 31) < 0)
              operator delete(*v126);
            v127 = *(_OWORD *)&v371.__r_.__value_.__l.__data_;
            v125[3] = *((_QWORD *)&v371.__r_.__value_.__l + 2);
            *(_OWORD *)v126 = v127;
            goto LABEL_436;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v91 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v91, (uint64_t)v372[0]);
            v372[0] = v91;
            *v91 = 1;
            do
            {
              v92 = __ldaxr((unint64_t *)v12);
              v58 = --v92 == 0;
            }
            while (__stlxr(v92, (unint64_t *)v12));
            goto LABEL_313;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v210 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v210, (uint64_t)v372[0]);
            v372[0] = v210;
            *v210 = 1;
            do
            {
              v211 = __ldaxr((unint64_t *)v12);
              v152 = --v211 == 0;
            }
            while (__stlxr(v211, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v235 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v235, (uint64_t)v372[0]);
            v372[0] = v235;
            *v235 = 1;
            do
            {
              v236 = __ldaxr((unint64_t *)v12);
              v84 = --v236 == 0;
            }
            while (__stlxr(v236, (unint64_t *)v12));
            goto LABEL_409;
          case 6:
            v372[0] = (_QWORD *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v372[1]) = 0;
            goto LABEL_436;
          case 7:
            goto LABEL_435;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v239 = operator new();
            v240 = v372[0];
            *(_QWORD *)v239 = *v372[0];
            *(_QWORD *)(v239 + 8) = v240[1];
            v241 = v240[2];
            *(_QWORD *)(v239 + 16) = v241;
            if (v241)
            {
              v242 = (unsigned int *)(v241 + 8);
              do
                v243 = __ldxr(v242);
              while (__stxr(v243 + 1, v242));
            }
            v244 = *(_OWORD *)(v240 + 3);
            v245 = *(_OWORD *)(v240 + 5);
            *(_OWORD *)(v239 + 56) = *(_OWORD *)(v240 + 7);
            *(_OWORD *)(v239 + 40) = v245;
            *(_OWORD *)(v239 + 24) = v244;
            v372[0] = (_QWORD *)v239;
            *(_QWORD *)v239 = 1;
            do
            {
              v246 = __ldaxr((unint64_t *)v12);
              v142 = --v246 == 0;
            }
            while (__stlxr(v246, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v114 = (_QWORD *)operator new();
            v115 = v372[0] + 1;
            *v114 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, (uint64_t)v115);
            v372[0] = v114;
            *v114 = 1;
            do
            {
              v116 = __ldaxr((unint64_t *)v12);
              v81 = --v116 == 0;
            }
            while (__stlxr(v116, (unint64_t *)v12));
            goto LABEL_259;
          default:
            goto LABEL_550;
        }
      case 1:
        switch(BYTE4(v372[1]))
        {
          case 0:
            v13 = (uint64_t)*(double *)this;
            goto LABEL_73;
          case 1:
            v128 = *(double *)this;
            goto LABEL_302;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v157 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v157, (uint64_t)v372[0]);
              v372[0] = v157;
              *v157 = 1;
              do
              {
                v158 = __ldaxr((unint64_t *)v12);
                v159 = v158 - 1;
              }
              while (__stlxr(v159, (unint64_t *)v12));
              if (!v159)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v160 = v372[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v366);
            std::ostream::operator<<();
            std::stringbuf::str();
            v161 = (void **)(v160 + 1);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v366);
            if (*((char *)v160 + 31) < 0)
              operator delete(*v161);
            v162 = *(_OWORD *)&v371.__r_.__value_.__l.__data_;
            v163 = (void *)v371.__r_.__value_.__r.__words[2];
            goto LABEL_479;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v93 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v93, (uint64_t)v372[0]);
            v372[0] = v93;
            *v93 = 1;
            do
            {
              v94 = __ldaxr((unint64_t *)v12);
              v58 = --v94 == 0;
            }
            while (__stlxr(v94, (unint64_t *)v12));
            goto LABEL_313;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v212 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v212, (uint64_t)v372[0]);
            v372[0] = v212;
            *v212 = 1;
            do
            {
              v213 = __ldaxr((unint64_t *)v12);
              v152 = --v213 == 0;
            }
            while (__stlxr(v213, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v237 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v237, (uint64_t)v372[0]);
            v372[0] = v237;
            *v237 = 1;
            do
            {
              v238 = __ldaxr((unint64_t *)v12);
              v84 = --v238 == 0;
            }
            while (__stlxr(v238, (unint64_t *)v12));
            goto LABEL_409;
          case 6:
            v164 = (int)((*(double *)this - (double)(uint64_t)floor(*(double *)this)) * 1000000.0);
            if (v164 >= 999999)
              v164 = 999999;
            if (v164 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            v372[0] = (_QWORD *)(vcvtmd_s64_f64(*(double *)this) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v372[1]) = v164;
            goto LABEL_436;
          case 7:
            goto LABEL_435;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v247 = operator new();
            v248 = v372[0];
            *(_QWORD *)v247 = *v372[0];
            *(_QWORD *)(v247 + 8) = v248[1];
            v249 = v248[2];
            *(_QWORD *)(v247 + 16) = v249;
            if (v249)
            {
              v250 = (unsigned int *)(v249 + 8);
              do
                v251 = __ldxr(v250);
              while (__stxr(v251 + 1, v250));
            }
            v252 = *(_OWORD *)(v248 + 3);
            v253 = *(_OWORD *)(v248 + 5);
            *(_OWORD *)(v247 + 56) = *(_OWORD *)(v248 + 7);
            *(_OWORD *)(v247 + 40) = v253;
            *(_OWORD *)(v247 + 24) = v252;
            v372[0] = (_QWORD *)v247;
            *(_QWORD *)v247 = 1;
            do
            {
              v254 = __ldaxr((unint64_t *)v12);
              v142 = --v254 == 0;
            }
            while (__stlxr(v254, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v117 = (_QWORD *)operator new();
            v118 = v372[0] + 1;
            *v117 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v117 + 1, (uint64_t)v118);
            v372[0] = v117;
            *v117 = 1;
            do
            {
              v119 = __ldaxr((unint64_t *)v12);
              v81 = --v119 == 0;
            }
            while (__stlxr(v119, (unint64_t *)v12));
            goto LABEL_259;
          default:
            goto LABEL_550;
        }
      case 2:
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            v25 = *(_QWORD *)this;
            if (*(_QWORD *)v12 != 1)
            {
              v26 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, (uint64_t)v372[0]);
              v372[0] = v26;
              *v26 = 1;
              do
              {
                v27 = __ldaxr((unint64_t *)v12);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, (unint64_t *)v12));
              if (!v28)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            if (*(char *)(v25 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v366, *(const std::string::value_type **)(v25 + 8), *(_QWORD *)(v25 + 16));
            }
            else
            {
              v29 = *(_OWORD *)(v25 + 8);
              *(_QWORD *)&v366[16] = *(_QWORD *)(v25 + 24);
              *(_OWORD *)v366 = v29;
            }
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v56 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v56, (uint64_t)v372[0]);
            v372[0] = v56;
            *v56 = 1;
            do
            {
              v57 = __ldaxr((unint64_t *)v12);
              v58 = --v57 == 0;
            }
            while (__stlxr(v57, (unint64_t *)v12));
            goto LABEL_313;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v187 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, (uint64_t)v372[0]);
            v372[0] = v187;
            *v187 = 1;
            do
            {
              v188 = __ldaxr((unint64_t *)v12);
              v152 = --v188 == 0;
            }
            while (__stlxr(v188, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v120 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v120, (uint64_t)v372[0]);
            v372[0] = v120;
            *v120 = 1;
            do
            {
              v121 = __ldaxr((unint64_t *)v12);
              v84 = --v121 == 0;
            }
            while (__stlxr(v121, (unint64_t *)v12));
            goto LABEL_409;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v189 = operator new();
            v190 = v372[0];
            *(_QWORD *)v189 = *v372[0];
            *(_QWORD *)(v189 + 8) = v190[1];
            v191 = v190[2];
            *(_QWORD *)(v189 + 16) = v191;
            if (v191)
            {
              v192 = (unsigned int *)(v191 + 8);
              do
                v193 = __ldxr(v192);
              while (__stxr(v193 + 1, v192));
            }
            v194 = *(_OWORD *)(v190 + 3);
            v195 = *(_OWORD *)(v190 + 5);
            *(_OWORD *)(v189 + 56) = *(_OWORD *)(v190 + 7);
            *(_OWORD *)(v189 + 40) = v195;
            *(_OWORD *)(v189 + 24) = v194;
            v372[0] = (_QWORD *)v189;
            *(_QWORD *)v189 = 1;
            do
            {
              v196 = __ldaxr((unint64_t *)v12);
              v142 = --v196 == 0;
            }
            while (__stlxr(v196, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v78 = (_QWORD *)operator new();
            v79 = v372[0] + 1;
            *v78 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v78 + 1, (uint64_t)v79);
            v372[0] = v78;
            *v78 = 1;
            do
            {
              v80 = __ldaxr((unint64_t *)v12);
              v81 = --v80 == 0;
            }
            while (__stlxr(v80, (unint64_t *)v12));
            goto LABEL_259;
          default:
            goto LABEL_550;
        }
      case 3:
        v30 = *(_QWORD *)this;
        v31 = (char *)(*(_QWORD *)this + 8);
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v32 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v32, (uint64_t)v372[0]);
              v372[0] = v32;
              *v32 = 1;
              do
              {
                v33 = __ldaxr((unint64_t *)v12);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, (unint64_t *)v12));
              if (!v34)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v371, v31);
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 != 1)
            {
              v67 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v67, (uint64_t)v372[0]);
              v372[0] = v67;
              *v67 = 1;
              do
              {
                v68 = __ldaxr((unint64_t *)v12);
                v69 = v68 - 1;
              }
              while (__stlxr(v69, (unint64_t *)v12));
              if (!v69)
              {
                v70 = *(void **)(v12 + 8);
                if (v70)
                {
                  *(_QWORD *)(v12 + 16) = v70;
                  operator delete(v70);
                }
                MEMORY[0x219A19A08](v12, 0x1080C409938AC02);
              }
            }
            if (v372[0] == (_QWORD *)v30)
              goto LABEL_436;
            v51 = (char *)(v372[0] + 1);
            v71 = (uint64_t *)(v30 + 16);
            goto LABEL_128;
          case 4:
            if (*(_QWORD *)v12 != 1)
            {
              v203 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v203, (uint64_t)v372[0]);
              v372[0] = v203;
              *v203 = 1;
              do
              {
                v204 = __ldaxr((unint64_t *)v12);
                v205 = v204 - 1;
              }
              while (__stlxr(v205, (unint64_t *)v12));
              if (!v205)
              {
                *(_QWORD *)v366 = v12 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
                MEMORY[0x219A19A08](v12, 0x1020C405E66F15BLL);
              }
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)v372[0] + 1, *(_QWORD **)(v30 + 8), *(_QWORD **)(v30 + 16), (uint64_t)(*(_QWORD *)(v30 + 16) - *(_QWORD *)(v30 + 8)) >> 3);
            goto LABEL_436;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v146 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v146, (uint64_t)v372[0]);
            v372[0] = v146;
            *v146 = 1;
            do
            {
              v147 = __ldaxr((unint64_t *)v12);
              v84 = --v147 == 0;
            }
            while (__stlxr(v147, (unint64_t *)v12));
            goto LABEL_409;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v217 = operator new();
            v218 = v372[0];
            *(_QWORD *)v217 = *v372[0];
            *(_QWORD *)(v217 + 8) = v218[1];
            v219 = v218[2];
            *(_QWORD *)(v217 + 16) = v219;
            if (v219)
            {
              v220 = (unsigned int *)(v219 + 8);
              do
                v221 = __ldxr(v220);
              while (__stxr(v221 + 1, v220));
            }
            v222 = *(_OWORD *)(v218 + 3);
            v223 = *(_OWORD *)(v218 + 5);
            *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 7);
            *(_OWORD *)(v217 + 40) = v223;
            *(_OWORD *)(v217 + 24) = v222;
            v372[0] = (_QWORD *)v217;
            *(_QWORD *)v217 = 1;
            do
            {
              v224 = __ldaxr((unint64_t *)v12);
              v142 = --v224 == 0;
            }
            while (__stlxr(v224, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 != 1)
            {
              v95 = (_QWORD *)operator new();
              v96 = v372[0] + 1;
              *v95 = *v372[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v95 + 1, (uint64_t)v96);
              v372[0] = v95;
              *v95 = 1;
              do
              {
                v97 = __ldaxr((unint64_t *)v12);
                v98 = v97 - 1;
              }
              while (__stlxr(v98, (unint64_t *)v12));
              if (!v98)
              {
                v99 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
                MEMORY[0x219A19A08](v99, 0x1030C407B73B9F7);
              }
            }
            v100 = v372[0];
            memset(&v371, 0, sizeof(v371));
            memset(&v370, 0, sizeof(v370));
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v31, &v369);
            turi::flexible_type_impl::ndarray<double>::ndarray(v366, &v369, (uint64_t)&v371, (uint64_t)&v370, 0);
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v369);
            if (v370.__r_.__value_.__r.__words[0])
            {
              v370.__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
              operator delete(v370.__r_.__value_.__l.__data_);
            }
            if (v371.__r_.__value_.__r.__words[0])
            {
              v371.__r_.__value_.__l.__size_ = v371.__r_.__value_.__r.__words[0];
              operator delete(v371.__r_.__value_.__l.__data_);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v100 + 1), (__int128 *)v366);
            v101 = (void *)v100[3];
            if (v101)
            {
              v100[4] = v101;
              operator delete(v101);
              v100[3] = 0;
              v100[4] = 0;
              v100[5] = 0;
            }
            v102 = (void *)v100[6];
            *(_OWORD *)(v100 + 3) = *(_OWORD *)&v366[16];
            v100[5] = *(_QWORD *)v367;
            *(_OWORD *)&v366[16] = 0uLL;
            *(_QWORD *)v367 = 0;
            if (v102)
            {
              v100[7] = v102;
              operator delete(v102);
              v100[6] = 0;
              v100[7] = 0;
              v100[8] = 0;
            }
            *((_OWORD *)v100 + 3) = *(_OWORD *)&v367[8];
            v100[8] = *(_QWORD *)&v367[24];
            memset(&v367[8], 0, 24);
            v100[9] = v368;
            goto LABEL_533;
          default:
            goto LABEL_550;
        }
      case 4:
        v14 = *(_QWORD *)this;
        v15 = (uint64_t *)(*(_QWORD *)this + 8);
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v16 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, (uint64_t)v372[0]);
              v372[0] = v16;
              *v16 = 1;
              do
              {
                v17 = __ldaxr((unint64_t *)v12);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, (unint64_t *)v12));
              if (!v18)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v371, v15);
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 != 1)
            {
              v43 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v43, (uint64_t)v372[0]);
              v372[0] = v43;
              *v43 = 1;
              do
              {
                v44 = __ldaxr((unint64_t *)v12);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, (unint64_t *)v12));
              if (!v45)
              {
                v46 = *(void **)(v12 + 8);
                if (v46)
                {
                  *(_QWORD *)(v12 + 16) = v46;
                  operator delete(v46);
                }
                MEMORY[0x219A19A08](v12, 0x1080C409938AC02);
              }
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v366, v372[0] + 1, v15);
            goto LABEL_436;
          case 4:
            if (*(_QWORD *)v12 != 1)
            {
              v129 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v129, (uint64_t)v372[0]);
              v372[0] = v129;
              *v129 = 1;
              do
              {
                v130 = __ldaxr((unint64_t *)v12);
                v131 = v130 - 1;
              }
              while (__stlxr(v131, (unint64_t *)v12));
              if (!v131)
              {
                *(_QWORD *)v366 = v12 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
                MEMORY[0x219A19A08](v12, 0x1020C405E66F15BLL);
              }
            }
            if (v372[0] != (_QWORD *)v14)
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v372[0] + 1), *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 4);
            goto LABEL_436;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v82 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v82, (uint64_t)v372[0]);
            v372[0] = v82;
            *v82 = 1;
            do
            {
              v83 = __ldaxr((unint64_t *)v12);
              v84 = --v83 == 0;
            }
            while (__stlxr(v83, (unint64_t *)v12));
            goto LABEL_409;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v134 = operator new();
            v135 = v372[0];
            *(_QWORD *)v134 = *v372[0];
            *(_QWORD *)(v134 + 8) = v135[1];
            v136 = v135[2];
            *(_QWORD *)(v134 + 16) = v136;
            if (v136)
            {
              v137 = (unsigned int *)(v136 + 8);
              do
                v138 = __ldxr(v137);
              while (__stxr(v138 + 1, v137));
            }
            v139 = *(_OWORD *)(v135 + 3);
            v140 = *(_OWORD *)(v135 + 5);
            *(_OWORD *)(v134 + 56) = *(_OWORD *)(v135 + 7);
            *(_OWORD *)(v134 + 40) = v140;
            *(_OWORD *)(v134 + 24) = v139;
            v372[0] = (_QWORD *)v134;
            *(_QWORD *)v134 = 1;
            do
            {
              v141 = __ldaxr((unint64_t *)v12);
              v142 = --v141 == 0;
            }
            while (__stlxr(v141, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 != 1)
            {
              v59 = (_QWORD *)operator new();
              v60 = v372[0] + 1;
              *v59 = *v372[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, (uint64_t)v60);
              v372[0] = v59;
              *v59 = 1;
              do
              {
                v61 = __ldaxr((unint64_t *)v12);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, (unint64_t *)v12));
              if (!v62)
              {
                v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
                MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
              }
            }
            v64 = v372[0];
            memset(&v371, 0, sizeof(v371));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v371, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v371, v366);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v64 + 1), (__int128 *)v366);
            v65 = (void *)v64[3];
            if (v65)
            {
              v64[4] = v65;
              operator delete(v65);
              v64[3] = 0;
              v64[4] = 0;
              v64[5] = 0;
            }
            v66 = (void *)v64[6];
            *(_OWORD *)(v64 + 3) = *(_OWORD *)&v366[16];
            v64[5] = *(_QWORD *)v367;
            *(_OWORD *)&v366[16] = 0uLL;
            *(_QWORD *)v367 = 0;
            if (v66)
            {
              v64[7] = v66;
              operator delete(v66);
              v64[6] = 0;
              v64[7] = 0;
              v64[8] = 0;
            }
            *((_OWORD *)v64 + 3) = *(_OWORD *)&v367[8];
            v64[8] = *(_QWORD *)&v367[24];
            memset(&v367[8], 0, 24);
            v64[9] = v368;
            turi::flexible_type_impl::ndarray<double>::~ndarray(v366);
            v370.__r_.__value_.__r.__words[0] = (std::string::size_type)&v371;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v370);
            goto LABEL_436;
          default:
            goto LABEL_550;
        }
      case 5:
        v35 = *(_QWORD *)this;
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v36 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v36, (uint64_t)v372[0]);
              v372[0] = v36;
              *v36 = 1;
              do
              {
                v37 = __ldaxr((unint64_t *)v12);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, (unint64_t *)v12));
              if (!v38)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v371, (_QWORD *)(v35 + 8));
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v89 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v89, (uint64_t)v372[0]);
            v372[0] = v89;
            *v89 = 1;
            do
            {
              v90 = __ldaxr((unint64_t *)v12);
              v58 = --v90 == 0;
            }
            while (__stlxr(v90, (unint64_t *)v12));
            goto LABEL_313;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v255 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v255, (uint64_t)v372[0]);
            v372[0] = v255;
            *v255 = 1;
            do
            {
              v256 = __ldaxr((unint64_t *)v12);
              v152 = --v256 == 0;
            }
            while (__stlxr(v256, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 != 1)
            {
              v200 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v200, (uint64_t)v372[0]);
              v372[0] = v200;
              *v200 = 1;
              do
              {
                v201 = __ldaxr((unint64_t *)v12);
                v202 = v201 - 1;
              }
              while (__stlxr(v202, (unint64_t *)v12));
              if (!v202)
              {
                *(_QWORD *)v366 = v12 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
                MEMORY[0x219A19A08](v12, 0x1020C405E66F15BLL);
              }
            }
            if (v372[0] != (_QWORD *)v35)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)v372[0] + 1, *(uint64_t **)(v35 + 8), *(uint64_t **)(v35 + 16), (uint64_t)(*(_QWORD *)(v35 + 16) - *(_QWORD *)(v35 + 8)) >> 5);
            goto LABEL_436;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v259 = operator new();
            v260 = v372[0];
            *(_QWORD *)v259 = *v372[0];
            *(_QWORD *)(v259 + 8) = v260[1];
            v261 = v260[2];
            *(_QWORD *)(v259 + 16) = v261;
            if (v261)
            {
              v262 = (unsigned int *)(v261 + 8);
              do
                v263 = __ldxr(v262);
              while (__stxr(v263 + 1, v262));
            }
            v264 = *(_OWORD *)(v260 + 3);
            v265 = *(_OWORD *)(v260 + 5);
            *(_OWORD *)(v259 + 56) = *(_OWORD *)(v260 + 7);
            *(_OWORD *)(v259 + 40) = v265;
            *(_OWORD *)(v259 + 24) = v264;
            v372[0] = (_QWORD *)v259;
            *(_QWORD *)v259 = 1;
            do
            {
              v266 = __ldaxr((unint64_t *)v12);
              v142 = --v266 == 0;
            }
            while (__stlxr(v266, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v143 = (_QWORD *)operator new();
            v144 = v372[0] + 1;
            *v143 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v143 + 1, (uint64_t)v144);
            v372[0] = v143;
            *v143 = 1;
            do
            {
              v145 = __ldaxr((unint64_t *)v12);
              v81 = --v145 == 0;
            }
            while (__stlxr(v145, (unint64_t *)v12));
            goto LABEL_259;
          default:
            goto LABEL_550;
        }
      case 6:
        switch(BYTE4(v372[1]))
        {
          case 0:
            v13 = (uint64_t)(*(_QWORD *)this << 8) >> 8;
            goto LABEL_73;
          case 1:
            v128 = (double)*((int *)this + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)this << 8) >> 8);
LABEL_302:
            v372[0] = *(_QWORD **)&v128;
            goto LABEL_436;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v206 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v206, (uint64_t)v372[0]);
              v372[0] = v206;
              *v206 = 1;
              do
              {
                v207 = __ldaxr((unint64_t *)v12);
                v208 = v207 - 1;
              }
              while (__stlxr(v208, (unint64_t *)v12));
              if (!v208)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            v209 = *((_DWORD *)this + 2);
            v371.__r_.__value_.__r.__words[0] = *(_QWORD *)this;
            LODWORD(v371.__r_.__value_.__r.__words[1]) = v209;
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v371, (std::string *)v366);
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v132 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v132, (uint64_t)v372[0]);
            v372[0] = v132;
            *v132 = 1;
            do
            {
              v133 = __ldaxr((unint64_t *)v12);
              v58 = --v133 == 0;
            }
            while (__stlxr(v133, (unint64_t *)v12));
            goto LABEL_313;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v257 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v257, (uint64_t)v372[0]);
            v372[0] = v257;
            *v257 = 1;
            do
            {
              v258 = __ldaxr((unint64_t *)v12);
              v152 = --v258 == 0;
            }
            while (__stlxr(v258, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v267 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v267, (uint64_t)v372[0]);
            v372[0] = v267;
            *v267 = 1;
            do
            {
              v268 = __ldaxr((unint64_t *)v12);
              v84 = --v268 == 0;
            }
            while (__stlxr(v268, (unint64_t *)v12));
            goto LABEL_409;
          case 6:
            v216 = *((_DWORD *)this + 2);
            v372[0] = *(_QWORD **)this;
            LODWORD(v372[1]) = v216;
            goto LABEL_436;
          case 7:
            goto LABEL_435;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v269 = operator new();
            v270 = v372[0];
            *(_QWORD *)v269 = *v372[0];
            *(_QWORD *)(v269 + 8) = v270[1];
            v271 = v270[2];
            *(_QWORD *)(v269 + 16) = v271;
            if (v271)
            {
              v272 = (unsigned int *)(v271 + 8);
              do
                v273 = __ldxr(v272);
              while (__stxr(v273 + 1, v272));
            }
            v274 = *(_OWORD *)(v270 + 3);
            v275 = *(_OWORD *)(v270 + 5);
            *(_OWORD *)(v269 + 56) = *(_OWORD *)(v270 + 7);
            *(_OWORD *)(v269 + 40) = v275;
            *(_OWORD *)(v269 + 24) = v274;
            v372[0] = (_QWORD *)v269;
            *(_QWORD *)v269 = 1;
            do
            {
              v276 = __ldaxr((unint64_t *)v12);
              v142 = --v276 == 0;
            }
            while (__stlxr(v276, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v153 = (_QWORD *)operator new();
            v154 = v372[0] + 1;
            *v153 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v153 + 1, (uint64_t)v154);
            v372[0] = v153;
            *v153 = 1;
            do
            {
              v155 = __ldaxr((unint64_t *)v12);
              v81 = --v155 == 0;
            }
            while (__stlxr(v155, (unint64_t *)v12));
            goto LABEL_259;
          default:
            goto LABEL_550;
        }
      case 7:
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 6:
            goto LABEL_435;
          case 1:
            v13 = 0x7FF8000000000000;
LABEL_73:
            v372[0] = (_QWORD *)v13;
            goto LABEL_436;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v85 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v85, (uint64_t)v372[0]);
              v372[0] = v85;
              *v85 = 1;
              do
              {
                v86 = __ldaxr((unint64_t *)v12);
                v87 = v86 - 1;
              }
              while (__stlxr(v87, (unint64_t *)v12));
              if (!v87)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v88 = (void **)(v372[0] + 1);
            if (*((char *)v372[0] + 31) < 0)
              operator delete(*v88);
            *v88 = 0;
            v88[1] = 0;
            v88[2] = 0;
            goto LABEL_436;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v197 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v197, (uint64_t)v372[0]);
            v372[0] = v197;
            *v197 = 1;
            do
            {
              v198 = __ldaxr((unint64_t *)v12);
              v58 = --v198 == 0;
            }
            while (__stlxr(v198, (unint64_t *)v12));
LABEL_313:
            if (!v58)
              goto LABEL_435;
            v156 = 0x1080C409938AC02;
            v199 = *(void **)(v12 + 8);
            if (v199)
            {
              *(_QWORD *)(v12 + 16) = v199;
              operator delete(v199);
            }
            goto LABEL_434;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v214 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v214, (uint64_t)v372[0]);
            v372[0] = v214;
            *v214 = 1;
            do
            {
              v215 = __ldaxr((unint64_t *)v12);
              v152 = --v215 == 0;
            }
            while (__stlxr(v215, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v148 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v148, (uint64_t)v372[0]);
            v372[0] = v148;
            *v148 = 1;
            do
            {
              v149 = __ldaxr((unint64_t *)v12);
              v84 = --v149 == 0;
            }
            while (__stlxr(v149, (unint64_t *)v12));
            goto LABEL_409;
          case 7:
            goto LABEL_436;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v225 = operator new();
            v226 = v372[0];
            *(_QWORD *)v225 = *v372[0];
            *(_QWORD *)(v225 + 8) = v226[1];
            v227 = v226[2];
            *(_QWORD *)(v225 + 16) = v227;
            if (v227)
            {
              v228 = (unsigned int *)(v227 + 8);
              do
                v229 = __ldxr(v228);
              while (__stxr(v229 + 1, v228));
            }
            v230 = *(_OWORD *)(v226 + 3);
            v231 = *(_OWORD *)(v226 + 5);
            *(_OWORD *)(v225 + 56) = *(_OWORD *)(v226 + 7);
            *(_OWORD *)(v225 + 40) = v231;
            *(_OWORD *)(v225 + 24) = v230;
            v372[0] = (_QWORD *)v225;
            *(_QWORD *)v225 = 1;
            do
            {
              v232 = __ldaxr((unint64_t *)v12);
              v142 = --v232 == 0;
            }
            while (__stlxr(v232, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v111 = (_QWORD *)operator new();
            v112 = v372[0] + 1;
            *v111 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v111 + 1, (uint64_t)v112);
            v372[0] = v111;
            *v111 = 1;
            do
            {
              v113 = __ldaxr((unint64_t *)v12);
              v81 = --v113 == 0;
            }
            while (__stlxr(v113, (unint64_t *)v12));
LABEL_259:
            if (!v81)
              goto LABEL_435;
            v156 = 0x1030C407B73B9F7;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
            goto LABEL_434;
          default:
            goto LABEL_550;
        }
      case 8:
        v39 = (uint64_t *)(*(_QWORD *)this + 8);
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v40 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v40, (uint64_t)v372[0]);
              v372[0] = v40;
              *v40 = 1;
              do
              {
                v41 = __ldaxr((unint64_t *)v12);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, (unint64_t *)v12));
              if (!v42)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 != 1)
            {
              v103 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v103, (uint64_t)v372[0]);
              v372[0] = v103;
              *v103 = 1;
              do
              {
                v104 = __ldaxr((unint64_t *)v12);
                v105 = v104 - 1;
              }
              while (__stlxr(v105, (unint64_t *)v12));
              if (!v105)
              {
                v106 = *(void **)(v12 + 8);
                if (v106)
                {
                  *(_QWORD *)(v12 + 16) = v106;
                  operator delete(v106);
                }
                a3 = MEMORY[0x219A19A08](v12, 0x1080C409938AC02);
              }
            }
            v107 = v372[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v39, (double **)v366, *(unint64_t *)&a3);
            v108 = (void *)v107[1];
            if (v108)
            {
              v107[2] = v108;
              operator delete(v108);
              v107[1] = 0;
              v107[2] = 0;
              v107[3] = 0;
            }
            *(_OWORD *)(v107 + 1) = *(_OWORD *)v366;
            v107[3] = *(_QWORD *)&v366[16];
            goto LABEL_436;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v277 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v277, (uint64_t)v372[0]);
            v372[0] = v277;
            *v277 = 1;
            do
            {
              v278 = __ldaxr((unint64_t *)v12);
              v152 = --v278 == 0;
            }
            while (__stlxr(v278, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v233 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v233, (uint64_t)v372[0]);
            v372[0] = v233;
            *v233 = 1;
            do
            {
              v234 = __ldaxr((unint64_t *)v12);
              v84 = --v234 == 0;
            }
            while (__stlxr(v234, (unint64_t *)v12));
            goto LABEL_409;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v279 = operator new();
            v280 = v372[0];
            *(_QWORD *)v279 = *v372[0];
            *(_QWORD *)(v279 + 8) = v280[1];
            v281 = v280[2];
            *(_QWORD *)(v279 + 16) = v281;
            if (v281)
            {
              v282 = (unsigned int *)(v281 + 8);
              do
                v283 = __ldxr(v282);
              while (__stxr(v283 + 1, v282));
            }
            v284 = *(_OWORD *)(v280 + 3);
            v285 = *(_OWORD *)(v280 + 5);
            *(_OWORD *)(v279 + 56) = *(_OWORD *)(v280 + 7);
            *(_OWORD *)(v279 + 40) = v285;
            *(_OWORD *)(v279 + 24) = v284;
            v372[0] = (_QWORD *)v279;
            *(_QWORD *)v279 = 1;
            do
            {
              v286 = __ldaxr((unint64_t *)v12);
              v142 = --v286 == 0;
            }
            while (__stlxr(v286, (unint64_t *)v12));
LABEL_431:
            if (!v142)
              goto LABEL_435;
            v156 = 0x1030C40F1F0227BLL;
            boost::detail::shared_count::~shared_count((unsigned int **)(v12 + 16));
            goto LABEL_434;
          case 9:
            if (*(_QWORD *)v12 != 1)
            {
              v179 = (_QWORD *)operator new();
              v180 = v372[0] + 1;
              *v179 = *v372[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v179 + 1, (uint64_t)v180);
              v372[0] = v179;
              *v179 = 1;
              do
              {
                v181 = __ldaxr((unint64_t *)v12);
                v182 = v181 - 1;
              }
              while (__stlxr(v182, (unint64_t *)v12));
              if (!v182)
              {
                v183 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
                a3 = MEMORY[0x219A19A08](v183, 0x1030C407B73B9F7);
              }
            }
            v184 = v372[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v39, v366, *(unint64_t *)&a3);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v184 + 1), (__int128 *)v366);
            v185 = (void *)v184[3];
            if (v185)
            {
              v184[4] = v185;
              operator delete(v185);
              v184[3] = 0;
              v184[4] = 0;
              v184[5] = 0;
            }
            v186 = (void *)v184[6];
            *(_OWORD *)(v184 + 3) = *(_OWORD *)&v366[16];
            v184[5] = *(_QWORD *)v367;
            *(_OWORD *)&v366[16] = 0uLL;
            *(_QWORD *)v367 = 0;
            if (v186)
            {
              v184[7] = v186;
              operator delete(v186);
              v184[6] = 0;
              v184[7] = 0;
              v184[8] = 0;
            }
            *((_OWORD *)v184 + 3) = *(_OWORD *)&v367[8];
            v184[8] = *(_QWORD *)&v367[24];
            memset(&v367[8], 0, 24);
            v184[9] = v368;
            goto LABEL_533;
          default:
            goto LABEL_550;
        }
      case 9:
        v20 = *(_QWORD *)this;
        v21 = (uint64_t *)(*(_QWORD *)this + 8);
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v22 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, (uint64_t)v372[0]);
              v372[0] = v22;
              *v22 = 1;
              do
              {
                v23 = __ldaxr((unint64_t *)v12);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, (unint64_t *)v12));
              if (!v24)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v371, v21);
LABEL_476:
            v161 = (void **)(v19 + 1);
            if (*((char *)v19 + 31) < 0)
              operator delete(*v161);
            v162 = *(_OWORD *)v366;
            v163 = *(void **)&v366[16];
LABEL_479:
            v161[2] = v163;
            *(_OWORD *)v161 = v162;
            goto LABEL_436;
          case 3:
            if (*(_QWORD *)v12 != 1)
            {
              v47 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v47, (uint64_t)v372[0]);
              v372[0] = v47;
              *v47 = 1;
              do
              {
                v48 = __ldaxr((unint64_t *)v12);
                v49 = v48 - 1;
              }
              while (__stlxr(v49, (unint64_t *)v12));
              if (!v49)
              {
                v50 = *(void **)(v12 + 8);
                if (v50)
                {
                  *(_QWORD *)(v12 + 16) = v50;
                  operator delete(v50);
                }
                MEMORY[0x219A19A08](v12, 0x1080C409938AC02);
              }
            }
            v51 = (char *)(v372[0] + 1);
            if (*(_QWORD *)(v20 + 72))
              goto LABEL_486;
            v53 = *(uint64_t **)(v20 + 24);
            v52 = *(uint64_t **)(v20 + 32);
            v54 = *(_QWORD **)(v20 + 8);
            if (v52 == v53 || v54 == 0)
            {
              v313 = 0;
            }
            else
            {
              v313 = 1;
              do
              {
                v314 = *v53++;
                v313 *= v314;
              }
              while (v53 != v52);
            }
            if (v313 == (uint64_t)(v54[1] - *v54) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index(v21) == (uint64_t)(*(_QWORD *)(*v21 + 8)
                                                                                       - *(_QWORD *)*v21) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v21))
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              v31 = (char *)*v21;
              if (v51 != v31)
              {
                v71 = (uint64_t *)(v31 + 8);
LABEL_128:
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v51, *(char **)v31, *v71, (*v71 - *(_QWORD *)v31) >> 3);
              }
            }
            else
            {
LABEL_486:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid(v21))
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              if (turi::flexible_type_impl::ndarray<double>::is_full(v21))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(v366, (uint64_t)v21);
              }
              else
              {
                memset(&v371, 0, sizeof(v371));
                memset(&v370, 0, sizeof(v370));
                memset(&v369, 0, sizeof(v369));
                turi::flexible_type_impl::ndarray<double>::ndarray(v366, (uint64_t)&v371, (uint64_t)&v370, (uint64_t)&v369, 0);
                if (v369.__r_.__value_.__r.__words[0])
                {
                  v369.__r_.__value_.__l.__size_ = v369.__r_.__value_.__r.__words[0];
                  operator delete(v369.__r_.__value_.__l.__data_);
                }
                if (v370.__r_.__value_.__r.__words[0])
                {
                  v370.__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
                  operator delete(v370.__r_.__value_.__l.__data_);
                }
                if (v371.__r_.__value_.__r.__words[0])
                {
                  v371.__r_.__value_.__l.__size_ = v371.__r_.__value_.__r.__words[0];
                  operator delete(v371.__r_.__value_.__l.__data_);
                }
                v368 = 0;
                if (v366 != (_BYTE *)(v20 + 8))
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v366[16], *(char **)(v20 + 24), *(_QWORD *)(v20 + 32), (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 3);
                v316 = *(uint64_t **)(v20 + 24);
                v315 = *(uint64_t **)(v20 + 32);
                if (v315 == v316 || !*v21)
                {
                  v317 = 0;
                }
                else
                {
                  v317 = 1;
                  do
                  {
                    v318 = *v316++;
                    v317 *= v318;
                  }
                  while (v316 != v315);
                }
                std::vector<double>::resize(*(uint64_t *)v366, v317);
                std::vector<unsigned long>::resize((uint64_t)&v367[8], (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 3);
                if (*(_QWORD *)&v366[24] != *(_QWORD *)&v366[16]
                  && *(_QWORD *)(*(_QWORD *)v366 + 8) != **(_QWORD **)v366)
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v371, (uint64_t)(*(_QWORD *)(v20 + 56) - *(_QWORD *)(v20 + 48)) >> 3);
                  v319 = *(_QWORD *)(v20 + 48);
                  v320 = *(_QWORD *)(v20 + 56);
                  v321 = (unint64_t *)v371.__r_.__value_.__r.__words[0];
                  v322 = v320 - v319;
                  if (v320 != v319)
                  {
                    v323 = 0;
                    v324 = v322 >> 3;
                    if (v324 <= 1)
                      v324 = 1;
                    v325 = (_QWORD *)(v371.__r_.__value_.__r.__words[0] + 8);
                    do
                    {
                      *(v325 - 1) = *(_QWORD *)(v319 + 8 * v323);
                      *v325 = v323++;
                      v325 += 2;
                    }
                    while (v324 != v323);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(v371.__r_.__value_.__l.__size_, (unint64_t *)v371.__r_.__value_.__l.__size_, (uint64_t)v321, v321);
                  v326 = v371.__r_.__value_.__r.__words[0];
                  v327 = *(_QWORD *)&v367[8];
                  *(_QWORD *)(*(_QWORD *)&v367[8] + 8 * *(_QWORD *)(v371.__r_.__value_.__r.__words[0] + 8)) = 1;
                  v328 = *(_QWORD *)(v20 + 56) - *(_QWORD *)(v20 + 48);
                  if ((unint64_t)v328 >= 9)
                  {
                    v329 = v328 >> 3;
                    v330 = *(_QWORD *)&v366[16];
                    if (v329 <= 2)
                      v329 = 2;
                    v331 = (uint64_t *)(v326 + 24);
                    v332 = v329 - 1;
                    do
                    {
                      v333 = *(_QWORD *)(v330 + 8 * *(v331 - 2)) * *(_QWORD *)(v327 + 8 * *(v331 - 2));
                      v334 = *v331;
                      v331 += 2;
                      *(_QWORD *)(v327 + 8 * v334) = v333;
                      --v332;
                    }
                    while (v332);
                  }
                  v335 = (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 3;
                  v369.__r_.__value_.__r.__words[0] = 0;
                  std::vector<unsigned long>::vector(&v370, v335, &v369);
                  do
                  {
                    v336 = (uint64_t *)v370.__r_.__value_.__r.__words[0];
                    if (v370.__r_.__value_.__l.__size_ == v370.__r_.__value_.__r.__words[0])
                    {
                      v345 = 0;
                      v346 = *(_QWORD *)(**(_QWORD **)(v20 + 8) + 8 * *(_QWORD *)(v20 + 72));
                      v347 = *(_QWORD **)v366;
                    }
                    else
                    {
                      v337 = 0;
                      v338 = (uint64_t)(v370.__r_.__value_.__l.__size_ - v370.__r_.__value_.__r.__words[0]) >> 3;
                      v339 = *(uint64_t **)(v20 + 48);
                      if (v338 <= 1)
                        v338 = 1;
                      v340 = (uint64_t *)v370.__r_.__value_.__r.__words[0];
                      v341 = v338;
                      do
                      {
                        v343 = *v340++;
                        v342 = v343;
                        v344 = *v339++;
                        v337 += v344 * v342;
                        --v341;
                      }
                      while (v341);
                      v345 = 0;
                      v346 = *(_QWORD *)(**(_QWORD **)(v20 + 8) + 8 * (*(_QWORD *)(v20 + 72) + v337));
                      v347 = *(_QWORD **)v366;
                      v348 = *(uint64_t **)&v367[8];
                      do
                      {
                        v350 = *v336++;
                        v349 = v350;
                        v351 = *v348++;
                        v345 += v351 * v349;
                        --v338;
                      }
                      while (v338);
                    }
                    *(_QWORD *)(*v347 + 8 * v345) = v346;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v21, (uint64_t *)&v370));
                  if (v370.__r_.__value_.__r.__words[0])
                  {
                    v370.__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
                    operator delete(v370.__r_.__value_.__l.__data_);
                  }
                  if (v371.__r_.__value_.__r.__words[0])
                  {
                    v371.__r_.__value_.__l.__size_ = v371.__r_.__value_.__r.__words[0];
                    operator delete(v371.__r_.__value_.__l.__data_);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v366);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v366))
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              if (v51 != *(char **)v366)
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v51, **(char ***)v366, *(_QWORD *)(*(_QWORD *)v366 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v366 + 8) - **(_QWORD **)v366) >> 3);
LABEL_533:
              turi::flexible_type_impl::ndarray<double>::~ndarray(v366);
            }
            goto LABEL_436;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v150 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v150, (uint64_t)v372[0]);
            v372[0] = v150;
            *v150 = 1;
            do
            {
              v151 = __ldaxr((unint64_t *)v12);
              v152 = --v151 == 0;
            }
            while (__stlxr(v151, (unint64_t *)v12));
LABEL_422:
            if (!v152)
              goto LABEL_435;
            v156 = 0x1020C405E66F15BLL;
            *(_QWORD *)v366 = v12 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
            break;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v109 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v109, (uint64_t)v372[0]);
            v372[0] = v109;
            *v109 = 1;
            do
            {
              v110 = __ldaxr((unint64_t *)v12);
              v84 = --v110 == 0;
            }
            while (__stlxr(v110, (unint64_t *)v12));
LABEL_409:
            if (!v84)
              goto LABEL_435;
            v156 = 0x1020C405E66F15BLL;
            *(_QWORD *)v366 = v12 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
            break;
          case 8:
            if (*(_QWORD *)v12 != 1)
            {
              v165 = operator new();
              v166 = v372[0];
              *(_QWORD *)v165 = *v372[0];
              *(_QWORD *)(v165 + 8) = v166[1];
              v167 = v166[2];
              *(_QWORD *)(v165 + 16) = v167;
              if (v167)
              {
                v168 = (unsigned int *)(v167 + 8);
                do
                  v169 = __ldxr(v168);
                while (__stxr(v169 + 1, v168));
              }
              v170 = *(_OWORD *)(v166 + 3);
              v171 = *(_OWORD *)(v166 + 5);
              *(_OWORD *)(v165 + 56) = *(_OWORD *)(v166 + 7);
              *(_OWORD *)(v165 + 40) = v171;
              *(_OWORD *)(v165 + 24) = v170;
              v372[0] = (_QWORD *)v165;
              *(_QWORD *)v165 = 1;
              do
              {
                v172 = __ldaxr((unint64_t *)v12);
                v173 = v172 - 1;
              }
              while (__stlxr(v173, (unint64_t *)v12));
              if (!v173)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v12 + 16));
                MEMORY[0x219A19A08](v12, 0x1030C40F1F0227BLL);
              }
            }
            v174 = v372[0];
            turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)v21, (turi::image_type *)v366);
            v175 = *(_OWORD *)v366;
            *(_OWORD *)v366 = 0uLL;
            v176 = *(_OWORD *)(v174 + 1);
            *(_OWORD *)(v174 + 1) = v175;
            *(_OWORD *)&v371.__r_.__value_.__l.__data_ = v176;
            boost::detail::shared_count::~shared_count((unsigned int **)&v371.__r_.__value_.__l.__size_);
            v177 = *(_OWORD *)&v366[16];
            v178 = *(_OWORD *)v367;
            *(_OWORD *)(v174 + 7) = *(_OWORD *)&v367[16];
            *(_OWORD *)(v174 + 5) = v178;
            *(_OWORD *)(v174 + 3) = v177;
            boost::detail::shared_count::~shared_count((unsigned int **)&v366[8]);
            goto LABEL_436;
          case 9:
            if (*(_QWORD *)v12 != 1)
            {
              v72 = (_QWORD *)operator new();
              v73 = v372[0] + 1;
              *v72 = *v372[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v72 + 1, (uint64_t)v73);
              v372[0] = v72;
              *v72 = 1;
              do
              {
                v74 = __ldaxr((unint64_t *)v12);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, (unint64_t *)v12));
              if (!v75)
              {
                v76 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
                MEMORY[0x219A19A08](v76, 0x1030C407B73B9F7);
              }
            }
            v77 = (char *)v372[0];
            std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v372[0] + 1, v21);
            if (v77 != (char *)v20)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v77 + 24, *(char **)(v20 + 24), *(_QWORD *)(v20 + 32), (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v77 + 48, *(char **)(v20 + 48), *(_QWORD *)(v20 + 56), (uint64_t)(*(_QWORD *)(v20 + 56) - *(_QWORD *)(v20 + 48)) >> 3);
            }
            *((_QWORD *)v77 + 9) = *(_QWORD *)(v20 + 72);
            goto LABEL_436;
          default:
            goto LABEL_550;
        }
LABEL_434:
        MEMORY[0x219A19A08](v12, v156);
LABEL_435:
        turi::flexible_type_fail(0);
        break;
      default:
LABEL_550:
        result = (_QWORD *)turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
LABEL_436:
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD **))(**(_QWORD **)(v5 + 176) + 72))(*(_QWORD *)(v5 + 176), 0, *((_QWORD *)a1 + 2), v372);
  switch(BYTE4(v372[1]))
  {
    case 2:
      v287 = v372[0];
      do
      {
        v288 = __ldaxr(v287);
        v289 = v288 - 1;
      }
      while (__stlxr(v289, v287));
      if (!v289)
      {
        v290 = v372[0];
        if (v372[0])
        {
          if (*((char *)v372[0] + 31) < 0)
            operator delete(*((void **)v372[0] + 1));
          v291 = v290;
          v292 = 0x1012C404EF22A49;
          goto LABEL_473;
        }
      }
      break;
    case 3:
      v301 = v372[0];
      do
      {
        v302 = __ldaxr(v301);
        v303 = v302 - 1;
      }
      while (__stlxr(v303, v301));
      if (!v303)
      {
        v304 = v372[0];
        if (v372[0])
        {
          v305 = (void *)v372[0][1];
          if (v305)
          {
            v372[0][2] = v305;
            operator delete(v305);
          }
          v291 = v304;
          v292 = 0x1080C409938AC02;
          goto LABEL_473;
        }
      }
      break;
    case 4:
      v293 = v372[0];
      do
      {
        v294 = __ldaxr(v293);
        v295 = v294 - 1;
      }
      while (__stlxr(v295, v293));
      if (!v295)
      {
        v296 = v372[0];
        if (v372[0])
        {
          *(_QWORD *)v366 = v372[0] + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
          goto LABEL_466;
        }
      }
      break;
    case 5:
      v306 = v372[0];
      do
      {
        v307 = __ldaxr(v306);
        v308 = v307 - 1;
      }
      while (__stlxr(v308, v306));
      if (!v308)
      {
        v296 = v372[0];
        if (v372[0])
        {
          *(_QWORD *)v366 = v372[0] + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
LABEL_466:
          v291 = v296;
          v292 = 0x1020C405E66F15BLL;
          goto LABEL_473;
        }
      }
      break;
    case 8:
      v309 = v372[0];
      do
      {
        v310 = __ldaxr(v309);
        v311 = v310 - 1;
      }
      while (__stlxr(v311, v309));
      if (!v311)
      {
        v312 = v372[0];
        if (v372[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v372[0] + 2);
          v291 = v312;
          v300 = -235920773;
          goto LABEL_472;
        }
      }
      break;
    case 9:
      v297 = v372[0];
      do
      {
        v298 = __ldaxr(v297);
        v299 = v298 - 1;
      }
      while (__stlxr(v299, v297));
      if (!v299)
      {
        result = v372[0];
        if (v372[0])
        {
          v291 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v372[0]);
          v300 = 2071181815;
LABEL_472:
          v292 = v300 | 0x1030C4000000000;
LABEL_473:
          result = (_QWORD *)MEMORY[0x219A19A08](v291, v292);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_217FAB980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v23 = *(void **)(v21 - 144);
  if (v23)
  {
    *(_QWORD *)(v21 - 136) = v23;
    operator delete(v23);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a16);
  switch(*(_BYTE *)(v21 - 92))
  {
    case 2:
      v24 = *(unint64_t **)(v21 - 104);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_41;
      v27 = *(_QWORD *)(v21 - 104);
      if (!v27)
        goto LABEL_41;
      if (*(char *)(v27 + 31) < 0)
        operator delete(*(void **)(v27 + 8));
      v28 = (_QWORD *)v27;
      v29 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v39 = *(unint64_t **)(v21 - 104);
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_41;
      v42 = *(_QWORD **)(v21 - 104);
      if (!v42)
        goto LABEL_41;
      v43 = (void *)v42[1];
      if (v43)
      {
        v42[2] = v43;
        operator delete(v43);
      }
      v28 = v42;
      v29 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v30 = *(unint64_t **)(v21 - 104);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_41;
      v33 = *(_QWORD **)(v21 - 104);
      if (!v33)
        goto LABEL_41;
      *(_QWORD *)(v21 - 112) = v33 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 112));
      goto LABEL_33;
    case 5:
      v44 = *(unint64_t **)(v21 - 104);
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (v46)
        goto LABEL_41;
      v33 = *(_QWORD **)(v21 - 104);
      if (!v33)
        goto LABEL_41;
      *(_QWORD *)(v21 - 112) = v33 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 112));
LABEL_33:
      v28 = v33;
      v29 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v47 = *(unint64_t **)(v21 - 104);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_41;
      v50 = *(_QWORD *)(v21 - 104);
      if (!v50)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v50 + 16));
      v28 = (_QWORD *)v50;
      v38 = -235920773;
      goto LABEL_39;
    case 9:
      v34 = *(unint64_t **)(v21 - 104);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_41;
      v37 = *(_QWORD **)(v21 - 104);
      if (!v37)
        goto LABEL_41;
      v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v37);
      v38 = 2071181815;
LABEL_39:
      v29 = v38 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v28, v29);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

void turi::bad_cast::~bad_cast(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_24D91E818;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&unk_24D91E818;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x219A19A08);
}

std::bad_cast *turi::bad_cast::bad_cast(std::bad_cast *a1, __int128 *a2)
{
  std::bad_cast *v4;
  std::string *v5;
  __int128 v6;

  v4 = std::bad_cast::bad_cast(a1);
  v4->__vftable = (std::bad_cast_vtbl *)&unk_24D91E818;
  v5 = (std::string *)&v4[1];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_217FABEC4(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type&&)#1},std::allocator<turi::flexible_type&&>,void ()(turi::flexible_type&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24D91E850;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type&&)#1},std::allocator<turi::flexible_type&&>,void ()(turi::flexible_type&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D91E850;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type&&)#1},std::allocator<turi::flexible_type&&>,void ()(turi::flexible_type&)>::operator()(uint64_t a1, turi::flexible_type_impl *a2, double a3)
{
  return turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type&&)#1}::operator()((char *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type&&)#1},std::allocator<turi::flexible_type&&>,void ()(turi::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type&&)#1},std::allocator<turi::flexible_type&&>,void ()(turi::flexible_type&)>::target_type()
{
}

_QWORD *turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::flexible_type&&)#1}::operator()(char *a1, turi::flexible_type_impl *this, double a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  char *v51;
  uint64_t *v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v56;
  unint64_t v57;
  BOOL v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  void *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t *v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  BOOL v81;
  _QWORD *v82;
  unint64_t v83;
  BOOL v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  void **v88;
  _QWORD *v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  void *v101;
  void *v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  _QWORD *v107;
  void *v108;
  _QWORD *v109;
  unint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  void **v126;
  __int128 v127;
  double v128;
  _QWORD *v129;
  unint64_t v130;
  unint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  __int128 v139;
  __int128 v140;
  unint64_t v141;
  BOOL v142;
  _QWORD *v143;
  _QWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  BOOL v152;
  _QWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  _QWORD *v160;
  void **v161;
  __int128 v162;
  void *v163;
  int v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  unsigned int *v168;
  unsigned int v169;
  __int128 v170;
  __int128 v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  _QWORD *v179;
  _QWORD *v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  void *v185;
  void *v186;
  _QWORD *v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  __int128 v194;
  __int128 v195;
  unint64_t v196;
  _QWORD *v197;
  unint64_t v198;
  void *v199;
  _QWORD *v200;
  unint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  unint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  unint64_t v208;
  int v209;
  _QWORD *v210;
  unint64_t v211;
  _QWORD *v212;
  unint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  __int128 v222;
  __int128 v223;
  unint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  unsigned int *v228;
  unsigned int v229;
  __int128 v230;
  __int128 v231;
  unint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  _QWORD *v235;
  unint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  unsigned int *v242;
  unsigned int v243;
  __int128 v244;
  __int128 v245;
  unint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  unsigned int *v250;
  unsigned int v251;
  __int128 v252;
  __int128 v253;
  unint64_t v254;
  _QWORD *v255;
  unint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  __int128 v264;
  __int128 v265;
  unint64_t v266;
  _QWORD *v267;
  unint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  unsigned int *v272;
  unsigned int v273;
  __int128 v274;
  __int128 v275;
  unint64_t v276;
  _QWORD *v277;
  unint64_t v278;
  uint64_t v279;
  _QWORD *v280;
  uint64_t v281;
  unsigned int *v282;
  unsigned int v283;
  __int128 v284;
  __int128 v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  _QWORD *v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  _QWORD *v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t v299;
  unsigned int v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  void *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t *v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  _QWORD *v325;
  std::string::size_type v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t *v339;
  uint64_t *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  std::string *v354;
  __int128 v355;
  std::string *v356;
  __int128 v357;
  unint64_t v358;
  const std::string::value_type *v359;
  std::string *v360;
  __int128 v361;
  file_logger *v362;
  uint64_t v363;
  std::bad_cast *exception;
  std::string __p;
  _BYTE v366[32];
  _BYTE v367[32];
  uint64_t v368;
  std::string v369;
  std::string v370;
  std::string v371;
  _QWORD *v372[3];

  v372[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((unsigned __int8 *)this + 12);
  v7 = *a1;
  v8 = *a1;
  if (v7 == 7 || v6 == 7 || v6 == v8)
    return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, turi::flexible_type_impl *))(**(_QWORD **)(v5 + 176) + 80))(*(_QWORD *)(v5 + 176), 0, *((_QWORD *)a1 + 2), this);
  if (!turi::flex_type_is_convertible(turi::flex_type_enum,turi::flex_type_enum)::castable[10 * (char)v6 + v7])
  {
    switch((char)v6)
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v366);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_540;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v366);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_540:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v366);
        break;
      case 2:
        v352 = *(_QWORD *)this;
        if (*(char *)(*(_QWORD *)this + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v369, *(const std::string::value_type **)(v352 + 8), *(_QWORD *)(v352 + 16));
        }
        else
        {
          v353 = *(_OWORD *)(v352 + 8);
          v369.__r_.__value_.__r.__words[2] = *(_QWORD *)(v352 + 24);
          *(_OWORD *)&v369.__r_.__value_.__l.__data_ = v353;
        }
        break;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v366, (_QWORD *)(*(_QWORD *)this + 8));
        break;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v366, (uint64_t *)(*(_QWORD *)this + 8));
        break;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v366, (_QWORD *)(*(_QWORD *)this + 8));
        break;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(this, &v369);
        break;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        break;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v366, (_QWORD *)(*(_QWORD *)this + 8));
        break;
      default:
        turi::apply_binary_op_ff();
    }
    v354 = std::string::insert(&v369, 0, "Cannot convert ");
    v355 = *(_OWORD *)&v354->__r_.__value_.__l.__data_;
    v370.__r_.__value_.__r.__words[2] = v354->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v370.__r_.__value_.__l.__data_ = v355;
    v354->__r_.__value_.__l.__size_ = 0;
    v354->__r_.__value_.__r.__words[2] = 0;
    v354->__r_.__value_.__r.__words[0] = 0;
    v356 = std::string::append(&v370, " to ");
    v357 = *(_OWORD *)&v356->__r_.__value_.__l.__data_;
    v371.__r_.__value_.__r.__words[2] = v356->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v371.__r_.__value_.__l.__data_ = v357;
    v356->__r_.__value_.__l.__size_ = 0;
    v356->__r_.__value_.__r.__words[2] = 0;
    v356->__r_.__value_.__r.__words[0] = 0;
    v358 = *a1;
    if (v358 > 9)
      v359 = "undefined";
    else
      v359 = off_24D91E960[v358];
    v360 = std::string::append(&v371, v359);
    v361 = *(_OWORD *)&v360->__r_.__value_.__l.__data_;
    *(_QWORD *)&v366[16] = *((_QWORD *)&v360->__r_.__value_.__l + 2);
    *(_OWORD *)v366 = v361;
    v360->__r_.__value_.__l.__size_ = 0;
    v360->__r_.__value_.__r.__words[2] = 0;
    v360->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v371.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v371.__r_.__value_.__l.__data_);
    if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v370.__r_.__value_.__l.__data_);
    if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v369.__r_.__value_.__l.__data_);
    if (*((int *)global_logger() + 169) <= 6)
    {
      v362 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 814, 1);
      if ((v366[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v366, *(std::string::size_type *)&v366[8]);
      else
        __p = *(std::string *)v366;
      v363 = file_logger::operator<<<std::string>((uint64_t)v362, (uint64_t)&__p);
      file_logger::operator<<(v363, (void (*)(_BYTE *))std::endl[abi:ne180100]<char,std::char_traits<char>>);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(0x20uLL);
    turi::bad_cast::bad_cast(exception, (__int128 *)v366);
  }
  v12 = 0;
  memset(v372, 0, 13);
  BYTE4(v372[1]) = v8;
  switch(v8)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      v12 = operator new();
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 8) = 0;
      goto LABEL_15;
    case 6:
      v12 = 0x1900000000000000;
      v372[0] = (_QWORD *)0x1900000000000000;
      LODWORD(v372[1]) = 0;
      break;
    case 8:
      v12 = operator new();
      *(_QWORD *)v12 = 0;
      a3 = 0.0;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 40) = 0u;
      *(_QWORD *)(v12 + 56) = 0;
      *(_QWORD *)(v12 + 64) = 3;
      goto LABEL_15;
    case 9:
      v12 = operator new();
      std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::pair[abi:ne180100]<true,0>((_QWORD *)v12);
LABEL_15:
      v372[0] = (_QWORD *)v12;
      *(_QWORD *)v12 = 1;
      break;
    default:
      break;
  }
  if (v372 != (_QWORD **)this)
  {
    switch(*((_BYTE *)this + 12))
    {
      case 0:
        switch(BYTE4(v372[1]))
        {
          case 0:
            v13 = *(_QWORD *)this;
            goto LABEL_73;
          case 1:
            v128 = (double)*(uint64_t *)this;
            goto LABEL_302;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v122 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v122, (uint64_t)v372[0]);
              v372[0] = v122;
              *v122 = 1;
              do
              {
                v123 = __ldaxr((unint64_t *)v12);
                v124 = v123 - 1;
              }
              while (__stlxr(v124, (unint64_t *)v12));
              if (!v124)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v125 = v372[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v366);
            std::ostream::operator<<();
            std::stringbuf::str();
            v126 = (void **)(v125 + 1);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v366);
            if (*((char *)v125 + 31) < 0)
              operator delete(*v126);
            v127 = *(_OWORD *)&v371.__r_.__value_.__l.__data_;
            v125[3] = *((_QWORD *)&v371.__r_.__value_.__l + 2);
            *(_OWORD *)v126 = v127;
            goto LABEL_436;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v91 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v91, (uint64_t)v372[0]);
            v372[0] = v91;
            *v91 = 1;
            do
            {
              v92 = __ldaxr((unint64_t *)v12);
              v58 = --v92 == 0;
            }
            while (__stlxr(v92, (unint64_t *)v12));
            goto LABEL_313;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v210 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v210, (uint64_t)v372[0]);
            v372[0] = v210;
            *v210 = 1;
            do
            {
              v211 = __ldaxr((unint64_t *)v12);
              v152 = --v211 == 0;
            }
            while (__stlxr(v211, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v235 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v235, (uint64_t)v372[0]);
            v372[0] = v235;
            *v235 = 1;
            do
            {
              v236 = __ldaxr((unint64_t *)v12);
              v84 = --v236 == 0;
            }
            while (__stlxr(v236, (unint64_t *)v12));
            goto LABEL_409;
          case 6:
            v372[0] = (_QWORD *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v372[1]) = 0;
            goto LABEL_436;
          case 7:
            goto LABEL_435;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v239 = operator new();
            v240 = v372[0];
            *(_QWORD *)v239 = *v372[0];
            *(_QWORD *)(v239 + 8) = v240[1];
            v241 = v240[2];
            *(_QWORD *)(v239 + 16) = v241;
            if (v241)
            {
              v242 = (unsigned int *)(v241 + 8);
              do
                v243 = __ldxr(v242);
              while (__stxr(v243 + 1, v242));
            }
            v244 = *(_OWORD *)(v240 + 3);
            v245 = *(_OWORD *)(v240 + 5);
            *(_OWORD *)(v239 + 56) = *(_OWORD *)(v240 + 7);
            *(_OWORD *)(v239 + 40) = v245;
            *(_OWORD *)(v239 + 24) = v244;
            v372[0] = (_QWORD *)v239;
            *(_QWORD *)v239 = 1;
            do
            {
              v246 = __ldaxr((unint64_t *)v12);
              v142 = --v246 == 0;
            }
            while (__stlxr(v246, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v114 = (_QWORD *)operator new();
            v115 = v372[0] + 1;
            *v114 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v114 + 1, (uint64_t)v115);
            v372[0] = v114;
            *v114 = 1;
            do
            {
              v116 = __ldaxr((unint64_t *)v12);
              v81 = --v116 == 0;
            }
            while (__stlxr(v116, (unint64_t *)v12));
            goto LABEL_259;
          default:
            goto LABEL_550;
        }
      case 1:
        switch(BYTE4(v372[1]))
        {
          case 0:
            v13 = (uint64_t)*(double *)this;
            goto LABEL_73;
          case 1:
            v128 = *(double *)this;
            goto LABEL_302;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v157 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v157, (uint64_t)v372[0]);
              v372[0] = v157;
              *v157 = 1;
              do
              {
                v158 = __ldaxr((unint64_t *)v12);
                v159 = v158 - 1;
              }
              while (__stlxr(v159, (unint64_t *)v12));
              if (!v159)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v160 = v372[0];
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v366);
            std::ostream::operator<<();
            std::stringbuf::str();
            v161 = (void **)(v160 + 1);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v366);
            if (*((char *)v160 + 31) < 0)
              operator delete(*v161);
            v162 = *(_OWORD *)&v371.__r_.__value_.__l.__data_;
            v163 = (void *)v371.__r_.__value_.__r.__words[2];
            goto LABEL_479;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v93 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v93, (uint64_t)v372[0]);
            v372[0] = v93;
            *v93 = 1;
            do
            {
              v94 = __ldaxr((unint64_t *)v12);
              v58 = --v94 == 0;
            }
            while (__stlxr(v94, (unint64_t *)v12));
            goto LABEL_313;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v212 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v212, (uint64_t)v372[0]);
            v372[0] = v212;
            *v212 = 1;
            do
            {
              v213 = __ldaxr((unint64_t *)v12);
              v152 = --v213 == 0;
            }
            while (__stlxr(v213, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v237 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v237, (uint64_t)v372[0]);
            v372[0] = v237;
            *v237 = 1;
            do
            {
              v238 = __ldaxr((unint64_t *)v12);
              v84 = --v238 == 0;
            }
            while (__stlxr(v238, (unint64_t *)v12));
            goto LABEL_409;
          case 6:
            v164 = (int)((*(double *)this - (double)(uint64_t)floor(*(double *)this)) * 1000000.0);
            if (v164 >= 999999)
              v164 = 999999;
            if (v164 >= 0xF4240)
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            v372[0] = (_QWORD *)(vcvtmd_s64_f64(*(double *)this) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
            LODWORD(v372[1]) = v164;
            goto LABEL_436;
          case 7:
            goto LABEL_435;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v247 = operator new();
            v248 = v372[0];
            *(_QWORD *)v247 = *v372[0];
            *(_QWORD *)(v247 + 8) = v248[1];
            v249 = v248[2];
            *(_QWORD *)(v247 + 16) = v249;
            if (v249)
            {
              v250 = (unsigned int *)(v249 + 8);
              do
                v251 = __ldxr(v250);
              while (__stxr(v251 + 1, v250));
            }
            v252 = *(_OWORD *)(v248 + 3);
            v253 = *(_OWORD *)(v248 + 5);
            *(_OWORD *)(v247 + 56) = *(_OWORD *)(v248 + 7);
            *(_OWORD *)(v247 + 40) = v253;
            *(_OWORD *)(v247 + 24) = v252;
            v372[0] = (_QWORD *)v247;
            *(_QWORD *)v247 = 1;
            do
            {
              v254 = __ldaxr((unint64_t *)v12);
              v142 = --v254 == 0;
            }
            while (__stlxr(v254, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v117 = (_QWORD *)operator new();
            v118 = v372[0] + 1;
            *v117 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v117 + 1, (uint64_t)v118);
            v372[0] = v117;
            *v117 = 1;
            do
            {
              v119 = __ldaxr((unint64_t *)v12);
              v81 = --v119 == 0;
            }
            while (__stlxr(v119, (unint64_t *)v12));
            goto LABEL_259;
          default:
            goto LABEL_550;
        }
      case 2:
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            v25 = *(_QWORD *)this;
            if (*(_QWORD *)v12 != 1)
            {
              v26 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v26, (uint64_t)v372[0]);
              v372[0] = v26;
              *v26 = 1;
              do
              {
                v27 = __ldaxr((unint64_t *)v12);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, (unint64_t *)v12));
              if (!v28)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            if (*(char *)(v25 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v366, *(const std::string::value_type **)(v25 + 8), *(_QWORD *)(v25 + 16));
            }
            else
            {
              v29 = *(_OWORD *)(v25 + 8);
              *(_QWORD *)&v366[16] = *(_QWORD *)(v25 + 24);
              *(_OWORD *)v366 = v29;
            }
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v56 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v56, (uint64_t)v372[0]);
            v372[0] = v56;
            *v56 = 1;
            do
            {
              v57 = __ldaxr((unint64_t *)v12);
              v58 = --v57 == 0;
            }
            while (__stlxr(v57, (unint64_t *)v12));
            goto LABEL_313;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v187 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v187, (uint64_t)v372[0]);
            v372[0] = v187;
            *v187 = 1;
            do
            {
              v188 = __ldaxr((unint64_t *)v12);
              v152 = --v188 == 0;
            }
            while (__stlxr(v188, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v120 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v120, (uint64_t)v372[0]);
            v372[0] = v120;
            *v120 = 1;
            do
            {
              v121 = __ldaxr((unint64_t *)v12);
              v84 = --v121 == 0;
            }
            while (__stlxr(v121, (unint64_t *)v12));
            goto LABEL_409;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v189 = operator new();
            v190 = v372[0];
            *(_QWORD *)v189 = *v372[0];
            *(_QWORD *)(v189 + 8) = v190[1];
            v191 = v190[2];
            *(_QWORD *)(v189 + 16) = v191;
            if (v191)
            {
              v192 = (unsigned int *)(v191 + 8);
              do
                v193 = __ldxr(v192);
              while (__stxr(v193 + 1, v192));
            }
            v194 = *(_OWORD *)(v190 + 3);
            v195 = *(_OWORD *)(v190 + 5);
            *(_OWORD *)(v189 + 56) = *(_OWORD *)(v190 + 7);
            *(_OWORD *)(v189 + 40) = v195;
            *(_OWORD *)(v189 + 24) = v194;
            v372[0] = (_QWORD *)v189;
            *(_QWORD *)v189 = 1;
            do
            {
              v196 = __ldaxr((unint64_t *)v12);
              v142 = --v196 == 0;
            }
            while (__stlxr(v196, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v78 = (_QWORD *)operator new();
            v79 = v372[0] + 1;
            *v78 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v78 + 1, (uint64_t)v79);
            v372[0] = v78;
            *v78 = 1;
            do
            {
              v80 = __ldaxr((unint64_t *)v12);
              v81 = --v80 == 0;
            }
            while (__stlxr(v80, (unint64_t *)v12));
            goto LABEL_259;
          default:
            goto LABEL_550;
        }
      case 3:
        v30 = *(_QWORD *)this;
        v31 = (char *)(*(_QWORD *)this + 8);
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v32 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v32, (uint64_t)v372[0]);
              v372[0] = v32;
              *v32 = 1;
              do
              {
                v33 = __ldaxr((unint64_t *)v12);
                v34 = v33 - 1;
              }
              while (__stlxr(v34, (unint64_t *)v12));
              if (!v34)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v371, v31);
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 != 1)
            {
              v67 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v67, (uint64_t)v372[0]);
              v372[0] = v67;
              *v67 = 1;
              do
              {
                v68 = __ldaxr((unint64_t *)v12);
                v69 = v68 - 1;
              }
              while (__stlxr(v69, (unint64_t *)v12));
              if (!v69)
              {
                v70 = *(void **)(v12 + 8);
                if (v70)
                {
                  *(_QWORD *)(v12 + 16) = v70;
                  operator delete(v70);
                }
                MEMORY[0x219A19A08](v12, 0x1080C409938AC02);
              }
            }
            if (v372[0] == (_QWORD *)v30)
              goto LABEL_436;
            v51 = (char *)(v372[0] + 1);
            v71 = (uint64_t *)(v30 + 16);
            goto LABEL_128;
          case 4:
            if (*(_QWORD *)v12 != 1)
            {
              v203 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v203, (uint64_t)v372[0]);
              v372[0] = v203;
              *v203 = 1;
              do
              {
                v204 = __ldaxr((unint64_t *)v12);
                v205 = v204 - 1;
              }
              while (__stlxr(v205, (unint64_t *)v12));
              if (!v205)
              {
                *(_QWORD *)v366 = v12 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
                MEMORY[0x219A19A08](v12, 0x1020C405E66F15BLL);
              }
            }
            std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)v372[0] + 1, *(_QWORD **)(v30 + 8), *(_QWORD **)(v30 + 16), (uint64_t)(*(_QWORD *)(v30 + 16) - *(_QWORD *)(v30 + 8)) >> 3);
            goto LABEL_436;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v146 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v146, (uint64_t)v372[0]);
            v372[0] = v146;
            *v146 = 1;
            do
            {
              v147 = __ldaxr((unint64_t *)v12);
              v84 = --v147 == 0;
            }
            while (__stlxr(v147, (unint64_t *)v12));
            goto LABEL_409;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v217 = operator new();
            v218 = v372[0];
            *(_QWORD *)v217 = *v372[0];
            *(_QWORD *)(v217 + 8) = v218[1];
            v219 = v218[2];
            *(_QWORD *)(v217 + 16) = v219;
            if (v219)
            {
              v220 = (unsigned int *)(v219 + 8);
              do
                v221 = __ldxr(v220);
              while (__stxr(v221 + 1, v220));
            }
            v222 = *(_OWORD *)(v218 + 3);
            v223 = *(_OWORD *)(v218 + 5);
            *(_OWORD *)(v217 + 56) = *(_OWORD *)(v218 + 7);
            *(_OWORD *)(v217 + 40) = v223;
            *(_OWORD *)(v217 + 24) = v222;
            v372[0] = (_QWORD *)v217;
            *(_QWORD *)v217 = 1;
            do
            {
              v224 = __ldaxr((unint64_t *)v12);
              v142 = --v224 == 0;
            }
            while (__stlxr(v224, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 != 1)
            {
              v95 = (_QWORD *)operator new();
              v96 = v372[0] + 1;
              *v95 = *v372[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v95 + 1, (uint64_t)v96);
              v372[0] = v95;
              *v95 = 1;
              do
              {
                v97 = __ldaxr((unint64_t *)v12);
                v98 = v97 - 1;
              }
              while (__stlxr(v98, (unint64_t *)v12));
              if (!v98)
              {
                v99 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
                MEMORY[0x219A19A08](v99, 0x1030C407B73B9F7);
              }
            }
            v100 = v372[0];
            memset(&v371, 0, sizeof(v371));
            memset(&v370, 0, sizeof(v370));
            std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>((uint64_t)v31, &v369);
            turi::flexible_type_impl::ndarray<double>::ndarray(v366, &v369, (uint64_t)&v371, (uint64_t)&v370, 0);
            std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&v369);
            if (v370.__r_.__value_.__r.__words[0])
            {
              v370.__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
              operator delete(v370.__r_.__value_.__l.__data_);
            }
            if (v371.__r_.__value_.__r.__words[0])
            {
              v371.__r_.__value_.__l.__size_ = v371.__r_.__value_.__r.__words[0];
              operator delete(v371.__r_.__value_.__l.__data_);
            }
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v100 + 1), (__int128 *)v366);
            v101 = (void *)v100[3];
            if (v101)
            {
              v100[4] = v101;
              operator delete(v101);
              v100[3] = 0;
              v100[4] = 0;
              v100[5] = 0;
            }
            v102 = (void *)v100[6];
            *(_OWORD *)(v100 + 3) = *(_OWORD *)&v366[16];
            v100[5] = *(_QWORD *)v367;
            *(_OWORD *)&v366[16] = 0uLL;
            *(_QWORD *)v367 = 0;
            if (v102)
            {
              v100[7] = v102;
              operator delete(v102);
              v100[6] = 0;
              v100[7] = 0;
              v100[8] = 0;
            }
            *((_OWORD *)v100 + 3) = *(_OWORD *)&v367[8];
            v100[8] = *(_QWORD *)&v367[24];
            memset(&v367[8], 0, 24);
            v100[9] = v368;
            goto LABEL_533;
          default:
            goto LABEL_550;
        }
      case 4:
        v14 = *(_QWORD *)this;
        v15 = (uint64_t *)(*(_QWORD *)this + 8);
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v16 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v16, (uint64_t)v372[0]);
              v372[0] = v16;
              *v16 = 1;
              do
              {
                v17 = __ldaxr((unint64_t *)v12);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, (unint64_t *)v12));
              if (!v18)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v371, v15);
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 != 1)
            {
              v43 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v43, (uint64_t)v372[0]);
              v372[0] = v43;
              *v43 = 1;
              do
              {
                v44 = __ldaxr((unint64_t *)v12);
                v45 = v44 - 1;
              }
              while (__stlxr(v45, (unint64_t *)v12));
              if (!v45)
              {
                v46 = *(void **)(v12 + 8);
                if (v46)
                {
                  *(_QWORD *)(v12 + 16) = v46;
                  operator delete(v46);
                }
                MEMORY[0x219A19A08](v12, 0x1080C409938AC02);
              }
            }
            turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v366, v372[0] + 1, v15);
            goto LABEL_436;
          case 4:
            if (*(_QWORD *)v12 != 1)
            {
              v129 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v129, (uint64_t)v372[0]);
              v372[0] = v129;
              *v129 = 1;
              do
              {
                v130 = __ldaxr((unint64_t *)v12);
                v131 = v130 - 1;
              }
              while (__stlxr(v131, (unint64_t *)v12));
              if (!v131)
              {
                *(_QWORD *)v366 = v12 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
                MEMORY[0x219A19A08](v12, 0x1020C405E66F15BLL);
              }
            }
            if (v372[0] != (_QWORD *)v14)
              std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v372[0] + 1), *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 4);
            goto LABEL_436;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v82 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v82, (uint64_t)v372[0]);
            v372[0] = v82;
            *v82 = 1;
            do
            {
              v83 = __ldaxr((unint64_t *)v12);
              v84 = --v83 == 0;
            }
            while (__stlxr(v83, (unint64_t *)v12));
            goto LABEL_409;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v134 = operator new();
            v135 = v372[0];
            *(_QWORD *)v134 = *v372[0];
            *(_QWORD *)(v134 + 8) = v135[1];
            v136 = v135[2];
            *(_QWORD *)(v134 + 16) = v136;
            if (v136)
            {
              v137 = (unsigned int *)(v136 + 8);
              do
                v138 = __ldxr(v137);
              while (__stxr(v138 + 1, v137));
            }
            v139 = *(_OWORD *)(v135 + 3);
            v140 = *(_OWORD *)(v135 + 5);
            *(_OWORD *)(v134 + 56) = *(_OWORD *)(v135 + 7);
            *(_OWORD *)(v134 + 40) = v140;
            *(_OWORD *)(v134 + 24) = v139;
            v372[0] = (_QWORD *)v134;
            *(_QWORD *)v134 = 1;
            do
            {
              v141 = __ldaxr((unint64_t *)v12);
              v142 = --v141 == 0;
            }
            while (__stlxr(v141, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 != 1)
            {
              v59 = (_QWORD *)operator new();
              v60 = v372[0] + 1;
              *v59 = *v372[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v59 + 1, (uint64_t)v60);
              v372[0] = v59;
              *v59 = 1;
              do
              {
                v61 = __ldaxr((unint64_t *)v12);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, (unint64_t *)v12));
              if (!v62)
              {
                v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
                MEMORY[0x219A19A08](v63, 0x1030C407B73B9F7);
              }
            }
            v64 = v372[0];
            memset(&v371, 0, sizeof(v371));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v371, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 4);
            turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v371, v366);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v64 + 1), (__int128 *)v366);
            v65 = (void *)v64[3];
            if (v65)
            {
              v64[4] = v65;
              operator delete(v65);
              v64[3] = 0;
              v64[4] = 0;
              v64[5] = 0;
            }
            v66 = (void *)v64[6];
            *(_OWORD *)(v64 + 3) = *(_OWORD *)&v366[16];
            v64[5] = *(_QWORD *)v367;
            *(_OWORD *)&v366[16] = 0uLL;
            *(_QWORD *)v367 = 0;
            if (v66)
            {
              v64[7] = v66;
              operator delete(v66);
              v64[6] = 0;
              v64[7] = 0;
              v64[8] = 0;
            }
            *((_OWORD *)v64 + 3) = *(_OWORD *)&v367[8];
            v64[8] = *(_QWORD *)&v367[24];
            memset(&v367[8], 0, 24);
            v64[9] = v368;
            turi::flexible_type_impl::ndarray<double>::~ndarray(v366);
            v370.__r_.__value_.__r.__words[0] = (std::string::size_type)&v371;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v370);
            goto LABEL_436;
          default:
            goto LABEL_550;
        }
      case 5:
        v35 = *(_QWORD *)this;
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v36 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v36, (uint64_t)v372[0]);
              v372[0] = v36;
              *v36 = 1;
              do
              {
                v37 = __ldaxr((unint64_t *)v12);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, (unint64_t *)v12));
              if (!v38)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v371, (_QWORD *)(v35 + 8));
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v89 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v89, (uint64_t)v372[0]);
            v372[0] = v89;
            *v89 = 1;
            do
            {
              v90 = __ldaxr((unint64_t *)v12);
              v58 = --v90 == 0;
            }
            while (__stlxr(v90, (unint64_t *)v12));
            goto LABEL_313;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v255 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v255, (uint64_t)v372[0]);
            v372[0] = v255;
            *v255 = 1;
            do
            {
              v256 = __ldaxr((unint64_t *)v12);
              v152 = --v256 == 0;
            }
            while (__stlxr(v256, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 != 1)
            {
              v200 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v200, (uint64_t)v372[0]);
              v372[0] = v200;
              *v200 = 1;
              do
              {
                v201 = __ldaxr((unint64_t *)v12);
                v202 = v201 - 1;
              }
              while (__stlxr(v202, (unint64_t *)v12));
              if (!v202)
              {
                *(_QWORD *)v366 = v12 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
                MEMORY[0x219A19A08](v12, 0x1020C405E66F15BLL);
              }
            }
            if (v372[0] != (_QWORD *)v35)
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)v372[0] + 1, *(uint64_t **)(v35 + 8), *(uint64_t **)(v35 + 16), (uint64_t)(*(_QWORD *)(v35 + 16) - *(_QWORD *)(v35 + 8)) >> 5);
            goto LABEL_436;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v259 = operator new();
            v260 = v372[0];
            *(_QWORD *)v259 = *v372[0];
            *(_QWORD *)(v259 + 8) = v260[1];
            v261 = v260[2];
            *(_QWORD *)(v259 + 16) = v261;
            if (v261)
            {
              v262 = (unsigned int *)(v261 + 8);
              do
                v263 = __ldxr(v262);
              while (__stxr(v263 + 1, v262));
            }
            v264 = *(_OWORD *)(v260 + 3);
            v265 = *(_OWORD *)(v260 + 5);
            *(_OWORD *)(v259 + 56) = *(_OWORD *)(v260 + 7);
            *(_OWORD *)(v259 + 40) = v265;
            *(_OWORD *)(v259 + 24) = v264;
            v372[0] = (_QWORD *)v259;
            *(_QWORD *)v259 = 1;
            do
            {
              v266 = __ldaxr((unint64_t *)v12);
              v142 = --v266 == 0;
            }
            while (__stlxr(v266, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v143 = (_QWORD *)operator new();
            v144 = v372[0] + 1;
            *v143 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v143 + 1, (uint64_t)v144);
            v372[0] = v143;
            *v143 = 1;
            do
            {
              v145 = __ldaxr((unint64_t *)v12);
              v81 = --v145 == 0;
            }
            while (__stlxr(v145, (unint64_t *)v12));
            goto LABEL_259;
          default:
            goto LABEL_550;
        }
      case 6:
        switch(BYTE4(v372[1]))
        {
          case 0:
            v13 = (uint64_t)(*(_QWORD *)this << 8) >> 8;
            goto LABEL_73;
          case 1:
            v128 = (double)*((int *)this + 2) / 1000000.0 + (double)((uint64_t)(*(_QWORD *)this << 8) >> 8);
LABEL_302:
            v372[0] = *(_QWORD **)&v128;
            goto LABEL_436;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v206 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v206, (uint64_t)v372[0]);
              v372[0] = v206;
              *v206 = 1;
              do
              {
                v207 = __ldaxr((unint64_t *)v12);
                v208 = v207 - 1;
              }
              while (__stlxr(v208, (unint64_t *)v12));
              if (!v208)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            v209 = *((_DWORD *)this + 2);
            v371.__r_.__value_.__r.__words[0] = *(_QWORD *)this;
            LODWORD(v371.__r_.__value_.__r.__words[1]) = v209;
            turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v371, (std::string *)v366);
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v132 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v132, (uint64_t)v372[0]);
            v372[0] = v132;
            *v132 = 1;
            do
            {
              v133 = __ldaxr((unint64_t *)v12);
              v58 = --v133 == 0;
            }
            while (__stlxr(v133, (unint64_t *)v12));
            goto LABEL_313;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v257 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v257, (uint64_t)v372[0]);
            v372[0] = v257;
            *v257 = 1;
            do
            {
              v258 = __ldaxr((unint64_t *)v12);
              v152 = --v258 == 0;
            }
            while (__stlxr(v258, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v267 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v267, (uint64_t)v372[0]);
            v372[0] = v267;
            *v267 = 1;
            do
            {
              v268 = __ldaxr((unint64_t *)v12);
              v84 = --v268 == 0;
            }
            while (__stlxr(v268, (unint64_t *)v12));
            goto LABEL_409;
          case 6:
            v216 = *((_DWORD *)this + 2);
            v372[0] = *(_QWORD **)this;
            LODWORD(v372[1]) = v216;
            goto LABEL_436;
          case 7:
            goto LABEL_435;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v269 = operator new();
            v270 = v372[0];
            *(_QWORD *)v269 = *v372[0];
            *(_QWORD *)(v269 + 8) = v270[1];
            v271 = v270[2];
            *(_QWORD *)(v269 + 16) = v271;
            if (v271)
            {
              v272 = (unsigned int *)(v271 + 8);
              do
                v273 = __ldxr(v272);
              while (__stxr(v273 + 1, v272));
            }
            v274 = *(_OWORD *)(v270 + 3);
            v275 = *(_OWORD *)(v270 + 5);
            *(_OWORD *)(v269 + 56) = *(_OWORD *)(v270 + 7);
            *(_OWORD *)(v269 + 40) = v275;
            *(_OWORD *)(v269 + 24) = v274;
            v372[0] = (_QWORD *)v269;
            *(_QWORD *)v269 = 1;
            do
            {
              v276 = __ldaxr((unint64_t *)v12);
              v142 = --v276 == 0;
            }
            while (__stlxr(v276, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v153 = (_QWORD *)operator new();
            v154 = v372[0] + 1;
            *v153 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v153 + 1, (uint64_t)v154);
            v372[0] = v153;
            *v153 = 1;
            do
            {
              v155 = __ldaxr((unint64_t *)v12);
              v81 = --v155 == 0;
            }
            while (__stlxr(v155, (unint64_t *)v12));
            goto LABEL_259;
          default:
            goto LABEL_550;
        }
      case 7:
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 6:
            goto LABEL_435;
          case 1:
            v13 = 0x7FF8000000000000;
LABEL_73:
            v372[0] = (_QWORD *)v13;
            goto LABEL_436;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v85 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v85, (uint64_t)v372[0]);
              v372[0] = v85;
              *v85 = 1;
              do
              {
                v86 = __ldaxr((unint64_t *)v12);
                v87 = v86 - 1;
              }
              while (__stlxr(v87, (unint64_t *)v12));
              if (!v87)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v88 = (void **)(v372[0] + 1);
            if (*((char *)v372[0] + 31) < 0)
              operator delete(*v88);
            *v88 = 0;
            v88[1] = 0;
            v88[2] = 0;
            goto LABEL_436;
          case 3:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v197 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v197, (uint64_t)v372[0]);
            v372[0] = v197;
            *v197 = 1;
            do
            {
              v198 = __ldaxr((unint64_t *)v12);
              v58 = --v198 == 0;
            }
            while (__stlxr(v198, (unint64_t *)v12));
LABEL_313:
            if (!v58)
              goto LABEL_435;
            v156 = 0x1080C409938AC02;
            v199 = *(void **)(v12 + 8);
            if (v199)
            {
              *(_QWORD *)(v12 + 16) = v199;
              operator delete(v199);
            }
            goto LABEL_434;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v214 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v214, (uint64_t)v372[0]);
            v372[0] = v214;
            *v214 = 1;
            do
            {
              v215 = __ldaxr((unint64_t *)v12);
              v152 = --v215 == 0;
            }
            while (__stlxr(v215, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v148 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v148, (uint64_t)v372[0]);
            v372[0] = v148;
            *v148 = 1;
            do
            {
              v149 = __ldaxr((unint64_t *)v12);
              v84 = --v149 == 0;
            }
            while (__stlxr(v149, (unint64_t *)v12));
            goto LABEL_409;
          case 7:
            goto LABEL_436;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v225 = operator new();
            v226 = v372[0];
            *(_QWORD *)v225 = *v372[0];
            *(_QWORD *)(v225 + 8) = v226[1];
            v227 = v226[2];
            *(_QWORD *)(v225 + 16) = v227;
            if (v227)
            {
              v228 = (unsigned int *)(v227 + 8);
              do
                v229 = __ldxr(v228);
              while (__stxr(v229 + 1, v228));
            }
            v230 = *(_OWORD *)(v226 + 3);
            v231 = *(_OWORD *)(v226 + 5);
            *(_OWORD *)(v225 + 56) = *(_OWORD *)(v226 + 7);
            *(_OWORD *)(v225 + 40) = v231;
            *(_OWORD *)(v225 + 24) = v230;
            v372[0] = (_QWORD *)v225;
            *(_QWORD *)v225 = 1;
            do
            {
              v232 = __ldaxr((unint64_t *)v12);
              v142 = --v232 == 0;
            }
            while (__stlxr(v232, (unint64_t *)v12));
            goto LABEL_431;
          case 9:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v111 = (_QWORD *)operator new();
            v112 = v372[0] + 1;
            *v111 = *v372[0];
            turi::flexible_type_impl::ndarray<double>::ndarray(v111 + 1, (uint64_t)v112);
            v372[0] = v111;
            *v111 = 1;
            do
            {
              v113 = __ldaxr((unint64_t *)v12);
              v81 = --v113 == 0;
            }
            while (__stlxr(v113, (unint64_t *)v12));
LABEL_259:
            if (!v81)
              goto LABEL_435;
            v156 = 0x1030C407B73B9F7;
            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
            goto LABEL_434;
          default:
            goto LABEL_550;
        }
      case 8:
        v39 = (uint64_t *)(*(_QWORD *)this + 8);
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v40 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v40, (uint64_t)v372[0]);
              v372[0] = v40;
              *v40 = 1;
              do
              {
                v41 = __ldaxr((unint64_t *)v12);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, (unint64_t *)v12));
              if (!v42)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_476;
          case 3:
            if (*(_QWORD *)v12 != 1)
            {
              v103 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v103, (uint64_t)v372[0]);
              v372[0] = v103;
              *v103 = 1;
              do
              {
                v104 = __ldaxr((unint64_t *)v12);
                v105 = v104 - 1;
              }
              while (__stlxr(v105, (unint64_t *)v12));
              if (!v105)
              {
                v106 = *(void **)(v12 + 8);
                if (v106)
                {
                  *(_QWORD *)(v12 + 16) = v106;
                  operator delete(v106);
                }
                a3 = MEMORY[0x219A19A08](v12, 0x1080C409938AC02);
              }
            }
            v107 = v372[0];
            turi::flexible_type_impl::get_vec_visitor::operator()(v39, (double **)v366, *(unint64_t *)&a3);
            v108 = (void *)v107[1];
            if (v108)
            {
              v107[2] = v108;
              operator delete(v108);
              v107[1] = 0;
              v107[2] = 0;
              v107[3] = 0;
            }
            *(_OWORD *)(v107 + 1) = *(_OWORD *)v366;
            v107[3] = *(_QWORD *)&v366[16];
            goto LABEL_436;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v277 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v277, (uint64_t)v372[0]);
            v372[0] = v277;
            *v277 = 1;
            do
            {
              v278 = __ldaxr((unint64_t *)v12);
              v152 = --v278 == 0;
            }
            while (__stlxr(v278, (unint64_t *)v12));
            goto LABEL_422;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v233 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v233, (uint64_t)v372[0]);
            v372[0] = v233;
            *v233 = 1;
            do
            {
              v234 = __ldaxr((unint64_t *)v12);
              v84 = --v234 == 0;
            }
            while (__stlxr(v234, (unint64_t *)v12));
            goto LABEL_409;
          case 8:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v279 = operator new();
            v280 = v372[0];
            *(_QWORD *)v279 = *v372[0];
            *(_QWORD *)(v279 + 8) = v280[1];
            v281 = v280[2];
            *(_QWORD *)(v279 + 16) = v281;
            if (v281)
            {
              v282 = (unsigned int *)(v281 + 8);
              do
                v283 = __ldxr(v282);
              while (__stxr(v283 + 1, v282));
            }
            v284 = *(_OWORD *)(v280 + 3);
            v285 = *(_OWORD *)(v280 + 5);
            *(_OWORD *)(v279 + 56) = *(_OWORD *)(v280 + 7);
            *(_OWORD *)(v279 + 40) = v285;
            *(_OWORD *)(v279 + 24) = v284;
            v372[0] = (_QWORD *)v279;
            *(_QWORD *)v279 = 1;
            do
            {
              v286 = __ldaxr((unint64_t *)v12);
              v142 = --v286 == 0;
            }
            while (__stlxr(v286, (unint64_t *)v12));
LABEL_431:
            if (!v142)
              goto LABEL_435;
            v156 = 0x1030C40F1F0227BLL;
            boost::detail::shared_count::~shared_count((unsigned int **)(v12 + 16));
            goto LABEL_434;
          case 9:
            if (*(_QWORD *)v12 != 1)
            {
              v179 = (_QWORD *)operator new();
              v180 = v372[0] + 1;
              *v179 = *v372[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v179 + 1, (uint64_t)v180);
              v372[0] = v179;
              *v179 = 1;
              do
              {
                v181 = __ldaxr((unint64_t *)v12);
                v182 = v181 - 1;
              }
              while (__stlxr(v182, (unint64_t *)v12));
              if (!v182)
              {
                v183 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
                a3 = MEMORY[0x219A19A08](v183, 0x1030C407B73B9F7);
              }
            }
            v184 = v372[0];
            turi::flexible_type_impl::get_ndvec_visitor::operator()(v39, v366, *(unint64_t *)&a3);
            std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)(v184 + 1), (__int128 *)v366);
            v185 = (void *)v184[3];
            if (v185)
            {
              v184[4] = v185;
              operator delete(v185);
              v184[3] = 0;
              v184[4] = 0;
              v184[5] = 0;
            }
            v186 = (void *)v184[6];
            *(_OWORD *)(v184 + 3) = *(_OWORD *)&v366[16];
            v184[5] = *(_QWORD *)v367;
            *(_OWORD *)&v366[16] = 0uLL;
            *(_QWORD *)v367 = 0;
            if (v186)
            {
              v184[7] = v186;
              operator delete(v186);
              v184[6] = 0;
              v184[7] = 0;
              v184[8] = 0;
            }
            *((_OWORD *)v184 + 3) = *(_OWORD *)&v367[8];
            v184[8] = *(_QWORD *)&v367[24];
            memset(&v367[8], 0, 24);
            v184[9] = v368;
            goto LABEL_533;
          default:
            goto LABEL_550;
        }
      case 9:
        v20 = *(_QWORD *)this;
        v21 = (uint64_t *)(*(_QWORD *)this + 8);
        switch(BYTE4(v372[1]))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_435;
          case 2:
            if (*(_QWORD *)v12 != 1)
            {
              v22 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::string>::pair[abi:ne180100](v22, (uint64_t)v372[0]);
              v372[0] = v22;
              *v22 = 1;
              do
              {
                v23 = __ldaxr((unint64_t *)v12);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, (unint64_t *)v12));
              if (!v24)
              {
                if (*(char *)(v12 + 31) < 0)
                  operator delete(*(void **)(v12 + 8));
                MEMORY[0x219A19A08](v12, 0x1012C404EF22A49);
              }
            }
            v19 = v372[0];
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v371, v21);
LABEL_476:
            v161 = (void **)(v19 + 1);
            if (*((char *)v19 + 31) < 0)
              operator delete(*v161);
            v162 = *(_OWORD *)v366;
            v163 = *(void **)&v366[16];
LABEL_479:
            v161[2] = v163;
            *(_OWORD *)v161 = v162;
            goto LABEL_436;
          case 3:
            if (*(_QWORD *)v12 != 1)
            {
              v47 = (_QWORD *)operator new();
              std::pair<turi::atomic<unsigned long>,std::vector<double>>::pair[abi:ne180100](v47, (uint64_t)v372[0]);
              v372[0] = v47;
              *v47 = 1;
              do
              {
                v48 = __ldaxr((unint64_t *)v12);
                v49 = v48 - 1;
              }
              while (__stlxr(v49, (unint64_t *)v12));
              if (!v49)
              {
                v50 = *(void **)(v12 + 8);
                if (v50)
                {
                  *(_QWORD *)(v12 + 16) = v50;
                  operator delete(v50);
                }
                MEMORY[0x219A19A08](v12, 0x1080C409938AC02);
              }
            }
            v51 = (char *)(v372[0] + 1);
            if (*(_QWORD *)(v20 + 72))
              goto LABEL_486;
            v53 = *(uint64_t **)(v20 + 24);
            v52 = *(uint64_t **)(v20 + 32);
            v54 = *(_QWORD **)(v20 + 8);
            if (v52 == v53 || v54 == 0)
            {
              v313 = 0;
            }
            else
            {
              v313 = 1;
              do
              {
                v314 = *v53++;
                v313 *= v314;
              }
              while (v53 != v52);
            }
            if (v313 == (uint64_t)(v54[1] - *v54) >> 3
              && turi::flexible_type_impl::ndarray<double>::last_index(v21) == (uint64_t)(*(_QWORD *)(*v21 + 8)
                                                                                       - *(_QWORD *)*v21) >> 3)
            {
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v21))
                turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
              v31 = (char *)*v21;
              if (v51 != v31)
              {
                v71 = (uint64_t *)(v31 + 8);
LABEL_128:
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v51, *(char **)v31, *v71, (*v71 - *(_QWORD *)v31) >> 3);
              }
            }
            else
            {
LABEL_486:
              if (!turi::flexible_type_impl::ndarray<double>::is_valid(v21))
                turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
              if (turi::flexible_type_impl::ndarray<double>::is_full(v21))
              {
                turi::flexible_type_impl::ndarray<double>::ndarray(v366, (uint64_t)v21);
              }
              else
              {
                memset(&v371, 0, sizeof(v371));
                memset(&v370, 0, sizeof(v370));
                memset(&v369, 0, sizeof(v369));
                turi::flexible_type_impl::ndarray<double>::ndarray(v366, (uint64_t)&v371, (uint64_t)&v370, (uint64_t)&v369, 0);
                if (v369.__r_.__value_.__r.__words[0])
                {
                  v369.__r_.__value_.__l.__size_ = v369.__r_.__value_.__r.__words[0];
                  operator delete(v369.__r_.__value_.__l.__data_);
                }
                if (v370.__r_.__value_.__r.__words[0])
                {
                  v370.__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
                  operator delete(v370.__r_.__value_.__l.__data_);
                }
                if (v371.__r_.__value_.__r.__words[0])
                {
                  v371.__r_.__value_.__l.__size_ = v371.__r_.__value_.__r.__words[0];
                  operator delete(v371.__r_.__value_.__l.__data_);
                }
                v368 = 0;
                if (v366 != (_BYTE *)(v20 + 8))
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v366[16], *(char **)(v20 + 24), *(_QWORD *)(v20 + 32), (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 3);
                v316 = *(uint64_t **)(v20 + 24);
                v315 = *(uint64_t **)(v20 + 32);
                if (v315 == v316 || !*v21)
                {
                  v317 = 0;
                }
                else
                {
                  v317 = 1;
                  do
                  {
                    v318 = *v316++;
                    v317 *= v318;
                  }
                  while (v316 != v315);
                }
                std::vector<double>::resize(*(uint64_t *)v366, v317);
                std::vector<unsigned long>::resize((uint64_t)&v367[8], (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 3);
                if (*(_QWORD *)&v366[24] != *(_QWORD *)&v366[16]
                  && *(_QWORD *)(*(_QWORD *)v366 + 8) != **(_QWORD **)v366)
                {
                  std::vector<std::pair<unsigned long,unsigned long>>::vector(&v371, (uint64_t)(*(_QWORD *)(v20 + 56) - *(_QWORD *)(v20 + 48)) >> 3);
                  v319 = *(_QWORD *)(v20 + 48);
                  v320 = *(_QWORD *)(v20 + 56);
                  v321 = (unint64_t *)v371.__r_.__value_.__r.__words[0];
                  v322 = v320 - v319;
                  if (v320 != v319)
                  {
                    v323 = 0;
                    v324 = v322 >> 3;
                    if (v324 <= 1)
                      v324 = 1;
                    v325 = (_QWORD *)(v371.__r_.__value_.__r.__words[0] + 8);
                    do
                    {
                      *(v325 - 1) = *(_QWORD *)(v319 + 8 * v323);
                      *v325 = v323++;
                      v325 += 2;
                    }
                    while (v324 != v323);
                  }
                  std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(v371.__r_.__value_.__l.__size_, (unint64_t *)v371.__r_.__value_.__l.__size_, (uint64_t)v321, v321);
                  v326 = v371.__r_.__value_.__r.__words[0];
                  v327 = *(_QWORD *)&v367[8];
                  *(_QWORD *)(*(_QWORD *)&v367[8] + 8 * *(_QWORD *)(v371.__r_.__value_.__r.__words[0] + 8)) = 1;
                  v328 = *(_QWORD *)(v20 + 56) - *(_QWORD *)(v20 + 48);
                  if ((unint64_t)v328 >= 9)
                  {
                    v329 = v328 >> 3;
                    v330 = *(_QWORD *)&v366[16];
                    if (v329 <= 2)
                      v329 = 2;
                    v331 = (uint64_t *)(v326 + 24);
                    v332 = v329 - 1;
                    do
                    {
                      v333 = *(_QWORD *)(v330 + 8 * *(v331 - 2)) * *(_QWORD *)(v327 + 8 * *(v331 - 2));
                      v334 = *v331;
                      v331 += 2;
                      *(_QWORD *)(v327 + 8 * v334) = v333;
                      --v332;
                    }
                    while (v332);
                  }
                  v335 = (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 3;
                  v369.__r_.__value_.__r.__words[0] = 0;
                  std::vector<unsigned long>::vector(&v370, v335, &v369);
                  do
                  {
                    v336 = (uint64_t *)v370.__r_.__value_.__r.__words[0];
                    if (v370.__r_.__value_.__l.__size_ == v370.__r_.__value_.__r.__words[0])
                    {
                      v345 = 0;
                      v346 = *(_QWORD *)(**(_QWORD **)(v20 + 8) + 8 * *(_QWORD *)(v20 + 72));
                      v347 = *(_QWORD **)v366;
                    }
                    else
                    {
                      v337 = 0;
                      v338 = (uint64_t)(v370.__r_.__value_.__l.__size_ - v370.__r_.__value_.__r.__words[0]) >> 3;
                      v339 = *(uint64_t **)(v20 + 48);
                      if (v338 <= 1)
                        v338 = 1;
                      v340 = (uint64_t *)v370.__r_.__value_.__r.__words[0];
                      v341 = v338;
                      do
                      {
                        v343 = *v340++;
                        v342 = v343;
                        v344 = *v339++;
                        v337 += v344 * v342;
                        --v341;
                      }
                      while (v341);
                      v345 = 0;
                      v346 = *(_QWORD *)(**(_QWORD **)(v20 + 8) + 8 * (*(_QWORD *)(v20 + 72) + v337));
                      v347 = *(_QWORD **)v366;
                      v348 = *(uint64_t **)&v367[8];
                      do
                      {
                        v350 = *v336++;
                        v349 = v350;
                        v351 = *v348++;
                        v345 += v351 * v349;
                        --v338;
                      }
                      while (v338);
                    }
                    *(_QWORD *)(*v347 + 8 * v345) = v346;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v21, (uint64_t *)&v370));
                  if (v370.__r_.__value_.__r.__words[0])
                  {
                    v370.__r_.__value_.__l.__size_ = v370.__r_.__value_.__r.__words[0];
                    operator delete(v370.__r_.__value_.__l.__data_);
                  }
                  if (v371.__r_.__value_.__r.__words[0])
                  {
                    v371.__r_.__value_.__l.__size_ = v371.__r_.__value_.__r.__words[0];
                    operator delete(v371.__r_.__value_.__l.__data_);
                  }
                }
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v366);
              if (!turi::flexible_type_impl::ndarray<double>::is_full(v366))
                turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
              if (v51 != *(char **)v366)
                std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v51, **(char ***)v366, *(_QWORD *)(*(_QWORD *)v366 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v366 + 8) - **(_QWORD **)v366) >> 3);
LABEL_533:
              turi::flexible_type_impl::ndarray<double>::~ndarray(v366);
            }
            goto LABEL_436;
          case 4:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v150 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<turi::flexible_type>>::pair[abi:ne180100](v150, (uint64_t)v372[0]);
            v372[0] = v150;
            *v150 = 1;
            do
            {
              v151 = __ldaxr((unint64_t *)v12);
              v152 = --v151 == 0;
            }
            while (__stlxr(v151, (unint64_t *)v12));
LABEL_422:
            if (!v152)
              goto LABEL_435;
            v156 = 0x1020C405E66F15BLL;
            *(_QWORD *)v366 = v12 + 8;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
            break;
          case 5:
            if (*(_QWORD *)v12 == 1)
              goto LABEL_435;
            v109 = (_QWORD *)operator new();
            std::pair<turi::atomic<unsigned long>,std::vector<std::pair<turi::flexible_type,turi::flexible_type>>>::pair[abi:ne180100](v109, (uint64_t)v372[0]);
            v372[0] = v109;
            *v109 = 1;
            do
            {
              v110 = __ldaxr((unint64_t *)v12);
              v84 = --v110 == 0;
            }
            while (__stlxr(v110, (unint64_t *)v12));
LABEL_409:
            if (!v84)
              goto LABEL_435;
            v156 = 0x1020C405E66F15BLL;
            *(_QWORD *)v366 = v12 + 8;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
            break;
          case 8:
            if (*(_QWORD *)v12 != 1)
            {
              v165 = operator new();
              v166 = v372[0];
              *(_QWORD *)v165 = *v372[0];
              *(_QWORD *)(v165 + 8) = v166[1];
              v167 = v166[2];
              *(_QWORD *)(v165 + 16) = v167;
              if (v167)
              {
                v168 = (unsigned int *)(v167 + 8);
                do
                  v169 = __ldxr(v168);
                while (__stxr(v169 + 1, v168));
              }
              v170 = *(_OWORD *)(v166 + 3);
              v171 = *(_OWORD *)(v166 + 5);
              *(_OWORD *)(v165 + 56) = *(_OWORD *)(v166 + 7);
              *(_OWORD *)(v165 + 40) = v171;
              *(_OWORD *)(v165 + 24) = v170;
              v372[0] = (_QWORD *)v165;
              *(_QWORD *)v165 = 1;
              do
              {
                v172 = __ldaxr((unint64_t *)v12);
                v173 = v172 - 1;
              }
              while (__stlxr(v173, (unint64_t *)v12));
              if (!v173)
              {
                boost::detail::shared_count::~shared_count((unsigned int **)(v12 + 16));
                MEMORY[0x219A19A08](v12, 0x1030C40F1F0227BLL);
              }
            }
            v174 = v372[0];
            turi::flexible_type_impl::get_img_visitor::operator()((uint64_t)v21, (turi::image_type *)v366);
            v175 = *(_OWORD *)v366;
            *(_OWORD *)v366 = 0uLL;
            v176 = *(_OWORD *)(v174 + 1);
            *(_OWORD *)(v174 + 1) = v175;
            *(_OWORD *)&v371.__r_.__value_.__l.__data_ = v176;
            boost::detail::shared_count::~shared_count((unsigned int **)&v371.__r_.__value_.__l.__size_);
            v177 = *(_OWORD *)&v366[16];
            v178 = *(_OWORD *)v367;
            *(_OWORD *)(v174 + 7) = *(_OWORD *)&v367[16];
            *(_OWORD *)(v174 + 5) = v178;
            *(_OWORD *)(v174 + 3) = v177;
            boost::detail::shared_count::~shared_count((unsigned int **)&v366[8]);
            goto LABEL_436;
          case 9:
            if (*(_QWORD *)v12 != 1)
            {
              v72 = (_QWORD *)operator new();
              v73 = v372[0] + 1;
              *v72 = *v372[0];
              turi::flexible_type_impl::ndarray<double>::ndarray(v72 + 1, (uint64_t)v73);
              v372[0] = v72;
              *v72 = 1;
              do
              {
                v74 = __ldaxr((unint64_t *)v12);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, (unint64_t *)v12));
              if (!v75)
              {
                v76 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((_QWORD *)v12);
                MEMORY[0x219A19A08](v76, 0x1030C407B73B9F7);
              }
            }
            v77 = (char *)v372[0];
            std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](v372[0] + 1, v21);
            if (v77 != (char *)v20)
            {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v77 + 24, *(char **)(v20 + 24), *(_QWORD *)(v20 + 32), (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 3);
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v77 + 48, *(char **)(v20 + 48), *(_QWORD *)(v20 + 56), (uint64_t)(*(_QWORD *)(v20 + 56) - *(_QWORD *)(v20 + 48)) >> 3);
            }
            *((_QWORD *)v77 + 9) = *(_QWORD *)(v20 + 72);
            goto LABEL_436;
          default:
            goto LABEL_550;
        }
LABEL_434:
        MEMORY[0x219A19A08](v12, v156);
LABEL_435:
        turi::flexible_type_fail(0);
        break;
      default:
LABEL_550:
        result = (_QWORD *)turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
LABEL_436:
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD **))(**(_QWORD **)(v5 + 176) + 80))(*(_QWORD *)(v5 + 176), 0, *((_QWORD *)a1 + 2), v372);
  switch(BYTE4(v372[1]))
  {
    case 2:
      v287 = v372[0];
      do
      {
        v288 = __ldaxr(v287);
        v289 = v288 - 1;
      }
      while (__stlxr(v289, v287));
      if (!v289)
      {
        v290 = v372[0];
        if (v372[0])
        {
          if (*((char *)v372[0] + 31) < 0)
            operator delete(*((void **)v372[0] + 1));
          v291 = v290;
          v292 = 0x1012C404EF22A49;
          goto LABEL_473;
        }
      }
      break;
    case 3:
      v301 = v372[0];
      do
      {
        v302 = __ldaxr(v301);
        v303 = v302 - 1;
      }
      while (__stlxr(v303, v301));
      if (!v303)
      {
        v304 = v372[0];
        if (v372[0])
        {
          v305 = (void *)v372[0][1];
          if (v305)
          {
            v372[0][2] = v305;
            operator delete(v305);
          }
          v291 = v304;
          v292 = 0x1080C409938AC02;
          goto LABEL_473;
        }
      }
      break;
    case 4:
      v293 = v372[0];
      do
      {
        v294 = __ldaxr(v293);
        v295 = v294 - 1;
      }
      while (__stlxr(v295, v293));
      if (!v295)
      {
        v296 = v372[0];
        if (v372[0])
        {
          *(_QWORD *)v366 = v372[0] + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
          goto LABEL_466;
        }
      }
      break;
    case 5:
      v306 = v372[0];
      do
      {
        v307 = __ldaxr(v306);
        v308 = v307 - 1;
      }
      while (__stlxr(v308, v306));
      if (!v308)
      {
        v296 = v372[0];
        if (v372[0])
        {
          *(_QWORD *)v366 = v372[0] + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v366);
LABEL_466:
          v291 = v296;
          v292 = 0x1020C405E66F15BLL;
          goto LABEL_473;
        }
      }
      break;
    case 8:
      v309 = v372[0];
      do
      {
        v310 = __ldaxr(v309);
        v311 = v310 - 1;
      }
      while (__stlxr(v311, v309));
      if (!v311)
      {
        v312 = v372[0];
        if (v372[0])
        {
          boost::detail::shared_count::~shared_count((unsigned int **)v372[0] + 2);
          v291 = v312;
          v300 = -235920773;
          goto LABEL_472;
        }
      }
      break;
    case 9:
      v297 = v372[0];
      do
      {
        v298 = __ldaxr(v297);
        v299 = v298 - 1;
      }
      while (__stlxr(v299, v297));
      if (!v299)
      {
        result = v372[0];
        if (v372[0])
        {
          v291 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v372[0]);
          v300 = 2071181815;
LABEL_472:
          v292 = v300 | 0x1030C4000000000;
LABEL_473:
          result = (_QWORD *)MEMORY[0x219A19A08](v291, v292);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_217FAEC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v23 = *(void **)(v21 - 144);
  if (v23)
  {
    *(_QWORD *)(v21 - 136) = v23;
    operator delete(v23);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a16);
  switch(*(_BYTE *)(v21 - 92))
  {
    case 2:
      v24 = *(unint64_t **)(v21 - 104);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (v26)
        goto LABEL_41;
      v27 = *(_QWORD *)(v21 - 104);
      if (!v27)
        goto LABEL_41;
      if (*(char *)(v27 + 31) < 0)
        operator delete(*(void **)(v27 + 8));
      v28 = (_QWORD *)v27;
      v29 = 0x1012C404EF22A49;
      goto LABEL_40;
    case 3:
      v39 = *(unint64_t **)(v21 - 104);
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (v41)
        goto LABEL_41;
      v42 = *(_QWORD **)(v21 - 104);
      if (!v42)
        goto LABEL_41;
      v43 = (void *)v42[1];
      if (v43)
      {
        v42[2] = v43;
        operator delete(v43);
      }
      v28 = v42;
      v29 = 0x1080C409938AC02;
      goto LABEL_40;
    case 4:
      v30 = *(unint64_t **)(v21 - 104);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (v32)
        goto LABEL_41;
      v33 = *(_QWORD **)(v21 - 104);
      if (!v33)
        goto LABEL_41;
      *(_QWORD *)(v21 - 112) = v33 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 112));
      goto LABEL_33;
    case 5:
      v44 = *(unint64_t **)(v21 - 104);
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (v46)
        goto LABEL_41;
      v33 = *(_QWORD **)(v21 - 104);
      if (!v33)
        goto LABEL_41;
      *(_QWORD *)(v21 - 112) = v33 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 112));
LABEL_33:
      v28 = v33;
      v29 = 0x1020C405E66F15BLL;
      goto LABEL_40;
    case 8:
      v47 = *(unint64_t **)(v21 - 104);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_41;
      v50 = *(_QWORD *)(v21 - 104);
      if (!v50)
        goto LABEL_41;
      boost::detail::shared_count::~shared_count((unsigned int **)(v50 + 16));
      v28 = (_QWORD *)v50;
      v38 = -235920773;
      goto LABEL_39;
    case 9:
      v34 = *(unint64_t **)(v21 - 104);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_41;
      v37 = *(_QWORD **)(v21 - 104);
      if (!v37)
        goto LABEL_41;
      v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v37);
      v38 = 2071181815;
LABEL_39:
      v29 = v38 | 0x1030C4000000000;
LABEL_40:
      MEMORY[0x219A19A08](v28, v29);
LABEL_41:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_41;
  }
}

void std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::~__func()
{
  JUMPOUT(0x219A19A08);
}

__n128 std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24D91E8E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24D91E8E0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::operator()(uint64_t a1, turi::sframe_rows *a2)
{
  turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}::operator()(a1 + 8, a2);
}

uint64_t std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target_type()
{
}

void turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}::operator()(uint64_t a1, turi::sframe_rows *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  _BYTE *v6;
  void *__p;
  void *v8;
  _BYTE *v9;
  uint64_t *v10[4];
  void **v11;

  if (*((_QWORD *)a2 + 1) - *(_QWORD *)a2 != 16)
    turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}::operator() const(turi::sframe_rows const&)::{lambda(void)#1}::operator()();
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = operator new(1uLL);
  __p = v6;
  *v6 = v5;
  v8 = v6 + 1;
  v9 = v6 + 1;
  turi::sframe_rows::type_check(a2, &__p, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v4 + 88))(v4, v3, v10);
  v11 = (void **)v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_217FAF2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 - 40) = v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}::operator() const(turi::sframe_rows const&)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sfr.num_columns() == 1", 22);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 819, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::sarray<turi::flexible_type>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}::operator() const(turi::sframe_rows const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FAF3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_217FAF4AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = (_QWORD *)v1[7];
  if (v4 == v2)
  {
    v5 = v2;
    v6 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v6 = 5;
    v5 = (_QWORD *)v1[7];
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = (_QWORD *)v1[3];
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void turi::sarray<turi::flexible_type>::keep_array_file_ref(turi::fileio::file_handle_pool *a1)
{
  turi::fileio::file_handle_pool *v1;
  __int128 *v2;
  __int128 *i;
  __int128 v4;
  std::vector<std::string>::pointer end;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  const std::string::value_type **v14;
  std::string::size_type v15;
  std::vector<std::string>::pointer v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  const std::string::value_type **v25;
  std::string::size_type v26;
  std::vector<std::string>::pointer v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 *begin;
  std::vector<std::string>::pointer v37;
  char **v38;
  pthread_mutex_t *instance;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *size;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_size;
  unint64_t v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string __p;
  std::vector<std::string> v54;
  std::__split_buffer<std::string> __v;

  v1 = a1;
  memset(&v54, 0, sizeof(v54));
  v2 = (__int128 *)*((_QWORD *)a1 + 13);
  for (i = (__int128 *)*((_QWORD *)a1 + 14); v2 != i; v2 = (__int128 *)((char *)v2 + 24))
  {
    if (*((char *)v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v4 = *v2;
      v52.__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v4;
    }
    turi::parse_v2_segment_filename((uint64_t)&v52, &__p);
    end = v54.__end_;
    if (v54.__end_ >= v54.__end_cap_.__value_)
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_ - (char *)v54.__begin_) >> 3);
      v8 = v7 + 1;
      if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<float>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) > v8)
        v8 = 0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) >= 0x555555555555555)
        v9 = 0xAAAAAAAAAAAAAAALL;
      else
        v9 = v8;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v54.__end_cap_;
      if (v9)
        v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v54.__end_cap_, v9);
      else
        v10 = 0;
      v11 = v10 + v7;
      __v.__first_ = v10;
      __v.__begin_ = v11;
      __v.__end_cap_.__value_ = &v10[v9];
      v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v11->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v11 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v54, &__v);
      v13 = v54.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v54.__end_ = v13;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v54.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v6;
      memset(&__p, 0, sizeof(__p));
      v54.__end_ = end + 1;
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
  }
  v14 = (const std::string::value_type **)((char *)v1 + 8);
  if (*((char *)v1 + 31) < 0)
  {
    v15 = *((_QWORD *)v1 + 2);
    if (!v15)
      goto LABEL_41;
    std::string::__init_copy_ctor_external(&v51, *v14, v15);
  }
  else
  {
    if (!*((_BYTE *)v1 + 31))
      goto LABEL_41;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)v14;
    v51.__r_.__value_.__r.__words[2] = *((_QWORD *)v1 + 3);
  }
  turi::parse_v2_segment_filename((uint64_t)&v51, &__p);
  v16 = v54.__end_;
  if (v54.__end_ >= v54.__end_cap_.__value_)
  {
    v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_ - (char *)v54.__begin_) >> 3);
    v19 = v18 + 1;
    if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) > v19)
      v19 = 0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v19;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v54.__end_cap_;
    if (v20)
      v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v54.__end_cap_, v20);
    else
      v21 = 0;
    v22 = v21 + v18;
    __v.__first_ = v21;
    __v.__begin_ = v22;
    __v.__end_cap_.__value_ = &v21[v20];
    v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v22->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
    memset(&__p, 0, sizeof(__p));
    __v.__end_ = v22 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v54, &__v);
    v24 = v54.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v54.__end_ = v24;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v54.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    memset(&__p, 0, sizeof(__p));
    v54.__end_ = v16 + 1;
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
LABEL_41:
  v25 = (const std::string::value_type **)((char *)v1 + 152);
  if (*((char *)v1 + 175) < 0)
  {
    v26 = *((_QWORD *)v1 + 20);
    if (!v26)
      goto LABEL_61;
    std::string::__init_copy_ctor_external(&v50, *v25, v26);
  }
  else
  {
    if (!*((_BYTE *)v1 + 175))
      goto LABEL_61;
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)v25;
    v50.__r_.__value_.__r.__words[2] = *((_QWORD *)v1 + 21);
  }
  turi::parse_v2_segment_filename((uint64_t)&v50, &__p);
  v27 = v54.__end_;
  if (v54.__end_ >= v54.__end_cap_.__value_)
  {
    v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_ - (char *)v54.__begin_) >> 3);
    v30 = v29 + 1;
    if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) > v30)
      v30 = 0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) >= 0x555555555555555)
      v31 = 0xAAAAAAAAAAAAAAALL;
    else
      v31 = v30;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v54.__end_cap_;
    if (v31)
      v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v54.__end_cap_, v31);
    else
      v32 = 0;
    v33 = v32 + v29;
    __v.__first_ = v32;
    __v.__begin_ = v33;
    __v.__end_cap_.__value_ = &v32[v31];
    v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v33->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
    memset(&__p, 0, sizeof(__p));
    __v.__end_ = v33 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v54, &__v);
    v35 = v54.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v54.__end_ = v35;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v54.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
    memset(&__p, 0, sizeof(__p));
    v54.__end_ = v27 + 1;
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
LABEL_61:
  begin = (__int128 *)v54.__begin_;
  v37 = v54.__end_;
  if (v54.__begin_ != v54.__end_)
  {
    v38 = (char **)((char *)v1 + 256);
    do
    {
      __v.__first_ = 0;
      __v.__begin_ = 0;
      instance = turi::fileio::file_handle_pool::get_instance(a1);
      turi::fileio::file_handle_pool::register_file((uint64_t)instance, begin, (uint64_t *)&__p);
      v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      v41 = (std::__shared_weak_count *)__v.__begin_;
      *(_OWORD *)&__v.__first_ = v40;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v45 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      a1 = (turi::fileio::file_handle_pool *)std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v38, (__int128 *)&__v);
      v47 = (std::__shared_weak_count *)__v.__begin_;
      if (__v.__begin_)
      {
        p_size = &__v.__begin_->__r_.__value_.__l.__size_;
        do
          v49 = __ldaxr(p_size);
        while (__stlxr(v49 - 1, p_size));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      begin = (__int128 *)((char *)begin + 24);
    }
    while (begin != (__int128 *)v37);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_217FAFA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38)
{
  __p = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<turi::flexible_type>::set_metadata(uint64_t a1, __int128 *a2, const std::string *a3)
{
  __int128 *v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v12;

  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(unsigned __int8 *)(a1 + 249), "SArray not opened for writing");
  v6 = *(__int128 **)(a1 + 176);
  v12 = v6;
  if (!v6)
    turi::sarray<turi::flexible_type>::set_metadata(std::string,std::string)::{lambda(void)#1}::operator()();
  v7 = (uint64_t **)(*(_QWORD *)((*(uint64_t (**)(__int128 *))(*(_QWORD *)v6 + 32))(v6) + 64) + 120);
  v12 = a2;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
  std::string::operator=((std::string *)(v8 + 7), a3);
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 32))(*(_QWORD *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v9);
  v10 = *(_QWORD *)(v9 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v9 + 24);
  *(_QWORD *)(a1 + 48) = v10;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v9 + 48));
  if (a1 + 8 != v9)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v9 + 72), *(_QWORD *)(v9 + 80), (uint64_t)(*(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v9 + 96), *(__int128 **)(v9 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v9 + 104) - *(_QWORD *)(v9 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(__int128 **)(v9 + 120), (__int128 *)(v9 + 128));
  }
  return 1;
}

void turi::sarray<turi::flexible_type>::set_metadata(std::string,std::string)::{lambda(void)#1}::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writer", 6);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"__null", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 622, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::sarray<turi::flexible_type>::set_metadata(std::string,std::string)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FAFE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_217FAFFD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void **std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 96 * a2;
      v14 = 96 * a2;
      v15 = (_QWORD *)(v7 + 88);
      do
      {
        *(v15 - 8) = 0;
        *(v15 - 4) = 0;
        *v15 = 0;
        v15 += 12;
        v14 -= 96;
      }
      while (v14);
    }
    else
    {
      v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL)
      std::vector<float>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sarray_reader_buffer<turi::flexible_type>>>((uint64_t)result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[96 * v8];
    v22 = &v12[96 * v11];
    v16 = &v20[96 * a2];
    v17 = 96 * a2;
    v18 = v20 + 88;
    do
    {
      *(v18 - 8) = 0;
      *(v18 - 4) = 0;
      *v18 = 0;
      v18 += 12;
      v17 -= 96;
    }
    while (v17);
    v21 = v16;
    std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_217FB0138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>,std::function<void ()(turi::sframe_rows const&)>*,std::function<void ()(turi::sframe_rows const&)>*>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>,std::function<void ()(turi::sframe_rows const&)>*,std::function<void ()(turi::sframe_rows const&)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 96;
      std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::construct[abi:ne180100]<std::function<void ()(turi::sframe_rows const&)>,std::function<void ()(turi::sframe_rows const&)>>(a1, v7 - 96, v9);
      v7 = *((_QWORD *)&v16 + 1) - 96;
      *((_QWORD *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::construct[abi:ne180100]<std::function<void ()(turi::sframe_rows const&)>,std::function<void ()(turi::sframe_rows const&)>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100](a2, a3);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](a2 + 32, a3 + 32);
  return std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a2 + 64, a3 + 64);
}

uint64_t std::__function::__value_func<void ()(turi::flexible_type const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<void ()(turi::flexible_type &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>,std::reverse_iterator<std::function<void ()(turi::sframe_rows const&)>*>>::operator()[abi:ne180100](uint64_t *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::clear[abi:ne180100](_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = result[1];
  v1 = result[2];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = v3[4];
      v3[2] = v1 - 96;
      result = std::allocator<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::destroy[abi:ne180100](v4, (_QWORD *)(v1 - 96));
      v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

void std::default_delete<turi::gl_sarray_writer_impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 16);
    std::vector<turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    v3 = std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](a2);
    MEMORY[0x219A19A08](v3, 0x20C40769AC3DALL);
  }
}

void OUTLINED_FUNCTION_3_4()
{
  JUMPOUT(0x219A19A08);
}

uint64_t OUTLINED_FUNCTION_37()
{
  return std::stringbuf::str();
}

void __cxx_global_var_init_75()
{
  int v0;

  {
    v0 = pthread_mutex_init(&turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, 0);
    assert_msg(v0 == 0, "Mutex create error %d", v0);
    qword_254FD1D88 = 0;
    unk_254FD1D78 = 0u;
    unk_254FD1D68 = 0u;
    unk_254FD1D58 = 0u;
    unk_254FD1D48 = 0u;
    qword_254FD1D40 = 128;
    __cxa_atexit((void (*)(void *))turi::buffer_pool<std::vector<turi::flexible_type>>::~buffer_pool, &turi::sarray_format_reader_v2<turi::flexible_type>::m_buffer_pool, &dword_217E69000);
  }
}

uint64_t _GLOBAL__sub_I_gl_sarray_cpp()
{
  int v0;

  *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5) = 0x700000000000000;
  turi::FLEX_UNDEFINED = 0;
  __cxa_atexit((void (*)(void *))turi::flexible_type::~flexible_type, &turi::FLEX_UNDEFINED, &dword_217E69000);
  v0 = pthread_mutex_init(&turi::reader_shared_ptr_lock, 0);
  assert_msg(v0 == 0, "Mutex create error %d", v0);
  return __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::reader_shared_ptr_lock, &dword_217E69000);
}

uint64_t turi::gl_sframe::get_proxy@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void turi::aggregate::SUM(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string **v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__sum__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v8 = &v4;
  v9 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = v4 + 1;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v10, &v11, v4);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a2, &__p, (__int128 **)&v4);
  v8 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB07D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::ARGMAX(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t i;
  std::string *v7;
  std::string *v8;
  __int128 *v9;
  std::string __p;
  std::string **v11;
  char v12;
  std::string v13;
  std::string v14;
  __int128 v15;

  *((_QWORD *)&v15 + 1) = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__argmax__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v13 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v14 = *(std::string *)a2;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  v12 = 0;
  v7 = (std::string *)operator new(0x30uLL);
  v8 = v7;
  v9 = (__int128 *)&v7[2];
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, (__int128 *)&v13, &v15, v7);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a3, &__p, (__int128 **)&v7);
  v11 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v13 + i * 8 + 24));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB0994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::ARGMIN(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t i;
  std::string *v7;
  std::string *v8;
  __int128 *v9;
  std::string __p;
  std::string **v11;
  char v12;
  std::string v13;
  std::string v14;
  __int128 v15;

  *((_QWORD *)&v15 + 1) = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__argmin__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v13 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v14 = *(std::string *)a2;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  v12 = 0;
  v7 = (std::string *)operator new(0x30uLL);
  v8 = v7;
  v9 = (__int128 *)&v7[2];
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, (__int128 *)&v13, &v15, v7);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a3, &__p, (__int128 **)&v7);
  v11 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v13 + i * 8 + 24));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB0B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::MAX(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string **v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__max__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v8 = &v4;
  v9 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = v4 + 1;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v10, &v11, v4);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a2, &__p, (__int128 **)&v4);
  v8 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB0D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::MIN(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string **v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__min__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v8 = &v4;
  v9 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = v4 + 1;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v10, &v11, v4);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a2, &__p, (__int128 **)&v4);
  v8 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB0EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::COUNT(std::string *a1@<X8>)
{
  __int128 *v3[3];
  std::string __p;
  __int128 **v5;

  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__count__");
  memset(v3, 0, sizeof(v3));
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a1, &__p, v3);
  v5 = v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB0F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v19 - 24) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 24));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void turi::aggregate::AVG(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string **v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__avg__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v8 = &v4;
  v9 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = v4 + 1;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v10, &v11, v4);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a2, &__p, (__int128 **)&v4);
  v8 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB10B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::VAR(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string **v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__var__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v8 = &v4;
  v9 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = v4 + 1;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v10, &v11, v4);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a2, &__p, (__int128 **)&v4);
  v8 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB1228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::STD(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string **v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__stdv__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v8 = &v4;
  v9 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = v4 + 1;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v10, &v11, v4);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a2, &__p, (__int128 **)&v4);
  v8 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB13A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::STDV(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string **v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__stdv__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v8 = &v4;
  v9 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = v4 + 1;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v10, &v11, v4);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a2, &__p, (__int128 **)&v4);
  v8 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB1518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::SELECT_ONE(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string **v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__select_one__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v8 = &v4;
  v9 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = v4 + 1;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v10, &v11, v4);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a2, &__p, (__int128 **)&v4);
  v8 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB1690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::CONCAT(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string **v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__concat__list__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v8 = &v4;
  v9 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = v4 + 1;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v10, &v11, v4);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a2, &__p, (__int128 **)&v4);
  v8 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB1808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::CONCAT(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t i;
  std::string *v7;
  std::string *v8;
  __int128 *v9;
  std::string __p;
  std::string **v11;
  char v12;
  std::string v13;
  std::string v14;
  __int128 v15;

  *((_QWORD *)&v15 + 1) = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__concat__dict__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v13 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v14 = *(std::string *)a2;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  v12 = 0;
  v7 = (std::string *)operator new(0x30uLL);
  v8 = v7;
  v9 = (__int128 *)&v7[2];
  v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, (__int128 *)&v13, &v15, v7);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a3, &__p, (__int128 **)&v7);
  v11 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v13 + i * 8 + 24));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB19C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::COUNT_DISTINCT(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;
  std::string __p;
  std::string **v8;
  char v9;
  std::string v10;
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__count__distinct__");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v10 = *(std::string *)a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v8 = &v4;
  v9 = 0;
  v4 = (std::string *)operator new(0x18uLL);
  v5 = v4;
  v6 = v4 + 1;
  v5 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6, (__int128 *)&v10, &v11, v4);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a2, &__p, (__int128 **)&v4);
  v8 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB1B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::aggregate::QUANTILE(uint64_t a1@<X0>, std::string *a2@<X8>, double a3@<D0>)
{
  double *v6;
  uint64_t v7[3];

  v6 = (double *)operator new(8uLL);
  *v6 = a3;
  v7[1] = (uint64_t)(v6 + 1);
  v7[2] = (uint64_t)(v6 + 1);
  v7[0] = (uint64_t)v6;
  turi::aggregate::QUANTILE(a1, v7, a2);
  operator delete(v6);
}

void sub_217FB1C38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void turi::aggregate::QUANTILE(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  unint64_t v13;
  size_t v14;
  std::string *v15;
  std::string *v16;
  size_t v17;
  std::string *v18;
  std::string *v19;
  std::string v20;
  std::string __p;
  std::string *v22;
  char v23;
  std::string v24;
  __int128 v25;

  *(_QWORD *)&v25 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, "__builtin__quantile__[");
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    do
    {
      std::to_string(&v20, *(double *)(v6 + 8 * v7));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v10 = std::string::insert(&v20, 0, (const std::string::value_type *)p_p, size);
      v11 = v10->__r_.__value_.__r.__words[0];
      v24.__r_.__value_.__r.__words[0] = v10->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
      v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = v11;
      __p.__r_.__value_.__l.__size_ = v24.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v12;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      v6 = *a2;
      v13 = (a2[1] - *a2) >> 3;
      if (v7 < v13 - 1)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v14 = __p.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v20, v14 + 1);
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v20;
        else
          v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
        if (v14)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = &__p;
          else
            v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(v15, v16, v14);
        }
        *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 44;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v20;
        v6 = *a2;
        v13 = (a2[1] - *a2) >> 3;
      }
      ++v7;
    }
    while (v7 < v13);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v17 = __p.__r_.__value_.__l.__size_;
  v18 = &v20;
  std::string::basic_string[abi:ne180100]((uint64_t)&v20, v17 + 1);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &__p;
    else
      v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v18, v19, v17);
  }
  *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 93;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v20;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v24 = *(std::string *)a1;
  memset(&v20, 0, sizeof(v20));
  v22 = &v20;
  v23 = 0;
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v20.__r_.__value_.__l.__size_ = v20.__r_.__value_.__r.__words[0];
  v20.__r_.__value_.__r.__words[2] = v20.__r_.__value_.__r.__words[0] + 24;
  v20.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20.__r_.__value_.__r.__words[2], (__int128 *)&v24, &v25, (std::string *)v20.__r_.__value_.__l.__data_);
  turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(a3, &__p, (__int128 **)&v20);
  v22 = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB1F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *turi::aggregate::groupby_descriptor_type::groupby_descriptor_type(std::string *a1, std::string *a2, __int128 **a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  turi::get_builtin_group_aggregator(a2, a1[1].__r_.__value_.__r.__words);
  return a1;
}

void sub_217FB202C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

turi::gl_sframe *turi::gl_sframe::gl_sframe(turi::gl_sframe *this)
{
  *(_QWORD *)this = off_24D91E9C0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  turi::gl_sframe::instantiate_new(this);
  return this;
}

void sub_217FB2080(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::instantiate_new(turi::gl_sframe *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  _ZNSt3__115allocate_sharedB8ne180100IN4turi12unity_sframeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v5);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)this + 8, &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

turi::gl_sframe *turi::gl_sframe::gl_sframe(turi::gl_sframe *this, const turi::gl_sframe *a2)
{
  char *v4;
  uint64_t v5;
  void *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD v24[3];
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *lpsrc;
  std::__shared_weak_count *v28;
  __int128 v29;
  void **v30;

  *(_QWORD *)this = off_24D91E9C0;
  *((_QWORD *)this + 1) = 0;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  (*(void (**)(uint64_t *__return_ptr, const turi::gl_sframe *))(*(_QWORD *)a2 + 88))(&v25, a2);
  v5 = v25;
  (*(void (**)(uint64_t *__return_ptr, const turi::gl_sframe *))(*(_QWORD *)a2 + 88))(&v22, a2);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v22 + 128))(v24);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v5 + 184))(&lpsrc, v5, v24);
  if (lpsrc
  {
    *(_QWORD *)&v29 = v6;
    *((_QWORD *)&v29 + 1) = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v29 = 0uLL;
  }
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100]((uint64_t)v4, &v29);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v28;
  if (v28)
  {
    v13 = (unint64_t *)&v28->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v30 = (void **)v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return this;
}

void sub_217FB22FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 40) = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

_QWORD *turi::gl_sframe::gl_sframe(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  *a1 = off_24D91E9C0;
  a1[1] = 0;
  v3 = (uint64_t)(a1 + 1);
  a1[2] = 0;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 88))(&v8, a2);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v3, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;

  *a1 = off_24D91E9C0;
  a1[1] = 0;
  v3 = (uint64_t)(a1 + 1);
  a1[2] = 0;
  if (*(_QWORD *)a2
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v13 = v5;
    *((_QWORD *)&v13 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  else
  {
    v13 = 0uLL;
  }
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](v3, &v13);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_217FB23E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *turi::gl_sframe::gl_sframe(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  std::string __p;

  *a1 = (uint64_t)off_24D91E9C0;
  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  turi::gl_sframe::instantiate_new((turi::gl_sframe *)a1);
  v5 = *v4;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 40))(v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_217FB2498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::construct_from_csvs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v8;
  _OWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  __int128 *v37;
  __int128 *i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47[3];
  uint64_t v48[3];
  std::string v49;
  _QWORD v50[3];
  uint64_t v51;
  _QWORD **v52;
  uint64_t v53;
  __int128 *v54;
  __int128 *v55;
  uint64_t v56[3];
  uint64_t v57[3];
  std::string v58;
  const void **v59[3];
  uint64_t *v60[3];
  _QWORD v61[2];
  std::__shared_weak_count *v62;
  __int128 *v63[2];
  char v64;
  char v65;
  void *v66;
  char v67;
  _QWORD *v68[6];

  v68[4] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a4 + 16))
  {
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)v61);
    std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)v60, a3);
    std::string::basic_string[abi:ne180100]<0>(v63, "row_limit");
    v68[0] = v63;
    v8 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v60, (const void **)v63, (uint64_t)&std::piecewise_construct, (_OWORD **)v68);
    v9 = v8;
    switch(*((_BYTE *)v8 + 68))
    {
      case 2:
        v10 = (unint64_t *)*((_QWORD *)v8 + 7);
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *((_QWORD *)v8 + 7);
          if (!v13)
            goto LABEL_40;
          if (*(char *)(v13 + 31) < 0)
            operator delete(*(void **)(v13 + 8));
          v14 = (_QWORD *)v13;
          v15 = 0x1012C404EF22A49;
          goto LABEL_39;
        }
        break;
      case 3:
        v16 = (unint64_t *)*((_QWORD *)v8 + 7);
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          v19 = (_QWORD *)*((_QWORD *)v8 + 7);
          if (!v19)
            goto LABEL_40;
          v20 = (void *)v19[1];
          if (v20)
          {
            v19[2] = v20;
            operator delete(v20);
          }
          v14 = v19;
          v15 = 0x1080C409938AC02;
          goto LABEL_39;
        }
        break;
      case 4:
        v21 = (unint64_t *)*((_QWORD *)v8 + 7);
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          v24 = (_QWORD *)*((_QWORD *)v8 + 7);
          if (!v24)
            goto LABEL_40;
          v68[0] = v24 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
          goto LABEL_27;
        }
        break;
      case 5:
        v25 = (unint64_t *)*((_QWORD *)v8 + 7);
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v24 = (_QWORD *)*((_QWORD *)v8 + 7);
          if (!v24)
            goto LABEL_40;
          v68[0] = v24 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
LABEL_27:
          v14 = v24;
          v15 = 0x1020C405E66F15BLL;
          goto LABEL_39;
        }
        break;
      case 8:
        v28 = (unint64_t *)*((_QWORD *)v8 + 7);
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *((_QWORD *)v8 + 7);
          if (!v31)
            goto LABEL_40;
          boost::detail::shared_count::~shared_count((unsigned int **)(v31 + 16));
          v14 = (_QWORD *)v31;
          v32 = -235920773;
          goto LABEL_38;
        }
        break;
      case 9:
        v33 = (unint64_t *)*((_QWORD *)v8 + 7);
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          v36 = (_QWORD *)*((_QWORD *)v8 + 7);
          if (v36)
          {
            v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v36);
            v32 = 2071181815;
LABEL_38:
            v15 = v32 | 0x1030C4000000000;
LABEL_39:
            MEMORY[0x219A19A08](v14, v15);
          }
LABEL_40:
          *((_QWORD *)v9 + 7) = 0;
        }
        break;
      default:
        break;
    }
    *((_DWORD *)v9 + 16) = 0;
    *((_BYTE *)v9 + 68) = 0;
    *((_QWORD *)v9 + 7) = 100;
    if (v64 < 0)
      operator delete(v63[0]);
    std::string::basic_string[abi:ne180100]<0>(v63, "__all_columns__");
    v65 = 7;
    std::map<std::string,turi::flex_type_enum>::map[abi:ne180100]((uint64_t)v59, (const void **)v63, 1);
    if (v64 < 0)
      operator delete(v63[0]);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v58 = *(std::string *)a2;
    std::map<std::string,turi::flexible_type>::map[abi:ne180100](v57, (uint64_t)v60);
    std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](v56, v59);
    turi::gl_sframe::construct_from_csvs(v61, &v58, v57, v56);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v56, (char *)v56[1]);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v57, (_QWORD *)v57[1]);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    turi::gl_sframe::column_names((turi::gl_sframe *)v61);
    v37 = v54;
    for (i = v55; v37 != i; v37 = (__int128 *)((char *)v37 + 24))
    {
      turi::gl_sframe::operator[]((uint64_t)v61, (uint64_t)v37, (turi::gl_sarray *)v63);
      turi::gl_sarray::range_iterator((turi::gl_sarray *)v63, 0, 0xFFFFFFFFFFFFFFFFLL, v68);
      v63[0] = (__int128 *)off_24D91EA30;
      if (v67 < 0)
        operator delete(v66);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v63);
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v39 = turi::gl_sarray_range::begin((turi::gl_sarray_range *)v68);
      v41 = v40;
      v42 = turi::gl_sarray_range::end((turi::gl_sarray_range *)v68);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::gl_sarray_range::iterator,turi::gl_sarray_range::iterator,std::insert_iterator<std::vector<turi::flexible_type>>>(v39, v41, v42, &v51, v52, (uint64_t)v63);
      LOBYTE(v39) = turi::infer_type_of_list(&v51);
      v63[0] = v37;
      *((_BYTE *)std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a4, (const void **)v37, (uint64_t)&std::piecewise_construct, v63)+ 56) = v39;
      v63[0] = (__int128 *)&v51;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
      turi::gl_sarray_range::~gl_sarray_range(v68);
    }
    v63[0] = (__int128 *)&v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v59, (char *)v59[1]);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v60, v60[1]);
    v61[0] = off_24D91E9C0;
    v43 = v62;
    if (v62)
    {
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  v46 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v49 = *(std::string *)a2;
  std::map<std::string,turi::flexible_type>::map[abi:ne180100](v48, a3);
  std::map<std::string,turi::flex_type_enum>::map[abi:ne180100](v47, (const void ***)a4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string *, uint64_t *, uint64_t *))(*(_QWORD *)v46 + 48))(v50, v46, &v49, v48, v47);
  std::__tree<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<turi::unity_sarray_base>>>>::destroy((uint64_t)v50, (_QWORD *)v50[1]);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v47, (char *)v47[1]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v48, (_QWORD *)v48[1]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

void sub_217FB2A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45,char *a46,uint64_t a47,char a48,_QWORD *a49)
{
  uint64_t v49;

  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a45, a46);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a48, a49);
  *(_QWORD *)(v49 - 240) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v49 - 232);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::column_names(turi::gl_sframe *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 128))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_217FB2BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::operator[](uint64_t a1@<X0>, uint64_t a2@<X1>, turi::gl_sarray *a3@<X8>)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::gl_sarray_reference::gl_sarray_reference(a3, a1, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  turi::const_gl_sarray_reference::const_gl_sarray_reference(a3, a1, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_217FB2C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::dataframe_t::~dataframe_t(turi::dataframe_t *this)
{
  void **v2;

  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  v2 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t turi::gl_sframe::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD v23[3];
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *lpsrc;
  std::__shared_weak_count *v27;
  __int128 v28;
  void **v29;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 88))(&v24, a2);
  v4 = v24;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 88))(&v21, a2);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v21 + 128))(v23);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v4 + 184))(&lpsrc, v4, v23);
  if (lpsrc
  {
    *(_QWORD *)&v28 = v5;
    *((_QWORD *)&v28 + 1) = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
  }
  else
  {
    v28 = 0uLL;
  }
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 8, &v28);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v27;
  if (v27)
  {
    v12 = (unint64_t *)&v27->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v29 = (void **)v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v29);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v25;
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return a1;
}

{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v7;

  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 88))(&v7, a2);
  std::shared_ptr<turi::neural_net::float_array>::operator=[abi:ne180100](a1 + 8, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_217FB2EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 - 40) = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 40));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

turi::gl_sframe *turi::gl_sframe::gl_sframe(turi::gl_sframe *this, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 *v9;
  std::string *v10;
  __int128 v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string v23;
  uint64_t v24[3];
  __int128 v25;
  __int128 *v26;
  std::string *v27;
  unint64_t v28;
  __int128 *v29[2];
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32[2];
  std::string *v33;

  *(_QWORD *)this = off_24D91E9C0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v32[0] = 0;
  v32[1] = 0;
  v31 = (uint64_t *)v32;
  if (a3)
  {
    v4 = a2;
    v5 = &a2[4 * a3];
    do
    {
      v29[0] = v4;
      v6 = std::__tree<std::__value_type<std::string,turi::gl_sarray>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::gl_sarray>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::gl_sarray>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v31, (const void **)v4, (uint64_t)&std::piecewise_construct, v29);
      v7 = (uint64_t)v4 + 24;
      turi::gl_sarray::operator=((uint64_t)(v6 + 7), v7);
      v4 = (__int128 *)(v7 + 40);
    }
    while (v4 != v5);
  }
  turi::gl_sframe::instantiate_new(this);
  v29[0] = (__int128 *)v29;
  v29[1] = (__int128 *)v29;
  v30 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v8 = v31;
  if (v31 != (uint64_t *)v32)
  {
    do
    {
      v9 = (__int128 *)(v8 + 4);
      v10 = v27;
      if ((unint64_t)v27 >= v28)
      {
        v12 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v26, v9);
      }
      else
      {
        if (*((char *)v8 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v27, (const std::string::value_type *)v8[4], v8[5]);
        }
        else
        {
          v11 = *v9;
          v27->__r_.__value_.__r.__words[2] = v8[6];
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
        }
        v12 = (__int128 *)&v10[1];
      }
      v27 = (std::string *)v12;
      turi::gl_sarray::operator std::shared_ptr<turi::unity_sarray_base>((uint64_t)(v8 + 7), &v25);
      v13 = operator new(0x20uLL);
      v13[1] = v25;
      v14 = v29[0];
      *(__int128 **)v13 = v29[0];
      *((_QWORD *)v13 + 1) = v29;
      *((_QWORD *)v14 + 1) = v13;
      v29[0] = v13;
      ++v30;
      v15 = (uint64_t *)v8[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v8[2];
          v17 = *v16 == (_QWORD)v8;
          v8 = v16;
        }
        while (!v17);
      }
      v8 = v16;
    }
    while (v16 != (uint64_t *)v32);
  }
  (*(void (**)(__int128 *__return_ptr, turi::gl_sframe *))(*(_QWORD *)this + 88))(&v25, this);
  v18 = v25;
  std::list<std::shared_ptr<turi::unity_sarray_base>>::list(v24, (uint64_t)v29);
  memset(&v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, v26, (__int128 *)v27, 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3));
  (*(void (**)(uint64_t, uint64_t *, std::string *))(*(_QWORD *)v18 + 208))(v18, v24, &v23);
  v33 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear(v24);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)&v25 = &v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear((uint64_t *)v29);
  std::__tree<std::__value_type<std::string,turi::gl_sarray>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::gl_sarray>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::gl_sarray>>>::destroy((uint64_t)&v31, v32[0]);
  return this;
}

void sub_217FB31C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  uint64_t v18;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, void **);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  *(_QWORD *)(v6 - 56) = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 56));
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear((uint64_t *)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  va_copy((va_list)v12, va2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear((uint64_t *)va3);
  std::__tree<std::__value_type<std::string,turi::gl_sarray>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::gl_sarray>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::gl_sarray>>>::destroy(v6 - 80, *(_QWORD **)(v6 - 72));
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

_QWORD *turi::gl_sframe::gl_sframe(_QWORD *a1, uint64_t *a2)
{
  *a1 = off_24D91E9C0;
  a1[2] = 0;
  a1[1] = 0;
  std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](a1 + 1, a2);
  return a1;
}

turi::gl_sframe *turi::gl_sframe::gl_sframe(turi::gl_sframe *this, const turi::sframe *a2)
{
  uint64_t *v4;
  turi::unity_sframe *v5;

  *(_QWORD *)this = off_24D91E9C0;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (turi::unity_sframe *)operator new();
  turi::unity_sframe::unity_sframe(v5);
  std::shared_ptr<turi::unity_sframe>::shared_ptr[abi:ne180100]<turi::unity_sframe,void>(v4, (uint64_t)v5);
  turi::unity_sframe::construct_from_sframe((turi::unity_sframe *)*v4, a2);
  return this;
}

void sub_217FB33F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sframe::operator std::shared_ptr<turi::unity_sframe>(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

double turi::gl_sframe::operator std::shared_ptr<turi::unity_sframe_base>@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 88))(&v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void turi::gl_sframe::materialize_to_sframe(turi::gl_sframe *this@<X0>, turi::sframe *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  turi::unity_sframe *v9;
  std::__shared_weak_count *v10;
  turi::sframe *v11;
  std::__shared_weak_count *v12;

  (*(void (**)(turi::unity_sframe **__return_ptr))(*(_QWORD *)this + 88))(&v9);
  turi::unity_sframe::get_underlying_sframe(v9, &v11);
  turi::sframe::sframe(a2, v11);
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_217FB3530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::get_sframe_reader(turi::gl_sframe *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  turi::sframe_reader *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  turi::unity_sframe *v11;
  std::__shared_weak_count *v12;
  turi::sframe *v13;
  std::__shared_weak_count *v14;
  turi::sframe_reader *v15;

  (*(void (**)(turi::unity_sframe **__return_ptr))(*(_QWORD *)this + 88))(&v11);
  turi::unity_sframe::get_underlying_sframe(v11, &v13);
  turi::sframe::get_reader(v13, &v15);
  *a2 = v15;
  v3 = (_QWORD *)operator new();
  v4 = v15;
  *v3 = &unk_24D91EBA0;
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = v4;
  a2[1] = v3;
  v15 = 0;
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217FB3650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v4 = *(_QWORD *)(v2 - 24);
  *(_QWORD *)(v2 - 24) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::operator[](turi::gl_sframe *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t **v10;
  void *exception;
  void **v12;
  std::__shared_weak_count *v13;
  _QWORD v14[3];

  if ((a2 & 0x8000000000000000) != 0 || (**(uint64_t (***)(turi::gl_sframe *))a1)(a1) <= a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Index out of range");
  }
  std::vector<std::vector<turi::flexible_type>>::vector(v14, 1uLL);
  turi::gl_sframe::get_sframe_reader(a1, &v12);
  v6 = (void **)(*((uint64_t (**)(void **, unint64_t, unint64_t, _QWORD *))*v12 + 6))(v12, a2, a2 + 1, v14);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (uint64_t **)v14[0];
  if (v14[1] == v14[0])
    turi::gl_sframe::operator[](long long)const::$_0::operator()();
  v12 = v6;
  if (v6 != (void **)1)
    turi::gl_sframe::operator[](long long)const::$_1::operator()();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a3, *v10, v10[1], ((char *)v10[1] - (char *)*v10) >> 4);
  v12 = (void **)v14;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_217FB37E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::operator[](long long)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  file_logger *v5;
  void *__p;
  char v7;
  _QWORD v8[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sframe.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows.size() > 0", 15);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sframe.cpp", "operator()", 281, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  turi::gl_sframe::operator[](long long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FB3920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::operator[](long long)const::$_1::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sframe.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_read", 9);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sframe.cpp", "operator()", 282, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::gl_sframe::operator[](long long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FB3B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::operator[](uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  const void *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p;
  void *__dst;
  uint64_t v28;

  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  __dst = 0;
  v28 = 0;
  __p = 0;
  if (v5)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](&__p, v5);
    v7 = (char *)__dst;
    memmove(__dst, v6, 8 * v5);
    v8 = &v7[8 * v5];
    __dst = v8;
    v9 = (char *)__p;
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = (v8 - v9) >> 3;
  if (v10 == 2)
  {
    v12 = 1;
    v11 = 1;
  }
  else
  {
    if (v10 != 3)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(exception, "Invalid slice. Slice must be of the form {start, end} or {start, step, end}");
    }
    v11 = *((_QWORD *)v9 + 1);
    v12 = 2;
  }
  v13 = *(_QWORD *)v9;
  v14 = *(_QWORD *)&v9[8 * v12];
  if ((*(_QWORD *)v9 & 0x8000000000000000) != 0)
  {
    v13 += (**(uint64_t (***)(uint64_t))a1)(a1);
    if (v14 < 0)
LABEL_12:
      v14 += (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  else if (v14 < 0)
  {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(&v22, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 368))(&v24, v22, v13, v11, v14);
  turi::gl_sframe::gl_sframe(a3, (uint64_t)&v24);
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
}

{
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v17);
  v5 = v17;
  v6 = turi::gl_sarray::operator std::shared_ptr<turi::unity_sarray_base>(a2, &v16);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, double))(*(_QWORD *)v5 + 176))(&v19, v5, &v16, v6);
  turi::gl_sframe::gl_sframe(a3, (uint64_t)&v19);
  v7 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_217FB3D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;

  __cxa_free_exception(v15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_217FB3E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void turi::gl_sframe::select_columns(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 184))(&v13, v11, a2);
  turi::gl_sframe::gl_sframe(a3, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217FB3F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_217FB4068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::materialize_to_callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  turi::unity_sarray *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  char v19;
  void **v20;
  _OWORD v21[2];
  __int128 v22;
  void *__p[2];
  __int128 v24;
  __int128 v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a3 == -1)
    v4 = turi::SFRAME_DEFAULT_NUM_SEGMENTS;
  else
    v4 = a3;
  (*(void (**)(turi::unity_sarray **__return_ptr))(*(_QWORD *)a1 + 88))(&v15);
  turi::unity_sarray::get_planner_node((uint64_t)v15, &v17);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v26, a2);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v21, 0, sizeof(v21));
  BYTE11(v22) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *((_QWORD *)&v24 + 1) = 0;
  v25 = 0uLL;
  turi::query_eval::planner::materialize((uint64_t)&v19, &v17, (uint64_t)v26, v4, (uint64_t *)v21);
  v20 = (void **)&v24 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v20);
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  v5 = (_QWORD *)v22;
  if ((_OWORD *)v22 == (_OWORD *)((char *)v21 + 8))
  {
    v6 = 4;
    v5 = (_QWORD *)v21 + 1;
  }
  else
  {
    if (!(_QWORD)v22)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = v27;
  if (v27 == v26)
  {
    v8 = 4;
    v7 = v26;
    goto LABEL_15;
  }
  if (v27)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_217FB4258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  turi::query_eval::materialize_options::~materialize_options(&a15);
  v17 = *(_QWORD **)(v15 - 32);
  if (v17 == (_QWORD *)(v15 - 56))
  {
    v18 = 4;
    v17 = (_QWORD *)(v15 - 56);
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::range_iterator(turi::gl_sframe *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t ****a4@<X8>)
{
  unint64_t v4;
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *exception;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v4 = a3;
  if (a3 == -1)
  {
    (*(void (**)(uint64_t *__return_ptr, turi::gl_sframe *))(*(_QWORD *)this + 88))(&v26, this);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 64))(v26);
    v18 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  if (v4 < a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "start must be less than end");
    goto LABEL_29;
  }
  (*(void (**)(uint64_t *__return_ptr, turi::gl_sframe *))(*(_QWORD *)this + 88))(&v26, this);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 64))(v26) <= a2)
  {
    v8 = (v4 | a2) != 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, turi::gl_sframe *))(*(_QWORD *)this + 88))(&v24, this);
    v8 = v4 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 64))(v24);
    v9 = v25;
    if (v25)
    {
      v10 = (unint64_t *)&v25->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v27;
  if (v27)
  {
    v13 = (unint64_t *)&v27->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v8)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Index out of range");
LABEL_29:
  }
  turi::gl_sframe::get_sframe_reader(this, &v22);
  turi::gl_sframe_range::gl_sframe_range(a4, &v22, a2, v4);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_217FB4530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sframe::size(turi::gl_sframe *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217FB4600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL turi::gl_sframe::empty(turi::gl_sframe *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1 == 0;
}

void sub_217FB4698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sframe::is_materialized(turi::gl_sframe *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 304))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217FB472C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sframe::has_size(turi::gl_sframe *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 312))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217FB47C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::materialize(turi::gl_sframe *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 296))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_217FB484C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::save(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type size;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  int v15;
  int v16;
  std::string *v17;
  int v18;
  std::string::size_type v19;
  int data_low;
  int v21;
  int data;
  int v24;
  std::string *v26;
  int v28;
  int v29;
  std::string::size_type v31;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::string *v37;
  size_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  std::string *v45;
  std::string *v46;
  unint64_t *v47;
  _QWORD *exception;
  std::string __p;
  _QWORD **v50;
  _QWORD *v51[2];
  std::string v52;
  std::string v53;
  std::string v54;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v54 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v53 = *(std::string *)a3;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v53.__r_.__value_.__l.__size_)
      goto LABEL_29;
  }
  else
  {
    v5 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&v53.__r_.__value_.__s + 23))
      goto LABEL_30;
  }
  v6 = 0;
  v7 = &v54;
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v54.__r_.__value_.__r.__words[0];
  size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v54.__r_.__value_.__l.__size_;
  while (-(uint64_t)size != v6 && v6 != -4)
  {
    v9 = v7->__r_.__value_.__s.__data_[size - 1 + v6];
    v10 = aCsv[v6-- + 3];
    if (v9 != v10)
      goto LABEL_20;
  }
  if (v6 == -4)
    goto LABEL_27;
LABEL_20:
  v11 = 0;
  v12 = (uint64_t)v7 + size - 1;
  v13 = -(uint64_t)size;
  v14 = "binary";
  while (v13 != v11 && v11 != -7)
  {
    v15 = *(unsigned __int8 *)(v12 + v11);
    v16 = aCsvGz[v11-- + 6];
    if (v15 != v16)
      goto LABEL_28;
  }
  if (v11 != -7)
  {
    v14 = "binary";
    goto LABEL_28;
  }
LABEL_27:
  v14 = "csv";
LABEL_28:
  MEMORY[0x219A19390](&v53, v14);
LABEL_29:
  v5 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
  {
    v19 = v53.__r_.__value_.__l.__size_;
    if (v53.__r_.__value_.__l.__size_ != 3)
    {
LABEL_42:
      if (v19 != 6)
        goto LABEL_113;
      v17 = (std::string *)v53.__r_.__value_.__r.__words[0];
      goto LABEL_44;
    }
    v18 = 1;
    v17 = (std::string *)v53.__r_.__value_.__r.__words[0];
LABEL_36:
    data_low = LOWORD(v17->__r_.__value_.__l.__data_);
    v21 = v17->__r_.__value_.__s.__data_[2];
    if (data_low == 29539 && v21 == 118)
    {
      v36 = 0;
      v37 = &v54;
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v38 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v38 = v54.__r_.__value_.__l.__size_;
        v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      while (v38 + v36 && v36 != -4)
      {
        v39 = v37->__r_.__value_.__s.__data_[v38 - 1 + v36];
        v40 = aCsv[v36-- + 3];
        if (v39 != v40)
          goto LABEL_84;
      }
      if (v36 == -4)
        goto LABEL_49;
LABEL_84:
      v41 = 0;
      v42 = (uint64_t)v37 + v38 - 1;
      while (v38 + v41 && v41 != -7)
      {
        v43 = *(unsigned __int8 *)(v42 + v41);
        v44 = aCsvGz[v41-- + 6];
        if (v43 != v44)
          goto LABEL_90;
      }
      if (v41 == -7)
        goto LABEL_49;
LABEL_90:
      v45 = &v52;
      std::string::basic_string[abi:ne180100]((uint64_t)&v52, v38 + 4);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v45 = (std::string *)v52.__r_.__value_.__r.__words[0];
      if (v38)
      {
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v54;
        else
          v46 = (std::string *)v54.__r_.__value_.__r.__words[0];
        memmove(v45, v46, v38);
      }
      strcpy((char *)v45 + v38, ".csv");
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      v54 = v52;
      v5 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      goto LABEL_49;
    }
    if (!v18)
      goto LABEL_113;
    v19 = v53.__r_.__value_.__l.__size_;
    goto LABEL_42;
  }
LABEL_30:
  v17 = &v53;
  if (v5 == 3)
  {
    v18 = 0;
    goto LABEL_36;
  }
  if (v5 != 6)
    goto LABEL_113;
LABEL_44:
  data = (int)v17->__r_.__value_.__l.__data_;
  v24 = WORD2(v17->__r_.__value_.__r.__words[0]);
  if (data != 1634625890 || v24 != 31090)
  {
LABEL_113:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Invalid format. Supported formats are 'csv' and 'binary'");
  }
LABEL_49:
  if ((v5 & 0x80) == 0)
  {
    if (v5 != 3)
    {
      if (v5 != 6)
        goto LABEL_108;
      v26 = &v53;
      goto LABEL_60;
    }
    if (LOWORD(v53.__r_.__value_.__l.__data_) != 29539 || v53.__r_.__value_.__s.__data_[2] != 118)
      goto LABEL_108;
LABEL_72:
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(&v52, a1);
    v51[0] = 0;
    v51[1] = 0;
    v50 = v51;
    (*(void (**)(std::string::size_type, std::string *, _QWORD ***))(*(_QWORD *)v52.__r_.__value_.__l.__data_
                                                                              + 256))(v52.__r_.__value_.__r.__words[0], &v54, &v50);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v50, v51[0]);
    v33 = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (!v52.__r_.__value_.__l.__size_)
      goto LABEL_108;
    v34 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    goto LABEL_106;
  }
  if (v53.__r_.__value_.__l.__size_ == 3
    && *(_WORD *)v53.__r_.__value_.__l.__data_ == 29539
    && *(_BYTE *)(v53.__r_.__value_.__r.__words[0] + 2) == 118)
  {
    goto LABEL_72;
  }
  if (v53.__r_.__value_.__l.__size_ != 6)
    goto LABEL_108;
  v26 = (std::string *)v53.__r_.__value_.__r.__words[0];
LABEL_60:
  v28 = (int)v26->__r_.__value_.__l.__data_;
  v29 = WORD2(v26->__r_.__value_.__r.__words[0]);
  if (v28 == 1634625890 && v29 == 31090)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(&v52, a1);
    v31 = v52.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
    else
      __p = v54;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v31 + 96))(v31, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v33 = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v47 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v35 = __ldaxr(v47);
      while (__stlxr(v35 - 1, v47));
LABEL_106:
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
LABEL_108:
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
}

void sub_217FB4D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(a1);
}

void turi::gl_sframe::column_types(turi::gl_sframe *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_217FB4E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sframe::num_columns(turi::gl_sframe *this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_217FB4F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::head(turi::gl_sframe *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 144))(&v13, v11, a2);
  turi::gl_sframe::gl_sframe(a3, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217FB4FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::tail(turi::gl_sframe *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 152))(&v13, v11, a2);
  turi::gl_sframe::gl_sframe(a3, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217FB50D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::apply(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  turi::random *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v18);
  v7 = v18;
  v8 = (turi::random *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::ml_model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v21, a2);
  v9 = turi::random::pure_random_seed(v8);
  turi::unity_sframe::transform_lambda(v7, (uint64_t)v21, a3, v9, &v20);
  turi::gl_sarray::gl_sarray(a4, &v20);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v22;
  if (v22 == v21)
  {
    v14 = 4;
    v13 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_11;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_11:
  v15 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_217FB5234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::sample(turi::gl_sframe *this@<X0>, double a2@<D0>, uint64_t a3@<X1>, uint64_t a4@<X2>, _QWORD *a5@<X8>)
{
  float v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v16);
  v9 = a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v16 + 264))(&v18, v16, a3, a4, v9);
  turi::gl_sframe::gl_sframe(a5, (uint64_t)&v18);
  v10 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_217FB5384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::random_split(turi::gl_sframe *this@<X0>, double a2@<D0>, turi::gl_sframe *a3@<X8>)
{
  uint64_t v6;

  v6 = turi::random::pure_random_seed(this);
  turi::gl_sframe::random_split(this, a2, v6, 0, a3);
}

void turi::gl_sframe::random_split(turi::gl_sframe *this@<X0>, double a2@<D0>, uint64_t a3@<X1>, uint64_t a4@<X2>, turi::gl_sframe *a5@<X8>)
{
  float v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t (**v38)(turi::gl_sframe *__hidden);
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t (***v41)(turi::gl_sframe *__hidden);
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)(turi::gl_sframe *__hidden);

  (*(void (**)(uint64_t (***__return_ptr)(turi::gl_sframe *__hidden)))(*(_QWORD *)this + 88))(&v38);
  v9 = a2;
  (*((void (**)(uint64_t *__return_ptr, uint64_t (**)(turi::gl_sframe *__hidden), uint64_t, uint64_t, float))*v38
   + 34))(&v42, v38, a3, a4, v9);
  v10 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::pair<turi::gl_sframe,turi::gl_sframe>::pair[abi:ne180100]<true,0>(a5);
  v38 = v44;
  if (v44 != (uint64_t (**)(turi::gl_sframe *__hidden))2)
  {
    v41 = &v38;
    turi::gl_sframe::random_split(double,unsigned long,BOOL)const::$_0::operator()();
  }
  v13 = v43;
  v14 = *(std::__shared_weak_count **)(v43 + 24);
  v36 = *(_QWORD *)(v43 + 16);
  v37 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  turi::gl_sframe::gl_sframe(&v38, (uint64_t)&v36);
  turi::gl_sframe::operator=((uint64_t)a5, (uint64_t)&v38);
  v38 = off_24D91E9C0;
  v17 = v40;
  if (v40)
  {
    v18 = (unint64_t *)&v40->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v37;
  if (v37)
  {
    v21 = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *(_QWORD *)(v13 + 8);
  v25 = *(_QWORD *)(v23 + 16);
  v24 = *(std::__shared_weak_count **)(v23 + 24);
  v34 = v25;
  v35 = v24;
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  turi::gl_sframe::gl_sframe(&v38, (uint64_t)&v34);
  turi::gl_sframe::operator=((uint64_t)a5 + 24, (uint64_t)&v38);
  v38 = off_24D91E9C0;
  v28 = v40;
  if (v40)
  {
    v29 = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v35;
  if (v35)
  {
    v32 = (unint64_t *)&v35->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear(&v42);
}

void sub_217FB5628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v3 + 8);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<turi::gl_sframe,turi::gl_sframe>::~pair(v2);
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::random_split(double,unsigned long,BOOL)const::$_0::operator()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  file_logger *v12;
  _QWORD *v13;
  void *__p;
  char v15;
  _QWORD v16[33];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sframe.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"list.size()", 11);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/sframe/gl_sframe.cpp", "operator()", 475, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0)
      operator delete(__p);
  }
  __print_back_trace();
  v13 = v16;
  turi::gl_sframe::random_split(double,unsigned long,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_217FB5820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0)
    operator delete(__p);
  a17 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&a17 + *(_QWORD *)(a17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  a18 = MEMORY[0x24BEDB848] + 16;
  if (a31 < 0)
    operator delete(a26);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x219A198F4](&a34);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::topk(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[8];
  char v14;
  _BYTE v15[40];
  _QWORD v16[2];
  std::__shared_weak_count *v17;

  turi::gl_sframe::operator[](a1, a2, (turi::gl_sarray *)v13);
  turi::gl_sarray::topk_index((turi::gl_sarray *)v13, a3, a4, (uint64_t)v15);
  turi::gl_sframe::operator[](a1, (uint64_t)v15, v16);
  turi::gl_sframe::sort((uint64_t)v16, a2, a4, a5);
  v16[0] = off_24D91E9C0;
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v15);
  v13[0] = off_24D91EA58;
  if (v14 < 0)
    operator delete((void *)v13[6]);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v13);
}

void sub_217FB59A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  *(_QWORD *)(v3 - 72) = off_24D91E9C0;
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 + 8);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va1);
  turi::const_gl_sarray_reference::~const_gl_sarray_reference((void **)va);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::sort(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p;
  void *v16;
  _DWORD *v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string v25;
  __int128 v26;

  *(_QWORD *)&v26 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v21);
  v7 = v21;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v25 = *(std::string *)a2;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v18 = (std::string *)operator new(0x18uLL);
  v19 = v18;
  v20 = v18 + 1;
  v19 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v20, (__int128 *)&v25, &v26, v18);
  v8 = operator new(4uLL);
  __p = v8;
  *v8 = a3;
  v16 = v8 + 1;
  v17 = v8 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string **, void **))(*(_QWORD *)v7 + 344))(&v23, v7, &v18, &__p);
  turi::gl_sframe::gl_sframe(a4, (uint64_t)&v23);
  v9 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  __p = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v12 = v22;
  if (v22)
  {
    v13 = (unint64_t *)&v22->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_217FB5BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_217FB5C10()
{
  JUMPOUT(0x217FB5C08);
}

uint64_t turi::gl_sframe::column_index(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v8);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 136))(v8, a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_217FB5CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::gl_sframe::column_name(turi::gl_sframe *this, unint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  turi::unity_sframe *v8;
  std::__shared_weak_count *v9;

  (*(void (**)(turi::unity_sframe **__return_ptr))(*(_QWORD *)this + 88))(&v8);
  v3 = turi::unity_sframe::column_name(v8, a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_217FB5D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL turi::gl_sframe::contains_column(uint64_t a1, unsigned __int8 **a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  turi::unity_sframe *v8;
  std::__shared_weak_count *v9;

  (*(void (**)(turi::unity_sframe **__return_ptr))(*(_QWORD *)a1 + 88))(&v8);
  v3 = turi::unity_sframe::contains_column(v8, a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_217FB5DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::select_column(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 192))(&v13, v11, a2);
  turi::gl_sarray::gl_sarray(a3, &v13);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_217FB5EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::add_column(uint64_t a1, turi::gl_sarray *a2, uint64_t a3)
{
  uint64_t v6;
  const turi::flexible_type *v7;
  double v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _BYTE v15[40];
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v17);
  v6 = v17;
  v7 = (const turi::flexible_type *)(**(uint64_t (***)(uint64_t))a1)(a1);
  turi::gl_sarray::from_const(a2, v7, (turi::gl_sarray *)v15);
  v8 = turi::gl_sarray::operator std::shared_ptr<turi::unity_sarray_base>((uint64_t)v15, &v16);
  (*(void (**)(uint64_t, __int128 *, uint64_t, double))(*(_QWORD *)v6 + 200))(v6, &v16, a3, v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v15);
  v12 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_217FB5FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::add_column(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(&v14);
  v5 = v14;
  v6 = turi::gl_sarray::operator std::shared_ptr<turi::unity_sarray_base>(a2, &v13);
  (*(void (**)(uint64_t, __int128 *, uint64_t, double))(*(_QWORD *)v5 + 200))(v5, &v13, a3, v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_217FB60DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::replace_add_column(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  _QWORD *v9;
  std::string __p;
  _BYTE v11[8];
  char *v12;
  const void **v13[3];
  std::string v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    (*(void (**)(const void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(v13, a1);
    std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v11, v13[0], v13[1]);
    v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v11, a3);
    v7 = *(_QWORD *)a1;
    if (v6)
    {
      if ((*(uint64_t (**)(uint64_t))(v7 + 16))(a1) == 1)
      {
        turi::gl_sframe::operator[](a1, (uint64_t)a3, (turi::gl_sarray *)&v14);
        (*(void (**)(uint64_t, const void **))(*(_QWORD *)a1 + 64))(a1, a3);
        (*(void (**)(uint64_t, uint64_t, const void **))(*(_QWORD *)a1 + 48))(a1, a2, a3);
        v14.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
        if (v18 < 0)
          operator delete(v17);
        turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v14);
      }
      else
      {
        std::operator+<char>();
        for (;
              std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v11, (const void **)&__p.__r_.__value_.__l.__data_);
              __p = v14)
        {
          std::operator+<char>();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a1 + 48))(a1, a2, &__p);
        (*(void (**)(uint64_t, std::string *, const void **))(*(_QWORD *)a1 + 72))(a1, &__p, a3);
        (*(void (**)(uint64_t, const void **))(*(_QWORD *)a1 + 64))(a1, a3);
        std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v14, (__int128 *)&__p, (__int128 *)a3);
        std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v8, (const void **)&v14.__r_.__value_.__l.__data_, 1);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v8);
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v8, v9);
        if (v16 < 0)
          operator delete(v15);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, const void **))(v7 + 48))(a1, a2, a3);
    }
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v11, v12);
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, const void **))(*(_QWORD *)a1 + 48))(a1, a2, a3);
  }
}

void sub_217FB63C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,char *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  std::pair<std::string,std::string>::~pair((uint64_t)&a26);
  if (a18 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a20, a21);
  a26 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::add_columns(turi::gl_sframe *this, const turi::gl_sframe *a2)
{
  void **p_data;
  void **v5;
  std::string *v6;
  __int128 v7;
  __int128 *v8;
  _OWORD *v9;
  uint64_t v10;
  void **v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string v15;
  uint64_t v16[3];
  __int128 **v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  std::string *v20;
  std::string *v21;
  __int128 *v22;
  std::string *v23;
  unint64_t v24;
  uint64_t v25[2];
  uint64_t v26;

  v25[0] = (uint64_t)v25;
  v25[1] = (uint64_t)v25;
  v26 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  (*(void (**)(std::string **__return_ptr, const turi::gl_sframe *))(*(_QWORD *)a2 + 24))(&v20, a2);
  p_data = (void **)&v20->__r_.__value_.__l.__data_;
  v5 = (void **)&v21->__r_.__value_.__l.__data_;
  if (v20 != v21)
  {
    do
    {
      v6 = v23;
      if ((unint64_t)v23 >= v24)
      {
        v8 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v22, (__int128 *)p_data);
      }
      else
      {
        if (*((char *)p_data + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)*p_data, (std::string::size_type)p_data[1]);
        }
        else
        {
          v7 = *(_OWORD *)p_data;
          v23->__r_.__value_.__r.__words[2] = (std::string::size_type)p_data[2];
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
        }
        v8 = (__int128 *)&v6[1];
      }
      v23 = (std::string *)v8;
      turi::gl_sframe::select_column((uint64_t)a2, (uint64_t)p_data, (uint64_t)&v17);
      turi::gl_sarray::operator std::shared_ptr<turi::unity_sarray_base>((uint64_t)&v17, &v19);
      v9 = operator new(0x20uLL);
      v9[1] = v19;
      v19 = 0uLL;
      v10 = v25[0];
      *(_QWORD *)v9 = v25[0];
      *((_QWORD *)v9 + 1) = v25;
      *(_QWORD *)(v10 + 8) = v9;
      v25[0] = (uint64_t)v9;
      ++v26;
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v17);
      p_data += 3;
    }
    while (p_data != v5);
  }
  v17 = (__int128 **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  (*(void (**)(__int128 ***__return_ptr, turi::gl_sframe *))(*(_QWORD *)this + 88))(&v17, this);
  v11 = (void **)v17;
  std::list<std::shared_ptr<turi::unity_sarray_base>>::list(v16, (uint64_t)v25);
  memset(&v15, 0, sizeof(v15));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v22, (__int128 *)v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
  (*((void (**)(void **, uint64_t *, std::string *))*v11 + 26))(v11, v16, &v15);
  v20 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear(v16);
  v12 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear(v25);
}

void sub_217FB66A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, void **);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear((uint64_t *)va);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  v11 = (void **)(v5 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::__list_imp<std::shared_ptr<turi::unity_sarray_base>>::clear((uint64_t *)(v5 - 88));
  _Unwind_Resume(a1);
}

void turi::gl_sframe::remove_column(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *exception;
  void (***v10)(void **, unint64_t);
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v12);
  v4 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v12, v13, a2);
  if (v4 == v13)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "No such column name");
  }
  v5 = v4;
  (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))((void ***)&v10, a1);
  (*v10)[28]((void **)v10, 0xAAAAAAAAAAAAAAABLL * ((v5 - v12) >> 3));
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v10 = (void (***)(void **, unint64_t))&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_217FB685C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::swap_columns(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *exception;
  _QWORD *v14;
  void (***v15)(void **, unint64_t, unint64_t);
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v17);
  v6 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v17, v18, a2);
  if (v6 == v18)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "No such column name");
  }
  v7 = v6;
  v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v17, v18, a3);
  if (v8 == v18)
  {
    v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "No such column name");
  }
  v9 = v8;
  (*(void (**)(void (****__return_ptr)(void **, unint64_t, unint64_t), uint64_t))(*(_QWORD *)a1 + 88))(&v15, a1);
  (*v15)[29]((void **)v15, 0xAAAAAAAAAAAAAAABLL * ((v7 - v17) >> 3), 0xAAAAAAAAAAAAAAABLL * ((v9 - v17) >> 3));
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v15 = (void (***)(void **, unint64_t, unint64_t))&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_217FB6A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::rename(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 **v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 **v15;
  BOOL v16;
  _QWORD *exception;
  std::string __p;
  void **v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v21);
  v6 = (unsigned __int8 **)*a2;
  v4 = (unsigned __int8 **)(a2 + 1);
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      v7 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v21, v22, v5 + 4);
      if (v7 == v22)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(exception, "No such column name");
      }
      v8 = v7;
      (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(&v19, a1);
      v9 = v19;
      v10 = v21;
      if (*((char *)v5 + 79) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v5[7], (std::string::size_type)v5[8]);
      else
        __p = *(std::string *)(v5 + 7);
      (*((void (**)(void **, unint64_t, std::string *))*v9 + 27))(v9, 0xAAAAAAAAAAAAAAABLL * ((v8 - v10) >> 3), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v11 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = v5[1];
      if (v14)
      {
        do
        {
          v15 = (unsigned __int8 **)v14;
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (unsigned __int8 **)v5[2];
          v16 = *v15 == (unsigned __int8 *)v5;
          v5 = v15;
        }
        while (!v16);
      }
      v5 = v15;
    }
    while (v15 != v4);
  }
  v19 = (void **)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
}

void sub_217FB6C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, char a17)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  a15 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::append(turi::gl_sframe *this@<X0>, const turi::gl_sframe *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *exception;
  _QWORD v21[3];
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  __int128 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _OWORD v29[2];

  v6 = (*(uint64_t (**)(turi::gl_sframe *))(*(_QWORD *)this + 16))(this);
  if (v6 != (*(uint64_t (**)(const turi::gl_sframe *))(*(_QWORD *)a2 + 16))(a2))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Two SFrames have to have the same number of columns");
  }
  (*(void (**)(uint64_t *__return_ptr, turi::gl_sframe *))(*(_QWORD *)this + 88))(&v25, this);
  v7 = v25;
  (*(void (**)(_QWORD *__return_ptr, turi::gl_sframe *))(*(_QWORD *)this + 24))(v21, this);
  turi::gl_sframe::select_columns((uint64_t)a2, (uint64_t)v21, v22);
  (*(void (**)(_OWORD *__return_ptr, _QWORD *))(v22[0] + 88))(v29, v22);
  v24 = v29[0];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v7 + 288))(&v27, v7, &v24);
  turi::gl_sframe::gl_sframe(a3, (uint64_t)&v27);
  v8 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v22[0] = off_24D91E9C0;
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)&v29[0] = v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
  v17 = v26;
  if (v26)
  {
    v18 = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_217FB6E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::groupby(uint64_t a1@<X0>, const void ***a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  BOOL v8;
  BOOL v9;
  int v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  BOOL v19;
  int v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  __int128 *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *size;
  unint64_t *v41;
  unint64_t v42;
  __int128 v45;
  std::string v46[2];
  void *__p;
  char v48;
  void *v49[2];
  char v50;
  __int128 v51;
  std::string::size_type *v52[3];
  __int128 *v53;
  std::string *v54;
  unint64_t v55;
  __int128 **v56;
  std::string *v57;
  unint64_t v58;

  v56 = 0;
  v57 = 0;
  v58 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  memset(v52, 0, sizeof(v52));
  v5 = a3 + 1;
  v6 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    do
    {
      v51 = 0uLL;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v6[10] + 64))(v49);
      v7 = v6 + 7;
      if (v50 < 0)
      {
        if (v49[1] != (void *)3 || (*(_WORD *)v49[0] == 30035 ? (v9 = *((_BYTE *)v49[0] + 2) == 109) : (v9 = 0), !v9))
        {
          operator delete(v49[0]);
          goto LABEL_30;
        }
      }
      else
      {
        if (v50 != 3)
          goto LABEL_30;
        v8 = LOWORD(v49[0]) == 30035 && BYTE2(v49[0]) == 109;
        if (!v8)
          goto LABEL_30;
      }
      turi::gl_sframe::operator[](a1, *v7, (turi::gl_sarray *)v46);
      v10 = turi::gl_sarray::dtype((turi::gl_sarray *)v46);
      v46[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA58;
      if (v48 < 0)
        operator delete(__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v46);
      if (v50 < 0)
        operator delete(v49[0]);
      if (v10 == 3)
      {
        std::string::basic_string[abi:ne180100]<0>(v46, "__builtin__vector__sum__");
        turi::get_builtin_group_aggregator(v46, v49);
        v11 = *(_OWORD *)v49;
        v49[0] = 0;
        v49[1] = 0;
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
        v51 = v11;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = (std::__shared_weak_count *)v49[1];
        if (v49[1])
        {
          v16 = (unint64_t *)((char *)v49[1] + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          goto LABEL_57;
        }
LABEL_59:
        if (SHIBYTE(v46[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46[0].__r_.__value_.__l.__data_);
        goto LABEL_62;
      }
LABEL_30:
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v6[10] + 64))(v49);
      if (v50 < 0)
      {
        if (v49[1] != (void *)3
          || (*(_WORD *)v49[0] == 30273 ? (v19 = *((_BYTE *)v49[0] + 2) == 103) : (v19 = 0), !v19))
        {
          operator delete(v49[0]);
          goto LABEL_61;
        }
      }
      else
      {
        if (v50 != 3)
          goto LABEL_61;
        if (LOWORD(v49[0]) != 30273 || BYTE2(v49[0]) != 103)
          goto LABEL_61;
      }
      turi::gl_sframe::operator[](a1, *v7, (turi::gl_sarray *)v46);
      v20 = turi::gl_sarray::dtype((turi::gl_sarray *)v46);
      v46[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA58;
      if (v48 < 0)
        operator delete(__p);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)v46);
      if (v50 < 0)
        operator delete(v49[0]);
      if (v20 == 3)
      {
        std::string::basic_string[abi:ne180100]<0>(v46, "__builtin__vector__avg__");
        turi::get_builtin_group_aggregator(v46, v49);
        v21 = *(_OWORD *)v49;
        v49[0] = 0;
        v49[1] = 0;
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
        v51 = v21;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v15 = (std::__shared_weak_count *)v49[1];
        if (v49[1])
        {
          v25 = (unint64_t *)((char *)v49[1] + 8);
          do
            v17 = __ldaxr(v25);
          while (__stlxr(v17 - 1, v25));
LABEL_57:
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        goto LABEL_59;
      }
LABEL_61:
      std::shared_ptr<turi::neural_net::mps_command_queue>::operator=[abi:ne180100](&v51, v6 + 10);
LABEL_62:
      v26 = (__int128 *)(v6 + 4);
      v27 = v54;
      if ((unint64_t)v54 >= v55)
      {
        v29 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v53, v26);
      }
      else
      {
        if (*((char *)v6 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(v54, (const std::string::value_type *)v6[4], v6[5]);
        }
        else
        {
          v28 = *v26;
          v54->__r_.__value_.__r.__words[2] = v6[6];
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        }
        v29 = v27 + 1;
      }
      v54 = v29;
      v30 = v57;
      if ((unint64_t)v57 >= v58)
      {
        v31 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v56, (__int128 **)v7);
      }
      else
      {
        v57->__r_.__value_.__r.__words[0] = 0;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, (__int128 *)v6[7], (__int128 *)v6[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[8] - v6[7]) >> 3));
        v31 = (uint64_t)&v30[1];
      }
      v57 = (std::string *)v31;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100]((char **)v52, &v51);
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (_QWORD *)v6[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v6[2];
          v8 = *v36 == (_QWORD)v6;
          v6 = v36;
        }
        while (!v8);
      }
      v6 = v36;
    }
    while (v36 != v5);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(v46, a1);
  turi::unity_sframe::groupby_aggregate(v46[0].__r_.__value_.__l.__data_, a2, &v56, &v53, v52, &v45);
  turi::gl_sframe::gl_sframe(a4, (uint64_t)&v45);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  size = (std::__shared_weak_count *)v46[0].__r_.__value_.__l.__size_;
  if (v46[0].__r_.__value_.__l.__size_)
  {
    v41 = (unint64_t *)(v46[0].__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v46[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
  v46[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
  v46[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
}

void sub_217FB7408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  __p = &a35;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (char *)(v35 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (char *)(v35 - 112);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::join(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string **a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  std::string *v9;
  std::string *v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string __p;
  __int128 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  _QWORD *v29[2];
  __int128 v30;

  v29[0] = 0;
  v29[1] = 0;
  v28 = (uint64_t *)v29;
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    do
    {
      *(_QWORD *)&v30 = v9;
      v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v28, (const void **)&v9->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v30);
      std::string::operator=((std::string *)(v11 + 7), v9++);
    }
    while (v9 != v10);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(&v24, a1);
  v12 = v24;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 88))(&v30, a2);
  v23 = v30;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, std::string *, uint64_t **))(*(_QWORD *)v12 + 328))(&v26, v12, &v23, &__p, &v28);
  turi::gl_sframe::gl_sframe(a5, (uint64_t)&v26);
  v13 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v28, v29[0]);
}

void sub_217FB76C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<std::vector<double>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a23, a24);
  _Unwind_Resume(a1);
}

void turi::gl_sframe::filter_by(uint64_t a1@<X0>, turi::gl_sarray *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, _QWORD *a5@<X8>)
{
  int v10;
  int v11;
  std::string *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::string::size_type v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  std::string::size_type v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::string::size_type v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::string::size_type v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *exception;
  int v50;
  const std::string::value_type *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  _QWORD *v57;
  int v58;
  const std::string::value_type *v59;
  std::string::size_type v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  void *__p;
  char v66;
  std::__shared_weak_count *v67;
  std::string v68;
  _QWORD v69[2];
  std::__shared_weak_count *v70;
  _BYTE v71[8];
  char *v72;
  const void **v73[3];
  std::string v74;
  __int128 v75;
  std::string v76;
  uint64_t v77;
  void *v78;
  char v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(const void ***__return_ptr))(*(_QWORD *)a1 + 24))(v73);
  std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v71, v73[0], v73[1]);
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v71, (const void **)a3))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v74, "Column ");
    v50 = *(char *)(a3 + 23);
    if (v50 >= 0)
      v51 = (const std::string::value_type *)a3;
    else
      v51 = *(const std::string::value_type **)a3;
    if (v50 >= 0)
      v52 = *(unsigned __int8 *)(a3 + 23);
    else
      v52 = *(_QWORD *)(a3 + 8);
    v53 = std::string::append(&v74, v51, v52);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v55 = std::string::append(&v76, " not in SFrame");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    exception[2] = *((_QWORD *)&v55->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
  }
  turi::gl_sframe::operator[](a1, a3, (turi::gl_sarray *)&v76);
  v10 = turi::gl_sarray::dtype((turi::gl_sarray *)&v76);
  v11 = turi::gl_sarray::dtype(a2);
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA58;
  if (v79 < 0)
    operator delete(v78);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v76);
  if (v10 != v11)
  {
    v57 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v74, "Type of given values does not match type of column ");
    v58 = *(char *)(a3 + 23);
    if (v58 >= 0)
      v59 = (const std::string::value_type *)a3;
    else
      v59 = *(const std::string::value_type **)a3;
    if (v58 >= 0)
      v60 = *(unsigned __int8 *)(a3 + 23);
    else
      v60 = *(_QWORD *)(a3 + 8);
    v61 = std::string::append(&v74, v59, v60);
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    v63 = std::string::append(&v76, " in SFrame");
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v57[2] = *((_QWORD *)&v63->__r_.__value_.__l + 2);
    *(_OWORD *)v57 = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
  }
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<true,0>(v12, (__int128 *)a3, a2);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v69, (__int128 *)&v76, 1);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v77);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  turi::gl_sframe::unique((turi::gl_sframe *)v69, &v76);
  turi::gl_sframe::operator=((uint64_t)v69, (uint64_t)&v76);
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91E9C0;
  v13 = (std::__shared_weak_count *)v76.__r_.__value_.__r.__words[2];
  if (!v76.__r_.__value_.__r.__words[2])
    goto LABEL_11;
  v14 = (unint64_t *)(v76.__r_.__value_.__r.__words[2] + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if ((a4 & 1) != 0)
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    if ((a4 & 1) != 0)
    {
LABEL_12:
      std::string::basic_string[abi:ne180100]<0>(&v68, "id");
      while (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v71, (const void **)&v68.__r_.__value_.__l.__data_))std::string::append(&v68, "1");
      v74.__r_.__value_.__s.__data_[12] = 0;
      LODWORD(v74.__r_.__value_.__r.__words[1]) = 0;
      v74.__r_.__value_.__r.__words[0] = 1;
      turi::gl_sframe::operator[]((uint64_t)v69, (uint64_t)&v68, (turi::gl_sarray *)&v76);
      turi::gl_sarray_reference::operator=((uint64_t)&v76, (turi::gl_sarray *)&v74);
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
      if (v79 < 0)
        operator delete(v78);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v76);
      switch(v74.__r_.__value_.__s.__data_[12])
      {
        case 2:
          v16 = (unint64_t *)v74.__r_.__value_.__r.__words[0];
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
          {
            v19 = v74.__r_.__value_.__r.__words[0];
            if (v74.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v74.__r_.__value_.__r.__words[0] + 31) < 0)
                operator delete(*(void **)(v74.__r_.__value_.__r.__words[0] + 8));
              v20 = (_QWORD *)v19;
              v21 = 0x1012C404EF22A49;
              goto LABEL_62;
            }
          }
          break;
        case 3:
          v31 = (unint64_t *)v74.__r_.__value_.__r.__words[0];
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = v74.__r_.__value_.__r.__words[0];
            if (v74.__r_.__value_.__r.__words[0])
            {
              v35 = *(void **)(v74.__r_.__value_.__r.__words[0] + 8);
              if (v35)
              {
                *(_QWORD *)(v74.__r_.__value_.__r.__words[0] + 16) = v35;
                operator delete(v35);
              }
              v20 = (_QWORD *)v34;
              v21 = 0x1080C409938AC02;
              goto LABEL_62;
            }
          }
          break;
        case 4:
          v23 = (unint64_t *)v74.__r_.__value_.__r.__words[0];
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            v26 = v74.__r_.__value_.__r.__words[0];
            if (v74.__r_.__value_.__r.__words[0])
            {
              v76.__r_.__value_.__r.__words[0] = v74.__r_.__value_.__r.__words[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
              goto LABEL_55;
            }
          }
          break;
        case 5:
          v36 = (unint64_t *)v74.__r_.__value_.__r.__words[0];
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v26 = v74.__r_.__value_.__r.__words[0];
            if (v74.__r_.__value_.__r.__words[0])
            {
              v76.__r_.__value_.__r.__words[0] = v74.__r_.__value_.__r.__words[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
LABEL_55:
              v20 = (_QWORD *)v26;
              v21 = 0x1020C405E66F15BLL;
              goto LABEL_62;
            }
          }
          break;
        case 8:
          v39 = (unint64_t *)v74.__r_.__value_.__r.__words[0];
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (!v41)
          {
            v42 = v74.__r_.__value_.__r.__words[0];
            if (v74.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((unsigned int **)(v74.__r_.__value_.__r.__words[0] + 16));
              v20 = (_QWORD *)v42;
              v30 = -235920773;
              goto LABEL_61;
            }
          }
          break;
        case 9:
          v27 = (unint64_t *)v74.__r_.__value_.__r.__words[0];
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29 && v74.__r_.__value_.__r.__words[0])
          {
            v20 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v74.__r_.__value_.__l.__data_);
            v30 = 2071181815;
LABEL_61:
            v21 = v30 | 0x1030C4000000000;
LABEL_62:
            MEMORY[0x219A19A08](v20, v21);
          }
          break;
        default:
          break;
      }
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v74 = *(std::string *)a3;
      memset(&v76, 0, sizeof(v76));
      __p = &v76;
      v66 = 0;
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
      v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__r.__words[0] + 24;
      v76.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v76.__r_.__value_.__r.__words[2], (__int128 *)&v74, &v75, (std::string *)v76.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__p, "left");
      turi::gl_sframe::join(a1, (uint64_t)v69, (std::string **)&v76, (uint64_t)&__p, a5);
      if (SHIBYTE(v67) < 0)
        operator delete(__p);
      __p = &v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      turi::gl_sframe::operator[]((uint64_t)a5, (uint64_t)&v68, (turi::gl_sarray *)&v76);
      turi::gl_sarray::operator==((uint64_t)&v76, (uint64_t)&turi::FLEX_UNDEFINED, (uint64_t)&v74);
      turi::gl_sframe::operator[]((uint64_t)a5, (uint64_t)&v74, &__p);
      turi::gl_sframe::operator=((uint64_t)a5, (uint64_t)&__p);
      __p = off_24D91E9C0;
      v43 = v67;
      if (v67)
      {
        p_shared_owners = (unint64_t *)&v67->__shared_owners_;
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v74);
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)off_24D91EA30;
      if (v79 < 0)
        operator delete(v78);
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v76);
      turi::gl_sframe::remove_column((uint64_t)a5, (unsigned __int8 **)&v68);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      {
        v22 = (void *)v68.__r_.__value_.__r.__words[0];
        goto LABEL_79;
      }
      goto LABEL_80;
    }
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v74 = *(std::string *)a3;
  memset(&v76, 0, sizeof(v76));
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
  v68.__r_.__value_.__s.__data_[8] = 0;
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v76.__r_.__value_.__l.__size_ = v76.__r_.__value_.__r.__words[0];
  v76.__r_.__value_.__r.__words[2] = v76.__r_.__value_.__r.__words[0] + 24;
  v76.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v76.__r_.__value_.__r.__words[2], (__int128 *)&v74, &v75, (std::string *)v76.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v68, "inner");
  turi::gl_sframe::join(a1, (uint64_t)v69, (std::string **)&v76, (uint64_t)&v68, a5);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    v22 = (void *)v74.__r_.__value_.__r.__words[0];
LABEL_79:
    operator delete(v22);
  }
LABEL_80:
  v69[0] = off_24D91E9C0;
  v46 = v70;
  if (v70)
  {
    v47 = (unint64_t *)&v70->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v71, v72);
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
}

